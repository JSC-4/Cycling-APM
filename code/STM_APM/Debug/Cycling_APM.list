
Cycling_APM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  0800d690  0800d690  0001d690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e04c  0800e04c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e04c  0800e04c  0001e04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e054  0800e054  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e054  0800e054  0001e054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e058  0800e058  0001e058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028d4  200001f4  0800e250  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ac8  0800e250  00022ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1d3  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb0  00000000  00000000  0003d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00040fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00042910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ea8  00000000  00000000  000440c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211a2  00000000  00000000  00068f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d22d2  00000000  00000000  0008a10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c3dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c90  00000000  00000000  0015c42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d678 	.word	0x0800d678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800d678 	.word	0x0800d678

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <dfr_initialise>:
#include "dfr_no2_co.h"             // Include header file for dfr sensor

HAL_StatusTypeDef dfr_initialise(dfr_data *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->no2 = 0;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
	dev->co = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	dev->r0_ox = 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	839a      	strh	r2, [r3, #28]
	dev->r0_red = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	83da      	strh	r2, [r3, #30]
	dev->oxData = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	841a      	strh	r2, [r3, #32]
	dev->redData = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	845a      	strh	r2, [r3, #34]	; 0x22
	dev->powerData = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	849a      	strh	r2, [r3, #36]	; 0x24
	dev->RS_R0_RED_data = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
	dev->RS_R0_OX_data = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c

	return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <getGasData>:

/* Take a measurement, and get the readings for NO2 and CO */
HAL_StatusTypeDef getGasData(dfr_data *dev)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	status = getSensorData(dev);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fada 	bl	80015aa <getSensorData>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_ERROR)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <getGasData+0x1c>
    {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e030      	b.n	8001066 <getGasData+0x7e>
    }
    dev->no2 = getNitrogenDioxide(dev);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f833 	bl	8001070 <getNitrogenDioxide>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->co = getCarbonMonoxide(dev);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f88f 	bl	8001138 <getCarbonMonoxide>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->ch4 = getMethane(dev);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f8e3 	bl	80011f0 <getMethane>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	edc3 7a03 	vstr	s15, [r3, #12]
    dev->c2h5oh = getEthanol(dev);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f93b 	bl	80012b0 <getEthanol>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->h2 = getHydrogen(dev);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f98f 	bl	8001368 <getHydrogen>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->nh3 = getAmmonia(dev);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f9e3 	bl	8001420 <getAmmonia>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edc3 7a06 	vstr	s15, [r3, #24]

    return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <getNitrogenDioxide>:

/* Convert  measurement for NO2*/
float getNitrogenDioxide(dfr_data *dev)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    if (dev->RS_R0_OX_data < 1.1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa63 	bl	8000548 <__aeabi_f2d>
 8001082:	a324      	add	r3, pc, #144	; (adr r3, 8001114 <getNitrogenDioxide+0xa4>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fd28 	bl	8000adc <__aeabi_dcmplt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <getNitrogenDioxide+0x28>
        return 0;
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e034      	b.n	8001102 <getNitrogenDioxide+0x92>
    float nitrogendioxide = (dev->RS_R0_OX_data - 0.045) / 6.13;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	a31e      	add	r3, pc, #120	; (adr r3, 800111c <getNitrogenDioxide+0xac>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff f8ee 	bl	8000288 <__aeabi_dsub>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	a31b      	add	r3, pc, #108	; (adr r3, 8001124 <getNitrogenDioxide+0xb4>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fbc7 	bl	800084c <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd8f 	bl	8000be8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
    if (nitrogendioxide < 0.1)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fa3a 	bl	8000548 <__aeabi_f2d>
 80010d4:	a315      	add	r3, pc, #84	; (adr r3, 800112c <getNitrogenDioxide+0xbc>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fcff 	bl	8000adc <__aeabi_dcmplt>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <getNitrogenDioxide+0x7a>
        return 0.0;
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e00b      	b.n	8001102 <getNitrogenDioxide+0x92>
    if (nitrogendioxide > 10.0)
 80010ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	dd01      	ble.n	8001100 <getNitrogenDioxide+0x90>
        return 10.0;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <getNitrogenDioxide+0xa0>)
 80010fe:	e000      	b.n	8001102 <getNitrogenDioxide+0x92>
    return nitrogendioxide;
 8001100:	68fb      	ldr	r3, [r7, #12]
}
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	41200000 	.word	0x41200000
 8001114:	9999999a 	.word	0x9999999a
 8001118:	3ff19999 	.word	0x3ff19999
 800111c:	70a3d70a 	.word	0x70a3d70a
 8001120:	3fa70a3d 	.word	0x3fa70a3d
 8001124:	b851eb85 	.word	0xb851eb85
 8001128:	4018851e 	.word	0x4018851e
 800112c:	9999999a 	.word	0x9999999a
 8001130:	3fb99999 	.word	0x3fb99999
 8001134:	00000000 	.word	0x00000000

08001138 <getCarbonMonoxide>:

/* Convert measurement for CO*/
float getCarbonMonoxide(dfr_data *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    if (dev->RS_R0_RED_data > 0.425)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9ff 	bl	8000548 <__aeabi_f2d>
 800114a:	a325      	add	r3, pc, #148	; (adr r3, 80011e0 <getCarbonMonoxide+0xa8>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <getCarbonMonoxide+0x28>
        return 0.0;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e034      	b.n	80011ca <getCarbonMonoxide+0x92>
    float co = (0.425 - dev->RS_R0_RED_data) / 0.000405;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9ef 	bl	8000548 <__aeabi_f2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	a11c      	add	r1, pc, #112	; (adr r1, 80011e0 <getCarbonMonoxide+0xa8>)
 8001170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001174:	f7ff f888 	bl	8000288 <__aeabi_dsub>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	a319      	add	r3, pc, #100	; (adr r3, 80011e8 <getCarbonMonoxide+0xb0>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fb61 	bl	800084c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd29 	bl	8000be8 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	60fb      	str	r3, [r7, #12]
    if (co > 1000.0)
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80011d8 <getCarbonMonoxide+0xa0>
 80011a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	dd01      	ble.n	80011b0 <getCarbonMonoxide+0x78>
        return 1000.0;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <getCarbonMonoxide+0xa4>)
 80011ae:	e00c      	b.n	80011ca <getCarbonMonoxide+0x92>
    if (co < 1.0)
 80011b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d502      	bpl.n	80011c8 <getCarbonMonoxide+0x90>
        return 0.0;
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	e000      	b.n	80011ca <getCarbonMonoxide+0x92>
    return co;
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb0 0a67 	vmov.f32	s0, s15
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	447a0000 	.word	0x447a0000
 80011dc:	447a0000 	.word	0x447a0000
 80011e0:	33333333 	.word	0x33333333
 80011e4:	3fdb3333 	.word	0x3fdb3333
 80011e8:	c13fd0d0 	.word	0xc13fd0d0
 80011ec:	3f3a8ac5 	.word	0x3f3a8ac5

080011f0 <getMethane>:

float getMethane(dfr_data *dev)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.786)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	a326      	add	r3, pc, #152	; (adr r3, 800129c <getMethane+0xac>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <getMethane+0x28>
    return 0.0;
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	e034      	b.n	8001282 <getMethane+0x92>
  float methane = (0.786 - dev->RS_R0_RED_data) / 0.000023;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f993 	bl	8000548 <__aeabi_f2d>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	a11d      	add	r1, pc, #116	; (adr r1, 800129c <getMethane+0xac>)
 8001228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800122c:	f7ff f82c 	bl	8000288 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	a31a      	add	r3, pc, #104	; (adr r3, 80012a4 <getMethane+0xb4>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fccd 	bl	8000be8 <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	60fb      	str	r3, [r7, #12]
  if(methane < 1000.0) methane = 0.0;
 8001252:	edd7 7a03 	vldr	s15, [r7, #12]
 8001256:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001290 <getMethane+0xa0>
 800125a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	d502      	bpl.n	800126a <getMethane+0x7a>
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  if(methane > 25000.0) methane = 25000.0;
 800126a:	edd7 7a03 	vldr	s15, [r7, #12]
 800126e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001294 <getMethane+0xa4>
 8001272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	dd01      	ble.n	8001280 <getMethane+0x90>
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <getMethane+0xa8>)
 800127e:	60fb      	str	r3, [r7, #12]
  return methane;
 8001280:	68fb      	ldr	r3, [r7, #12]
}
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	447a0000 	.word	0x447a0000
 8001294:	46c35000 	.word	0x46c35000
 8001298:	46c35000 	.word	0x46c35000
 800129c:	78d4fdf4 	.word	0x78d4fdf4
 80012a0:	3fe926e9 	.word	0x3fe926e9
 80012a4:	f705857b 	.word	0xf705857b
 80012a8:	3ef81e03 	.word	0x3ef81e03
 80012ac:	00000000 	.word	0x00000000

080012b0 <getEthanol>:

float getEthanol(dfr_data *dev)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.306)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	a325      	add	r3, pc, #148	; (adr r3, 8001358 <getEthanol+0xa8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <getEthanol+0x28>
    return 0.0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e034      	b.n	8001342 <getEthanol+0x92>
  float ethanol = (0.306 - dev->RS_R0_RED_data) / 0.00057;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	a11c      	add	r1, pc, #112	; (adr r1, 8001358 <getEthanol+0xa8>)
 80012e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ec:	f7fe ffcc 	bl	8000288 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	a319      	add	r3, pc, #100	; (adr r3, 8001360 <getEthanol+0xb0>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff faa5 	bl	800084c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fc6d 	bl	8000be8 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	60fb      	str	r3, [r7, #12]
  if(ethanol < 10.0)
 8001312:	edd7 7a03 	vldr	s15, [r7, #12]
 8001316:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800131a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	d502      	bpl.n	800132a <getEthanol+0x7a>
    return 0.0;
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e00b      	b.n	8001342 <getEthanol+0x92>
  if(ethanol > 500.0)
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001350 <getEthanol+0xa0>
 8001332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	dd01      	ble.n	8001340 <getEthanol+0x90>
    return 500.0;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <getEthanol+0xa4>)
 800133e:	e000      	b.n	8001342 <getEthanol+0x92>
  return ethanol;
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43fa0000 	.word	0x43fa0000
 8001354:	43fa0000 	.word	0x43fa0000
 8001358:	0624dd2f 	.word	0x0624dd2f
 800135c:	3fd39581 	.word	0x3fd39581
 8001360:	adea8976 	.word	0xadea8976
 8001364:	3f42ad81 	.word	0x3f42ad81

08001368 <getHydrogen>:

float getHydrogen(dfr_data *dev)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.279)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a325      	add	r3, pc, #148	; (adr r3, 8001410 <getHydrogen+0xa8>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <getHydrogen+0x28>
    return 0.0;
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e034      	b.n	80013fa <getHydrogen+0x92>
  float hydrogen = (0.279 - dev->RS_R0_RED_data) / 0.00026;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	a11c      	add	r1, pc, #112	; (adr r1, 8001410 <getHydrogen+0xa8>)
 80013a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013a4:	f7fe ff70 	bl	8000288 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	a319      	add	r3, pc, #100	; (adr r3, 8001418 <getHydrogen+0xb0>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff fa49 	bl	800084c <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fc11 	bl	8000be8 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	60fb      	str	r3, [r7, #12]
  if(hydrogen < 1.0)
 80013ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d502      	bpl.n	80013e2 <getHydrogen+0x7a>
    return 0.0;
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e00b      	b.n	80013fa <getHydrogen+0x92>
  if(hydrogen > 1000.0)
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001408 <getHydrogen+0xa0>
 80013ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	dd01      	ble.n	80013f8 <getHydrogen+0x90>
    return 1000.0;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <getHydrogen+0xa4>)
 80013f6:	e000      	b.n	80013fa <getHydrogen+0x92>
  return hydrogen;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	447a0000 	.word	0x447a0000
 800140c:	447a0000 	.word	0x447a0000
 8001410:	d0e56042 	.word	0xd0e56042
 8001414:	3fd1db22 	.word	0x3fd1db22
 8001418:	7f38c543 	.word	0x7f38c543
 800141c:	3f310a13 	.word	0x3f310a13

08001420 <getAmmonia>:

float getAmmonia(dfr_data *dev)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.8)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	a325      	add	r3, pc, #148	; (adr r3, 80014c8 <getAmmonia+0xa8>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <getAmmonia+0x28>
    return 0.0;
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	e034      	b.n	80014b2 <getAmmonia+0x92>
  float ammonia = (0.8 - dev->RS_R0_RED_data) / 0.0015;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	a11c      	add	r1, pc, #112	; (adr r1, 80014c8 <getAmmonia+0xa8>)
 8001458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800145c:	f7fe ff14 	bl	8000288 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a319      	add	r3, pc, #100	; (adr r3, 80014d0 <getAmmonia+0xb0>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f9ed 	bl	800084c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fbb5 	bl	8000be8 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]
  if(ammonia < 1.0)
 8001482:	edd7 7a03 	vldr	s15, [r7, #12]
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800148a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d502      	bpl.n	800149a <getAmmonia+0x7a>
    return 0.0;
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e00b      	b.n	80014b2 <getAmmonia+0x92>
  if(ammonia > 500.0)
 800149a:	edd7 7a03 	vldr	s15, [r7, #12]
 800149e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80014c0 <getAmmonia+0xa0>
 80014a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	dd01      	ble.n	80014b0 <getAmmonia+0x90>
    return 500.0;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <getAmmonia+0xa4>)
 80014ae:	e000      	b.n	80014b2 <getAmmonia+0x92>
  return ammonia;
 80014b0:	68fb      	ldr	r3, [r7, #12]
}
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	43fa0000 	.word	0x43fa0000
 80014c4:	43fa0000 	.word	0x43fa0000
 80014c8:	9999999a 	.word	0x9999999a
 80014cc:	3fe99999 	.word	0x3fe99999
 80014d0:	bc6a7efa 	.word	0xbc6a7efa
 80014d4:	3f589374 	.word	0x3f589374

080014d8 <dfrWakeUp>:

/* Check if device is in sleep state */
HAL_StatusTypeDef dfrWakeUp(dfr_data *dev)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
    uint8_t mode[1] = {0x00};
 80014e0:	2300      	movs	r3, #0
 80014e2:	733b      	strb	r3, [r7, #12]
    uint8_t regData[2] = {POWER_MODE_REGISTER, WAKE_UP_MODE};
 80014e4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80014e8:	813b      	strh	r3, [r7, #8]

    /* Set the address pointer to power mode register */
    status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x78 << 1), regData, 1,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f107 0208 	add.w	r2, r7, #8
 80014f2:	2332      	movs	r3, #50	; 0x32
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	21f0      	movs	r1, #240	; 0xf0
 80014fa:	f002 f97f 	bl	80037fc <HAL_I2C_Master_Transmit>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
			50);
    if (status != 0)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <dfrWakeUp+0x34>
    {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e025      	b.n	8001558 <dfrWakeUp+0x80>
    }

    /* Read current power mode setting */
    status = HAL_I2C_Master_Receive(dev->i2cHandle, (0x78 << 1) | 0x01, mode, 1,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f107 020c 	add.w	r2, r7, #12
 8001514:	2332      	movs	r3, #50	; 0x32
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	21f1      	movs	r1, #241	; 0xf1
 800151c:	f002 fa62 	bl	80039e4 <HAL_I2C_Master_Receive>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
			50);
    if (status != 0)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <dfrWakeUp+0x56>
    {
//        printf("Failed to write I2C device address for getting sensor data (err %i)\n", ret);
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e014      	b.n	8001558 <dfrWakeUp+0x80>
    }

    /* Device is sleeping*/
    if (mode[0] == 0)
 800152e:	7b3b      	ldrb	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d110      	bne.n	8001556 <dfrWakeUp+0x7e>
    {

        status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x78 << 1), regData, 2,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	2332      	movs	r3, #50	; 0x32
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	21f0      	movs	r1, #240	; 0xf0
 8001544:	f002 f95a 	bl	80037fc <HAL_I2C_Master_Transmit>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
    			50);
        if (status != 0)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <dfrWakeUp+0x7e>
        {
            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <dfrWakeUp+0x80>
    }
    else
    {
//        printf("Device is woken up\n");
    }
    return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <dfrWarmUpData>:

HAL_StatusTypeDef dfrWarmUpData(dfr_data *dev)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	status = getSensorData(dev);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f81e 	bl	80015aa <getSensorData>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_ERROR)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <dfrWarmUpData+0x1c>
    {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e012      	b.n	80015a2 <dfrWarmUpData+0x42>
    }

    /* Calculate oxsiding and reducing values */
    dev->r0_ox = dev->powerData - dev->oxData;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	8c1b      	ldrh	r3, [r3, #32]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	839a      	strh	r2, [r3, #28]
    dev->r0_red = dev->powerData - dev->redData;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	b21a      	sxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	83da      	strh	r2, [r3, #30]

    return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <getSensorData>:

/* Read sensor for measurements */
int16_t getSensorData(dfr_data *dev)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b08c      	sub	sp, #48	; 0x30
 80015ae:	af04      	add	r7, sp, #16
 80015b0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
//    uint8_t buf[1] = {OX_REGISTER_HIGH};
    uint8_t recv_data[20] = {0x00};
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]

    status = HAL_I2C_Mem_Read(dev->i2cHandle, (0x78 << 1), 0x04, I2C_MEMADD_SIZE_8BIT, recv_data, 6, 100);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2306      	movs	r3, #6
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	2204      	movs	r2, #4
 80015da:	21f0      	movs	r1, #240	; 0xf0
 80015dc:	f002 faf8 	bl	8003bd0 <HAL_I2C_Mem_Read>
 80015e0:	4603      	mov	r3, r0
 80015e2:	77fb      	strb	r3, [r7, #31]
    /* Set the address pointer to OX_REGISTER_HIGH */
//    status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x78 << 1), buf, 1,
//			50);
    if (status != 0)
 80015e4:	7ffb      	ldrb	r3, [r7, #31]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <getSensorData+0x44>
    {
//        printf("Failed to write I2C device address for getting sensor data (err %i)\n", ret);
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e04a      	b.n	8001684 <getSensorData+0xda>
////        printf("Failed to write I2C device address for getting sensor data (err %i)\n", ret);
//        return HAL_ERROR;
//    }

    /* Shift high and low data in the buffer */
    dev->oxData = (((uint16_t)recv_data[0] << 8) + (uint16_t)recv_data[1]);
 80015ee:	7a3b      	ldrb	r3, [r7, #8]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	7a7b      	ldrb	r3, [r7, #9]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	841a      	strh	r2, [r3, #32]
    dev->redData = (((uint16_t)recv_data[2] << 8) + (uint16_t)recv_data[3]);
 8001602:	7abb      	ldrb	r3, [r7, #10]
 8001604:	b29b      	uxth	r3, r3
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b29a      	uxth	r2, r3
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4413      	add	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	845a      	strh	r2, [r3, #34]	; 0x22
    dev->powerData = (((uint16_t)recv_data[4] << 8) + (uint16_t)recv_data[5]);
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	b29b      	uxth	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b29a      	uxth	r2, r3
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b29a      	uxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	849a      	strh	r2, [r3, #36]	; 0x24

    // printf("__r0_ox = %d, __r0_red = %d, powerData = %d, oxData = %d, redData = %d\n", data->r0_ox, data->r0_red, data->powerData, data->oxData, data->redData);

    dev->RS_R0_RED_data = (float)(dev->powerData - dev->redData) / (float)dev->r0_red;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    dev->RS_R0_OX_data = (float)(dev->powerData - dev->oxData) / (float)dev->r0_ox;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	8c1b      	ldrh	r3, [r3, #32]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <DS3231_DecodeBCD>:
int bcd2dec(uint8_t b)
{
	return b = ((b / 16) * 10 + (b % 16));
}

uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	b2db      	uxtb	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <ds3231_initialise>:
int dec2bcd(char d) {
	return (((d / 10) << 4) | (d % 10));
}

HAL_StatusTypeDef ds3231_initialise(ds3231_data *dev,
		I2C_HandleTypeDef *i2cHandle) {
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <getTime>:
	return HAL_OK;
}

/* Method to get the time from the DS3231. The three registers are one after the
 other, so an repeat I2C read can be done. */
HAL_StatusTypeDef getTime(ds3231_data *dev) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	uint8_t cmd[1];
	uint8_t buf[3];

	cmd[0] = DS3231_SECONDS;
 80016e4:	2300      	movs	r3, #0
 80016e6:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Master_Transmit(dev->i2cHandle, (DS3231_ADDR << 1), cmd, 1, 50);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	2332      	movs	r3, #50	; 0x32
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	21d0      	movs	r1, #208	; 0xd0
 80016f8:	f002 f880 	bl	80037fc <HAL_I2C_Master_Transmit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
//	if (status != 0) {
////    	printf("Failed to write I2C device address (err %i)\n", ret);
//		return HAL_TIMEOUT;
//	}

    status = HAL_I2C_Master_Receive(dev->i2cHandle, (DS3231_ADDR << 1), buf, 3,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f107 0208 	add.w	r2, r7, #8
 8001708:	2332      	movs	r3, #50	; 0x32
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2303      	movs	r3, #3
 800170e:	21d0      	movs	r1, #208	; 0xd0
 8001710:	f002 f968 	bl	80039e4 <HAL_I2C_Master_Receive>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]

//	for (int i = 0; i < 3; i++) {
//		bcd2dec(buf[i]);
//	}

	dev->second = DS3231_DecodeBCD(buf[0]);
 8001718:	7a3b      	ldrb	r3, [r7, #8]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffb6 	bl	800168c <DS3231_DecodeBCD>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	711a      	strb	r2, [r3, #4]
	dev->minute = DS3231_DecodeBCD(buf[1]);
 8001728:	7a7b      	ldrb	r3, [r7, #9]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffae 	bl	800168c <DS3231_DecodeBCD>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	715a      	strb	r2, [r3, #5]
	dev->hour = DS3231_DecodeBCD(buf[2]);
 8001738:	7abb      	ldrb	r3, [r7, #10]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffa6 	bl	800168c <DS3231_DecodeBCD>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2108      	movs	r1, #8
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f001 ff8b 	bl	8003678 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f001 fce8 	bl	8003138 <HAL_Delay>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2108      	movs	r1, #8
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f001 ff7e 	bl	8003678 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f001 fcdb 	bl	8003138 <HAL_Delay>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001792:	bf00      	nop
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <SPI_TxByte+0x30>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d1f8      	bne.n	8001794 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80017a2:	1df9      	adds	r1, r7, #7
 80017a4:	2364      	movs	r3, #100	; 0x64
 80017a6:	2201      	movs	r2, #1
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <SPI_TxByte+0x30>)
 80017aa:	f004 f8d6 	bl	800595a <HAL_SPI_Transmit>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000026c 	.word	0x2000026c

080017bc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017c8:	bf00      	nop
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <SPI_TxBuffer+0x30>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d1f8      	bne.n	80017ca <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <SPI_TxBuffer+0x30>)
 80017e0:	f004 f8bb 	bl	800595a <HAL_SPI_Transmit>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000026c 	.word	0x2000026c

080017f0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80017f6:	23ff      	movs	r3, #255	; 0xff
 80017f8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017fa:	bf00      	nop
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <SPI_RxByte+0x34>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d1f8      	bne.n	80017fc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800180a:	1dba      	adds	r2, r7, #6
 800180c:	1df9      	adds	r1, r7, #7
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <SPI_RxByte+0x34>)
 8001816:	f004 fa0e 	bl	8005c36 <HAL_SPI_TransmitReceive>

	return data;
 800181a:	79bb      	ldrb	r3, [r7, #6]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000026c 	.word	0x2000026c

08001828 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001830:	f7ff ffde 	bl	80017f0 <SPI_RxByte>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <SD_ReadyWait+0x30>)
 800184c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001850:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001852:	f7ff ffcd 	bl	80017f0 <SPI_RxByte>
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d003      	beq.n	8001868 <SD_ReadyWait+0x24>
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SD_ReadyWait+0x30>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f4      	bne.n	8001852 <SD_ReadyWait+0xe>

	return res;
 8001868:	79fb      	ldrb	r3, [r7, #7]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000212 	.word	0x20000212

08001878 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800187e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001882:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001884:	f7ff ff72 	bl	800176c <DESELECT>
	for(int i = 0; i < 10; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	e005      	b.n	800189a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800188e:	20ff      	movs	r0, #255	; 0xff
 8001890:	f7ff ff7a 	bl	8001788 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b09      	cmp	r3, #9
 800189e:	ddf6      	ble.n	800188e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80018a0:	f7ff ff57 	bl	8001752 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80018b8:	2395      	movs	r3, #149	; 0x95
 80018ba:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80018bc:	463b      	mov	r3, r7
 80018be:	2106      	movs	r1, #6
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff7b 	bl	80017bc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80018c6:	e002      	b.n	80018ce <SD_PowerOn+0x56>
	{
		cnt--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80018ce:	f7ff ff8f 	bl	80017f0 <SPI_RxByte>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d002      	beq.n	80018de <SD_PowerOn+0x66>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f4      	bne.n	80018c8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80018de:	f7ff ff45 	bl	800176c <DESELECT>
	SPI_TxByte(0XFF);
 80018e2:	20ff      	movs	r0, #255	; 0xff
 80018e4:	f7ff ff50 	bl	8001788 <SPI_TxByte>

	PowerFlag = 1;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <SD_PowerOn+0x80>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000215 	.word	0x20000215

080018fc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <SD_PowerOff+0x14>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000215 	.word	0x20000215

08001914 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <SD_CheckPower+0x14>)
 800191a:	781b      	ldrb	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000215 	.word	0x20000215

0800192c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <SD_RxDataBlock+0x58>)
 8001938:	22c8      	movs	r2, #200	; 0xc8
 800193a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800193c:	f7ff ff58 	bl	80017f0 <SPI_RxByte>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d103      	bne.n	8001952 <SD_RxDataBlock+0x26>
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <SD_RxDataBlock+0x58>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f4      	bne.n	800193c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2bfe      	cmp	r3, #254	; 0xfe
 8001956:	d001      	beq.n	800195c <SD_RxDataBlock+0x30>
 8001958:	2300      	movs	r3, #0
 800195a:	e00f      	b.n	800197c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff60 	bl	8001828 <SPI_RxBytePtr>
	} while(len--);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	603a      	str	r2, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f4      	bne.n	800195c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001972:	f7ff ff3d 	bl	80017f0 <SPI_RxByte>
	SPI_RxByte();
 8001976:	f7ff ff3b 	bl	80017f0 <SPI_RxByte>

	return TRUE;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000210 	.word	0x20000210

08001988 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001998:	f7ff ff54 	bl	8001844 <SD_ReadyWait>
 800199c:	4603      	mov	r3, r0
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d001      	beq.n	80019a6 <SD_TxDataBlock+0x1e>
 80019a2:	2300      	movs	r3, #0
 80019a4:	e02f      	b.n	8001a06 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff feed 	bl	8001788 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	2bfd      	cmp	r3, #253	; 0xfd
 80019b2:	d020      	beq.n	80019f6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80019b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff feff 	bl	80017bc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80019be:	f7ff ff17 	bl	80017f0 <SPI_RxByte>
		SPI_RxByte();
 80019c2:	f7ff ff15 	bl	80017f0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80019c6:	e00b      	b.n	80019e0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80019c8:	f7ff ff12 	bl	80017f0 <SPI_RxByte>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d006      	beq.n	80019e8 <SD_TxDataBlock+0x60>
			i++;
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	3301      	adds	r3, #1
 80019de:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	2b40      	cmp	r3, #64	; 0x40
 80019e4:	d9f0      	bls.n	80019c8 <SD_TxDataBlock+0x40>
 80019e6:	e000      	b.n	80019ea <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80019e8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80019ea:	bf00      	nop
 80019ec:	f7ff ff00 	bl	80017f0 <SPI_RxByte>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0fa      	beq.n	80019ec <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d101      	bne.n	8001a04 <SD_TxDataBlock+0x7c>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	6039      	str	r1, [r7, #0]
 8001a18:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001a1a:	f7ff ff13 	bl	8001844 <SD_ReadyWait>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d001      	beq.n	8001a28 <SD_SendCmd+0x1a>
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	e042      	b.n	8001aae <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff feac 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	0e1b      	lsrs	r3, r3, #24
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fea6 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fea0 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fe9a 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fe95 	bl	8001788 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d102      	bne.n	8001a6a <SD_SendCmd+0x5c>
 8001a64:	2395      	movs	r3, #149	; 0x95
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e007      	b.n	8001a7a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b48      	cmp	r3, #72	; 0x48
 8001a6e:	d102      	bne.n	8001a76 <SD_SendCmd+0x68>
 8001a70:	2387      	movs	r3, #135	; 0x87
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <SD_SendCmd+0x6c>
	else crc = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe83 	bl	8001788 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b4c      	cmp	r3, #76	; 0x4c
 8001a86:	d101      	bne.n	8001a8c <SD_SendCmd+0x7e>
 8001a88:	f7ff feb2 	bl	80017f0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001a90:	f7ff feae 	bl	80017f0 <SPI_RxByte>
 8001a94:	4603      	mov	r3, r0
 8001a96:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001a98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da05      	bge.n	8001aac <SD_SendCmd+0x9e>
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	73bb      	strb	r3, [r7, #14]
 8001aa6:	7bbb      	ldrb	r3, [r7, #14]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f1      	bne.n	8001a90 <SD_SendCmd+0x82>

	return res;
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SD_disk_initialize+0x14>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0d1      	b.n	8001c70 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <SD_disk_initialize+0x2a>
 8001ada:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	e0c6      	b.n	8001c70 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001ae2:	f7ff fec9 	bl	8001878 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001ae6:	f7ff fe34 	bl	8001752 <SELECT>

	/* check disk type */
	type = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001aee:	2100      	movs	r1, #0
 8001af0:	2040      	movs	r0, #64	; 0x40
 8001af2:	f7ff ff8c 	bl	8001a0e <SD_SendCmd>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 80a1 	bne.w	8001c40 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b04:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b0a:	2048      	movs	r0, #72	; 0x48
 8001b0c:	f7ff ff7f 	bl	8001a0e <SD_SendCmd>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d155      	bne.n	8001bc2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e00c      	b.n	8001b36 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001b1c:	7bfc      	ldrb	r4, [r7, #15]
 8001b1e:	f7ff fe67 	bl	80017f0 <SPI_RxByte>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	f104 0310 	add.w	r3, r4, #16
 8001b2a:	443b      	add	r3, r7
 8001b2c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d9ef      	bls.n	8001b1c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b3c:	7abb      	ldrb	r3, [r7, #10]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d17e      	bne.n	8001c40 <SD_disk_initialize+0x188>
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	2baa      	cmp	r3, #170	; 0xaa
 8001b46:	d17b      	bne.n	8001c40 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2077      	movs	r0, #119	; 0x77
 8001b4c:	f7ff ff5f 	bl	8001a0e <SD_SendCmd>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d807      	bhi.n	8001b66 <SD_disk_initialize+0xae>
 8001b56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b5a:	2069      	movs	r0, #105	; 0x69
 8001b5c:	f7ff ff57 	bl	8001a0e <SD_SendCmd>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ec      	bne.n	8001b48 <SD_disk_initialize+0x90>
 8001b6e:	e000      	b.n	8001b72 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b70:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d062      	beq.n	8001c40 <SD_disk_initialize+0x188>
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	207a      	movs	r0, #122	; 0x7a
 8001b7e:	f7ff ff46 	bl	8001a0e <SD_SendCmd>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d15b      	bne.n	8001c40 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e00c      	b.n	8001ba8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001b8e:	7bfc      	ldrb	r4, [r7, #15]
 8001b90:	f7ff fe2e 	bl	80017f0 <SPI_RxByte>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	f104 0310 	add.w	r3, r4, #16
 8001b9c:	443b      	add	r3, r7
 8001b9e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d9ef      	bls.n	8001b8e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001bae:	7a3b      	ldrb	r3, [r7, #8]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SD_disk_initialize+0x104>
 8001bb8:	230c      	movs	r3, #12
 8001bba:	e000      	b.n	8001bbe <SD_disk_initialize+0x106>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	73bb      	strb	r3, [r7, #14]
 8001bc0:	e03e      	b.n	8001c40 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2077      	movs	r0, #119	; 0x77
 8001bc6:	f7ff ff22 	bl	8001a0e <SD_SendCmd>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d808      	bhi.n	8001be2 <SD_disk_initialize+0x12a>
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2069      	movs	r0, #105	; 0x69
 8001bd4:	f7ff ff1b 	bl	8001a0e <SD_SendCmd>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d801      	bhi.n	8001be2 <SD_disk_initialize+0x12a>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e000      	b.n	8001be4 <SD_disk_initialize+0x12c>
 8001be2:	2301      	movs	r3, #1
 8001be4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d10e      	bne.n	8001c0a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001bec:	2100      	movs	r1, #0
 8001bee:	2077      	movs	r0, #119	; 0x77
 8001bf0:	f7ff ff0d 	bl	8001a0e <SD_SendCmd>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d80e      	bhi.n	8001c18 <SD_disk_initialize+0x160>
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2069      	movs	r0, #105	; 0x69
 8001bfe:	f7ff ff06 	bl	8001a0e <SD_SendCmd>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <SD_disk_initialize+0x160>
 8001c08:	e00c      	b.n	8001c24 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2041      	movs	r0, #65	; 0x41
 8001c0e:	f7ff fefe 	bl	8001a0e <SD_SendCmd>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e2      	bne.n	8001be6 <SD_disk_initialize+0x12e>
 8001c20:	e000      	b.n	8001c24 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c22:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <SD_disk_initialize+0x184>
 8001c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c30:	2050      	movs	r0, #80	; 0x50
 8001c32:	f7ff feec 	bl	8001a0e <SD_SendCmd>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SD_disk_initialize+0x188>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <SD_disk_initialize+0x1c8>)
 8001c42:	7bbb      	ldrb	r3, [r7, #14]
 8001c44:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001c46:	f7ff fd91 	bl	800176c <DESELECT>
	SPI_RxByte();
 8001c4a:	f7ff fdd1 	bl	80017f0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001c4e:	7bbb      	ldrb	r3, [r7, #14]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e001      	b.n	8001c6a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c66:	f7ff fe49 	bl	80018fc <SD_PowerOff>
	}

	return Stat;
 8001c6a:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000210 	.word	0x20000210
 8001c80:	20000214 	.word	0x20000214

08001c84 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SD_disk_status+0x14>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e002      	b.n	8001c9e <SD_disk_status+0x1a>
	return Stat;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SD_disk_status+0x28>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000

08001cb0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <SD_disk_read+0x1c>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <SD_disk_read+0x20>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e051      	b.n	8001d74 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <SD_disk_read+0xcc>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SD_disk_read+0x32>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e048      	b.n	8001d74 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <SD_disk_read+0xd0>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <SD_disk_read+0x44>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	607b      	str	r3, [r7, #4]

	SELECT();
 8001cf4:	f7ff fd2d 	bl	8001752 <SELECT>

	if (count == 1)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d111      	bne.n	8001d22 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	2051      	movs	r0, #81	; 0x51
 8001d02:	f7ff fe84 	bl	8001a0e <SD_SendCmd>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d129      	bne.n	8001d60 <SD_disk_read+0xb0>
 8001d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d10:	68b8      	ldr	r0, [r7, #8]
 8001d12:	f7ff fe0b 	bl	800192c <SD_RxDataBlock>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d021      	beq.n	8001d60 <SD_disk_read+0xb0>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	e01e      	b.n	8001d60 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	2052      	movs	r0, #82	; 0x52
 8001d26:	f7ff fe72 	bl	8001a0e <SD_SendCmd>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d117      	bne.n	8001d60 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f7ff fdf9 	bl	800192c <SD_RxDataBlock>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00a      	beq.n	8001d56 <SD_disk_read+0xa6>
				buff += 512;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d46:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ed      	bne.n	8001d30 <SD_disk_read+0x80>
 8001d54:	e000      	b.n	8001d58 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d56:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001d58:	2100      	movs	r1, #0
 8001d5a:	204c      	movs	r0, #76	; 0x4c
 8001d5c:	f7ff fe57 	bl	8001a0e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001d60:	f7ff fd04 	bl	800176c <DESELECT>
	SPI_RxByte();
 8001d64:	f7ff fd44 	bl	80017f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000214 	.word	0x20000214

08001d84 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <SD_disk_write+0x1c>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <SD_disk_write+0x20>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e06b      	b.n	8001e7c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001da4:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <SD_disk_write+0x100>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <SD_disk_write+0x32>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e062      	b.n	8001e7c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <SD_disk_write+0x100>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SD_disk_write+0x44>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e059      	b.n	8001e7c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <SD_disk_write+0x104>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <SD_disk_write+0x56>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	025b      	lsls	r3, r3, #9
 8001dd8:	607b      	str	r3, [r7, #4]

	SELECT();
 8001dda:	f7ff fcba 	bl	8001752 <SELECT>

	if (count == 1)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d110      	bne.n	8001e06 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	2058      	movs	r0, #88	; 0x58
 8001de8:	f7ff fe11 	bl	8001a0e <SD_SendCmd>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d13a      	bne.n	8001e68 <SD_disk_write+0xe4>
 8001df2:	21fe      	movs	r1, #254	; 0xfe
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f7ff fdc7 	bl	8001988 <SD_TxDataBlock>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d033      	beq.n	8001e68 <SD_disk_write+0xe4>
			count = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	e030      	b.n	8001e68 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <SD_disk_write+0x104>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001e12:	2100      	movs	r1, #0
 8001e14:	2077      	movs	r0, #119	; 0x77
 8001e16:	f7ff fdfa 	bl	8001a0e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	2057      	movs	r0, #87	; 0x57
 8001e1e:	f7ff fdf6 	bl	8001a0e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	2059      	movs	r0, #89	; 0x59
 8001e26:	f7ff fdf2 	bl	8001a0e <SD_SendCmd>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11b      	bne.n	8001e68 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e30:	21fc      	movs	r1, #252	; 0xfc
 8001e32:	68b8      	ldr	r0, [r7, #8]
 8001e34:	f7ff fda8 	bl	8001988 <SD_TxDataBlock>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <SD_disk_write+0xd0>
				buff += 512;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e44:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ee      	bne.n	8001e30 <SD_disk_write+0xac>
 8001e52:	e000      	b.n	8001e56 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e54:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001e56:	21fd      	movs	r1, #253	; 0xfd
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fd95 	bl	8001988 <SD_TxDataBlock>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001e68:	f7ff fc80 	bl	800176c <DESELECT>
	SPI_RxByte();
 8001e6c:	f7ff fcc0 	bl	80017f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000214 	.word	0x20000214

08001e8c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	603a      	str	r2, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <SD_disk_ioctl+0x1e>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e115      	b.n	80020d6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d124      	bne.n	8001f00 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d012      	beq.n	8001ee4 <SD_disk_ioctl+0x58>
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	dc1a      	bgt.n	8001ef8 <SD_disk_ioctl+0x6c>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <SD_disk_ioctl+0x40>
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d006      	beq.n	8001ed8 <SD_disk_ioctl+0x4c>
 8001eca:	e015      	b.n	8001ef8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001ecc:	f7ff fd16 	bl	80018fc <SD_PowerOff>
			res = RES_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ed6:	e0fc      	b.n	80020d2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001ed8:	f7ff fcce 	bl	8001878 <SD_PowerOn>
			res = RES_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ee2:	e0f6      	b.n	80020d2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	1c5c      	adds	r4, r3, #1
 8001ee8:	f7ff fd14 	bl	8001914 <SD_CheckPower>
 8001eec:	4603      	mov	r3, r0
 8001eee:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ef6:	e0ec      	b.n	80020d2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001efe:	e0e8      	b.n	80020d2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f00:	4b77      	ldr	r3, [pc, #476]	; (80020e0 <SD_disk_ioctl+0x254>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SD_disk_ioctl+0x86>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0e1      	b.n	80020d6 <SD_disk_ioctl+0x24a>

		SELECT();
 8001f12:	f7ff fc1e 	bl	8001752 <SELECT>

		switch (ctrl)
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	2b0d      	cmp	r3, #13
 8001f1a:	f200 80cb 	bhi.w	80020b4 <SD_disk_ioctl+0x228>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <SD_disk_ioctl+0x98>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	0800201f 	.word	0x0800201f
 8001f28:	08001f5d 	.word	0x08001f5d
 8001f2c:	0800200f 	.word	0x0800200f
 8001f30:	080020b5 	.word	0x080020b5
 8001f34:	080020b5 	.word	0x080020b5
 8001f38:	080020b5 	.word	0x080020b5
 8001f3c:	080020b5 	.word	0x080020b5
 8001f40:	080020b5 	.word	0x080020b5
 8001f44:	080020b5 	.word	0x080020b5
 8001f48:	080020b5 	.word	0x080020b5
 8001f4c:	080020b5 	.word	0x080020b5
 8001f50:	08002031 	.word	0x08002031
 8001f54:	08002055 	.word	0x08002055
 8001f58:	08002079 	.word	0x08002079
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2049      	movs	r0, #73	; 0x49
 8001f60:	f7ff fd55 	bl	8001a0e <SD_SendCmd>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80a8 	bne.w	80020bc <SD_disk_ioctl+0x230>
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2110      	movs	r1, #16
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fcda 	bl	800192c <SD_RxDataBlock>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 809e 	beq.w	80020bc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d10e      	bne.n	8001fa8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f8a:	7d7b      	ldrb	r3, [r7, #21]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	7d3b      	ldrb	r3, [r7, #20]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001f9e:	8bfb      	ldrh	r3, [r7, #30]
 8001fa0:	029a      	lsls	r2, r3, #10
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e02e      	b.n	8002006 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fa8:	7c7b      	ldrb	r3, [r7, #17]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	09db      	lsrs	r3, r3, #7
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	7d7b      	ldrb	r3, [r7, #21]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f003 0306 	and.w	r3, r3, #6
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	3302      	adds	r3, #2
 8001fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001fd0:	7d3b      	ldrb	r3, [r7, #20]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	7cbb      	ldrb	r3, [r7, #18]
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ff8:	8bfa      	ldrh	r2, [r7, #30]
 8001ffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ffe:	3b09      	subs	r3, #9
 8002000:	409a      	lsls	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800200c:	e056      	b.n	80020bc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002014:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800201c:	e055      	b.n	80020ca <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800201e:	f7ff fc11 	bl	8001844 <SD_ReadyWait>
 8002022:	4603      	mov	r3, r0
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d14b      	bne.n	80020c0 <SD_disk_ioctl+0x234>
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800202e:	e047      	b.n	80020c0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002030:	2100      	movs	r1, #0
 8002032:	2049      	movs	r0, #73	; 0x49
 8002034:	f7ff fceb 	bl	8001a0e <SD_SendCmd>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d142      	bne.n	80020c4 <SD_disk_ioctl+0x238>
 800203e:	2110      	movs	r1, #16
 8002040:	6a38      	ldr	r0, [r7, #32]
 8002042:	f7ff fc73 	bl	800192c <SD_RxDataBlock>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d03b      	beq.n	80020c4 <SD_disk_ioctl+0x238>
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002052:	e037      	b.n	80020c4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002054:	2100      	movs	r1, #0
 8002056:	204a      	movs	r0, #74	; 0x4a
 8002058:	f7ff fcd9 	bl	8001a0e <SD_SendCmd>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d132      	bne.n	80020c8 <SD_disk_ioctl+0x23c>
 8002062:	2110      	movs	r1, #16
 8002064:	6a38      	ldr	r0, [r7, #32]
 8002066:	f7ff fc61 	bl	800192c <SD_RxDataBlock>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02b      	beq.n	80020c8 <SD_disk_ioctl+0x23c>
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002076:	e027      	b.n	80020c8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002078:	2100      	movs	r1, #0
 800207a:	207a      	movs	r0, #122	; 0x7a
 800207c:	f7ff fcc7 	bl	8001a0e <SD_SendCmd>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800208c:	e00b      	b.n	80020a6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800208e:	6a3c      	ldr	r4, [r7, #32]
 8002090:	1c63      	adds	r3, r4, #1
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	f7ff fbac 	bl	80017f0 <SPI_RxByte>
 8002098:	4603      	mov	r3, r0
 800209a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800209c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020a0:	3301      	adds	r3, #1
 80020a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d9ef      	bls.n	800208e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80020b4:	2304      	movs	r3, #4
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020ba:	e006      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020bc:	bf00      	nop
 80020be:	e004      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020c0:	bf00      	nop
 80020c2:	e002      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020c8:	bf00      	nop
		}

		DESELECT();
 80020ca:	f7ff fb4f 	bl	800176c <DESELECT>
		SPI_RxByte();
 80020ce:	f7ff fb8f 	bl	80017f0 <SPI_RxByte>
	}

	return res;
 80020d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	372c      	adds	r7, #44	; 0x2c
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* Registers for interfacing with the sensor */

void send_uart(char *string) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe f86f 	bl	80001d0 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000); // Transmit in blocking mode
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <send_uart+0x2c>)
 8002102:	f004 fc01 	bl	8006908 <HAL_UART_Transmit>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000031c 	.word	0x2000031c

08002114 <bufClear>:
		i++;
	return i;
}

/* To clear the buffer */
void bufClear(void) {
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0

	for (int i = 0; i < 1024; i++) {
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	e007      	b.n	8002130 <bufClear+0x1c>
		buffer[i] = 0;
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <bufClear+0x34>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3301      	adds	r3, #1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	dbf3      	blt.n	8002120 <bufClear+0xc>
	}
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20002460 	.word	0x20002460

0800214c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002150:	b0eb      	sub	sp, #428	; 0x1ac
 8002152:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002154:	f000 ff7b 	bl	800304e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002158:	f000 f990 	bl	800247c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800215c:	f000 fac6 	bl	80026ec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002160:	f000 fa94 	bl	800268c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002164:	f000 f9ec 	bl	8002540 <MX_I2C1_Init>
	MX_TIM16_Init();
 8002168:	f000 fa68 	bl	800263c <MX_TIM16_Init>
	MX_SPI1_Init();
 800216c:	f000 fa28 	bl	80025c0 <MX_SPI1_Init>
	MX_FATFS_Init();
 8002170:	f005 f83a 	bl	80071e8 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	dfr_initialise(&dfr_s, &hi2c1);
 8002174:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002178:	49a6      	ldr	r1, [pc, #664]	; (8002414 <main+0x2c8>)
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff06 	bl	8000f8c <dfr_initialise>
	pm_initialise(&pm_s, &hi2c1);
 8002180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002184:	49a3      	ldr	r1, [pc, #652]	; (8002414 <main+0x2c8>)
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fb37 	bl	80027fa <pm_initialise>
	sht40_initialise(&sht40_s, &hi2c1);
 800218c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002190:	49a0      	ldr	r1, [pc, #640]	; (8002414 <main+0x2c8>)
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fc00 	bl	8002998 <sht40_initialise>
	ds3231_initialise(&ds3231_s, &hi2c1);
 8002198:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800219c:	499d      	ldr	r1, [pc, #628]	; (8002414 <main+0x2c8>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fa8d 	bl	80016be <ds3231_initialise>

	HAL_StatusTypeDef status;
	char strDate[10];
	char str[255];

	status = dfrWakeUp(&dfr_s);
 80021a4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f995 	bl	80014d8 <dfrWakeUp>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	if (status != HAL_OK) {
 80021b4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <main+0x78>
		send_uart("Error\n\r");
 80021bc:	4896      	ldr	r0, [pc, #600]	; (8002418 <main+0x2cc>)
 80021be:	f7ff ff91 	bl	80020e4 <send_uart>
 80021c2:	e002      	b.n	80021ca <main+0x7e>
	} else {
		send_uart("Device is woken up\r\n");
 80021c4:	4895      	ldr	r0, [pc, #596]	; (800241c <main+0x2d0>)
 80021c6:	f7ff ff8d 	bl	80020e4 <send_uart>
	}
	// Start Timer
	HAL_TIM_Base_Start_IT(&htim16);
 80021ca:	4895      	ldr	r0, [pc, #596]	; (8002420 <main+0x2d4>)
 80021cc:	f004 f902 	bl	80063d4 <HAL_TIM_Base_Start_IT>
	while (warmUpTimer <= 180)
 80021d0:	bf00      	nop
 80021d2:	4b94      	ldr	r3, [pc, #592]	; (8002424 <main+0x2d8>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2bb4      	cmp	r3, #180	; 0xb4
 80021d8:	d9fb      	bls.n	80021d2 <main+0x86>
		;
	HAL_TIM_Base_Stop_IT(&htim16);
 80021da:	4891      	ldr	r0, [pc, #580]	; (8002420 <main+0x2d4>)
 80021dc:	f004 f94e 	bl	800647c <HAL_TIM_Base_Stop_IT>

	status = dfrWarmUpData(&dfr_s);
 80021e0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f9bb 	bl	8001560 <dfrWarmUpData>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	if (status != HAL_OK) {
 80021f0:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <main+0xb4>
		send_uart("Error\n\r");
 80021f8:	4887      	ldr	r0, [pc, #540]	; (8002418 <main+0x2cc>)
 80021fa:	f7ff ff73 	bl	80020e4 <send_uart>
 80021fe:	e002      	b.n	8002206 <main+0xba>
	} else {
		send_uart("Initial values calculated\r\n");
 8002200:	4889      	ldr	r0, [pc, #548]	; (8002428 <main+0x2dc>)
 8002202:	f7ff ff6f 	bl	80020e4 <send_uart>
	}
	/* Mount SD Card */

	fresult = f_mount(&fs, "/", 1);
 8002206:	2201      	movs	r2, #1
 8002208:	4988      	ldr	r1, [pc, #544]	; (800242c <main+0x2e0>)
 800220a:	4889      	ldr	r0, [pc, #548]	; (8002430 <main+0x2e4>)
 800220c:	f007 fa3c 	bl	8009688 <f_mount>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b87      	ldr	r3, [pc, #540]	; (8002434 <main+0x2e8>)
 8002216:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8002218:	4b86      	ldr	r3, [pc, #536]	; (8002434 <main+0x2e8>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <main+0xdc>
		send_uart("SD card mounted successfully ...\n\r");
 8002220:	4885      	ldr	r0, [pc, #532]	; (8002438 <main+0x2ec>)
 8002222:	f7ff ff5f 	bl	80020e4 <send_uart>
 8002226:	e002      	b.n	800222e <main+0xe2>
	} else {
		send_uart("error in mounting sd card ... \n\r");
 8002228:	4884      	ldr	r0, [pc, #528]	; (800243c <main+0x2f0>)
 800222a:	f7ff ff5b 	bl	80020e4 <send_uart>
	}

	/***** Card Capacity Details ********/

	/* Check free space */
	f_getfree("", &free_space, &pfs);
 800222e:	4a84      	ldr	r2, [pc, #528]	; (8002440 <main+0x2f4>)
 8002230:	4984      	ldr	r1, [pc, #528]	; (8002444 <main+0x2f8>)
 8002232:	4885      	ldr	r0, [pc, #532]	; (8002448 <main+0x2fc>)
 8002234:	f008 f89a 	bl	800a36c <f_getfree>

	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002238:	4b81      	ldr	r3, [pc, #516]	; (8002440 <main+0x2f4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	3b02      	subs	r3, #2
 8002240:	4a7f      	ldr	r2, [pc, #508]	; (8002440 <main+0x2f4>)
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	8952      	ldrh	r2, [r2, #10]
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f95a 	bl	8000504 <__aeabi_ui2d>
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b7d      	ldr	r3, [pc, #500]	; (800244c <main+0x300>)
 8002256:	f7fe f9cf 	bl	80005f8 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7fe fca1 	bl	8000ba8 <__aeabi_d2uiz>
 8002266:	4603      	mov	r3, r0
 8002268:	4a79      	ldr	r2, [pc, #484]	; (8002450 <main+0x304>)
 800226a:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD Card Total Size: \t%lu\n\r", total);
 800226c:	4b78      	ldr	r3, [pc, #480]	; (8002450 <main+0x304>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4978      	ldr	r1, [pc, #480]	; (8002454 <main+0x308>)
 8002274:	4878      	ldr	r0, [pc, #480]	; (8002458 <main+0x30c>)
 8002276:	f008 ff87 	bl	800b188 <siprintf>
	send_uart(buffer);
 800227a:	4877      	ldr	r0, [pc, #476]	; (8002458 <main+0x30c>)
 800227c:	f7ff ff32 	bl	80020e4 <send_uart>
	bufClear();
 8002280:	f7ff ff48 	bl	8002114 <bufClear>
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8002284:	4b6e      	ldr	r3, [pc, #440]	; (8002440 <main+0x2f4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	895b      	ldrh	r3, [r3, #10]
 800228a:	461a      	mov	r2, r3
 800228c:	4b73      	ldr	r3, [pc, #460]	; (800245c <main+0x310>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f935 	bl	8000504 <__aeabi_ui2d>
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	4b6b      	ldr	r3, [pc, #428]	; (800244c <main+0x300>)
 80022a0:	f7fe f9aa 	bl	80005f8 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fc7c 	bl	8000ba8 <__aeabi_d2uiz>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a64      	ldr	r2, [pc, #400]	; (8002444 <main+0x2f8>)
 80022b4:	6013      	str	r3, [r2, #0]
	send_uart(buffer);
 80022b6:	4868      	ldr	r0, [pc, #416]	; (8002458 <main+0x30c>)
 80022b8:	f7ff ff14 	bl	80020e4 <send_uart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		status = getTime(&ds3231_s);
 80022bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fa0b 	bl	80016dc <getTime>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if (status == HAL_ERROR) {
 80022cc:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d103      	bne.n	80022dc <main+0x190>
			send_uart("ERROR\n\r");
 80022d4:	4862      	ldr	r0, [pc, #392]	; (8002460 <main+0x314>)
 80022d6:	f7ff ff05 	bl	80020e4 <send_uart>
 80022da:	e00e      	b.n	80022fa <main+0x1ae>
		} else {
			sprintf(strDate, "%02d:%02d:%02d", ds3231_s.hour, ds3231_s.minute,
 80022dc:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80022e0:	461a      	mov	r2, r3
 80022e2:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80022e6:	4619      	mov	r1, r3
					ds3231_s.second);
 80022e8:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
			sprintf(strDate, "%02d:%02d:%02d", ds3231_s.hour, ds3231_s.minute,
 80022ec:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	460b      	mov	r3, r1
 80022f4:	495b      	ldr	r1, [pc, #364]	; (8002464 <main+0x318>)
 80022f6:	f008 ff47 	bl	800b188 <siprintf>
		}
		status = sht40_read(&sht40_s);
 80022fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fb68 	bl	80029d4 <sht40_read>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if (status == HAL_TIMEOUT) {
 800230a:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800230e:	2b03      	cmp	r3, #3
 8002310:	d103      	bne.n	800231a <main+0x1ce>
			send_uart("Timeout\n\r");
 8002312:	4855      	ldr	r0, [pc, #340]	; (8002468 <main+0x31c>)
 8002314:	f7ff fee6 	bl	80020e4 <send_uart>
 8002318:	e006      	b.n	8002328 <main+0x1dc>
		} else if (status == HAL_ERROR) {
 800231a:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <main+0x1dc>
			send_uart("Error\n\r");
 8002322:	483d      	ldr	r0, [pc, #244]	; (8002418 <main+0x2cc>)
 8002324:	f7ff fede 	bl	80020e4 <send_uart>
		}

		status = pm_read(&pm_s);
 8002328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fa94 	bl	800285a <pm_read>
 8002332:	4603      	mov	r3, r0
 8002334:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if (status == HAL_ERROR) {
 8002338:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <main+0x1fa>
			send_uart("Error\n\r");
 8002340:	4835      	ldr	r0, [pc, #212]	; (8002418 <main+0x2cc>)
 8002342:	f7ff fecf 	bl	80020e4 <send_uart>
		}

		status = getGasData(&dfr_s);
 8002346:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fe4c 	bl	8000fe8 <getGasData>
 8002350:	4603      	mov	r3, r0
 8002352:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if (status == HAL_TIMEOUT) {
 8002356:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800235a:	2b03      	cmp	r3, #3
 800235c:	d103      	bne.n	8002366 <main+0x21a>
			send_uart("Timeout\n\r");
 800235e:	4842      	ldr	r0, [pc, #264]	; (8002468 <main+0x31c>)
 8002360:	f7ff fec0 	bl	80020e4 <send_uart>
 8002364:	e006      	b.n	8002374 <main+0x228>
		} else if (status == HAL_ERROR) {
 8002366:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <main+0x228>
			send_uart("Error\n\r");
 800236e:	482a      	ldr	r0, [pc, #168]	; (8002418 <main+0x2cc>)
 8002370:	f7ff feb8 	bl	80020e4 <send_uart>
		}
		sprintf(str, "%s,%.1lf,%.1lf,%d,%.1f,%.3f\r", strDate, sht40_s.temperature,
 8002374:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8002378:	e9d7 894a 	ldrd	r8, r9, [r7, #296]	; 0x128
				sht40_s.humidity, pm_s.pm25_env, dfr_s.co, dfr_s.no2
 800237c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
		sprintf(str, "%s,%.1lf,%.1lf,%d,%.1f,%.3f\r", strDate, sht40_s.temperature,
 8002380:	461e      	mov	r6, r3
				sht40_s.humidity, pm_s.pm25_env, dfr_s.co, dfr_s.no2
 8002382:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
		sprintf(str, "%s,%.1lf,%.1lf,%d,%.1f,%.3f\r", strDate, sht40_s.temperature,
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f8de 	bl	8000548 <__aeabi_f2d>
 800238c:	4682      	mov	sl, r0
 800238e:	468b      	mov	fp, r1
				sht40_s.humidity, pm_s.pm25_env, dfr_s.co, dfr_s.no2
 8002390:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
		sprintf(str, "%s,%.1lf,%.1lf,%d,%.1f,%.3f\r", strDate, sht40_s.temperature,
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8d7 	bl	8000548 <__aeabi_f2d>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80023a2:	4638      	mov	r0, r7
 80023a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80023a8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80023ac:	9604      	str	r6, [sp, #16]
 80023ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023b2:	e9cd 4500 	strd	r4, r5, [sp]
 80023b6:	460a      	mov	r2, r1
 80023b8:	492c      	ldr	r1, [pc, #176]	; (800246c <main+0x320>)
 80023ba:	f008 fee5 	bl	800b188 <siprintf>
				);
		send_uart(str);
 80023be:	463b      	mov	r3, r7
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe8f 	bl	80020e4 <send_uart>

		/* Open a file to write */
		fresult = f_open(&fil, "sensor.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80023c6:	2212      	movs	r2, #18
 80023c8:	4929      	ldr	r1, [pc, #164]	; (8002470 <main+0x324>)
 80023ca:	482a      	ldr	r0, [pc, #168]	; (8002474 <main+0x328>)
 80023cc:	f007 f9a2 	bl	8009714 <f_open>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <main+0x2e8>)
 80023d6:	701a      	strb	r2, [r3, #0]

		fresult = f_lseek(&fil, f_size(&fil));
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <main+0x328>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4619      	mov	r1, r3
 80023de:	4825      	ldr	r0, [pc, #148]	; (8002474 <main+0x328>)
 80023e0:	f007 fda0 	bl	8009f24 <f_lseek>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <main+0x2e8>)
 80023ea:	701a      	strb	r2, [r3, #0]

		/* Writing text */
		fresult = f_puts(str, &fil);
 80023ec:	463b      	mov	r3, r7
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <main+0x328>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f008 f8e7 	bl	800a5c4 <f_puts>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <main+0x2e8>)
 80023fc:	701a      	strb	r2, [r3, #0]

		/* Close file */
		f_close(&fil);
 80023fe:	481d      	ldr	r0, [pc, #116]	; (8002474 <main+0x328>)
 8002400:	f007 fd66 	bl	8009ed0 <f_close>

		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8002404:	2108      	movs	r1, #8
 8002406:	481c      	ldr	r0, [pc, #112]	; (8002478 <main+0x32c>)
 8002408:	f001 f94e 	bl	80036a8 <HAL_GPIO_TogglePin>

		HAL_Delay(100);
 800240c:	2064      	movs	r0, #100	; 0x64
 800240e:	f000 fe93 	bl	8003138 <HAL_Delay>
		status = getTime(&ds3231_s);
 8002412:	e753      	b.n	80022bc <main+0x170>
 8002414:	20000218 	.word	0x20000218
 8002418:	0800d690 	.word	0x0800d690
 800241c:	0800d698 	.word	0x0800d698
 8002420:	200002d0 	.word	0x200002d0
 8002424:	200003a0 	.word	0x200003a0
 8002428:	0800d6b0 	.word	0x0800d6b0
 800242c:	0800d6cc 	.word	0x0800d6cc
 8002430:	200003f4 	.word	0x200003f4
 8002434:	2000245c 	.word	0x2000245c
 8002438:	0800d6d0 	.word	0x0800d6d0
 800243c:	0800d6f4 	.word	0x0800d6f4
 8002440:	20002860 	.word	0x20002860
 8002444:	2000286c 	.word	0x2000286c
 8002448:	0800d718 	.word	0x0800d718
 800244c:	3fe00000 	.word	0x3fe00000
 8002450:	20002868 	.word	0x20002868
 8002454:	0800d71c 	.word	0x0800d71c
 8002458:	20002460 	.word	0x20002460
 800245c:	20002864 	.word	0x20002864
 8002460:	0800d738 	.word	0x0800d738
 8002464:	0800d740 	.word	0x0800d740
 8002468:	0800d750 	.word	0x0800d750
 800246c:	0800d75c 	.word	0x0800d75c
 8002470:	0800d77c 	.word	0x0800d77c
 8002474:	2000142c 	.word	0x2000142c
 8002478:	48000400 	.word	0x48000400

0800247c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b096      	sub	sp, #88	; 0x58
 8002480:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	2244      	movs	r2, #68	; 0x44
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f008 fa0a 	bl	800a8a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002490:	463b      	mov	r3, r7
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800249e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024a2:	f002 f831 	bl	8004508 <HAL_PWREx_ControlVoltageScaling>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80024ac:	f000 f9a0 	bl	80027f0 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80024b0:	f002 f80c 	bl	80044cc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <SystemClock_Config+0xc0>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	4a20      	ldr	r2, [pc, #128]	; (800253c <SystemClock_Config+0xc0>)
 80024bc:	f023 0318 	bic.w	r3, r3, #24
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80024c4:	2314      	movs	r3, #20
 80024c6:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024cc:	2301      	movs	r3, #1
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d8:	2302      	movs	r3, #2
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80024dc:	2301      	movs	r3, #1
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80024e4:	2328      	movs	r3, #40	; 0x28
 80024e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80024e8:	2307      	movs	r3, #7
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024f0:	2302      	movs	r3, #2
 80024f2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 f85b 	bl	80045b4 <HAL_RCC_OscConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <SystemClock_Config+0x8c>
		Error_Handler();
 8002504:	f000 f974 	bl	80027f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002508:	230f      	movs	r3, #15
 800250a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800250c:	2303      	movs	r3, #3
 800250e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800251c:	463b      	mov	r3, r7
 800251e:	2104      	movs	r1, #4
 8002520:	4618      	mov	r0, r3
 8002522:	f002 fc5b 	bl	8004ddc <HAL_RCC_ClockConfig>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <SystemClock_Config+0xb4>
		Error_Handler();
 800252c:	f000 f960 	bl	80027f0 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002530:	f003 f86e 	bl	8005610 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002534:	bf00      	nop
 8002536:	3758      	adds	r7, #88	; 0x58
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <MX_I2C1_Init+0x78>)
 8002548:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <MX_I2C1_Init+0x74>)
 800254c:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <MX_I2C1_Init+0x7c>)
 800254e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002558:	2201      	movs	r2, #1
 800255a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <MX_I2C1_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <MX_I2C1_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800257a:	480e      	ldr	r0, [pc, #56]	; (80025b4 <MX_I2C1_Init+0x74>)
 800257c:	f001 f8ae 	bl	80036dc <HAL_I2C_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002586:	f000 f933 	bl	80027f0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800258a:	2100      	movs	r1, #0
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <MX_I2C1_Init+0x74>)
 800258e:	f001 ff05 	bl	800439c <HAL_I2CEx_ConfigAnalogFilter>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002598:	f000 f92a 	bl	80027f0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800259c:	2100      	movs	r1, #0
 800259e:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_I2C1_Init+0x74>)
 80025a0:	f001 ff47 	bl	8004432 <HAL_I2CEx_ConfigDigitalFilter>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C1_Init+0x6e>
		Error_Handler();
 80025aa:	f000 f921 	bl	80027f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000218 	.word	0x20000218
 80025b8:	40005400 	.word	0x40005400
 80025bc:	10909cec 	.word	0x10909cec

080025c0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <MX_SPI1_Init+0x74>)
 80025c6:	4a1c      	ldr	r2, [pc, #112]	; (8002638 <MX_SPI1_Init+0x78>)
 80025c8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <MX_SPI1_Init+0x74>)
 80025cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025d0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <MX_SPI1_Init+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <MX_SPI1_Init+0x74>)
 80025da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025de:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <MX_SPI1_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <MX_SPI1_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_SPI1_Init+0x74>)
 80025ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <MX_SPI1_Init+0x74>)
 80025f6:	2210      	movs	r2, #16
 80025f8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_SPI1_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_SPI1_Init+0x74>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_SPI1_Init+0x74>)
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_SPI1_Init+0x74>)
 800260e:	2207      	movs	r2, #7
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_SPI1_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_SPI1_Init+0x74>)
 800261a:	2208      	movs	r2, #8
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_SPI1_Init+0x74>)
 8002620:	f003 f8f8 	bl	8005814 <HAL_SPI_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_SPI1_Init+0x6e>
		Error_Handler();
 800262a:	f000 f8e1 	bl	80027f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2000026c 	.word	0x2000026c
 8002638:	40013000 	.word	0x40013000

0800263c <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_TIM16_Init+0x48>)
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <MX_TIM16_Init+0x4c>)
 8002644:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_TIM16_Init+0x48>)
 8002648:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800264c:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <MX_TIM16_Init+0x48>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10000 - 1;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MX_TIM16_Init+0x48>)
 8002656:	f242 720f 	movw	r2, #9999	; 0x270f
 800265a:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_TIM16_Init+0x48>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <MX_TIM16_Init+0x48>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_TIM16_Init+0x48>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_TIM16_Init+0x48>)
 8002670:	f003 fe58 	bl	8006324 <HAL_TIM_Base_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM16_Init+0x42>
		Error_Handler();
 800267a:	f000 f8b9 	bl	80027f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200002d0 	.word	0x200002d0
 8002688:	40014400 	.word	0x40014400

0800268c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 8002692:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <MX_USART2_UART_Init+0x5c>)
 8002694:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 8002698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800269c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026b2:	220c      	movs	r2, #12
 80026b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_USART2_UART_Init+0x58>)
 80026d0:	f004 f8cc 	bl	800686c <HAL_UART_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80026da:	f000 f889 	bl	80027f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000031c 	.word	0x2000031c
 80026e8:	40004400 	.word	0x40004400

080026ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <MX_GPIO_Init+0xb8>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <MX_GPIO_Init+0xb8>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	2108      	movs	r1, #8
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f000 ff91 	bl	8003678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2108      	movs	r1, #8
 800275a:	4813      	ldr	r0, [pc, #76]	; (80027a8 <MX_GPIO_Init+0xbc>)
 800275c:	f000 ff8c 	bl	8003678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8002760:	2308      	movs	r3, #8
 8002762:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	4619      	mov	r1, r3
 8002776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277a:	f000 fe13 	bl	80033a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 800277e:	2308      	movs	r3, #8
 8002780:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 030c 	add.w	r3, r7, #12
 8002792:	4619      	mov	r1, r3
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <MX_GPIO_Init+0xbc>)
 8002796:	f000 fe05 	bl	80033a4 <HAL_GPIO_Init>

}
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	48000400 	.word	0x48000400

080027ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10d      	bne.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		sprintf(str1, "Seconds passed: %d\r\n", warmUpTimer++);
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	b2d1      	uxtb	r1, r2
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80027c6:	7011      	strb	r1, [r2, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4907      	ldr	r1, [pc, #28]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80027ce:	f008 fcdb 	bl	800b188 <siprintf>
		send_uart(str1);
 80027d2:	4806      	ldr	r0, [pc, #24]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80027d4:	f7ff fc86 	bl	80020e4 <send_uart>

	}
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200002d0 	.word	0x200002d0
 80027e4:	200003a0 	.word	0x200003a0
 80027e8:	0800d788 	.word	0x0800d788
 80027ec:	200003a4 	.word	0x200003a4

080027f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f4:	b672      	cpsid	i
}
 80027f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027f8:	e7fe      	b.n	80027f8 <Error_Handler+0x8>

080027fa <pm_initialise>:
#include "particulate_matter.h"     // Include header file for pm sensor

HAL_StatusTypeDef pm_initialise(pm_data *dev, I2C_HandleTypeDef *i2cHandle) {
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->pm10_standard = 0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	809a      	strh	r2, [r3, #4]
	dev->pm25_standard = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	80da      	strh	r2, [r3, #6]
	dev->pm100_standard = 0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	811a      	strh	r2, [r3, #8]

	dev->pm10_env = 0;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	815a      	strh	r2, [r3, #10]
	dev->pm25_env = 0;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	819a      	strh	r2, [r3, #12]
	dev->pm100_env = 0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	81da      	strh	r2, [r3, #14]

	dev->particles_03um = 0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	821a      	strh	r2, [r3, #16]
	dev->particles_05um = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	825a      	strh	r2, [r3, #18]
	dev->particles_10um = 0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	829a      	strh	r2, [r3, #20]
	dev->particles_25um = 0;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	82da      	strh	r2, [r3, #22]
	dev->particles_100um = 0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	835a      	strh	r2, [r3, #26]

	return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <pm_read>:

HAL_StatusTypeDef pm_read(pm_data *dev) {
 800285a:	b580      	push	{r7, lr}
 800285c:	b094      	sub	sp, #80	; 0x50
 800285e:	af02      	add	r7, sp, #8
 8002860:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t pm_buffer[32] = { 0 };
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	619a      	str	r2, [r3, #24]

	/* Write address pointer to start of the registers */
	status = HAL_I2C_Master_Transmit(dev->i2cHandle, PM_ADDR, PM_SC1, 1,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2301      	movs	r3, #1
 8002886:	2200      	movs	r2, #0
 8002888:	2124      	movs	r1, #36	; 0x24
 800288a:	f000 ffb7 	bl	80037fc <HAL_I2C_Master_Transmit>
 800288e:	4603      	mov	r3, r0
 8002890:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 8002894:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <pm_read+0x46>
		return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e077      	b.n	8002990 <pm_read+0x136>
	} else {
		/* Read particulate matter registers */
		status = HAL_I2C_Master_Receive(dev->i2cHandle, PM_ADDR, pm_buffer, 32,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2320      	movs	r3, #32
 80028b0:	2124      	movs	r1, #36	; 0x24
 80028b2:	f001 f897 	bl	80039e4 <HAL_I2C_Master_Receive>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				HAL_MAX_DELAY);

		/* Check if first element is 0x42 */
		if (status != HAL_OK) {
 80028bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <pm_read+0x6e>
			return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e063      	b.n	8002990 <pm_read+0x136>
		} else {
			if (pm_buffer[0] != 0x42) {
 80028c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028cc:	2b42      	cmp	r3, #66	; 0x42
 80028ce:	d001      	beq.n	80028d4 <pm_read+0x7a>
				return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e05d      	b.n	8002990 <pm_read+0x136>
			} else {

				/* Shift data in buffer */
				uint16_t buffer_u16[12];
				for (uint8_t i = 0; i < 12; i++) {
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80028da:	e030      	b.n	800293e <pm_read+0xe4>
					buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
 80028dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028e0:	3301      	adds	r3, #1
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	3301      	adds	r3, #1
 80028e6:	3348      	adds	r3, #72	; 0x48
 80028e8:	443b      	add	r3, r7
 80028ea:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80028ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028f2:	b292      	uxth	r2, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	3348      	adds	r3, #72	; 0x48
 80028f8:	443b      	add	r3, r7
 80028fa:	f823 2c3c 	strh.w	r2, [r3, #-60]
					buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
 80028fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	3348      	adds	r3, #72	; 0x48
 8002906:	443b      	add	r3, r7
 8002908:	f833 1c3c 	ldrh.w	r1, [r3, #-60]
 800290c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002910:	3301      	adds	r3, #1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	3348      	adds	r3, #72	; 0x48
 8002916:	443b      	add	r3, r7
 8002918:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800291c:	b29b      	uxth	r3, r3
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	b29a      	uxth	r2, r3
 8002922:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002926:	440a      	add	r2, r1
 8002928:	b292      	uxth	r2, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	3348      	adds	r3, #72	; 0x48
 800292e:	443b      	add	r3, r7
 8002930:	f823 2c3c 	strh.w	r2, [r3, #-60]
				for (uint8_t i = 0; i < 12; i++) {
 8002934:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002938:	3301      	adds	r3, #1
 800293a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800293e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002942:	2b0b      	cmp	r3, #11
 8002944:	d9ca      	bls.n	80028dc <pm_read+0x82>
				}

				/* Store readings in structure */
				dev->pm10_standard = buffer_u16[0];
 8002946:	89ba      	ldrh	r2, [r7, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	809a      	strh	r2, [r3, #4]
				dev->pm25_standard = buffer_u16[1];
 800294c:	89fa      	ldrh	r2, [r7, #14]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	80da      	strh	r2, [r3, #6]
				dev->pm100_standard = buffer_u16[2];
 8002952:	8a3a      	ldrh	r2, [r7, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	811a      	strh	r2, [r3, #8]
				dev->pm10_env = buffer_u16[3];
 8002958:	8a7a      	ldrh	r2, [r7, #18]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	815a      	strh	r2, [r3, #10]
				dev->pm25_env = buffer_u16[4];
 800295e:	8aba      	ldrh	r2, [r7, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	819a      	strh	r2, [r3, #12]
				dev->pm100_env = buffer_u16[5];
 8002964:	8afa      	ldrh	r2, [r7, #22]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	81da      	strh	r2, [r3, #14]
				dev->particles_03um = buffer_u16[6];
 800296a:	8b3a      	ldrh	r2, [r7, #24]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	821a      	strh	r2, [r3, #16]
				dev->particles_05um = buffer_u16[7];
 8002970:	8b7a      	ldrh	r2, [r7, #26]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	825a      	strh	r2, [r3, #18]
				dev->particles_10um = buffer_u16[8];
 8002976:	8bba      	ldrh	r2, [r7, #28]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	829a      	strh	r2, [r3, #20]
				dev->particles_25um = buffer_u16[9];
 800297c:	8bfa      	ldrh	r2, [r7, #30]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	82da      	strh	r2, [r3, #22]
				dev->particles_50um = buffer_u16[10];
 8002982:	8c3a      	ldrh	r2, [r7, #32]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	831a      	strh	r2, [r3, #24]
				dev->particles_100um = buffer_u16[11];
 8002988:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	835a      	strh	r2, [r3, #26]
			}
		}
	}
	return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3748      	adds	r7, #72	; 0x48
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <sht40_initialise>:
#include "sht40.h"      // Include header file for sht40

HAL_StatusTypeDef sht40_initialise(sht40_data *dev, I2C_HandleTypeDef *i2cHandle) {
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->temperature = 0;
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->humidity = 0;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <sht40_read>:

/* Function to read the sht40 sensor */
HAL_StatusTypeDef sht40_read(sht40_data *dev)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af02      	add	r7, sp, #8
 80029da:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

    uint8_t sht40_buffer[6] = {0};
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	2300      	movs	r3, #0
 80029e2:	823b      	strh	r3, [r7, #16]
	float t_ticks, rh_ticks = 0;
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    uint8_t buf[1] = {SHT40_HP};
 80029ea:	23fd      	movs	r3, #253	; 0xfd
 80029ec:	723b      	strb	r3, [r7, #8]

    /* Write to the high precision register for temperature and humitidy values */
//    status = HAL_I2C_Mem_Write(dev->i2cHandle, SHT40_ADDR, SHT40_HP, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_Max);
        status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x44 << 1), buf, 1,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f107 0208 	add.w	r2, r7, #8
 80029f6:	2332      	movs	r3, #50	; 0x32
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2188      	movs	r1, #136	; 0x88
 80029fe:	f000 fefd 	bl	80037fc <HAL_I2C_Master_Transmit>
 8002a02:	4603      	mov	r3, r0
 8002a04:	76fb      	strb	r3, [r7, #27]
    			50);
    if (status != 0)
 8002a06:	7efb      	ldrb	r3, [r7, #27]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <sht40_read+0x3c>
    {
//    	printf("Failed to write I2C device address (err %i)\n", ret);
    	return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e056      	b.n	8002abe <sht40_read+0xea>
    }

    /* wait for 10 millseconds */
    HAL_Delay(10);
 8002a10:	200a      	movs	r0, #10
 8002a12:	f000 fb91 	bl	8003138 <HAL_Delay>

    /* Read the six return values for the register */
//    status = HAL_I2C_Mem_Read(dev->i2cHandle, SHT40_ADDR, SHT40_HP, I2C_MEMADD_SIZE_8BIT, sht40_buffer, 6, HAL_MAX_DELAY);
    status = HAL_I2C_Master_Receive(dev->i2cHandle, (0x44 << 1) | 0x01, sht40_buffer, 6,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	f107 020c 	add.w	r2, r7, #12
 8002a1e:	2332      	movs	r3, #50	; 0x32
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2306      	movs	r3, #6
 8002a24:	2189      	movs	r1, #137	; 0x89
 8002a26:	f000 ffdd 	bl	80039e4 <HAL_I2C_Master_Receive>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	76fb      	strb	r3, [r7, #27]
			50);
    if (status != 0)
 8002a2e:	7efb      	ldrb	r3, [r7, #27]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <sht40_read+0x64>
    {
//    	printf("Failed to read I2C device address (err %i)\n", ret);
    	return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e042      	b.n	8002abe <sht40_read+0xea>
    }

    /* Shift the data and convert to temperature and humidty reading */
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
 8002a38:	7b3b      	ldrb	r3, [r7, #12]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	7b7a      	ldrb	r2, [r7, #13]
 8002a3e:	4413      	add	r3, r2
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a48:	edc7 7a05 	vstr	s15, [r7, #20]
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	7c3a      	ldrb	r2, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5c:	edc7 7a07 	vstr	s15, [r7, #28]

    dev->temperature = -45 + 175 * t_ticks / 65535;
 8002a60:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a64:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002ac8 <sht40_read+0xf4>
 8002a68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a6c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002acc <sht40_read+0xf8>
 8002a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a74:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002ad0 <sht40_read+0xfc>
 8002a78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a7c:	ee17 0a90 	vmov	r0, s15
 8002a80:	f7fd fd62 	bl	8000548 <__aeabi_f2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    dev->humidity = -6 + 125 * rh_ticks / 65535;
 8002a8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ad4 <sht40_read+0x100>
 8002a96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002acc <sht40_read+0xf8>
 8002a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002aa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aaa:	ee17 0a90 	vmov	r0, s15
 8002aae:	f7fd fd4b 	bl	8000548 <__aeabi_f2d>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	432f0000 	.word	0x432f0000
 8002acc:	477fff00 	.word	0x477fff00
 8002ad0:	42340000 	.word	0x42340000
 8002ad4:	42fa0000 	.word	0x42fa0000

08002ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_MspInit+0x44>)
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <HAL_MspInit+0x44>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_MspInit+0x44>)
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_MspInit+0x44>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_MspInit+0x44>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_MspInit+0x44>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b09e      	sub	sp, #120	; 0x78
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	2254      	movs	r2, #84	; 0x54
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f007 feaf 	bl	800a8a4 <memset>
  if(hi2c->Instance==I2C1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_I2C_MspInit+0xa8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d137      	bne.n	8002bc0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b50:	2340      	movs	r3, #64	; 0x40
 8002b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fb61 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b68:	f7ff fe42 	bl	80027f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_I2C_MspInit+0xac>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_I2C_MspInit+0xac>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_I2C_MspInit+0xac>)
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8a:	2312      	movs	r3, #18
 8002b8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b96:	2304      	movs	r3, #4
 8002b98:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f000 fbfe 	bl	80033a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_I2C_MspInit+0xac>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <HAL_I2C_MspInit+0xac>)
 8002bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_I2C_MspInit+0xac>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bc0:	bf00      	nop
 8002bc2:	3778      	adds	r7, #120	; 0x78
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40005400 	.word	0x40005400
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_SPI_MspInit+0x7c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d128      	bne.n	8002c44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_SPI_MspInit+0x80>)
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <HAL_SPI_MspInit+0x80>)
 8002bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_SPI_MspInit+0x80>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_SPI_MspInit+0x80>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_SPI_MspInit+0x80>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_SPI_MspInit+0x80>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002c22:	23c2      	movs	r3, #194	; 0xc2
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c32:	2305      	movs	r3, #5
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c40:	f000 fbb0 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013000 	.word	0x40013000
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <HAL_TIM_Base_MspInit+0x44>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d113      	bne.n	8002c8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_TIM_Base_MspInit+0x48>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <HAL_TIM_Base_MspInit+0x48>)
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c70:	6613      	str	r3, [r2, #96]	; 0x60
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_TIM_Base_MspInit+0x48>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2019      	movs	r0, #25
 8002c84:	f000 fb57 	bl	8003336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c88:	2019      	movs	r0, #25
 8002c8a:	f000 fb70 	bl	800336e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b09e      	sub	sp, #120	; 0x78
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	2254      	movs	r2, #84	; 0x54
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f007 fdef 	bl	800a8a4 <memset>
  if(huart->Instance==USART2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <HAL_UART_MspInit+0xcc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d148      	bne.n	8002d62 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f002 faa1 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ce8:	f7ff fd82 	bl	80027f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_UART_MspInit+0xd0>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_UART_MspInit+0xd0>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_UART_MspInit+0xd0>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_UART_MspInit+0xd0>)
 8002d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_UART_MspInit+0xd0>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_UART_MspInit+0xd0>)
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d34:	4619      	mov	r1, r3
 8002d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3a:	f000 fb33 	bl	80033a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002d50:	2303      	movs	r3, #3
 8002d52:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d5e:	f000 fb21 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d62:	bf00      	nop
 8002d64:	3778      	adds	r7, #120	; 0x78
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40004400 	.word	0x40004400
 8002d70:	40021000 	.word	0x40021000

08002d74 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

	if (Timer1 > 0)
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <SDTimer_Handler+0x40>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <SDTimer_Handler+0x1c>
		Timer1--;
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <SDTimer_Handler+0x40>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <SDTimer_Handler+0x40>)
 8002d8e:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0)
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <SDTimer_Handler+0x44>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <SDTimer_Handler+0x34>
		Timer2--;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <SDTimer_Handler+0x44>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <SDTimer_Handler+0x44>)
 8002da6:	701a      	strb	r2, [r3, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000210 	.word	0x20000210
 8002db8:	20000212 	.word	0x20000212

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <NMI_Handler+0x4>

08002dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <HardFault_Handler+0x4>

08002dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <MemManage_Handler+0x4>

08002dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <BusFault_Handler+0x4>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <UsageFault_Handler+0x4>

08002dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <SysTick_Handler+0x30>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <SysTick_Handler+0x30>)
 8002e14:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10){
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <SysTick_Handler+0x30>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b09      	cmp	r3, #9
 8002e1e:	d904      	bls.n	8002e2a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <SysTick_Handler+0x30>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002e26:	f7ff ffa5 	bl	8002d74 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e2a:	f000 f965 	bl	80030f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20002870 	.word	0x20002870

08002e38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e3e:	f003 fb4c 	bl	80064da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200002d0 	.word	0x200002d0

08002e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
	return 1;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_kill>:

int _kill(int pid, int sig)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e66:	f007 fcf3 	bl	800a850 <__errno>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2216      	movs	r2, #22
 8002e6e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_exit>:

void _exit (int status)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ffe7 	bl	8002e5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e8e:	e7fe      	b.n	8002e8e <_exit+0x12>

08002e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e00a      	b.n	8002eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ea2:	f3af 8000 	nop.w
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	60ba      	str	r2, [r7, #8]
 8002eae:	b2ca      	uxtb	r2, r1
 8002eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbf0      	blt.n	8002ea2 <_read+0x12>
	}

return len;
 8002ec0:	687b      	ldr	r3, [r7, #4]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e009      	b.n	8002ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	60ba      	str	r2, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dbf1      	blt.n	8002edc <_write+0x12>
	}
	return len;
 8002ef8:	687b      	ldr	r3, [r7, #4]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_close>:

int _close(int file)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	return -1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_isatty>:

int _isatty(int file)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
	return 1;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <_sbrk+0x5c>)
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <_sbrk+0x60>)
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <_sbrk+0x64>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <_sbrk+0x68>)
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d207      	bcs.n	8002fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f9c:	f007 fc58 	bl	800a850 <__errno>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e009      	b.n	8002fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <_sbrk+0x64>)
 8002fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20010000 	.word	0x20010000
 8002fcc:	00000400 	.word	0x00000400
 8002fd0:	20002874 	.word	0x20002874
 8002fd4:	20002ac8 	.word	0x20002ac8

08002fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <SystemInit+0x20>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <SystemInit+0x20>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003000:	f7ff ffea 	bl	8002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003004:	480c      	ldr	r0, [pc, #48]	; (8003038 <LoopForever+0x6>)
  ldr r1, =_edata
 8003006:	490d      	ldr	r1, [pc, #52]	; (800303c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <LoopForever+0xe>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800301c:	4c0a      	ldr	r4, [pc, #40]	; (8003048 <LoopForever+0x16>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800302a:	f007 fc17 	bl	800a85c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800302e:	f7ff f88d 	bl	800214c <main>

08003032 <LoopForever>:

LoopForever:
    b LoopForever
 8003032:	e7fe      	b.n	8003032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003034:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800303c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003040:	0800e05c 	.word	0x0800e05c
  ldr r2, =_sbss
 8003044:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003048:	20002ac8 	.word	0x20002ac8

0800304c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800304c:	e7fe      	b.n	800304c <ADC1_IRQHandler>

0800304e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003058:	2003      	movs	r0, #3
 800305a:	f000 f961 	bl	8003320 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800305e:	2000      	movs	r0, #0
 8003060:	f000 f80e 	bl	8003080 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	71fb      	strb	r3, [r7, #7]
 800306e:	e001      	b.n	8003074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003070:	f7ff fd32 	bl	8002ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003074:	79fb      	ldrb	r3, [r7, #7]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800308c:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_InitTick+0x6c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d023      	beq.n	80030dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003094:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_InitTick+0x70>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_InitTick+0x6c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f96d 	bl	800338a <HAL_SYSTICK_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d809      	bhi.n	80030d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030bc:	2200      	movs	r2, #0
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f000 f937 	bl	8003336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_InitTick+0x74>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e007      	b.n	80030e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e004      	b.n	80030e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
 80030da:	e001      	b.n	80030e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	20000004 	.word	0x20000004
 80030f4:	20000008 	.word	0x20000008

080030f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x20>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_IncTick+0x24>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4413      	add	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_IncTick+0x24>)
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000000c 	.word	0x2000000c
 800311c:	20002878 	.word	0x20002878

08003120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return uwTick;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_GetTick+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20002878 	.word	0x20002878

08003138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff ffee 	bl	8003120 <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d005      	beq.n	800315e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_Delay+0x44>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800315e:	bf00      	nop
 8003160:	f7ff ffde 	bl	8003120 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	429a      	cmp	r2, r3
 800316e:	d8f7      	bhi.n	8003160 <HAL_Delay+0x28>
  {
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60d3      	str	r3, [r2, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0b      	blt.n	800320e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <__NVIC_EnableIRQ+0x38>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ec:	d301      	bcc.n	80032f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00f      	b.n	8003312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <SysTick_Config+0x40>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fa:	210f      	movs	r1, #15
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f7ff ff8e 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <SysTick_Config+0x40>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <SysTick_Config+0x40>)
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	e000e010 	.word	0xe000e010

08003320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff29 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003348:	f7ff ff3e 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 800334c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f7ff ff8e 	bl	8003274 <NVIC_EncodePriority>
 8003358:	4602      	mov	r2, r0
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff5d 	bl	8003220 <__NVIC_SetPriority>
}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff31 	bl	80031e4 <__NVIC_EnableIRQ>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ffa2 	bl	80032dc <SysTick_Config>
 8003398:	4603      	mov	r3, r0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b2:	e148      	b.n	8003646 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 813a 	beq.w	8003640 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d005      	beq.n	80033e4 <HAL_GPIO_Init+0x40>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d130      	bne.n	8003446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341a:	2201      	movs	r2, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0201 	and.w	r2, r3, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b03      	cmp	r3, #3
 8003450:	d017      	beq.n	8003482 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d123      	bne.n	80034d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	08da      	lsrs	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	220f      	movs	r2, #15
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	08da      	lsrs	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3208      	adds	r2, #8
 80034d0:	6939      	ldr	r1, [r7, #16]
 80034d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	2203      	movs	r2, #3
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4013      	ands	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0203 	and.w	r2, r3, #3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8094 	beq.w	8003640 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003518:	4b52      	ldr	r3, [pc, #328]	; (8003664 <HAL_GPIO_Init+0x2c0>)
 800351a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351c:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_GPIO_Init+0x2c0>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6613      	str	r3, [r2, #96]	; 0x60
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_GPIO_Init+0x2c0>)
 8003526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003530:	4a4d      	ldr	r2, [pc, #308]	; (8003668 <HAL_GPIO_Init+0x2c4>)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	3302      	adds	r3, #2
 8003538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	220f      	movs	r2, #15
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800355a:	d00d      	beq.n	8003578 <HAL_GPIO_Init+0x1d4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a43      	ldr	r2, [pc, #268]	; (800366c <HAL_GPIO_Init+0x2c8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <HAL_GPIO_Init+0x1d0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a42      	ldr	r2, [pc, #264]	; (8003670 <HAL_GPIO_Init+0x2cc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_GPIO_Init+0x1cc>
 800356c:	2302      	movs	r3, #2
 800356e:	e004      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 8003570:	2307      	movs	r3, #7
 8003572:	e002      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 8003578:	2300      	movs	r3, #0
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	f002 0203 	and.w	r2, r2, #3
 8003580:	0092      	lsls	r2, r2, #2
 8003582:	4093      	lsls	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800358a:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_GPIO_Init+0x2c4>)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035bc:	4a2d      	ldr	r2, [pc, #180]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e6:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003616:	4b17      	ldr	r3, [pc, #92]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363a:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3301      	adds	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f47f aeaf 	bne.w	80033b4 <HAL_GPIO_Init+0x10>
  }
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40021000 	.word	0x40021000
 8003668:	40010000 	.word	0x40010000
 800366c:	48000400 	.word	0x48000400
 8003670:	48000800 	.word	0x48000800
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
 8003684:	4613      	mov	r3, r2
 8003686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003694:	e002      	b.n	800369c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	041a      	lsls	r2, r3, #16
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43d9      	mvns	r1, r3
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	400b      	ands	r3, r1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e081      	b.n	80037f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fa0c 	bl	8002b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800372c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e006      	b.n	8003764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d104      	bne.n	8003776 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003788:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003798:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69d9      	ldr	r1, [r3, #28]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
 800380c:	4613      	mov	r3, r2
 800380e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	f040 80da 	bne.w	80039d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_I2C_Master_Transmit+0x30>
 8003828:	2302      	movs	r3, #2
 800382a:	e0d3      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x1d8>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003834:	f7ff fc74 	bl	8003120 <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2319      	movs	r3, #25
 8003840:	2201      	movs	r2, #1
 8003842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fb54 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0be      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2221      	movs	r2, #33	; 0x21
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2210      	movs	r2, #16
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	893a      	ldrh	r2, [r7, #8]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	2bff      	cmp	r3, #255	; 0xff
 8003886:	d90e      	bls.n	80038a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	22ff      	movs	r2, #255	; 0xff
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	b2da      	uxtb	r2, r3
 8003894:	8979      	ldrh	r1, [r7, #10]
 8003896:	4b51      	ldr	r3, [pc, #324]	; (80039dc <HAL_I2C_Master_Transmit+0x1e0>)
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fd4a 	bl	8004338 <I2C_TransferConfig>
 80038a4:	e06c      	b.n	8003980 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	4b48      	ldr	r3, [pc, #288]	; (80039dc <HAL_I2C_Master_Transmit+0x1e0>)
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fd39 	bl	8004338 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038c6:	e05b      	b.n	8003980 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	6a39      	ldr	r1, [r7, #32]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb51 	bl	8003f74 <I2C_WaitOnTXISFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e07b      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d034      	beq.n	8003980 <HAL_I2C_Master_Transmit+0x184>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d130      	bne.n	8003980 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	2200      	movs	r2, #0
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fae3 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e04d      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fced 	bl	8004338 <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fcdc 	bl	8004338 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d19e      	bne.n	80038c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	6a39      	ldr	r1, [r7, #32]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fb30 	bl	8003ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e01a      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2220      	movs	r2, #32
 80039a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80039b2:	400b      	ands	r3, r1
 80039b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	80002000 	.word	0x80002000
 80039e0:	fe00e800 	.word	0xfe00e800

080039e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	460b      	mov	r3, r1
 80039f2:	817b      	strh	r3, [r7, #10]
 80039f4:	4613      	mov	r3, r2
 80039f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	f040 80db 	bne.w	8003bbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_I2C_Master_Receive+0x30>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0d4      	b.n	8003bbe <HAL_I2C_Master_Receive+0x1da>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a1c:	f7ff fb80 	bl	8003120 <HAL_GetTick>
 8003a20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2319      	movs	r3, #25
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fa60 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0bf      	b.n	8003bbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2222      	movs	r2, #34	; 0x22
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	893a      	ldrh	r2, [r7, #8]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2bff      	cmp	r3, #255	; 0xff
 8003a6e:	d90e      	bls.n	8003a8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	22ff      	movs	r2, #255	; 0xff
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	8979      	ldrh	r1, [r7, #10]
 8003a7e:	4b52      	ldr	r3, [pc, #328]	; (8003bc8 <HAL_I2C_Master_Receive+0x1e4>)
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fc56 	bl	8004338 <I2C_TransferConfig>
 8003a8c:	e06d      	b.n	8003b6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_I2C_Master_Receive+0x1e4>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fc45 	bl	8004338 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003aae:	e05c      	b.n	8003b6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fad9 	bl	800406c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e07c      	b.n	8003bbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d034      	beq.n	8003b6a <HAL_I2C_Master_Receive+0x186>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d130      	bne.n	8003b6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f9ee 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e04d      	b.n	8003bbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2bff      	cmp	r3, #255	; 0xff
 8003b2a:	d90e      	bls.n	8003b4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	22ff      	movs	r2, #255	; 0xff
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	8979      	ldrh	r1, [r7, #10]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fbf8 	bl	8004338 <I2C_TransferConfig>
 8003b48:	e00f      	b.n	8003b6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fbe7 	bl	8004338 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d19d      	bne.n	8003ab0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fa3b 	bl	8003ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e01a      	b.n	8003bbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_I2C_Master_Receive+0x1e8>)
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	80002400 	.word	0x80002400
 8003bcc:	fe00e800 	.word	0xfe00e800

08003bd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	817b      	strh	r3, [r7, #10]
 8003be2:	460b      	mov	r3, r1
 8003be4:	813b      	strh	r3, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f040 80fd 	bne.w	8003df2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x34>
 8003bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0f1      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x4e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e0ea      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c26:	f7ff fa7b 	bl	8003120 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2319      	movs	r3, #25
 8003c32:	2201      	movs	r2, #1
 8003c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f95b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0d5      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2222      	movs	r2, #34	; 0x22
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2240      	movs	r2, #64	; 0x40
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c70:	88f8      	ldrh	r0, [r7, #6]
 8003c72:	893a      	ldrh	r2, [r7, #8]
 8003c74:	8979      	ldrh	r1, [r7, #10]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4603      	mov	r3, r0
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f8bf 	bl	8003e04 <I2C_RequestMemoryRead>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0ad      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2bff      	cmp	r3, #255	; 0xff
 8003ca0:	d90e      	bls.n	8003cc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	22ff      	movs	r2, #255	; 0xff
 8003ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	8979      	ldrh	r1, [r7, #10]
 8003cb0:	4b52      	ldr	r3, [pc, #328]	; (8003dfc <HAL_I2C_Mem_Read+0x22c>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fb3d 	bl	8004338 <I2C_TransferConfig>
 8003cbe:	e00f      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	8979      	ldrh	r1, [r7, #10]
 8003cd2:	4b4a      	ldr	r3, [pc, #296]	; (8003dfc <HAL_I2C_Mem_Read+0x22c>)
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fb2c 	bl	8004338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2104      	movs	r1, #4
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f902 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e07c      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d034      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x1d0>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d130      	bne.n	8003da0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f8d3 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e04d      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2bff      	cmp	r3, #255	; 0xff
 8003d60:	d90e      	bls.n	8003d80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	22ff      	movs	r2, #255	; 0xff
 8003d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8979      	ldrh	r1, [r7, #10]
 8003d70:	2300      	movs	r3, #0
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fadd 	bl	8004338 <I2C_TransferConfig>
 8003d7e:	e00f      	b.n	8003da0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 facc 	bl	8004338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d19a      	bne.n	8003ce0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f920 	bl	8003ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e01a      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_I2C_Mem_Read+0x230>)
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	80002400 	.word	0x80002400
 8003e00:	fe00e800 	.word	0xfe00e800

08003e04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	817b      	strh	r3, [r7, #10]
 8003e16:	460b      	mov	r3, r1
 8003e18:	813b      	strh	r3, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	8979      	ldrh	r1, [r7, #10]
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <I2C_RequestMemoryRead+0xa4>)
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fa84 	bl	8004338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f89d 	bl	8003f74 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e02c      	b.n	8003e9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4a:	893b      	ldrh	r3, [r7, #8]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
 8003e54:	e015      	b.n	8003e82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e56:	893b      	ldrh	r3, [r7, #8]
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f883 	bl	8003f74 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e012      	b.n	8003e9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e78:	893b      	ldrh	r3, [r7, #8]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f831 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	80002000 	.word	0x80002000

08003eac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d103      	bne.n	8003eca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d007      	beq.n	8003ee8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	619a      	str	r2, [r3, #24]
  }
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e022      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d01e      	beq.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7ff f907 	bl	8003120 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d113      	bne.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e00f      	b.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d0cd      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f80:	e02c      	b.n	8003fdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8ea 	bl	8004160 <I2C_IsErrorOccurred>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02a      	b.n	8003fec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d01e      	beq.n	8003fdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7ff f8bf 	bl	8003120 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d113      	bne.n	8003fdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	f043 0220 	orr.w	r2, r3, #32
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e007      	b.n	8003fec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d1cb      	bne.n	8003f82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004000:	e028      	b.n	8004054 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f8aa 	bl	8004160 <I2C_IsErrorOccurred>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e026      	b.n	8004064 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7ff f883 	bl	8003120 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d113      	bne.n	8004054 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e007      	b.n	8004064 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b20      	cmp	r3, #32
 8004060:	d1cf      	bne.n	8004002 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004078:	e064      	b.n	8004144 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f86e 	bl	8004160 <I2C_IsErrorOccurred>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e062      	b.n	8004154 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	d138      	bne.n	800410e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d105      	bne.n	80040b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e04e      	b.n	8004154 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d107      	bne.n	80040d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2210      	movs	r2, #16
 80040ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2204      	movs	r2, #4
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
 80040d2:	e002      	b.n	80040da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2220      	movs	r2, #32
 80040e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80040ee:	400b      	ands	r3, r1
 80040f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e022      	b.n	8004154 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7ff f807 	bl	8003120 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10f      	bne.n	8004144 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e007      	b.n	8004154 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d193      	bne.n	800407a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	fe00e800 	.word	0xfe00e800

08004160 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d075      	beq.n	8004278 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2210      	movs	r2, #16
 8004192:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004194:	e056      	b.n	8004244 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d052      	beq.n	8004244 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7fe ffbf 	bl	8003120 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <I2C_IsErrorOccurred+0x54>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d147      	bne.n	8004244 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d6:	d12e      	bne.n	8004236 <I2C_IsErrorOccurred+0xd6>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041de:	d02a      	beq.n	8004236 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d027      	beq.n	8004236 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041f6:	f7fe ff93 	bl	8003120 <HAL_GetTick>
 80041fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041fc:	e01b      	b.n	8004236 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041fe:	f7fe ff8f 	bl	8003120 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b19      	cmp	r3, #25
 800420a:	d914      	bls.n	8004236 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b20      	cmp	r3, #32
 8004242:	d1dc      	bne.n	80041fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b20      	cmp	r3, #32
 8004250:	d003      	beq.n	800425a <I2C_IsErrorOccurred+0xfa>
 8004252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004256:	2b00      	cmp	r3, #0
 8004258:	d09d      	beq.n	8004196 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800425a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2220      	movs	r2, #32
 8004268:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800429a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f043 0308 	orr.w	r3, r3, #8
 80042b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80042e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01c      	beq.n	8004328 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff fddc 	bl	8003eac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6859      	ldr	r1, [r3, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <I2C_IsErrorOccurred+0x1d4>)
 8004300:	400b      	ands	r3, r1
 8004302:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	431a      	orrs	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800432c:	4618      	mov	r0, r3
 800432e:	3728      	adds	r7, #40	; 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	fe00e800 	.word	0xfe00e800

08004338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	4613      	mov	r3, r2
 8004348:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004350:	7a7b      	ldrb	r3, [r7, #9]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004358:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	4313      	orrs	r3, r2
 8004362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004366:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	0d5b      	lsrs	r3, r3, #21
 8004372:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <I2C_TransferConfig+0x60>)
 8004378:	430b      	orrs	r3, r1
 800437a:	43db      	mvns	r3, r3
 800437c:	ea02 0103 	and.w	r1, r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	03ff63ff 	.word	0x03ff63ff

0800439c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d138      	bne.n	8004424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043bc:	2302      	movs	r3, #2
 80043be:	e032      	b.n	8004426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	; 0x24
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b20      	cmp	r3, #32
 8004446:	d139      	bne.n	80044bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004452:	2302      	movs	r3, #2
 8004454:	e033      	b.n	80044be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2224      	movs	r2, #36	; 0x24
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40007000 	.word	0x40007000

080044ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <HAL_PWREx_GetVoltageRange+0x18>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40007000 	.word	0x40007000

08004508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004516:	d130      	bne.n	800457a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d038      	beq.n	8004598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800452e:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004534:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2232      	movs	r2, #50	; 0x32
 800453c:	fb02 f303 	mul.w	r3, r2, r3
 8004540:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	0c9b      	lsrs	r3, r3, #18
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800454c:	e002      	b.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b01      	subs	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004560:	d102      	bne.n	8004568 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f2      	bne.n	800454e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004574:	d110      	bne.n	8004598 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e00f      	b.n	800459a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d007      	beq.n	8004598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004590:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004596:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40007000 	.word	0x40007000
 80045ac:	20000004 	.word	0x20000004
 80045b0:	431bde83 	.word	0x431bde83

080045b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f000 bc02 	b.w	8004dcc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c8:	4b96      	ldr	r3, [pc, #600]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d2:	4b94      	ldr	r3, [pc, #592]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80e4 	beq.w	80047b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_RCC_OscConfig+0x4c>
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	f040 808b 	bne.w	800470e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	f040 8087 	bne.w	800470e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004600:	4b88      	ldr	r3, [pc, #544]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_OscConfig+0x64>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e3d9      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <HAL_RCC_OscConfig+0x7e>
 8004628:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004630:	e005      	b.n	800463e <HAL_RCC_OscConfig+0x8a>
 8004632:	4b7c      	ldr	r3, [pc, #496]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800463e:	4293      	cmp	r3, r2
 8004640:	d223      	bcs.n	800468a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fd8c 	bl	8005164 <RCC_SetFlashLatencyFromMSIRange>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e3ba      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004656:	4b73      	ldr	r3, [pc, #460]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a72      	ldr	r2, [pc, #456]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800465c:	f043 0308 	orr.w	r3, r3, #8
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b70      	ldr	r3, [pc, #448]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	496d      	ldr	r1, [pc, #436]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004674:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	4968      	ldr	r1, [pc, #416]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	e025      	b.n	80046d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800468a:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b63      	ldr	r3, [pc, #396]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4960      	ldr	r1, [pc, #384]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a8:	4b5e      	ldr	r3, [pc, #376]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	495b      	ldr	r1, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fd4c 	bl	8005164 <RCC_SetFlashLatencyFromMSIRange>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e37a      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046d6:	f000 fc81 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 80046da:	4602      	mov	r2, r0
 80046dc:	4b51      	ldr	r3, [pc, #324]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	4950      	ldr	r1, [pc, #320]	; (8004828 <HAL_RCC_OscConfig+0x274>)
 80046e8:	5ccb      	ldrb	r3, [r1, r3]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	fa22 f303 	lsr.w	r3, r2, r3
 80046f2:	4a4e      	ldr	r2, [pc, #312]	; (800482c <HAL_RCC_OscConfig+0x278>)
 80046f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046f6:	4b4e      	ldr	r3, [pc, #312]	; (8004830 <HAL_RCC_OscConfig+0x27c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fcc0 	bl	8003080 <HAL_InitTick>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d052      	beq.n	80047b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	e35e      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d032      	beq.n	800477c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004716:	4b43      	ldr	r3, [pc, #268]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a42      	ldr	r2, [pc, #264]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004722:	f7fe fcfd 	bl	8003120 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800472a:	f7fe fcf9 	bl	8003120 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e347      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800473c:	4b39      	ldr	r3, [pc, #228]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a35      	ldr	r2, [pc, #212]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800474e:	f043 0308 	orr.w	r3, r3, #8
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4b33      	ldr	r3, [pc, #204]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4930      	ldr	r1, [pc, #192]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	492b      	ldr	r1, [pc, #172]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004776:	4313      	orrs	r3, r2
 8004778:	604b      	str	r3, [r1, #4]
 800477a:	e01a      	b.n	80047b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a28      	ldr	r2, [pc, #160]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004788:	f7fe fcca 	bl	8003120 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004790:	f7fe fcc6 	bl	8003120 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e314      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047a2:	4b20      	ldr	r3, [pc, #128]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x1dc>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d073      	beq.n	80048a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_OscConfig+0x21c>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d10e      	bne.n	80047e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d10b      	bne.n	80047e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d063      	beq.n	80048a4 <HAL_RCC_OscConfig+0x2f0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d15f      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e2f1      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d106      	bne.n	8004800 <HAL_RCC_OscConfig+0x24c>
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e025      	b.n	800484c <HAL_RCC_OscConfig+0x298>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004808:	d114      	bne.n	8004834 <HAL_RCC_OscConfig+0x280>
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a05      	ldr	r2, [pc, #20]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	4b03      	ldr	r3, [pc, #12]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a02      	ldr	r2, [pc, #8]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e013      	b.n	800484c <HAL_RCC_OscConfig+0x298>
 8004824:	40021000 	.word	0x40021000
 8004828:	0800d7e8 	.word	0x0800d7e8
 800482c:	20000004 	.word	0x20000004
 8004830:	20000008 	.word	0x20000008
 8004834:	4ba0      	ldr	r3, [pc, #640]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a9f      	ldr	r2, [pc, #636]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b9d      	ldr	r3, [pc, #628]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a9c      	ldr	r2, [pc, #624]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fe fc64 	bl	8003120 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485c:	f7fe fc60 	bl	8003120 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e2ae      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486e:	4b92      	ldr	r3, [pc, #584]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x2a8>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fe fc50 	bl	8003120 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7fe fc4c 	bl	8003120 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e29a      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004896:	4b88      	ldr	r3, [pc, #544]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x2d0>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d060      	beq.n	8004974 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_OscConfig+0x310>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d119      	bne.n	80048f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d116      	bne.n	80048f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c4:	4b7c      	ldr	r3, [pc, #496]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_OscConfig+0x328>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e277      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048dc:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	4973      	ldr	r1, [pc, #460]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f0:	e040      	b.n	8004974 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d023      	beq.n	8004942 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048fa:	4b6f      	ldr	r3, [pc, #444]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6e      	ldr	r2, [pc, #440]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fe fc0b 	bl	8003120 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490e:	f7fe fc07 	bl	8003120 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e255      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004920:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b62      	ldr	r3, [pc, #392]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	495f      	ldr	r1, [pc, #380]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	e018      	b.n	8004974 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a5c      	ldr	r2, [pc, #368]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800494c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fe fbe7 	bl	8003120 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004956:	f7fe fbe3 	bl	8003120 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e231      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004968:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d03c      	beq.n	80049fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01c      	beq.n	80049c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004988:	4b4b      	ldr	r3, [pc, #300]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 800498a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498e:	4a4a      	ldr	r2, [pc, #296]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fe fbc2 	bl	8003120 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a0:	f7fe fbbe 	bl	8003120 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e20c      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ef      	beq.n	80049a0 <HAL_RCC_OscConfig+0x3ec>
 80049c0:	e01b      	b.n	80049fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c2:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80049c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c8:	4a3b      	ldr	r2, [pc, #236]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fe fba5 	bl	8003120 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049da:	f7fe fba1 	bl	8003120 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e1ef      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ec:	4b32      	ldr	r3, [pc, #200]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 80049ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ef      	bne.n	80049da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80a6 	beq.w	8004b54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a0c:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a18:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a22:	6593      	str	r3, [r2, #88]	; 0x58
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a34:	4b21      	ldr	r3, [pc, #132]	; (8004abc <HAL_RCC_OscConfig+0x508>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d118      	bne.n	8004a72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <HAL_RCC_OscConfig+0x508>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <HAL_RCC_OscConfig+0x508>)
 8004a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4c:	f7fe fb68 	bl	8003120 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a54:	f7fe fb64 	bl	8003120 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e1b2      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_RCC_OscConfig+0x508>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d108      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4d8>
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a8a:	e029      	b.n	8004ae0 <HAL_RCC_OscConfig+0x52c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b05      	cmp	r3, #5
 8004a92:	d115      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x50c>
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004a9c:	f043 0304 	orr.w	r3, r3, #4
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	4a03      	ldr	r2, [pc, #12]	; (8004ab8 <HAL_RCC_OscConfig+0x504>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab4:	e014      	b.n	8004ae0 <HAL_RCC_OscConfig+0x52c>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40007000 	.word	0x40007000
 8004ac0:	4b9a      	ldr	r3, [pc, #616]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	4a99      	ldr	r2, [pc, #612]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad0:	4b96      	ldr	r3, [pc, #600]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a95      	ldr	r2, [pc, #596]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004ad8:	f023 0304 	bic.w	r3, r3, #4
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d016      	beq.n	8004b16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fe fb1a 	bl	8003120 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fe fb16 	bl	8003120 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e162      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b06:	4b89      	ldr	r3, [pc, #548]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0ed      	beq.n	8004af0 <HAL_RCC_OscConfig+0x53c>
 8004b14:	e015      	b.n	8004b42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b16:	f7fe fb03 	bl	8003120 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1e:	f7fe faff 	bl	8003120 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e14b      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b34:	4b7d      	ldr	r3, [pc, #500]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ed      	bne.n	8004b1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b42:	7ffb      	ldrb	r3, [r7, #31]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d105      	bne.n	8004b54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b48:	4b78      	ldr	r3, [pc, #480]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	4a77      	ldr	r2, [pc, #476]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d03c      	beq.n	8004bda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01c      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b68:	4b70      	ldr	r3, [pc, #448]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b6e:	4a6f      	ldr	r2, [pc, #444]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b78:	f7fe fad2 	bl	8003120 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b80:	f7fe face 	bl	8003120 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e11c      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b92:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ef      	beq.n	8004b80 <HAL_RCC_OscConfig+0x5cc>
 8004ba0:	e01b      	b.n	8004bda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ba2:	4b62      	ldr	r3, [pc, #392]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba8:	4a60      	ldr	r2, [pc, #384]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb2:	f7fe fab5 	bl	8003120 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bba:	f7fe fab1 	bl	8003120 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0ff      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ef      	bne.n	8004bba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80f3 	beq.w	8004dca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	f040 80c9 	bne.w	8004d80 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bee:	4b4f      	ldr	r3, [pc, #316]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 0203 	and.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d12c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d123      	bne.n	8004c5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d11b      	bne.n	8004c5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d113      	bne.n	8004c5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	3b01      	subs	r3, #1
 8004c42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d109      	bne.n	8004c5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d06b      	beq.n	8004d34 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d062      	beq.n	8004d28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c62:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0ac      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c72:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2d      	ldr	r2, [pc, #180]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c7e:	f7fe fa4f 	bl	8003120 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fe fa4b 	bl	8003120 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e099      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCC_OscConfig+0x77c>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	0112      	lsls	r2, r2, #4
 8004cb8:	4311      	orrs	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cbe:	0212      	lsls	r2, r2, #8
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0552      	lsls	r2, r2, #21
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cd2:	0852      	lsrs	r2, r2, #1
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	0652      	lsls	r2, r2, #25
 8004cd8:	4311      	orrs	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cde:	06d2      	lsls	r2, r2, #27
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	4912      	ldr	r1, [pc, #72]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ce8:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d00:	f7fe fa0e 	bl	8003120 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fe fa0a 	bl	8003120 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e058      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <HAL_RCC_OscConfig+0x778>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d26:	e050      	b.n	8004dca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04f      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d34:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d144      	bne.n	8004dca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a23      	ldr	r2, [pc, #140]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d4c:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d58:	f7fe f9e2 	bl	8003120 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fe f9de 	bl	8003120 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e02c      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d72:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x7ac>
 8004d7e:	e024      	b.n	8004dca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b0c      	cmp	r3, #12
 8004d84:	d01f      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fe f9c5 	bl	8003120 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9a:	f7fe f9c1 	bl	8003120 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e00f      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f0      	bne.n	8004d9a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	4905      	ldr	r1, [pc, #20]	; (8004dd4 <HAL_RCC_OscConfig+0x820>)
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCC_OscConfig+0x824>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60cb      	str	r3, [r1, #12]
 8004dc4:	e001      	b.n	8004dca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	feeefffc 	.word	0xfeeefffc

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0e7      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df0:	4b75      	ldr	r3, [pc, #468]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d910      	bls.n	8004e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b72      	ldr	r3, [pc, #456]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 0207 	bic.w	r2, r3, #7
 8004e06:	4970      	ldr	r1, [pc, #448]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0cf      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	4b66      	ldr	r3, [pc, #408]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d908      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3c:	4b63      	ldr	r3, [pc, #396]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4960      	ldr	r1, [pc, #384]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04c      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e62:	4b5a      	ldr	r3, [pc, #360]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d121      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e0a6      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e7a:	4b54      	ldr	r3, [pc, #336]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d115      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e09a      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e92:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e08e      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea2:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e086      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eb2:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 0203 	bic.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4943      	ldr	r1, [pc, #268]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fe f92c 	bl	8003120 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ecc:	f7fe f928 	bl	8003120 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e06e      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 020c 	and.w	r2, r3, #12
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d1eb      	bne.n	8004ecc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d208      	bcs.n	8004f22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	492b      	ldr	r1, [pc, #172]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f22:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d210      	bcs.n	8004f52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 0207 	bic.w	r2, r3, #7
 8004f38:	4923      	ldr	r1, [pc, #140]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e036      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4918      	ldr	r1, [pc, #96]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4910      	ldr	r1, [pc, #64]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f90:	f000 f824 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	490b      	ldr	r1, [pc, #44]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f4>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1fc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe f863 	bl	8003080 <HAL_InitTick>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40022000 	.word	0x40022000
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	0800d7e8 	.word	0x0800d7e8
 8004fd4:	20000004 	.word	0x20000004
 8004fd8:	20000008 	.word	0x20000008

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	; 0x24
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fea:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x34>
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d121      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d11e      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005010:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d107      	bne.n	800502c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800501e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	e005      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005040:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10d      	bne.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b04      	cmp	r3, #4
 8005052:	d102      	bne.n	800505a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	e004      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d101      	bne.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005060:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005062:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d134      	bne.n	80050d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d003      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0xa6>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d003      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0xac>
 8005080:	e005      	b.n	800508e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005084:	617b      	str	r3, [r7, #20]
      break;
 8005086:	e005      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800508a:	617b      	str	r3, [r7, #20]
      break;
 800508c:	e002      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	617b      	str	r3, [r7, #20]
      break;
 8005092:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	3301      	adds	r3, #1
 80050a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	fb03 f202 	mul.w	r2, r3, r2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	0e5b      	lsrs	r3, r3, #25
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	3301      	adds	r3, #1
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050d4:	69bb      	ldr	r3, [r7, #24]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3724      	adds	r7, #36	; 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	0800d800 	.word	0x0800d800
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_GetHCLKFreq+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000004 	.word	0x20000004

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005110:	f7ff fff0 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4904      	ldr	r1, [pc, #16]	; (8005134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000
 8005134:	0800d7f8 	.word	0x0800d7f8

08005138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800513c:	f7ff ffda 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	0adb      	lsrs	r3, r3, #11
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4904      	ldr	r1, [pc, #16]	; (8005160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800514e:	5ccb      	ldrb	r3, [r1, r3]
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	0800d7f8 	.word	0x0800d7f8

08005164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005170:	4b2a      	ldr	r3, [pc, #168]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800517c:	f7ff f9b6 	bl	80044ec <HAL_PWREx_GetVoltageRange>
 8005180:	6178      	str	r0, [r7, #20]
 8005182:	e014      	b.n	80051ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	4a24      	ldr	r2, [pc, #144]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518e:	6593      	str	r3, [r2, #88]	; 0x58
 8005190:	4b22      	ldr	r3, [pc, #136]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800519c:	f7ff f9a6 	bl	80044ec <HAL_PWREx_GetVoltageRange>
 80051a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b1e      	ldr	r3, [pc, #120]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	4a1d      	ldr	r2, [pc, #116]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b4:	d10b      	bne.n	80051ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b80      	cmp	r3, #128	; 0x80
 80051ba:	d919      	bls.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2ba0      	cmp	r3, #160	; 0xa0
 80051c0:	d902      	bls.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051c2:	2302      	movs	r3, #2
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e013      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051c8:	2301      	movs	r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e010      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d902      	bls.n	80051da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051d4:	2303      	movs	r3, #3
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	e00a      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d102      	bne.n	80051e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051e0:	2302      	movs	r3, #2
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	e004      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b70      	cmp	r3, #112	; 0x70
 80051ea:	d101      	bne.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051ec:	2301      	movs	r3, #1
 80051ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 0207 	bic.w	r2, r3, #7
 80051f8:	4909      	ldr	r1, [pc, #36]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000
 8005220:	40022000 	.word	0x40022000

08005224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800522c:	2300      	movs	r3, #0
 800522e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005230:	2300      	movs	r3, #0
 8005232:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523c:	2b00      	cmp	r3, #0
 800523e:	d031      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005248:	d01a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800524a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800524e:	d814      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005258:	d10f      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800525a:	4b5d      	ldr	r3, [pc, #372]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4a5c      	ldr	r2, [pc, #368]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005264:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005266:	e00c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f9de 	bl	8005630 <RCCEx_PLLSAI1_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	74fb      	strb	r3, [r7, #19]
      break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005288:	4b51      	ldr	r3, [pc, #324]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	494e      	ldr	r1, [pc, #312]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7cfb      	ldrb	r3, [r7, #19]
 80052a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 809e 	beq.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052b6:	4b46      	ldr	r3, [pc, #280]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052cc:	4b40      	ldr	r3, [pc, #256]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	4a3f      	ldr	r2, [pc, #252]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6593      	str	r3, [r2, #88]	; 0x58
 80052d8:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a39      	ldr	r2, [pc, #228]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052f4:	f7fd ff14 	bl	8003120 <HAL_GetTick>
 80052f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052fa:	e009      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fc:	f7fd ff10 	bl	8003120 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d902      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	74fb      	strb	r3, [r7, #19]
        break;
 800530e:	e005      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005310:	4b30      	ldr	r3, [pc, #192]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ef      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d15a      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005322:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	429a      	cmp	r2, r3
 800533c:	d019      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005348:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800534a:	4b21      	ldr	r3, [pc, #132]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800536a:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d016      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd fed0 	bl	8003120 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005382:	e00b      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fd fecc 	bl	8003120 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d902      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	74fb      	strb	r3, [r7, #19]
            break;
 800539a:	e006      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ec      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10b      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053be:	4904      	ldr	r1, [pc, #16]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053c6:	e009      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	74bb      	strb	r3, [r7, #18]
 80053cc:	e006      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053dc:	7c7b      	ldrb	r3, [r7, #17]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e2:	4b8a      	ldr	r3, [pc, #552]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	4a89      	ldr	r2, [pc, #548]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fa:	4b84      	ldr	r3, [pc, #528]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f023 0203 	bic.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	4980      	ldr	r1, [pc, #512]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800541c:	4b7b      	ldr	r3, [pc, #492]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f023 020c 	bic.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	4978      	ldr	r1, [pc, #480]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800543e:	4b73      	ldr	r3, [pc, #460]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	496f      	ldr	r1, [pc, #444]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005460:	4b6a      	ldr	r3, [pc, #424]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	4967      	ldr	r1, [pc, #412]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005482:	4b62      	ldr	r3, [pc, #392]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	495e      	ldr	r1, [pc, #376]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	4956      	ldr	r1, [pc, #344]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c6:	4b51      	ldr	r3, [pc, #324]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	494d      	ldr	r1, [pc, #308]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d028      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e8:	4b48      	ldr	r3, [pc, #288]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4945      	ldr	r1, [pc, #276]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005506:	d106      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b40      	ldr	r3, [pc, #256]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a3f      	ldr	r2, [pc, #252]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005512:	60d3      	str	r3, [r2, #12]
 8005514:	e011      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800551e:	d10c      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	2101      	movs	r1, #1
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f882 	bl	8005630 <RCCEx_PLLSAI1_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005536:	7cfb      	ldrb	r3, [r7, #19]
 8005538:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d028      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005546:	4b31      	ldr	r3, [pc, #196]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	492d      	ldr	r1, [pc, #180]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005564:	d106      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	4a28      	ldr	r2, [pc, #160]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800556c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005570:	60d3      	str	r3, [r2, #12]
 8005572:	e011      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800557c:	d10c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	2101      	movs	r1, #1
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f853 	bl	8005630 <RCCEx_PLLSAI1_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01c      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b2:	4916      	ldr	r1, [pc, #88]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c2:	d10c      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	2102      	movs	r1, #2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f830 	bl	8005630 <RCCEx_PLLSAI1_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f8:	4904      	ldr	r1, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005600:	7cbb      	ldrb	r3, [r7, #18]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000

08005610 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800561a:	f043 0304 	orr.w	r3, r3, #4
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000

08005630 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800563e:	4b74      	ldr	r3, [pc, #464]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800564a:	4b71      	ldr	r3, [pc, #452]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0203 	and.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d10d      	bne.n	8005676 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
       ||
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005662:	4b6b      	ldr	r3, [pc, #428]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
       ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d047      	beq.n	8005706 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	e044      	b.n	8005706 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d018      	beq.n	80056b6 <RCCEx_PLLSAI1_Config+0x86>
 8005684:	2b03      	cmp	r3, #3
 8005686:	d825      	bhi.n	80056d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005688:	2b01      	cmp	r3, #1
 800568a:	d002      	beq.n	8005692 <RCCEx_PLLSAI1_Config+0x62>
 800568c:	2b02      	cmp	r3, #2
 800568e:	d009      	beq.n	80056a4 <RCCEx_PLLSAI1_Config+0x74>
 8005690:	e020      	b.n	80056d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005692:	4b5f      	ldr	r3, [pc, #380]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11d      	bne.n	80056da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a2:	e01a      	b.n	80056da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056a4:	4b5a      	ldr	r3, [pc, #360]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d116      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b4:	e013      	b.n	80056de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056b6:	4b56      	ldr	r3, [pc, #344]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056c2:	4b53      	ldr	r3, [pc, #332]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056d2:	e006      	b.n	80056e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      break;
 80056d8:	e004      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ea:	4b49      	ldr	r3, [pc, #292]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6819      	ldr	r1, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	430b      	orrs	r3, r1
 8005700:	4943      	ldr	r1, [pc, #268]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005702:	4313      	orrs	r3, r2
 8005704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d17c      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800570c:	4b40      	ldr	r3, [pc, #256]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a3f      	ldr	r2, [pc, #252]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005718:	f7fd fd02 	bl	8003120 <HAL_GetTick>
 800571c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800571e:	e009      	b.n	8005734 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005720:	f7fd fcfe 	bl	8003120 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d902      	bls.n	8005734 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	73fb      	strb	r3, [r7, #15]
        break;
 8005732:	e005      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005734:	4b36      	ldr	r3, [pc, #216]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ef      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d15f      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d110      	bne.n	800576e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800574c:	4b30      	ldr	r3, [pc, #192]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	0211      	lsls	r1, r2, #8
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68d2      	ldr	r2, [r2, #12]
 8005762:	06d2      	lsls	r2, r2, #27
 8005764:	430a      	orrs	r2, r1
 8005766:	492a      	ldr	r1, [pc, #168]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005768:	4313      	orrs	r3, r2
 800576a:	610b      	str	r3, [r1, #16]
 800576c:	e027      	b.n	80057be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d112      	bne.n	800579a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005774:	4b26      	ldr	r3, [pc, #152]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800577c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6892      	ldr	r2, [r2, #8]
 8005784:	0211      	lsls	r1, r2, #8
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6912      	ldr	r2, [r2, #16]
 800578a:	0852      	lsrs	r2, r2, #1
 800578c:	3a01      	subs	r2, #1
 800578e:	0552      	lsls	r2, r2, #21
 8005790:	430a      	orrs	r2, r1
 8005792:	491f      	ldr	r1, [pc, #124]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005794:	4313      	orrs	r3, r2
 8005796:	610b      	str	r3, [r1, #16]
 8005798:	e011      	b.n	80057be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6892      	ldr	r2, [r2, #8]
 80057aa:	0211      	lsls	r1, r2, #8
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6952      	ldr	r2, [r2, #20]
 80057b0:	0852      	lsrs	r2, r2, #1
 80057b2:	3a01      	subs	r2, #1
 80057b4:	0652      	lsls	r2, r2, #25
 80057b6:	430a      	orrs	r2, r1
 80057b8:	4915      	ldr	r1, [pc, #84]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a13      	ldr	r2, [pc, #76]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ca:	f7fd fca9 	bl	8003120 <HAL_GetTick>
 80057ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057d0:	e009      	b.n	80057e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d2:	f7fd fca5 	bl	8003120 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d902      	bls.n	80057e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	73fb      	strb	r3, [r7, #15]
          break;
 80057e4:	e005      	b.n	80057f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0ef      	beq.n	80057d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	4903      	ldr	r1, [pc, #12]	; (8005810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005802:	4313      	orrs	r3, r2
 8005804:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40021000 	.word	0x40021000

08005814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e095      	b.n	8005952 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d108      	bne.n	8005840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005836:	d009      	beq.n	800584c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	61da      	str	r2, [r3, #28]
 800583e:	e005      	b.n	800584c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fd f9b2 	bl	8002bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800588c:	d902      	bls.n	8005894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e002      	b.n	800589a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058a2:	d007      	beq.n	80058b4 <HAL_SPI_Init+0xa0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	ea42 0103 	orr.w	r1, r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	f003 0204 	and.w	r2, r3, #4
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005930:	ea42 0103 	orr.w	r1, r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b088      	sub	sp, #32
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_SPI_Transmit+0x22>
 8005978:	2302      	movs	r3, #2
 800597a:	e158      	b.n	8005c2e <HAL_SPI_Transmit+0x2d4>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005984:	f7fd fbcc 	bl	8003120 <HAL_GetTick>
 8005988:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800599a:	2302      	movs	r3, #2
 800599c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800599e:	e13d      	b.n	8005c1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_SPI_Transmit+0x52>
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059b0:	e134      	b.n	8005c1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2203      	movs	r2, #3
 80059b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fc:	d10f      	bne.n	8005a1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d007      	beq.n	8005a3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a44:	d94b      	bls.n	8005ade <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_Transmit+0xfa>
 8005a4e:	8afb      	ldrh	r3, [r7, #22]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d13e      	bne.n	8005ad2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	881a      	ldrh	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a78:	e02b      	b.n	8005ad2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d112      	bne.n	8005aae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aac:	e011      	b.n	8005ad2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aae:	f7fd fb37 	bl	8003120 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d803      	bhi.n	8005ac6 <HAL_SPI_Transmit+0x16c>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d102      	bne.n	8005acc <HAL_SPI_Transmit+0x172>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ad0:	e0a4      	b.n	8005c1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ce      	bne.n	8005a7a <HAL_SPI_Transmit+0x120>
 8005adc:	e07c      	b.n	8005bd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_SPI_Transmit+0x192>
 8005ae6:	8afb      	ldrh	r3, [r7, #22]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d170      	bne.n	8005bce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d912      	bls.n	8005b1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	881a      	ldrh	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b02      	subs	r3, #2
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b1a:	e058      	b.n	8005bce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b42:	e044      	b.n	8005bce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d12b      	bne.n	8005baa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d912      	bls.n	8005b82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b02      	subs	r3, #2
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b80:	e025      	b.n	8005bce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba8:	e011      	b.n	8005bce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005baa:	f7fd fab9 	bl	8003120 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d803      	bhi.n	8005bc2 <HAL_SPI_Transmit+0x268>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d102      	bne.n	8005bc8 <HAL_SPI_Transmit+0x26e>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bcc:	e026      	b.n	8005c1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1b5      	bne.n	8005b44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fb5b 	bl	8006298 <SPI_EndRxTxTransaction>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e000      	b.n	8005c1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005c1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08a      	sub	sp, #40	; 0x28
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c44:	2301      	movs	r3, #1
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x26>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e1fb      	b.n	8006054 <HAL_SPI_TransmitReceive+0x41e>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c64:	f7fd fa5c 	bl	8003120 <HAL_GetTick>
 8005c68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c7c:	887b      	ldrh	r3, [r7, #2]
 8005c7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c80:	7efb      	ldrb	r3, [r7, #27]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d00e      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0x6e>
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8c:	d106      	bne.n	8005c9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <HAL_SPI_TransmitReceive+0x66>
 8005c96:	7efb      	ldrb	r3, [r7, #27]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d003      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ca2:	e1cd      	b.n	8006040 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_SPI_TransmitReceive+0x80>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_SPI_TransmitReceive+0x80>
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005cbc:	e1c0      	b.n	8006040 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d003      	beq.n	8005cd2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2205      	movs	r2, #5
 8005cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	887a      	ldrh	r2, [r7, #2]
 8005cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	887a      	ldrh	r2, [r7, #2]
 8005cfe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d14:	d802      	bhi.n	8005d1c <HAL_SPI_TransmitReceive+0xe6>
 8005d16:	8a3b      	ldrh	r3, [r7, #16]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d908      	bls.n	8005d2e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d2a:	605a      	str	r2, [r3, #4]
 8005d2c:	e007      	b.n	8005d3e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d007      	beq.n	8005d5c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d64:	d97c      	bls.n	8005e60 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x13e>
 8005d6e:	8a7b      	ldrh	r3, [r7, #18]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d169      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	881a      	ldrh	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d98:	e056      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d11b      	bne.n	8005de0 <HAL_SPI_TransmitReceive+0x1aa>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x1aa>
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d113      	bne.n	8005de0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d11c      	bne.n	8005e28 <HAL_SPI_TransmitReceive+0x1f2>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d016      	beq.n	8005e28 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	b292      	uxth	r2, r2
 8005e06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	1c9a      	adds	r2, r3, #2
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e24:	2301      	movs	r3, #1
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e28:	f7fd f97a 	bl	8003120 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d807      	bhi.n	8005e48 <HAL_SPI_TransmitReceive+0x212>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d003      	beq.n	8005e48 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e46:	e0fb      	b.n	8006040 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1a3      	bne.n	8005d9a <HAL_SPI_TransmitReceive+0x164>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d19d      	bne.n	8005d9a <HAL_SPI_TransmitReceive+0x164>
 8005e5e:	e0df      	b.n	8006020 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x23a>
 8005e68:	8a7b      	ldrh	r3, [r7, #18]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	f040 80cb 	bne.w	8006006 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d912      	bls.n	8005ea0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	881a      	ldrh	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b02      	subs	r3, #2
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e9e:	e0b2      	b.n	8006006 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec6:	e09e      	b.n	8006006 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d134      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x30a>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d02f      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x30a>
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d12c      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d912      	bls.n	8005f16 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	881a      	ldrh	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	1c9a      	adds	r2, r3, #2
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b02      	subs	r3, #2
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f14:	e012      	b.n	8005f3c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d148      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x3aa>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d042      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d923      	bls.n	8005fae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	b292      	uxth	r2, r2
 8005f72:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b02      	subs	r3, #2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d81f      	bhi.n	8005fdc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005faa:	605a      	str	r2, [r3, #4]
 8005fac:	e016      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f103 020c 	add.w	r2, r3, #12
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	7812      	ldrb	r2, [r2, #0]
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fe0:	f7fd f89e 	bl	8003120 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d803      	bhi.n	8005ff8 <HAL_SPI_TransmitReceive+0x3c2>
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff6:	d102      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x3c8>
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006004:	e01c      	b.n	8006040 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	f47f af5b 	bne.w	8005ec8 <HAL_SPI_TransmitReceive+0x292>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	f47f af54 	bne.w	8005ec8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f937 	bl	8006298 <SPI_EndRxTxTransaction>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	661a      	str	r2, [r3, #96]	; 0x60
 800603c:	e000      	b.n	8006040 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800603e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006054:	4618      	mov	r0, r3
 8006056:	3728      	adds	r7, #40	; 0x28
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800606c:	f7fd f858 	bl	8003120 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	4413      	add	r3, r2
 800607a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800607c:	f7fd f850 	bl	8003120 <HAL_GetTick>
 8006080:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006082:	4b39      	ldr	r3, [pc, #228]	; (8006168 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	015b      	lsls	r3, r3, #5
 8006088:	0d1b      	lsrs	r3, r3, #20
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	fb02 f303 	mul.w	r3, r2, r3
 8006090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006092:	e054      	b.n	800613e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d050      	beq.n	800613e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800609c:	f7fd f840 	bl	8003120 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d902      	bls.n	80060b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d13d      	bne.n	800612e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ca:	d111      	bne.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d4:	d004      	beq.n	80060e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d107      	bne.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f8:	d10f      	bne.n	800611a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e017      	b.n	800615e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	3b01      	subs	r3, #1
 800613c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	bf0c      	ite	eq
 800614e:	2301      	moveq	r3, #1
 8006150:	2300      	movne	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	429a      	cmp	r2, r3
 800615a:	d19b      	bne.n	8006094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000004 	.word	0x20000004

0800616c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800617e:	f7fc ffcf 	bl	8003120 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	4413      	add	r3, r2
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800618e:	f7fc ffc7 	bl	8003120 <HAL_GetTick>
 8006192:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800619c:	4b3d      	ldr	r3, [pc, #244]	; (8006294 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00da      	lsls	r2, r3, #3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	0d1b      	lsrs	r3, r3, #20
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061b4:	e060      	b.n	8006278 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061bc:	d107      	bne.n	80061ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d050      	beq.n	8006278 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d6:	f7fc ffa3 	bl	8003120 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d902      	bls.n	80061ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d13d      	bne.n	8006268 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006204:	d111      	bne.n	800622a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620e:	d004      	beq.n	800621a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006218:	d107      	bne.n	800622a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006228:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006232:	d10f      	bne.n	8006254 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006252:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e010      	b.n	800628a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	3b01      	subs	r3, #1
 8006276:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4013      	ands	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d196      	bne.n	80061b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3728      	adds	r7, #40	; 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000004 	.word	0x20000004

08006298 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff ff5b 	bl	800616c <SPI_WaitFifoStateUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c0:	f043 0220 	orr.w	r2, r3, #32
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e027      	b.n	800631c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2200      	movs	r2, #0
 80062d4:	2180      	movs	r1, #128	; 0x80
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fec0 	bl	800605c <SPI_WaitFlagStateUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e6:	f043 0220 	orr.w	r2, r3, #32
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e014      	b.n	800631c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff ff34 	bl	800616c <SPI_WaitFifoStateUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e000      	b.n	800631c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e049      	b.n	80063ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fc fc82 	bl	8002c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fa00 	bl	8006768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d001      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e03b      	b.n	8006464 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a19      	ldr	r2, [pc, #100]	; (8006470 <HAL_TIM_Base_Start_IT+0x9c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x4e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006416:	d004      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x4e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a15      	ldr	r2, [pc, #84]	; (8006474 <HAL_TIM_Base_Start_IT+0xa0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d115      	bne.n	800644e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <HAL_TIM_Base_Start_IT+0xa4>)
 800642a:	4013      	ands	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b06      	cmp	r3, #6
 8006432:	d015      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x8c>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643a:	d011      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	e008      	b.n	8006460 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e000      	b.n	8006462 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006460:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40014000 	.word	0x40014000
 8006478:	00010007 	.word	0x00010007

0800647c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0201 	bic.w	r2, r2, #1
 8006492:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6a1a      	ldr	r2, [r3, #32]
 800649a:	f241 1311 	movw	r3, #4369	; 0x1111
 800649e:	4013      	ands	r3, r2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10f      	bne.n	80064c4 <HAL_TIM_Base_Stop_IT+0x48>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	f240 4344 	movw	r3, #1092	; 0x444
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <HAL_TIM_Base_Stop_IT+0x48>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d122      	bne.n	8006536 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d11b      	bne.n	8006536 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f06f 0202 	mvn.w	r2, #2
 8006506:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f905 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 8006522:	e005      	b.n	8006530 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f8f7 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f908 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d122      	bne.n	800658a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b04      	cmp	r3, #4
 8006550:	d11b      	bne.n	800658a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f06f 0204 	mvn.w	r2, #4
 800655a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f8db 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 8006576:	e005      	b.n	8006584 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f8cd 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8de 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d122      	bne.n	80065de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d11b      	bne.n	80065de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f06f 0208 	mvn.w	r2, #8
 80065ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2204      	movs	r2, #4
 80065b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f8b1 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 80065ca:	e005      	b.n	80065d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f8a3 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f8b4 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d122      	bne.n	8006632 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d11b      	bne.n	8006632 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f06f 0210 	mvn.w	r2, #16
 8006602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2208      	movs	r2, #8
 8006608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f887 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 800661e:	e005      	b.n	800662c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f879 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f88a 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d10e      	bne.n	800665e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b01      	cmp	r3, #1
 800664c:	d107      	bne.n	800665e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f06f 0201 	mvn.w	r2, #1
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fc f8a7 	bl	80027ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d10e      	bne.n	800668a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d107      	bne.n	800668a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f8dd 	bl	8006844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006698:	d10e      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d107      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8d0 	bl	8006858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	d10e      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d107      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f838 	bl	8006754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d10e      	bne.n	8006710 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0220 	mvn.w	r2, #32
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f890 	bl	8006830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a2a      	ldr	r2, [pc, #168]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_Base_SetConfig+0x20>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d108      	bne.n	800679a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a21      	ldr	r2, [pc, #132]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00b      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d007      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <TIM_Base_SetConfig+0xc0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_Base_SetConfig+0x52>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <TIM_Base_SetConfig+0xc4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d108      	bne.n	80067cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <TIM_Base_SetConfig+0xbc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0xa0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0b      	ldr	r2, [pc, #44]	; (8006828 <TIM_Base_SetConfig+0xc0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0xa0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a0a      	ldr	r2, [pc, #40]	; (800682c <TIM_Base_SetConfig+0xc4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d103      	bne.n	8006810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	615a      	str	r2, [r3, #20]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400

08006830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e040      	b.n	8006900 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fc fa06 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2224      	movs	r2, #36	; 0x24
 8006898:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8c0 	bl	8006a30 <UART_SetConfig>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e022      	b.n	8006900 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fae0 	bl	8006e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fb67 	bl	8006fcc <UART_CheckIdleState>
 80068fe:	4603      	mov	r3, r0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800691c:	2b20      	cmp	r3, #32
 800691e:	f040 8082 	bne.w	8006a26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_UART_Transmit+0x26>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e07a      	b.n	8006a28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_UART_Transmit+0x38>
 800693c:	2302      	movs	r3, #2
 800693e:	e073      	b.n	8006a28 <HAL_UART_Transmit+0x120>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006956:	f7fc fbe3 	bl	8003120 <HAL_GetTick>
 800695a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006974:	d108      	bne.n	8006988 <HAL_UART_Transmit+0x80>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e003      	b.n	8006990 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006998:	e02d      	b.n	80069f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	2180      	movs	r1, #128	; 0x80
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fb5a 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e039      	b.n	8006a28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	881a      	ldrh	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069c6:	b292      	uxth	r2, r2
 80069c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	3302      	adds	r3, #2
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e008      	b.n	80069e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	781a      	ldrb	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	b292      	uxth	r2, r2
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3301      	adds	r3, #1
 80069e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1cb      	bne.n	800699a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2140      	movs	r1, #64	; 0x40
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fb26 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e005      	b.n	8006a28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a26:	2302      	movs	r3, #2
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4bb4      	ldr	r3, [pc, #720]	; (8006d30 <UART_SetConfig+0x300>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4aa9      	ldr	r2, [pc, #676]	; (8006d34 <UART_SetConfig+0x304>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aac:	430a      	orrs	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4aa0      	ldr	r2, [pc, #640]	; (8006d38 <UART_SetConfig+0x308>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d126      	bne.n	8006b08 <UART_SetConfig+0xd8>
 8006aba:	4ba0      	ldr	r3, [pc, #640]	; (8006d3c <UART_SetConfig+0x30c>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d81b      	bhi.n	8006b00 <UART_SetConfig+0xd0>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0xa0>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006af1 	.word	0x08006af1
 8006ad8:	08006ae9 	.word	0x08006ae9
 8006adc:	08006af9 	.word	0x08006af9
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e080      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aee:	e07c      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e078      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afe:	e074      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b06:	e070      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a8c      	ldr	r2, [pc, #560]	; (8006d40 <UART_SetConfig+0x310>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d138      	bne.n	8006b84 <UART_SetConfig+0x154>
 8006b12:	4b8a      	ldr	r3, [pc, #552]	; (8006d3c <UART_SetConfig+0x30c>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b18:	f003 030c 	and.w	r3, r3, #12
 8006b1c:	2b0c      	cmp	r3, #12
 8006b1e:	d82d      	bhi.n	8006b7c <UART_SetConfig+0x14c>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0xf8>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b5d 	.word	0x08006b5d
 8006b2c:	08006b7d 	.word	0x08006b7d
 8006b30:	08006b7d 	.word	0x08006b7d
 8006b34:	08006b7d 	.word	0x08006b7d
 8006b38:	08006b6d 	.word	0x08006b6d
 8006b3c:	08006b7d 	.word	0x08006b7d
 8006b40:	08006b7d 	.word	0x08006b7d
 8006b44:	08006b7d 	.word	0x08006b7d
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006b7d 	.word	0x08006b7d
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b75 	.word	0x08006b75
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e042      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006b64:	2302      	movs	r3, #2
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e03e      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e03a      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006b74:	2308      	movs	r3, #8
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e036      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e032      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a6a      	ldr	r2, [pc, #424]	; (8006d34 <UART_SetConfig+0x304>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d12a      	bne.n	8006be4 <UART_SetConfig+0x1b4>
 8006b8e:	4b6b      	ldr	r3, [pc, #428]	; (8006d3c <UART_SetConfig+0x30c>)
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b9c:	d01a      	beq.n	8006bd4 <UART_SetConfig+0x1a4>
 8006b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba2:	d81b      	bhi.n	8006bdc <UART_SetConfig+0x1ac>
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba8:	d00c      	beq.n	8006bc4 <UART_SetConfig+0x194>
 8006baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bae:	d815      	bhi.n	8006bdc <UART_SetConfig+0x1ac>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <UART_SetConfig+0x18c>
 8006bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb8:	d008      	beq.n	8006bcc <UART_SetConfig+0x19c>
 8006bba:	e00f      	b.n	8006bdc <UART_SetConfig+0x1ac>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e012      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e00e      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e00a      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e006      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e002      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a51      	ldr	r2, [pc, #324]	; (8006d34 <UART_SetConfig+0x304>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d17a      	bne.n	8006cea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d824      	bhi.n	8006c46 <UART_SetConfig+0x216>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0x1d4>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c47 	.word	0x08006c47
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c37 	.word	0x08006c37
 8006c18:	08006c47 	.word	0x08006c47
 8006c1c:	08006c47 	.word	0x08006c47
 8006c20:	08006c47 	.word	0x08006c47
 8006c24:	08006c3f 	.word	0x08006c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c28:	f7fe fa70 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006c2c:	61f8      	str	r0, [r7, #28]
        break;
 8006c2e:	e010      	b.n	8006c52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b44      	ldr	r3, [pc, #272]	; (8006d44 <UART_SetConfig+0x314>)
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e00d      	b.n	8006c52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fe f9d1 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006c3a:	61f8      	str	r0, [r7, #28]
        break;
 8006c3c:	e009      	b.n	8006c52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c42:	61fb      	str	r3, [r7, #28]
        break;
 8006c44:	e005      	b.n	8006c52 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8107 	beq.w	8006e68 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	4413      	add	r3, r2
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d305      	bcc.n	8006c76 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d903      	bls.n	8006c7e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c7c:	e0f4      	b.n	8006e68 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2200      	movs	r2, #0
 8006c82:	461c      	mov	r4, r3
 8006c84:	4615      	mov	r5, r2
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	f04f 0300 	mov.w	r3, #0
 8006c8e:	022b      	lsls	r3, r5, #8
 8006c90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c94:	0222      	lsls	r2, r4, #8
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	6849      	ldr	r1, [r1, #4]
 8006c9a:	0849      	lsrs	r1, r1, #1
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	4688      	mov	r8, r1
 8006ca0:	4681      	mov	r9, r0
 8006ca2:	eb12 0a08 	adds.w	sl, r2, r8
 8006ca6:	eb43 0b09 	adc.w	fp, r3, r9
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f7f9 ffe4 	bl	8000c88 <__aeabi_uldivmod>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cce:	d308      	bcc.n	8006ce2 <UART_SetConfig+0x2b2>
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd6:	d204      	bcs.n	8006ce2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	60da      	str	r2, [r3, #12]
 8006ce0:	e0c2      	b.n	8006e68 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ce8:	e0be      	b.n	8006e68 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf2:	d16a      	bne.n	8006dca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d834      	bhi.n	8006d66 <UART_SetConfig+0x336>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <UART_SetConfig+0x2d4>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d49 	.word	0x08006d49
 8006d0c:	08006d51 	.word	0x08006d51
 8006d10:	08006d67 	.word	0x08006d67
 8006d14:	08006d57 	.word	0x08006d57
 8006d18:	08006d67 	.word	0x08006d67
 8006d1c:	08006d67 	.word	0x08006d67
 8006d20:	08006d67 	.word	0x08006d67
 8006d24:	08006d5f 	.word	0x08006d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d28:	f7fe f9f0 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006d2c:	61f8      	str	r0, [r7, #28]
        break;
 8006d2e:	e020      	b.n	8006d72 <UART_SetConfig+0x342>
 8006d30:	efff69f3 	.word	0xefff69f3
 8006d34:	40008000 	.word	0x40008000
 8006d38:	40013800 	.word	0x40013800
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	40004400 	.word	0x40004400
 8006d44:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d48:	f7fe f9f6 	bl	8005138 <HAL_RCC_GetPCLK2Freq>
 8006d4c:	61f8      	str	r0, [r7, #28]
        break;
 8006d4e:	e010      	b.n	8006d72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d50:	4b4c      	ldr	r3, [pc, #304]	; (8006e84 <UART_SetConfig+0x454>)
 8006d52:	61fb      	str	r3, [r7, #28]
        break;
 8006d54:	e00d      	b.n	8006d72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fe f941 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006d5a:	61f8      	str	r0, [r7, #28]
        break;
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d62:	61fb      	str	r3, [r7, #28]
        break;
 8006d64:	e005      	b.n	8006d72 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d077      	beq.n	8006e68 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	005a      	lsls	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	441a      	add	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d916      	bls.n	8006dc2 <UART_SetConfig+0x392>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9a:	d212      	bcs.n	8006dc2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f023 030f 	bic.w	r3, r3, #15
 8006da4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	8afb      	ldrh	r3, [r7, #22]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	8afa      	ldrh	r2, [r7, #22]
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	e052      	b.n	8006e68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dc8:	e04e      	b.n	8006e68 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d827      	bhi.n	8006e22 <UART_SetConfig+0x3f2>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <UART_SetConfig+0x3a8>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006dfd 	.word	0x08006dfd
 8006ddc:	08006e05 	.word	0x08006e05
 8006de0:	08006e0d 	.word	0x08006e0d
 8006de4:	08006e23 	.word	0x08006e23
 8006de8:	08006e13 	.word	0x08006e13
 8006dec:	08006e23 	.word	0x08006e23
 8006df0:	08006e23 	.word	0x08006e23
 8006df4:	08006e23 	.word	0x08006e23
 8006df8:	08006e1b 	.word	0x08006e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dfc:	f7fe f986 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006e00:	61f8      	str	r0, [r7, #28]
        break;
 8006e02:	e014      	b.n	8006e2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7fe f998 	bl	8005138 <HAL_RCC_GetPCLK2Freq>
 8006e08:	61f8      	str	r0, [r7, #28]
        break;
 8006e0a:	e010      	b.n	8006e2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e0c:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <UART_SetConfig+0x454>)
 8006e0e:	61fb      	str	r3, [r7, #28]
        break;
 8006e10:	e00d      	b.n	8006e2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e12:	f7fe f8e3 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006e16:	61f8      	str	r0, [r7, #28]
        break;
 8006e18:	e009      	b.n	8006e2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e1e:	61fb      	str	r3, [r7, #28]
        break;
 8006e20:	e005      	b.n	8006e2e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d019      	beq.n	8006e68 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	085a      	lsrs	r2, r3, #1
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2b0f      	cmp	r3, #15
 8006e4c:	d909      	bls.n	8006e62 <UART_SetConfig+0x432>
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e54:	d205      	bcs.n	8006e62 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	e002      	b.n	8006e68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3728      	adds	r7, #40	; 0x28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e82:	bf00      	nop
 8006e84:	00f42400 	.word	0x00f42400

08006e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01a      	beq.n	8006f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f86:	d10a      	bne.n	8006f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fdc:	f7fc f8a0 	bl	8003120 <HAL_GetTick>
 8006fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d10e      	bne.n	800700e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f82d 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e023      	b.n	8007056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b04      	cmp	r3, #4
 800701a:	d10e      	bne.n	800703a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f817 	bl	800705e <UART_WaitOnFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e00d      	b.n	8007056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b09c      	sub	sp, #112	; 0x70
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	603b      	str	r3, [r7, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	e0a5      	b.n	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	f000 80a1 	beq.w	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707a:	f7fc f851 	bl	8003120 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007086:	429a      	cmp	r2, r3
 8007088:	d302      	bcc.n	8007090 <UART_WaitOnFlagUntilTimeout+0x32>
 800708a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708c:	2b00      	cmp	r3, #0
 800708e:	d13e      	bne.n	800710e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070a4:	667b      	str	r3, [r7, #100]	; 0x64
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e6      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	663b      	str	r3, [r7, #96]	; 0x60
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e5      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e067      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d04f      	beq.n	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712a:	d147      	bne.n	80071bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007134:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800714a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
 8007156:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800715a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e6      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	613b      	str	r3, [r7, #16]
   return(result);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007188:	623a      	str	r2, [r7, #32]
 800718a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	6a3a      	ldr	r2, [r7, #32]
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	61bb      	str	r3, [r7, #24]
   return(result);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e010      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	4013      	ands	r3, r2
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	bf0c      	ite	eq
 80071cc:	2301      	moveq	r3, #1
 80071ce:	2300      	movne	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	f43f af4a 	beq.w	8007070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3770      	adds	r7, #112	; 0x70
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80071ec:	4904      	ldr	r1, [pc, #16]	; (8007200 <MX_FATFS_Init+0x18>)
 80071ee:	4805      	ldr	r0, [pc, #20]	; (8007204 <MX_FATFS_Init+0x1c>)
 80071f0:	f003 fa58 	bl	800a6a4 <FATFS_LinkDriver>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	4b03      	ldr	r3, [pc, #12]	; (8007208 <MX_FATFS_Init+0x20>)
 80071fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071fc:	bf00      	nop
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20002880 	.word	0x20002880
 8007204:	20000010 	.word	0x20000010
 8007208:	2000287c 	.word	0x2000287c

0800720c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007210:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007212:	4618      	mov	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	4618      	mov	r0, r3
 800722a:	f7fa fc45 	bl	8001ab8 <SD_disk_initialize>
 800722e:	4603      	mov	r3, r0
 8007230:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	4603      	mov	r3, r0
 8007242:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	4618      	mov	r0, r3
 8007248:	f7fa fd1c 	bl	8001c84 <SD_disk_status>
 800724c:	4603      	mov	r3, r0
 800724e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007268:	7bf8      	ldrb	r0, [r7, #15]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	f7fa fd1e 	bl	8001cb0 <SD_disk_read>
 8007274:	4603      	mov	r3, r0
 8007276:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007290:	7bf8      	ldrb	r0, [r7, #15]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	f7fa fd74 	bl	8001d84 <SD_disk_write>
 800729c:	4603      	mov	r3, r0
 800729e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	603a      	str	r2, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
 80072b4:	460b      	mov	r3, r1
 80072b6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	79b9      	ldrb	r1, [r7, #6]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fa fde2 	bl	8001e8c <SD_disk_ioctl>
 80072c8:	4603      	mov	r3, r0
 80072ca:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	4a08      	ldr	r2, [pc, #32]	; (8007304 <disk_status+0x30>)
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	79fa      	ldrb	r2, [r7, #7]
 80072ec:	4905      	ldr	r1, [pc, #20]	; (8007304 <disk_status+0x30>)
 80072ee:	440a      	add	r2, r1
 80072f0:	7a12      	ldrb	r2, [r2, #8]
 80072f2:	4610      	mov	r0, r2
 80072f4:	4798      	blx	r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20002aac 	.word	0x20002aac

08007308 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	4a0d      	ldr	r2, [pc, #52]	; (8007350 <disk_initialize+0x48>)
 800731a:	5cd3      	ldrb	r3, [r2, r3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d111      	bne.n	8007344 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <disk_initialize+0x48>)
 8007324:	2101      	movs	r1, #1
 8007326:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	4a09      	ldr	r2, [pc, #36]	; (8007350 <disk_initialize+0x48>)
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	79fa      	ldrb	r2, [r7, #7]
 8007336:	4906      	ldr	r1, [pc, #24]	; (8007350 <disk_initialize+0x48>)
 8007338:	440a      	add	r2, r1
 800733a:	7a12      	ldrb	r2, [r2, #8]
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20002aac 	.word	0x20002aac

08007354 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	4a0a      	ldr	r2, [pc, #40]	; (8007390 <disk_read+0x3c>)
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	689c      	ldr	r4, [r3, #8]
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	4a07      	ldr	r2, [pc, #28]	; (8007390 <disk_read+0x3c>)
 8007374:	4413      	add	r3, r2
 8007376:	7a18      	ldrb	r0, [r3, #8]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	47a0      	blx	r4
 8007380:	4603      	mov	r3, r0
 8007382:	75fb      	strb	r3, [r7, #23]
  return res;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	bd90      	pop	{r4, r7, pc}
 800738e:	bf00      	nop
 8007390:	20002aac 	.word	0x20002aac

08007394 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	4a0a      	ldr	r2, [pc, #40]	; (80073d0 <disk_write+0x3c>)
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	68dc      	ldr	r4, [r3, #12]
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	4a07      	ldr	r2, [pc, #28]	; (80073d0 <disk_write+0x3c>)
 80073b4:	4413      	add	r3, r2
 80073b6:	7a18      	ldrb	r0, [r3, #8]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	47a0      	blx	r4
 80073c0:	4603      	mov	r3, r0
 80073c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd90      	pop	{r4, r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20002aac 	.word	0x20002aac

080073d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	603a      	str	r2, [r7, #0]
 80073de:	71fb      	strb	r3, [r7, #7]
 80073e0:	460b      	mov	r3, r1
 80073e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	4a09      	ldr	r2, [pc, #36]	; (800740c <disk_ioctl+0x38>)
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	79fa      	ldrb	r2, [r7, #7]
 80073f2:	4906      	ldr	r1, [pc, #24]	; (800740c <disk_ioctl+0x38>)
 80073f4:	440a      	add	r2, r1
 80073f6:	7a10      	ldrb	r0, [r2, #8]
 80073f8:	79b9      	ldrb	r1, [r7, #6]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
  return res;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20002aac 	.word	0x20002aac

08007410 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3301      	adds	r3, #1
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007420:	89fb      	ldrh	r3, [r7, #14]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	b21a      	sxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	b21b      	sxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b21b      	sxth	r3, r3
 8007430:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007432:	89fb      	ldrh	r3, [r7, #14]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3303      	adds	r3, #3
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	3202      	adds	r2, #2
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	3201      	adds	r2, #1
 8007466:	7812      	ldrb	r2, [r2, #0]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
	return rv;
 8007478:	68fb      	ldr	r3, [r7, #12]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	887a      	ldrh	r2, [r7, #2]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	887b      	ldrh	r3, [r7, #2]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	607a      	str	r2, [r7, #4]
 80074aa:	887a      	ldrh	r2, [r7, #2]
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	0a1b      	lsrs	r3, r3, #8
 80074d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	0a1b      	lsrs	r3, r3, #8
 80074e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00d      	beq.n	800754a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	1c53      	adds	r3, r2, #1
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1c59      	adds	r1, r3, #1
 8007538:	6179      	str	r1, [r7, #20]
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3b01      	subs	r3, #1
 8007542:	607b      	str	r3, [r7, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1f1      	bne.n	800752e <mem_cpy+0x1a>
	}
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007556:	b480      	push	{r7}
 8007558:	b087      	sub	sp, #28
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	617a      	str	r2, [r7, #20]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3b01      	subs	r3, #1
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f3      	bne.n	8007566 <mem_set+0x10>
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800758c:	b480      	push	{r7}
 800758e:	b089      	sub	sp, #36	; 0x24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	61fa      	str	r2, [r7, #28]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	4619      	mov	r1, r3
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	61ba      	str	r2, [r7, #24]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	1acb      	subs	r3, r1, r3
 80075b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3b01      	subs	r3, #1
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <mem_cmp+0x40>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0eb      	beq.n	80075a4 <mem_cmp+0x18>

	return r;
 80075cc:	697b      	ldr	r3, [r7, #20]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3724      	adds	r7, #36	; 0x24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80075e4:	e002      	b.n	80075ec <chk_chr+0x12>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3301      	adds	r3, #1
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <chk_chr+0x26>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d1f2      	bne.n	80075e6 <chk_chr+0xc>
	return *str;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	781b      	ldrb	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	e029      	b.n	8007678 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <chk_lock+0xb4>)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4413      	add	r3, r2
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01d      	beq.n	800766e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007632:	4a24      	ldr	r2, [pc, #144]	; (80076c4 <chk_lock+0xb4>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d116      	bne.n	8007672 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <chk_lock+0xb4>)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	4413      	add	r3, r2
 800764c:	3304      	adds	r3, #4
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007654:	429a      	cmp	r2, r3
 8007656:	d10c      	bne.n	8007672 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007658:	4a1a      	ldr	r2, [pc, #104]	; (80076c4 <chk_lock+0xb4>)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	4413      	add	r3, r2
 8007660:	3308      	adds	r3, #8
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007668:	429a      	cmp	r2, r3
 800766a:	d102      	bne.n	8007672 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800766c:	e007      	b.n	800767e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800766e:	2301      	movs	r3, #1
 8007670:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d9d2      	bls.n	8007624 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d109      	bne.n	8007698 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <chk_lock+0x80>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d101      	bne.n	8007694 <chk_lock+0x84>
 8007690:	2300      	movs	r3, #0
 8007692:	e010      	b.n	80076b6 <chk_lock+0xa6>
 8007694:	2312      	movs	r3, #18
 8007696:	e00e      	b.n	80076b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d108      	bne.n	80076b0 <chk_lock+0xa0>
 800769e:	4a09      	ldr	r2, [pc, #36]	; (80076c4 <chk_lock+0xb4>)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	4413      	add	r3, r2
 80076a6:	330c      	adds	r3, #12
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ae:	d101      	bne.n	80076b4 <chk_lock+0xa4>
 80076b0:	2310      	movs	r3, #16
 80076b2:	e000      	b.n	80076b6 <chk_lock+0xa6>
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000288c 	.word	0x2000288c

080076c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
 80076d2:	e002      	b.n	80076da <enq_lock+0x12>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3301      	adds	r3, #1
 80076d8:	607b      	str	r3, [r7, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d806      	bhi.n	80076ee <enq_lock+0x26>
 80076e0:	4a09      	ldr	r2, [pc, #36]	; (8007708 <enq_lock+0x40>)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	4413      	add	r3, r2
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1f2      	bne.n	80076d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	bf14      	ite	ne
 80076f4:	2301      	movne	r3, #1
 80076f6:	2300      	moveq	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	2000288c 	.word	0x2000288c

0800770c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	e01f      	b.n	800775c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800771c:	4a41      	ldr	r2, [pc, #260]	; (8007824 <inc_lock+0x118>)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	4413      	add	r3, r2
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d113      	bne.n	8007756 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800772e:	4a3d      	ldr	r2, [pc, #244]	; (8007824 <inc_lock+0x118>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	4413      	add	r3, r2
 8007736:	3304      	adds	r3, #4
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800773e:	429a      	cmp	r2, r3
 8007740:	d109      	bne.n	8007756 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007742:	4a38      	ldr	r2, [pc, #224]	; (8007824 <inc_lock+0x118>)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	4413      	add	r3, r2
 800774a:	3308      	adds	r3, #8
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007752:	429a      	cmp	r2, r3
 8007754:	d006      	beq.n	8007764 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d9dc      	bls.n	800771c <inc_lock+0x10>
 8007762:	e000      	b.n	8007766 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007764:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d132      	bne.n	80077d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	e002      	b.n	8007778 <inc_lock+0x6c>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d806      	bhi.n	800778c <inc_lock+0x80>
 800777e:	4a29      	ldr	r2, [pc, #164]	; (8007824 <inc_lock+0x118>)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4413      	add	r3, r2
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f2      	bne.n	8007772 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d101      	bne.n	8007796 <inc_lock+0x8a>
 8007792:	2300      	movs	r3, #0
 8007794:	e040      	b.n	8007818 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	4922      	ldr	r1, [pc, #136]	; (8007824 <inc_lock+0x118>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	440b      	add	r3, r1
 80077a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	491e      	ldr	r1, [pc, #120]	; (8007824 <inc_lock+0x118>)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	440b      	add	r3, r1
 80077b0:	3304      	adds	r3, #4
 80077b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	491a      	ldr	r1, [pc, #104]	; (8007824 <inc_lock+0x118>)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	440b      	add	r3, r1
 80077c0:	3308      	adds	r3, #8
 80077c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077c4:	4a17      	ldr	r2, [pc, #92]	; (8007824 <inc_lock+0x118>)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	4413      	add	r3, r2
 80077cc:	330c      	adds	r3, #12
 80077ce:	2200      	movs	r2, #0
 80077d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d009      	beq.n	80077ec <inc_lock+0xe0>
 80077d8:	4a12      	ldr	r2, [pc, #72]	; (8007824 <inc_lock+0x118>)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	4413      	add	r3, r2
 80077e0:	330c      	adds	r3, #12
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <inc_lock+0xe0>
 80077e8:	2300      	movs	r3, #0
 80077ea:	e015      	b.n	8007818 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d108      	bne.n	8007804 <inc_lock+0xf8>
 80077f2:	4a0c      	ldr	r2, [pc, #48]	; (8007824 <inc_lock+0x118>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	4413      	add	r3, r2
 80077fa:	330c      	adds	r3, #12
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	3301      	adds	r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	e001      	b.n	8007808 <inc_lock+0xfc>
 8007804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007808:	4906      	ldr	r1, [pc, #24]	; (8007824 <inc_lock+0x118>)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	440b      	add	r3, r1
 8007810:	330c      	adds	r3, #12
 8007812:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	2000288c 	.word	0x2000288c

08007828 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3b01      	subs	r3, #1
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d825      	bhi.n	8007888 <dec_lock+0x60>
		n = Files[i].ctr;
 800783c:	4a17      	ldr	r2, [pc, #92]	; (800789c <dec_lock+0x74>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	4413      	add	r3, r2
 8007844:	330c      	adds	r3, #12
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800784a:	89fb      	ldrh	r3, [r7, #14]
 800784c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007850:	d101      	bne.n	8007856 <dec_lock+0x2e>
 8007852:	2300      	movs	r3, #0
 8007854:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007856:	89fb      	ldrh	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <dec_lock+0x3a>
 800785c:	89fb      	ldrh	r3, [r7, #14]
 800785e:	3b01      	subs	r3, #1
 8007860:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007862:	4a0e      	ldr	r2, [pc, #56]	; (800789c <dec_lock+0x74>)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4413      	add	r3, r2
 800786a:	330c      	adds	r3, #12
 800786c:	89fa      	ldrh	r2, [r7, #14]
 800786e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007870:	89fb      	ldrh	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <dec_lock+0x5a>
 8007876:	4a09      	ldr	r2, [pc, #36]	; (800789c <dec_lock+0x74>)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	4413      	add	r3, r2
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	737b      	strb	r3, [r7, #13]
 8007886:	e001      	b.n	800788c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007888:	2302      	movs	r3, #2
 800788a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800788c:	7b7b      	ldrb	r3, [r7, #13]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	2000288c 	.word	0x2000288c

080078a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e010      	b.n	80078d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078ae:	4a0d      	ldr	r2, [pc, #52]	; (80078e4 <clear_lock+0x44>)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	4413      	add	r3, r2
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d105      	bne.n	80078ca <clear_lock+0x2a>
 80078be:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <clear_lock+0x44>)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	4413      	add	r3, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3301      	adds	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d9eb      	bls.n	80078ae <clear_lock+0xe>
	}
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	2000288c 	.word	0x2000288c

080078e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	78db      	ldrb	r3, [r3, #3]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d034      	beq.n	8007966 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007900:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7858      	ldrb	r0, [r3, #1]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800790c:	2301      	movs	r3, #1
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	f7ff fd40 	bl	8007394 <disk_write>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <sync_window+0x38>
			res = FR_DISK_ERR;
 800791a:	2301      	movs	r3, #1
 800791c:	73fb      	strb	r3, [r7, #15]
 800791e:	e022      	b.n	8007966 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	1ad2      	subs	r2, r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	429a      	cmp	r2, r3
 8007934:	d217      	bcs.n	8007966 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	789b      	ldrb	r3, [r3, #2]
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	e010      	b.n	8007960 <sync_window+0x78>
					wsect += fs->fsize;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4413      	add	r3, r2
 8007946:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7858      	ldrb	r0, [r3, #1]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007952:	2301      	movs	r3, #1
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	f7ff fd1d 	bl	8007394 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3b01      	subs	r3, #1
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d8eb      	bhi.n	800793e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007966:	7bfb      	ldrb	r3, [r7, #15]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d01b      	beq.n	80079c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff ffad 	bl	80078e8 <sync_window>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d113      	bne.n	80079c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7858      	ldrb	r0, [r3, #1]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079a2:	2301      	movs	r3, #1
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	f7ff fcd5 	bl	8007354 <disk_read>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079b0:	f04f 33ff 	mov.w	r3, #4294967295
 80079b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff87 	bl	80078e8 <sync_window>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d159      	bne.n	8007a98 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d149      	bne.n	8007a80 <sync_fs+0xb4>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	791b      	ldrb	r3, [r3, #4]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d145      	bne.n	8007a80 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	899b      	ldrh	r3, [r3, #12]
 80079fe:	461a      	mov	r2, r3
 8007a00:	2100      	movs	r1, #0
 8007a02:	f7ff fda8 	bl	8007556 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3338      	adds	r3, #56	; 0x38
 8007a0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a0e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fd37 	bl	8007486 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3338      	adds	r3, #56	; 0x38
 8007a1c:	4921      	ldr	r1, [pc, #132]	; (8007aa4 <sync_fs+0xd8>)
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fd4c 	bl	80074bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3338      	adds	r3, #56	; 0x38
 8007a28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a2c:	491e      	ldr	r1, [pc, #120]	; (8007aa8 <sync_fs+0xdc>)
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff fd44 	bl	80074bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3338      	adds	r3, #56	; 0x38
 8007a38:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	4619      	mov	r1, r3
 8007a42:	4610      	mov	r0, r2
 8007a44:	f7ff fd3a 	bl	80074bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3338      	adds	r3, #56	; 0x38
 8007a4c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f7ff fd30 	bl	80074bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	7858      	ldrb	r0, [r3, #1]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a74:	2301      	movs	r3, #1
 8007a76:	f7ff fc8d 	bl	8007394 <disk_write>
			fs->fsi_flag = 0;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	2200      	movs	r2, #0
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fca3 	bl	80073d4 <disk_ioctl>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <sync_fs+0xcc>
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	41615252 	.word	0x41615252
 8007aa8:	61417272 	.word	0x61417272

08007aac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	3b02      	subs	r3, #2
 8007aba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	3b02      	subs	r3, #2
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d301      	bcc.n	8007acc <clust2sect+0x20>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e008      	b.n	8007ade <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	895b      	ldrh	r3, [r3, #10]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	fb03 f202 	mul.w	r2, r3, r2
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	4413      	add	r3, r2
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d904      	bls.n	8007b0a <get_fat+0x20>
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	e0bb      	b.n	8007c88 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295
 8007b14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	f000 8083 	beq.w	8007c26 <get_fat+0x13c>
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	f300 80a7 	bgt.w	8007c74 <get_fat+0x18a>
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d002      	beq.n	8007b30 <get_fat+0x46>
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d056      	beq.n	8007bdc <get_fat+0xf2>
 8007b2e:	e0a1      	b.n	8007c74 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	899b      	ldrh	r3, [r3, #12]
 8007b46:	4619      	mov	r1, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b4e:	4413      	add	r3, r2
 8007b50:	4619      	mov	r1, r3
 8007b52:	6938      	ldr	r0, [r7, #16]
 8007b54:	f7ff ff0c 	bl	8007970 <move_window>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 808d 	bne.w	8007c7a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	60fa      	str	r2, [r7, #12]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	8992      	ldrh	r2, [r2, #12]
 8007b6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b6e:	fb01 f202 	mul.w	r2, r1, r2
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4413      	add	r3, r2
 8007b78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	899b      	ldrh	r3, [r3, #12]
 8007b86:	4619      	mov	r1, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b8e:	4413      	add	r3, r2
 8007b90:	4619      	mov	r1, r3
 8007b92:	6938      	ldr	r0, [r7, #16]
 8007b94:	f7ff feec 	bl	8007970 <move_window>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d16f      	bne.n	8007c7e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	899b      	ldrh	r3, [r3, #12]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007baa:	fb01 f202 	mul.w	r2, r1, r2
 8007bae:	1a9b      	subs	r3, r3, r2
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <get_fat+0xe8>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	091b      	lsrs	r3, r3, #4
 8007bd0:	e002      	b.n	8007bd8 <get_fat+0xee>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bd8:	617b      	str	r3, [r7, #20]
			break;
 8007bda:	e055      	b.n	8007c88 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	899b      	ldrh	r3, [r3, #12]
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4619      	mov	r1, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6938      	ldr	r0, [r7, #16]
 8007bf6:	f7ff febb 	bl	8007970 <move_window>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d140      	bne.n	8007c82 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	8992      	ldrh	r2, [r2, #12]
 8007c0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c12:	fb00 f202 	mul.w	r2, r0, r2
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	440b      	add	r3, r1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff fbf8 	bl	8007410 <ld_word>
 8007c20:	4603      	mov	r3, r0
 8007c22:	617b      	str	r3, [r7, #20]
			break;
 8007c24:	e030      	b.n	8007c88 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	899b      	ldrh	r3, [r3, #12]
 8007c2e:	089b      	lsrs	r3, r3, #2
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	4619      	mov	r1, r3
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c3a:	4413      	add	r3, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6938      	ldr	r0, [r7, #16]
 8007c40:	f7ff fe96 	bl	8007970 <move_window>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d11d      	bne.n	8007c86 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	8992      	ldrh	r2, [r2, #12]
 8007c58:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c5c:	fb00 f202 	mul.w	r2, r0, r2
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	440b      	add	r3, r1
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fbeb 	bl	8007440 <ld_dword>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c70:	617b      	str	r3, [r7, #20]
			break;
 8007c72:	e009      	b.n	8007c88 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c74:	2301      	movs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e006      	b.n	8007c88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c7a:	bf00      	nop
 8007c7c:	e004      	b.n	8007c88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c7e:	bf00      	nop
 8007c80:	e002      	b.n	8007c88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c82:	bf00      	nop
 8007c84:	e000      	b.n	8007c88 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c86:	bf00      	nop
		}
	}

	return val;
 8007c88:	697b      	ldr	r3, [r7, #20]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007c92:	b590      	push	{r4, r7, lr}
 8007c94:	b089      	sub	sp, #36	; 0x24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	f240 8102 	bls.w	8007eae <put_fat+0x21c>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	f080 80fc 	bcs.w	8007eae <put_fat+0x21c>
		switch (fs->fs_type) {
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	f000 80b6 	beq.w	8007e2c <put_fat+0x19a>
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	f300 80fd 	bgt.w	8007ec0 <put_fat+0x22e>
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d003      	beq.n	8007cd2 <put_fat+0x40>
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	f000 8083 	beq.w	8007dd6 <put_fat+0x144>
 8007cd0:	e0f6      	b.n	8007ec0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4413      	add	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	899b      	ldrh	r3, [r3, #12]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cf0:	4413      	add	r3, r2
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fe3b 	bl	8007970 <move_window>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cfe:	7ffb      	ldrb	r3, [r7, #31]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 80d6 	bne.w	8007eb2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	61ba      	str	r2, [r7, #24]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	8992      	ldrh	r2, [r2, #12]
 8007d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d1a:	fb00 f202 	mul.w	r2, r0, r2
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	440b      	add	r3, r1
 8007d22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00d      	beq.n	8007d4a <put_fat+0xb8>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b25b      	sxtb	r3, r3
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	b25a      	sxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b25b      	sxtb	r3, r3
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	e001      	b.n	8007d4e <put_fat+0xbc>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	899b      	ldrh	r3, [r3, #12]
 8007d60:	4619      	mov	r1, r3
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d68:	4413      	add	r3, r2
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff fdff 	bl	8007970 <move_window>
 8007d72:	4603      	mov	r3, r0
 8007d74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d76:	7ffb      	ldrb	r3, [r7, #31]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 809c 	bne.w	8007eb6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	899b      	ldrh	r3, [r3, #12]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d90:	fb00 f202 	mul.w	r2, r0, r2
 8007d94:	1a9b      	subs	r3, r3, r2
 8007d96:	440b      	add	r3, r1
 8007d98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <put_fat+0x11a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e00e      	b.n	8007dca <put_fat+0x138>
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	f023 030f 	bic.w	r3, r3, #15
 8007db6:	b25a      	sxtb	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	b25b      	sxtb	r3, r3
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	b25b      	sxtb	r3, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	b25b      	sxtb	r3, r3
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	70da      	strb	r2, [r3, #3]
			break;
 8007dd4:	e074      	b.n	8007ec0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	899b      	ldrh	r3, [r3, #12]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	4619      	mov	r1, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dea:	4413      	add	r3, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff fdbe 	bl	8007970 <move_window>
 8007df4:	4603      	mov	r3, r0
 8007df6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007df8:	7ffb      	ldrb	r3, [r7, #31]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d15d      	bne.n	8007eba <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	8992      	ldrh	r2, [r2, #12]
 8007e0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e10:	fb00 f202 	mul.w	r2, r0, r2
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	440b      	add	r3, r1
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	b292      	uxth	r2, r2
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fb31 	bl	8007486 <st_word>
			fs->wflag = 1;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	70da      	strb	r2, [r3, #3]
			break;
 8007e2a:	e049      	b.n	8007ec0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	899b      	ldrh	r3, [r3, #12]
 8007e34:	089b      	lsrs	r3, r3, #2
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e40:	4413      	add	r3, r2
 8007e42:	4619      	mov	r1, r3
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7ff fd93 	bl	8007970 <move_window>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e4e:	7ffb      	ldrb	r3, [r7, #31]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d134      	bne.n	8007ebe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	8992      	ldrh	r2, [r2, #12]
 8007e68:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e6c:	fb00 f202 	mul.w	r2, r0, r2
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	440b      	add	r3, r1
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fae3 	bl	8007440 <ld_dword>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e80:	4323      	orrs	r3, r4
 8007e82:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	8992      	ldrh	r2, [r2, #12]
 8007e92:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e96:	fb00 f202 	mul.w	r2, r0, r2
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fb0b 	bl	80074bc <st_dword>
			fs->wflag = 1;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	70da      	strb	r2, [r3, #3]
			break;
 8007eac:	e008      	b.n	8007ec0 <put_fat+0x22e>
		}
	}
 8007eae:	bf00      	nop
 8007eb0:	e006      	b.n	8007ec0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007eb2:	bf00      	nop
 8007eb4:	e004      	b.n	8007ec0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007eb6:	bf00      	nop
 8007eb8:	e002      	b.n	8007ec0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007eba:	bf00      	nop
 8007ebc:	e000      	b.n	8007ec0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ebe:	bf00      	nop
	return res;
 8007ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3724      	adds	r7, #36	; 0x24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd90      	pop	{r4, r7, pc}

08007eca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b088      	sub	sp, #32
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d904      	bls.n	8007ef0 <remove_chain+0x26>
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d301      	bcc.n	8007ef4 <remove_chain+0x2a>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e04b      	b.n	8007f8c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00c      	beq.n	8007f14 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007efa:	f04f 32ff 	mov.w	r2, #4294967295
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	69b8      	ldr	r0, [r7, #24]
 8007f02:	f7ff fec6 	bl	8007c92 <put_fat>
 8007f06:	4603      	mov	r3, r0
 8007f08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <remove_chain+0x4a>
 8007f10:	7ffb      	ldrb	r3, [r7, #31]
 8007f12:	e03b      	b.n	8007f8c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff fde7 	bl	8007aea <get_fat>
 8007f1c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d031      	beq.n	8007f88 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <remove_chain+0x64>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e02e      	b.n	8007f8c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d101      	bne.n	8007f3a <remove_chain+0x70>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e028      	b.n	8007f8c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	69b8      	ldr	r0, [r7, #24]
 8007f40:	f7ff fea7 	bl	8007c92 <put_fat>
 8007f44:	4603      	mov	r3, r0
 8007f46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f48:	7ffb      	ldrb	r3, [r7, #31]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <remove_chain+0x88>
 8007f4e:	7ffb      	ldrb	r3, [r7, #31]
 8007f50:	e01c      	b.n	8007f8c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	3b02      	subs	r3, #2
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d20b      	bcs.n	8007f78 <remove_chain+0xae>
			fs->free_clst++;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	791b      	ldrb	r3, [r3, #4]
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d3c6      	bcc.n	8007f14 <remove_chain+0x4a>
 8007f86:	e000      	b.n	8007f8a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f88:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10d      	bne.n	8007fc6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d004      	beq.n	8007fc0 <create_chain+0x2c>
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d31b      	bcc.n	8007ff8 <create_chain+0x64>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	61bb      	str	r3, [r7, #24]
 8007fc4:	e018      	b.n	8007ff8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff fd8e 	bl	8007aea <get_fat>
 8007fce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d801      	bhi.n	8007fda <create_chain+0x46>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e070      	b.n	80080bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d101      	bne.n	8007fe6 <create_chain+0x52>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	e06a      	b.n	80080bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d201      	bcs.n	8007ff4 <create_chain+0x60>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	e063      	b.n	80080bc <create_chain+0x128>
		scl = clst;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	3301      	adds	r3, #1
 8008000:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	429a      	cmp	r2, r3
 800800a:	d307      	bcc.n	800801c <create_chain+0x88>
				ncl = 2;
 800800c:	2302      	movs	r3, #2
 800800e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	429a      	cmp	r2, r3
 8008016:	d901      	bls.n	800801c <create_chain+0x88>
 8008018:	2300      	movs	r3, #0
 800801a:	e04f      	b.n	80080bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800801c:	69f9      	ldr	r1, [r7, #28]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fd63 	bl	8007aea <get_fat>
 8008024:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d003      	beq.n	800803a <create_chain+0xa6>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d101      	bne.n	800803e <create_chain+0xaa>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	e03e      	b.n	80080bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	429a      	cmp	r2, r3
 8008044:	d1da      	bne.n	8007ffc <create_chain+0x68>
 8008046:	2300      	movs	r3, #0
 8008048:	e038      	b.n	80080bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800804a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800804c:	f04f 32ff 	mov.w	r2, #4294967295
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	6938      	ldr	r0, [r7, #16]
 8008054:	f7ff fe1d 	bl	8007c92 <put_fat>
 8008058:	4603      	mov	r3, r0
 800805a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <create_chain+0xe2>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6938      	ldr	r0, [r7, #16]
 800806e:	f7ff fe10 	bl	8007c92 <put_fat>
 8008072:	4603      	mov	r3, r0
 8008074:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d116      	bne.n	80080aa <create_chain+0x116>
		fs->last_clst = ncl;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	3b02      	subs	r3, #2
 800808c:	429a      	cmp	r2, r3
 800808e:	d804      	bhi.n	800809a <create_chain+0x106>
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	1e5a      	subs	r2, r3, #1
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	791b      	ldrb	r3, [r3, #4]
 800809e:	f043 0301 	orr.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	711a      	strb	r2, [r3, #4]
 80080a8:	e007      	b.n	80080ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d102      	bne.n	80080b6 <create_chain+0x122>
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295
 80080b4:	e000      	b.n	80080b8 <create_chain+0x124>
 80080b6:	2301      	movs	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80080ba:	69fb      	ldr	r3, [r7, #28]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3720      	adds	r7, #32
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	3304      	adds	r3, #4
 80080da:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	899b      	ldrh	r3, [r3, #12]
 80080e0:	461a      	mov	r2, r3
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	8952      	ldrh	r2, [r2, #10]
 80080ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80080f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	1d1a      	adds	r2, r3, #4
 80080f6:	613a      	str	r2, [r7, #16]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <clmt_clust+0x42>
 8008102:	2300      	movs	r3, #0
 8008104:	e010      	b.n	8008128 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	d307      	bcc.n	800811e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	3304      	adds	r3, #4
 800811a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800811c:	e7e9      	b.n	80080f2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800811e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	4413      	add	r3, r2
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800814a:	d204      	bcs.n	8008156 <dir_sdi+0x22>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f003 031f 	and.w	r3, r3, #31
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008156:	2302      	movs	r3, #2
 8008158:	e071      	b.n	800823e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d106      	bne.n	800817a <dir_sdi+0x46>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d902      	bls.n	800817a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10c      	bne.n	800819a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	8912      	ldrh	r2, [r2, #8]
 8008188:	4293      	cmp	r3, r2
 800818a:	d301      	bcc.n	8008190 <dir_sdi+0x5c>
 800818c:	2302      	movs	r3, #2
 800818e:	e056      	b.n	800823e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	61da      	str	r2, [r3, #28]
 8008198:	e02d      	b.n	80081f6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	895b      	ldrh	r3, [r3, #10]
 800819e:	461a      	mov	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	899b      	ldrh	r3, [r3, #12]
 80081a4:	fb02 f303 	mul.w	r3, r2, r3
 80081a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081aa:	e019      	b.n	80081e0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6979      	ldr	r1, [r7, #20]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fc9a 	bl	8007aea <get_fat>
 80081b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d101      	bne.n	80081c4 <dir_sdi+0x90>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e03c      	b.n	800823e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d904      	bls.n	80081d4 <dir_sdi+0xa0>
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d301      	bcc.n	80081d8 <dir_sdi+0xa4>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e032      	b.n	800823e <dir_sdi+0x10a>
			ofs -= csz;
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d2e1      	bcs.n	80081ac <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80081e8:	6979      	ldr	r1, [r7, #20]
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f7ff fc5e 	bl	8007aac <clust2sect>
 80081f0:	4602      	mov	r2, r0
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <dir_sdi+0xd4>
 8008204:	2302      	movs	r3, #2
 8008206:	e01a      	b.n	800823e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	899b      	ldrh	r3, [r3, #12]
 8008210:	4619      	mov	r1, r3
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	fbb3 f3f1 	udiv	r3, r3, r1
 8008218:	441a      	add	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	899b      	ldrh	r3, [r3, #12]
 8008228:	461a      	mov	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008230:	fb00 f202 	mul.w	r2, r0, r2
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	18ca      	adds	r2, r1, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b086      	sub	sp, #24
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	3320      	adds	r3, #32
 800825c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <dir_next+0x28>
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800826c:	d301      	bcc.n	8008272 <dir_next+0x2c>
 800826e:	2304      	movs	r3, #4
 8008270:	e0bb      	b.n	80083ea <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	899b      	ldrh	r3, [r3, #12]
 8008276:	461a      	mov	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	fbb3 f1f2 	udiv	r1, r3, r2
 800827e:	fb01 f202 	mul.w	r2, r1, r2
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	2b00      	cmp	r3, #0
 8008286:	f040 809d 	bne.w	80083c4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10b      	bne.n	80082b4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	8912      	ldrh	r2, [r2, #8]
 80082a4:	4293      	cmp	r3, r2
 80082a6:	f0c0 808d 	bcc.w	80083c4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	61da      	str	r2, [r3, #28]
 80082b0:	2304      	movs	r3, #4
 80082b2:	e09a      	b.n	80083ea <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	899b      	ldrh	r3, [r3, #12]
 80082b8:	461a      	mov	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	8952      	ldrh	r2, [r2, #10]
 80082c4:	3a01      	subs	r2, #1
 80082c6:	4013      	ands	r3, r2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d17b      	bne.n	80083c4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7ff fc08 	bl	8007aea <get_fat>
 80082da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d801      	bhi.n	80082e6 <dir_next+0xa0>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e081      	b.n	80083ea <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d101      	bne.n	80082f2 <dir_next+0xac>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e07b      	b.n	80083ea <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d359      	bcc.n	80083b0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	61da      	str	r2, [r3, #28]
 8008308:	2304      	movs	r3, #4
 800830a:	e06e      	b.n	80083ea <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	4619      	mov	r1, r3
 8008314:	4610      	mov	r0, r2
 8008316:	f7ff fe3d 	bl	8007f94 <create_chain>
 800831a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <dir_next+0xe0>
 8008322:	2307      	movs	r3, #7
 8008324:	e061      	b.n	80083ea <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <dir_next+0xea>
 800832c:	2302      	movs	r3, #2
 800832e:	e05c      	b.n	80083ea <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008336:	d101      	bne.n	800833c <dir_next+0xf6>
 8008338:	2301      	movs	r3, #1
 800833a:	e056      	b.n	80083ea <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7ff fad3 	bl	80078e8 <sync_window>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <dir_next+0x106>
 8008348:	2301      	movs	r3, #1
 800834a:	e04e      	b.n	80083ea <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	899b      	ldrh	r3, [r3, #12]
 8008356:	461a      	mov	r2, r3
 8008358:	2100      	movs	r1, #0
 800835a:	f7ff f8fc 	bl	8007556 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7ff fba1 	bl	8007aac <clust2sect>
 800836a:	4602      	mov	r2, r0
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	635a      	str	r2, [r3, #52]	; 0x34
 8008370:	e012      	b.n	8008398 <dir_next+0x152>
						fs->wflag = 1;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff fab5 	bl	80078e8 <sync_window>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <dir_next+0x142>
 8008384:	2301      	movs	r3, #1
 8008386:	e030      	b.n	80083ea <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	3301      	adds	r3, #1
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	635a      	str	r2, [r3, #52]	; 0x34
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	895b      	ldrh	r3, [r3, #10]
 800839c:	461a      	mov	r2, r3
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d3e6      	bcc.n	8008372 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80083b6:	6979      	ldr	r1, [r7, #20]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f7ff fb77 	bl	8007aac <clust2sect>
 80083be:	4602      	mov	r2, r0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	899b      	ldrh	r3, [r3, #12]
 80083d4:	461a      	mov	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80083dc:	fb00 f202 	mul.w	r2, r0, r2
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	18ca      	adds	r2, r1, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b086      	sub	sp, #24
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff fe95 	bl	8008134 <dir_sdi>
 800840a:	4603      	mov	r3, r0
 800840c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d12b      	bne.n	800846c <dir_alloc+0x7a>
		n = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	4619      	mov	r1, r3
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff faa6 	bl	8007970 <move_window>
 8008424:	4603      	mov	r3, r0
 8008426:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d11d      	bne.n	800846a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2be5      	cmp	r3, #229	; 0xe5
 8008436:	d004      	beq.n	8008442 <dir_alloc+0x50>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d107      	bne.n	8008452 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3301      	adds	r3, #1
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d102      	bne.n	8008456 <dir_alloc+0x64>
 8008450:	e00c      	b.n	800846c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008452:	2300      	movs	r3, #0
 8008454:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008456:	2101      	movs	r1, #1
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff fef4 	bl	8008246 <dir_next>
 800845e:	4603      	mov	r3, r0
 8008460:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0d7      	beq.n	8008418 <dir_alloc+0x26>
 8008468:	e000      	b.n	800846c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800846a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	2b04      	cmp	r3, #4
 8008470:	d101      	bne.n	8008476 <dir_alloc+0x84>
 8008472:	2307      	movs	r3, #7
 8008474:	75fb      	strb	r3, [r7, #23]
	return res;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	331a      	adds	r3, #26
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe ffbe 	bl	8007410 <ld_word>
 8008494:	4603      	mov	r3, r0
 8008496:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d109      	bne.n	80084b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	3314      	adds	r3, #20
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe ffb3 	bl	8007410 <ld_word>
 80084aa:	4603      	mov	r3, r0
 80084ac:	041b      	lsls	r3, r3, #16
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80084b4:	68fb      	ldr	r3, [r7, #12]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	331a      	adds	r3, #26
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	b292      	uxth	r2, r2
 80084d2:	4611      	mov	r1, r2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe ffd6 	bl	8007486 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d109      	bne.n	80084f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f103 0214 	add.w	r2, r3, #20
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4619      	mov	r1, r3
 80084f0:	4610      	mov	r0, r2
 80084f2:	f7fe ffc8 	bl	8007486 <st_word>
	}
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008500:	b590      	push	{r4, r7, lr}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	331a      	adds	r3, #26
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe ff7e 	bl	8007410 <ld_word>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <cmp_lfn+0x1e>
 800851a:	2300      	movs	r3, #0
 800851c:	e059      	b.n	80085d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008526:	1e5a      	subs	r2, r3, #1
 8008528:	4613      	mov	r3, r2
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008534:	2301      	movs	r3, #1
 8008536:	81fb      	strh	r3, [r7, #14]
 8008538:	2300      	movs	r3, #0
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	e033      	b.n	80085a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800853e:	4a27      	ldr	r2, [pc, #156]	; (80085dc <cmp_lfn+0xdc>)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	4413      	add	r3, r2
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	4413      	add	r3, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe ff5f 	bl	8007410 <ld_word>
 8008552:	4603      	mov	r3, r0
 8008554:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008556:	89fb      	ldrh	r3, [r7, #14]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01a      	beq.n	8008592 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2bfe      	cmp	r3, #254	; 0xfe
 8008560:	d812      	bhi.n	8008588 <cmp_lfn+0x88>
 8008562:	89bb      	ldrh	r3, [r7, #12]
 8008564:	4618      	mov	r0, r3
 8008566:	f002 f8e9 	bl	800a73c <ff_wtoupper>
 800856a:	4603      	mov	r3, r0
 800856c:	461c      	mov	r4, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	617a      	str	r2, [r7, #20]
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	4413      	add	r3, r2
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f002 f8dd 	bl	800a73c <ff_wtoupper>
 8008582:	4603      	mov	r3, r0
 8008584:	429c      	cmp	r4, r3
 8008586:	d001      	beq.n	800858c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008588:	2300      	movs	r3, #0
 800858a:	e022      	b.n	80085d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800858c:	89bb      	ldrh	r3, [r7, #12]
 800858e:	81fb      	strh	r3, [r7, #14]
 8008590:	e006      	b.n	80085a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008592:	89bb      	ldrh	r3, [r7, #12]
 8008594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008598:	4293      	cmp	r3, r2
 800859a:	d001      	beq.n	80085a0 <cmp_lfn+0xa0>
 800859c:	2300      	movs	r3, #0
 800859e:	e018      	b.n	80085d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	3301      	adds	r3, #1
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b0c      	cmp	r3, #12
 80085aa:	d9c8      	bls.n	800853e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <cmp_lfn+0xd0>
 80085b8:	89fb      	ldrh	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <cmp_lfn+0xd0>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <cmp_lfn+0xd0>
 80085cc:	2300      	movs	r3, #0
 80085ce:	e000      	b.n	80085d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80085d0:	2301      	movs	r3, #1
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}
 80085da:	bf00      	nop
 80085dc:	0800d8b0 	.word	0x0800d8b0

080085e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4611      	mov	r1, r2
 80085ec:	461a      	mov	r2, r3
 80085ee:	460b      	mov	r3, r1
 80085f0:	71fb      	strb	r3, [r7, #7]
 80085f2:	4613      	mov	r3, r2
 80085f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	330d      	adds	r3, #13
 80085fa:	79ba      	ldrb	r2, [r7, #6]
 80085fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	330b      	adds	r3, #11
 8008602:	220f      	movs	r2, #15
 8008604:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	330c      	adds	r3, #12
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	331a      	adds	r3, #26
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe ff36 	bl	8007486 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	1e5a      	subs	r2, r3, #1
 800861e:	4613      	mov	r3, r2
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	82fb      	strh	r3, [r7, #22]
 800862e:	2300      	movs	r3, #0
 8008630:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008632:	8afb      	ldrh	r3, [r7, #22]
 8008634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008638:	4293      	cmp	r3, r2
 800863a:	d007      	beq.n	800864c <put_lfn+0x6c>
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	61fa      	str	r2, [r7, #28]
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4413      	add	r3, r2
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800864c:	4a17      	ldr	r2, [pc, #92]	; (80086ac <put_lfn+0xcc>)
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	4413      	add	r3, r2
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4413      	add	r3, r2
 800865a:	8afa      	ldrh	r2, [r7, #22]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe ff11 	bl	8007486 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008664:	8afb      	ldrh	r3, [r7, #22]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <put_lfn+0x90>
 800866a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800866e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	3301      	adds	r3, #1
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b0c      	cmp	r3, #12
 800867a:	d9da      	bls.n	8008632 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800867c:	8afb      	ldrh	r3, [r7, #22]
 800867e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008682:	4293      	cmp	r3, r2
 8008684:	d006      	beq.n	8008694 <put_lfn+0xb4>
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <put_lfn+0xbc>
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	79fa      	ldrb	r2, [r7, #7]
 80086a0:	701a      	strb	r2, [r3, #0]
}
 80086a2:	bf00      	nop
 80086a4:	3720      	adds	r7, #32
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	0800d8b0 	.word	0x0800d8b0

080086b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08c      	sub	sp, #48	; 0x30
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80086be:	220b      	movs	r2, #11
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f7fe ff26 	bl	8007514 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b05      	cmp	r3, #5
 80086cc:	d92b      	bls.n	8008726 <gen_numname+0x76>
		sr = seq;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80086d2:	e022      	b.n	800871a <gen_numname+0x6a>
			wc = *lfn++;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	1c9a      	adds	r2, r3, #2
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80086de:	2300      	movs	r3, #0
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e2:	e017      	b.n	8008714 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	005a      	lsls	r2, r3, #1
 80086e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	4413      	add	r3, r2
 80086f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80086f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <gen_numname+0x5e>
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008708:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800870c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	3301      	adds	r3, #1
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	2b0f      	cmp	r3, #15
 8008718:	d9e4      	bls.n	80086e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1d8      	bne.n	80086d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008726:	2307      	movs	r3, #7
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	b2db      	uxtb	r3, r3
 8008734:	3330      	adds	r3, #48	; 0x30
 8008736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800873a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800873e:	2b39      	cmp	r3, #57	; 0x39
 8008740:	d904      	bls.n	800874c <gen_numname+0x9c>
 8008742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008746:	3307      	adds	r3, #7
 8008748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	1e5a      	subs	r2, r3, #1
 8008750:	62ba      	str	r2, [r7, #40]	; 0x28
 8008752:	3330      	adds	r3, #48	; 0x30
 8008754:	443b      	add	r3, r7
 8008756:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800875a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	091b      	lsrs	r3, r3, #4
 8008762:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1df      	bne.n	800872a <gen_numname+0x7a>
	ns[i] = '~';
 800876a:	f107 0214 	add.w	r2, r7, #20
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	4413      	add	r3, r2
 8008772:	227e      	movs	r2, #126	; 0x7e
 8008774:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
 800877a:	e002      	b.n	8008782 <gen_numname+0xd2>
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	3301      	adds	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	429a      	cmp	r2, r3
 8008788:	d205      	bcs.n	8008796 <gen_numname+0xe6>
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	4413      	add	r3, r2
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b20      	cmp	r3, #32
 8008794:	d1f2      	bne.n	800877c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	2b07      	cmp	r3, #7
 800879a:	d807      	bhi.n	80087ac <gen_numname+0xfc>
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80087a2:	3330      	adds	r3, #48	; 0x30
 80087a4:	443b      	add	r3, r7
 80087a6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80087aa:	e000      	b.n	80087ae <gen_numname+0xfe>
 80087ac:	2120      	movs	r1, #32
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	627a      	str	r2, [r7, #36]	; 0x24
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	460a      	mov	r2, r1
 80087ba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	2b07      	cmp	r3, #7
 80087c0:	d9e9      	bls.n	8008796 <gen_numname+0xe6>
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	3730      	adds	r7, #48	; 0x30
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80087d8:	230b      	movs	r3, #11
 80087da:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	0852      	lsrs	r2, r2, #1
 80087e2:	01db      	lsls	r3, r3, #7
 80087e4:	4313      	orrs	r3, r2
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	1c59      	adds	r1, r3, #1
 80087ec:	6079      	str	r1, [r7, #4]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4413      	add	r3, r2
 80087f2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1ed      	bne.n	80087dc <sum_sfn+0x10>
	return sum;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800881c:	2100      	movs	r1, #0
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fc88 	bl	8008134 <dir_sdi>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <dir_find+0x24>
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	e0a9      	b.n	8008986 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008832:	23ff      	movs	r3, #255	; 0xff
 8008834:	753b      	strb	r3, [r7, #20]
 8008836:	7d3b      	ldrb	r3, [r7, #20]
 8008838:	757b      	strb	r3, [r7, #21]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f04f 32ff 	mov.w	r2, #4294967295
 8008840:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	4619      	mov	r1, r3
 8008848:	6938      	ldr	r0, [r7, #16]
 800884a:	f7ff f891 	bl	8007970 <move_window>
 800884e:	4603      	mov	r3, r0
 8008850:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 8090 	bne.w	800897a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008862:	7dbb      	ldrb	r3, [r7, #22]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <dir_find+0x60>
 8008868:	2304      	movs	r3, #4
 800886a:	75fb      	strb	r3, [r7, #23]
 800886c:	e08a      	b.n	8008984 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	330b      	adds	r3, #11
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	7bfa      	ldrb	r2, [r7, #15]
 8008880:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008882:	7dbb      	ldrb	r3, [r7, #22]
 8008884:	2be5      	cmp	r3, #229	; 0xe5
 8008886:	d007      	beq.n	8008898 <dir_find+0x8a>
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <dir_find+0x98>
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b0f      	cmp	r3, #15
 8008896:	d006      	beq.n	80088a6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008898:	23ff      	movs	r3, #255	; 0xff
 800889a:	757b      	strb	r3, [r7, #21]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f04f 32ff 	mov.w	r2, #4294967295
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30
 80088a4:	e05e      	b.n	8008964 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	2b0f      	cmp	r3, #15
 80088aa:	d136      	bne.n	800891a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80088b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d154      	bne.n	8008964 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80088ba:	7dbb      	ldrb	r3, [r7, #22]
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00d      	beq.n	80088e0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	7b5b      	ldrb	r3, [r3, #13]
 80088ca:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80088cc:	7dbb      	ldrb	r3, [r7, #22]
 80088ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d2:	75bb      	strb	r3, [r7, #22]
 80088d4:	7dbb      	ldrb	r3, [r7, #22]
 80088d6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80088e0:	7dba      	ldrb	r2, [r7, #22]
 80088e2:	7d7b      	ldrb	r3, [r7, #21]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d115      	bne.n	8008914 <dir_find+0x106>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	330d      	adds	r3, #13
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	7d3a      	ldrb	r2, [r7, #20]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d10e      	bne.n	8008914 <dir_find+0x106>
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	691a      	ldr	r2, [r3, #16]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f7ff fdfd 	bl	8008500 <cmp_lfn>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <dir_find+0x106>
 800890c:	7d7b      	ldrb	r3, [r7, #21]
 800890e:	3b01      	subs	r3, #1
 8008910:	b2db      	uxtb	r3, r3
 8008912:	e000      	b.n	8008916 <dir_find+0x108>
 8008914:	23ff      	movs	r3, #255	; 0xff
 8008916:	757b      	strb	r3, [r7, #21]
 8008918:	e024      	b.n	8008964 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800891a:	7d7b      	ldrb	r3, [r7, #21]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d109      	bne.n	8008934 <dir_find+0x126>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff ff51 	bl	80087cc <sum_sfn>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	7d3b      	ldrb	r3, [r7, #20]
 8008930:	4293      	cmp	r3, r2
 8008932:	d024      	beq.n	800897e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <dir_find+0x14a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a18      	ldr	r0, [r3, #32]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3324      	adds	r3, #36	; 0x24
 800894a:	220b      	movs	r2, #11
 800894c:	4619      	mov	r1, r3
 800894e:	f7fe fe1d 	bl	800758c <mem_cmp>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d014      	beq.n	8008982 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008958:	23ff      	movs	r3, #255	; 0xff
 800895a:	757b      	strb	r3, [r7, #21]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f04f 32ff 	mov.w	r2, #4294967295
 8008962:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008964:	2100      	movs	r1, #0
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff fc6d 	bl	8008246 <dir_next>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f43f af65 	beq.w	8008842 <dir_find+0x34>
 8008978:	e004      	b.n	8008984 <dir_find+0x176>
		if (res != FR_OK) break;
 800897a:	bf00      	nop
 800897c:	e002      	b.n	8008984 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800897e:	bf00      	nop
 8008980:	e000      	b.n	8008984 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008982:	bf00      	nop

	return res;
 8008984:	7dfb      	ldrb	r3, [r7, #23]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08c      	sub	sp, #48	; 0x30
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80089a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <dir_register+0x20>
 80089ac:	2306      	movs	r3, #6
 80089ae:	e0e0      	b.n	8008b72 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80089b0:	2300      	movs	r3, #0
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
 80089b4:	e002      	b.n	80089bc <dir_register+0x2c>
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	3301      	adds	r3, #1
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	4413      	add	r3, r2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1f4      	bne.n	80089b6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80089d2:	f107 030c 	add.w	r3, r7, #12
 80089d6:	220c      	movs	r2, #12
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fe fd9b 	bl	8007514 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d032      	beq.n	8008a4e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2240      	movs	r2, #64	; 0x40
 80089ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80089f0:	2301      	movs	r3, #1
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089f4:	e016      	b.n	8008a24 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	f107 010c 	add.w	r1, r7, #12
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	f7ff fe53 	bl	80086b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff feff 	bl	800880e <dir_find>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	3301      	adds	r3, #1
 8008a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	2b63      	cmp	r3, #99	; 0x63
 8008a28:	d9e5      	bls.n	80089f6 <dir_register+0x66>
 8008a2a:	e000      	b.n	8008a2e <dir_register+0x9e>
			if (res != FR_OK) break;
 8008a2c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	2b64      	cmp	r3, #100	; 0x64
 8008a32:	d101      	bne.n	8008a38 <dir_register+0xa8>
 8008a34:	2307      	movs	r3, #7
 8008a36:	e09c      	b.n	8008b72 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d002      	beq.n	8008a46 <dir_register+0xb6>
 8008a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a44:	e095      	b.n	8008b72 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008a46:	7dfa      	ldrb	r2, [r7, #23]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d007      	beq.n	8008a68 <dir_register+0xd8>
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	330c      	adds	r3, #12
 8008a5c:	4a47      	ldr	r2, [pc, #284]	; (8008b7c <dir_register+0x1ec>)
 8008a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a62:	089b      	lsrs	r3, r3, #2
 8008a64:	3301      	adds	r3, #1
 8008a66:	e000      	b.n	8008a6a <dir_register+0xda>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008a6c:	6a39      	ldr	r1, [r7, #32]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fcbf 	bl	80083f2 <dir_alloc>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d148      	bne.n	8008b14 <dir_register+0x184>
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	623b      	str	r3, [r7, #32]
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d042      	beq.n	8008b14 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	695a      	ldr	r2, [r3, #20]
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	015b      	lsls	r3, r3, #5
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff fb4a 	bl	8008134 <dir_sdi>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d132      	bne.n	8008b14 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3324      	adds	r3, #36	; 0x24
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff fe8a 	bl	80087cc <sum_sfn>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	69f8      	ldr	r0, [r7, #28]
 8008ac4:	f7fe ff54 	bl	8007970 <move_window>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d11d      	bne.n	8008b12 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	6918      	ldr	r0, [r3, #16]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a19      	ldr	r1, [r3, #32]
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	7efb      	ldrb	r3, [r7, #27]
 8008ae4:	f7ff fd7c 	bl	80085e0 <put_lfn>
				fs->wflag = 1;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2201      	movs	r2, #1
 8008aec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008aee:	2100      	movs	r1, #0
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff fba8 	bl	8008246 <dir_next>
 8008af6:	4603      	mov	r3, r0
 8008af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d107      	bne.n	8008b14 <dir_register+0x184>
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	623b      	str	r3, [r7, #32]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1d5      	bne.n	8008abc <dir_register+0x12c>
 8008b10:	e000      	b.n	8008b14 <dir_register+0x184>
				if (res != FR_OK) break;
 8008b12:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d128      	bne.n	8008b6e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	4619      	mov	r1, r3
 8008b22:	69f8      	ldr	r0, [r7, #28]
 8008b24:	f7fe ff24 	bl	8007970 <move_window>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d11b      	bne.n	8008b6e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fd09 	bl	8007556 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a18      	ldr	r0, [r3, #32]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	220b      	movs	r2, #11
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f7fe fce0 	bl	8007514 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	330c      	adds	r3, #12
 8008b60:	f002 0218 	and.w	r2, r2, #24
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3730      	adds	r7, #48	; 0x30
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	4ec4ec4f 	.word	0x4ec4ec4f

08008b80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	; 0x28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	61ba      	str	r2, [r7, #24]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4413      	add	r3, r2
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bb0:	2b1f      	cmp	r3, #31
 8008bb2:	d940      	bls.n	8008c36 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bb6:	2b2f      	cmp	r3, #47	; 0x2f
 8008bb8:	d006      	beq.n	8008bc8 <create_name+0x48>
 8008bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bbc:	2b5c      	cmp	r3, #92	; 0x5c
 8008bbe:	d110      	bne.n	8008be2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008bc0:	e002      	b.n	8008bc8 <create_name+0x48>
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	4413      	add	r3, r2
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b2f      	cmp	r3, #47	; 0x2f
 8008bd2:	d0f6      	beq.n	8008bc2 <create_name+0x42>
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	4413      	add	r3, r2
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b5c      	cmp	r3, #92	; 0x5c
 8008bde:	d0f0      	beq.n	8008bc2 <create_name+0x42>
			break;
 8008be0:	e02a      	b.n	8008c38 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2bfe      	cmp	r3, #254	; 0xfe
 8008be6:	d901      	bls.n	8008bec <create_name+0x6c>
 8008be8:	2306      	movs	r3, #6
 8008bea:	e17d      	b.n	8008ee8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 fd64 	bl	800a6c4 <ff_convert>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <create_name+0x8a>
 8008c06:	2306      	movs	r3, #6
 8008c08:	e16e      	b.n	8008ee8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8008c0e:	d809      	bhi.n	8008c24 <create_name+0xa4>
 8008c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c12:	4619      	mov	r1, r3
 8008c14:	488d      	ldr	r0, [pc, #564]	; (8008e4c <create_name+0x2cc>)
 8008c16:	f7fe fce0 	bl	80075da <chk_chr>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <create_name+0xa4>
 8008c20:	2306      	movs	r3, #6
 8008c22:	e161      	b.n	8008ee8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	617a      	str	r2, [r7, #20]
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c32:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008c34:	e7b4      	b.n	8008ba0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008c36:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	441a      	add	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c44:	2b1f      	cmp	r3, #31
 8008c46:	d801      	bhi.n	8008c4c <create_name+0xcc>
 8008c48:	2304      	movs	r3, #4
 8008c4a:	e000      	b.n	8008c4e <create_name+0xce>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008c52:	e011      	b.n	8008c78 <create_name+0xf8>
		w = lfn[di - 1];
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c68:	2b20      	cmp	r3, #32
 8008c6a:	d002      	beq.n	8008c72 <create_name+0xf2>
 8008c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c70:	d106      	bne.n	8008c80 <create_name+0x100>
		di--;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1ea      	bne.n	8008c54 <create_name+0xd4>
 8008c7e:	e000      	b.n	8008c82 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008c80:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <create_name+0x118>
 8008c94:	2306      	movs	r3, #6
 8008c96:	e127      	b.n	8008ee8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3324      	adds	r3, #36	; 0x24
 8008c9c:	220b      	movs	r2, #11
 8008c9e:	2120      	movs	r1, #32
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fe fc58 	bl	8007556 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	e002      	b.n	8008cb2 <create_name+0x132>
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d0f5      	beq.n	8008cac <create_name+0x12c>
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	2b2e      	cmp	r3, #46	; 0x2e
 8008ccc:	d0ee      	beq.n	8008cac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <create_name+0x168>
 8008cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd8:	f043 0303 	orr.w	r3, r3, #3
 8008cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008ce0:	e002      	b.n	8008ce8 <create_name+0x168>
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d009      	beq.n	8008d02 <create_name+0x182>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8008d00:	d1ef      	bne.n	8008ce2 <create_name+0x162>

	i = b = 0; ni = 8;
 8008d02:	2300      	movs	r3, #0
 8008d04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d08:	2300      	movs	r3, #0
 8008d0a:	623b      	str	r3, [r7, #32]
 8008d0c:	2308      	movs	r3, #8
 8008d0e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	61ba      	str	r2, [r7, #24]
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 8090 	beq.w	8008e48 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d006      	beq.n	8008d3c <create_name+0x1bc>
 8008d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d30:	2b2e      	cmp	r3, #46	; 0x2e
 8008d32:	d10a      	bne.n	8008d4a <create_name+0x1ca>
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d006      	beq.n	8008d4a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d40:	f043 0303 	orr.w	r3, r3, #3
 8008d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d48:	e07d      	b.n	8008e46 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008d4a:	6a3a      	ldr	r2, [r7, #32]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d203      	bcs.n	8008d5a <create_name+0x1da>
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d123      	bne.n	8008da2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	2b0b      	cmp	r3, #11
 8008d5e:	d106      	bne.n	8008d6e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d64:	f043 0303 	orr.w	r3, r3, #3
 8008d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d6c:	e075      	b.n	8008e5a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d005      	beq.n	8008d82 <create_name+0x202>
 8008d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d7a:	f043 0303 	orr.w	r3, r3, #3
 8008d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008d82:	69ba      	ldr	r2, [r7, #24]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d866      	bhi.n	8008e58 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	61bb      	str	r3, [r7, #24]
 8008d8e:	2308      	movs	r3, #8
 8008d90:	623b      	str	r3, [r7, #32]
 8008d92:	230b      	movs	r3, #11
 8008d94:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008da0:	e051      	b.n	8008e46 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008da4:	2b7f      	cmp	r3, #127	; 0x7f
 8008da6:	d914      	bls.n	8008dd2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008daa:	2100      	movs	r1, #0
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 fc89 	bl	800a6c4 <ff_convert>
 8008db2:	4603      	mov	r3, r0
 8008db4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <create_name+0x246>
 8008dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dbe:	3b80      	subs	r3, #128	; 0x80
 8008dc0:	4a23      	ldr	r2, [pc, #140]	; (8008e50 <create_name+0x2d0>)
 8008dc2:	5cd3      	ldrb	r3, [r2, r3]
 8008dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dca:	f043 0302 	orr.w	r3, r3, #2
 8008dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <create_name+0x268>
 8008dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dda:	4619      	mov	r1, r3
 8008ddc:	481d      	ldr	r0, [pc, #116]	; (8008e54 <create_name+0x2d4>)
 8008dde:	f7fe fbfc 	bl	80075da <chk_chr>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d008      	beq.n	8008dfa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008de8:	235f      	movs	r3, #95	; 0x5f
 8008dea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df0:	f043 0303 	orr.w	r3, r3, #3
 8008df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008df8:	e01b      	b.n	8008e32 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dfc:	2b40      	cmp	r3, #64	; 0x40
 8008dfe:	d909      	bls.n	8008e14 <create_name+0x294>
 8008e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e02:	2b5a      	cmp	r3, #90	; 0x5a
 8008e04:	d806      	bhi.n	8008e14 <create_name+0x294>
					b |= 2;
 8008e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e0a:	f043 0302 	orr.w	r3, r3, #2
 8008e0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e12:	e00e      	b.n	8008e32 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e16:	2b60      	cmp	r3, #96	; 0x60
 8008e18:	d90b      	bls.n	8008e32 <create_name+0x2b2>
 8008e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e1c:	2b7a      	cmp	r3, #122	; 0x7a
 8008e1e:	d808      	bhi.n	8008e32 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e24:	f043 0301 	orr.w	r3, r3, #1
 8008e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e2e:	3b20      	subs	r3, #32
 8008e30:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	623a      	str	r2, [r7, #32]
 8008e38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e3a:	b2d1      	uxtb	r1, r2
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	4413      	add	r3, r2
 8008e40:	460a      	mov	r2, r1
 8008e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008e46:	e763      	b.n	8008d10 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008e48:	bf00      	nop
 8008e4a:	e006      	b.n	8008e5a <create_name+0x2da>
 8008e4c:	0800d7a0 	.word	0x0800d7a0
 8008e50:	0800d830 	.word	0x0800d830
 8008e54:	0800d7ac 	.word	0x0800d7ac
			if (si > di) break;			/* No extension */
 8008e58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e60:	2be5      	cmp	r3, #229	; 0xe5
 8008e62:	d103      	bne.n	8008e6c <create_name+0x2ec>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2205      	movs	r2, #5
 8008e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	2b08      	cmp	r3, #8
 8008e70:	d104      	bne.n	8008e7c <create_name+0x2fc>
 8008e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e80:	f003 030c 	and.w	r3, r3, #12
 8008e84:	2b0c      	cmp	r3, #12
 8008e86:	d005      	beq.n	8008e94 <create_name+0x314>
 8008e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e8c:	f003 0303 	and.w	r3, r3, #3
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d105      	bne.n	8008ea0 <create_name+0x320>
 8008e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e98:	f043 0302 	orr.w	r3, r3, #2
 8008e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d117      	bne.n	8008edc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d105      	bne.n	8008ec4 <create_name+0x344>
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ebc:	f043 0310 	orr.w	r3, r3, #16
 8008ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ec8:	f003 030c 	and.w	r3, r3, #12
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d105      	bne.n	8008edc <create_name+0x35c>
 8008ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ed4:	f043 0308 	orr.w	r3, r3, #8
 8008ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ee2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008ee6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3728      	adds	r7, #40	; 0x28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008f04:	e002      	b.n	8008f0c <follow_path+0x1c>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	603b      	str	r3, [r7, #0]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b2f      	cmp	r3, #47	; 0x2f
 8008f12:	d0f8      	beq.n	8008f06 <follow_path+0x16>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b5c      	cmp	r3, #92	; 0x5c
 8008f1a:	d0f4      	beq.n	8008f06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b1f      	cmp	r3, #31
 8008f28:	d80a      	bhi.n	8008f40 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2280      	movs	r2, #128	; 0x80
 8008f2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008f32:	2100      	movs	r1, #0
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff f8fd 	bl	8008134 <dir_sdi>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]
 8008f3e:	e048      	b.n	8008fd2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f40:	463b      	mov	r3, r7
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fe1b 	bl	8008b80 <create_name>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d139      	bne.n	8008fc8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fc5a 	bl	800880e <dir_find>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f64:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00a      	beq.n	8008f82 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d12c      	bne.n	8008fcc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008f72:	7afb      	ldrb	r3, [r7, #11]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d127      	bne.n	8008fcc <follow_path+0xdc>
 8008f7c:	2305      	movs	r3, #5
 8008f7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008f80:	e024      	b.n	8008fcc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d121      	bne.n	8008fd0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	799b      	ldrb	r3, [r3, #6]
 8008f90:	f003 0310 	and.w	r3, r3, #16
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008f98:	2305      	movs	r3, #5
 8008f9a:	75fb      	strb	r3, [r7, #23]
 8008f9c:	e019      	b.n	8008fd2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	8992      	ldrh	r2, [r2, #12]
 8008fac:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fb0:	fb00 f202 	mul.w	r2, r0, r2
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	4619      	mov	r1, r3
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7ff fa60 	bl	8008480 <ld_clust>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008fc6:	e7bb      	b.n	8008f40 <follow_path+0x50>
			if (res != FR_OK) break;
 8008fc8:	bf00      	nop
 8008fca:	e002      	b.n	8008fd2 <follow_path+0xe2>
				break;
 8008fcc:	bf00      	nop
 8008fce:	e000      	b.n	8008fd2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fd0:	bf00      	nop
			}
		}
	}

	return res;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d031      	beq.n	8009056 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	617b      	str	r3, [r7, #20]
 8008ff8:	e002      	b.n	8009000 <get_ldnumber+0x24>
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b1f      	cmp	r3, #31
 8009006:	d903      	bls.n	8009010 <get_ldnumber+0x34>
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b3a      	cmp	r3, #58	; 0x3a
 800900e:	d1f4      	bne.n	8008ffa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b3a      	cmp	r3, #58	; 0x3a
 8009016:	d11c      	bne.n	8009052 <get_ldnumber+0x76>
			tp = *path;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	60fa      	str	r2, [r7, #12]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	3b30      	subs	r3, #48	; 0x30
 8009028:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b09      	cmp	r3, #9
 800902e:	d80e      	bhi.n	800904e <get_ldnumber+0x72>
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	429a      	cmp	r2, r3
 8009036:	d10a      	bne.n	800904e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d107      	bne.n	800904e <get_ldnumber+0x72>
					vol = (int)i;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	3301      	adds	r3, #1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	e002      	b.n	8009058 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009056:	693b      	ldr	r3, [r7, #16]
}
 8009058:	4618      	mov	r0, r3
 800905a:	371c      	adds	r7, #28
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	70da      	strb	r2, [r3, #3]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fe fc76 	bl	8007970 <move_window>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <check_fs+0x2a>
 800908a:	2304      	movs	r3, #4
 800908c:	e038      	b.n	8009100 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3338      	adds	r3, #56	; 0x38
 8009092:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe f9ba 	bl	8007410 <ld_word>
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d001      	beq.n	80090ac <check_fs+0x48>
 80090a8:	2303      	movs	r3, #3
 80090aa:	e029      	b.n	8009100 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090b2:	2be9      	cmp	r3, #233	; 0xe9
 80090b4:	d009      	beq.n	80090ca <check_fs+0x66>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090bc:	2beb      	cmp	r3, #235	; 0xeb
 80090be:	d11e      	bne.n	80090fe <check_fs+0x9a>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090c6:	2b90      	cmp	r3, #144	; 0x90
 80090c8:	d119      	bne.n	80090fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3338      	adds	r3, #56	; 0x38
 80090ce:	3336      	adds	r3, #54	; 0x36
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe f9b5 	bl	8007440 <ld_dword>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090dc:	4a0a      	ldr	r2, [pc, #40]	; (8009108 <check_fs+0xa4>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d101      	bne.n	80090e6 <check_fs+0x82>
 80090e2:	2300      	movs	r3, #0
 80090e4:	e00c      	b.n	8009100 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	3338      	adds	r3, #56	; 0x38
 80090ea:	3352      	adds	r3, #82	; 0x52
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe f9a7 	bl	8007440 <ld_dword>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4a05      	ldr	r2, [pc, #20]	; (800910c <check_fs+0xa8>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d101      	bne.n	80090fe <check_fs+0x9a>
 80090fa:	2300      	movs	r3, #0
 80090fc:	e000      	b.n	8009100 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80090fe:	2302      	movs	r3, #2
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	00544146 	.word	0x00544146
 800910c:	33544146 	.word	0x33544146

08009110 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b096      	sub	sp, #88	; 0x58
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7ff ff59 	bl	8008fdc <get_ldnumber>
 800912a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800912c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912e:	2b00      	cmp	r3, #0
 8009130:	da01      	bge.n	8009136 <find_volume+0x26>
 8009132:	230b      	movs	r3, #11
 8009134:	e265      	b.n	8009602 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009136:	4a9f      	ldr	r2, [pc, #636]	; (80093b4 <find_volume+0x2a4>)
 8009138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <find_volume+0x3a>
 8009146:	230c      	movs	r3, #12
 8009148:	e25b      	b.n	8009602 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800914e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	f023 0301 	bic.w	r3, r3, #1
 8009156:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01a      	beq.n	8009196 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe f8b5 	bl	80072d4 <disk_status>
 800916a:	4603      	mov	r3, r0
 800916c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009170:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10c      	bne.n	8009196 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <find_volume+0x82>
 8009182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800918e:	230a      	movs	r3, #10
 8009190:	e237      	b.n	8009602 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009192:	2300      	movs	r3, #0
 8009194:	e235      	b.n	8009602 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fe f8ad 	bl	8007308 <disk_initialize>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80091b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80091c0:	2303      	movs	r3, #3
 80091c2:	e21e      	b.n	8009602 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <find_volume+0xca>
 80091ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80091d6:	230a      	movs	r3, #10
 80091d8:	e213      	b.n	8009602 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	7858      	ldrb	r0, [r3, #1]
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	330c      	adds	r3, #12
 80091e2:	461a      	mov	r2, r3
 80091e4:	2102      	movs	r1, #2
 80091e6:	f7fe f8f5 	bl	80073d4 <disk_ioctl>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <find_volume+0xe4>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e206      	b.n	8009602 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	899b      	ldrh	r3, [r3, #12]
 80091f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091fc:	d80d      	bhi.n	800921a <find_volume+0x10a>
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	899b      	ldrh	r3, [r3, #12]
 8009202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009206:	d308      	bcc.n	800921a <find_volume+0x10a>
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	899b      	ldrh	r3, [r3, #12]
 800920c:	461a      	mov	r2, r3
 800920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009210:	899b      	ldrh	r3, [r3, #12]
 8009212:	3b01      	subs	r3, #1
 8009214:	4013      	ands	r3, r2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <find_volume+0x10e>
 800921a:	2301      	movs	r3, #1
 800921c:	e1f1      	b.n	8009602 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009226:	f7ff ff1d 	bl	8009064 <check_fs>
 800922a:	4603      	mov	r3, r0
 800922c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009234:	2b02      	cmp	r3, #2
 8009236:	d149      	bne.n	80092cc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009238:	2300      	movs	r3, #0
 800923a:	643b      	str	r3, [r7, #64]	; 0x40
 800923c:	e01e      	b.n	800927c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800924c:	4413      	add	r3, r2
 800924e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	3304      	adds	r3, #4
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d006      	beq.n	8009268 <find_volume+0x158>
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	3308      	adds	r3, #8
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe f8ee 	bl	8007440 <ld_dword>
 8009264:	4602      	mov	r2, r0
 8009266:	e000      	b.n	800926a <find_volume+0x15a>
 8009268:	2200      	movs	r2, #0
 800926a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	3358      	adds	r3, #88	; 0x58
 8009270:	443b      	add	r3, r7
 8009272:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009278:	3301      	adds	r3, #1
 800927a:	643b      	str	r3, [r7, #64]	; 0x40
 800927c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800927e:	2b03      	cmp	r3, #3
 8009280:	d9dd      	bls.n	800923e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009282:	2300      	movs	r3, #0
 8009284:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <find_volume+0x182>
 800928c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800928e:	3b01      	subs	r3, #1
 8009290:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	3358      	adds	r3, #88	; 0x58
 8009298:	443b      	add	r3, r7
 800929a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800929e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80092a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <find_volume+0x1a2>
 80092a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092aa:	f7ff fedb 	bl	8009064 <check_fs>
 80092ae:	4603      	mov	r3, r0
 80092b0:	e000      	b.n	80092b4 <find_volume+0x1a4>
 80092b2:	2303      	movs	r3, #3
 80092b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80092b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d905      	bls.n	80092cc <find_volume+0x1bc>
 80092c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c2:	3301      	adds	r3, #1
 80092c4:	643b      	str	r3, [r7, #64]	; 0x40
 80092c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d9e2      	bls.n	8009292 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80092cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	d101      	bne.n	80092d8 <find_volume+0x1c8>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e194      	b.n	8009602 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d901      	bls.n	80092e4 <find_volume+0x1d4>
 80092e0:	230d      	movs	r3, #13
 80092e2:	e18e      	b.n	8009602 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	3338      	adds	r3, #56	; 0x38
 80092e8:	330b      	adds	r3, #11
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe f890 	bl	8007410 <ld_word>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	899b      	ldrh	r3, [r3, #12]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d001      	beq.n	8009300 <find_volume+0x1f0>
 80092fc:	230d      	movs	r3, #13
 80092fe:	e180      	b.n	8009602 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	3338      	adds	r3, #56	; 0x38
 8009304:	3316      	adds	r3, #22
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe f882 	bl	8007410 <ld_word>
 800930c:	4603      	mov	r3, r0
 800930e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <find_volume+0x214>
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	3338      	adds	r3, #56	; 0x38
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe f88f 	bl	8007440 <ld_dword>
 8009322:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009328:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009336:	789b      	ldrb	r3, [r3, #2]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d005      	beq.n	8009348 <find_volume+0x238>
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	789b      	ldrb	r3, [r3, #2]
 8009340:	2b02      	cmp	r3, #2
 8009342:	d001      	beq.n	8009348 <find_volume+0x238>
 8009344:	230d      	movs	r3, #13
 8009346:	e15c      	b.n	8009602 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	789b      	ldrb	r3, [r3, #2]
 800934c:	461a      	mov	r2, r3
 800934e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009350:	fb02 f303 	mul.w	r3, r2, r3
 8009354:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800935c:	b29a      	uxth	r2, r3
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	895b      	ldrh	r3, [r3, #10]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d008      	beq.n	800937c <find_volume+0x26c>
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	895b      	ldrh	r3, [r3, #10]
 800936e:	461a      	mov	r2, r3
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	895b      	ldrh	r3, [r3, #10]
 8009374:	3b01      	subs	r3, #1
 8009376:	4013      	ands	r3, r2
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <find_volume+0x270>
 800937c:	230d      	movs	r3, #13
 800937e:	e140      	b.n	8009602 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	3338      	adds	r3, #56	; 0x38
 8009384:	3311      	adds	r3, #17
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe f842 	bl	8007410 <ld_word>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	891b      	ldrh	r3, [r3, #8]
 8009398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800939a:	8992      	ldrh	r2, [r2, #12]
 800939c:	0952      	lsrs	r2, r2, #5
 800939e:	b292      	uxth	r2, r2
 80093a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80093a4:	fb01 f202 	mul.w	r2, r1, r2
 80093a8:	1a9b      	subs	r3, r3, r2
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <find_volume+0x2a8>
 80093b0:	230d      	movs	r3, #13
 80093b2:	e126      	b.n	8009602 <find_volume+0x4f2>
 80093b4:	20002884 	.word	0x20002884

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	3338      	adds	r3, #56	; 0x38
 80093bc:	3313      	adds	r3, #19
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe f826 	bl	8007410 <ld_word>
 80093c4:	4603      	mov	r3, r0
 80093c6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80093c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d106      	bne.n	80093dc <find_volume+0x2cc>
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	3338      	adds	r3, #56	; 0x38
 80093d2:	3320      	adds	r3, #32
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe f833 	bl	8007440 <ld_dword>
 80093da:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	3338      	adds	r3, #56	; 0x38
 80093e0:	330e      	adds	r3, #14
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe f814 	bl	8007410 <ld_word>
 80093e8:	4603      	mov	r3, r0
 80093ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <find_volume+0x2e6>
 80093f2:	230d      	movs	r3, #13
 80093f4:	e105      	b.n	8009602 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fa:	4413      	add	r3, r2
 80093fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093fe:	8911      	ldrh	r1, [r2, #8]
 8009400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009402:	8992      	ldrh	r2, [r2, #12]
 8009404:	0952      	lsrs	r2, r2, #5
 8009406:	b292      	uxth	r2, r2
 8009408:	fbb1 f2f2 	udiv	r2, r1, r2
 800940c:	b292      	uxth	r2, r2
 800940e:	4413      	add	r3, r2
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	429a      	cmp	r2, r3
 8009418:	d201      	bcs.n	800941e <find_volume+0x30e>
 800941a:	230d      	movs	r3, #13
 800941c:	e0f1      	b.n	8009602 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800941e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009426:	8952      	ldrh	r2, [r2, #10]
 8009428:	fbb3 f3f2 	udiv	r3, r3, r2
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <find_volume+0x328>
 8009434:	230d      	movs	r3, #13
 8009436:	e0e4      	b.n	8009602 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009438:	2303      	movs	r3, #3
 800943a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009444:	4293      	cmp	r3, r2
 8009446:	d802      	bhi.n	800944e <find_volume+0x33e>
 8009448:	2302      	movs	r3, #2
 800944a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009454:	4293      	cmp	r3, r2
 8009456:	d802      	bhi.n	800945e <find_volume+0x34e>
 8009458:	2301      	movs	r3, #1
 800945a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	1c9a      	adds	r2, r3, #2
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800946a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800946c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800946e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009470:	441a      	add	r2, r3
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	441a      	add	r2, r3
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009484:	2b03      	cmp	r3, #3
 8009486:	d11e      	bne.n	80094c6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	3338      	adds	r3, #56	; 0x38
 800948c:	332a      	adds	r3, #42	; 0x2a
 800948e:	4618      	mov	r0, r3
 8009490:	f7fd ffbe 	bl	8007410 <ld_word>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <find_volume+0x38e>
 800949a:	230d      	movs	r3, #13
 800949c:	e0b1      	b.n	8009602 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	891b      	ldrh	r3, [r3, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <find_volume+0x39a>
 80094a6:	230d      	movs	r3, #13
 80094a8:	e0ab      	b.n	8009602 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	3338      	adds	r3, #56	; 0x38
 80094ae:	332c      	adds	r3, #44	; 0x2c
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fd ffc5 	bl	8007440 <ld_dword>
 80094b6:	4602      	mov	r2, r0
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	647b      	str	r3, [r7, #68]	; 0x44
 80094c4:	e01f      	b.n	8009506 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	891b      	ldrh	r3, [r3, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <find_volume+0x3c2>
 80094ce:	230d      	movs	r3, #13
 80094d0:	e097      	b.n	8009602 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d8:	441a      	add	r2, r3
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d103      	bne.n	80094ee <find_volume+0x3de>
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	e00a      	b.n	8009504 <find_volume+0x3f4>
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	69da      	ldr	r2, [r3, #28]
 80094f2:	4613      	mov	r3, r2
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	4413      	add	r3, r2
 80094f8:	085a      	lsrs	r2, r3, #1
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009504:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	6a1a      	ldr	r2, [r3, #32]
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	899b      	ldrh	r3, [r3, #12]
 800950e:	4619      	mov	r1, r3
 8009510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009512:	440b      	add	r3, r1
 8009514:	3b01      	subs	r3, #1
 8009516:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009518:	8989      	ldrh	r1, [r1, #12]
 800951a:	fbb3 f3f1 	udiv	r3, r3, r1
 800951e:	429a      	cmp	r2, r3
 8009520:	d201      	bcs.n	8009526 <find_volume+0x416>
 8009522:	230d      	movs	r3, #13
 8009524:	e06d      	b.n	8009602 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	f04f 32ff 	mov.w	r2, #4294967295
 800952c:	619a      	str	r2, [r3, #24]
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	2280      	movs	r2, #128	; 0x80
 800953a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800953c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009540:	2b03      	cmp	r3, #3
 8009542:	d149      	bne.n	80095d8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	3338      	adds	r3, #56	; 0x38
 8009548:	3330      	adds	r3, #48	; 0x30
 800954a:	4618      	mov	r0, r3
 800954c:	f7fd ff60 	bl	8007410 <ld_word>
 8009550:	4603      	mov	r3, r0
 8009552:	2b01      	cmp	r3, #1
 8009554:	d140      	bne.n	80095d8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009558:	3301      	adds	r3, #1
 800955a:	4619      	mov	r1, r3
 800955c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800955e:	f7fe fa07 	bl	8007970 <move_window>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d137      	bne.n	80095d8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	2200      	movs	r2, #0
 800956c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	3338      	adds	r3, #56	; 0x38
 8009572:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009576:	4618      	mov	r0, r3
 8009578:	f7fd ff4a 	bl	8007410 <ld_word>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009584:	429a      	cmp	r2, r3
 8009586:	d127      	bne.n	80095d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	3338      	adds	r3, #56	; 0x38
 800958c:	4618      	mov	r0, r3
 800958e:	f7fd ff57 	bl	8007440 <ld_dword>
 8009592:	4603      	mov	r3, r0
 8009594:	4a1d      	ldr	r2, [pc, #116]	; (800960c <find_volume+0x4fc>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d11e      	bne.n	80095d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959c:	3338      	adds	r3, #56	; 0x38
 800959e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fd ff4c 	bl	8007440 <ld_dword>
 80095a8:	4603      	mov	r3, r0
 80095aa:	4a19      	ldr	r2, [pc, #100]	; (8009610 <find_volume+0x500>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d113      	bne.n	80095d8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	3338      	adds	r3, #56	; 0x38
 80095b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fd ff41 	bl	8007440 <ld_dword>
 80095be:	4602      	mov	r2, r0
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80095c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c6:	3338      	adds	r3, #56	; 0x38
 80095c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd ff37 	bl	8007440 <ld_dword>
 80095d2:	4602      	mov	r2, r0
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80095de:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80095e0:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <find_volume+0x504>)
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <find_volume+0x504>)
 80095ea:	801a      	strh	r2, [r3, #0]
 80095ec:	4b09      	ldr	r3, [pc, #36]	; (8009614 <find_volume+0x504>)
 80095ee:	881a      	ldrh	r2, [r3, #0]
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	4a08      	ldr	r2, [pc, #32]	; (8009618 <find_volume+0x508>)
 80095f8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80095fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095fc:	f7fe f950 	bl	80078a0 <clear_lock>
#endif
	return FR_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3758      	adds	r7, #88	; 0x58
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	41615252 	.word	0x41615252
 8009610:	61417272 	.word	0x61417272
 8009614:	20002888 	.word	0x20002888
 8009618:	200028ac 	.word	0x200028ac

0800961c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009626:	2309      	movs	r3, #9
 8009628:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d01c      	beq.n	800966a <validate+0x4e>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d018      	beq.n	800966a <validate+0x4e>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d013      	beq.n	800966a <validate+0x4e>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	889a      	ldrh	r2, [r3, #4]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	88db      	ldrh	r3, [r3, #6]
 800964c:	429a      	cmp	r2, r3
 800964e:	d10c      	bne.n	800966a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	4618      	mov	r0, r3
 8009658:	f7fd fe3c 	bl	80072d4 <disk_status>
 800965c:	4603      	mov	r3, r0
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <validate+0x4e>
			res = FR_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <validate+0x5a>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	e000      	b.n	8009678 <validate+0x5c>
 8009676:	2300      	movs	r3, #0
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	6013      	str	r3, [r2, #0]
	return res;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800969a:	f107 0310 	add.w	r3, r7, #16
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff fc9c 	bl	8008fdc <get_ldnumber>
 80096a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	da01      	bge.n	80096b0 <f_mount+0x28>
 80096ac:	230b      	movs	r3, #11
 80096ae:	e02b      	b.n	8009708 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80096b0:	4a17      	ldr	r2, [pc, #92]	; (8009710 <f_mount+0x88>)
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80096c0:	69b8      	ldr	r0, [r7, #24]
 80096c2:	f7fe f8ed 	bl	80078a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2200      	movs	r2, #0
 80096ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	490d      	ldr	r1, [pc, #52]	; (8009710 <f_mount+0x88>)
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <f_mount+0x66>
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d001      	beq.n	80096f2 <f_mount+0x6a>
 80096ee:	2300      	movs	r3, #0
 80096f0:	e00a      	b.n	8009708 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80096f2:	f107 010c 	add.w	r1, r7, #12
 80096f6:	f107 0308 	add.w	r3, r7, #8
 80096fa:	2200      	movs	r2, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fd07 	bl	8009110 <find_volume>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009706:	7dfb      	ldrb	r3, [r7, #23]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3720      	adds	r7, #32
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20002884 	.word	0x20002884

08009714 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b09a      	sub	sp, #104	; 0x68
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <f_open+0x18>
 8009728:	2309      	movs	r3, #9
 800972a:	e1bb      	b.n	8009aa4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009732:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009734:	79fa      	ldrb	r2, [r7, #7]
 8009736:	f107 0114 	add.w	r1, r7, #20
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff fce6 	bl	8009110 <find_volume>
 8009744:	4603      	mov	r3, r0
 8009746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800974a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800974e:	2b00      	cmp	r3, #0
 8009750:	f040 819f 	bne.w	8009a92 <f_open+0x37e>
		dj.obj.fs = fs;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	f107 0318 	add.w	r3, r7, #24
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff fbc5 	bl	8008ef0 <follow_path>
 8009766:	4603      	mov	r3, r0
 8009768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800976c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009770:	2b00      	cmp	r3, #0
 8009772:	d11a      	bne.n	80097aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009778:	b25b      	sxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	da03      	bge.n	8009786 <f_open+0x72>
				res = FR_INVALID_NAME;
 800977e:	2306      	movs	r3, #6
 8009780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009784:	e011      	b.n	80097aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	f023 0301 	bic.w	r3, r3, #1
 800978c:	2b00      	cmp	r3, #0
 800978e:	bf14      	ite	ne
 8009790:	2301      	movne	r3, #1
 8009792:	2300      	moveq	r3, #0
 8009794:	b2db      	uxtb	r3, r3
 8009796:	461a      	mov	r2, r3
 8009798:	f107 0318 	add.w	r3, r7, #24
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fd ff36 	bl	8007610 <chk_lock>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	f003 031c 	and.w	r3, r3, #28
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d07f      	beq.n	80098b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80097b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d017      	beq.n	80097ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80097bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d10e      	bne.n	80097e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80097c4:	f7fd ff80 	bl	80076c8 <enq_lock>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <f_open+0xc8>
 80097ce:	f107 0318 	add.w	r3, r7, #24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff f8dc 	bl	8008990 <dir_register>
 80097d8:	4603      	mov	r3, r0
 80097da:	e000      	b.n	80097de <f_open+0xca>
 80097dc:	2312      	movs	r3, #18
 80097de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	f043 0308 	orr.w	r3, r3, #8
 80097e8:	71fb      	strb	r3, [r7, #7]
 80097ea:	e010      	b.n	800980e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80097ec:	7fbb      	ldrb	r3, [r7, #30]
 80097ee:	f003 0311 	and.w	r3, r3, #17
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <f_open+0xea>
					res = FR_DENIED;
 80097f6:	2307      	movs	r3, #7
 80097f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80097fc:	e007      	b.n	800980e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <f_open+0xfa>
 8009808:	2308      	movs	r3, #8
 800980a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800980e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009812:	2b00      	cmp	r3, #0
 8009814:	d168      	bne.n	80098e8 <f_open+0x1d4>
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b00      	cmp	r3, #0
 800981e:	d063      	beq.n	80098e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009820:	f7fd fcf4 	bl	800720c <get_fattime>
 8009824:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	330e      	adds	r3, #14
 800982a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800982c:	4618      	mov	r0, r3
 800982e:	f7fd fe45 	bl	80074bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	3316      	adds	r3, #22
 8009836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009838:	4618      	mov	r0, r3
 800983a:	f7fd fe3f 	bl	80074bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	330b      	adds	r3, #11
 8009842:	2220      	movs	r2, #32
 8009844:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800984a:	4611      	mov	r1, r2
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe fe17 	bl	8008480 <ld_clust>
 8009852:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009858:	2200      	movs	r2, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fe2f 	bl	80084be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009862:	331c      	adds	r3, #28
 8009864:	2100      	movs	r1, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fd fe28 	bl	80074bc <st_dword>
					fs->wflag = 1;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2201      	movs	r2, #1
 8009870:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009874:	2b00      	cmp	r3, #0
 8009876:	d037      	beq.n	80098e8 <f_open+0x1d4>
						dw = fs->winsect;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800987e:	f107 0318 	add.w	r3, r7, #24
 8009882:	2200      	movs	r2, #0
 8009884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fb1f 	bl	8007eca <remove_chain>
 800988c:	4603      	mov	r3, r0
 800988e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009892:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009896:	2b00      	cmp	r3, #0
 8009898:	d126      	bne.n	80098e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe f866 	bl	8007970 <move_window>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ae:	3a01      	subs	r2, #1
 80098b0:	615a      	str	r2, [r3, #20]
 80098b2:	e019      	b.n	80098e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80098b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d115      	bne.n	80098e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80098bc:	7fbb      	ldrb	r3, [r7, #30]
 80098be:	f003 0310 	and.w	r3, r3, #16
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <f_open+0x1ba>
					res = FR_NO_FILE;
 80098c6:	2304      	movs	r3, #4
 80098c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80098cc:	e00c      	b.n	80098e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <f_open+0x1d4>
 80098d8:	7fbb      	ldrb	r3, [r7, #30]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <f_open+0x1d4>
						res = FR_DENIED;
 80098e2:	2307      	movs	r3, #7
 80098e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80098e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d128      	bne.n	8009942 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	f003 0308 	and.w	r3, r3, #8
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009900:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800990a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	f023 0301 	bic.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	bf14      	ite	ne
 800991a:	2301      	movne	r3, #1
 800991c:	2300      	moveq	r3, #0
 800991e:	b2db      	uxtb	r3, r3
 8009920:	461a      	mov	r2, r3
 8009922:	f107 0318 	add.w	r3, r7, #24
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f7fd feef 	bl	800770c <inc_lock>
 800992e:	4602      	mov	r2, r0
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <f_open+0x22e>
 800993c:	2302      	movs	r3, #2
 800993e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009946:	2b00      	cmp	r3, #0
 8009948:	f040 80a3 	bne.w	8009a92 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fd94 	bl	8008480 <ld_clust>
 8009958:	4602      	mov	r2, r0
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	331c      	adds	r3, #28
 8009962:	4618      	mov	r0, r3
 8009964:	f7fd fd6c 	bl	8007440 <ld_dword>
 8009968:	4602      	mov	r2, r0
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	88da      	ldrh	r2, [r3, #6]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	79fa      	ldrb	r2, [r7, #7]
 8009986:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3330      	adds	r3, #48	; 0x30
 800999e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099a2:	2100      	movs	r1, #0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fd fdd6 	bl	8007556 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d06e      	beq.n	8009a92 <f_open+0x37e>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d06a      	beq.n	8009a92 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	895b      	ldrh	r3, [r3, #10]
 80099c8:	461a      	mov	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	899b      	ldrh	r3, [r3, #12]
 80099ce:	fb02 f303 	mul.w	r3, r2, r3
 80099d2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099e0:	e016      	b.n	8009a10 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe f87f 	bl	8007aea <get_fat>
 80099ec:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80099ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d802      	bhi.n	80099fa <f_open+0x2e6>
 80099f4:	2302      	movs	r3, #2
 80099f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80099fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a00:	d102      	bne.n	8009a08 <f_open+0x2f4>
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d103      	bne.n	8009a20 <f_open+0x30c>
 8009a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d8e0      	bhi.n	80099e2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d131      	bne.n	8009a92 <f_open+0x37e>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	899b      	ldrh	r3, [r3, #12]
 8009a32:	461a      	mov	r2, r3
 8009a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a36:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a3a:	fb01 f202 	mul.w	r2, r1, r2
 8009a3e:	1a9b      	subs	r3, r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d026      	beq.n	8009a92 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe f82f 	bl	8007aac <clust2sect>
 8009a4e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <f_open+0x34a>
						res = FR_INT_ERR;
 8009a56:	2302      	movs	r3, #2
 8009a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a5c:	e019      	b.n	8009a92 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	899b      	ldrh	r3, [r3, #12]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a66:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6c:	441a      	add	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	7858      	ldrb	r0, [r3, #1]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6a1a      	ldr	r2, [r3, #32]
 8009a80:	2301      	movs	r3, #1
 8009a82:	f7fd fc67 	bl	8007354 <disk_read>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <f_open+0x37e>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009a92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <f_open+0x38c>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009aa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3768      	adds	r7, #104	; 0x68
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08c      	sub	sp, #48	; 0x30
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f107 0210 	add.w	r2, r7, #16
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff fda5 	bl	800961c <validate>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d107      	bne.n	8009af0 <f_write+0x44>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	7d5b      	ldrb	r3, [r3, #21]
 8009ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <f_write+0x4a>
 8009af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009af4:	e16a      	b.n	8009dcc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	7d1b      	ldrb	r3, [r3, #20]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <f_write+0x5a>
 8009b02:	2307      	movs	r3, #7
 8009b04:	e162      	b.n	8009dcc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	441a      	add	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	f080 814c 	bcs.w	8009db0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	43db      	mvns	r3, r3
 8009b1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009b20:	e146      	b.n	8009db0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	8992      	ldrh	r2, [r2, #12]
 8009b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b2e:	fb01 f202 	mul.w	r2, r1, r2
 8009b32:	1a9b      	subs	r3, r3, r2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f040 80f1 	bne.w	8009d1c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	8992      	ldrh	r2, [r2, #12]
 8009b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	8952      	ldrh	r2, [r2, #10]
 8009b4a:	3a01      	subs	r2, #1
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d143      	bne.n	8009bde <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10c      	bne.n	8009b78 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d11a      	bne.n	8009ba0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe fa10 	bl	8007f94 <create_chain>
 8009b74:	62b8      	str	r0, [r7, #40]	; 0x28
 8009b76:	e013      	b.n	8009ba0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d007      	beq.n	8009b90 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	4619      	mov	r1, r3
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7fe fa9c 	bl	80080c4 <clmt_clust>
 8009b8c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009b8e:	e007      	b.n	8009ba0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	4619      	mov	r1, r3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	f7fe f9fb 	bl	8007f94 <create_chain>
 8009b9e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 8109 	beq.w	8009dba <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d104      	bne.n	8009bb8 <f_write+0x10c>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	755a      	strb	r2, [r3, #21]
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e109      	b.n	8009dcc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d104      	bne.n	8009bca <f_write+0x11e>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	755a      	strb	r2, [r3, #21]
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e100      	b.n	8009dcc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bce:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d102      	bne.n	8009bde <f_write+0x132>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bdc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	7d1b      	ldrb	r3, [r3, #20]
 8009be2:	b25b      	sxtb	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da18      	bge.n	8009c1a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	7858      	ldrb	r0, [r3, #1]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a1a      	ldr	r2, [r3, #32]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	f7fd fbcc 	bl	8007394 <disk_write>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d004      	beq.n	8009c0c <f_write+0x160>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	755a      	strb	r2, [r3, #21]
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e0df      	b.n	8009dcc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	7d1b      	ldrb	r3, [r3, #20]
 8009c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	4619      	mov	r1, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f7fd ff42 	bl	8007aac <clust2sect>
 8009c28:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d104      	bne.n	8009c3a <f_write+0x18e>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2202      	movs	r2, #2
 8009c34:	755a      	strb	r2, [r3, #21]
 8009c36:	2302      	movs	r3, #2
 8009c38:	e0c8      	b.n	8009dcc <f_write+0x320>
			sect += csect;
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	4413      	add	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	899b      	ldrh	r3, [r3, #12]
 8009c46:	461a      	mov	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c4e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d043      	beq.n	8009cde <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	8952      	ldrh	r2, [r2, #10]
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d905      	bls.n	8009c70 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	895b      	ldrh	r3, [r3, #10]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	7858      	ldrb	r0, [r3, #1]
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	69f9      	ldr	r1, [r7, #28]
 8009c7a:	f7fd fb8b 	bl	8007394 <disk_write>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d004      	beq.n	8009c8e <f_write+0x1e2>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2201      	movs	r2, #1
 8009c88:	755a      	strb	r2, [r3, #21]
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e09e      	b.n	8009dcc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1a      	ldr	r2, [r3, #32]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	6a3a      	ldr	r2, [r7, #32]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d918      	bls.n	8009cce <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a1a      	ldr	r2, [r3, #32]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	8992      	ldrh	r2, [r2, #12]
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
 8009cb2:	69fa      	ldr	r2, [r7, #28]
 8009cb4:	18d1      	adds	r1, r2, r3
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	899b      	ldrh	r3, [r3, #12]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f7fd fc2a 	bl	8007514 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	7d1b      	ldrb	r3, [r3, #20]
 8009cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	899b      	ldrh	r3, [r3, #12]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	fb02 f303 	mul.w	r3, r2, r3
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009cdc:	e04b      	b.n	8009d76 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d016      	beq.n	8009d16 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d210      	bcs.n	8009d16 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	7858      	ldrb	r0, [r3, #1]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cfe:	2301      	movs	r3, #1
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	f7fd fb27 	bl	8007354 <disk_read>
 8009d06:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d004      	beq.n	8009d16 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	755a      	strb	r2, [r3, #21]
 8009d12:	2301      	movs	r3, #1
 8009d14:	e05a      	b.n	8009dcc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	899b      	ldrh	r3, [r3, #12]
 8009d20:	4618      	mov	r0, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	8992      	ldrh	r2, [r2, #12]
 8009d2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d2e:	fb01 f202 	mul.w	r2, r1, r2
 8009d32:	1a9b      	subs	r3, r3, r2
 8009d34:	1ac3      	subs	r3, r0, r3
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d901      	bls.n	8009d44 <f_write+0x298>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	8992      	ldrh	r2, [r2, #12]
 8009d52:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d56:	fb00 f202 	mul.w	r2, r0, r2
 8009d5a:	1a9b      	subs	r3, r3, r2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d60:	69f9      	ldr	r1, [r7, #28]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fd fbd6 	bl	8007514 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	7d1b      	ldrb	r3, [r3, #20]
 8009d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	4413      	add	r3, r2
 8009d7c:	61fb      	str	r3, [r7, #28]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	441a      	add	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	619a      	str	r2, [r3, #24]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	bf38      	it	cc
 8009d96:	461a      	movcc	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	60da      	str	r2, [r3, #12]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	441a      	add	r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f47f aeb5 	bne.w	8009b22 <f_write+0x76>
 8009db8:	e000      	b.n	8009dbc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009dba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	7d1b      	ldrb	r3, [r3, #20]
 8009dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3730      	adds	r7, #48	; 0x30
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f107 0208 	add.w	r2, r7, #8
 8009de2:	4611      	mov	r1, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff fc19 	bl	800961c <validate>
 8009dea:	4603      	mov	r3, r0
 8009dec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d168      	bne.n	8009ec6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	7d1b      	ldrb	r3, [r3, #20]
 8009df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d062      	beq.n	8009ec6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7d1b      	ldrb	r3, [r3, #20]
 8009e04:	b25b      	sxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	da15      	bge.n	8009e36 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	7858      	ldrb	r0, [r3, #1]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a1a      	ldr	r2, [r3, #32]
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f7fd fabb 	bl	8007394 <disk_write>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <f_sync+0x54>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e04f      	b.n	8009ec8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7d1b      	ldrb	r3, [r3, #20]
 8009e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009e36:	f7fd f9e9 	bl	800720c <get_fattime>
 8009e3a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f7fd fd93 	bl	8007970 <move_window>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d138      	bne.n	8009ec6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e58:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	330b      	adds	r3, #11
 8009e5e:	781a      	ldrb	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	330b      	adds	r3, #11
 8009e64:	f042 0220 	orr.w	r2, r2, #32
 8009e68:	b2d2      	uxtb	r2, r2
 8009e6a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	461a      	mov	r2, r3
 8009e76:	68f9      	ldr	r1, [r7, #12]
 8009e78:	f7fe fb21 	bl	80084be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f103 021c 	add.w	r2, r3, #28
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	4619      	mov	r1, r3
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f7fd fb17 	bl	80074bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3316      	adds	r3, #22
 8009e92:	6939      	ldr	r1, [r7, #16]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fd fb11 	bl	80074bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3312      	adds	r3, #18
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fd faf0 	bl	8007486 <st_word>
					fs->wflag = 1;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fd fd8c 	bl	80079cc <sync_fs>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7d1b      	ldrb	r3, [r3, #20]
 8009ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff ff7b 	bl	8009dd4 <f_sync>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d118      	bne.n	8009f1a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f107 0208 	add.w	r2, r7, #8
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff fb93 	bl	800961c <validate>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10c      	bne.n	8009f1a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fd fc8f 	bl	8007828 <dec_lock>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d102      	bne.n	8009f1a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b090      	sub	sp, #64	; 0x40
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f107 0208 	add.w	r2, r7, #8
 8009f34:	4611      	mov	r1, r2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff fb70 	bl	800961c <validate>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009f42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d103      	bne.n	8009f52 <f_lseek+0x2e>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7d5b      	ldrb	r3, [r3, #21]
 8009f4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009f52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <f_lseek+0x3c>
 8009f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f5e:	e201      	b.n	800a364 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80d9 	beq.w	800a11c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f70:	d15a      	bne.n	800a028 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	1d1a      	adds	r2, r3, #4
 8009f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	617b      	str	r3, [r7, #20]
 8009f82:	2302      	movs	r3, #2
 8009f84:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d03a      	beq.n	800a008 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	2300      	movs	r3, #0
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fd fd9b 	bl	8007aea <get_fat>
 8009fb4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d804      	bhi.n	8009fc6 <f_lseek+0xa2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	755a      	strb	r2, [r3, #21]
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e1ce      	b.n	800a364 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d104      	bne.n	8009fd8 <f_lseek+0xb4>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	755a      	strb	r2, [r3, #21]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e1c5      	b.n	800a364 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d0de      	beq.n	8009fa0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d809      	bhi.n	8009ffe <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	1d1a      	adds	r2, r3, #4
 8009fee:	627a      	str	r2, [r7, #36]	; 0x24
 8009ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	1d1a      	adds	r2, r3, #4
 8009ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a004:	429a      	cmp	r2, r3
 800a006:	d3c4      	bcc.n	8009f92 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a00e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	429a      	cmp	r2, r3
 800a016:	d803      	bhi.n	800a020 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	e19f      	b.n	800a360 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a020:	2311      	movs	r3, #17
 800a022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a026:	e19b      	b.n	800a360 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d902      	bls.n	800a038 <f_lseek+0x114>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 818d 	beq.w	800a360 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	3b01      	subs	r3, #1
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7fe f839 	bl	80080c4 <clmt_clust>
 800a052:	4602      	mov	r2, r0
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	4619      	mov	r1, r3
 800a060:	4610      	mov	r0, r2
 800a062:	f7fd fd23 	bl	8007aac <clust2sect>
 800a066:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d104      	bne.n	800a078 <f_lseek+0x154>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2202      	movs	r2, #2
 800a072:	755a      	strb	r2, [r3, #21]
 800a074:	2302      	movs	r3, #2
 800a076:	e175      	b.n	800a364 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	8992      	ldrh	r2, [r2, #12]
 800a080:	fbb3 f3f2 	udiv	r3, r3, r2
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	8952      	ldrh	r2, [r2, #10]
 800a088:	3a01      	subs	r2, #1
 800a08a:	4013      	ands	r3, r2
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	4413      	add	r3, r2
 800a090:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	8992      	ldrh	r2, [r2, #12]
 800a09a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a09e:	fb01 f202 	mul.w	r2, r1, r2
 800a0a2:	1a9b      	subs	r3, r3, r2
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 815b 	beq.w	800a360 <f_lseek+0x43c>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	f000 8155 	beq.w	800a360 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	7d1b      	ldrb	r3, [r3, #20]
 800a0ba:	b25b      	sxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	da18      	bge.n	800a0f2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	7858      	ldrb	r0, [r3, #1]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1a      	ldr	r2, [r3, #32]
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f7fd f960 	bl	8007394 <disk_write>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d004      	beq.n	800a0e4 <f_lseek+0x1c0>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	755a      	strb	r2, [r3, #21]
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e13f      	b.n	800a364 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7d1b      	ldrb	r3, [r3, #20]
 800a0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	7858      	ldrb	r0, [r3, #1]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	f7fd f928 	bl	8007354 <disk_read>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d004      	beq.n	800a114 <f_lseek+0x1f0>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	755a      	strb	r2, [r3, #21]
 800a110:	2301      	movs	r3, #1
 800a112:	e127      	b.n	800a364 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	621a      	str	r2, [r3, #32]
 800a11a:	e121      	b.n	800a360 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	429a      	cmp	r2, r3
 800a124:	d908      	bls.n	800a138 <f_lseek+0x214>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7d1b      	ldrb	r3, [r3, #20]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d102      	bne.n	800a138 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	637b      	str	r3, [r7, #52]	; 0x34
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a146:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 80b5 	beq.w	800a2ba <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	895b      	ldrh	r3, [r3, #10]
 800a154:	461a      	mov	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	899b      	ldrh	r3, [r3, #12]
 800a15a:	fb02 f303 	mul.w	r3, r2, r3
 800a15e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01b      	beq.n	800a19e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	1e5a      	subs	r2, r3, #1
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	1e59      	subs	r1, r3, #1
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d30f      	bcc.n	800a19e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	1e5a      	subs	r2, r3, #1
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	425b      	negs	r3, r3
 800a186:	401a      	ands	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a19c:	e022      	b.n	800a1e4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d119      	bne.n	800a1de <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fd fef0 	bl	8007f94 <create_chain>
 800a1b4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d104      	bne.n	800a1c6 <f_lseek+0x2a2>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	755a      	strb	r2, [r3, #21]
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e0ce      	b.n	800a364 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d104      	bne.n	800a1d8 <f_lseek+0x2b4>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	755a      	strb	r2, [r3, #21]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e0c5      	b.n	800a364 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1dc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1e2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d067      	beq.n	800a2ba <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a1ea:	e03a      	b.n	800a262 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	441a      	add	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7d1b      	ldrb	r3, [r3, #20]
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00b      	beq.n	800a224 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a210:	4618      	mov	r0, r3
 800a212:	f7fd febf 	bl	8007f94 <create_chain>
 800a216:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d108      	bne.n	800a230 <f_lseek+0x30c>
							ofs = 0; break;
 800a21e:	2300      	movs	r3, #0
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	e022      	b.n	800a26a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fd fc5e 	bl	8007aea <get_fat>
 800a22e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a236:	d104      	bne.n	800a242 <f_lseek+0x31e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	755a      	strb	r2, [r3, #21]
 800a23e:	2301      	movs	r3, #1
 800a240:	e090      	b.n	800a364 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	2b01      	cmp	r3, #1
 800a246:	d904      	bls.n	800a252 <f_lseek+0x32e>
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a24e:	429a      	cmp	r2, r3
 800a250:	d304      	bcc.n	800a25c <f_lseek+0x338>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2202      	movs	r2, #2
 800a256:	755a      	strb	r2, [r3, #21]
 800a258:	2302      	movs	r3, #2
 800a25a:	e083      	b.n	800a364 <f_lseek+0x440>
					fp->clust = clst;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a260:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	429a      	cmp	r2, r3
 800a268:	d8c0      	bhi.n	800a1ec <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	699a      	ldr	r2, [r3, #24]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	441a      	add	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	899b      	ldrh	r3, [r3, #12]
 800a27a:	461a      	mov	r2, r3
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a282:	fb01 f202 	mul.w	r2, r1, r2
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a290:	4618      	mov	r0, r3
 800a292:	f7fd fc0b 	bl	8007aac <clust2sect>
 800a296:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <f_lseek+0x384>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	755a      	strb	r2, [r3, #21]
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e05d      	b.n	800a364 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	899b      	ldrh	r3, [r3, #12]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2b6:	4413      	add	r3, r2
 800a2b8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d90a      	bls.n	800a2dc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699a      	ldr	r2, [r3, #24]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	7d1b      	ldrb	r3, [r3, #20]
 800a2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	8992      	ldrh	r2, [r2, #12]
 800a2e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2e8:	fb01 f202 	mul.w	r2, r1, r2
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d036      	beq.n	800a360 <f_lseek+0x43c>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d031      	beq.n	800a360 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7d1b      	ldrb	r3, [r3, #20]
 800a300:	b25b      	sxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	da18      	bge.n	800a338 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	7858      	ldrb	r0, [r3, #1]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1a      	ldr	r2, [r3, #32]
 800a314:	2301      	movs	r3, #1
 800a316:	f7fd f83d 	bl	8007394 <disk_write>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <f_lseek+0x406>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	755a      	strb	r2, [r3, #21]
 800a326:	2301      	movs	r3, #1
 800a328:	e01c      	b.n	800a364 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	7d1b      	ldrb	r3, [r3, #20]
 800a32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a332:	b2da      	uxtb	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	7858      	ldrb	r0, [r3, #1]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a342:	2301      	movs	r3, #1
 800a344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a346:	f7fd f805 	bl	8007354 <disk_read>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <f_lseek+0x436>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	755a      	strb	r2, [r3, #21]
 800a356:	2301      	movs	r3, #1
 800a358:	e004      	b.n	800a364 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a35e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a364:	4618      	mov	r0, r3
 800a366:	3740      	adds	r7, #64	; 0x40
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b092      	sub	sp, #72	; 0x48
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a378:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a37c:	f107 030c 	add.w	r3, r7, #12
 800a380:	2200      	movs	r2, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe fec4 	bl	8009110 <find_volume>
 800a388:	4603      	mov	r3, r0
 800a38a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a38e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a392:	2b00      	cmp	r3, #0
 800a394:	f040 8099 	bne.w	800a4ca <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	699a      	ldr	r2, [r3, #24]
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	3b02      	subs	r3, #2
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d804      	bhi.n	800a3b6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	699a      	ldr	r2, [r3, #24]
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	e089      	b.n	800a4ca <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d128      	bne.n	800a414 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a3ca:	f107 0314 	add.w	r3, r7, #20
 800a3ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fd fb8a 	bl	8007aea <get_fat>
 800a3d6:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3de:	d103      	bne.n	800a3e8 <f_getfree+0x7c>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a3e6:	e063      	b.n	800a4b0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d103      	bne.n	800a3f6 <f_getfree+0x8a>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a3f4:	e05c      	b.n	800a4b0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d102      	bne.n	800a402 <f_getfree+0x96>
 800a3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3fe:	3301      	adds	r3, #1
 800a400:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a404:	3301      	adds	r3, #1
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a40e:	429a      	cmp	r2, r3
 800a410:	d3db      	bcc.n	800a3ca <f_getfree+0x5e>
 800a412:	e04d      	b.n	800a4b0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	637b      	str	r3, [r7, #52]	; 0x34
 800a424:	2300      	movs	r3, #0
 800a426:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d113      	bne.n	800a456 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a42e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	63ba      	str	r2, [r7, #56]	; 0x38
 800a436:	4619      	mov	r1, r3
 800a438:	f7fd fa9a 	bl	8007970 <move_window>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a442:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a446:	2b00      	cmp	r3, #0
 800a448:	d131      	bne.n	800a4ae <f_getfree+0x142>
							p = fs->win;
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	3338      	adds	r3, #56	; 0x38
 800a44e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	899b      	ldrh	r3, [r3, #12]
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d10f      	bne.n	800a47e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a45e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a460:	f7fc ffd6 	bl	8007410 <ld_word>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d102      	bne.n	800a470 <f_getfree+0x104>
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	3301      	adds	r3, #1
 800a46e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	3302      	adds	r3, #2
 800a474:	633b      	str	r3, [r7, #48]	; 0x30
 800a476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a478:	3b02      	subs	r3, #2
 800a47a:	637b      	str	r3, [r7, #52]	; 0x34
 800a47c:	e010      	b.n	800a4a0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a47e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a480:	f7fc ffde 	bl	8007440 <ld_dword>
 800a484:	4603      	mov	r3, r0
 800a486:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <f_getfree+0x128>
 800a48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a490:	3301      	adds	r3, #1
 800a492:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	3304      	adds	r3, #4
 800a498:	633b      	str	r3, [r7, #48]	; 0x30
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	3b04      	subs	r3, #4
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1bd      	bne.n	800a428 <f_getfree+0xbc>
 800a4ac:	e000      	b.n	800a4b0 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a4ae:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4b4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4ba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	791a      	ldrb	r2, [r3, #4]
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	f042 0201 	orr.w	r2, r2, #1
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a4ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3748      	adds	r7, #72	; 0x48
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	2b0a      	cmp	r3, #10
 800a4e6:	d103      	bne.n	800a4f0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a4e8:	210d      	movs	r1, #13
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fff3 	bl	800a4d6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	db25      	blt.n	800a548 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	60fa      	str	r2, [r7, #12]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	4413      	add	r3, r2
 800a506:	78fa      	ldrb	r2, [r7, #3]
 800a508:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b3c      	cmp	r3, #60	; 0x3c
 800a50e:	dd12      	ble.n	800a536 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f103 010c 	add.w	r1, r3, #12
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	f107 0308 	add.w	r3, r7, #8
 800a520:	f7ff fac4 	bl	8009aac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d101      	bne.n	800a530 <putc_bfd+0x5a>
 800a52c:	2300      	movs	r3, #0
 800a52e:	e001      	b.n	800a534 <putc_bfd+0x5e>
 800a530:	f04f 33ff 	mov.w	r3, #4294967295
 800a534:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	609a      	str	r2, [r3, #8]
 800a546:	e000      	b.n	800a54a <putc_bfd+0x74>
	if (i < 0) return;
 800a548:	bf00      	nop
}
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	db16      	blt.n	800a58e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f103 010c 	add.w	r1, r3, #12
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	461a      	mov	r2, r3
 800a570:	f107 030c 	add.w	r3, r7, #12
 800a574:	f7ff fa9a 	bl	8009aac <f_write>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d107      	bne.n	800a58e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4293      	cmp	r3, r2
 800a586:	d102      	bne.n	800a58e <putc_flush+0x3e>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	e001      	b.n	800a592 <putc_flush+0x42>
	return EOF;
 800a58e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	605a      	str	r2, [r3, #4]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	609a      	str	r2, [r3, #8]
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b096      	sub	sp, #88	; 0x58
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a5ce:	f107 030c 	add.w	r3, r7, #12
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7ff ffe0 	bl	800a59a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a5da:	e009      	b.n	800a5f0 <f_puts+0x2c>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	607a      	str	r2, [r7, #4]
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	f107 030c 	add.w	r3, r7, #12
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff ff73 	bl	800a4d6 <putc_bfd>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1f1      	bne.n	800a5dc <f_puts+0x18>
	return putc_flush(&pb);
 800a5f8:	f107 030c 	add.w	r3, r7, #12
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff ffa7 	bl	800a550 <putc_flush>
 800a602:	4603      	mov	r3, r0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3758      	adds	r7, #88	; 0x58
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a61a:	2301      	movs	r3, #1
 800a61c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a622:	4b1f      	ldr	r3, [pc, #124]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a624:	7a5b      	ldrb	r3, [r3, #9]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d131      	bne.n	800a690 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a62c:	4b1c      	ldr	r3, [pc, #112]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a62e:	7a5b      	ldrb	r3, [r3, #9]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	461a      	mov	r2, r3
 800a634:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a636:	2100      	movs	r1, #0
 800a638:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a63a:	4b19      	ldr	r3, [pc, #100]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a63c:	7a5b      	ldrb	r3, [r3, #9]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	4a17      	ldr	r2, [pc, #92]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a64a:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a64c:	7a5b      	ldrb	r3, [r3, #9]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	461a      	mov	r2, r3
 800a652:	4b13      	ldr	r3, [pc, #76]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a654:	4413      	add	r3, r2
 800a656:	79fa      	ldrb	r2, [r7, #7]
 800a658:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a65a:	4b11      	ldr	r3, [pc, #68]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a65c:	7a5b      	ldrb	r3, [r3, #9]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	b2d1      	uxtb	r1, r2
 800a664:	4a0e      	ldr	r2, [pc, #56]	; (800a6a0 <FATFS_LinkDriverEx+0x94>)
 800a666:	7251      	strb	r1, [r2, #9]
 800a668:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a66a:	7dbb      	ldrb	r3, [r7, #22]
 800a66c:	3330      	adds	r3, #48	; 0x30
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	3301      	adds	r3, #1
 800a678:	223a      	movs	r2, #58	; 0x3a
 800a67a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3302      	adds	r3, #2
 800a680:	222f      	movs	r2, #47	; 0x2f
 800a682:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	3303      	adds	r3, #3
 800a688:	2200      	movs	r2, #0
 800a68a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a690:	7dfb      	ldrb	r3, [r7, #23]
}
 800a692:	4618      	mov	r0, r3
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	20002aac 	.word	0x20002aac

0800a6a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ffaa 	bl	800a60c <FATFS_LinkDriverEx>
 800a6b8:	4603      	mov	r3, r0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
	...

0800a6c4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	6039      	str	r1, [r7, #0]
 800a6ce:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
 800a6d2:	2b7f      	cmp	r3, #127	; 0x7f
 800a6d4:	d802      	bhi.n	800a6dc <ff_convert+0x18>
		c = chr;
 800a6d6:	88fb      	ldrh	r3, [r7, #6]
 800a6d8:	81fb      	strh	r3, [r7, #14]
 800a6da:	e025      	b.n	800a728 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a6e2:	88fb      	ldrh	r3, [r7, #6]
 800a6e4:	2bff      	cmp	r3, #255	; 0xff
 800a6e6:	d805      	bhi.n	800a6f4 <ff_convert+0x30>
 800a6e8:	88fb      	ldrh	r3, [r7, #6]
 800a6ea:	3b80      	subs	r3, #128	; 0x80
 800a6ec:	4a12      	ldr	r2, [pc, #72]	; (800a738 <ff_convert+0x74>)
 800a6ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6f2:	e000      	b.n	800a6f6 <ff_convert+0x32>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	81fb      	strh	r3, [r7, #14]
 800a6f8:	e016      	b.n	800a728 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	81fb      	strh	r3, [r7, #14]
 800a6fe:	e009      	b.n	800a714 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a700:	89fb      	ldrh	r3, [r7, #14]
 800a702:	4a0d      	ldr	r2, [pc, #52]	; (800a738 <ff_convert+0x74>)
 800a704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a708:	88fa      	ldrh	r2, [r7, #6]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d006      	beq.n	800a71c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a70e:	89fb      	ldrh	r3, [r7, #14]
 800a710:	3301      	adds	r3, #1
 800a712:	81fb      	strh	r3, [r7, #14]
 800a714:	89fb      	ldrh	r3, [r7, #14]
 800a716:	2b7f      	cmp	r3, #127	; 0x7f
 800a718:	d9f2      	bls.n	800a700 <ff_convert+0x3c>
 800a71a:	e000      	b.n	800a71e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a71c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a71e:	89fb      	ldrh	r3, [r7, #14]
 800a720:	3380      	adds	r3, #128	; 0x80
 800a722:	b29b      	uxth	r3, r3
 800a724:	b2db      	uxtb	r3, r3
 800a726:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a728:	89fb      	ldrh	r3, [r7, #14]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	0800d8c0 	.word	0x0800d8c0

0800a73c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a746:	88fb      	ldrh	r3, [r7, #6]
 800a748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a74c:	d201      	bcs.n	800a752 <ff_wtoupper+0x16>
 800a74e:	4b3e      	ldr	r3, [pc, #248]	; (800a848 <ff_wtoupper+0x10c>)
 800a750:	e000      	b.n	800a754 <ff_wtoupper+0x18>
 800a752:	4b3e      	ldr	r3, [pc, #248]	; (800a84c <ff_wtoupper+0x110>)
 800a754:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	1c9a      	adds	r2, r3, #2
 800a75a:	617a      	str	r2, [r7, #20]
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a760:	8a7b      	ldrh	r3, [r7, #18]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d068      	beq.n	800a838 <ff_wtoupper+0xfc>
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	8a7b      	ldrh	r3, [r7, #18]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d364      	bcc.n	800a838 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	1c9a      	adds	r2, r3, #2
 800a772:	617a      	str	r2, [r7, #20]
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	823b      	strh	r3, [r7, #16]
 800a778:	8a3b      	ldrh	r3, [r7, #16]
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	81fb      	strh	r3, [r7, #14]
 800a77e:	8a3b      	ldrh	r3, [r7, #16]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a784:	88fa      	ldrh	r2, [r7, #6]
 800a786:	8a79      	ldrh	r1, [r7, #18]
 800a788:	8a3b      	ldrh	r3, [r7, #16]
 800a78a:	440b      	add	r3, r1
 800a78c:	429a      	cmp	r2, r3
 800a78e:	da49      	bge.n	800a824 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a790:	89fb      	ldrh	r3, [r7, #14]
 800a792:	2b08      	cmp	r3, #8
 800a794:	d84f      	bhi.n	800a836 <ff_wtoupper+0xfa>
 800a796:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <ff_wtoupper+0x60>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7c1 	.word	0x0800a7c1
 800a7a0:	0800a7d3 	.word	0x0800a7d3
 800a7a4:	0800a7e9 	.word	0x0800a7e9
 800a7a8:	0800a7f1 	.word	0x0800a7f1
 800a7ac:	0800a7f9 	.word	0x0800a7f9
 800a7b0:	0800a801 	.word	0x0800a801
 800a7b4:	0800a809 	.word	0x0800a809
 800a7b8:	0800a811 	.word	0x0800a811
 800a7bc:	0800a819 	.word	0x0800a819
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a7c0:	88fa      	ldrh	r2, [r7, #6]
 800a7c2:	8a7b      	ldrh	r3, [r7, #18]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	80fb      	strh	r3, [r7, #6]
 800a7d0:	e027      	b.n	800a822 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a7d2:	88fa      	ldrh	r2, [r7, #6]
 800a7d4:	8a7b      	ldrh	r3, [r7, #18]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	88fa      	ldrh	r2, [r7, #6]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	80fb      	strh	r3, [r7, #6]
 800a7e6:	e01c      	b.n	800a822 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	3b10      	subs	r3, #16
 800a7ec:	80fb      	strh	r3, [r7, #6]
 800a7ee:	e018      	b.n	800a822 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a7f0:	88fb      	ldrh	r3, [r7, #6]
 800a7f2:	3b20      	subs	r3, #32
 800a7f4:	80fb      	strh	r3, [r7, #6]
 800a7f6:	e014      	b.n	800a822 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a7f8:	88fb      	ldrh	r3, [r7, #6]
 800a7fa:	3b30      	subs	r3, #48	; 0x30
 800a7fc:	80fb      	strh	r3, [r7, #6]
 800a7fe:	e010      	b.n	800a822 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a800:	88fb      	ldrh	r3, [r7, #6]
 800a802:	3b1a      	subs	r3, #26
 800a804:	80fb      	strh	r3, [r7, #6]
 800a806:	e00c      	b.n	800a822 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a808:	88fb      	ldrh	r3, [r7, #6]
 800a80a:	3308      	adds	r3, #8
 800a80c:	80fb      	strh	r3, [r7, #6]
 800a80e:	e008      	b.n	800a822 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a810:	88fb      	ldrh	r3, [r7, #6]
 800a812:	3b50      	subs	r3, #80	; 0x50
 800a814:	80fb      	strh	r3, [r7, #6]
 800a816:	e004      	b.n	800a822 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a818:	88fb      	ldrh	r3, [r7, #6]
 800a81a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a81e:	80fb      	strh	r3, [r7, #6]
 800a820:	bf00      	nop
			}
			break;
 800a822:	e008      	b.n	800a836 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a824:	89fb      	ldrh	r3, [r7, #14]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d195      	bne.n	800a756 <ff_wtoupper+0x1a>
 800a82a:	8a3b      	ldrh	r3, [r7, #16]
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	4413      	add	r3, r2
 800a832:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a834:	e78f      	b.n	800a756 <ff_wtoupper+0x1a>
			break;
 800a836:	bf00      	nop
	}

	return chr;
 800a838:	88fb      	ldrh	r3, [r7, #6]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	371c      	adds	r7, #28
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	0800d9c0 	.word	0x0800d9c0
 800a84c:	0800dbb4 	.word	0x0800dbb4

0800a850 <__errno>:
 800a850:	4b01      	ldr	r3, [pc, #4]	; (800a858 <__errno+0x8>)
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	20000024 	.word	0x20000024

0800a85c <__libc_init_array>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	4d0d      	ldr	r5, [pc, #52]	; (800a894 <__libc_init_array+0x38>)
 800a860:	4c0d      	ldr	r4, [pc, #52]	; (800a898 <__libc_init_array+0x3c>)
 800a862:	1b64      	subs	r4, r4, r5
 800a864:	10a4      	asrs	r4, r4, #2
 800a866:	2600      	movs	r6, #0
 800a868:	42a6      	cmp	r6, r4
 800a86a:	d109      	bne.n	800a880 <__libc_init_array+0x24>
 800a86c:	4d0b      	ldr	r5, [pc, #44]	; (800a89c <__libc_init_array+0x40>)
 800a86e:	4c0c      	ldr	r4, [pc, #48]	; (800a8a0 <__libc_init_array+0x44>)
 800a870:	f002 ff02 	bl	800d678 <_init>
 800a874:	1b64      	subs	r4, r4, r5
 800a876:	10a4      	asrs	r4, r4, #2
 800a878:	2600      	movs	r6, #0
 800a87a:	42a6      	cmp	r6, r4
 800a87c:	d105      	bne.n	800a88a <__libc_init_array+0x2e>
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	f855 3b04 	ldr.w	r3, [r5], #4
 800a884:	4798      	blx	r3
 800a886:	3601      	adds	r6, #1
 800a888:	e7ee      	b.n	800a868 <__libc_init_array+0xc>
 800a88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a88e:	4798      	blx	r3
 800a890:	3601      	adds	r6, #1
 800a892:	e7f2      	b.n	800a87a <__libc_init_array+0x1e>
 800a894:	0800e054 	.word	0x0800e054
 800a898:	0800e054 	.word	0x0800e054
 800a89c:	0800e054 	.word	0x0800e054
 800a8a0:	0800e058 	.word	0x0800e058

0800a8a4 <memset>:
 800a8a4:	4402      	add	r2, r0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d100      	bne.n	800a8ae <memset+0xa>
 800a8ac:	4770      	bx	lr
 800a8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a8b2:	e7f9      	b.n	800a8a8 <memset+0x4>

0800a8b4 <__cvt>:
 800a8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	ec55 4b10 	vmov	r4, r5, d0
 800a8bc:	2d00      	cmp	r5, #0
 800a8be:	460e      	mov	r6, r1
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	bfbb      	ittet	lt
 800a8c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8ca:	461d      	movlt	r5, r3
 800a8cc:	2300      	movge	r3, #0
 800a8ce:	232d      	movlt	r3, #45	; 0x2d
 800a8d0:	700b      	strb	r3, [r1, #0]
 800a8d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8d8:	4691      	mov	r9, r2
 800a8da:	f023 0820 	bic.w	r8, r3, #32
 800a8de:	bfbc      	itt	lt
 800a8e0:	4622      	movlt	r2, r4
 800a8e2:	4614      	movlt	r4, r2
 800a8e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8e8:	d005      	beq.n	800a8f6 <__cvt+0x42>
 800a8ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8ee:	d100      	bne.n	800a8f2 <__cvt+0x3e>
 800a8f0:	3601      	adds	r6, #1
 800a8f2:	2102      	movs	r1, #2
 800a8f4:	e000      	b.n	800a8f8 <__cvt+0x44>
 800a8f6:	2103      	movs	r1, #3
 800a8f8:	ab03      	add	r3, sp, #12
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	ab02      	add	r3, sp, #8
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	ec45 4b10 	vmov	d0, r4, r5
 800a904:	4653      	mov	r3, sl
 800a906:	4632      	mov	r2, r6
 800a908:	f000 fcea 	bl	800b2e0 <_dtoa_r>
 800a90c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a910:	4607      	mov	r7, r0
 800a912:	d102      	bne.n	800a91a <__cvt+0x66>
 800a914:	f019 0f01 	tst.w	r9, #1
 800a918:	d022      	beq.n	800a960 <__cvt+0xac>
 800a91a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a91e:	eb07 0906 	add.w	r9, r7, r6
 800a922:	d110      	bne.n	800a946 <__cvt+0x92>
 800a924:	783b      	ldrb	r3, [r7, #0]
 800a926:	2b30      	cmp	r3, #48	; 0x30
 800a928:	d10a      	bne.n	800a940 <__cvt+0x8c>
 800a92a:	2200      	movs	r2, #0
 800a92c:	2300      	movs	r3, #0
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f6 f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a936:	b918      	cbnz	r0, 800a940 <__cvt+0x8c>
 800a938:	f1c6 0601 	rsb	r6, r6, #1
 800a93c:	f8ca 6000 	str.w	r6, [sl]
 800a940:	f8da 3000 	ldr.w	r3, [sl]
 800a944:	4499      	add	r9, r3
 800a946:	2200      	movs	r2, #0
 800a948:	2300      	movs	r3, #0
 800a94a:	4620      	mov	r0, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	f7f6 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a952:	b108      	cbz	r0, 800a958 <__cvt+0xa4>
 800a954:	f8cd 900c 	str.w	r9, [sp, #12]
 800a958:	2230      	movs	r2, #48	; 0x30
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	454b      	cmp	r3, r9
 800a95e:	d307      	bcc.n	800a970 <__cvt+0xbc>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a964:	1bdb      	subs	r3, r3, r7
 800a966:	4638      	mov	r0, r7
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	b004      	add	sp, #16
 800a96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a970:	1c59      	adds	r1, r3, #1
 800a972:	9103      	str	r1, [sp, #12]
 800a974:	701a      	strb	r2, [r3, #0]
 800a976:	e7f0      	b.n	800a95a <__cvt+0xa6>

0800a978 <__exponent>:
 800a978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a97a:	4603      	mov	r3, r0
 800a97c:	2900      	cmp	r1, #0
 800a97e:	bfb8      	it	lt
 800a980:	4249      	neglt	r1, r1
 800a982:	f803 2b02 	strb.w	r2, [r3], #2
 800a986:	bfb4      	ite	lt
 800a988:	222d      	movlt	r2, #45	; 0x2d
 800a98a:	222b      	movge	r2, #43	; 0x2b
 800a98c:	2909      	cmp	r1, #9
 800a98e:	7042      	strb	r2, [r0, #1]
 800a990:	dd2a      	ble.n	800a9e8 <__exponent+0x70>
 800a992:	f10d 0407 	add.w	r4, sp, #7
 800a996:	46a4      	mov	ip, r4
 800a998:	270a      	movs	r7, #10
 800a99a:	46a6      	mov	lr, r4
 800a99c:	460a      	mov	r2, r1
 800a99e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a9a2:	fb07 1516 	mls	r5, r7, r6, r1
 800a9a6:	3530      	adds	r5, #48	; 0x30
 800a9a8:	2a63      	cmp	r2, #99	; 0x63
 800a9aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	dcf1      	bgt.n	800a99a <__exponent+0x22>
 800a9b6:	3130      	adds	r1, #48	; 0x30
 800a9b8:	f1ae 0502 	sub.w	r5, lr, #2
 800a9bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9c0:	1c44      	adds	r4, r0, #1
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4561      	cmp	r1, ip
 800a9c6:	d30a      	bcc.n	800a9de <__exponent+0x66>
 800a9c8:	f10d 0209 	add.w	r2, sp, #9
 800a9cc:	eba2 020e 	sub.w	r2, r2, lr
 800a9d0:	4565      	cmp	r5, ip
 800a9d2:	bf88      	it	hi
 800a9d4:	2200      	movhi	r2, #0
 800a9d6:	4413      	add	r3, r2
 800a9d8:	1a18      	subs	r0, r3, r0
 800a9da:	b003      	add	sp, #12
 800a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9e6:	e7ed      	b.n	800a9c4 <__exponent+0x4c>
 800a9e8:	2330      	movs	r3, #48	; 0x30
 800a9ea:	3130      	adds	r1, #48	; 0x30
 800a9ec:	7083      	strb	r3, [r0, #2]
 800a9ee:	70c1      	strb	r1, [r0, #3]
 800a9f0:	1d03      	adds	r3, r0, #4
 800a9f2:	e7f1      	b.n	800a9d8 <__exponent+0x60>

0800a9f4 <_printf_float>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	ed2d 8b02 	vpush	{d8}
 800a9fc:	b08d      	sub	sp, #52	; 0x34
 800a9fe:	460c      	mov	r4, r1
 800aa00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa04:	4616      	mov	r6, r2
 800aa06:	461f      	mov	r7, r3
 800aa08:	4605      	mov	r5, r0
 800aa0a:	f001 fa57 	bl	800bebc <_localeconv_r>
 800aa0e:	f8d0 a000 	ldr.w	sl, [r0]
 800aa12:	4650      	mov	r0, sl
 800aa14:	f7f5 fbdc 	bl	80001d0 <strlen>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	9305      	str	r3, [sp, #20]
 800aa20:	f8d8 3000 	ldr.w	r3, [r8]
 800aa24:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa28:	3307      	adds	r3, #7
 800aa2a:	f023 0307 	bic.w	r3, r3, #7
 800aa2e:	f103 0208 	add.w	r2, r3, #8
 800aa32:	f8c8 2000 	str.w	r2, [r8]
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa4c:	ee08 0a10 	vmov	s16, r0
 800aa50:	4b9f      	ldr	r3, [pc, #636]	; (800acd0 <_printf_float+0x2dc>)
 800aa52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5a:	f7f6 f867 	bl	8000b2c <__aeabi_dcmpun>
 800aa5e:	bb88      	cbnz	r0, 800aac4 <_printf_float+0xd0>
 800aa60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa64:	4b9a      	ldr	r3, [pc, #616]	; (800acd0 <_printf_float+0x2dc>)
 800aa66:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6a:	f7f6 f841 	bl	8000af0 <__aeabi_dcmple>
 800aa6e:	bb48      	cbnz	r0, 800aac4 <_printf_float+0xd0>
 800aa70:	2200      	movs	r2, #0
 800aa72:	2300      	movs	r3, #0
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	f7f6 f830 	bl	8000adc <__aeabi_dcmplt>
 800aa7c:	b110      	cbz	r0, 800aa84 <_printf_float+0x90>
 800aa7e:	232d      	movs	r3, #45	; 0x2d
 800aa80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa84:	4b93      	ldr	r3, [pc, #588]	; (800acd4 <_printf_float+0x2e0>)
 800aa86:	4894      	ldr	r0, [pc, #592]	; (800acd8 <_printf_float+0x2e4>)
 800aa88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa8c:	bf94      	ite	ls
 800aa8e:	4698      	movls	r8, r3
 800aa90:	4680      	movhi	r8, r0
 800aa92:	2303      	movs	r3, #3
 800aa94:	6123      	str	r3, [r4, #16]
 800aa96:	9b05      	ldr	r3, [sp, #20]
 800aa98:	f023 0204 	bic.w	r2, r3, #4
 800aa9c:	6022      	str	r2, [r4, #0]
 800aa9e:	f04f 0900 	mov.w	r9, #0
 800aaa2:	9700      	str	r7, [sp, #0]
 800aaa4:	4633      	mov	r3, r6
 800aaa6:	aa0b      	add	r2, sp, #44	; 0x2c
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f000 f9d8 	bl	800ae60 <_printf_common>
 800aab0:	3001      	adds	r0, #1
 800aab2:	f040 8090 	bne.w	800abd6 <_printf_float+0x1e2>
 800aab6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaba:	b00d      	add	sp, #52	; 0x34
 800aabc:	ecbd 8b02 	vpop	{d8}
 800aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	4640      	mov	r0, r8
 800aaca:	4649      	mov	r1, r9
 800aacc:	f7f6 f82e 	bl	8000b2c <__aeabi_dcmpun>
 800aad0:	b140      	cbz	r0, 800aae4 <_printf_float+0xf0>
 800aad2:	464b      	mov	r3, r9
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfbc      	itt	lt
 800aad8:	232d      	movlt	r3, #45	; 0x2d
 800aada:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aade:	487f      	ldr	r0, [pc, #508]	; (800acdc <_printf_float+0x2e8>)
 800aae0:	4b7f      	ldr	r3, [pc, #508]	; (800ace0 <_printf_float+0x2ec>)
 800aae2:	e7d1      	b.n	800aa88 <_printf_float+0x94>
 800aae4:	6863      	ldr	r3, [r4, #4]
 800aae6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aaea:	9206      	str	r2, [sp, #24]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	d13f      	bne.n	800ab70 <_printf_float+0x17c>
 800aaf0:	2306      	movs	r3, #6
 800aaf2:	6063      	str	r3, [r4, #4]
 800aaf4:	9b05      	ldr	r3, [sp, #20]
 800aaf6:	6861      	ldr	r1, [r4, #4]
 800aaf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aafc:	2300      	movs	r3, #0
 800aafe:	9303      	str	r3, [sp, #12]
 800ab00:	ab0a      	add	r3, sp, #40	; 0x28
 800ab02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab06:	ab09      	add	r3, sp, #36	; 0x24
 800ab08:	ec49 8b10 	vmov	d0, r8, r9
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	6022      	str	r2, [r4, #0]
 800ab10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab14:	4628      	mov	r0, r5
 800ab16:	f7ff fecd 	bl	800a8b4 <__cvt>
 800ab1a:	9b06      	ldr	r3, [sp, #24]
 800ab1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab1e:	2b47      	cmp	r3, #71	; 0x47
 800ab20:	4680      	mov	r8, r0
 800ab22:	d108      	bne.n	800ab36 <_printf_float+0x142>
 800ab24:	1cc8      	adds	r0, r1, #3
 800ab26:	db02      	blt.n	800ab2e <_printf_float+0x13a>
 800ab28:	6863      	ldr	r3, [r4, #4]
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	dd41      	ble.n	800abb2 <_printf_float+0x1be>
 800ab2e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab32:	fa5f fb8b 	uxtb.w	fp, fp
 800ab36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab3a:	d820      	bhi.n	800ab7e <_printf_float+0x18a>
 800ab3c:	3901      	subs	r1, #1
 800ab3e:	465a      	mov	r2, fp
 800ab40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab44:	9109      	str	r1, [sp, #36]	; 0x24
 800ab46:	f7ff ff17 	bl	800a978 <__exponent>
 800ab4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab4c:	1813      	adds	r3, r2, r0
 800ab4e:	2a01      	cmp	r2, #1
 800ab50:	4681      	mov	r9, r0
 800ab52:	6123      	str	r3, [r4, #16]
 800ab54:	dc02      	bgt.n	800ab5c <_printf_float+0x168>
 800ab56:	6822      	ldr	r2, [r4, #0]
 800ab58:	07d2      	lsls	r2, r2, #31
 800ab5a:	d501      	bpl.n	800ab60 <_printf_float+0x16c>
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	6123      	str	r3, [r4, #16]
 800ab60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d09c      	beq.n	800aaa2 <_printf_float+0xae>
 800ab68:	232d      	movs	r3, #45	; 0x2d
 800ab6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab6e:	e798      	b.n	800aaa2 <_printf_float+0xae>
 800ab70:	9a06      	ldr	r2, [sp, #24]
 800ab72:	2a47      	cmp	r2, #71	; 0x47
 800ab74:	d1be      	bne.n	800aaf4 <_printf_float+0x100>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1bc      	bne.n	800aaf4 <_printf_float+0x100>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e7b9      	b.n	800aaf2 <_printf_float+0xfe>
 800ab7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab82:	d118      	bne.n	800abb6 <_printf_float+0x1c2>
 800ab84:	2900      	cmp	r1, #0
 800ab86:	6863      	ldr	r3, [r4, #4]
 800ab88:	dd0b      	ble.n	800aba2 <_printf_float+0x1ae>
 800ab8a:	6121      	str	r1, [r4, #16]
 800ab8c:	b913      	cbnz	r3, 800ab94 <_printf_float+0x1a0>
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	07d0      	lsls	r0, r2, #31
 800ab92:	d502      	bpl.n	800ab9a <_printf_float+0x1a6>
 800ab94:	3301      	adds	r3, #1
 800ab96:	440b      	add	r3, r1
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab9c:	f04f 0900 	mov.w	r9, #0
 800aba0:	e7de      	b.n	800ab60 <_printf_float+0x16c>
 800aba2:	b913      	cbnz	r3, 800abaa <_printf_float+0x1b6>
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	07d2      	lsls	r2, r2, #31
 800aba8:	d501      	bpl.n	800abae <_printf_float+0x1ba>
 800abaa:	3302      	adds	r3, #2
 800abac:	e7f4      	b.n	800ab98 <_printf_float+0x1a4>
 800abae:	2301      	movs	r3, #1
 800abb0:	e7f2      	b.n	800ab98 <_printf_float+0x1a4>
 800abb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb8:	4299      	cmp	r1, r3
 800abba:	db05      	blt.n	800abc8 <_printf_float+0x1d4>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	6121      	str	r1, [r4, #16]
 800abc0:	07d8      	lsls	r0, r3, #31
 800abc2:	d5ea      	bpl.n	800ab9a <_printf_float+0x1a6>
 800abc4:	1c4b      	adds	r3, r1, #1
 800abc6:	e7e7      	b.n	800ab98 <_printf_float+0x1a4>
 800abc8:	2900      	cmp	r1, #0
 800abca:	bfd4      	ite	le
 800abcc:	f1c1 0202 	rsble	r2, r1, #2
 800abd0:	2201      	movgt	r2, #1
 800abd2:	4413      	add	r3, r2
 800abd4:	e7e0      	b.n	800ab98 <_printf_float+0x1a4>
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	055a      	lsls	r2, r3, #21
 800abda:	d407      	bmi.n	800abec <_printf_float+0x1f8>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	4642      	mov	r2, r8
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	d12c      	bne.n	800ac44 <_printf_float+0x250>
 800abea:	e764      	b.n	800aab6 <_printf_float+0xc2>
 800abec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abf0:	f240 80e0 	bls.w	800adb4 <_printf_float+0x3c0>
 800abf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abf8:	2200      	movs	r2, #0
 800abfa:	2300      	movs	r3, #0
 800abfc:	f7f5 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d034      	beq.n	800ac6e <_printf_float+0x27a>
 800ac04:	4a37      	ldr	r2, [pc, #220]	; (800ace4 <_printf_float+0x2f0>)
 800ac06:	2301      	movs	r3, #1
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	47b8      	blx	r7
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f43f af51 	beq.w	800aab6 <_printf_float+0xc2>
 800ac14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	db02      	blt.n	800ac22 <_printf_float+0x22e>
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	07d8      	lsls	r0, r3, #31
 800ac20:	d510      	bpl.n	800ac44 <_printf_float+0x250>
 800ac22:	ee18 3a10 	vmov	r3, s16
 800ac26:	4652      	mov	r2, sl
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	f43f af41 	beq.w	800aab6 <_printf_float+0xc2>
 800ac34:	f04f 0800 	mov.w	r8, #0
 800ac38:	f104 091a 	add.w	r9, r4, #26
 800ac3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	4543      	cmp	r3, r8
 800ac42:	dc09      	bgt.n	800ac58 <_printf_float+0x264>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	079b      	lsls	r3, r3, #30
 800ac48:	f100 8105 	bmi.w	800ae56 <_printf_float+0x462>
 800ac4c:	68e0      	ldr	r0, [r4, #12]
 800ac4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac50:	4298      	cmp	r0, r3
 800ac52:	bfb8      	it	lt
 800ac54:	4618      	movlt	r0, r3
 800ac56:	e730      	b.n	800aaba <_printf_float+0xc6>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	464a      	mov	r2, r9
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	f43f af27 	beq.w	800aab6 <_printf_float+0xc2>
 800ac68:	f108 0801 	add.w	r8, r8, #1
 800ac6c:	e7e6      	b.n	800ac3c <_printf_float+0x248>
 800ac6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	dc39      	bgt.n	800ace8 <_printf_float+0x2f4>
 800ac74:	4a1b      	ldr	r2, [pc, #108]	; (800ace4 <_printf_float+0x2f0>)
 800ac76:	2301      	movs	r3, #1
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	47b8      	blx	r7
 800ac7e:	3001      	adds	r0, #1
 800ac80:	f43f af19 	beq.w	800aab6 <_printf_float+0xc2>
 800ac84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	d102      	bne.n	800ac92 <_printf_float+0x29e>
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	07d9      	lsls	r1, r3, #31
 800ac90:	d5d8      	bpl.n	800ac44 <_printf_float+0x250>
 800ac92:	ee18 3a10 	vmov	r3, s16
 800ac96:	4652      	mov	r2, sl
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f43f af09 	beq.w	800aab6 <_printf_float+0xc2>
 800aca4:	f04f 0900 	mov.w	r9, #0
 800aca8:	f104 0a1a 	add.w	sl, r4, #26
 800acac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acae:	425b      	negs	r3, r3
 800acb0:	454b      	cmp	r3, r9
 800acb2:	dc01      	bgt.n	800acb8 <_printf_float+0x2c4>
 800acb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb6:	e792      	b.n	800abde <_printf_float+0x1ea>
 800acb8:	2301      	movs	r3, #1
 800acba:	4652      	mov	r2, sl
 800acbc:	4631      	mov	r1, r6
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b8      	blx	r7
 800acc2:	3001      	adds	r0, #1
 800acc4:	f43f aef7 	beq.w	800aab6 <_printf_float+0xc2>
 800acc8:	f109 0901 	add.w	r9, r9, #1
 800accc:	e7ee      	b.n	800acac <_printf_float+0x2b8>
 800acce:	bf00      	nop
 800acd0:	7fefffff 	.word	0x7fefffff
 800acd4:	0800dc74 	.word	0x0800dc74
 800acd8:	0800dc78 	.word	0x0800dc78
 800acdc:	0800dc80 	.word	0x0800dc80
 800ace0:	0800dc7c 	.word	0x0800dc7c
 800ace4:	0800dc84 	.word	0x0800dc84
 800ace8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acec:	429a      	cmp	r2, r3
 800acee:	bfa8      	it	ge
 800acf0:	461a      	movge	r2, r3
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	4691      	mov	r9, r2
 800acf6:	dc37      	bgt.n	800ad68 <_printf_float+0x374>
 800acf8:	f04f 0b00 	mov.w	fp, #0
 800acfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad00:	f104 021a 	add.w	r2, r4, #26
 800ad04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad06:	9305      	str	r3, [sp, #20]
 800ad08:	eba3 0309 	sub.w	r3, r3, r9
 800ad0c:	455b      	cmp	r3, fp
 800ad0e:	dc33      	bgt.n	800ad78 <_printf_float+0x384>
 800ad10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad14:	429a      	cmp	r2, r3
 800ad16:	db3b      	blt.n	800ad90 <_printf_float+0x39c>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	07da      	lsls	r2, r3, #31
 800ad1c:	d438      	bmi.n	800ad90 <_printf_float+0x39c>
 800ad1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad20:	9a05      	ldr	r2, [sp, #20]
 800ad22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad24:	1a9a      	subs	r2, r3, r2
 800ad26:	eba3 0901 	sub.w	r9, r3, r1
 800ad2a:	4591      	cmp	r9, r2
 800ad2c:	bfa8      	it	ge
 800ad2e:	4691      	movge	r9, r2
 800ad30:	f1b9 0f00 	cmp.w	r9, #0
 800ad34:	dc35      	bgt.n	800ada2 <_printf_float+0x3ae>
 800ad36:	f04f 0800 	mov.w	r8, #0
 800ad3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad3e:	f104 0a1a 	add.w	sl, r4, #26
 800ad42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad46:	1a9b      	subs	r3, r3, r2
 800ad48:	eba3 0309 	sub.w	r3, r3, r9
 800ad4c:	4543      	cmp	r3, r8
 800ad4e:	f77f af79 	ble.w	800ac44 <_printf_float+0x250>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4652      	mov	r2, sl
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	f43f aeaa 	beq.w	800aab6 <_printf_float+0xc2>
 800ad62:	f108 0801 	add.w	r8, r8, #1
 800ad66:	e7ec      	b.n	800ad42 <_printf_float+0x34e>
 800ad68:	4613      	mov	r3, r2
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4642      	mov	r2, r8
 800ad6e:	4628      	mov	r0, r5
 800ad70:	47b8      	blx	r7
 800ad72:	3001      	adds	r0, #1
 800ad74:	d1c0      	bne.n	800acf8 <_printf_float+0x304>
 800ad76:	e69e      	b.n	800aab6 <_printf_float+0xc2>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	9205      	str	r2, [sp, #20]
 800ad80:	47b8      	blx	r7
 800ad82:	3001      	adds	r0, #1
 800ad84:	f43f ae97 	beq.w	800aab6 <_printf_float+0xc2>
 800ad88:	9a05      	ldr	r2, [sp, #20]
 800ad8a:	f10b 0b01 	add.w	fp, fp, #1
 800ad8e:	e7b9      	b.n	800ad04 <_printf_float+0x310>
 800ad90:	ee18 3a10 	vmov	r3, s16
 800ad94:	4652      	mov	r2, sl
 800ad96:	4631      	mov	r1, r6
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b8      	blx	r7
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	d1be      	bne.n	800ad1e <_printf_float+0x32a>
 800ada0:	e689      	b.n	800aab6 <_printf_float+0xc2>
 800ada2:	9a05      	ldr	r2, [sp, #20]
 800ada4:	464b      	mov	r3, r9
 800ada6:	4442      	add	r2, r8
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	47b8      	blx	r7
 800adae:	3001      	adds	r0, #1
 800adb0:	d1c1      	bne.n	800ad36 <_printf_float+0x342>
 800adb2:	e680      	b.n	800aab6 <_printf_float+0xc2>
 800adb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adb6:	2a01      	cmp	r2, #1
 800adb8:	dc01      	bgt.n	800adbe <_printf_float+0x3ca>
 800adba:	07db      	lsls	r3, r3, #31
 800adbc:	d538      	bpl.n	800ae30 <_printf_float+0x43c>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4642      	mov	r2, r8
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	f43f ae74 	beq.w	800aab6 <_printf_float+0xc2>
 800adce:	ee18 3a10 	vmov	r3, s16
 800add2:	4652      	mov	r2, sl
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f ae6b 	beq.w	800aab6 <_printf_float+0xc2>
 800ade0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ade4:	2200      	movs	r2, #0
 800ade6:	2300      	movs	r3, #0
 800ade8:	f7f5 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800adec:	b9d8      	cbnz	r0, 800ae26 <_printf_float+0x432>
 800adee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf0:	f108 0201 	add.w	r2, r8, #1
 800adf4:	3b01      	subs	r3, #1
 800adf6:	4631      	mov	r1, r6
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b8      	blx	r7
 800adfc:	3001      	adds	r0, #1
 800adfe:	d10e      	bne.n	800ae1e <_printf_float+0x42a>
 800ae00:	e659      	b.n	800aab6 <_printf_float+0xc2>
 800ae02:	2301      	movs	r3, #1
 800ae04:	4652      	mov	r2, sl
 800ae06:	4631      	mov	r1, r6
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47b8      	blx	r7
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	f43f ae52 	beq.w	800aab6 <_printf_float+0xc2>
 800ae12:	f108 0801 	add.w	r8, r8, #1
 800ae16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	4543      	cmp	r3, r8
 800ae1c:	dcf1      	bgt.n	800ae02 <_printf_float+0x40e>
 800ae1e:	464b      	mov	r3, r9
 800ae20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae24:	e6dc      	b.n	800abe0 <_printf_float+0x1ec>
 800ae26:	f04f 0800 	mov.w	r8, #0
 800ae2a:	f104 0a1a 	add.w	sl, r4, #26
 800ae2e:	e7f2      	b.n	800ae16 <_printf_float+0x422>
 800ae30:	2301      	movs	r3, #1
 800ae32:	4642      	mov	r2, r8
 800ae34:	e7df      	b.n	800adf6 <_printf_float+0x402>
 800ae36:	2301      	movs	r3, #1
 800ae38:	464a      	mov	r2, r9
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	47b8      	blx	r7
 800ae40:	3001      	adds	r0, #1
 800ae42:	f43f ae38 	beq.w	800aab6 <_printf_float+0xc2>
 800ae46:	f108 0801 	add.w	r8, r8, #1
 800ae4a:	68e3      	ldr	r3, [r4, #12]
 800ae4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae4e:	1a5b      	subs	r3, r3, r1
 800ae50:	4543      	cmp	r3, r8
 800ae52:	dcf0      	bgt.n	800ae36 <_printf_float+0x442>
 800ae54:	e6fa      	b.n	800ac4c <_printf_float+0x258>
 800ae56:	f04f 0800 	mov.w	r8, #0
 800ae5a:	f104 0919 	add.w	r9, r4, #25
 800ae5e:	e7f4      	b.n	800ae4a <_printf_float+0x456>

0800ae60 <_printf_common>:
 800ae60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae64:	4616      	mov	r6, r2
 800ae66:	4699      	mov	r9, r3
 800ae68:	688a      	ldr	r2, [r1, #8]
 800ae6a:	690b      	ldr	r3, [r1, #16]
 800ae6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	bfb8      	it	lt
 800ae74:	4613      	movlt	r3, r2
 800ae76:	6033      	str	r3, [r6, #0]
 800ae78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	460c      	mov	r4, r1
 800ae80:	b10a      	cbz	r2, 800ae86 <_printf_common+0x26>
 800ae82:	3301      	adds	r3, #1
 800ae84:	6033      	str	r3, [r6, #0]
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	0699      	lsls	r1, r3, #26
 800ae8a:	bf42      	ittt	mi
 800ae8c:	6833      	ldrmi	r3, [r6, #0]
 800ae8e:	3302      	addmi	r3, #2
 800ae90:	6033      	strmi	r3, [r6, #0]
 800ae92:	6825      	ldr	r5, [r4, #0]
 800ae94:	f015 0506 	ands.w	r5, r5, #6
 800ae98:	d106      	bne.n	800aea8 <_printf_common+0x48>
 800ae9a:	f104 0a19 	add.w	sl, r4, #25
 800ae9e:	68e3      	ldr	r3, [r4, #12]
 800aea0:	6832      	ldr	r2, [r6, #0]
 800aea2:	1a9b      	subs	r3, r3, r2
 800aea4:	42ab      	cmp	r3, r5
 800aea6:	dc26      	bgt.n	800aef6 <_printf_common+0x96>
 800aea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aeac:	1e13      	subs	r3, r2, #0
 800aeae:	6822      	ldr	r2, [r4, #0]
 800aeb0:	bf18      	it	ne
 800aeb2:	2301      	movne	r3, #1
 800aeb4:	0692      	lsls	r2, r2, #26
 800aeb6:	d42b      	bmi.n	800af10 <_printf_common+0xb0>
 800aeb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aebc:	4649      	mov	r1, r9
 800aebe:	4638      	mov	r0, r7
 800aec0:	47c0      	blx	r8
 800aec2:	3001      	adds	r0, #1
 800aec4:	d01e      	beq.n	800af04 <_printf_common+0xa4>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	68e5      	ldr	r5, [r4, #12]
 800aeca:	6832      	ldr	r2, [r6, #0]
 800aecc:	f003 0306 	and.w	r3, r3, #6
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	bf08      	it	eq
 800aed4:	1aad      	subeq	r5, r5, r2
 800aed6:	68a3      	ldr	r3, [r4, #8]
 800aed8:	6922      	ldr	r2, [r4, #16]
 800aeda:	bf0c      	ite	eq
 800aedc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aee0:	2500      	movne	r5, #0
 800aee2:	4293      	cmp	r3, r2
 800aee4:	bfc4      	itt	gt
 800aee6:	1a9b      	subgt	r3, r3, r2
 800aee8:	18ed      	addgt	r5, r5, r3
 800aeea:	2600      	movs	r6, #0
 800aeec:	341a      	adds	r4, #26
 800aeee:	42b5      	cmp	r5, r6
 800aef0:	d11a      	bne.n	800af28 <_printf_common+0xc8>
 800aef2:	2000      	movs	r0, #0
 800aef4:	e008      	b.n	800af08 <_printf_common+0xa8>
 800aef6:	2301      	movs	r3, #1
 800aef8:	4652      	mov	r2, sl
 800aefa:	4649      	mov	r1, r9
 800aefc:	4638      	mov	r0, r7
 800aefe:	47c0      	blx	r8
 800af00:	3001      	adds	r0, #1
 800af02:	d103      	bne.n	800af0c <_printf_common+0xac>
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0c:	3501      	adds	r5, #1
 800af0e:	e7c6      	b.n	800ae9e <_printf_common+0x3e>
 800af10:	18e1      	adds	r1, r4, r3
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	2030      	movs	r0, #48	; 0x30
 800af16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af1a:	4422      	add	r2, r4
 800af1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af24:	3302      	adds	r3, #2
 800af26:	e7c7      	b.n	800aeb8 <_printf_common+0x58>
 800af28:	2301      	movs	r3, #1
 800af2a:	4622      	mov	r2, r4
 800af2c:	4649      	mov	r1, r9
 800af2e:	4638      	mov	r0, r7
 800af30:	47c0      	blx	r8
 800af32:	3001      	adds	r0, #1
 800af34:	d0e6      	beq.n	800af04 <_printf_common+0xa4>
 800af36:	3601      	adds	r6, #1
 800af38:	e7d9      	b.n	800aeee <_printf_common+0x8e>
	...

0800af3c <_printf_i>:
 800af3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af40:	7e0f      	ldrb	r7, [r1, #24]
 800af42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af44:	2f78      	cmp	r7, #120	; 0x78
 800af46:	4691      	mov	r9, r2
 800af48:	4680      	mov	r8, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	469a      	mov	sl, r3
 800af4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af52:	d807      	bhi.n	800af64 <_printf_i+0x28>
 800af54:	2f62      	cmp	r7, #98	; 0x62
 800af56:	d80a      	bhi.n	800af6e <_printf_i+0x32>
 800af58:	2f00      	cmp	r7, #0
 800af5a:	f000 80d8 	beq.w	800b10e <_printf_i+0x1d2>
 800af5e:	2f58      	cmp	r7, #88	; 0x58
 800af60:	f000 80a3 	beq.w	800b0aa <_printf_i+0x16e>
 800af64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af6c:	e03a      	b.n	800afe4 <_printf_i+0xa8>
 800af6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af72:	2b15      	cmp	r3, #21
 800af74:	d8f6      	bhi.n	800af64 <_printf_i+0x28>
 800af76:	a101      	add	r1, pc, #4	; (adr r1, 800af7c <_printf_i+0x40>)
 800af78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af7c:	0800afd5 	.word	0x0800afd5
 800af80:	0800afe9 	.word	0x0800afe9
 800af84:	0800af65 	.word	0x0800af65
 800af88:	0800af65 	.word	0x0800af65
 800af8c:	0800af65 	.word	0x0800af65
 800af90:	0800af65 	.word	0x0800af65
 800af94:	0800afe9 	.word	0x0800afe9
 800af98:	0800af65 	.word	0x0800af65
 800af9c:	0800af65 	.word	0x0800af65
 800afa0:	0800af65 	.word	0x0800af65
 800afa4:	0800af65 	.word	0x0800af65
 800afa8:	0800b0f5 	.word	0x0800b0f5
 800afac:	0800b019 	.word	0x0800b019
 800afb0:	0800b0d7 	.word	0x0800b0d7
 800afb4:	0800af65 	.word	0x0800af65
 800afb8:	0800af65 	.word	0x0800af65
 800afbc:	0800b117 	.word	0x0800b117
 800afc0:	0800af65 	.word	0x0800af65
 800afc4:	0800b019 	.word	0x0800b019
 800afc8:	0800af65 	.word	0x0800af65
 800afcc:	0800af65 	.word	0x0800af65
 800afd0:	0800b0df 	.word	0x0800b0df
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	1d1a      	adds	r2, r3, #4
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	602a      	str	r2, [r5, #0]
 800afdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afe4:	2301      	movs	r3, #1
 800afe6:	e0a3      	b.n	800b130 <_printf_i+0x1f4>
 800afe8:	6820      	ldr	r0, [r4, #0]
 800afea:	6829      	ldr	r1, [r5, #0]
 800afec:	0606      	lsls	r6, r0, #24
 800afee:	f101 0304 	add.w	r3, r1, #4
 800aff2:	d50a      	bpl.n	800b00a <_printf_i+0xce>
 800aff4:	680e      	ldr	r6, [r1, #0]
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	2e00      	cmp	r6, #0
 800affa:	da03      	bge.n	800b004 <_printf_i+0xc8>
 800affc:	232d      	movs	r3, #45	; 0x2d
 800affe:	4276      	negs	r6, r6
 800b000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b004:	485e      	ldr	r0, [pc, #376]	; (800b180 <_printf_i+0x244>)
 800b006:	230a      	movs	r3, #10
 800b008:	e019      	b.n	800b03e <_printf_i+0x102>
 800b00a:	680e      	ldr	r6, [r1, #0]
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b012:	bf18      	it	ne
 800b014:	b236      	sxthne	r6, r6
 800b016:	e7ef      	b.n	800aff8 <_printf_i+0xbc>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	6820      	ldr	r0, [r4, #0]
 800b01c:	1d19      	adds	r1, r3, #4
 800b01e:	6029      	str	r1, [r5, #0]
 800b020:	0601      	lsls	r1, r0, #24
 800b022:	d501      	bpl.n	800b028 <_printf_i+0xec>
 800b024:	681e      	ldr	r6, [r3, #0]
 800b026:	e002      	b.n	800b02e <_printf_i+0xf2>
 800b028:	0646      	lsls	r6, r0, #25
 800b02a:	d5fb      	bpl.n	800b024 <_printf_i+0xe8>
 800b02c:	881e      	ldrh	r6, [r3, #0]
 800b02e:	4854      	ldr	r0, [pc, #336]	; (800b180 <_printf_i+0x244>)
 800b030:	2f6f      	cmp	r7, #111	; 0x6f
 800b032:	bf0c      	ite	eq
 800b034:	2308      	moveq	r3, #8
 800b036:	230a      	movne	r3, #10
 800b038:	2100      	movs	r1, #0
 800b03a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b03e:	6865      	ldr	r5, [r4, #4]
 800b040:	60a5      	str	r5, [r4, #8]
 800b042:	2d00      	cmp	r5, #0
 800b044:	bfa2      	ittt	ge
 800b046:	6821      	ldrge	r1, [r4, #0]
 800b048:	f021 0104 	bicge.w	r1, r1, #4
 800b04c:	6021      	strge	r1, [r4, #0]
 800b04e:	b90e      	cbnz	r6, 800b054 <_printf_i+0x118>
 800b050:	2d00      	cmp	r5, #0
 800b052:	d04d      	beq.n	800b0f0 <_printf_i+0x1b4>
 800b054:	4615      	mov	r5, r2
 800b056:	fbb6 f1f3 	udiv	r1, r6, r3
 800b05a:	fb03 6711 	mls	r7, r3, r1, r6
 800b05e:	5dc7      	ldrb	r7, [r0, r7]
 800b060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b064:	4637      	mov	r7, r6
 800b066:	42bb      	cmp	r3, r7
 800b068:	460e      	mov	r6, r1
 800b06a:	d9f4      	bls.n	800b056 <_printf_i+0x11a>
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	d10b      	bne.n	800b088 <_printf_i+0x14c>
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	07de      	lsls	r6, r3, #31
 800b074:	d508      	bpl.n	800b088 <_printf_i+0x14c>
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	6861      	ldr	r1, [r4, #4]
 800b07a:	4299      	cmp	r1, r3
 800b07c:	bfde      	ittt	le
 800b07e:	2330      	movle	r3, #48	; 0x30
 800b080:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b084:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b088:	1b52      	subs	r2, r2, r5
 800b08a:	6122      	str	r2, [r4, #16]
 800b08c:	f8cd a000 	str.w	sl, [sp]
 800b090:	464b      	mov	r3, r9
 800b092:	aa03      	add	r2, sp, #12
 800b094:	4621      	mov	r1, r4
 800b096:	4640      	mov	r0, r8
 800b098:	f7ff fee2 	bl	800ae60 <_printf_common>
 800b09c:	3001      	adds	r0, #1
 800b09e:	d14c      	bne.n	800b13a <_printf_i+0x1fe>
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	b004      	add	sp, #16
 800b0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0aa:	4835      	ldr	r0, [pc, #212]	; (800b180 <_printf_i+0x244>)
 800b0ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0b0:	6829      	ldr	r1, [r5, #0]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0b8:	6029      	str	r1, [r5, #0]
 800b0ba:	061d      	lsls	r5, r3, #24
 800b0bc:	d514      	bpl.n	800b0e8 <_printf_i+0x1ac>
 800b0be:	07df      	lsls	r7, r3, #31
 800b0c0:	bf44      	itt	mi
 800b0c2:	f043 0320 	orrmi.w	r3, r3, #32
 800b0c6:	6023      	strmi	r3, [r4, #0]
 800b0c8:	b91e      	cbnz	r6, 800b0d2 <_printf_i+0x196>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	f023 0320 	bic.w	r3, r3, #32
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	2310      	movs	r3, #16
 800b0d4:	e7b0      	b.n	800b038 <_printf_i+0xfc>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	f043 0320 	orr.w	r3, r3, #32
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	2378      	movs	r3, #120	; 0x78
 800b0e0:	4828      	ldr	r0, [pc, #160]	; (800b184 <_printf_i+0x248>)
 800b0e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0e6:	e7e3      	b.n	800b0b0 <_printf_i+0x174>
 800b0e8:	0659      	lsls	r1, r3, #25
 800b0ea:	bf48      	it	mi
 800b0ec:	b2b6      	uxthmi	r6, r6
 800b0ee:	e7e6      	b.n	800b0be <_printf_i+0x182>
 800b0f0:	4615      	mov	r5, r2
 800b0f2:	e7bb      	b.n	800b06c <_printf_i+0x130>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	6826      	ldr	r6, [r4, #0]
 800b0f8:	6961      	ldr	r1, [r4, #20]
 800b0fa:	1d18      	adds	r0, r3, #4
 800b0fc:	6028      	str	r0, [r5, #0]
 800b0fe:	0635      	lsls	r5, r6, #24
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	d501      	bpl.n	800b108 <_printf_i+0x1cc>
 800b104:	6019      	str	r1, [r3, #0]
 800b106:	e002      	b.n	800b10e <_printf_i+0x1d2>
 800b108:	0670      	lsls	r0, r6, #25
 800b10a:	d5fb      	bpl.n	800b104 <_printf_i+0x1c8>
 800b10c:	8019      	strh	r1, [r3, #0]
 800b10e:	2300      	movs	r3, #0
 800b110:	6123      	str	r3, [r4, #16]
 800b112:	4615      	mov	r5, r2
 800b114:	e7ba      	b.n	800b08c <_printf_i+0x150>
 800b116:	682b      	ldr	r3, [r5, #0]
 800b118:	1d1a      	adds	r2, r3, #4
 800b11a:	602a      	str	r2, [r5, #0]
 800b11c:	681d      	ldr	r5, [r3, #0]
 800b11e:	6862      	ldr	r2, [r4, #4]
 800b120:	2100      	movs	r1, #0
 800b122:	4628      	mov	r0, r5
 800b124:	f7f5 f85c 	bl	80001e0 <memchr>
 800b128:	b108      	cbz	r0, 800b12e <_printf_i+0x1f2>
 800b12a:	1b40      	subs	r0, r0, r5
 800b12c:	6060      	str	r0, [r4, #4]
 800b12e:	6863      	ldr	r3, [r4, #4]
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	2300      	movs	r3, #0
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b138:	e7a8      	b.n	800b08c <_printf_i+0x150>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	462a      	mov	r2, r5
 800b13e:	4649      	mov	r1, r9
 800b140:	4640      	mov	r0, r8
 800b142:	47d0      	blx	sl
 800b144:	3001      	adds	r0, #1
 800b146:	d0ab      	beq.n	800b0a0 <_printf_i+0x164>
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	079b      	lsls	r3, r3, #30
 800b14c:	d413      	bmi.n	800b176 <_printf_i+0x23a>
 800b14e:	68e0      	ldr	r0, [r4, #12]
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	4298      	cmp	r0, r3
 800b154:	bfb8      	it	lt
 800b156:	4618      	movlt	r0, r3
 800b158:	e7a4      	b.n	800b0a4 <_printf_i+0x168>
 800b15a:	2301      	movs	r3, #1
 800b15c:	4632      	mov	r2, r6
 800b15e:	4649      	mov	r1, r9
 800b160:	4640      	mov	r0, r8
 800b162:	47d0      	blx	sl
 800b164:	3001      	adds	r0, #1
 800b166:	d09b      	beq.n	800b0a0 <_printf_i+0x164>
 800b168:	3501      	adds	r5, #1
 800b16a:	68e3      	ldr	r3, [r4, #12]
 800b16c:	9903      	ldr	r1, [sp, #12]
 800b16e:	1a5b      	subs	r3, r3, r1
 800b170:	42ab      	cmp	r3, r5
 800b172:	dcf2      	bgt.n	800b15a <_printf_i+0x21e>
 800b174:	e7eb      	b.n	800b14e <_printf_i+0x212>
 800b176:	2500      	movs	r5, #0
 800b178:	f104 0619 	add.w	r6, r4, #25
 800b17c:	e7f5      	b.n	800b16a <_printf_i+0x22e>
 800b17e:	bf00      	nop
 800b180:	0800dc86 	.word	0x0800dc86
 800b184:	0800dc97 	.word	0x0800dc97

0800b188 <siprintf>:
 800b188:	b40e      	push	{r1, r2, r3}
 800b18a:	b500      	push	{lr}
 800b18c:	b09c      	sub	sp, #112	; 0x70
 800b18e:	ab1d      	add	r3, sp, #116	; 0x74
 800b190:	9002      	str	r0, [sp, #8]
 800b192:	9006      	str	r0, [sp, #24]
 800b194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b198:	4809      	ldr	r0, [pc, #36]	; (800b1c0 <siprintf+0x38>)
 800b19a:	9107      	str	r1, [sp, #28]
 800b19c:	9104      	str	r1, [sp, #16]
 800b19e:	4909      	ldr	r1, [pc, #36]	; (800b1c4 <siprintf+0x3c>)
 800b1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a4:	9105      	str	r1, [sp, #20]
 800b1a6:	6800      	ldr	r0, [r0, #0]
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	a902      	add	r1, sp, #8
 800b1ac:	f001 fb76 	bl	800c89c <_svfiprintf_r>
 800b1b0:	9b02      	ldr	r3, [sp, #8]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	b01c      	add	sp, #112	; 0x70
 800b1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1bc:	b003      	add	sp, #12
 800b1be:	4770      	bx	lr
 800b1c0:	20000024 	.word	0x20000024
 800b1c4:	ffff0208 	.word	0xffff0208

0800b1c8 <quorem>:
 800b1c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	6903      	ldr	r3, [r0, #16]
 800b1ce:	690c      	ldr	r4, [r1, #16]
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	f2c0 8081 	blt.w	800b2da <quorem+0x112>
 800b1d8:	3c01      	subs	r4, #1
 800b1da:	f101 0814 	add.w	r8, r1, #20
 800b1de:	f100 0514 	add.w	r5, r0, #20
 800b1e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1e6:	9301      	str	r3, [sp, #4]
 800b1e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b1f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b200:	d331      	bcc.n	800b266 <quorem+0x9e>
 800b202:	f04f 0e00 	mov.w	lr, #0
 800b206:	4640      	mov	r0, r8
 800b208:	46ac      	mov	ip, r5
 800b20a:	46f2      	mov	sl, lr
 800b20c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b210:	b293      	uxth	r3, r2
 800b212:	fb06 e303 	mla	r3, r6, r3, lr
 800b216:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	ebaa 0303 	sub.w	r3, sl, r3
 800b220:	f8dc a000 	ldr.w	sl, [ip]
 800b224:	0c12      	lsrs	r2, r2, #16
 800b226:	fa13 f38a 	uxtah	r3, r3, sl
 800b22a:	fb06 e202 	mla	r2, r6, r2, lr
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b236:	b292      	uxth	r2, r2
 800b238:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b23c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b240:	f8bd 3000 	ldrh.w	r3, [sp]
 800b244:	4581      	cmp	r9, r0
 800b246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b24a:	f84c 3b04 	str.w	r3, [ip], #4
 800b24e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b252:	d2db      	bcs.n	800b20c <quorem+0x44>
 800b254:	f855 300b 	ldr.w	r3, [r5, fp]
 800b258:	b92b      	cbnz	r3, 800b266 <quorem+0x9e>
 800b25a:	9b01      	ldr	r3, [sp, #4]
 800b25c:	3b04      	subs	r3, #4
 800b25e:	429d      	cmp	r5, r3
 800b260:	461a      	mov	r2, r3
 800b262:	d32e      	bcc.n	800b2c2 <quorem+0xfa>
 800b264:	613c      	str	r4, [r7, #16]
 800b266:	4638      	mov	r0, r7
 800b268:	f001 f8c4 	bl	800c3f4 <__mcmp>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	db24      	blt.n	800b2ba <quorem+0xf2>
 800b270:	3601      	adds	r6, #1
 800b272:	4628      	mov	r0, r5
 800b274:	f04f 0c00 	mov.w	ip, #0
 800b278:	f858 2b04 	ldr.w	r2, [r8], #4
 800b27c:	f8d0 e000 	ldr.w	lr, [r0]
 800b280:	b293      	uxth	r3, r2
 800b282:	ebac 0303 	sub.w	r3, ip, r3
 800b286:	0c12      	lsrs	r2, r2, #16
 800b288:	fa13 f38e 	uxtah	r3, r3, lr
 800b28c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b294:	b29b      	uxth	r3, r3
 800b296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b29a:	45c1      	cmp	r9, r8
 800b29c:	f840 3b04 	str.w	r3, [r0], #4
 800b2a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2a4:	d2e8      	bcs.n	800b278 <quorem+0xb0>
 800b2a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2ae:	b922      	cbnz	r2, 800b2ba <quorem+0xf2>
 800b2b0:	3b04      	subs	r3, #4
 800b2b2:	429d      	cmp	r5, r3
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	d30a      	bcc.n	800b2ce <quorem+0x106>
 800b2b8:	613c      	str	r4, [r7, #16]
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	b003      	add	sp, #12
 800b2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c2:	6812      	ldr	r2, [r2, #0]
 800b2c4:	3b04      	subs	r3, #4
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	d1cc      	bne.n	800b264 <quorem+0x9c>
 800b2ca:	3c01      	subs	r4, #1
 800b2cc:	e7c7      	b.n	800b25e <quorem+0x96>
 800b2ce:	6812      	ldr	r2, [r2, #0]
 800b2d0:	3b04      	subs	r3, #4
 800b2d2:	2a00      	cmp	r2, #0
 800b2d4:	d1f0      	bne.n	800b2b8 <quorem+0xf0>
 800b2d6:	3c01      	subs	r4, #1
 800b2d8:	e7eb      	b.n	800b2b2 <quorem+0xea>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e7ee      	b.n	800b2bc <quorem+0xf4>
	...

0800b2e0 <_dtoa_r>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	ed2d 8b04 	vpush	{d8-d9}
 800b2e8:	ec57 6b10 	vmov	r6, r7, d0
 800b2ec:	b093      	sub	sp, #76	; 0x4c
 800b2ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b2f4:	9106      	str	r1, [sp, #24]
 800b2f6:	ee10 aa10 	vmov	sl, s0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2fe:	930c      	str	r3, [sp, #48]	; 0x30
 800b300:	46bb      	mov	fp, r7
 800b302:	b975      	cbnz	r5, 800b322 <_dtoa_r+0x42>
 800b304:	2010      	movs	r0, #16
 800b306:	f000 fddd 	bl	800bec4 <malloc>
 800b30a:	4602      	mov	r2, r0
 800b30c:	6260      	str	r0, [r4, #36]	; 0x24
 800b30e:	b920      	cbnz	r0, 800b31a <_dtoa_r+0x3a>
 800b310:	4ba7      	ldr	r3, [pc, #668]	; (800b5b0 <_dtoa_r+0x2d0>)
 800b312:	21ea      	movs	r1, #234	; 0xea
 800b314:	48a7      	ldr	r0, [pc, #668]	; (800b5b4 <_dtoa_r+0x2d4>)
 800b316:	f001 fbd1 	bl	800cabc <__assert_func>
 800b31a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b31e:	6005      	str	r5, [r0, #0]
 800b320:	60c5      	str	r5, [r0, #12]
 800b322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b324:	6819      	ldr	r1, [r3, #0]
 800b326:	b151      	cbz	r1, 800b33e <_dtoa_r+0x5e>
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	604a      	str	r2, [r1, #4]
 800b32c:	2301      	movs	r3, #1
 800b32e:	4093      	lsls	r3, r2
 800b330:	608b      	str	r3, [r1, #8]
 800b332:	4620      	mov	r0, r4
 800b334:	f000 fe1c 	bl	800bf70 <_Bfree>
 800b338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	1e3b      	subs	r3, r7, #0
 800b340:	bfaa      	itet	ge
 800b342:	2300      	movge	r3, #0
 800b344:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b348:	f8c8 3000 	strge.w	r3, [r8]
 800b34c:	4b9a      	ldr	r3, [pc, #616]	; (800b5b8 <_dtoa_r+0x2d8>)
 800b34e:	bfbc      	itt	lt
 800b350:	2201      	movlt	r2, #1
 800b352:	f8c8 2000 	strlt.w	r2, [r8]
 800b356:	ea33 030b 	bics.w	r3, r3, fp
 800b35a:	d11b      	bne.n	800b394 <_dtoa_r+0xb4>
 800b35c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b35e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b368:	4333      	orrs	r3, r6
 800b36a:	f000 8592 	beq.w	800be92 <_dtoa_r+0xbb2>
 800b36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b370:	b963      	cbnz	r3, 800b38c <_dtoa_r+0xac>
 800b372:	4b92      	ldr	r3, [pc, #584]	; (800b5bc <_dtoa_r+0x2dc>)
 800b374:	e022      	b.n	800b3bc <_dtoa_r+0xdc>
 800b376:	4b92      	ldr	r3, [pc, #584]	; (800b5c0 <_dtoa_r+0x2e0>)
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	3308      	adds	r3, #8
 800b37c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	9801      	ldr	r0, [sp, #4]
 800b382:	b013      	add	sp, #76	; 0x4c
 800b384:	ecbd 8b04 	vpop	{d8-d9}
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38c:	4b8b      	ldr	r3, [pc, #556]	; (800b5bc <_dtoa_r+0x2dc>)
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	3303      	adds	r3, #3
 800b392:	e7f3      	b.n	800b37c <_dtoa_r+0x9c>
 800b394:	2200      	movs	r2, #0
 800b396:	2300      	movs	r3, #0
 800b398:	4650      	mov	r0, sl
 800b39a:	4659      	mov	r1, fp
 800b39c:	f7f5 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a0:	ec4b ab19 	vmov	d9, sl, fp
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	b158      	cbz	r0, 800b3c0 <_dtoa_r+0xe0>
 800b3a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 856b 	beq.w	800be8c <_dtoa_r+0xbac>
 800b3b6:	4883      	ldr	r0, [pc, #524]	; (800b5c4 <_dtoa_r+0x2e4>)
 800b3b8:	6018      	str	r0, [r3, #0]
 800b3ba:	1e43      	subs	r3, r0, #1
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	e7df      	b.n	800b380 <_dtoa_r+0xa0>
 800b3c0:	ec4b ab10 	vmov	d0, sl, fp
 800b3c4:	aa10      	add	r2, sp, #64	; 0x40
 800b3c6:	a911      	add	r1, sp, #68	; 0x44
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f001 f8b9 	bl	800c540 <__d2b>
 800b3ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b3d2:	ee08 0a10 	vmov	s16, r0
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	f000 8084 	beq.w	800b4e4 <_dtoa_r+0x204>
 800b3dc:	ee19 3a90 	vmov	r3, s19
 800b3e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b3e8:	4656      	mov	r6, sl
 800b3ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b3ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b3f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b3f6:	4b74      	ldr	r3, [pc, #464]	; (800b5c8 <_dtoa_r+0x2e8>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	f7f4 ff43 	bl	8000288 <__aeabi_dsub>
 800b402:	a365      	add	r3, pc, #404	; (adr r3, 800b598 <_dtoa_r+0x2b8>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	f7f5 f8f6 	bl	80005f8 <__aeabi_dmul>
 800b40c:	a364      	add	r3, pc, #400	; (adr r3, 800b5a0 <_dtoa_r+0x2c0>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 ff3b 	bl	800028c <__adddf3>
 800b416:	4606      	mov	r6, r0
 800b418:	4628      	mov	r0, r5
 800b41a:	460f      	mov	r7, r1
 800b41c:	f7f5 f882 	bl	8000524 <__aeabi_i2d>
 800b420:	a361      	add	r3, pc, #388	; (adr r3, 800b5a8 <_dtoa_r+0x2c8>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7f5 f8e7 	bl	80005f8 <__aeabi_dmul>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4630      	mov	r0, r6
 800b430:	4639      	mov	r1, r7
 800b432:	f7f4 ff2b 	bl	800028c <__adddf3>
 800b436:	4606      	mov	r6, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	f7f5 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800b43e:	2200      	movs	r2, #0
 800b440:	9000      	str	r0, [sp, #0]
 800b442:	2300      	movs	r3, #0
 800b444:	4630      	mov	r0, r6
 800b446:	4639      	mov	r1, r7
 800b448:	f7f5 fb48 	bl	8000adc <__aeabi_dcmplt>
 800b44c:	b150      	cbz	r0, 800b464 <_dtoa_r+0x184>
 800b44e:	9800      	ldr	r0, [sp, #0]
 800b450:	f7f5 f868 	bl	8000524 <__aeabi_i2d>
 800b454:	4632      	mov	r2, r6
 800b456:	463b      	mov	r3, r7
 800b458:	f7f5 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800b45c:	b910      	cbnz	r0, 800b464 <_dtoa_r+0x184>
 800b45e:	9b00      	ldr	r3, [sp, #0]
 800b460:	3b01      	subs	r3, #1
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	9b00      	ldr	r3, [sp, #0]
 800b466:	2b16      	cmp	r3, #22
 800b468:	d85a      	bhi.n	800b520 <_dtoa_r+0x240>
 800b46a:	9a00      	ldr	r2, [sp, #0]
 800b46c:	4b57      	ldr	r3, [pc, #348]	; (800b5cc <_dtoa_r+0x2ec>)
 800b46e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	ec51 0b19 	vmov	r0, r1, d9
 800b47a:	f7f5 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d050      	beq.n	800b524 <_dtoa_r+0x244>
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	3b01      	subs	r3, #1
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	2300      	movs	r3, #0
 800b48a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b48e:	1b5d      	subs	r5, r3, r5
 800b490:	1e6b      	subs	r3, r5, #1
 800b492:	9305      	str	r3, [sp, #20]
 800b494:	bf45      	ittet	mi
 800b496:	f1c5 0301 	rsbmi	r3, r5, #1
 800b49a:	9304      	strmi	r3, [sp, #16]
 800b49c:	2300      	movpl	r3, #0
 800b49e:	2300      	movmi	r3, #0
 800b4a0:	bf4c      	ite	mi
 800b4a2:	9305      	strmi	r3, [sp, #20]
 800b4a4:	9304      	strpl	r3, [sp, #16]
 800b4a6:	9b00      	ldr	r3, [sp, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	db3d      	blt.n	800b528 <_dtoa_r+0x248>
 800b4ac:	9b05      	ldr	r3, [sp, #20]
 800b4ae:	9a00      	ldr	r2, [sp, #0]
 800b4b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b4b2:	4413      	add	r3, r2
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9307      	str	r3, [sp, #28]
 800b4ba:	9b06      	ldr	r3, [sp, #24]
 800b4bc:	2b09      	cmp	r3, #9
 800b4be:	f200 8089 	bhi.w	800b5d4 <_dtoa_r+0x2f4>
 800b4c2:	2b05      	cmp	r3, #5
 800b4c4:	bfc4      	itt	gt
 800b4c6:	3b04      	subgt	r3, #4
 800b4c8:	9306      	strgt	r3, [sp, #24]
 800b4ca:	9b06      	ldr	r3, [sp, #24]
 800b4cc:	f1a3 0302 	sub.w	r3, r3, #2
 800b4d0:	bfcc      	ite	gt
 800b4d2:	2500      	movgt	r5, #0
 800b4d4:	2501      	movle	r5, #1
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	f200 8087 	bhi.w	800b5ea <_dtoa_r+0x30a>
 800b4dc:	e8df f003 	tbb	[pc, r3]
 800b4e0:	59383a2d 	.word	0x59383a2d
 800b4e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b4e8:	441d      	add	r5, r3
 800b4ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	bfc1      	itttt	gt
 800b4f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b4f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b4fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800b4fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b502:	bfda      	itte	le
 800b504:	f1c3 0320 	rsble	r3, r3, #32
 800b508:	fa06 f003 	lslle.w	r0, r6, r3
 800b50c:	4318      	orrgt	r0, r3
 800b50e:	f7f4 fff9 	bl	8000504 <__aeabi_ui2d>
 800b512:	2301      	movs	r3, #1
 800b514:	4606      	mov	r6, r0
 800b516:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b51a:	3d01      	subs	r5, #1
 800b51c:	930e      	str	r3, [sp, #56]	; 0x38
 800b51e:	e76a      	b.n	800b3f6 <_dtoa_r+0x116>
 800b520:	2301      	movs	r3, #1
 800b522:	e7b2      	b.n	800b48a <_dtoa_r+0x1aa>
 800b524:	900b      	str	r0, [sp, #44]	; 0x2c
 800b526:	e7b1      	b.n	800b48c <_dtoa_r+0x1ac>
 800b528:	9b04      	ldr	r3, [sp, #16]
 800b52a:	9a00      	ldr	r2, [sp, #0]
 800b52c:	1a9b      	subs	r3, r3, r2
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	4253      	negs	r3, r2
 800b532:	9307      	str	r3, [sp, #28]
 800b534:	2300      	movs	r3, #0
 800b536:	930a      	str	r3, [sp, #40]	; 0x28
 800b538:	e7bf      	b.n	800b4ba <_dtoa_r+0x1da>
 800b53a:	2300      	movs	r3, #0
 800b53c:	9308      	str	r3, [sp, #32]
 800b53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b540:	2b00      	cmp	r3, #0
 800b542:	dc55      	bgt.n	800b5f0 <_dtoa_r+0x310>
 800b544:	2301      	movs	r3, #1
 800b546:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b54a:	461a      	mov	r2, r3
 800b54c:	9209      	str	r2, [sp, #36]	; 0x24
 800b54e:	e00c      	b.n	800b56a <_dtoa_r+0x28a>
 800b550:	2301      	movs	r3, #1
 800b552:	e7f3      	b.n	800b53c <_dtoa_r+0x25c>
 800b554:	2300      	movs	r3, #0
 800b556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b558:	9308      	str	r3, [sp, #32]
 800b55a:	9b00      	ldr	r3, [sp, #0]
 800b55c:	4413      	add	r3, r2
 800b55e:	9302      	str	r3, [sp, #8]
 800b560:	3301      	adds	r3, #1
 800b562:	2b01      	cmp	r3, #1
 800b564:	9303      	str	r3, [sp, #12]
 800b566:	bfb8      	it	lt
 800b568:	2301      	movlt	r3, #1
 800b56a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b56c:	2200      	movs	r2, #0
 800b56e:	6042      	str	r2, [r0, #4]
 800b570:	2204      	movs	r2, #4
 800b572:	f102 0614 	add.w	r6, r2, #20
 800b576:	429e      	cmp	r6, r3
 800b578:	6841      	ldr	r1, [r0, #4]
 800b57a:	d93d      	bls.n	800b5f8 <_dtoa_r+0x318>
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fcb7 	bl	800bef0 <_Balloc>
 800b582:	9001      	str	r0, [sp, #4]
 800b584:	2800      	cmp	r0, #0
 800b586:	d13b      	bne.n	800b600 <_dtoa_r+0x320>
 800b588:	4b11      	ldr	r3, [pc, #68]	; (800b5d0 <_dtoa_r+0x2f0>)
 800b58a:	4602      	mov	r2, r0
 800b58c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b590:	e6c0      	b.n	800b314 <_dtoa_r+0x34>
 800b592:	2301      	movs	r3, #1
 800b594:	e7df      	b.n	800b556 <_dtoa_r+0x276>
 800b596:	bf00      	nop
 800b598:	636f4361 	.word	0x636f4361
 800b59c:	3fd287a7 	.word	0x3fd287a7
 800b5a0:	8b60c8b3 	.word	0x8b60c8b3
 800b5a4:	3fc68a28 	.word	0x3fc68a28
 800b5a8:	509f79fb 	.word	0x509f79fb
 800b5ac:	3fd34413 	.word	0x3fd34413
 800b5b0:	0800dcb5 	.word	0x0800dcb5
 800b5b4:	0800dccc 	.word	0x0800dccc
 800b5b8:	7ff00000 	.word	0x7ff00000
 800b5bc:	0800dcb1 	.word	0x0800dcb1
 800b5c0:	0800dca8 	.word	0x0800dca8
 800b5c4:	0800dc85 	.word	0x0800dc85
 800b5c8:	3ff80000 	.word	0x3ff80000
 800b5cc:	0800ddc0 	.word	0x0800ddc0
 800b5d0:	0800dd27 	.word	0x0800dd27
 800b5d4:	2501      	movs	r5, #1
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	9306      	str	r3, [sp, #24]
 800b5da:	9508      	str	r5, [sp, #32]
 800b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2312      	movs	r3, #18
 800b5e8:	e7b0      	b.n	800b54c <_dtoa_r+0x26c>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	9308      	str	r3, [sp, #32]
 800b5ee:	e7f5      	b.n	800b5dc <_dtoa_r+0x2fc>
 800b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5f6:	e7b8      	b.n	800b56a <_dtoa_r+0x28a>
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	6041      	str	r1, [r0, #4]
 800b5fc:	0052      	lsls	r2, r2, #1
 800b5fe:	e7b8      	b.n	800b572 <_dtoa_r+0x292>
 800b600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b602:	9a01      	ldr	r2, [sp, #4]
 800b604:	601a      	str	r2, [r3, #0]
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	2b0e      	cmp	r3, #14
 800b60a:	f200 809d 	bhi.w	800b748 <_dtoa_r+0x468>
 800b60e:	2d00      	cmp	r5, #0
 800b610:	f000 809a 	beq.w	800b748 <_dtoa_r+0x468>
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	dd32      	ble.n	800b680 <_dtoa_r+0x3a0>
 800b61a:	4ab7      	ldr	r2, [pc, #732]	; (800b8f8 <_dtoa_r+0x618>)
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b624:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b628:	9b00      	ldr	r3, [sp, #0]
 800b62a:	05d8      	lsls	r0, r3, #23
 800b62c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b630:	d516      	bpl.n	800b660 <_dtoa_r+0x380>
 800b632:	4bb2      	ldr	r3, [pc, #712]	; (800b8fc <_dtoa_r+0x61c>)
 800b634:	ec51 0b19 	vmov	r0, r1, d9
 800b638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b63c:	f7f5 f906 	bl	800084c <__aeabi_ddiv>
 800b640:	f007 070f 	and.w	r7, r7, #15
 800b644:	4682      	mov	sl, r0
 800b646:	468b      	mov	fp, r1
 800b648:	2503      	movs	r5, #3
 800b64a:	4eac      	ldr	r6, [pc, #688]	; (800b8fc <_dtoa_r+0x61c>)
 800b64c:	b957      	cbnz	r7, 800b664 <_dtoa_r+0x384>
 800b64e:	4642      	mov	r2, r8
 800b650:	464b      	mov	r3, r9
 800b652:	4650      	mov	r0, sl
 800b654:	4659      	mov	r1, fp
 800b656:	f7f5 f8f9 	bl	800084c <__aeabi_ddiv>
 800b65a:	4682      	mov	sl, r0
 800b65c:	468b      	mov	fp, r1
 800b65e:	e028      	b.n	800b6b2 <_dtoa_r+0x3d2>
 800b660:	2502      	movs	r5, #2
 800b662:	e7f2      	b.n	800b64a <_dtoa_r+0x36a>
 800b664:	07f9      	lsls	r1, r7, #31
 800b666:	d508      	bpl.n	800b67a <_dtoa_r+0x39a>
 800b668:	4640      	mov	r0, r8
 800b66a:	4649      	mov	r1, r9
 800b66c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b670:	f7f4 ffc2 	bl	80005f8 <__aeabi_dmul>
 800b674:	3501      	adds	r5, #1
 800b676:	4680      	mov	r8, r0
 800b678:	4689      	mov	r9, r1
 800b67a:	107f      	asrs	r7, r7, #1
 800b67c:	3608      	adds	r6, #8
 800b67e:	e7e5      	b.n	800b64c <_dtoa_r+0x36c>
 800b680:	f000 809b 	beq.w	800b7ba <_dtoa_r+0x4da>
 800b684:	9b00      	ldr	r3, [sp, #0]
 800b686:	4f9d      	ldr	r7, [pc, #628]	; (800b8fc <_dtoa_r+0x61c>)
 800b688:	425e      	negs	r6, r3
 800b68a:	4b9b      	ldr	r3, [pc, #620]	; (800b8f8 <_dtoa_r+0x618>)
 800b68c:	f006 020f 	and.w	r2, r6, #15
 800b690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	ec51 0b19 	vmov	r0, r1, d9
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	1136      	asrs	r6, r6, #4
 800b6a2:	4682      	mov	sl, r0
 800b6a4:	468b      	mov	fp, r1
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2502      	movs	r5, #2
 800b6aa:	2e00      	cmp	r6, #0
 800b6ac:	d17a      	bne.n	800b7a4 <_dtoa_r+0x4c4>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1d3      	bne.n	800b65a <_dtoa_r+0x37a>
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 8082 	beq.w	800b7be <_dtoa_r+0x4de>
 800b6ba:	4b91      	ldr	r3, [pc, #580]	; (800b900 <_dtoa_r+0x620>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	4650      	mov	r0, sl
 800b6c0:	4659      	mov	r1, fp
 800b6c2:	f7f5 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d079      	beq.n	800b7be <_dtoa_r+0x4de>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d076      	beq.n	800b7be <_dtoa_r+0x4de>
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	dd36      	ble.n	800b744 <_dtoa_r+0x464>
 800b6d6:	9b00      	ldr	r3, [sp, #0]
 800b6d8:	4650      	mov	r0, sl
 800b6da:	4659      	mov	r1, fp
 800b6dc:	1e5f      	subs	r7, r3, #1
 800b6de:	2200      	movs	r2, #0
 800b6e0:	4b88      	ldr	r3, [pc, #544]	; (800b904 <_dtoa_r+0x624>)
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	9e02      	ldr	r6, [sp, #8]
 800b6e8:	4682      	mov	sl, r0
 800b6ea:	468b      	mov	fp, r1
 800b6ec:	3501      	adds	r5, #1
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f7f4 ff18 	bl	8000524 <__aeabi_i2d>
 800b6f4:	4652      	mov	r2, sl
 800b6f6:	465b      	mov	r3, fp
 800b6f8:	f7f4 ff7e 	bl	80005f8 <__aeabi_dmul>
 800b6fc:	4b82      	ldr	r3, [pc, #520]	; (800b908 <_dtoa_r+0x628>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	f7f4 fdc4 	bl	800028c <__adddf3>
 800b704:	46d0      	mov	r8, sl
 800b706:	46d9      	mov	r9, fp
 800b708:	4682      	mov	sl, r0
 800b70a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b70e:	2e00      	cmp	r6, #0
 800b710:	d158      	bne.n	800b7c4 <_dtoa_r+0x4e4>
 800b712:	4b7e      	ldr	r3, [pc, #504]	; (800b90c <_dtoa_r+0x62c>)
 800b714:	2200      	movs	r2, #0
 800b716:	4640      	mov	r0, r8
 800b718:	4649      	mov	r1, r9
 800b71a:	f7f4 fdb5 	bl	8000288 <__aeabi_dsub>
 800b71e:	4652      	mov	r2, sl
 800b720:	465b      	mov	r3, fp
 800b722:	4680      	mov	r8, r0
 800b724:	4689      	mov	r9, r1
 800b726:	f7f5 f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f040 8295 	bne.w	800bc5a <_dtoa_r+0x97a>
 800b730:	4652      	mov	r2, sl
 800b732:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b736:	4640      	mov	r0, r8
 800b738:	4649      	mov	r1, r9
 800b73a:	f7f5 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f040 8289 	bne.w	800bc56 <_dtoa_r+0x976>
 800b744:	ec5b ab19 	vmov	sl, fp, d9
 800b748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f2c0 8148 	blt.w	800b9e0 <_dtoa_r+0x700>
 800b750:	9a00      	ldr	r2, [sp, #0]
 800b752:	2a0e      	cmp	r2, #14
 800b754:	f300 8144 	bgt.w	800b9e0 <_dtoa_r+0x700>
 800b758:	4b67      	ldr	r3, [pc, #412]	; (800b8f8 <_dtoa_r+0x618>)
 800b75a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b75e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b764:	2b00      	cmp	r3, #0
 800b766:	f280 80d5 	bge.w	800b914 <_dtoa_r+0x634>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f300 80d1 	bgt.w	800b914 <_dtoa_r+0x634>
 800b772:	f040 826f 	bne.w	800bc54 <_dtoa_r+0x974>
 800b776:	4b65      	ldr	r3, [pc, #404]	; (800b90c <_dtoa_r+0x62c>)
 800b778:	2200      	movs	r2, #0
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	f7f4 ff3b 	bl	80005f8 <__aeabi_dmul>
 800b782:	4652      	mov	r2, sl
 800b784:	465b      	mov	r3, fp
 800b786:	f7f5 f9bd 	bl	8000b04 <__aeabi_dcmpge>
 800b78a:	9e03      	ldr	r6, [sp, #12]
 800b78c:	4637      	mov	r7, r6
 800b78e:	2800      	cmp	r0, #0
 800b790:	f040 8245 	bne.w	800bc1e <_dtoa_r+0x93e>
 800b794:	9d01      	ldr	r5, [sp, #4]
 800b796:	2331      	movs	r3, #49	; 0x31
 800b798:	f805 3b01 	strb.w	r3, [r5], #1
 800b79c:	9b00      	ldr	r3, [sp, #0]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	e240      	b.n	800bc26 <_dtoa_r+0x946>
 800b7a4:	07f2      	lsls	r2, r6, #31
 800b7a6:	d505      	bpl.n	800b7b4 <_dtoa_r+0x4d4>
 800b7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	1076      	asrs	r6, r6, #1
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	e777      	b.n	800b6aa <_dtoa_r+0x3ca>
 800b7ba:	2502      	movs	r5, #2
 800b7bc:	e779      	b.n	800b6b2 <_dtoa_r+0x3d2>
 800b7be:	9f00      	ldr	r7, [sp, #0]
 800b7c0:	9e03      	ldr	r6, [sp, #12]
 800b7c2:	e794      	b.n	800b6ee <_dtoa_r+0x40e>
 800b7c4:	9901      	ldr	r1, [sp, #4]
 800b7c6:	4b4c      	ldr	r3, [pc, #304]	; (800b8f8 <_dtoa_r+0x618>)
 800b7c8:	4431      	add	r1, r6
 800b7ca:	910d      	str	r1, [sp, #52]	; 0x34
 800b7cc:	9908      	ldr	r1, [sp, #32]
 800b7ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b7d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	d043      	beq.n	800b862 <_dtoa_r+0x582>
 800b7da:	494d      	ldr	r1, [pc, #308]	; (800b910 <_dtoa_r+0x630>)
 800b7dc:	2000      	movs	r0, #0
 800b7de:	f7f5 f835 	bl	800084c <__aeabi_ddiv>
 800b7e2:	4652      	mov	r2, sl
 800b7e4:	465b      	mov	r3, fp
 800b7e6:	f7f4 fd4f 	bl	8000288 <__aeabi_dsub>
 800b7ea:	9d01      	ldr	r5, [sp, #4]
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f7f5 f9b0 	bl	8000b58 <__aeabi_d2iz>
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	f7f4 fe93 	bl	8000524 <__aeabi_i2d>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4640      	mov	r0, r8
 800b804:	4649      	mov	r1, r9
 800b806:	f7f4 fd3f 	bl	8000288 <__aeabi_dsub>
 800b80a:	3630      	adds	r6, #48	; 0x30
 800b80c:	f805 6b01 	strb.w	r6, [r5], #1
 800b810:	4652      	mov	r2, sl
 800b812:	465b      	mov	r3, fp
 800b814:	4680      	mov	r8, r0
 800b816:	4689      	mov	r9, r1
 800b818:	f7f5 f960 	bl	8000adc <__aeabi_dcmplt>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d163      	bne.n	800b8e8 <_dtoa_r+0x608>
 800b820:	4642      	mov	r2, r8
 800b822:	464b      	mov	r3, r9
 800b824:	4936      	ldr	r1, [pc, #216]	; (800b900 <_dtoa_r+0x620>)
 800b826:	2000      	movs	r0, #0
 800b828:	f7f4 fd2e 	bl	8000288 <__aeabi_dsub>
 800b82c:	4652      	mov	r2, sl
 800b82e:	465b      	mov	r3, fp
 800b830:	f7f5 f954 	bl	8000adc <__aeabi_dcmplt>
 800b834:	2800      	cmp	r0, #0
 800b836:	f040 80b5 	bne.w	800b9a4 <_dtoa_r+0x6c4>
 800b83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b83c:	429d      	cmp	r5, r3
 800b83e:	d081      	beq.n	800b744 <_dtoa_r+0x464>
 800b840:	4b30      	ldr	r3, [pc, #192]	; (800b904 <_dtoa_r+0x624>)
 800b842:	2200      	movs	r2, #0
 800b844:	4650      	mov	r0, sl
 800b846:	4659      	mov	r1, fp
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	4b2d      	ldr	r3, [pc, #180]	; (800b904 <_dtoa_r+0x624>)
 800b84e:	4682      	mov	sl, r0
 800b850:	468b      	mov	fp, r1
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	2200      	movs	r2, #0
 800b858:	f7f4 fece 	bl	80005f8 <__aeabi_dmul>
 800b85c:	4680      	mov	r8, r0
 800b85e:	4689      	mov	r9, r1
 800b860:	e7c6      	b.n	800b7f0 <_dtoa_r+0x510>
 800b862:	4650      	mov	r0, sl
 800b864:	4659      	mov	r1, fp
 800b866:	f7f4 fec7 	bl	80005f8 <__aeabi_dmul>
 800b86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b86c:	9d01      	ldr	r5, [sp, #4]
 800b86e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b870:	4682      	mov	sl, r0
 800b872:	468b      	mov	fp, r1
 800b874:	4649      	mov	r1, r9
 800b876:	4640      	mov	r0, r8
 800b878:	f7f5 f96e 	bl	8000b58 <__aeabi_d2iz>
 800b87c:	4606      	mov	r6, r0
 800b87e:	f7f4 fe51 	bl	8000524 <__aeabi_i2d>
 800b882:	3630      	adds	r6, #48	; 0x30
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	4640      	mov	r0, r8
 800b88a:	4649      	mov	r1, r9
 800b88c:	f7f4 fcfc 	bl	8000288 <__aeabi_dsub>
 800b890:	f805 6b01 	strb.w	r6, [r5], #1
 800b894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b896:	429d      	cmp	r5, r3
 800b898:	4680      	mov	r8, r0
 800b89a:	4689      	mov	r9, r1
 800b89c:	f04f 0200 	mov.w	r2, #0
 800b8a0:	d124      	bne.n	800b8ec <_dtoa_r+0x60c>
 800b8a2:	4b1b      	ldr	r3, [pc, #108]	; (800b910 <_dtoa_r+0x630>)
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	4659      	mov	r1, fp
 800b8a8:	f7f4 fcf0 	bl	800028c <__adddf3>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	f7f5 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d173      	bne.n	800b9a4 <_dtoa_r+0x6c4>
 800b8bc:	4652      	mov	r2, sl
 800b8be:	465b      	mov	r3, fp
 800b8c0:	4913      	ldr	r1, [pc, #76]	; (800b910 <_dtoa_r+0x630>)
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f7f4 fce0 	bl	8000288 <__aeabi_dsub>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	f7f5 f904 	bl	8000adc <__aeabi_dcmplt>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	f43f af35 	beq.w	800b744 <_dtoa_r+0x464>
 800b8da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b8dc:	1e6b      	subs	r3, r5, #1
 800b8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8e4:	2b30      	cmp	r3, #48	; 0x30
 800b8e6:	d0f8      	beq.n	800b8da <_dtoa_r+0x5fa>
 800b8e8:	9700      	str	r7, [sp, #0]
 800b8ea:	e049      	b.n	800b980 <_dtoa_r+0x6a0>
 800b8ec:	4b05      	ldr	r3, [pc, #20]	; (800b904 <_dtoa_r+0x624>)
 800b8ee:	f7f4 fe83 	bl	80005f8 <__aeabi_dmul>
 800b8f2:	4680      	mov	r8, r0
 800b8f4:	4689      	mov	r9, r1
 800b8f6:	e7bd      	b.n	800b874 <_dtoa_r+0x594>
 800b8f8:	0800ddc0 	.word	0x0800ddc0
 800b8fc:	0800dd98 	.word	0x0800dd98
 800b900:	3ff00000 	.word	0x3ff00000
 800b904:	40240000 	.word	0x40240000
 800b908:	401c0000 	.word	0x401c0000
 800b90c:	40140000 	.word	0x40140000
 800b910:	3fe00000 	.word	0x3fe00000
 800b914:	9d01      	ldr	r5, [sp, #4]
 800b916:	4656      	mov	r6, sl
 800b918:	465f      	mov	r7, fp
 800b91a:	4642      	mov	r2, r8
 800b91c:	464b      	mov	r3, r9
 800b91e:	4630      	mov	r0, r6
 800b920:	4639      	mov	r1, r7
 800b922:	f7f4 ff93 	bl	800084c <__aeabi_ddiv>
 800b926:	f7f5 f917 	bl	8000b58 <__aeabi_d2iz>
 800b92a:	4682      	mov	sl, r0
 800b92c:	f7f4 fdfa 	bl	8000524 <__aeabi_i2d>
 800b930:	4642      	mov	r2, r8
 800b932:	464b      	mov	r3, r9
 800b934:	f7f4 fe60 	bl	80005f8 <__aeabi_dmul>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b944:	f7f4 fca0 	bl	8000288 <__aeabi_dsub>
 800b948:	f805 6b01 	strb.w	r6, [r5], #1
 800b94c:	9e01      	ldr	r6, [sp, #4]
 800b94e:	9f03      	ldr	r7, [sp, #12]
 800b950:	1bae      	subs	r6, r5, r6
 800b952:	42b7      	cmp	r7, r6
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	d135      	bne.n	800b9c6 <_dtoa_r+0x6e6>
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4642      	mov	r2, r8
 800b960:	464b      	mov	r3, r9
 800b962:	4606      	mov	r6, r0
 800b964:	460f      	mov	r7, r1
 800b966:	f7f5 f8d7 	bl	8000b18 <__aeabi_dcmpgt>
 800b96a:	b9d0      	cbnz	r0, 800b9a2 <_dtoa_r+0x6c2>
 800b96c:	4642      	mov	r2, r8
 800b96e:	464b      	mov	r3, r9
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f5 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b978:	b110      	cbz	r0, 800b980 <_dtoa_r+0x6a0>
 800b97a:	f01a 0f01 	tst.w	sl, #1
 800b97e:	d110      	bne.n	800b9a2 <_dtoa_r+0x6c2>
 800b980:	4620      	mov	r0, r4
 800b982:	ee18 1a10 	vmov	r1, s16
 800b986:	f000 faf3 	bl	800bf70 <_Bfree>
 800b98a:	2300      	movs	r3, #0
 800b98c:	9800      	ldr	r0, [sp, #0]
 800b98e:	702b      	strb	r3, [r5, #0]
 800b990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b992:	3001      	adds	r0, #1
 800b994:	6018      	str	r0, [r3, #0]
 800b996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f43f acf1 	beq.w	800b380 <_dtoa_r+0xa0>
 800b99e:	601d      	str	r5, [r3, #0]
 800b9a0:	e4ee      	b.n	800b380 <_dtoa_r+0xa0>
 800b9a2:	9f00      	ldr	r7, [sp, #0]
 800b9a4:	462b      	mov	r3, r5
 800b9a6:	461d      	mov	r5, r3
 800b9a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9ac:	2a39      	cmp	r2, #57	; 0x39
 800b9ae:	d106      	bne.n	800b9be <_dtoa_r+0x6de>
 800b9b0:	9a01      	ldr	r2, [sp, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d1f7      	bne.n	800b9a6 <_dtoa_r+0x6c6>
 800b9b6:	9901      	ldr	r1, [sp, #4]
 800b9b8:	2230      	movs	r2, #48	; 0x30
 800b9ba:	3701      	adds	r7, #1
 800b9bc:	700a      	strb	r2, [r1, #0]
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	3201      	adds	r2, #1
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	e790      	b.n	800b8e8 <_dtoa_r+0x608>
 800b9c6:	4ba6      	ldr	r3, [pc, #664]	; (800bc60 <_dtoa_r+0x980>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f7f4 fe15 	bl	80005f8 <__aeabi_dmul>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	f7f5 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d09d      	beq.n	800b91a <_dtoa_r+0x63a>
 800b9de:	e7cf      	b.n	800b980 <_dtoa_r+0x6a0>
 800b9e0:	9a08      	ldr	r2, [sp, #32]
 800b9e2:	2a00      	cmp	r2, #0
 800b9e4:	f000 80d7 	beq.w	800bb96 <_dtoa_r+0x8b6>
 800b9e8:	9a06      	ldr	r2, [sp, #24]
 800b9ea:	2a01      	cmp	r2, #1
 800b9ec:	f300 80ba 	bgt.w	800bb64 <_dtoa_r+0x884>
 800b9f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9f2:	2a00      	cmp	r2, #0
 800b9f4:	f000 80b2 	beq.w	800bb5c <_dtoa_r+0x87c>
 800b9f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9fc:	9e07      	ldr	r6, [sp, #28]
 800b9fe:	9d04      	ldr	r5, [sp, #16]
 800ba00:	9a04      	ldr	r2, [sp, #16]
 800ba02:	441a      	add	r2, r3
 800ba04:	9204      	str	r2, [sp, #16]
 800ba06:	9a05      	ldr	r2, [sp, #20]
 800ba08:	2101      	movs	r1, #1
 800ba0a:	441a      	add	r2, r3
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	9205      	str	r2, [sp, #20]
 800ba10:	f000 fb66 	bl	800c0e0 <__i2b>
 800ba14:	4607      	mov	r7, r0
 800ba16:	2d00      	cmp	r5, #0
 800ba18:	dd0c      	ble.n	800ba34 <_dtoa_r+0x754>
 800ba1a:	9b05      	ldr	r3, [sp, #20]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd09      	ble.n	800ba34 <_dtoa_r+0x754>
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	9a04      	ldr	r2, [sp, #16]
 800ba24:	bfa8      	it	ge
 800ba26:	462b      	movge	r3, r5
 800ba28:	1ad2      	subs	r2, r2, r3
 800ba2a:	9204      	str	r2, [sp, #16]
 800ba2c:	9a05      	ldr	r2, [sp, #20]
 800ba2e:	1aed      	subs	r5, r5, r3
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	b31b      	cbz	r3, 800ba80 <_dtoa_r+0x7a0>
 800ba38:	9b08      	ldr	r3, [sp, #32]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 80af 	beq.w	800bb9e <_dtoa_r+0x8be>
 800ba40:	2e00      	cmp	r6, #0
 800ba42:	dd13      	ble.n	800ba6c <_dtoa_r+0x78c>
 800ba44:	4639      	mov	r1, r7
 800ba46:	4632      	mov	r2, r6
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 fc09 	bl	800c260 <__pow5mult>
 800ba4e:	ee18 2a10 	vmov	r2, s16
 800ba52:	4601      	mov	r1, r0
 800ba54:	4607      	mov	r7, r0
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 fb58 	bl	800c10c <__multiply>
 800ba5c:	ee18 1a10 	vmov	r1, s16
 800ba60:	4680      	mov	r8, r0
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fa84 	bl	800bf70 <_Bfree>
 800ba68:	ee08 8a10 	vmov	s16, r8
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	1b9a      	subs	r2, r3, r6
 800ba70:	d006      	beq.n	800ba80 <_dtoa_r+0x7a0>
 800ba72:	ee18 1a10 	vmov	r1, s16
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 fbf2 	bl	800c260 <__pow5mult>
 800ba7c:	ee08 0a10 	vmov	s16, r0
 800ba80:	2101      	movs	r1, #1
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fb2c 	bl	800c0e0 <__i2b>
 800ba88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	f340 8088 	ble.w	800bba2 <_dtoa_r+0x8c2>
 800ba92:	461a      	mov	r2, r3
 800ba94:	4601      	mov	r1, r0
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 fbe2 	bl	800c260 <__pow5mult>
 800ba9c:	9b06      	ldr	r3, [sp, #24]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	4606      	mov	r6, r0
 800baa2:	f340 8081 	ble.w	800bba8 <_dtoa_r+0x8c8>
 800baa6:	f04f 0800 	mov.w	r8, #0
 800baaa:	6933      	ldr	r3, [r6, #16]
 800baac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bab0:	6918      	ldr	r0, [r3, #16]
 800bab2:	f000 fac5 	bl	800c040 <__hi0bits>
 800bab6:	f1c0 0020 	rsb	r0, r0, #32
 800baba:	9b05      	ldr	r3, [sp, #20]
 800babc:	4418      	add	r0, r3
 800babe:	f010 001f 	ands.w	r0, r0, #31
 800bac2:	f000 8092 	beq.w	800bbea <_dtoa_r+0x90a>
 800bac6:	f1c0 0320 	rsb	r3, r0, #32
 800baca:	2b04      	cmp	r3, #4
 800bacc:	f340 808a 	ble.w	800bbe4 <_dtoa_r+0x904>
 800bad0:	f1c0 001c 	rsb	r0, r0, #28
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	4403      	add	r3, r0
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	9b05      	ldr	r3, [sp, #20]
 800badc:	4403      	add	r3, r0
 800bade:	4405      	add	r5, r0
 800bae0:	9305      	str	r3, [sp, #20]
 800bae2:	9b04      	ldr	r3, [sp, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd07      	ble.n	800baf8 <_dtoa_r+0x818>
 800bae8:	ee18 1a10 	vmov	r1, s16
 800baec:	461a      	mov	r2, r3
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 fc10 	bl	800c314 <__lshift>
 800baf4:	ee08 0a10 	vmov	s16, r0
 800baf8:	9b05      	ldr	r3, [sp, #20]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dd05      	ble.n	800bb0a <_dtoa_r+0x82a>
 800bafe:	4631      	mov	r1, r6
 800bb00:	461a      	mov	r2, r3
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fc06 	bl	800c314 <__lshift>
 800bb08:	4606      	mov	r6, r0
 800bb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d06e      	beq.n	800bbee <_dtoa_r+0x90e>
 800bb10:	ee18 0a10 	vmov	r0, s16
 800bb14:	4631      	mov	r1, r6
 800bb16:	f000 fc6d 	bl	800c3f4 <__mcmp>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	da67      	bge.n	800bbee <_dtoa_r+0x90e>
 800bb1e:	9b00      	ldr	r3, [sp, #0]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	ee18 1a10 	vmov	r1, s16
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	220a      	movs	r2, #10
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 fa41 	bl	800bfb4 <__multadd>
 800bb32:	9b08      	ldr	r3, [sp, #32]
 800bb34:	ee08 0a10 	vmov	s16, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 81b1 	beq.w	800bea0 <_dtoa_r+0xbc0>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4639      	mov	r1, r7
 800bb42:	220a      	movs	r2, #10
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 fa35 	bl	800bfb4 <__multadd>
 800bb4a:	9b02      	ldr	r3, [sp, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	4607      	mov	r7, r0
 800bb50:	f300 808e 	bgt.w	800bc70 <_dtoa_r+0x990>
 800bb54:	9b06      	ldr	r3, [sp, #24]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	dc51      	bgt.n	800bbfe <_dtoa_r+0x91e>
 800bb5a:	e089      	b.n	800bc70 <_dtoa_r+0x990>
 800bb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb62:	e74b      	b.n	800b9fc <_dtoa_r+0x71c>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	1e5e      	subs	r6, r3, #1
 800bb68:	9b07      	ldr	r3, [sp, #28]
 800bb6a:	42b3      	cmp	r3, r6
 800bb6c:	bfbf      	itttt	lt
 800bb6e:	9b07      	ldrlt	r3, [sp, #28]
 800bb70:	9607      	strlt	r6, [sp, #28]
 800bb72:	1af2      	sublt	r2, r6, r3
 800bb74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb76:	bfb6      	itet	lt
 800bb78:	189b      	addlt	r3, r3, r2
 800bb7a:	1b9e      	subge	r6, r3, r6
 800bb7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	bfb8      	it	lt
 800bb82:	2600      	movlt	r6, #0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bfb7      	itett	lt
 800bb88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bb8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb90:	1a9d      	sublt	r5, r3, r2
 800bb92:	2300      	movlt	r3, #0
 800bb94:	e734      	b.n	800ba00 <_dtoa_r+0x720>
 800bb96:	9e07      	ldr	r6, [sp, #28]
 800bb98:	9d04      	ldr	r5, [sp, #16]
 800bb9a:	9f08      	ldr	r7, [sp, #32]
 800bb9c:	e73b      	b.n	800ba16 <_dtoa_r+0x736>
 800bb9e:	9a07      	ldr	r2, [sp, #28]
 800bba0:	e767      	b.n	800ba72 <_dtoa_r+0x792>
 800bba2:	9b06      	ldr	r3, [sp, #24]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	dc18      	bgt.n	800bbda <_dtoa_r+0x8fa>
 800bba8:	f1ba 0f00 	cmp.w	sl, #0
 800bbac:	d115      	bne.n	800bbda <_dtoa_r+0x8fa>
 800bbae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbb2:	b993      	cbnz	r3, 800bbda <_dtoa_r+0x8fa>
 800bbb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbb8:	0d1b      	lsrs	r3, r3, #20
 800bbba:	051b      	lsls	r3, r3, #20
 800bbbc:	b183      	cbz	r3, 800bbe0 <_dtoa_r+0x900>
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	9b05      	ldr	r3, [sp, #20]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	9305      	str	r3, [sp, #20]
 800bbca:	f04f 0801 	mov.w	r8, #1
 800bbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f47f af6a 	bne.w	800baaa <_dtoa_r+0x7ca>
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	e76f      	b.n	800baba <_dtoa_r+0x7da>
 800bbda:	f04f 0800 	mov.w	r8, #0
 800bbde:	e7f6      	b.n	800bbce <_dtoa_r+0x8ee>
 800bbe0:	4698      	mov	r8, r3
 800bbe2:	e7f4      	b.n	800bbce <_dtoa_r+0x8ee>
 800bbe4:	f43f af7d 	beq.w	800bae2 <_dtoa_r+0x802>
 800bbe8:	4618      	mov	r0, r3
 800bbea:	301c      	adds	r0, #28
 800bbec:	e772      	b.n	800bad4 <_dtoa_r+0x7f4>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc37      	bgt.n	800bc64 <_dtoa_r+0x984>
 800bbf4:	9b06      	ldr	r3, [sp, #24]
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	dd34      	ble.n	800bc64 <_dtoa_r+0x984>
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	9302      	str	r3, [sp, #8]
 800bbfe:	9b02      	ldr	r3, [sp, #8]
 800bc00:	b96b      	cbnz	r3, 800bc1e <_dtoa_r+0x93e>
 800bc02:	4631      	mov	r1, r6
 800bc04:	2205      	movs	r2, #5
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 f9d4 	bl	800bfb4 <__multadd>
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	4606      	mov	r6, r0
 800bc10:	ee18 0a10 	vmov	r0, s16
 800bc14:	f000 fbee 	bl	800c3f4 <__mcmp>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	f73f adbb 	bgt.w	800b794 <_dtoa_r+0x4b4>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc20:	9d01      	ldr	r5, [sp, #4]
 800bc22:	43db      	mvns	r3, r3
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	f04f 0800 	mov.w	r8, #0
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f000 f99f 	bl	800bf70 <_Bfree>
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	f43f aea4 	beq.w	800b980 <_dtoa_r+0x6a0>
 800bc38:	f1b8 0f00 	cmp.w	r8, #0
 800bc3c:	d005      	beq.n	800bc4a <_dtoa_r+0x96a>
 800bc3e:	45b8      	cmp	r8, r7
 800bc40:	d003      	beq.n	800bc4a <_dtoa_r+0x96a>
 800bc42:	4641      	mov	r1, r8
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 f993 	bl	800bf70 <_Bfree>
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 f98f 	bl	800bf70 <_Bfree>
 800bc52:	e695      	b.n	800b980 <_dtoa_r+0x6a0>
 800bc54:	2600      	movs	r6, #0
 800bc56:	4637      	mov	r7, r6
 800bc58:	e7e1      	b.n	800bc1e <_dtoa_r+0x93e>
 800bc5a:	9700      	str	r7, [sp, #0]
 800bc5c:	4637      	mov	r7, r6
 800bc5e:	e599      	b.n	800b794 <_dtoa_r+0x4b4>
 800bc60:	40240000 	.word	0x40240000
 800bc64:	9b08      	ldr	r3, [sp, #32]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 80ca 	beq.w	800be00 <_dtoa_r+0xb20>
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	9302      	str	r3, [sp, #8]
 800bc70:	2d00      	cmp	r5, #0
 800bc72:	dd05      	ble.n	800bc80 <_dtoa_r+0x9a0>
 800bc74:	4639      	mov	r1, r7
 800bc76:	462a      	mov	r2, r5
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f000 fb4b 	bl	800c314 <__lshift>
 800bc7e:	4607      	mov	r7, r0
 800bc80:	f1b8 0f00 	cmp.w	r8, #0
 800bc84:	d05b      	beq.n	800bd3e <_dtoa_r+0xa5e>
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 f931 	bl	800bef0 <_Balloc>
 800bc8e:	4605      	mov	r5, r0
 800bc90:	b928      	cbnz	r0, 800bc9e <_dtoa_r+0x9be>
 800bc92:	4b87      	ldr	r3, [pc, #540]	; (800beb0 <_dtoa_r+0xbd0>)
 800bc94:	4602      	mov	r2, r0
 800bc96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc9a:	f7ff bb3b 	b.w	800b314 <_dtoa_r+0x34>
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	3202      	adds	r2, #2
 800bca2:	0092      	lsls	r2, r2, #2
 800bca4:	f107 010c 	add.w	r1, r7, #12
 800bca8:	300c      	adds	r0, #12
 800bcaa:	f000 f913 	bl	800bed4 <memcpy>
 800bcae:	2201      	movs	r2, #1
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 fb2e 	bl	800c314 <__lshift>
 800bcb8:	9b01      	ldr	r3, [sp, #4]
 800bcba:	f103 0901 	add.w	r9, r3, #1
 800bcbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	f00a 0301 	and.w	r3, sl, #1
 800bcca:	46b8      	mov	r8, r7
 800bccc:	9304      	str	r3, [sp, #16]
 800bcce:	4607      	mov	r7, r0
 800bcd0:	4631      	mov	r1, r6
 800bcd2:	ee18 0a10 	vmov	r0, s16
 800bcd6:	f7ff fa77 	bl	800b1c8 <quorem>
 800bcda:	4641      	mov	r1, r8
 800bcdc:	9002      	str	r0, [sp, #8]
 800bcde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bce2:	ee18 0a10 	vmov	r0, s16
 800bce6:	f000 fb85 	bl	800c3f4 <__mcmp>
 800bcea:	463a      	mov	r2, r7
 800bcec:	9003      	str	r0, [sp, #12]
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 fb9b 	bl	800c42c <__mdiff>
 800bcf6:	68c2      	ldr	r2, [r0, #12]
 800bcf8:	f109 3bff 	add.w	fp, r9, #4294967295
 800bcfc:	4605      	mov	r5, r0
 800bcfe:	bb02      	cbnz	r2, 800bd42 <_dtoa_r+0xa62>
 800bd00:	4601      	mov	r1, r0
 800bd02:	ee18 0a10 	vmov	r0, s16
 800bd06:	f000 fb75 	bl	800c3f4 <__mcmp>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4620      	mov	r0, r4
 800bd10:	9207      	str	r2, [sp, #28]
 800bd12:	f000 f92d 	bl	800bf70 <_Bfree>
 800bd16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd1a:	ea43 0102 	orr.w	r1, r3, r2
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	430b      	orrs	r3, r1
 800bd22:	464d      	mov	r5, r9
 800bd24:	d10f      	bne.n	800bd46 <_dtoa_r+0xa66>
 800bd26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd2a:	d02a      	beq.n	800bd82 <_dtoa_r+0xaa2>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	dd02      	ble.n	800bd38 <_dtoa_r+0xa58>
 800bd32:	9b02      	ldr	r3, [sp, #8]
 800bd34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd38:	f88b a000 	strb.w	sl, [fp]
 800bd3c:	e775      	b.n	800bc2a <_dtoa_r+0x94a>
 800bd3e:	4638      	mov	r0, r7
 800bd40:	e7ba      	b.n	800bcb8 <_dtoa_r+0x9d8>
 800bd42:	2201      	movs	r2, #1
 800bd44:	e7e2      	b.n	800bd0c <_dtoa_r+0xa2c>
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	db04      	blt.n	800bd56 <_dtoa_r+0xa76>
 800bd4c:	9906      	ldr	r1, [sp, #24]
 800bd4e:	430b      	orrs	r3, r1
 800bd50:	9904      	ldr	r1, [sp, #16]
 800bd52:	430b      	orrs	r3, r1
 800bd54:	d122      	bne.n	800bd9c <_dtoa_r+0xabc>
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	ddee      	ble.n	800bd38 <_dtoa_r+0xa58>
 800bd5a:	ee18 1a10 	vmov	r1, s16
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fad7 	bl	800c314 <__lshift>
 800bd66:	4631      	mov	r1, r6
 800bd68:	ee08 0a10 	vmov	s16, r0
 800bd6c:	f000 fb42 	bl	800c3f4 <__mcmp>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	dc03      	bgt.n	800bd7c <_dtoa_r+0xa9c>
 800bd74:	d1e0      	bne.n	800bd38 <_dtoa_r+0xa58>
 800bd76:	f01a 0f01 	tst.w	sl, #1
 800bd7a:	d0dd      	beq.n	800bd38 <_dtoa_r+0xa58>
 800bd7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd80:	d1d7      	bne.n	800bd32 <_dtoa_r+0xa52>
 800bd82:	2339      	movs	r3, #57	; 0x39
 800bd84:	f88b 3000 	strb.w	r3, [fp]
 800bd88:	462b      	mov	r3, r5
 800bd8a:	461d      	mov	r5, r3
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd92:	2a39      	cmp	r2, #57	; 0x39
 800bd94:	d071      	beq.n	800be7a <_dtoa_r+0xb9a>
 800bd96:	3201      	adds	r2, #1
 800bd98:	701a      	strb	r2, [r3, #0]
 800bd9a:	e746      	b.n	800bc2a <_dtoa_r+0x94a>
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	dd07      	ble.n	800bdb0 <_dtoa_r+0xad0>
 800bda0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bda4:	d0ed      	beq.n	800bd82 <_dtoa_r+0xaa2>
 800bda6:	f10a 0301 	add.w	r3, sl, #1
 800bdaa:	f88b 3000 	strb.w	r3, [fp]
 800bdae:	e73c      	b.n	800bc2a <_dtoa_r+0x94a>
 800bdb0:	9b05      	ldr	r3, [sp, #20]
 800bdb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bdb6:	4599      	cmp	r9, r3
 800bdb8:	d047      	beq.n	800be4a <_dtoa_r+0xb6a>
 800bdba:	ee18 1a10 	vmov	r1, s16
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	220a      	movs	r2, #10
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 f8f6 	bl	800bfb4 <__multadd>
 800bdc8:	45b8      	cmp	r8, r7
 800bdca:	ee08 0a10 	vmov	s16, r0
 800bdce:	f04f 0300 	mov.w	r3, #0
 800bdd2:	f04f 020a 	mov.w	r2, #10
 800bdd6:	4641      	mov	r1, r8
 800bdd8:	4620      	mov	r0, r4
 800bdda:	d106      	bne.n	800bdea <_dtoa_r+0xb0a>
 800bddc:	f000 f8ea 	bl	800bfb4 <__multadd>
 800bde0:	4680      	mov	r8, r0
 800bde2:	4607      	mov	r7, r0
 800bde4:	f109 0901 	add.w	r9, r9, #1
 800bde8:	e772      	b.n	800bcd0 <_dtoa_r+0x9f0>
 800bdea:	f000 f8e3 	bl	800bfb4 <__multadd>
 800bdee:	4639      	mov	r1, r7
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	220a      	movs	r2, #10
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 f8dc 	bl	800bfb4 <__multadd>
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	e7f1      	b.n	800bde4 <_dtoa_r+0xb04>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	9302      	str	r3, [sp, #8]
 800be04:	9d01      	ldr	r5, [sp, #4]
 800be06:	ee18 0a10 	vmov	r0, s16
 800be0a:	4631      	mov	r1, r6
 800be0c:	f7ff f9dc 	bl	800b1c8 <quorem>
 800be10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	f805 ab01 	strb.w	sl, [r5], #1
 800be1a:	1aea      	subs	r2, r5, r3
 800be1c:	9b02      	ldr	r3, [sp, #8]
 800be1e:	4293      	cmp	r3, r2
 800be20:	dd09      	ble.n	800be36 <_dtoa_r+0xb56>
 800be22:	ee18 1a10 	vmov	r1, s16
 800be26:	2300      	movs	r3, #0
 800be28:	220a      	movs	r2, #10
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 f8c2 	bl	800bfb4 <__multadd>
 800be30:	ee08 0a10 	vmov	s16, r0
 800be34:	e7e7      	b.n	800be06 <_dtoa_r+0xb26>
 800be36:	9b02      	ldr	r3, [sp, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bfc8      	it	gt
 800be3c:	461d      	movgt	r5, r3
 800be3e:	9b01      	ldr	r3, [sp, #4]
 800be40:	bfd8      	it	le
 800be42:	2501      	movle	r5, #1
 800be44:	441d      	add	r5, r3
 800be46:	f04f 0800 	mov.w	r8, #0
 800be4a:	ee18 1a10 	vmov	r1, s16
 800be4e:	2201      	movs	r2, #1
 800be50:	4620      	mov	r0, r4
 800be52:	f000 fa5f 	bl	800c314 <__lshift>
 800be56:	4631      	mov	r1, r6
 800be58:	ee08 0a10 	vmov	s16, r0
 800be5c:	f000 faca 	bl	800c3f4 <__mcmp>
 800be60:	2800      	cmp	r0, #0
 800be62:	dc91      	bgt.n	800bd88 <_dtoa_r+0xaa8>
 800be64:	d102      	bne.n	800be6c <_dtoa_r+0xb8c>
 800be66:	f01a 0f01 	tst.w	sl, #1
 800be6a:	d18d      	bne.n	800bd88 <_dtoa_r+0xaa8>
 800be6c:	462b      	mov	r3, r5
 800be6e:	461d      	mov	r5, r3
 800be70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be74:	2a30      	cmp	r2, #48	; 0x30
 800be76:	d0fa      	beq.n	800be6e <_dtoa_r+0xb8e>
 800be78:	e6d7      	b.n	800bc2a <_dtoa_r+0x94a>
 800be7a:	9a01      	ldr	r2, [sp, #4]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d184      	bne.n	800bd8a <_dtoa_r+0xaaa>
 800be80:	9b00      	ldr	r3, [sp, #0]
 800be82:	3301      	adds	r3, #1
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	2331      	movs	r3, #49	; 0x31
 800be88:	7013      	strb	r3, [r2, #0]
 800be8a:	e6ce      	b.n	800bc2a <_dtoa_r+0x94a>
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <_dtoa_r+0xbd4>)
 800be8e:	f7ff ba95 	b.w	800b3bc <_dtoa_r+0xdc>
 800be92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be94:	2b00      	cmp	r3, #0
 800be96:	f47f aa6e 	bne.w	800b376 <_dtoa_r+0x96>
 800be9a:	4b07      	ldr	r3, [pc, #28]	; (800beb8 <_dtoa_r+0xbd8>)
 800be9c:	f7ff ba8e 	b.w	800b3bc <_dtoa_r+0xdc>
 800bea0:	9b02      	ldr	r3, [sp, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	dcae      	bgt.n	800be04 <_dtoa_r+0xb24>
 800bea6:	9b06      	ldr	r3, [sp, #24]
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	f73f aea8 	bgt.w	800bbfe <_dtoa_r+0x91e>
 800beae:	e7a9      	b.n	800be04 <_dtoa_r+0xb24>
 800beb0:	0800dd27 	.word	0x0800dd27
 800beb4:	0800dc84 	.word	0x0800dc84
 800beb8:	0800dca8 	.word	0x0800dca8

0800bebc <_localeconv_r>:
 800bebc:	4800      	ldr	r0, [pc, #0]	; (800bec0 <_localeconv_r+0x4>)
 800bebe:	4770      	bx	lr
 800bec0:	20000178 	.word	0x20000178

0800bec4 <malloc>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <malloc+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f000 bc17 	b.w	800c6fc <_malloc_r>
 800bece:	bf00      	nop
 800bed0:	20000024 	.word	0x20000024

0800bed4 <memcpy>:
 800bed4:	440a      	add	r2, r1
 800bed6:	4291      	cmp	r1, r2
 800bed8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bedc:	d100      	bne.n	800bee0 <memcpy+0xc>
 800bede:	4770      	bx	lr
 800bee0:	b510      	push	{r4, lr}
 800bee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beea:	4291      	cmp	r1, r2
 800beec:	d1f9      	bne.n	800bee2 <memcpy+0xe>
 800beee:	bd10      	pop	{r4, pc}

0800bef0 <_Balloc>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
 800bef8:	b976      	cbnz	r6, 800bf18 <_Balloc+0x28>
 800befa:	2010      	movs	r0, #16
 800befc:	f7ff ffe2 	bl	800bec4 <malloc>
 800bf00:	4602      	mov	r2, r0
 800bf02:	6260      	str	r0, [r4, #36]	; 0x24
 800bf04:	b920      	cbnz	r0, 800bf10 <_Balloc+0x20>
 800bf06:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <_Balloc+0x78>)
 800bf08:	4818      	ldr	r0, [pc, #96]	; (800bf6c <_Balloc+0x7c>)
 800bf0a:	2166      	movs	r1, #102	; 0x66
 800bf0c:	f000 fdd6 	bl	800cabc <__assert_func>
 800bf10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf14:	6006      	str	r6, [r0, #0]
 800bf16:	60c6      	str	r6, [r0, #12]
 800bf18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf1a:	68f3      	ldr	r3, [r6, #12]
 800bf1c:	b183      	cbz	r3, 800bf40 <_Balloc+0x50>
 800bf1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf26:	b9b8      	cbnz	r0, 800bf58 <_Balloc+0x68>
 800bf28:	2101      	movs	r1, #1
 800bf2a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf2e:	1d72      	adds	r2, r6, #5
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fb60 	bl	800c5f8 <_calloc_r>
 800bf38:	b160      	cbz	r0, 800bf54 <_Balloc+0x64>
 800bf3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf3e:	e00e      	b.n	800bf5e <_Balloc+0x6e>
 800bf40:	2221      	movs	r2, #33	; 0x21
 800bf42:	2104      	movs	r1, #4
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fb57 	bl	800c5f8 <_calloc_r>
 800bf4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf4c:	60f0      	str	r0, [r6, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e4      	bne.n	800bf1e <_Balloc+0x2e>
 800bf54:	2000      	movs	r0, #0
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	6802      	ldr	r2, [r0, #0]
 800bf5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf64:	e7f7      	b.n	800bf56 <_Balloc+0x66>
 800bf66:	bf00      	nop
 800bf68:	0800dcb5 	.word	0x0800dcb5
 800bf6c:	0800dd38 	.word	0x0800dd38

0800bf70 <_Bfree>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b976      	cbnz	r6, 800bf98 <_Bfree+0x28>
 800bf7a:	2010      	movs	r0, #16
 800bf7c:	f7ff ffa2 	bl	800bec4 <malloc>
 800bf80:	4602      	mov	r2, r0
 800bf82:	6268      	str	r0, [r5, #36]	; 0x24
 800bf84:	b920      	cbnz	r0, 800bf90 <_Bfree+0x20>
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <_Bfree+0x3c>)
 800bf88:	4809      	ldr	r0, [pc, #36]	; (800bfb0 <_Bfree+0x40>)
 800bf8a:	218a      	movs	r1, #138	; 0x8a
 800bf8c:	f000 fd96 	bl	800cabc <__assert_func>
 800bf90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf94:	6006      	str	r6, [r0, #0]
 800bf96:	60c6      	str	r6, [r0, #12]
 800bf98:	b13c      	cbz	r4, 800bfaa <_Bfree+0x3a>
 800bf9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf9c:	6862      	ldr	r2, [r4, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa4:	6021      	str	r1, [r4, #0]
 800bfa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	0800dcb5 	.word	0x0800dcb5
 800bfb0:	0800dd38 	.word	0x0800dd38

0800bfb4 <__multadd>:
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	690d      	ldr	r5, [r1, #16]
 800bfba:	4607      	mov	r7, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	461e      	mov	r6, r3
 800bfc0:	f101 0c14 	add.w	ip, r1, #20
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfca:	b299      	uxth	r1, r3
 800bfcc:	fb02 6101 	mla	r1, r2, r1, r6
 800bfd0:	0c1e      	lsrs	r6, r3, #16
 800bfd2:	0c0b      	lsrs	r3, r1, #16
 800bfd4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd8:	b289      	uxth	r1, r1
 800bfda:	3001      	adds	r0, #1
 800bfdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfe0:	4285      	cmp	r5, r0
 800bfe2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfea:	dcec      	bgt.n	800bfc6 <__multadd+0x12>
 800bfec:	b30e      	cbz	r6, 800c032 <__multadd+0x7e>
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	42ab      	cmp	r3, r5
 800bff2:	dc19      	bgt.n	800c028 <__multadd+0x74>
 800bff4:	6861      	ldr	r1, [r4, #4]
 800bff6:	4638      	mov	r0, r7
 800bff8:	3101      	adds	r1, #1
 800bffa:	f7ff ff79 	bl	800bef0 <_Balloc>
 800bffe:	4680      	mov	r8, r0
 800c000:	b928      	cbnz	r0, 800c00e <__multadd+0x5a>
 800c002:	4602      	mov	r2, r0
 800c004:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <__multadd+0x84>)
 800c006:	480d      	ldr	r0, [pc, #52]	; (800c03c <__multadd+0x88>)
 800c008:	21b5      	movs	r1, #181	; 0xb5
 800c00a:	f000 fd57 	bl	800cabc <__assert_func>
 800c00e:	6922      	ldr	r2, [r4, #16]
 800c010:	3202      	adds	r2, #2
 800c012:	f104 010c 	add.w	r1, r4, #12
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	300c      	adds	r0, #12
 800c01a:	f7ff ff5b 	bl	800bed4 <memcpy>
 800c01e:	4621      	mov	r1, r4
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ffa5 	bl	800bf70 <_Bfree>
 800c026:	4644      	mov	r4, r8
 800c028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c02c:	3501      	adds	r5, #1
 800c02e:	615e      	str	r6, [r3, #20]
 800c030:	6125      	str	r5, [r4, #16]
 800c032:	4620      	mov	r0, r4
 800c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c038:	0800dd27 	.word	0x0800dd27
 800c03c:	0800dd38 	.word	0x0800dd38

0800c040 <__hi0bits>:
 800c040:	0c03      	lsrs	r3, r0, #16
 800c042:	041b      	lsls	r3, r3, #16
 800c044:	b9d3      	cbnz	r3, 800c07c <__hi0bits+0x3c>
 800c046:	0400      	lsls	r0, r0, #16
 800c048:	2310      	movs	r3, #16
 800c04a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c04e:	bf04      	itt	eq
 800c050:	0200      	lsleq	r0, r0, #8
 800c052:	3308      	addeq	r3, #8
 800c054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c058:	bf04      	itt	eq
 800c05a:	0100      	lsleq	r0, r0, #4
 800c05c:	3304      	addeq	r3, #4
 800c05e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c062:	bf04      	itt	eq
 800c064:	0080      	lsleq	r0, r0, #2
 800c066:	3302      	addeq	r3, #2
 800c068:	2800      	cmp	r0, #0
 800c06a:	db05      	blt.n	800c078 <__hi0bits+0x38>
 800c06c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c070:	f103 0301 	add.w	r3, r3, #1
 800c074:	bf08      	it	eq
 800c076:	2320      	moveq	r3, #32
 800c078:	4618      	mov	r0, r3
 800c07a:	4770      	bx	lr
 800c07c:	2300      	movs	r3, #0
 800c07e:	e7e4      	b.n	800c04a <__hi0bits+0xa>

0800c080 <__lo0bits>:
 800c080:	6803      	ldr	r3, [r0, #0]
 800c082:	f013 0207 	ands.w	r2, r3, #7
 800c086:	4601      	mov	r1, r0
 800c088:	d00b      	beq.n	800c0a2 <__lo0bits+0x22>
 800c08a:	07da      	lsls	r2, r3, #31
 800c08c:	d423      	bmi.n	800c0d6 <__lo0bits+0x56>
 800c08e:	0798      	lsls	r0, r3, #30
 800c090:	bf49      	itett	mi
 800c092:	085b      	lsrmi	r3, r3, #1
 800c094:	089b      	lsrpl	r3, r3, #2
 800c096:	2001      	movmi	r0, #1
 800c098:	600b      	strmi	r3, [r1, #0]
 800c09a:	bf5c      	itt	pl
 800c09c:	600b      	strpl	r3, [r1, #0]
 800c09e:	2002      	movpl	r0, #2
 800c0a0:	4770      	bx	lr
 800c0a2:	b298      	uxth	r0, r3
 800c0a4:	b9a8      	cbnz	r0, 800c0d2 <__lo0bits+0x52>
 800c0a6:	0c1b      	lsrs	r3, r3, #16
 800c0a8:	2010      	movs	r0, #16
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	b90a      	cbnz	r2, 800c0b2 <__lo0bits+0x32>
 800c0ae:	3008      	adds	r0, #8
 800c0b0:	0a1b      	lsrs	r3, r3, #8
 800c0b2:	071a      	lsls	r2, r3, #28
 800c0b4:	bf04      	itt	eq
 800c0b6:	091b      	lsreq	r3, r3, #4
 800c0b8:	3004      	addeq	r0, #4
 800c0ba:	079a      	lsls	r2, r3, #30
 800c0bc:	bf04      	itt	eq
 800c0be:	089b      	lsreq	r3, r3, #2
 800c0c0:	3002      	addeq	r0, #2
 800c0c2:	07da      	lsls	r2, r3, #31
 800c0c4:	d403      	bmi.n	800c0ce <__lo0bits+0x4e>
 800c0c6:	085b      	lsrs	r3, r3, #1
 800c0c8:	f100 0001 	add.w	r0, r0, #1
 800c0cc:	d005      	beq.n	800c0da <__lo0bits+0x5a>
 800c0ce:	600b      	str	r3, [r1, #0]
 800c0d0:	4770      	bx	lr
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	e7e9      	b.n	800c0aa <__lo0bits+0x2a>
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	4770      	bx	lr
 800c0da:	2020      	movs	r0, #32
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <__i2b>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	f7ff ff03 	bl	800bef0 <_Balloc>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	b928      	cbnz	r0, 800c0fa <__i2b+0x1a>
 800c0ee:	4b05      	ldr	r3, [pc, #20]	; (800c104 <__i2b+0x24>)
 800c0f0:	4805      	ldr	r0, [pc, #20]	; (800c108 <__i2b+0x28>)
 800c0f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0f6:	f000 fce1 	bl	800cabc <__assert_func>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	6144      	str	r4, [r0, #20]
 800c0fe:	6103      	str	r3, [r0, #16]
 800c100:	bd10      	pop	{r4, pc}
 800c102:	bf00      	nop
 800c104:	0800dd27 	.word	0x0800dd27
 800c108:	0800dd38 	.word	0x0800dd38

0800c10c <__multiply>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4691      	mov	r9, r2
 800c112:	690a      	ldr	r2, [r1, #16]
 800c114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c118:	429a      	cmp	r2, r3
 800c11a:	bfb8      	it	lt
 800c11c:	460b      	movlt	r3, r1
 800c11e:	460c      	mov	r4, r1
 800c120:	bfbc      	itt	lt
 800c122:	464c      	movlt	r4, r9
 800c124:	4699      	movlt	r9, r3
 800c126:	6927      	ldr	r7, [r4, #16]
 800c128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c12c:	68a3      	ldr	r3, [r4, #8]
 800c12e:	6861      	ldr	r1, [r4, #4]
 800c130:	eb07 060a 	add.w	r6, r7, sl
 800c134:	42b3      	cmp	r3, r6
 800c136:	b085      	sub	sp, #20
 800c138:	bfb8      	it	lt
 800c13a:	3101      	addlt	r1, #1
 800c13c:	f7ff fed8 	bl	800bef0 <_Balloc>
 800c140:	b930      	cbnz	r0, 800c150 <__multiply+0x44>
 800c142:	4602      	mov	r2, r0
 800c144:	4b44      	ldr	r3, [pc, #272]	; (800c258 <__multiply+0x14c>)
 800c146:	4845      	ldr	r0, [pc, #276]	; (800c25c <__multiply+0x150>)
 800c148:	f240 115d 	movw	r1, #349	; 0x15d
 800c14c:	f000 fcb6 	bl	800cabc <__assert_func>
 800c150:	f100 0514 	add.w	r5, r0, #20
 800c154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c158:	462b      	mov	r3, r5
 800c15a:	2200      	movs	r2, #0
 800c15c:	4543      	cmp	r3, r8
 800c15e:	d321      	bcc.n	800c1a4 <__multiply+0x98>
 800c160:	f104 0314 	add.w	r3, r4, #20
 800c164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c168:	f109 0314 	add.w	r3, r9, #20
 800c16c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c170:	9202      	str	r2, [sp, #8]
 800c172:	1b3a      	subs	r2, r7, r4
 800c174:	3a15      	subs	r2, #21
 800c176:	f022 0203 	bic.w	r2, r2, #3
 800c17a:	3204      	adds	r2, #4
 800c17c:	f104 0115 	add.w	r1, r4, #21
 800c180:	428f      	cmp	r7, r1
 800c182:	bf38      	it	cc
 800c184:	2204      	movcc	r2, #4
 800c186:	9201      	str	r2, [sp, #4]
 800c188:	9a02      	ldr	r2, [sp, #8]
 800c18a:	9303      	str	r3, [sp, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d80c      	bhi.n	800c1aa <__multiply+0x9e>
 800c190:	2e00      	cmp	r6, #0
 800c192:	dd03      	ble.n	800c19c <__multiply+0x90>
 800c194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d05a      	beq.n	800c252 <__multiply+0x146>
 800c19c:	6106      	str	r6, [r0, #16]
 800c19e:	b005      	add	sp, #20
 800c1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a4:	f843 2b04 	str.w	r2, [r3], #4
 800c1a8:	e7d8      	b.n	800c15c <__multiply+0x50>
 800c1aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1ae:	f1ba 0f00 	cmp.w	sl, #0
 800c1b2:	d024      	beq.n	800c1fe <__multiply+0xf2>
 800c1b4:	f104 0e14 	add.w	lr, r4, #20
 800c1b8:	46a9      	mov	r9, r5
 800c1ba:	f04f 0c00 	mov.w	ip, #0
 800c1be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1c2:	f8d9 1000 	ldr.w	r1, [r9]
 800c1c6:	fa1f fb82 	uxth.w	fp, r2
 800c1ca:	b289      	uxth	r1, r1
 800c1cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1d4:	f8d9 2000 	ldr.w	r2, [r9]
 800c1d8:	4461      	add	r1, ip
 800c1da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1de:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1e6:	b289      	uxth	r1, r1
 800c1e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1ec:	4577      	cmp	r7, lr
 800c1ee:	f849 1b04 	str.w	r1, [r9], #4
 800c1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1f6:	d8e2      	bhi.n	800c1be <__multiply+0xb2>
 800c1f8:	9a01      	ldr	r2, [sp, #4]
 800c1fa:	f845 c002 	str.w	ip, [r5, r2]
 800c1fe:	9a03      	ldr	r2, [sp, #12]
 800c200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c204:	3304      	adds	r3, #4
 800c206:	f1b9 0f00 	cmp.w	r9, #0
 800c20a:	d020      	beq.n	800c24e <__multiply+0x142>
 800c20c:	6829      	ldr	r1, [r5, #0]
 800c20e:	f104 0c14 	add.w	ip, r4, #20
 800c212:	46ae      	mov	lr, r5
 800c214:	f04f 0a00 	mov.w	sl, #0
 800c218:	f8bc b000 	ldrh.w	fp, [ip]
 800c21c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c220:	fb09 220b 	mla	r2, r9, fp, r2
 800c224:	4492      	add	sl, r2
 800c226:	b289      	uxth	r1, r1
 800c228:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c22c:	f84e 1b04 	str.w	r1, [lr], #4
 800c230:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c234:	f8be 1000 	ldrh.w	r1, [lr]
 800c238:	0c12      	lsrs	r2, r2, #16
 800c23a:	fb09 1102 	mla	r1, r9, r2, r1
 800c23e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c242:	4567      	cmp	r7, ip
 800c244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c248:	d8e6      	bhi.n	800c218 <__multiply+0x10c>
 800c24a:	9a01      	ldr	r2, [sp, #4]
 800c24c:	50a9      	str	r1, [r5, r2]
 800c24e:	3504      	adds	r5, #4
 800c250:	e79a      	b.n	800c188 <__multiply+0x7c>
 800c252:	3e01      	subs	r6, #1
 800c254:	e79c      	b.n	800c190 <__multiply+0x84>
 800c256:	bf00      	nop
 800c258:	0800dd27 	.word	0x0800dd27
 800c25c:	0800dd38 	.word	0x0800dd38

0800c260 <__pow5mult>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	4615      	mov	r5, r2
 800c266:	f012 0203 	ands.w	r2, r2, #3
 800c26a:	4606      	mov	r6, r0
 800c26c:	460f      	mov	r7, r1
 800c26e:	d007      	beq.n	800c280 <__pow5mult+0x20>
 800c270:	4c25      	ldr	r4, [pc, #148]	; (800c308 <__pow5mult+0xa8>)
 800c272:	3a01      	subs	r2, #1
 800c274:	2300      	movs	r3, #0
 800c276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c27a:	f7ff fe9b 	bl	800bfb4 <__multadd>
 800c27e:	4607      	mov	r7, r0
 800c280:	10ad      	asrs	r5, r5, #2
 800c282:	d03d      	beq.n	800c300 <__pow5mult+0xa0>
 800c284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c286:	b97c      	cbnz	r4, 800c2a8 <__pow5mult+0x48>
 800c288:	2010      	movs	r0, #16
 800c28a:	f7ff fe1b 	bl	800bec4 <malloc>
 800c28e:	4602      	mov	r2, r0
 800c290:	6270      	str	r0, [r6, #36]	; 0x24
 800c292:	b928      	cbnz	r0, 800c2a0 <__pow5mult+0x40>
 800c294:	4b1d      	ldr	r3, [pc, #116]	; (800c30c <__pow5mult+0xac>)
 800c296:	481e      	ldr	r0, [pc, #120]	; (800c310 <__pow5mult+0xb0>)
 800c298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c29c:	f000 fc0e 	bl	800cabc <__assert_func>
 800c2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2a4:	6004      	str	r4, [r0, #0]
 800c2a6:	60c4      	str	r4, [r0, #12]
 800c2a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2b0:	b94c      	cbnz	r4, 800c2c6 <__pow5mult+0x66>
 800c2b2:	f240 2171 	movw	r1, #625	; 0x271
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ff12 	bl	800c0e0 <__i2b>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	f04f 0900 	mov.w	r9, #0
 800c2ca:	07eb      	lsls	r3, r5, #31
 800c2cc:	d50a      	bpl.n	800c2e4 <__pow5mult+0x84>
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ff1a 	bl	800c10c <__multiply>
 800c2d8:	4639      	mov	r1, r7
 800c2da:	4680      	mov	r8, r0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff fe47 	bl	800bf70 <_Bfree>
 800c2e2:	4647      	mov	r7, r8
 800c2e4:	106d      	asrs	r5, r5, #1
 800c2e6:	d00b      	beq.n	800c300 <__pow5mult+0xa0>
 800c2e8:	6820      	ldr	r0, [r4, #0]
 800c2ea:	b938      	cbnz	r0, 800c2fc <__pow5mult+0x9c>
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff ff0b 	bl	800c10c <__multiply>
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	f8c0 9000 	str.w	r9, [r0]
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	e7e4      	b.n	800c2ca <__pow5mult+0x6a>
 800c300:	4638      	mov	r0, r7
 800c302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c306:	bf00      	nop
 800c308:	0800de88 	.word	0x0800de88
 800c30c:	0800dcb5 	.word	0x0800dcb5
 800c310:	0800dd38 	.word	0x0800dd38

0800c314 <__lshift>:
 800c314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c318:	460c      	mov	r4, r1
 800c31a:	6849      	ldr	r1, [r1, #4]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c322:	68a3      	ldr	r3, [r4, #8]
 800c324:	4607      	mov	r7, r0
 800c326:	4691      	mov	r9, r2
 800c328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c32c:	f108 0601 	add.w	r6, r8, #1
 800c330:	42b3      	cmp	r3, r6
 800c332:	db0b      	blt.n	800c34c <__lshift+0x38>
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff fddb 	bl	800bef0 <_Balloc>
 800c33a:	4605      	mov	r5, r0
 800c33c:	b948      	cbnz	r0, 800c352 <__lshift+0x3e>
 800c33e:	4602      	mov	r2, r0
 800c340:	4b2a      	ldr	r3, [pc, #168]	; (800c3ec <__lshift+0xd8>)
 800c342:	482b      	ldr	r0, [pc, #172]	; (800c3f0 <__lshift+0xdc>)
 800c344:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c348:	f000 fbb8 	bl	800cabc <__assert_func>
 800c34c:	3101      	adds	r1, #1
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	e7ee      	b.n	800c330 <__lshift+0x1c>
 800c352:	2300      	movs	r3, #0
 800c354:	f100 0114 	add.w	r1, r0, #20
 800c358:	f100 0210 	add.w	r2, r0, #16
 800c35c:	4618      	mov	r0, r3
 800c35e:	4553      	cmp	r3, sl
 800c360:	db37      	blt.n	800c3d2 <__lshift+0xbe>
 800c362:	6920      	ldr	r0, [r4, #16]
 800c364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c368:	f104 0314 	add.w	r3, r4, #20
 800c36c:	f019 091f 	ands.w	r9, r9, #31
 800c370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c374:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c378:	d02f      	beq.n	800c3da <__lshift+0xc6>
 800c37a:	f1c9 0e20 	rsb	lr, r9, #32
 800c37e:	468a      	mov	sl, r1
 800c380:	f04f 0c00 	mov.w	ip, #0
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	fa02 f209 	lsl.w	r2, r2, r9
 800c38a:	ea42 020c 	orr.w	r2, r2, ip
 800c38e:	f84a 2b04 	str.w	r2, [sl], #4
 800c392:	f853 2b04 	ldr.w	r2, [r3], #4
 800c396:	4298      	cmp	r0, r3
 800c398:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c39c:	d8f2      	bhi.n	800c384 <__lshift+0x70>
 800c39e:	1b03      	subs	r3, r0, r4
 800c3a0:	3b15      	subs	r3, #21
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	f104 0215 	add.w	r2, r4, #21
 800c3ac:	4290      	cmp	r0, r2
 800c3ae:	bf38      	it	cc
 800c3b0:	2304      	movcc	r3, #4
 800c3b2:	f841 c003 	str.w	ip, [r1, r3]
 800c3b6:	f1bc 0f00 	cmp.w	ip, #0
 800c3ba:	d001      	beq.n	800c3c0 <__lshift+0xac>
 800c3bc:	f108 0602 	add.w	r6, r8, #2
 800c3c0:	3e01      	subs	r6, #1
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	612e      	str	r6, [r5, #16]
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	f7ff fdd2 	bl	800bf70 <_Bfree>
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	e7c1      	b.n	800c35e <__lshift+0x4a>
 800c3da:	3904      	subs	r1, #4
 800c3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3e4:	4298      	cmp	r0, r3
 800c3e6:	d8f9      	bhi.n	800c3dc <__lshift+0xc8>
 800c3e8:	e7ea      	b.n	800c3c0 <__lshift+0xac>
 800c3ea:	bf00      	nop
 800c3ec:	0800dd27 	.word	0x0800dd27
 800c3f0:	0800dd38 	.word	0x0800dd38

0800c3f4 <__mcmp>:
 800c3f4:	b530      	push	{r4, r5, lr}
 800c3f6:	6902      	ldr	r2, [r0, #16]
 800c3f8:	690c      	ldr	r4, [r1, #16]
 800c3fa:	1b12      	subs	r2, r2, r4
 800c3fc:	d10e      	bne.n	800c41c <__mcmp+0x28>
 800c3fe:	f100 0314 	add.w	r3, r0, #20
 800c402:	3114      	adds	r1, #20
 800c404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c40c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c414:	42a5      	cmp	r5, r4
 800c416:	d003      	beq.n	800c420 <__mcmp+0x2c>
 800c418:	d305      	bcc.n	800c426 <__mcmp+0x32>
 800c41a:	2201      	movs	r2, #1
 800c41c:	4610      	mov	r0, r2
 800c41e:	bd30      	pop	{r4, r5, pc}
 800c420:	4283      	cmp	r3, r0
 800c422:	d3f3      	bcc.n	800c40c <__mcmp+0x18>
 800c424:	e7fa      	b.n	800c41c <__mcmp+0x28>
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e7f7      	b.n	800c41c <__mcmp+0x28>

0800c42c <__mdiff>:
 800c42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	460c      	mov	r4, r1
 800c432:	4606      	mov	r6, r0
 800c434:	4611      	mov	r1, r2
 800c436:	4620      	mov	r0, r4
 800c438:	4690      	mov	r8, r2
 800c43a:	f7ff ffdb 	bl	800c3f4 <__mcmp>
 800c43e:	1e05      	subs	r5, r0, #0
 800c440:	d110      	bne.n	800c464 <__mdiff+0x38>
 800c442:	4629      	mov	r1, r5
 800c444:	4630      	mov	r0, r6
 800c446:	f7ff fd53 	bl	800bef0 <_Balloc>
 800c44a:	b930      	cbnz	r0, 800c45a <__mdiff+0x2e>
 800c44c:	4b3a      	ldr	r3, [pc, #232]	; (800c538 <__mdiff+0x10c>)
 800c44e:	4602      	mov	r2, r0
 800c450:	f240 2132 	movw	r1, #562	; 0x232
 800c454:	4839      	ldr	r0, [pc, #228]	; (800c53c <__mdiff+0x110>)
 800c456:	f000 fb31 	bl	800cabc <__assert_func>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c464:	bfa4      	itt	ge
 800c466:	4643      	movge	r3, r8
 800c468:	46a0      	movge	r8, r4
 800c46a:	4630      	mov	r0, r6
 800c46c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c470:	bfa6      	itte	ge
 800c472:	461c      	movge	r4, r3
 800c474:	2500      	movge	r5, #0
 800c476:	2501      	movlt	r5, #1
 800c478:	f7ff fd3a 	bl	800bef0 <_Balloc>
 800c47c:	b920      	cbnz	r0, 800c488 <__mdiff+0x5c>
 800c47e:	4b2e      	ldr	r3, [pc, #184]	; (800c538 <__mdiff+0x10c>)
 800c480:	4602      	mov	r2, r0
 800c482:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c486:	e7e5      	b.n	800c454 <__mdiff+0x28>
 800c488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c48c:	6926      	ldr	r6, [r4, #16]
 800c48e:	60c5      	str	r5, [r0, #12]
 800c490:	f104 0914 	add.w	r9, r4, #20
 800c494:	f108 0514 	add.w	r5, r8, #20
 800c498:	f100 0e14 	add.w	lr, r0, #20
 800c49c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4a4:	f108 0210 	add.w	r2, r8, #16
 800c4a8:	46f2      	mov	sl, lr
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4b4:	fa1f f883 	uxth.w	r8, r3
 800c4b8:	fa11 f18b 	uxtah	r1, r1, fp
 800c4bc:	0c1b      	lsrs	r3, r3, #16
 800c4be:	eba1 0808 	sub.w	r8, r1, r8
 800c4c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4ca:	fa1f f888 	uxth.w	r8, r8
 800c4ce:	1419      	asrs	r1, r3, #16
 800c4d0:	454e      	cmp	r6, r9
 800c4d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4d6:	f84a 3b04 	str.w	r3, [sl], #4
 800c4da:	d8e7      	bhi.n	800c4ac <__mdiff+0x80>
 800c4dc:	1b33      	subs	r3, r6, r4
 800c4de:	3b15      	subs	r3, #21
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	3415      	adds	r4, #21
 800c4e8:	42a6      	cmp	r6, r4
 800c4ea:	bf38      	it	cc
 800c4ec:	2304      	movcc	r3, #4
 800c4ee:	441d      	add	r5, r3
 800c4f0:	4473      	add	r3, lr
 800c4f2:	469e      	mov	lr, r3
 800c4f4:	462e      	mov	r6, r5
 800c4f6:	4566      	cmp	r6, ip
 800c4f8:	d30e      	bcc.n	800c518 <__mdiff+0xec>
 800c4fa:	f10c 0203 	add.w	r2, ip, #3
 800c4fe:	1b52      	subs	r2, r2, r5
 800c500:	f022 0203 	bic.w	r2, r2, #3
 800c504:	3d03      	subs	r5, #3
 800c506:	45ac      	cmp	ip, r5
 800c508:	bf38      	it	cc
 800c50a:	2200      	movcc	r2, #0
 800c50c:	441a      	add	r2, r3
 800c50e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c512:	b17b      	cbz	r3, 800c534 <__mdiff+0x108>
 800c514:	6107      	str	r7, [r0, #16]
 800c516:	e7a3      	b.n	800c460 <__mdiff+0x34>
 800c518:	f856 8b04 	ldr.w	r8, [r6], #4
 800c51c:	fa11 f288 	uxtah	r2, r1, r8
 800c520:	1414      	asrs	r4, r2, #16
 800c522:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c526:	b292      	uxth	r2, r2
 800c528:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c52c:	f84e 2b04 	str.w	r2, [lr], #4
 800c530:	1421      	asrs	r1, r4, #16
 800c532:	e7e0      	b.n	800c4f6 <__mdiff+0xca>
 800c534:	3f01      	subs	r7, #1
 800c536:	e7ea      	b.n	800c50e <__mdiff+0xe2>
 800c538:	0800dd27 	.word	0x0800dd27
 800c53c:	0800dd38 	.word	0x0800dd38

0800c540 <__d2b>:
 800c540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c544:	4689      	mov	r9, r1
 800c546:	2101      	movs	r1, #1
 800c548:	ec57 6b10 	vmov	r6, r7, d0
 800c54c:	4690      	mov	r8, r2
 800c54e:	f7ff fccf 	bl	800bef0 <_Balloc>
 800c552:	4604      	mov	r4, r0
 800c554:	b930      	cbnz	r0, 800c564 <__d2b+0x24>
 800c556:	4602      	mov	r2, r0
 800c558:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <__d2b+0xb0>)
 800c55a:	4826      	ldr	r0, [pc, #152]	; (800c5f4 <__d2b+0xb4>)
 800c55c:	f240 310a 	movw	r1, #778	; 0x30a
 800c560:	f000 faac 	bl	800cabc <__assert_func>
 800c564:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c56c:	bb35      	cbnz	r5, 800c5bc <__d2b+0x7c>
 800c56e:	2e00      	cmp	r6, #0
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	d028      	beq.n	800c5c6 <__d2b+0x86>
 800c574:	4668      	mov	r0, sp
 800c576:	9600      	str	r6, [sp, #0]
 800c578:	f7ff fd82 	bl	800c080 <__lo0bits>
 800c57c:	9900      	ldr	r1, [sp, #0]
 800c57e:	b300      	cbz	r0, 800c5c2 <__d2b+0x82>
 800c580:	9a01      	ldr	r2, [sp, #4]
 800c582:	f1c0 0320 	rsb	r3, r0, #32
 800c586:	fa02 f303 	lsl.w	r3, r2, r3
 800c58a:	430b      	orrs	r3, r1
 800c58c:	40c2      	lsrs	r2, r0
 800c58e:	6163      	str	r3, [r4, #20]
 800c590:	9201      	str	r2, [sp, #4]
 800c592:	9b01      	ldr	r3, [sp, #4]
 800c594:	61a3      	str	r3, [r4, #24]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bf14      	ite	ne
 800c59a:	2202      	movne	r2, #2
 800c59c:	2201      	moveq	r2, #1
 800c59e:	6122      	str	r2, [r4, #16]
 800c5a0:	b1d5      	cbz	r5, 800c5d8 <__d2b+0x98>
 800c5a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5a6:	4405      	add	r5, r0
 800c5a8:	f8c9 5000 	str.w	r5, [r9]
 800c5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5b0:	f8c8 0000 	str.w	r0, [r8]
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	b003      	add	sp, #12
 800c5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5c0:	e7d5      	b.n	800c56e <__d2b+0x2e>
 800c5c2:	6161      	str	r1, [r4, #20]
 800c5c4:	e7e5      	b.n	800c592 <__d2b+0x52>
 800c5c6:	a801      	add	r0, sp, #4
 800c5c8:	f7ff fd5a 	bl	800c080 <__lo0bits>
 800c5cc:	9b01      	ldr	r3, [sp, #4]
 800c5ce:	6163      	str	r3, [r4, #20]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	6122      	str	r2, [r4, #16]
 800c5d4:	3020      	adds	r0, #32
 800c5d6:	e7e3      	b.n	800c5a0 <__d2b+0x60>
 800c5d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5e0:	f8c9 0000 	str.w	r0, [r9]
 800c5e4:	6918      	ldr	r0, [r3, #16]
 800c5e6:	f7ff fd2b 	bl	800c040 <__hi0bits>
 800c5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5ee:	e7df      	b.n	800c5b0 <__d2b+0x70>
 800c5f0:	0800dd27 	.word	0x0800dd27
 800c5f4:	0800dd38 	.word	0x0800dd38

0800c5f8 <_calloc_r>:
 800c5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5fa:	fba1 2402 	umull	r2, r4, r1, r2
 800c5fe:	b94c      	cbnz	r4, 800c614 <_calloc_r+0x1c>
 800c600:	4611      	mov	r1, r2
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	f000 f87a 	bl	800c6fc <_malloc_r>
 800c608:	9a01      	ldr	r2, [sp, #4]
 800c60a:	4605      	mov	r5, r0
 800c60c:	b930      	cbnz	r0, 800c61c <_calloc_r+0x24>
 800c60e:	4628      	mov	r0, r5
 800c610:	b003      	add	sp, #12
 800c612:	bd30      	pop	{r4, r5, pc}
 800c614:	220c      	movs	r2, #12
 800c616:	6002      	str	r2, [r0, #0]
 800c618:	2500      	movs	r5, #0
 800c61a:	e7f8      	b.n	800c60e <_calloc_r+0x16>
 800c61c:	4621      	mov	r1, r4
 800c61e:	f7fe f941 	bl	800a8a4 <memset>
 800c622:	e7f4      	b.n	800c60e <_calloc_r+0x16>

0800c624 <_free_r>:
 800c624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c626:	2900      	cmp	r1, #0
 800c628:	d044      	beq.n	800c6b4 <_free_r+0x90>
 800c62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62e:	9001      	str	r0, [sp, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f1a1 0404 	sub.w	r4, r1, #4
 800c636:	bfb8      	it	lt
 800c638:	18e4      	addlt	r4, r4, r3
 800c63a:	f000 fa9b 	bl	800cb74 <__malloc_lock>
 800c63e:	4a1e      	ldr	r2, [pc, #120]	; (800c6b8 <_free_r+0x94>)
 800c640:	9801      	ldr	r0, [sp, #4]
 800c642:	6813      	ldr	r3, [r2, #0]
 800c644:	b933      	cbnz	r3, 800c654 <_free_r+0x30>
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	6014      	str	r4, [r2, #0]
 800c64a:	b003      	add	sp, #12
 800c64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c650:	f000 ba96 	b.w	800cb80 <__malloc_unlock>
 800c654:	42a3      	cmp	r3, r4
 800c656:	d908      	bls.n	800c66a <_free_r+0x46>
 800c658:	6825      	ldr	r5, [r4, #0]
 800c65a:	1961      	adds	r1, r4, r5
 800c65c:	428b      	cmp	r3, r1
 800c65e:	bf01      	itttt	eq
 800c660:	6819      	ldreq	r1, [r3, #0]
 800c662:	685b      	ldreq	r3, [r3, #4]
 800c664:	1949      	addeq	r1, r1, r5
 800c666:	6021      	streq	r1, [r4, #0]
 800c668:	e7ed      	b.n	800c646 <_free_r+0x22>
 800c66a:	461a      	mov	r2, r3
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	b10b      	cbz	r3, 800c674 <_free_r+0x50>
 800c670:	42a3      	cmp	r3, r4
 800c672:	d9fa      	bls.n	800c66a <_free_r+0x46>
 800c674:	6811      	ldr	r1, [r2, #0]
 800c676:	1855      	adds	r5, r2, r1
 800c678:	42a5      	cmp	r5, r4
 800c67a:	d10b      	bne.n	800c694 <_free_r+0x70>
 800c67c:	6824      	ldr	r4, [r4, #0]
 800c67e:	4421      	add	r1, r4
 800c680:	1854      	adds	r4, r2, r1
 800c682:	42a3      	cmp	r3, r4
 800c684:	6011      	str	r1, [r2, #0]
 800c686:	d1e0      	bne.n	800c64a <_free_r+0x26>
 800c688:	681c      	ldr	r4, [r3, #0]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	6053      	str	r3, [r2, #4]
 800c68e:	4421      	add	r1, r4
 800c690:	6011      	str	r1, [r2, #0]
 800c692:	e7da      	b.n	800c64a <_free_r+0x26>
 800c694:	d902      	bls.n	800c69c <_free_r+0x78>
 800c696:	230c      	movs	r3, #12
 800c698:	6003      	str	r3, [r0, #0]
 800c69a:	e7d6      	b.n	800c64a <_free_r+0x26>
 800c69c:	6825      	ldr	r5, [r4, #0]
 800c69e:	1961      	adds	r1, r4, r5
 800c6a0:	428b      	cmp	r3, r1
 800c6a2:	bf04      	itt	eq
 800c6a4:	6819      	ldreq	r1, [r3, #0]
 800c6a6:	685b      	ldreq	r3, [r3, #4]
 800c6a8:	6063      	str	r3, [r4, #4]
 800c6aa:	bf04      	itt	eq
 800c6ac:	1949      	addeq	r1, r1, r5
 800c6ae:	6021      	streq	r1, [r4, #0]
 800c6b0:	6054      	str	r4, [r2, #4]
 800c6b2:	e7ca      	b.n	800c64a <_free_r+0x26>
 800c6b4:	b003      	add	sp, #12
 800c6b6:	bd30      	pop	{r4, r5, pc}
 800c6b8:	20002ab8 	.word	0x20002ab8

0800c6bc <sbrk_aligned>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	4e0e      	ldr	r6, [pc, #56]	; (800c6f8 <sbrk_aligned+0x3c>)
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	6831      	ldr	r1, [r6, #0]
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	b911      	cbnz	r1, 800c6ce <sbrk_aligned+0x12>
 800c6c8:	f000 f9e8 	bl	800ca9c <_sbrk_r>
 800c6cc:	6030      	str	r0, [r6, #0]
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f000 f9e3 	bl	800ca9c <_sbrk_r>
 800c6d6:	1c43      	adds	r3, r0, #1
 800c6d8:	d00a      	beq.n	800c6f0 <sbrk_aligned+0x34>
 800c6da:	1cc4      	adds	r4, r0, #3
 800c6dc:	f024 0403 	bic.w	r4, r4, #3
 800c6e0:	42a0      	cmp	r0, r4
 800c6e2:	d007      	beq.n	800c6f4 <sbrk_aligned+0x38>
 800c6e4:	1a21      	subs	r1, r4, r0
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f000 f9d8 	bl	800ca9c <_sbrk_r>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	d101      	bne.n	800c6f4 <sbrk_aligned+0x38>
 800c6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	20002abc 	.word	0x20002abc

0800c6fc <_malloc_r>:
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c700:	1ccd      	adds	r5, r1, #3
 800c702:	f025 0503 	bic.w	r5, r5, #3
 800c706:	3508      	adds	r5, #8
 800c708:	2d0c      	cmp	r5, #12
 800c70a:	bf38      	it	cc
 800c70c:	250c      	movcc	r5, #12
 800c70e:	2d00      	cmp	r5, #0
 800c710:	4607      	mov	r7, r0
 800c712:	db01      	blt.n	800c718 <_malloc_r+0x1c>
 800c714:	42a9      	cmp	r1, r5
 800c716:	d905      	bls.n	800c724 <_malloc_r+0x28>
 800c718:	230c      	movs	r3, #12
 800c71a:	603b      	str	r3, [r7, #0]
 800c71c:	2600      	movs	r6, #0
 800c71e:	4630      	mov	r0, r6
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	4e2e      	ldr	r6, [pc, #184]	; (800c7e0 <_malloc_r+0xe4>)
 800c726:	f000 fa25 	bl	800cb74 <__malloc_lock>
 800c72a:	6833      	ldr	r3, [r6, #0]
 800c72c:	461c      	mov	r4, r3
 800c72e:	bb34      	cbnz	r4, 800c77e <_malloc_r+0x82>
 800c730:	4629      	mov	r1, r5
 800c732:	4638      	mov	r0, r7
 800c734:	f7ff ffc2 	bl	800c6bc <sbrk_aligned>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	4604      	mov	r4, r0
 800c73c:	d14d      	bne.n	800c7da <_malloc_r+0xde>
 800c73e:	6834      	ldr	r4, [r6, #0]
 800c740:	4626      	mov	r6, r4
 800c742:	2e00      	cmp	r6, #0
 800c744:	d140      	bne.n	800c7c8 <_malloc_r+0xcc>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	4631      	mov	r1, r6
 800c74a:	4638      	mov	r0, r7
 800c74c:	eb04 0803 	add.w	r8, r4, r3
 800c750:	f000 f9a4 	bl	800ca9c <_sbrk_r>
 800c754:	4580      	cmp	r8, r0
 800c756:	d13a      	bne.n	800c7ce <_malloc_r+0xd2>
 800c758:	6821      	ldr	r1, [r4, #0]
 800c75a:	3503      	adds	r5, #3
 800c75c:	1a6d      	subs	r5, r5, r1
 800c75e:	f025 0503 	bic.w	r5, r5, #3
 800c762:	3508      	adds	r5, #8
 800c764:	2d0c      	cmp	r5, #12
 800c766:	bf38      	it	cc
 800c768:	250c      	movcc	r5, #12
 800c76a:	4629      	mov	r1, r5
 800c76c:	4638      	mov	r0, r7
 800c76e:	f7ff ffa5 	bl	800c6bc <sbrk_aligned>
 800c772:	3001      	adds	r0, #1
 800c774:	d02b      	beq.n	800c7ce <_malloc_r+0xd2>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	442b      	add	r3, r5
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	e00e      	b.n	800c79c <_malloc_r+0xa0>
 800c77e:	6822      	ldr	r2, [r4, #0]
 800c780:	1b52      	subs	r2, r2, r5
 800c782:	d41e      	bmi.n	800c7c2 <_malloc_r+0xc6>
 800c784:	2a0b      	cmp	r2, #11
 800c786:	d916      	bls.n	800c7b6 <_malloc_r+0xba>
 800c788:	1961      	adds	r1, r4, r5
 800c78a:	42a3      	cmp	r3, r4
 800c78c:	6025      	str	r5, [r4, #0]
 800c78e:	bf18      	it	ne
 800c790:	6059      	strne	r1, [r3, #4]
 800c792:	6863      	ldr	r3, [r4, #4]
 800c794:	bf08      	it	eq
 800c796:	6031      	streq	r1, [r6, #0]
 800c798:	5162      	str	r2, [r4, r5]
 800c79a:	604b      	str	r3, [r1, #4]
 800c79c:	4638      	mov	r0, r7
 800c79e:	f104 060b 	add.w	r6, r4, #11
 800c7a2:	f000 f9ed 	bl	800cb80 <__malloc_unlock>
 800c7a6:	f026 0607 	bic.w	r6, r6, #7
 800c7aa:	1d23      	adds	r3, r4, #4
 800c7ac:	1af2      	subs	r2, r6, r3
 800c7ae:	d0b6      	beq.n	800c71e <_malloc_r+0x22>
 800c7b0:	1b9b      	subs	r3, r3, r6
 800c7b2:	50a3      	str	r3, [r4, r2]
 800c7b4:	e7b3      	b.n	800c71e <_malloc_r+0x22>
 800c7b6:	6862      	ldr	r2, [r4, #4]
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	bf0c      	ite	eq
 800c7bc:	6032      	streq	r2, [r6, #0]
 800c7be:	605a      	strne	r2, [r3, #4]
 800c7c0:	e7ec      	b.n	800c79c <_malloc_r+0xa0>
 800c7c2:	4623      	mov	r3, r4
 800c7c4:	6864      	ldr	r4, [r4, #4]
 800c7c6:	e7b2      	b.n	800c72e <_malloc_r+0x32>
 800c7c8:	4634      	mov	r4, r6
 800c7ca:	6876      	ldr	r6, [r6, #4]
 800c7cc:	e7b9      	b.n	800c742 <_malloc_r+0x46>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	603b      	str	r3, [r7, #0]
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	f000 f9d4 	bl	800cb80 <__malloc_unlock>
 800c7d8:	e7a1      	b.n	800c71e <_malloc_r+0x22>
 800c7da:	6025      	str	r5, [r4, #0]
 800c7dc:	e7de      	b.n	800c79c <_malloc_r+0xa0>
 800c7de:	bf00      	nop
 800c7e0:	20002ab8 	.word	0x20002ab8

0800c7e4 <__ssputs_r>:
 800c7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	688e      	ldr	r6, [r1, #8]
 800c7ea:	429e      	cmp	r6, r3
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	4690      	mov	r8, r2
 800c7f2:	461f      	mov	r7, r3
 800c7f4:	d838      	bhi.n	800c868 <__ssputs_r+0x84>
 800c7f6:	898a      	ldrh	r2, [r1, #12]
 800c7f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7fc:	d032      	beq.n	800c864 <__ssputs_r+0x80>
 800c7fe:	6825      	ldr	r5, [r4, #0]
 800c800:	6909      	ldr	r1, [r1, #16]
 800c802:	eba5 0901 	sub.w	r9, r5, r1
 800c806:	6965      	ldr	r5, [r4, #20]
 800c808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c810:	3301      	adds	r3, #1
 800c812:	444b      	add	r3, r9
 800c814:	106d      	asrs	r5, r5, #1
 800c816:	429d      	cmp	r5, r3
 800c818:	bf38      	it	cc
 800c81a:	461d      	movcc	r5, r3
 800c81c:	0553      	lsls	r3, r2, #21
 800c81e:	d531      	bpl.n	800c884 <__ssputs_r+0xa0>
 800c820:	4629      	mov	r1, r5
 800c822:	f7ff ff6b 	bl	800c6fc <_malloc_r>
 800c826:	4606      	mov	r6, r0
 800c828:	b950      	cbnz	r0, 800c840 <__ssputs_r+0x5c>
 800c82a:	230c      	movs	r3, #12
 800c82c:	f8ca 3000 	str.w	r3, [sl]
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c840:	6921      	ldr	r1, [r4, #16]
 800c842:	464a      	mov	r2, r9
 800c844:	f7ff fb46 	bl	800bed4 <memcpy>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	6126      	str	r6, [r4, #16]
 800c856:	6165      	str	r5, [r4, #20]
 800c858:	444e      	add	r6, r9
 800c85a:	eba5 0509 	sub.w	r5, r5, r9
 800c85e:	6026      	str	r6, [r4, #0]
 800c860:	60a5      	str	r5, [r4, #8]
 800c862:	463e      	mov	r6, r7
 800c864:	42be      	cmp	r6, r7
 800c866:	d900      	bls.n	800c86a <__ssputs_r+0x86>
 800c868:	463e      	mov	r6, r7
 800c86a:	6820      	ldr	r0, [r4, #0]
 800c86c:	4632      	mov	r2, r6
 800c86e:	4641      	mov	r1, r8
 800c870:	f000 f966 	bl	800cb40 <memmove>
 800c874:	68a3      	ldr	r3, [r4, #8]
 800c876:	1b9b      	subs	r3, r3, r6
 800c878:	60a3      	str	r3, [r4, #8]
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	4433      	add	r3, r6
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	2000      	movs	r0, #0
 800c882:	e7db      	b.n	800c83c <__ssputs_r+0x58>
 800c884:	462a      	mov	r2, r5
 800c886:	f000 f981 	bl	800cb8c <_realloc_r>
 800c88a:	4606      	mov	r6, r0
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d1e1      	bne.n	800c854 <__ssputs_r+0x70>
 800c890:	6921      	ldr	r1, [r4, #16]
 800c892:	4650      	mov	r0, sl
 800c894:	f7ff fec6 	bl	800c624 <_free_r>
 800c898:	e7c7      	b.n	800c82a <__ssputs_r+0x46>
	...

0800c89c <_svfiprintf_r>:
 800c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a0:	4698      	mov	r8, r3
 800c8a2:	898b      	ldrh	r3, [r1, #12]
 800c8a4:	061b      	lsls	r3, r3, #24
 800c8a6:	b09d      	sub	sp, #116	; 0x74
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	4614      	mov	r4, r2
 800c8ae:	d50e      	bpl.n	800c8ce <_svfiprintf_r+0x32>
 800c8b0:	690b      	ldr	r3, [r1, #16]
 800c8b2:	b963      	cbnz	r3, 800c8ce <_svfiprintf_r+0x32>
 800c8b4:	2140      	movs	r1, #64	; 0x40
 800c8b6:	f7ff ff21 	bl	800c6fc <_malloc_r>
 800c8ba:	6028      	str	r0, [r5, #0]
 800c8bc:	6128      	str	r0, [r5, #16]
 800c8be:	b920      	cbnz	r0, 800c8ca <_svfiprintf_r+0x2e>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	e0d1      	b.n	800ca6e <_svfiprintf_r+0x1d2>
 800c8ca:	2340      	movs	r3, #64	; 0x40
 800c8cc:	616b      	str	r3, [r5, #20]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d2:	2320      	movs	r3, #32
 800c8d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8dc:	2330      	movs	r3, #48	; 0x30
 800c8de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca88 <_svfiprintf_r+0x1ec>
 800c8e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e6:	f04f 0901 	mov.w	r9, #1
 800c8ea:	4623      	mov	r3, r4
 800c8ec:	469a      	mov	sl, r3
 800c8ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f2:	b10a      	cbz	r2, 800c8f8 <_svfiprintf_r+0x5c>
 800c8f4:	2a25      	cmp	r2, #37	; 0x25
 800c8f6:	d1f9      	bne.n	800c8ec <_svfiprintf_r+0x50>
 800c8f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c8fc:	d00b      	beq.n	800c916 <_svfiprintf_r+0x7a>
 800c8fe:	465b      	mov	r3, fp
 800c900:	4622      	mov	r2, r4
 800c902:	4629      	mov	r1, r5
 800c904:	4638      	mov	r0, r7
 800c906:	f7ff ff6d 	bl	800c7e4 <__ssputs_r>
 800c90a:	3001      	adds	r0, #1
 800c90c:	f000 80aa 	beq.w	800ca64 <_svfiprintf_r+0x1c8>
 800c910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c912:	445a      	add	r2, fp
 800c914:	9209      	str	r2, [sp, #36]	; 0x24
 800c916:	f89a 3000 	ldrb.w	r3, [sl]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 80a2 	beq.w	800ca64 <_svfiprintf_r+0x1c8>
 800c920:	2300      	movs	r3, #0
 800c922:	f04f 32ff 	mov.w	r2, #4294967295
 800c926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92a:	f10a 0a01 	add.w	sl, sl, #1
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c936:	931a      	str	r3, [sp, #104]	; 0x68
 800c938:	4654      	mov	r4, sl
 800c93a:	2205      	movs	r2, #5
 800c93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c940:	4851      	ldr	r0, [pc, #324]	; (800ca88 <_svfiprintf_r+0x1ec>)
 800c942:	f7f3 fc4d 	bl	80001e0 <memchr>
 800c946:	9a04      	ldr	r2, [sp, #16]
 800c948:	b9d8      	cbnz	r0, 800c982 <_svfiprintf_r+0xe6>
 800c94a:	06d0      	lsls	r0, r2, #27
 800c94c:	bf44      	itt	mi
 800c94e:	2320      	movmi	r3, #32
 800c950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c954:	0711      	lsls	r1, r2, #28
 800c956:	bf44      	itt	mi
 800c958:	232b      	movmi	r3, #43	; 0x2b
 800c95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c95e:	f89a 3000 	ldrb.w	r3, [sl]
 800c962:	2b2a      	cmp	r3, #42	; 0x2a
 800c964:	d015      	beq.n	800c992 <_svfiprintf_r+0xf6>
 800c966:	9a07      	ldr	r2, [sp, #28]
 800c968:	4654      	mov	r4, sl
 800c96a:	2000      	movs	r0, #0
 800c96c:	f04f 0c0a 	mov.w	ip, #10
 800c970:	4621      	mov	r1, r4
 800c972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c976:	3b30      	subs	r3, #48	; 0x30
 800c978:	2b09      	cmp	r3, #9
 800c97a:	d94e      	bls.n	800ca1a <_svfiprintf_r+0x17e>
 800c97c:	b1b0      	cbz	r0, 800c9ac <_svfiprintf_r+0x110>
 800c97e:	9207      	str	r2, [sp, #28]
 800c980:	e014      	b.n	800c9ac <_svfiprintf_r+0x110>
 800c982:	eba0 0308 	sub.w	r3, r0, r8
 800c986:	fa09 f303 	lsl.w	r3, r9, r3
 800c98a:	4313      	orrs	r3, r2
 800c98c:	9304      	str	r3, [sp, #16]
 800c98e:	46a2      	mov	sl, r4
 800c990:	e7d2      	b.n	800c938 <_svfiprintf_r+0x9c>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	1d19      	adds	r1, r3, #4
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	9103      	str	r1, [sp, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	bfbb      	ittet	lt
 800c99e:	425b      	neglt	r3, r3
 800c9a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a4:	9307      	strge	r3, [sp, #28]
 800c9a6:	9307      	strlt	r3, [sp, #28]
 800c9a8:	bfb8      	it	lt
 800c9aa:	9204      	strlt	r2, [sp, #16]
 800c9ac:	7823      	ldrb	r3, [r4, #0]
 800c9ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c9b0:	d10c      	bne.n	800c9cc <_svfiprintf_r+0x130>
 800c9b2:	7863      	ldrb	r3, [r4, #1]
 800c9b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b6:	d135      	bne.n	800ca24 <_svfiprintf_r+0x188>
 800c9b8:	9b03      	ldr	r3, [sp, #12]
 800c9ba:	1d1a      	adds	r2, r3, #4
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	9203      	str	r2, [sp, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	bfb8      	it	lt
 800c9c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9c8:	3402      	adds	r4, #2
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca98 <_svfiprintf_r+0x1fc>
 800c9d0:	7821      	ldrb	r1, [r4, #0]
 800c9d2:	2203      	movs	r2, #3
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	f7f3 fc03 	bl	80001e0 <memchr>
 800c9da:	b140      	cbz	r0, 800c9ee <_svfiprintf_r+0x152>
 800c9dc:	2340      	movs	r3, #64	; 0x40
 800c9de:	eba0 000a 	sub.w	r0, r0, sl
 800c9e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	4303      	orrs	r3, r0
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9304      	str	r3, [sp, #16]
 800c9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f2:	4826      	ldr	r0, [pc, #152]	; (800ca8c <_svfiprintf_r+0x1f0>)
 800c9f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9f8:	2206      	movs	r2, #6
 800c9fa:	f7f3 fbf1 	bl	80001e0 <memchr>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d038      	beq.n	800ca74 <_svfiprintf_r+0x1d8>
 800ca02:	4b23      	ldr	r3, [pc, #140]	; (800ca90 <_svfiprintf_r+0x1f4>)
 800ca04:	bb1b      	cbnz	r3, 800ca4e <_svfiprintf_r+0x1b2>
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	3307      	adds	r3, #7
 800ca0a:	f023 0307 	bic.w	r3, r3, #7
 800ca0e:	3308      	adds	r3, #8
 800ca10:	9303      	str	r3, [sp, #12]
 800ca12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca14:	4433      	add	r3, r6
 800ca16:	9309      	str	r3, [sp, #36]	; 0x24
 800ca18:	e767      	b.n	800c8ea <_svfiprintf_r+0x4e>
 800ca1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca1e:	460c      	mov	r4, r1
 800ca20:	2001      	movs	r0, #1
 800ca22:	e7a5      	b.n	800c970 <_svfiprintf_r+0xd4>
 800ca24:	2300      	movs	r3, #0
 800ca26:	3401      	adds	r4, #1
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	f04f 0c0a 	mov.w	ip, #10
 800ca30:	4620      	mov	r0, r4
 800ca32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca36:	3a30      	subs	r2, #48	; 0x30
 800ca38:	2a09      	cmp	r2, #9
 800ca3a:	d903      	bls.n	800ca44 <_svfiprintf_r+0x1a8>
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0c5      	beq.n	800c9cc <_svfiprintf_r+0x130>
 800ca40:	9105      	str	r1, [sp, #20]
 800ca42:	e7c3      	b.n	800c9cc <_svfiprintf_r+0x130>
 800ca44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca48:	4604      	mov	r4, r0
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e7f0      	b.n	800ca30 <_svfiprintf_r+0x194>
 800ca4e:	ab03      	add	r3, sp, #12
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	462a      	mov	r2, r5
 800ca54:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <_svfiprintf_r+0x1f8>)
 800ca56:	a904      	add	r1, sp, #16
 800ca58:	4638      	mov	r0, r7
 800ca5a:	f7fd ffcb 	bl	800a9f4 <_printf_float>
 800ca5e:	1c42      	adds	r2, r0, #1
 800ca60:	4606      	mov	r6, r0
 800ca62:	d1d6      	bne.n	800ca12 <_svfiprintf_r+0x176>
 800ca64:	89ab      	ldrh	r3, [r5, #12]
 800ca66:	065b      	lsls	r3, r3, #25
 800ca68:	f53f af2c 	bmi.w	800c8c4 <_svfiprintf_r+0x28>
 800ca6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca6e:	b01d      	add	sp, #116	; 0x74
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	ab03      	add	r3, sp, #12
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <_svfiprintf_r+0x1f8>)
 800ca7c:	a904      	add	r1, sp, #16
 800ca7e:	4638      	mov	r0, r7
 800ca80:	f7fe fa5c 	bl	800af3c <_printf_i>
 800ca84:	e7eb      	b.n	800ca5e <_svfiprintf_r+0x1c2>
 800ca86:	bf00      	nop
 800ca88:	0800de94 	.word	0x0800de94
 800ca8c:	0800de9e 	.word	0x0800de9e
 800ca90:	0800a9f5 	.word	0x0800a9f5
 800ca94:	0800c7e5 	.word	0x0800c7e5
 800ca98:	0800de9a 	.word	0x0800de9a

0800ca9c <_sbrk_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d06      	ldr	r5, [pc, #24]	; (800cab8 <_sbrk_r+0x1c>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	602b      	str	r3, [r5, #0]
 800caa8:	f7f6 fa60 	bl	8002f6c <_sbrk>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_sbrk_r+0x1a>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_sbrk_r+0x1a>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20002ac0 	.word	0x20002ac0

0800cabc <__assert_func>:
 800cabc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cabe:	4614      	mov	r4, r2
 800cac0:	461a      	mov	r2, r3
 800cac2:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <__assert_func+0x2c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4605      	mov	r5, r0
 800cac8:	68d8      	ldr	r0, [r3, #12]
 800caca:	b14c      	cbz	r4, 800cae0 <__assert_func+0x24>
 800cacc:	4b07      	ldr	r3, [pc, #28]	; (800caec <__assert_func+0x30>)
 800cace:	9100      	str	r1, [sp, #0]
 800cad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cad4:	4906      	ldr	r1, [pc, #24]	; (800caf0 <__assert_func+0x34>)
 800cad6:	462b      	mov	r3, r5
 800cad8:	f000 f80e 	bl	800caf8 <fiprintf>
 800cadc:	f000 faac 	bl	800d038 <abort>
 800cae0:	4b04      	ldr	r3, [pc, #16]	; (800caf4 <__assert_func+0x38>)
 800cae2:	461c      	mov	r4, r3
 800cae4:	e7f3      	b.n	800cace <__assert_func+0x12>
 800cae6:	bf00      	nop
 800cae8:	20000024 	.word	0x20000024
 800caec:	0800dea5 	.word	0x0800dea5
 800caf0:	0800deb2 	.word	0x0800deb2
 800caf4:	0800dee0 	.word	0x0800dee0

0800caf8 <fiprintf>:
 800caf8:	b40e      	push	{r1, r2, r3}
 800cafa:	b503      	push	{r0, r1, lr}
 800cafc:	4601      	mov	r1, r0
 800cafe:	ab03      	add	r3, sp, #12
 800cb00:	4805      	ldr	r0, [pc, #20]	; (800cb18 <fiprintf+0x20>)
 800cb02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb06:	6800      	ldr	r0, [r0, #0]
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	f000 f897 	bl	800cc3c <_vfiprintf_r>
 800cb0e:	b002      	add	sp, #8
 800cb10:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb14:	b003      	add	sp, #12
 800cb16:	4770      	bx	lr
 800cb18:	20000024 	.word	0x20000024

0800cb1c <__ascii_mbtowc>:
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	b901      	cbnz	r1, 800cb22 <__ascii_mbtowc+0x6>
 800cb20:	a901      	add	r1, sp, #4
 800cb22:	b142      	cbz	r2, 800cb36 <__ascii_mbtowc+0x1a>
 800cb24:	b14b      	cbz	r3, 800cb3a <__ascii_mbtowc+0x1e>
 800cb26:	7813      	ldrb	r3, [r2, #0]
 800cb28:	600b      	str	r3, [r1, #0]
 800cb2a:	7812      	ldrb	r2, [r2, #0]
 800cb2c:	1e10      	subs	r0, r2, #0
 800cb2e:	bf18      	it	ne
 800cb30:	2001      	movne	r0, #1
 800cb32:	b002      	add	sp, #8
 800cb34:	4770      	bx	lr
 800cb36:	4610      	mov	r0, r2
 800cb38:	e7fb      	b.n	800cb32 <__ascii_mbtowc+0x16>
 800cb3a:	f06f 0001 	mvn.w	r0, #1
 800cb3e:	e7f8      	b.n	800cb32 <__ascii_mbtowc+0x16>

0800cb40 <memmove>:
 800cb40:	4288      	cmp	r0, r1
 800cb42:	b510      	push	{r4, lr}
 800cb44:	eb01 0402 	add.w	r4, r1, r2
 800cb48:	d902      	bls.n	800cb50 <memmove+0x10>
 800cb4a:	4284      	cmp	r4, r0
 800cb4c:	4623      	mov	r3, r4
 800cb4e:	d807      	bhi.n	800cb60 <memmove+0x20>
 800cb50:	1e43      	subs	r3, r0, #1
 800cb52:	42a1      	cmp	r1, r4
 800cb54:	d008      	beq.n	800cb68 <memmove+0x28>
 800cb56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb5e:	e7f8      	b.n	800cb52 <memmove+0x12>
 800cb60:	4402      	add	r2, r0
 800cb62:	4601      	mov	r1, r0
 800cb64:	428a      	cmp	r2, r1
 800cb66:	d100      	bne.n	800cb6a <memmove+0x2a>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb72:	e7f7      	b.n	800cb64 <memmove+0x24>

0800cb74 <__malloc_lock>:
 800cb74:	4801      	ldr	r0, [pc, #4]	; (800cb7c <__malloc_lock+0x8>)
 800cb76:	f000 bc1f 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800cb7a:	bf00      	nop
 800cb7c:	20002ac4 	.word	0x20002ac4

0800cb80 <__malloc_unlock>:
 800cb80:	4801      	ldr	r0, [pc, #4]	; (800cb88 <__malloc_unlock+0x8>)
 800cb82:	f000 bc1a 	b.w	800d3ba <__retarget_lock_release_recursive>
 800cb86:	bf00      	nop
 800cb88:	20002ac4 	.word	0x20002ac4

0800cb8c <_realloc_r>:
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	4680      	mov	r8, r0
 800cb92:	4614      	mov	r4, r2
 800cb94:	460e      	mov	r6, r1
 800cb96:	b921      	cbnz	r1, 800cba2 <_realloc_r+0x16>
 800cb98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	f7ff bdad 	b.w	800c6fc <_malloc_r>
 800cba2:	b92a      	cbnz	r2, 800cbb0 <_realloc_r+0x24>
 800cba4:	f7ff fd3e 	bl	800c624 <_free_r>
 800cba8:	4625      	mov	r5, r4
 800cbaa:	4628      	mov	r0, r5
 800cbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb0:	f000 fc6a 	bl	800d488 <_malloc_usable_size_r>
 800cbb4:	4284      	cmp	r4, r0
 800cbb6:	4607      	mov	r7, r0
 800cbb8:	d802      	bhi.n	800cbc0 <_realloc_r+0x34>
 800cbba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbbe:	d812      	bhi.n	800cbe6 <_realloc_r+0x5a>
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	f7ff fd9a 	bl	800c6fc <_malloc_r>
 800cbc8:	4605      	mov	r5, r0
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d0ed      	beq.n	800cbaa <_realloc_r+0x1e>
 800cbce:	42bc      	cmp	r4, r7
 800cbd0:	4622      	mov	r2, r4
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	bf28      	it	cs
 800cbd6:	463a      	movcs	r2, r7
 800cbd8:	f7ff f97c 	bl	800bed4 <memcpy>
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f7ff fd20 	bl	800c624 <_free_r>
 800cbe4:	e7e1      	b.n	800cbaa <_realloc_r+0x1e>
 800cbe6:	4635      	mov	r5, r6
 800cbe8:	e7df      	b.n	800cbaa <_realloc_r+0x1e>

0800cbea <__sfputc_r>:
 800cbea:	6893      	ldr	r3, [r2, #8]
 800cbec:	3b01      	subs	r3, #1
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	b410      	push	{r4}
 800cbf2:	6093      	str	r3, [r2, #8]
 800cbf4:	da08      	bge.n	800cc08 <__sfputc_r+0x1e>
 800cbf6:	6994      	ldr	r4, [r2, #24]
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	db01      	blt.n	800cc00 <__sfputc_r+0x16>
 800cbfc:	290a      	cmp	r1, #10
 800cbfe:	d103      	bne.n	800cc08 <__sfputc_r+0x1e>
 800cc00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc04:	f000 b94a 	b.w	800ce9c <__swbuf_r>
 800cc08:	6813      	ldr	r3, [r2, #0]
 800cc0a:	1c58      	adds	r0, r3, #1
 800cc0c:	6010      	str	r0, [r2, #0]
 800cc0e:	7019      	strb	r1, [r3, #0]
 800cc10:	4608      	mov	r0, r1
 800cc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <__sfputs_r>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	4614      	mov	r4, r2
 800cc20:	18d5      	adds	r5, r2, r3
 800cc22:	42ac      	cmp	r4, r5
 800cc24:	d101      	bne.n	800cc2a <__sfputs_r+0x12>
 800cc26:	2000      	movs	r0, #0
 800cc28:	e007      	b.n	800cc3a <__sfputs_r+0x22>
 800cc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc2e:	463a      	mov	r2, r7
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff ffda 	bl	800cbea <__sfputc_r>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d1f3      	bne.n	800cc22 <__sfputs_r+0xa>
 800cc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc3c <_vfiprintf_r>:
 800cc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc40:	460d      	mov	r5, r1
 800cc42:	b09d      	sub	sp, #116	; 0x74
 800cc44:	4614      	mov	r4, r2
 800cc46:	4698      	mov	r8, r3
 800cc48:	4606      	mov	r6, r0
 800cc4a:	b118      	cbz	r0, 800cc54 <_vfiprintf_r+0x18>
 800cc4c:	6983      	ldr	r3, [r0, #24]
 800cc4e:	b90b      	cbnz	r3, 800cc54 <_vfiprintf_r+0x18>
 800cc50:	f000 fb14 	bl	800d27c <__sinit>
 800cc54:	4b89      	ldr	r3, [pc, #548]	; (800ce7c <_vfiprintf_r+0x240>)
 800cc56:	429d      	cmp	r5, r3
 800cc58:	d11b      	bne.n	800cc92 <_vfiprintf_r+0x56>
 800cc5a:	6875      	ldr	r5, [r6, #4]
 800cc5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc5e:	07d9      	lsls	r1, r3, #31
 800cc60:	d405      	bmi.n	800cc6e <_vfiprintf_r+0x32>
 800cc62:	89ab      	ldrh	r3, [r5, #12]
 800cc64:	059a      	lsls	r2, r3, #22
 800cc66:	d402      	bmi.n	800cc6e <_vfiprintf_r+0x32>
 800cc68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc6a:	f000 fba5 	bl	800d3b8 <__retarget_lock_acquire_recursive>
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	071b      	lsls	r3, r3, #28
 800cc72:	d501      	bpl.n	800cc78 <_vfiprintf_r+0x3c>
 800cc74:	692b      	ldr	r3, [r5, #16]
 800cc76:	b9eb      	cbnz	r3, 800ccb4 <_vfiprintf_r+0x78>
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f000 f96e 	bl	800cf5c <__swsetup_r>
 800cc80:	b1c0      	cbz	r0, 800ccb4 <_vfiprintf_r+0x78>
 800cc82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc84:	07dc      	lsls	r4, r3, #31
 800cc86:	d50e      	bpl.n	800cca6 <_vfiprintf_r+0x6a>
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8c:	b01d      	add	sp, #116	; 0x74
 800cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc92:	4b7b      	ldr	r3, [pc, #492]	; (800ce80 <_vfiprintf_r+0x244>)
 800cc94:	429d      	cmp	r5, r3
 800cc96:	d101      	bne.n	800cc9c <_vfiprintf_r+0x60>
 800cc98:	68b5      	ldr	r5, [r6, #8]
 800cc9a:	e7df      	b.n	800cc5c <_vfiprintf_r+0x20>
 800cc9c:	4b79      	ldr	r3, [pc, #484]	; (800ce84 <_vfiprintf_r+0x248>)
 800cc9e:	429d      	cmp	r5, r3
 800cca0:	bf08      	it	eq
 800cca2:	68f5      	ldreq	r5, [r6, #12]
 800cca4:	e7da      	b.n	800cc5c <_vfiprintf_r+0x20>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	0598      	lsls	r0, r3, #22
 800ccaa:	d4ed      	bmi.n	800cc88 <_vfiprintf_r+0x4c>
 800ccac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccae:	f000 fb84 	bl	800d3ba <__retarget_lock_release_recursive>
 800ccb2:	e7e9      	b.n	800cc88 <_vfiprintf_r+0x4c>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb8:	2320      	movs	r3, #32
 800ccba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccc2:	2330      	movs	r3, #48	; 0x30
 800ccc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce88 <_vfiprintf_r+0x24c>
 800ccc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cccc:	f04f 0901 	mov.w	r9, #1
 800ccd0:	4623      	mov	r3, r4
 800ccd2:	469a      	mov	sl, r3
 800ccd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccd8:	b10a      	cbz	r2, 800ccde <_vfiprintf_r+0xa2>
 800ccda:	2a25      	cmp	r2, #37	; 0x25
 800ccdc:	d1f9      	bne.n	800ccd2 <_vfiprintf_r+0x96>
 800ccde:	ebba 0b04 	subs.w	fp, sl, r4
 800cce2:	d00b      	beq.n	800ccfc <_vfiprintf_r+0xc0>
 800cce4:	465b      	mov	r3, fp
 800cce6:	4622      	mov	r2, r4
 800cce8:	4629      	mov	r1, r5
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff ff94 	bl	800cc18 <__sfputs_r>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	f000 80aa 	beq.w	800ce4a <_vfiprintf_r+0x20e>
 800ccf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccf8:	445a      	add	r2, fp
 800ccfa:	9209      	str	r2, [sp, #36]	; 0x24
 800ccfc:	f89a 3000 	ldrb.w	r3, [sl]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 80a2 	beq.w	800ce4a <_vfiprintf_r+0x20e>
 800cd06:	2300      	movs	r3, #0
 800cd08:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd10:	f10a 0a01 	add.w	sl, sl, #1
 800cd14:	9304      	str	r3, [sp, #16]
 800cd16:	9307      	str	r3, [sp, #28]
 800cd18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd1c:	931a      	str	r3, [sp, #104]	; 0x68
 800cd1e:	4654      	mov	r4, sl
 800cd20:	2205      	movs	r2, #5
 800cd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd26:	4858      	ldr	r0, [pc, #352]	; (800ce88 <_vfiprintf_r+0x24c>)
 800cd28:	f7f3 fa5a 	bl	80001e0 <memchr>
 800cd2c:	9a04      	ldr	r2, [sp, #16]
 800cd2e:	b9d8      	cbnz	r0, 800cd68 <_vfiprintf_r+0x12c>
 800cd30:	06d1      	lsls	r1, r2, #27
 800cd32:	bf44      	itt	mi
 800cd34:	2320      	movmi	r3, #32
 800cd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd3a:	0713      	lsls	r3, r2, #28
 800cd3c:	bf44      	itt	mi
 800cd3e:	232b      	movmi	r3, #43	; 0x2b
 800cd40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd44:	f89a 3000 	ldrb.w	r3, [sl]
 800cd48:	2b2a      	cmp	r3, #42	; 0x2a
 800cd4a:	d015      	beq.n	800cd78 <_vfiprintf_r+0x13c>
 800cd4c:	9a07      	ldr	r2, [sp, #28]
 800cd4e:	4654      	mov	r4, sl
 800cd50:	2000      	movs	r0, #0
 800cd52:	f04f 0c0a 	mov.w	ip, #10
 800cd56:	4621      	mov	r1, r4
 800cd58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd5c:	3b30      	subs	r3, #48	; 0x30
 800cd5e:	2b09      	cmp	r3, #9
 800cd60:	d94e      	bls.n	800ce00 <_vfiprintf_r+0x1c4>
 800cd62:	b1b0      	cbz	r0, 800cd92 <_vfiprintf_r+0x156>
 800cd64:	9207      	str	r2, [sp, #28]
 800cd66:	e014      	b.n	800cd92 <_vfiprintf_r+0x156>
 800cd68:	eba0 0308 	sub.w	r3, r0, r8
 800cd6c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd70:	4313      	orrs	r3, r2
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	46a2      	mov	sl, r4
 800cd76:	e7d2      	b.n	800cd1e <_vfiprintf_r+0xe2>
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	1d19      	adds	r1, r3, #4
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	9103      	str	r1, [sp, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	bfbb      	ittet	lt
 800cd84:	425b      	neglt	r3, r3
 800cd86:	f042 0202 	orrlt.w	r2, r2, #2
 800cd8a:	9307      	strge	r3, [sp, #28]
 800cd8c:	9307      	strlt	r3, [sp, #28]
 800cd8e:	bfb8      	it	lt
 800cd90:	9204      	strlt	r2, [sp, #16]
 800cd92:	7823      	ldrb	r3, [r4, #0]
 800cd94:	2b2e      	cmp	r3, #46	; 0x2e
 800cd96:	d10c      	bne.n	800cdb2 <_vfiprintf_r+0x176>
 800cd98:	7863      	ldrb	r3, [r4, #1]
 800cd9a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd9c:	d135      	bne.n	800ce0a <_vfiprintf_r+0x1ce>
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	1d1a      	adds	r2, r3, #4
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	9203      	str	r2, [sp, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfb8      	it	lt
 800cdaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdae:	3402      	adds	r4, #2
 800cdb0:	9305      	str	r3, [sp, #20]
 800cdb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce98 <_vfiprintf_r+0x25c>
 800cdb6:	7821      	ldrb	r1, [r4, #0]
 800cdb8:	2203      	movs	r2, #3
 800cdba:	4650      	mov	r0, sl
 800cdbc:	f7f3 fa10 	bl	80001e0 <memchr>
 800cdc0:	b140      	cbz	r0, 800cdd4 <_vfiprintf_r+0x198>
 800cdc2:	2340      	movs	r3, #64	; 0x40
 800cdc4:	eba0 000a 	sub.w	r0, r0, sl
 800cdc8:	fa03 f000 	lsl.w	r0, r3, r0
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	4303      	orrs	r3, r0
 800cdd0:	3401      	adds	r4, #1
 800cdd2:	9304      	str	r3, [sp, #16]
 800cdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd8:	482c      	ldr	r0, [pc, #176]	; (800ce8c <_vfiprintf_r+0x250>)
 800cdda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdde:	2206      	movs	r2, #6
 800cde0:	f7f3 f9fe 	bl	80001e0 <memchr>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d03f      	beq.n	800ce68 <_vfiprintf_r+0x22c>
 800cde8:	4b29      	ldr	r3, [pc, #164]	; (800ce90 <_vfiprintf_r+0x254>)
 800cdea:	bb1b      	cbnz	r3, 800ce34 <_vfiprintf_r+0x1f8>
 800cdec:	9b03      	ldr	r3, [sp, #12]
 800cdee:	3307      	adds	r3, #7
 800cdf0:	f023 0307 	bic.w	r3, r3, #7
 800cdf4:	3308      	adds	r3, #8
 800cdf6:	9303      	str	r3, [sp, #12]
 800cdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdfa:	443b      	add	r3, r7
 800cdfc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfe:	e767      	b.n	800ccd0 <_vfiprintf_r+0x94>
 800ce00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce04:	460c      	mov	r4, r1
 800ce06:	2001      	movs	r0, #1
 800ce08:	e7a5      	b.n	800cd56 <_vfiprintf_r+0x11a>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	3401      	adds	r4, #1
 800ce0e:	9305      	str	r3, [sp, #20]
 800ce10:	4619      	mov	r1, r3
 800ce12:	f04f 0c0a 	mov.w	ip, #10
 800ce16:	4620      	mov	r0, r4
 800ce18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce1c:	3a30      	subs	r2, #48	; 0x30
 800ce1e:	2a09      	cmp	r2, #9
 800ce20:	d903      	bls.n	800ce2a <_vfiprintf_r+0x1ee>
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0c5      	beq.n	800cdb2 <_vfiprintf_r+0x176>
 800ce26:	9105      	str	r1, [sp, #20]
 800ce28:	e7c3      	b.n	800cdb2 <_vfiprintf_r+0x176>
 800ce2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce2e:	4604      	mov	r4, r0
 800ce30:	2301      	movs	r3, #1
 800ce32:	e7f0      	b.n	800ce16 <_vfiprintf_r+0x1da>
 800ce34:	ab03      	add	r3, sp, #12
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	462a      	mov	r2, r5
 800ce3a:	4b16      	ldr	r3, [pc, #88]	; (800ce94 <_vfiprintf_r+0x258>)
 800ce3c:	a904      	add	r1, sp, #16
 800ce3e:	4630      	mov	r0, r6
 800ce40:	f7fd fdd8 	bl	800a9f4 <_printf_float>
 800ce44:	4607      	mov	r7, r0
 800ce46:	1c78      	adds	r0, r7, #1
 800ce48:	d1d6      	bne.n	800cdf8 <_vfiprintf_r+0x1bc>
 800ce4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce4c:	07d9      	lsls	r1, r3, #31
 800ce4e:	d405      	bmi.n	800ce5c <_vfiprintf_r+0x220>
 800ce50:	89ab      	ldrh	r3, [r5, #12]
 800ce52:	059a      	lsls	r2, r3, #22
 800ce54:	d402      	bmi.n	800ce5c <_vfiprintf_r+0x220>
 800ce56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce58:	f000 faaf 	bl	800d3ba <__retarget_lock_release_recursive>
 800ce5c:	89ab      	ldrh	r3, [r5, #12]
 800ce5e:	065b      	lsls	r3, r3, #25
 800ce60:	f53f af12 	bmi.w	800cc88 <_vfiprintf_r+0x4c>
 800ce64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce66:	e711      	b.n	800cc8c <_vfiprintf_r+0x50>
 800ce68:	ab03      	add	r3, sp, #12
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	462a      	mov	r2, r5
 800ce6e:	4b09      	ldr	r3, [pc, #36]	; (800ce94 <_vfiprintf_r+0x258>)
 800ce70:	a904      	add	r1, sp, #16
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7fe f862 	bl	800af3c <_printf_i>
 800ce78:	e7e4      	b.n	800ce44 <_vfiprintf_r+0x208>
 800ce7a:	bf00      	nop
 800ce7c:	0800e00c 	.word	0x0800e00c
 800ce80:	0800e02c 	.word	0x0800e02c
 800ce84:	0800dfec 	.word	0x0800dfec
 800ce88:	0800de94 	.word	0x0800de94
 800ce8c:	0800de9e 	.word	0x0800de9e
 800ce90:	0800a9f5 	.word	0x0800a9f5
 800ce94:	0800cc19 	.word	0x0800cc19
 800ce98:	0800de9a 	.word	0x0800de9a

0800ce9c <__swbuf_r>:
 800ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9e:	460e      	mov	r6, r1
 800cea0:	4614      	mov	r4, r2
 800cea2:	4605      	mov	r5, r0
 800cea4:	b118      	cbz	r0, 800ceae <__swbuf_r+0x12>
 800cea6:	6983      	ldr	r3, [r0, #24]
 800cea8:	b90b      	cbnz	r3, 800ceae <__swbuf_r+0x12>
 800ceaa:	f000 f9e7 	bl	800d27c <__sinit>
 800ceae:	4b21      	ldr	r3, [pc, #132]	; (800cf34 <__swbuf_r+0x98>)
 800ceb0:	429c      	cmp	r4, r3
 800ceb2:	d12b      	bne.n	800cf0c <__swbuf_r+0x70>
 800ceb4:	686c      	ldr	r4, [r5, #4]
 800ceb6:	69a3      	ldr	r3, [r4, #24]
 800ceb8:	60a3      	str	r3, [r4, #8]
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	071a      	lsls	r2, r3, #28
 800cebe:	d52f      	bpl.n	800cf20 <__swbuf_r+0x84>
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	b36b      	cbz	r3, 800cf20 <__swbuf_r+0x84>
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	6820      	ldr	r0, [r4, #0]
 800cec8:	1ac0      	subs	r0, r0, r3
 800ceca:	6963      	ldr	r3, [r4, #20]
 800cecc:	b2f6      	uxtb	r6, r6
 800cece:	4283      	cmp	r3, r0
 800ced0:	4637      	mov	r7, r6
 800ced2:	dc04      	bgt.n	800cede <__swbuf_r+0x42>
 800ced4:	4621      	mov	r1, r4
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 f93c 	bl	800d154 <_fflush_r>
 800cedc:	bb30      	cbnz	r0, 800cf2c <__swbuf_r+0x90>
 800cede:	68a3      	ldr	r3, [r4, #8]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	60a3      	str	r3, [r4, #8]
 800cee4:	6823      	ldr	r3, [r4, #0]
 800cee6:	1c5a      	adds	r2, r3, #1
 800cee8:	6022      	str	r2, [r4, #0]
 800ceea:	701e      	strb	r6, [r3, #0]
 800ceec:	6963      	ldr	r3, [r4, #20]
 800ceee:	3001      	adds	r0, #1
 800cef0:	4283      	cmp	r3, r0
 800cef2:	d004      	beq.n	800cefe <__swbuf_r+0x62>
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	07db      	lsls	r3, r3, #31
 800cef8:	d506      	bpl.n	800cf08 <__swbuf_r+0x6c>
 800cefa:	2e0a      	cmp	r6, #10
 800cefc:	d104      	bne.n	800cf08 <__swbuf_r+0x6c>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	f000 f927 	bl	800d154 <_fflush_r>
 800cf06:	b988      	cbnz	r0, 800cf2c <__swbuf_r+0x90>
 800cf08:	4638      	mov	r0, r7
 800cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <__swbuf_r+0x9c>)
 800cf0e:	429c      	cmp	r4, r3
 800cf10:	d101      	bne.n	800cf16 <__swbuf_r+0x7a>
 800cf12:	68ac      	ldr	r4, [r5, #8]
 800cf14:	e7cf      	b.n	800ceb6 <__swbuf_r+0x1a>
 800cf16:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <__swbuf_r+0xa0>)
 800cf18:	429c      	cmp	r4, r3
 800cf1a:	bf08      	it	eq
 800cf1c:	68ec      	ldreq	r4, [r5, #12]
 800cf1e:	e7ca      	b.n	800ceb6 <__swbuf_r+0x1a>
 800cf20:	4621      	mov	r1, r4
 800cf22:	4628      	mov	r0, r5
 800cf24:	f000 f81a 	bl	800cf5c <__swsetup_r>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d0cb      	beq.n	800cec4 <__swbuf_r+0x28>
 800cf2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf30:	e7ea      	b.n	800cf08 <__swbuf_r+0x6c>
 800cf32:	bf00      	nop
 800cf34:	0800e00c 	.word	0x0800e00c
 800cf38:	0800e02c 	.word	0x0800e02c
 800cf3c:	0800dfec 	.word	0x0800dfec

0800cf40 <__ascii_wctomb>:
 800cf40:	b149      	cbz	r1, 800cf56 <__ascii_wctomb+0x16>
 800cf42:	2aff      	cmp	r2, #255	; 0xff
 800cf44:	bf85      	ittet	hi
 800cf46:	238a      	movhi	r3, #138	; 0x8a
 800cf48:	6003      	strhi	r3, [r0, #0]
 800cf4a:	700a      	strbls	r2, [r1, #0]
 800cf4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf50:	bf98      	it	ls
 800cf52:	2001      	movls	r0, #1
 800cf54:	4770      	bx	lr
 800cf56:	4608      	mov	r0, r1
 800cf58:	4770      	bx	lr
	...

0800cf5c <__swsetup_r>:
 800cf5c:	4b32      	ldr	r3, [pc, #200]	; (800d028 <__swsetup_r+0xcc>)
 800cf5e:	b570      	push	{r4, r5, r6, lr}
 800cf60:	681d      	ldr	r5, [r3, #0]
 800cf62:	4606      	mov	r6, r0
 800cf64:	460c      	mov	r4, r1
 800cf66:	b125      	cbz	r5, 800cf72 <__swsetup_r+0x16>
 800cf68:	69ab      	ldr	r3, [r5, #24]
 800cf6a:	b913      	cbnz	r3, 800cf72 <__swsetup_r+0x16>
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f000 f985 	bl	800d27c <__sinit>
 800cf72:	4b2e      	ldr	r3, [pc, #184]	; (800d02c <__swsetup_r+0xd0>)
 800cf74:	429c      	cmp	r4, r3
 800cf76:	d10f      	bne.n	800cf98 <__swsetup_r+0x3c>
 800cf78:	686c      	ldr	r4, [r5, #4]
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf80:	0719      	lsls	r1, r3, #28
 800cf82:	d42c      	bmi.n	800cfde <__swsetup_r+0x82>
 800cf84:	06dd      	lsls	r5, r3, #27
 800cf86:	d411      	bmi.n	800cfac <__swsetup_r+0x50>
 800cf88:	2309      	movs	r3, #9
 800cf8a:	6033      	str	r3, [r6, #0]
 800cf8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf90:	81a3      	strh	r3, [r4, #12]
 800cf92:	f04f 30ff 	mov.w	r0, #4294967295
 800cf96:	e03e      	b.n	800d016 <__swsetup_r+0xba>
 800cf98:	4b25      	ldr	r3, [pc, #148]	; (800d030 <__swsetup_r+0xd4>)
 800cf9a:	429c      	cmp	r4, r3
 800cf9c:	d101      	bne.n	800cfa2 <__swsetup_r+0x46>
 800cf9e:	68ac      	ldr	r4, [r5, #8]
 800cfa0:	e7eb      	b.n	800cf7a <__swsetup_r+0x1e>
 800cfa2:	4b24      	ldr	r3, [pc, #144]	; (800d034 <__swsetup_r+0xd8>)
 800cfa4:	429c      	cmp	r4, r3
 800cfa6:	bf08      	it	eq
 800cfa8:	68ec      	ldreq	r4, [r5, #12]
 800cfaa:	e7e6      	b.n	800cf7a <__swsetup_r+0x1e>
 800cfac:	0758      	lsls	r0, r3, #29
 800cfae:	d512      	bpl.n	800cfd6 <__swsetup_r+0x7a>
 800cfb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfb2:	b141      	cbz	r1, 800cfc6 <__swsetup_r+0x6a>
 800cfb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfb8:	4299      	cmp	r1, r3
 800cfba:	d002      	beq.n	800cfc2 <__swsetup_r+0x66>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7ff fb31 	bl	800c624 <_free_r>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	6363      	str	r3, [r4, #52]	; 0x34
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	2300      	movs	r3, #0
 800cfd0:	6063      	str	r3, [r4, #4]
 800cfd2:	6923      	ldr	r3, [r4, #16]
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	f043 0308 	orr.w	r3, r3, #8
 800cfdc:	81a3      	strh	r3, [r4, #12]
 800cfde:	6923      	ldr	r3, [r4, #16]
 800cfe0:	b94b      	cbnz	r3, 800cff6 <__swsetup_r+0x9a>
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfec:	d003      	beq.n	800cff6 <__swsetup_r+0x9a>
 800cfee:	4621      	mov	r1, r4
 800cff0:	4630      	mov	r0, r6
 800cff2:	f000 fa09 	bl	800d408 <__smakebuf_r>
 800cff6:	89a0      	ldrh	r0, [r4, #12]
 800cff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cffc:	f010 0301 	ands.w	r3, r0, #1
 800d000:	d00a      	beq.n	800d018 <__swsetup_r+0xbc>
 800d002:	2300      	movs	r3, #0
 800d004:	60a3      	str	r3, [r4, #8]
 800d006:	6963      	ldr	r3, [r4, #20]
 800d008:	425b      	negs	r3, r3
 800d00a:	61a3      	str	r3, [r4, #24]
 800d00c:	6923      	ldr	r3, [r4, #16]
 800d00e:	b943      	cbnz	r3, 800d022 <__swsetup_r+0xc6>
 800d010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d014:	d1ba      	bne.n	800cf8c <__swsetup_r+0x30>
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	0781      	lsls	r1, r0, #30
 800d01a:	bf58      	it	pl
 800d01c:	6963      	ldrpl	r3, [r4, #20]
 800d01e:	60a3      	str	r3, [r4, #8]
 800d020:	e7f4      	b.n	800d00c <__swsetup_r+0xb0>
 800d022:	2000      	movs	r0, #0
 800d024:	e7f7      	b.n	800d016 <__swsetup_r+0xba>
 800d026:	bf00      	nop
 800d028:	20000024 	.word	0x20000024
 800d02c:	0800e00c 	.word	0x0800e00c
 800d030:	0800e02c 	.word	0x0800e02c
 800d034:	0800dfec 	.word	0x0800dfec

0800d038 <abort>:
 800d038:	b508      	push	{r3, lr}
 800d03a:	2006      	movs	r0, #6
 800d03c:	f000 fa54 	bl	800d4e8 <raise>
 800d040:	2001      	movs	r0, #1
 800d042:	f7f5 ff1b 	bl	8002e7c <_exit>
	...

0800d048 <__sflush_r>:
 800d048:	898a      	ldrh	r2, [r1, #12]
 800d04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d04e:	4605      	mov	r5, r0
 800d050:	0710      	lsls	r0, r2, #28
 800d052:	460c      	mov	r4, r1
 800d054:	d458      	bmi.n	800d108 <__sflush_r+0xc0>
 800d056:	684b      	ldr	r3, [r1, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	dc05      	bgt.n	800d068 <__sflush_r+0x20>
 800d05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d05e:	2b00      	cmp	r3, #0
 800d060:	dc02      	bgt.n	800d068 <__sflush_r+0x20>
 800d062:	2000      	movs	r0, #0
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	d0f9      	beq.n	800d062 <__sflush_r+0x1a>
 800d06e:	2300      	movs	r3, #0
 800d070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d074:	682f      	ldr	r7, [r5, #0]
 800d076:	602b      	str	r3, [r5, #0]
 800d078:	d032      	beq.n	800d0e0 <__sflush_r+0x98>
 800d07a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	075a      	lsls	r2, r3, #29
 800d080:	d505      	bpl.n	800d08e <__sflush_r+0x46>
 800d082:	6863      	ldr	r3, [r4, #4]
 800d084:	1ac0      	subs	r0, r0, r3
 800d086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d088:	b10b      	cbz	r3, 800d08e <__sflush_r+0x46>
 800d08a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d08c:	1ac0      	subs	r0, r0, r3
 800d08e:	2300      	movs	r3, #0
 800d090:	4602      	mov	r2, r0
 800d092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d094:	6a21      	ldr	r1, [r4, #32]
 800d096:	4628      	mov	r0, r5
 800d098:	47b0      	blx	r6
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	d106      	bne.n	800d0ae <__sflush_r+0x66>
 800d0a0:	6829      	ldr	r1, [r5, #0]
 800d0a2:	291d      	cmp	r1, #29
 800d0a4:	d82c      	bhi.n	800d100 <__sflush_r+0xb8>
 800d0a6:	4a2a      	ldr	r2, [pc, #168]	; (800d150 <__sflush_r+0x108>)
 800d0a8:	40ca      	lsrs	r2, r1
 800d0aa:	07d6      	lsls	r6, r2, #31
 800d0ac:	d528      	bpl.n	800d100 <__sflush_r+0xb8>
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	6062      	str	r2, [r4, #4]
 800d0b2:	04d9      	lsls	r1, r3, #19
 800d0b4:	6922      	ldr	r2, [r4, #16]
 800d0b6:	6022      	str	r2, [r4, #0]
 800d0b8:	d504      	bpl.n	800d0c4 <__sflush_r+0x7c>
 800d0ba:	1c42      	adds	r2, r0, #1
 800d0bc:	d101      	bne.n	800d0c2 <__sflush_r+0x7a>
 800d0be:	682b      	ldr	r3, [r5, #0]
 800d0c0:	b903      	cbnz	r3, 800d0c4 <__sflush_r+0x7c>
 800d0c2:	6560      	str	r0, [r4, #84]	; 0x54
 800d0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0c6:	602f      	str	r7, [r5, #0]
 800d0c8:	2900      	cmp	r1, #0
 800d0ca:	d0ca      	beq.n	800d062 <__sflush_r+0x1a>
 800d0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0d0:	4299      	cmp	r1, r3
 800d0d2:	d002      	beq.n	800d0da <__sflush_r+0x92>
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f7ff faa5 	bl	800c624 <_free_r>
 800d0da:	2000      	movs	r0, #0
 800d0dc:	6360      	str	r0, [r4, #52]	; 0x34
 800d0de:	e7c1      	b.n	800d064 <__sflush_r+0x1c>
 800d0e0:	6a21      	ldr	r1, [r4, #32]
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	47b0      	blx	r6
 800d0e8:	1c41      	adds	r1, r0, #1
 800d0ea:	d1c7      	bne.n	800d07c <__sflush_r+0x34>
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0c4      	beq.n	800d07c <__sflush_r+0x34>
 800d0f2:	2b1d      	cmp	r3, #29
 800d0f4:	d001      	beq.n	800d0fa <__sflush_r+0xb2>
 800d0f6:	2b16      	cmp	r3, #22
 800d0f8:	d101      	bne.n	800d0fe <__sflush_r+0xb6>
 800d0fa:	602f      	str	r7, [r5, #0]
 800d0fc:	e7b1      	b.n	800d062 <__sflush_r+0x1a>
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d104:	81a3      	strh	r3, [r4, #12]
 800d106:	e7ad      	b.n	800d064 <__sflush_r+0x1c>
 800d108:	690f      	ldr	r7, [r1, #16]
 800d10a:	2f00      	cmp	r7, #0
 800d10c:	d0a9      	beq.n	800d062 <__sflush_r+0x1a>
 800d10e:	0793      	lsls	r3, r2, #30
 800d110:	680e      	ldr	r6, [r1, #0]
 800d112:	bf08      	it	eq
 800d114:	694b      	ldreq	r3, [r1, #20]
 800d116:	600f      	str	r7, [r1, #0]
 800d118:	bf18      	it	ne
 800d11a:	2300      	movne	r3, #0
 800d11c:	eba6 0807 	sub.w	r8, r6, r7
 800d120:	608b      	str	r3, [r1, #8]
 800d122:	f1b8 0f00 	cmp.w	r8, #0
 800d126:	dd9c      	ble.n	800d062 <__sflush_r+0x1a>
 800d128:	6a21      	ldr	r1, [r4, #32]
 800d12a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d12c:	4643      	mov	r3, r8
 800d12e:	463a      	mov	r2, r7
 800d130:	4628      	mov	r0, r5
 800d132:	47b0      	blx	r6
 800d134:	2800      	cmp	r0, #0
 800d136:	dc06      	bgt.n	800d146 <__sflush_r+0xfe>
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	e78e      	b.n	800d064 <__sflush_r+0x1c>
 800d146:	4407      	add	r7, r0
 800d148:	eba8 0800 	sub.w	r8, r8, r0
 800d14c:	e7e9      	b.n	800d122 <__sflush_r+0xda>
 800d14e:	bf00      	nop
 800d150:	20400001 	.word	0x20400001

0800d154 <_fflush_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	690b      	ldr	r3, [r1, #16]
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	b913      	cbnz	r3, 800d164 <_fflush_r+0x10>
 800d15e:	2500      	movs	r5, #0
 800d160:	4628      	mov	r0, r5
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	b118      	cbz	r0, 800d16e <_fflush_r+0x1a>
 800d166:	6983      	ldr	r3, [r0, #24]
 800d168:	b90b      	cbnz	r3, 800d16e <_fflush_r+0x1a>
 800d16a:	f000 f887 	bl	800d27c <__sinit>
 800d16e:	4b14      	ldr	r3, [pc, #80]	; (800d1c0 <_fflush_r+0x6c>)
 800d170:	429c      	cmp	r4, r3
 800d172:	d11b      	bne.n	800d1ac <_fflush_r+0x58>
 800d174:	686c      	ldr	r4, [r5, #4]
 800d176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0ef      	beq.n	800d15e <_fflush_r+0xa>
 800d17e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d180:	07d0      	lsls	r0, r2, #31
 800d182:	d404      	bmi.n	800d18e <_fflush_r+0x3a>
 800d184:	0599      	lsls	r1, r3, #22
 800d186:	d402      	bmi.n	800d18e <_fflush_r+0x3a>
 800d188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18a:	f000 f915 	bl	800d3b8 <__retarget_lock_acquire_recursive>
 800d18e:	4628      	mov	r0, r5
 800d190:	4621      	mov	r1, r4
 800d192:	f7ff ff59 	bl	800d048 <__sflush_r>
 800d196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d198:	07da      	lsls	r2, r3, #31
 800d19a:	4605      	mov	r5, r0
 800d19c:	d4e0      	bmi.n	800d160 <_fflush_r+0xc>
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	059b      	lsls	r3, r3, #22
 800d1a2:	d4dd      	bmi.n	800d160 <_fflush_r+0xc>
 800d1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1a6:	f000 f908 	bl	800d3ba <__retarget_lock_release_recursive>
 800d1aa:	e7d9      	b.n	800d160 <_fflush_r+0xc>
 800d1ac:	4b05      	ldr	r3, [pc, #20]	; (800d1c4 <_fflush_r+0x70>)
 800d1ae:	429c      	cmp	r4, r3
 800d1b0:	d101      	bne.n	800d1b6 <_fflush_r+0x62>
 800d1b2:	68ac      	ldr	r4, [r5, #8]
 800d1b4:	e7df      	b.n	800d176 <_fflush_r+0x22>
 800d1b6:	4b04      	ldr	r3, [pc, #16]	; (800d1c8 <_fflush_r+0x74>)
 800d1b8:	429c      	cmp	r4, r3
 800d1ba:	bf08      	it	eq
 800d1bc:	68ec      	ldreq	r4, [r5, #12]
 800d1be:	e7da      	b.n	800d176 <_fflush_r+0x22>
 800d1c0:	0800e00c 	.word	0x0800e00c
 800d1c4:	0800e02c 	.word	0x0800e02c
 800d1c8:	0800dfec 	.word	0x0800dfec

0800d1cc <std>:
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	e9c0 3300 	strd	r3, r3, [r0]
 800d1d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1da:	6083      	str	r3, [r0, #8]
 800d1dc:	8181      	strh	r1, [r0, #12]
 800d1de:	6643      	str	r3, [r0, #100]	; 0x64
 800d1e0:	81c2      	strh	r2, [r0, #14]
 800d1e2:	6183      	str	r3, [r0, #24]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	2208      	movs	r2, #8
 800d1e8:	305c      	adds	r0, #92	; 0x5c
 800d1ea:	f7fd fb5b 	bl	800a8a4 <memset>
 800d1ee:	4b05      	ldr	r3, [pc, #20]	; (800d204 <std+0x38>)
 800d1f0:	6263      	str	r3, [r4, #36]	; 0x24
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <std+0x3c>)
 800d1f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1f6:	4b05      	ldr	r3, [pc, #20]	; (800d20c <std+0x40>)
 800d1f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <std+0x44>)
 800d1fc:	6224      	str	r4, [r4, #32]
 800d1fe:	6323      	str	r3, [r4, #48]	; 0x30
 800d200:	bd10      	pop	{r4, pc}
 800d202:	bf00      	nop
 800d204:	0800d521 	.word	0x0800d521
 800d208:	0800d543 	.word	0x0800d543
 800d20c:	0800d57b 	.word	0x0800d57b
 800d210:	0800d59f 	.word	0x0800d59f

0800d214 <_cleanup_r>:
 800d214:	4901      	ldr	r1, [pc, #4]	; (800d21c <_cleanup_r+0x8>)
 800d216:	f000 b8af 	b.w	800d378 <_fwalk_reent>
 800d21a:	bf00      	nop
 800d21c:	0800d155 	.word	0x0800d155

0800d220 <__sfmoreglue>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	2268      	movs	r2, #104	; 0x68
 800d224:	1e4d      	subs	r5, r1, #1
 800d226:	4355      	muls	r5, r2
 800d228:	460e      	mov	r6, r1
 800d22a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d22e:	f7ff fa65 	bl	800c6fc <_malloc_r>
 800d232:	4604      	mov	r4, r0
 800d234:	b140      	cbz	r0, 800d248 <__sfmoreglue+0x28>
 800d236:	2100      	movs	r1, #0
 800d238:	e9c0 1600 	strd	r1, r6, [r0]
 800d23c:	300c      	adds	r0, #12
 800d23e:	60a0      	str	r0, [r4, #8]
 800d240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d244:	f7fd fb2e 	bl	800a8a4 <memset>
 800d248:	4620      	mov	r0, r4
 800d24a:	bd70      	pop	{r4, r5, r6, pc}

0800d24c <__sfp_lock_acquire>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__sfp_lock_acquire+0x8>)
 800d24e:	f000 b8b3 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800d252:	bf00      	nop
 800d254:	20002ac5 	.word	0x20002ac5

0800d258 <__sfp_lock_release>:
 800d258:	4801      	ldr	r0, [pc, #4]	; (800d260 <__sfp_lock_release+0x8>)
 800d25a:	f000 b8ae 	b.w	800d3ba <__retarget_lock_release_recursive>
 800d25e:	bf00      	nop
 800d260:	20002ac5 	.word	0x20002ac5

0800d264 <__sinit_lock_acquire>:
 800d264:	4801      	ldr	r0, [pc, #4]	; (800d26c <__sinit_lock_acquire+0x8>)
 800d266:	f000 b8a7 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800d26a:	bf00      	nop
 800d26c:	20002ac6 	.word	0x20002ac6

0800d270 <__sinit_lock_release>:
 800d270:	4801      	ldr	r0, [pc, #4]	; (800d278 <__sinit_lock_release+0x8>)
 800d272:	f000 b8a2 	b.w	800d3ba <__retarget_lock_release_recursive>
 800d276:	bf00      	nop
 800d278:	20002ac6 	.word	0x20002ac6

0800d27c <__sinit>:
 800d27c:	b510      	push	{r4, lr}
 800d27e:	4604      	mov	r4, r0
 800d280:	f7ff fff0 	bl	800d264 <__sinit_lock_acquire>
 800d284:	69a3      	ldr	r3, [r4, #24]
 800d286:	b11b      	cbz	r3, 800d290 <__sinit+0x14>
 800d288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d28c:	f7ff bff0 	b.w	800d270 <__sinit_lock_release>
 800d290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d294:	6523      	str	r3, [r4, #80]	; 0x50
 800d296:	4b13      	ldr	r3, [pc, #76]	; (800d2e4 <__sinit+0x68>)
 800d298:	4a13      	ldr	r2, [pc, #76]	; (800d2e8 <__sinit+0x6c>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	bf04      	itt	eq
 800d2a2:	2301      	moveq	r3, #1
 800d2a4:	61a3      	streq	r3, [r4, #24]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f000 f820 	bl	800d2ec <__sfp>
 800d2ac:	6060      	str	r0, [r4, #4]
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 f81c 	bl	800d2ec <__sfp>
 800d2b4:	60a0      	str	r0, [r4, #8]
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f000 f818 	bl	800d2ec <__sfp>
 800d2bc:	2200      	movs	r2, #0
 800d2be:	60e0      	str	r0, [r4, #12]
 800d2c0:	2104      	movs	r1, #4
 800d2c2:	6860      	ldr	r0, [r4, #4]
 800d2c4:	f7ff ff82 	bl	800d1cc <std>
 800d2c8:	68a0      	ldr	r0, [r4, #8]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	2109      	movs	r1, #9
 800d2ce:	f7ff ff7d 	bl	800d1cc <std>
 800d2d2:	68e0      	ldr	r0, [r4, #12]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	2112      	movs	r1, #18
 800d2d8:	f7ff ff78 	bl	800d1cc <std>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	61a3      	str	r3, [r4, #24]
 800d2e0:	e7d2      	b.n	800d288 <__sinit+0xc>
 800d2e2:	bf00      	nop
 800d2e4:	0800dc70 	.word	0x0800dc70
 800d2e8:	0800d215 	.word	0x0800d215

0800d2ec <__sfp>:
 800d2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	f7ff ffac 	bl	800d24c <__sfp_lock_acquire>
 800d2f4:	4b1e      	ldr	r3, [pc, #120]	; (800d370 <__sfp+0x84>)
 800d2f6:	681e      	ldr	r6, [r3, #0]
 800d2f8:	69b3      	ldr	r3, [r6, #24]
 800d2fa:	b913      	cbnz	r3, 800d302 <__sfp+0x16>
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f7ff ffbd 	bl	800d27c <__sinit>
 800d302:	3648      	adds	r6, #72	; 0x48
 800d304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d308:	3b01      	subs	r3, #1
 800d30a:	d503      	bpl.n	800d314 <__sfp+0x28>
 800d30c:	6833      	ldr	r3, [r6, #0]
 800d30e:	b30b      	cbz	r3, 800d354 <__sfp+0x68>
 800d310:	6836      	ldr	r6, [r6, #0]
 800d312:	e7f7      	b.n	800d304 <__sfp+0x18>
 800d314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d318:	b9d5      	cbnz	r5, 800d350 <__sfp+0x64>
 800d31a:	4b16      	ldr	r3, [pc, #88]	; (800d374 <__sfp+0x88>)
 800d31c:	60e3      	str	r3, [r4, #12]
 800d31e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d322:	6665      	str	r5, [r4, #100]	; 0x64
 800d324:	f000 f847 	bl	800d3b6 <__retarget_lock_init_recursive>
 800d328:	f7ff ff96 	bl	800d258 <__sfp_lock_release>
 800d32c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d334:	6025      	str	r5, [r4, #0]
 800d336:	61a5      	str	r5, [r4, #24]
 800d338:	2208      	movs	r2, #8
 800d33a:	4629      	mov	r1, r5
 800d33c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d340:	f7fd fab0 	bl	800a8a4 <memset>
 800d344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d34c:	4620      	mov	r0, r4
 800d34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d350:	3468      	adds	r4, #104	; 0x68
 800d352:	e7d9      	b.n	800d308 <__sfp+0x1c>
 800d354:	2104      	movs	r1, #4
 800d356:	4638      	mov	r0, r7
 800d358:	f7ff ff62 	bl	800d220 <__sfmoreglue>
 800d35c:	4604      	mov	r4, r0
 800d35e:	6030      	str	r0, [r6, #0]
 800d360:	2800      	cmp	r0, #0
 800d362:	d1d5      	bne.n	800d310 <__sfp+0x24>
 800d364:	f7ff ff78 	bl	800d258 <__sfp_lock_release>
 800d368:	230c      	movs	r3, #12
 800d36a:	603b      	str	r3, [r7, #0]
 800d36c:	e7ee      	b.n	800d34c <__sfp+0x60>
 800d36e:	bf00      	nop
 800d370:	0800dc70 	.word	0x0800dc70
 800d374:	ffff0001 	.word	0xffff0001

0800d378 <_fwalk_reent>:
 800d378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d37c:	4606      	mov	r6, r0
 800d37e:	4688      	mov	r8, r1
 800d380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d384:	2700      	movs	r7, #0
 800d386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d38a:	f1b9 0901 	subs.w	r9, r9, #1
 800d38e:	d505      	bpl.n	800d39c <_fwalk_reent+0x24>
 800d390:	6824      	ldr	r4, [r4, #0]
 800d392:	2c00      	cmp	r4, #0
 800d394:	d1f7      	bne.n	800d386 <_fwalk_reent+0xe>
 800d396:	4638      	mov	r0, r7
 800d398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d39c:	89ab      	ldrh	r3, [r5, #12]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d907      	bls.n	800d3b2 <_fwalk_reent+0x3a>
 800d3a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	d003      	beq.n	800d3b2 <_fwalk_reent+0x3a>
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	47c0      	blx	r8
 800d3b0:	4307      	orrs	r7, r0
 800d3b2:	3568      	adds	r5, #104	; 0x68
 800d3b4:	e7e9      	b.n	800d38a <_fwalk_reent+0x12>

0800d3b6 <__retarget_lock_init_recursive>:
 800d3b6:	4770      	bx	lr

0800d3b8 <__retarget_lock_acquire_recursive>:
 800d3b8:	4770      	bx	lr

0800d3ba <__retarget_lock_release_recursive>:
 800d3ba:	4770      	bx	lr

0800d3bc <__swhatbuf_r>:
 800d3bc:	b570      	push	{r4, r5, r6, lr}
 800d3be:	460e      	mov	r6, r1
 800d3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	b096      	sub	sp, #88	; 0x58
 800d3c8:	4614      	mov	r4, r2
 800d3ca:	461d      	mov	r5, r3
 800d3cc:	da08      	bge.n	800d3e0 <__swhatbuf_r+0x24>
 800d3ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	602a      	str	r2, [r5, #0]
 800d3d6:	061a      	lsls	r2, r3, #24
 800d3d8:	d410      	bmi.n	800d3fc <__swhatbuf_r+0x40>
 800d3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3de:	e00e      	b.n	800d3fe <__swhatbuf_r+0x42>
 800d3e0:	466a      	mov	r2, sp
 800d3e2:	f000 f903 	bl	800d5ec <_fstat_r>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	dbf1      	blt.n	800d3ce <__swhatbuf_r+0x12>
 800d3ea:	9a01      	ldr	r2, [sp, #4]
 800d3ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3f4:	425a      	negs	r2, r3
 800d3f6:	415a      	adcs	r2, r3
 800d3f8:	602a      	str	r2, [r5, #0]
 800d3fa:	e7ee      	b.n	800d3da <__swhatbuf_r+0x1e>
 800d3fc:	2340      	movs	r3, #64	; 0x40
 800d3fe:	2000      	movs	r0, #0
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	b016      	add	sp, #88	; 0x58
 800d404:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d408 <__smakebuf_r>:
 800d408:	898b      	ldrh	r3, [r1, #12]
 800d40a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d40c:	079d      	lsls	r5, r3, #30
 800d40e:	4606      	mov	r6, r0
 800d410:	460c      	mov	r4, r1
 800d412:	d507      	bpl.n	800d424 <__smakebuf_r+0x1c>
 800d414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	2301      	movs	r3, #1
 800d41e:	6163      	str	r3, [r4, #20]
 800d420:	b002      	add	sp, #8
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	ab01      	add	r3, sp, #4
 800d426:	466a      	mov	r2, sp
 800d428:	f7ff ffc8 	bl	800d3bc <__swhatbuf_r>
 800d42c:	9900      	ldr	r1, [sp, #0]
 800d42e:	4605      	mov	r5, r0
 800d430:	4630      	mov	r0, r6
 800d432:	f7ff f963 	bl	800c6fc <_malloc_r>
 800d436:	b948      	cbnz	r0, 800d44c <__smakebuf_r+0x44>
 800d438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d43c:	059a      	lsls	r2, r3, #22
 800d43e:	d4ef      	bmi.n	800d420 <__smakebuf_r+0x18>
 800d440:	f023 0303 	bic.w	r3, r3, #3
 800d444:	f043 0302 	orr.w	r3, r3, #2
 800d448:	81a3      	strh	r3, [r4, #12]
 800d44a:	e7e3      	b.n	800d414 <__smakebuf_r+0xc>
 800d44c:	4b0d      	ldr	r3, [pc, #52]	; (800d484 <__smakebuf_r+0x7c>)
 800d44e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d450:	89a3      	ldrh	r3, [r4, #12]
 800d452:	6020      	str	r0, [r4, #0]
 800d454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d458:	81a3      	strh	r3, [r4, #12]
 800d45a:	9b00      	ldr	r3, [sp, #0]
 800d45c:	6163      	str	r3, [r4, #20]
 800d45e:	9b01      	ldr	r3, [sp, #4]
 800d460:	6120      	str	r0, [r4, #16]
 800d462:	b15b      	cbz	r3, 800d47c <__smakebuf_r+0x74>
 800d464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d468:	4630      	mov	r0, r6
 800d46a:	f000 f8d1 	bl	800d610 <_isatty_r>
 800d46e:	b128      	cbz	r0, 800d47c <__smakebuf_r+0x74>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f023 0303 	bic.w	r3, r3, #3
 800d476:	f043 0301 	orr.w	r3, r3, #1
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	89a0      	ldrh	r0, [r4, #12]
 800d47e:	4305      	orrs	r5, r0
 800d480:	81a5      	strh	r5, [r4, #12]
 800d482:	e7cd      	b.n	800d420 <__smakebuf_r+0x18>
 800d484:	0800d215 	.word	0x0800d215

0800d488 <_malloc_usable_size_r>:
 800d488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d48c:	1f18      	subs	r0, r3, #4
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfbc      	itt	lt
 800d492:	580b      	ldrlt	r3, [r1, r0]
 800d494:	18c0      	addlt	r0, r0, r3
 800d496:	4770      	bx	lr

0800d498 <_raise_r>:
 800d498:	291f      	cmp	r1, #31
 800d49a:	b538      	push	{r3, r4, r5, lr}
 800d49c:	4604      	mov	r4, r0
 800d49e:	460d      	mov	r5, r1
 800d4a0:	d904      	bls.n	800d4ac <_raise_r+0x14>
 800d4a2:	2316      	movs	r3, #22
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4ae:	b112      	cbz	r2, 800d4b6 <_raise_r+0x1e>
 800d4b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4b4:	b94b      	cbnz	r3, 800d4ca <_raise_r+0x32>
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f000 f830 	bl	800d51c <_getpid_r>
 800d4bc:	462a      	mov	r2, r5
 800d4be:	4601      	mov	r1, r0
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c6:	f000 b817 	b.w	800d4f8 <_kill_r>
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d00a      	beq.n	800d4e4 <_raise_r+0x4c>
 800d4ce:	1c59      	adds	r1, r3, #1
 800d4d0:	d103      	bne.n	800d4da <_raise_r+0x42>
 800d4d2:	2316      	movs	r3, #22
 800d4d4:	6003      	str	r3, [r0, #0]
 800d4d6:	2001      	movs	r0, #1
 800d4d8:	e7e7      	b.n	800d4aa <_raise_r+0x12>
 800d4da:	2400      	movs	r4, #0
 800d4dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	4798      	blx	r3
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	e7e0      	b.n	800d4aa <_raise_r+0x12>

0800d4e8 <raise>:
 800d4e8:	4b02      	ldr	r3, [pc, #8]	; (800d4f4 <raise+0xc>)
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	6818      	ldr	r0, [r3, #0]
 800d4ee:	f7ff bfd3 	b.w	800d498 <_raise_r>
 800d4f2:	bf00      	nop
 800d4f4:	20000024 	.word	0x20000024

0800d4f8 <_kill_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	; (800d518 <_kill_r+0x20>)
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	4608      	mov	r0, r1
 800d502:	4611      	mov	r1, r2
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	f7f5 fca9 	bl	8002e5c <_kill>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	d102      	bne.n	800d514 <_kill_r+0x1c>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	b103      	cbz	r3, 800d514 <_kill_r+0x1c>
 800d512:	6023      	str	r3, [r4, #0]
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	bf00      	nop
 800d518:	20002ac0 	.word	0x20002ac0

0800d51c <_getpid_r>:
 800d51c:	f7f5 bc96 	b.w	8002e4c <_getpid>

0800d520 <__sread>:
 800d520:	b510      	push	{r4, lr}
 800d522:	460c      	mov	r4, r1
 800d524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d528:	f000 f894 	bl	800d654 <_read_r>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	bfab      	itete	ge
 800d530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d532:	89a3      	ldrhlt	r3, [r4, #12]
 800d534:	181b      	addge	r3, r3, r0
 800d536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d53a:	bfac      	ite	ge
 800d53c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d53e:	81a3      	strhlt	r3, [r4, #12]
 800d540:	bd10      	pop	{r4, pc}

0800d542 <__swrite>:
 800d542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d546:	461f      	mov	r7, r3
 800d548:	898b      	ldrh	r3, [r1, #12]
 800d54a:	05db      	lsls	r3, r3, #23
 800d54c:	4605      	mov	r5, r0
 800d54e:	460c      	mov	r4, r1
 800d550:	4616      	mov	r6, r2
 800d552:	d505      	bpl.n	800d560 <__swrite+0x1e>
 800d554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d558:	2302      	movs	r3, #2
 800d55a:	2200      	movs	r2, #0
 800d55c:	f000 f868 	bl	800d630 <_lseek_r>
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d56a:	81a3      	strh	r3, [r4, #12]
 800d56c:	4632      	mov	r2, r6
 800d56e:	463b      	mov	r3, r7
 800d570:	4628      	mov	r0, r5
 800d572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d576:	f000 b817 	b.w	800d5a8 <_write_r>

0800d57a <__sseek>:
 800d57a:	b510      	push	{r4, lr}
 800d57c:	460c      	mov	r4, r1
 800d57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d582:	f000 f855 	bl	800d630 <_lseek_r>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	bf15      	itete	ne
 800d58c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d596:	81a3      	strheq	r3, [r4, #12]
 800d598:	bf18      	it	ne
 800d59a:	81a3      	strhne	r3, [r4, #12]
 800d59c:	bd10      	pop	{r4, pc}

0800d59e <__sclose>:
 800d59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a2:	f000 b813 	b.w	800d5cc <_close_r>
	...

0800d5a8 <_write_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d07      	ldr	r5, [pc, #28]	; (800d5c8 <_write_r+0x20>)
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	602a      	str	r2, [r5, #0]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f7f5 fc87 	bl	8002eca <_write>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d102      	bne.n	800d5c6 <_write_r+0x1e>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	b103      	cbz	r3, 800d5c6 <_write_r+0x1e>
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	20002ac0 	.word	0x20002ac0

0800d5cc <_close_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4d06      	ldr	r5, [pc, #24]	; (800d5e8 <_close_r+0x1c>)
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	602b      	str	r3, [r5, #0]
 800d5d8:	f7f5 fc93 	bl	8002f02 <_close>
 800d5dc:	1c43      	adds	r3, r0, #1
 800d5de:	d102      	bne.n	800d5e6 <_close_r+0x1a>
 800d5e0:	682b      	ldr	r3, [r5, #0]
 800d5e2:	b103      	cbz	r3, 800d5e6 <_close_r+0x1a>
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	20002ac0 	.word	0x20002ac0

0800d5ec <_fstat_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d07      	ldr	r5, [pc, #28]	; (800d60c <_fstat_r+0x20>)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4608      	mov	r0, r1
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	602b      	str	r3, [r5, #0]
 800d5fa:	f7f5 fc8e 	bl	8002f1a <_fstat>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	d102      	bne.n	800d608 <_fstat_r+0x1c>
 800d602:	682b      	ldr	r3, [r5, #0]
 800d604:	b103      	cbz	r3, 800d608 <_fstat_r+0x1c>
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	bd38      	pop	{r3, r4, r5, pc}
 800d60a:	bf00      	nop
 800d60c:	20002ac0 	.word	0x20002ac0

0800d610 <_isatty_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d06      	ldr	r5, [pc, #24]	; (800d62c <_isatty_r+0x1c>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	f7f5 fc8d 	bl	8002f3a <_isatty>
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	d102      	bne.n	800d62a <_isatty_r+0x1a>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	b103      	cbz	r3, 800d62a <_isatty_r+0x1a>
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	20002ac0 	.word	0x20002ac0

0800d630 <_lseek_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d07      	ldr	r5, [pc, #28]	; (800d650 <_lseek_r+0x20>)
 800d634:	4604      	mov	r4, r0
 800d636:	4608      	mov	r0, r1
 800d638:	4611      	mov	r1, r2
 800d63a:	2200      	movs	r2, #0
 800d63c:	602a      	str	r2, [r5, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	f7f5 fc86 	bl	8002f50 <_lseek>
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	d102      	bne.n	800d64e <_lseek_r+0x1e>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	b103      	cbz	r3, 800d64e <_lseek_r+0x1e>
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	bd38      	pop	{r3, r4, r5, pc}
 800d650:	20002ac0 	.word	0x20002ac0

0800d654 <_read_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	; (800d674 <_read_r+0x20>)
 800d658:	4604      	mov	r4, r0
 800d65a:	4608      	mov	r0, r1
 800d65c:	4611      	mov	r1, r2
 800d65e:	2200      	movs	r2, #0
 800d660:	602a      	str	r2, [r5, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	f7f5 fc14 	bl	8002e90 <_read>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d102      	bne.n	800d672 <_read_r+0x1e>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	b103      	cbz	r3, 800d672 <_read_r+0x1e>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	20002ac0 	.word	0x20002ac0

0800d678 <_init>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	bf00      	nop
 800d67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67e:	bc08      	pop	{r3}
 800d680:	469e      	mov	lr, r3
 800d682:	4770      	bx	lr

0800d684 <_fini>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	bf00      	nop
 800d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68a:	bc08      	pop	{r3}
 800d68c:	469e      	mov	lr, r3
 800d68e:	4770      	bx	lr
