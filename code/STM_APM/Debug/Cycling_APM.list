
Cycling_APM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004438  08004438  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004440  08004440  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080044b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080044b8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e20d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d50  00000000  00000000  0002e2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00030000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00030bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205ec  00000000  00000000  000316a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed58  00000000  00000000  00051c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c21f3  00000000  00000000  000609ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122bdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e8  00000000  00000000  00122c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800436c 	.word	0x0800436c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800436c 	.word	0x0800436c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <send_uart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Registers for interfacing with the sensor */

void send_uart(char *string){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff fe1f 	bl	80001d0 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000); // Transmit in blocking mode
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	b29a      	uxth	r2, r3
 800059a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <send_uart+0x2c>)
 80005a2:	f002 fdd3 	bl	800314c <HAL_UART_Transmit>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000e0 	.word	0x200000e0

080005b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b09c      	sub	sp, #112	; 0x70
 80005b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ba:	f000 fb8e 	bl	8000cda <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005be:	f000 f827 	bl	8000610 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c2:	f000 f8e7 	bl	8000794 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005c6:	f000 f8b5 	bl	8000734 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80005ca:	f000 f873 	bl	80006b4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	pm_initialise(&data, &hi2c1);
 80005ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <main+0x50>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f92c 	bl	8000832 <pm_initialise>
    char str[80];

	send_uart("Testing UART in blocking mode\n\r");
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <main+0x54>)
 80005dc:	f7ff ffd2 	bl	8000584 <send_uart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		pm_read(&data);
 80005e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f954 	bl	8000892 <pm_read>
	   sprintf(str, "Value of PM2.5 = %d\r\n", data.pm25_env);
 80005ea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80005ee:	461a      	mov	r2, r3
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4906      	ldr	r1, [pc, #24]	; (800060c <main+0x58>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fa4b 	bl	8003a90 <siprintf>
	   send_uart(str);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffc1 	bl	8000584 <send_uart>
		pm_read(&data);
 8000602:	e7ed      	b.n	80005e0 <main+0x2c>
 8000604:	2000008c 	.word	0x2000008c
 8000608:	08004384 	.word	0x08004384
 800060c:	080043a4 	.word	0x080043a4

08000610 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fa2e 	bl	8003a80 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f001 fbc5 	bl	8001dc4 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
		{
			Error_Handler();
 8000640:	f000 f8f2 	bl	8000828 <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064c:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2310      	movs	r3, #16
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLN = 10;
 800065e:	230a      	movs	r3, #10
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fbfc 	bl	8001e70 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x72>
		{
			Error_Handler();
 800067e:	f000 f8d3 	bl	8000828 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	603b      	str	r3, [r7, #0]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fffc 	bl	8002698 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9a>
		{
			Error_Handler();
 80006a6:	f000 f8bf 	bl	8000828 <Error_Handler>
		}
	}
 80006aa:	bf00      	nop
 80006ac:	3758      	adds	r7, #88	; 0x58
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_I2C1_Init>:
	 * @brief I2C1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C1_Init(void)
	{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
		/* USER CODE END I2C1_Init 0 */

		/* USER CODE BEGIN I2C1_Init 1 */

		/* USER CODE END I2C1_Init 1 */
		hi2c1.Instance = I2C1;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_I2C1_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_I2C1_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
		hi2c1.Init.Timing = 0x10909CEC;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_I2C1_Init+0x74>)
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <MX_I2C1_Init+0x7c>)
 80006c2:	605a      	str	r2, [r3, #4]
		hi2c1.Init.OwnAddress1 = 0;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_I2C1_Init+0x74>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
		hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <MX_I2C1_Init+0x74>)
 80006f0:	f000 fdd0 	bl	8001294 <HAL_I2C_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x4a>
		{
			Error_Handler();
 80006fa:	f000 f895 	bl	8000828 <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_I2C1_Init+0x74>)
 8000702:	f001 fab9 	bl	8001c78 <HAL_I2CEx_ConfigAnalogFilter>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x5c>
		{
			Error_Handler();
 800070c:	f000 f88c 	bl	8000828 <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_I2C1_Init+0x74>)
 8000714:	f001 fafb 	bl	8001d0e <HAL_I2CEx_ConfigDigitalFilter>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x6e>
		{
			Error_Handler();
 800071e:	f000 f883 	bl	8000828 <Error_Handler>
		}
		/* USER CODE BEGIN I2C1_Init 2 */

		/* USER CODE END I2C1_Init 2 */

	}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000008c 	.word	0x2000008c
 800072c:	40005400 	.word	0x40005400
 8000730:	10909cec 	.word	0x10909cec

08000734 <MX_USART2_UART_Init>:
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void)
	{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART2_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART2_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART2_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
		huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000778:	f002 fc9a 	bl	80030b0 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x52>
		{
			Error_Handler();
 8000782:	f000 f851 	bl	8000828 <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000e0 	.word	0x200000e0
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void)
	{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0x90>)
 80007f8:	f000 fd34 	bl	8001264 <HAL_GPIO_WritePin>

		/*Configure GPIO pin : LD3_Pin */
		GPIO_InitStruct.Pin = LD3_Pin;
 80007fc:	2308      	movs	r3, #8
 80007fe:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_GPIO_Init+0x90>)
 8000814:	f000 fbbc 	bl	8000f90 <HAL_GPIO_Init>

	}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	48000400 	.word	0x48000400

08000828 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>

08000832 <pm_initialise>:
#include "particulate_matter.h"     // Include header file for pm sensor

HAL_StatusTypeDef pm_initialise(pm_data *dev, I2C_HandleTypeDef *i2cHandle) {
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->pm10_standard = 0;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	809a      	strh	r2, [r3, #4]
	dev->pm25_standard = 0;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	80da      	strh	r2, [r3, #6]
	dev->pm100_standard = 0;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	811a      	strh	r2, [r3, #8]

	dev->pm10_env = 0;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	815a      	strh	r2, [r3, #10]
	dev->pm25_env = 0;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	819a      	strh	r2, [r3, #12]
	dev->pm100_env = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	81da      	strh	r2, [r3, #14]

	dev->particles_03um = 0;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	821a      	strh	r2, [r3, #16]
	dev->particles_05um = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	825a      	strh	r2, [r3, #18]
	dev->particles_10um = 0;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	829a      	strh	r2, [r3, #20]
	dev->particles_25um = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	82da      	strh	r2, [r3, #22]
	dev->particles_100um = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	835a      	strh	r2, [r3, #26]

	return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <pm_read>:

HAL_StatusTypeDef pm_read(pm_data *dev) {
 8000892:	b580      	push	{r7, lr}
 8000894:	b094      	sub	sp, #80	; 0x50
 8000896:	af02      	add	r7, sp, #8
 8000898:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t pm_buffer[32] = { 0 };
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]

	/* Write address pointer to start of the registers */
	status = HAL_I2C_Master_Transmit(dev->i2cHandle, PM_ADDR, PM_SC1, 1,
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	2200      	movs	r2, #0
 80008c0:	2124      	movs	r1, #36	; 0x24
 80008c2:	f000 fd77 	bl	80013b4 <HAL_I2C_Master_Transmit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 80008cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <pm_read+0x48>
		return status;
 80008d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008d8:	e079      	b.n	80009ce <pm_read+0x13c>
	} else {
		/* Read particulate matter registers */
		status = HAL_I2C_Master_Receive(dev->i2cHandle, PM_ADDR, pm_buffer, 32,
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2320      	movs	r3, #32
 80008ea:	2124      	movs	r1, #36	; 0x24
 80008ec:	f000 fe56 	bl	800159c <HAL_I2C_Master_Receive>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				HAL_MAX_DELAY);

		/* Check if first element is 0x42 */
		if (status != HAL_OK) {
 80008f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <pm_read+0x72>
			return status;
 80008fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000902:	e064      	b.n	80009ce <pm_read+0x13c>
		} else {
			if (pm_buffer[0] != 0x42) {
 8000904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000908:	2b42      	cmp	r3, #66	; 0x42
 800090a:	d002      	beq.n	8000912 <pm_read+0x80>
				return status;
 800090c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000910:	e05d      	b.n	80009ce <pm_read+0x13c>
			} else {

				/* Shift data in buffer */
				uint16_t buffer_u16[12];
				for (uint8_t i = 0; i < 12; i++) {
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000918:	e030      	b.n	800097c <pm_read+0xea>
					buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
 800091a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800091e:	3301      	adds	r3, #1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	3301      	adds	r3, #1
 8000924:	3348      	adds	r3, #72	; 0x48
 8000926:	443b      	add	r3, r7
 8000928:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800092c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000930:	b292      	uxth	r2, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	3348      	adds	r3, #72	; 0x48
 8000936:	443b      	add	r3, r7
 8000938:	f823 2c3c 	strh.w	r2, [r3, #-60]
					buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
 800093c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	3348      	adds	r3, #72	; 0x48
 8000944:	443b      	add	r3, r7
 8000946:	f833 1c3c 	ldrh.w	r1, [r3, #-60]
 800094a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800094e:	3301      	adds	r3, #1
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	3348      	adds	r3, #72	; 0x48
 8000954:	443b      	add	r3, r7
 8000956:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800095a:	b29b      	uxth	r3, r3
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b29a      	uxth	r2, r3
 8000960:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000964:	440a      	add	r2, r1
 8000966:	b292      	uxth	r2, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	3348      	adds	r3, #72	; 0x48
 800096c:	443b      	add	r3, r7
 800096e:	f823 2c3c 	strh.w	r2, [r3, #-60]
				for (uint8_t i = 0; i < 12; i++) {
 8000972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000976:	3301      	adds	r3, #1
 8000978:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800097c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000980:	2b0b      	cmp	r3, #11
 8000982:	d9ca      	bls.n	800091a <pm_read+0x88>
				}

				/* Store readings in structure */
				dev->pm10_standard = buffer_u16[0];
 8000984:	89ba      	ldrh	r2, [r7, #12]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	809a      	strh	r2, [r3, #4]
				dev->pm25_standard = buffer_u16[1];
 800098a:	89fa      	ldrh	r2, [r7, #14]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	80da      	strh	r2, [r3, #6]
				dev->pm100_standard = buffer_u16[2];
 8000990:	8a3a      	ldrh	r2, [r7, #16]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	811a      	strh	r2, [r3, #8]
				dev->pm10_env = buffer_u16[3];
 8000996:	8a7a      	ldrh	r2, [r7, #18]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	815a      	strh	r2, [r3, #10]
				dev->pm25_env = buffer_u16[4];
 800099c:	8aba      	ldrh	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	819a      	strh	r2, [r3, #12]
				dev->pm100_env = buffer_u16[5];
 80009a2:	8afa      	ldrh	r2, [r7, #22]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	81da      	strh	r2, [r3, #14]
				dev->particles_03um = buffer_u16[6];
 80009a8:	8b3a      	ldrh	r2, [r7, #24]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	821a      	strh	r2, [r3, #16]
				dev->particles_05um = buffer_u16[7];
 80009ae:	8b7a      	ldrh	r2, [r7, #26]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	825a      	strh	r2, [r3, #18]
				dev->particles_10um = buffer_u16[8];
 80009b4:	8bba      	ldrh	r2, [r7, #28]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	829a      	strh	r2, [r3, #20]
				dev->particles_25um = buffer_u16[9];
 80009ba:	8bfa      	ldrh	r2, [r7, #30]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	82da      	strh	r2, [r3, #22]
				dev->particles_50um = buffer_u16[10];
 80009c0:	8c3a      	ldrh	r2, [r7, #32]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	831a      	strh	r2, [r3, #24]
				dev->particles_100um = buffer_u16[11];
 80009c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	835a      	strh	r2, [r3, #26]
			}
		}
	}
	return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3748      	adds	r7, #72	; 0x48
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x44>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x44>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6593      	str	r3, [r2, #88]	; 0x58
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09e      	sub	sp, #120	; 0x78
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	2254      	movs	r2, #84	; 0x54
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 f81d 	bl	8003a80 <memset>
  if(hi2c->Instance==I2C1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <HAL_I2C_MspInit+0xa4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d135      	bne.n	8000abc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a50:	2340      	movs	r3, #64	; 0x40
 8000a52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 f83f 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a68:	f7ff fede 	bl	8000828 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_I2C_MspInit+0xa8>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <HAL_I2C_MspInit+0xa8>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_I2C_MspInit+0xa8>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a84:	23c0      	movs	r3, #192	; 0xc0
 8000a86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a88:	2312      	movs	r3, #18
 8000a8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a94:	2304      	movs	r3, #4
 8000a96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_I2C_MspInit+0xac>)
 8000aa0:	f000 fa76 	bl	8000f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_I2C_MspInit+0xa8>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_I2C_MspInit+0xa8>)
 8000aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aae:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_I2C_MspInit+0xa8>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3778      	adds	r7, #120	; 0x78
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09e      	sub	sp, #120	; 0x78
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2254      	movs	r2, #84	; 0x54
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 ffc5 	bl	8003a80 <memset>
  if(huart->Instance==USART2)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <HAL_UART_MspInit+0xcc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d148      	bne.n	8000b92 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 ffe7 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b18:	f7ff fe86 	bl	8000828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_UART_MspInit+0xd0>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <HAL_UART_MspInit+0xd0>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b26:	6593      	str	r3, [r2, #88]	; 0x58
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_UART_MspInit+0xd0>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_UART_MspInit+0xd0>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_UART_MspInit+0xd0>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0xd0>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fa11 	bl	8000f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b80:	2303      	movs	r3, #3
 8000b82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 f9ff 	bl	8000f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3778      	adds	r7, #120	; 0x78
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f8c8 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f002 ff00 	bl	8003a2c <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20010000 	.word	0x20010000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000164 	.word	0x20000164
 8000c60:	20000180 	.word	0x20000180

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	; (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 febf 	bl	8003a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fc7b 	bl	80005b4 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ccc:	08004448 	.word	0x08004448
  ldr r2, =_sbss
 8000cd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd4:	2000017c 	.word	0x2000017c

08000cd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_IRQHandler>

08000cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f91f 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff fe6c 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d023      	beq.n	8000d68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_InitTick+0x70>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f91d 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10f      	bne.n	8000d62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d809      	bhi.n	8000d5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f8f5 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_InitTick+0x74>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e004      	b.n	8000d6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e001      	b.n	8000d6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000168 	.word	0x20000168

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000168 	.word	0x20000168

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e148      	b.n	8001232 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 813a 	beq.w	800122c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x40>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 0201 	and.w	r2, r3, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b03      	cmp	r3, #3
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0203 	and.w	r2, r3, #3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8094 	beq.w	800122c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b52      	ldr	r3, [pc, #328]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001108:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6613      	str	r3, [r2, #96]	; 0x60
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 8001112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800111c:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <HAL_GPIO_Init+0x2c4>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001146:	d00d      	beq.n	8001164 <HAL_GPIO_Init+0x1d4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_GPIO_Init+0x2c8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x1d0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a42      	ldr	r2, [pc, #264]	; (800125c <HAL_GPIO_Init+0x2cc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_GPIO_Init+0x1cc>
 8001158:	2302      	movs	r3, #2
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 800115c:	2307      	movs	r3, #7
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 8001164:	2300      	movs	r3, #0
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001176:	4937      	ldr	r1, [pc, #220]	; (8001254 <HAL_GPIO_Init+0x2c4>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a8:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d2:	4a23      	ldr	r2, [pc, #140]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	f47f aeaf 	bne.w	8000fa0 <HAL_GPIO_Init+0x10>
  }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	48000400 	.word	0x48000400
 800125c:	48000800 	.word	0x48000800
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001280:	e002      	b.n	8001288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e081      	b.n	80013aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fbb0 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2224      	movs	r2, #36	; 0x24
 80012c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d107      	bne.n	800130e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	e006      	b.n	800131c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800131a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d104      	bne.n	800132e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800132c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69d9      	ldr	r1, [r3, #28]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1a      	ldr	r2, [r3, #32]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2220      	movs	r2, #32
 8001396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	461a      	mov	r2, r3
 80013c0:	460b      	mov	r3, r1
 80013c2:	817b      	strh	r3, [r7, #10]
 80013c4:	4613      	mov	r3, r2
 80013c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	f040 80da 	bne.w	800158a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_I2C_Master_Transmit+0x30>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e0d3      	b.n	800158c <HAL_I2C_Master_Transmit+0x1d8>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ec:	f7ff fcde 	bl	8000dac <HAL_GetTick>
 80013f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2319      	movs	r3, #25
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f9e6 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0be      	b.n	800158c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2221      	movs	r2, #33	; 0x21
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2210      	movs	r2, #16
 800141a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	893a      	ldrh	r2, [r7, #8]
 800142e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143a:	b29b      	uxth	r3, r3
 800143c:	2bff      	cmp	r3, #255	; 0xff
 800143e:	d90e      	bls.n	800145e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	22ff      	movs	r2, #255	; 0xff
 8001444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144a:	b2da      	uxtb	r2, r3
 800144c:	8979      	ldrh	r1, [r7, #10]
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <HAL_I2C_Master_Transmit+0x1e0>)
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fbdc 	bl	8001c14 <I2C_TransferConfig>
 800145c:	e06c      	b.n	8001538 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001462:	b29a      	uxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	b2da      	uxtb	r2, r3
 800146e:	8979      	ldrh	r1, [r7, #10]
 8001470:	4b48      	ldr	r3, [pc, #288]	; (8001594 <HAL_I2C_Master_Transmit+0x1e0>)
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 fbcb 	bl	8001c14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800147e:	e05b      	b.n	8001538 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	6a39      	ldr	r1, [r7, #32]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 f9e3 	bl	8001850 <I2C_WaitOnTXISFlagUntilTimeout>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e07b      	b.n	800158c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d034      	beq.n	8001538 <HAL_I2C_Master_Transmit+0x184>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d130      	bne.n	8001538 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	2200      	movs	r2, #0
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 f975 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e04d      	b.n	800158c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	2bff      	cmp	r3, #255	; 0xff
 80014f8:	d90e      	bls.n	8001518 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	22ff      	movs	r2, #255	; 0xff
 80014fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001504:	b2da      	uxtb	r2, r3
 8001506:	8979      	ldrh	r1, [r7, #10]
 8001508:	2300      	movs	r3, #0
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 fb7f 	bl	8001c14 <I2C_TransferConfig>
 8001516:	e00f      	b.n	8001538 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151c:	b29a      	uxth	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001526:	b2da      	uxtb	r2, r3
 8001528:	8979      	ldrh	r1, [r7, #10]
 800152a:	2300      	movs	r3, #0
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 fb6e 	bl	8001c14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153c:	b29b      	uxth	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d19e      	bne.n	8001480 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	6a39      	ldr	r1, [r7, #32]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9c2 	bl	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e01a      	b.n	800158c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2220      	movs	r2, #32
 800155c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_I2C_Master_Transmit+0x1e4>)
 800156a:	400b      	ands	r3, r1
 800156c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2220      	movs	r2, #32
 8001572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800158a:	2302      	movs	r3, #2
  }
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	80002000 	.word	0x80002000
 8001598:	fe00e800 	.word	0xfe00e800

0800159c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	461a      	mov	r2, r3
 80015a8:	460b      	mov	r3, r1
 80015aa:	817b      	strh	r3, [r7, #10]
 80015ac:	4613      	mov	r3, r2
 80015ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	f040 80db 	bne.w	8001774 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_I2C_Master_Receive+0x30>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e0d4      	b.n	8001776 <HAL_I2C_Master_Receive+0x1da>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015d4:	f7ff fbea 	bl	8000dac <HAL_GetTick>
 80015d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2319      	movs	r3, #25
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f8f2 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0bf      	b.n	8001776 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2222      	movs	r2, #34	; 0x22
 80015fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29b      	uxth	r3, r3
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d90e      	bls.n	8001646 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	b2da      	uxtb	r2, r3
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	4b52      	ldr	r3, [pc, #328]	; (8001780 <HAL_I2C_Master_Receive+0x1e4>)
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fae8 	bl	8001c14 <I2C_TransferConfig>
 8001644:	e06d      	b.n	8001722 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001654:	b2da      	uxtb	r2, r3
 8001656:	8979      	ldrh	r1, [r7, #10]
 8001658:	4b49      	ldr	r3, [pc, #292]	; (8001780 <HAL_I2C_Master_Receive+0x1e4>)
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fad7 	bl	8001c14 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001666:	e05c      	b.n	8001722 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	6a39      	ldr	r1, [r7, #32]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f96b 	bl	8001948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e07c      	b.n	8001776 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d034      	beq.n	8001722 <HAL_I2C_Master_Receive+0x186>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d130      	bne.n	8001722 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	2200      	movs	r2, #0
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f880 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e04d      	b.n	8001776 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2bff      	cmp	r3, #255	; 0xff
 80016e2:	d90e      	bls.n	8001702 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	8979      	ldrh	r1, [r7, #10]
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fa8a 	bl	8001c14 <I2C_TransferConfig>
 8001700:	e00f      	b.n	8001722 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fa79 	bl	8001c14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d19d      	bne.n	8001668 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	6a39      	ldr	r1, [r7, #32]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f8cd 	bl	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e01a      	b.n	8001776 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2220      	movs	r2, #32
 8001746:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_I2C_Master_Receive+0x1e8>)
 8001754:	400b      	ands	r3, r1
 8001756:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001774:	2302      	movs	r3, #2
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	80002400 	.word	0x80002400
 8001784:	fe00e800 	.word	0xfe00e800

08001788 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d103      	bne.n	80017a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d007      	beq.n	80017c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	619a      	str	r2, [r3, #24]
  }
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e0:	e022      	b.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d01e      	beq.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ea:	f7ff fadf 	bl	8000dac <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d302      	bcc.n	8001800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d113      	bne.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2220      	movs	r2, #32
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e00f      	b.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4013      	ands	r3, r2
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	429a      	cmp	r2, r3
 8001844:	d0cd      	beq.n	80017e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800185c:	e02c      	b.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f8ea 	bl	8001a3c <I2C_IsErrorOccurred>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e02a      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d01e      	beq.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187a:	f7ff fa97 	bl	8000dac <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	429a      	cmp	r2, r3
 8001888:	d302      	bcc.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e007      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d1cb      	bne.n	800185e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018dc:	e028      	b.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f8aa 	bl	8001a3c <I2C_IsErrorOccurred>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e026      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f2:	f7ff fa5b 	bl	8000dac <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d302      	bcc.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d113      	bne.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e007      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d1cf      	bne.n	80018de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001954:	e064      	b.n	8001a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f86e 	bl	8001a3c <I2C_IsErrorOccurred>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e062      	b.n	8001a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b20      	cmp	r3, #32
 8001976:	d138      	bne.n	80019ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b04      	cmp	r3, #4
 8001984:	d105      	bne.n	8001992 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e04e      	b.n	8001a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b10      	cmp	r3, #16
 800199e:	d107      	bne.n	80019b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2210      	movs	r2, #16
 80019a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2204      	movs	r2, #4
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
 80019ae:	e002      	b.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2220      	movs	r2, #32
 80019bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80019ca:	400b      	ands	r3, r1
 80019cc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e022      	b.n	8001a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ea:	f7ff f9df 	bl	8000dac <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d302      	bcc.n	8001a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10f      	bne.n	8001a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f043 0220 	orr.w	r2, r3, #32
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e007      	b.n	8001a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d193      	bne.n	8001956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	fe00e800 	.word	0xfe00e800

08001a3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d075      	beq.n	8001b54 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a70:	e056      	b.n	8001b20 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d052      	beq.n	8001b20 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a7a:	f7ff f997 	bl	8000dac <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d302      	bcc.n	8001a90 <I2C_IsErrorOccurred+0x54>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d147      	bne.n	8001b20 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab2:	d12e      	bne.n	8001b12 <I2C_IsErrorOccurred+0xd6>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aba:	d02a      	beq.n	8001b12 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d027      	beq.n	8001b12 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ad0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ad2:	f7ff f96b 	bl	8000dac <HAL_GetTick>
 8001ad6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad8:	e01b      	b.n	8001b12 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ada:	f7ff f967 	bl	8000dac <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b19      	cmp	r3, #25
 8001ae6:	d914      	bls.n	8001b12 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d1dc      	bne.n	8001ada <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d003      	beq.n	8001b36 <I2C_IsErrorOccurred+0xfa>
 8001b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d09d      	beq.n	8001a72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2220      	movs	r2, #32
 8001b44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01c      	beq.n	8001c04 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff fddc 	bl	8001788 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <I2C_IsErrorOccurred+0x1d4>)
 8001bdc:	400b      	ands	r3, r1
 8001bde:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	fe00e800 	.word	0xfe00e800

08001c14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	817b      	strh	r3, [r7, #10]
 8001c22:	4613      	mov	r3, r2
 8001c24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c2c:	7a7b      	ldrb	r3, [r7, #9]
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	0d5b      	lsrs	r3, r3, #21
 8001c4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <I2C_TransferConfig+0x60>)
 8001c54:	430b      	orrs	r3, r1
 8001c56:	43db      	mvns	r3, r3
 8001c58:	ea02 0103 	and.w	r1, r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	03ff63ff 	.word	0x03ff63ff

08001c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d138      	bne.n	8001d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e032      	b.n	8001d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e000      	b.n	8001d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d00:	2302      	movs	r3, #2
  }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d139      	bne.n	8001d98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e033      	b.n	8001d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2224      	movs	r2, #36	; 0x24
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
  }
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd2:	d130      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de0:	d038      	beq.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2232      	movs	r2, #50	; 0x32
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e08:	e002      	b.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1c:	d102      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f2      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e30:	d110      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e00f      	b.n	8001e56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d007      	beq.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40007000 	.word	0x40007000
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	431bde83 	.word	0x431bde83

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f000 bc02 	b.w	8002688 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e84:	4b96      	ldr	r3, [pc, #600]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e8e:	4b94      	ldr	r3, [pc, #592]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80e4 	beq.w	800206e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4c>
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	f040 808b 	bne.w	8001fca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 8087 	bne.w	8001fca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ebc:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x64>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e3d9      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	4b81      	ldr	r3, [pc, #516]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_RCC_OscConfig+0x7e>
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eec:	e005      	b.n	8001efa <HAL_RCC_OscConfig+0x8a>
 8001eee:	4b7c      	ldr	r3, [pc, #496]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d223      	bcs.n	8001f46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fd8c 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e3ba      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a72      	ldr	r2, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	496d      	ldr	r1, [pc, #436]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f30:	4b6b      	ldr	r3, [pc, #428]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	4968      	ldr	r1, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e025      	b.n	8001f92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f46:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4960      	ldr	r1, [pc, #384]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f64:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	495b      	ldr	r1, [pc, #364]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fd4c 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e37a      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f92:	f000 fc81 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	4950      	ldr	r1, [pc, #320]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a4e      	ldr	r2, [pc, #312]	; (80020e8 <HAL_RCC_OscConfig+0x278>)
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fb2:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fea8 	bl	8000d0c <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d052      	beq.n	800206c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	e35e      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d032      	beq.n	8002038 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fde:	f7fe fee5 	bl	8000dac <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe6:	f7fe fee1 	bl	8000dac <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e347      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff8:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a35      	ldr	r2, [pc, #212]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4930      	ldr	r1, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	492b      	ldr	r1, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
 8002036:	e01a      	b.n	800206e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002044:	f7fe feb2 	bl	8000dac <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800204c:	f7fe feae 	bl	8000dac <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e314      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1dc>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d073      	beq.n	8002162 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x21c>
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d10e      	bne.n	80020a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d10b      	bne.n	80020a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d063      	beq.n	8002160 <HAL_RCC_OscConfig+0x2f0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d15f      	bne.n	8002160 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e2f1      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d106      	bne.n	80020bc <HAL_RCC_OscConfig+0x24c>
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e025      	b.n	8002108 <HAL_RCC_OscConfig+0x298>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c4:	d114      	bne.n	80020f0 <HAL_RCC_OscConfig+0x280>
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a02      	ldr	r2, [pc, #8]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e013      	b.n	8002108 <HAL_RCC_OscConfig+0x298>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	080043bc 	.word	0x080043bc
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004
 80020f0:	4ba0      	ldr	r3, [pc, #640]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a9f      	ldr	r2, [pc, #636]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b9d      	ldr	r3, [pc, #628]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a9c      	ldr	r2, [pc, #624]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fe4c 	bl	8000dac <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe fe48 	bl	8000dac <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e2ae      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212a:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x2a8>
 8002136:	e014      	b.n	8002162 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fe38 	bl	8000dac <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7fe fe34 	bl	8000dac <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e29a      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002152:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x2d0>
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d060      	beq.n	8002230 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d005      	beq.n	8002180 <HAL_RCC_OscConfig+0x310>
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d119      	bne.n	80021ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d116      	bne.n	80021ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002180:	4b7c      	ldr	r3, [pc, #496]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x328>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e277      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	061b      	lsls	r3, r3, #24
 80021a6:	4973      	ldr	r1, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ac:	e040      	b.n	8002230 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d023      	beq.n	80021fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b6:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6e      	ldr	r2, [pc, #440]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7fe fdf3 	bl	8000dac <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7fe fdef 	bl	8000dac <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e255      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021dc:	4b65      	ldr	r3, [pc, #404]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b62      	ldr	r3, [pc, #392]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	495f      	ldr	r1, [pc, #380]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
 80021fc:	e018      	b.n	8002230 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a5c      	ldr	r2, [pc, #368]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7fe fdcf 	bl	8000dac <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7fe fdcb 	bl	8000dac <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e231      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d03c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002244:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7fe fdaa 	bl	8000dac <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225c:	f7fe fda6 	bl	8000dac <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e20c      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ef      	beq.n	800225c <HAL_RCC_OscConfig+0x3ec>
 800227c:	e01b      	b.n	80022b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002284:	4a3b      	ldr	r2, [pc, #236]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228e:	f7fe fd8d 	bl	8000dac <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002296:	f7fe fd89 	bl	8000dac <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1ef      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1ef      	bne.n	8002296 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80a6 	beq.w	8002410 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	4a26      	ldr	r2, [pc, #152]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCC_OscConfig+0x508>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d118      	bne.n	800232e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_RCC_OscConfig+0x508>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_RCC_OscConfig+0x508>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002308:	f7fe fd50 	bl	8000dac <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002310:	f7fe fd4c 	bl	8000dac <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1b2      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_RCC_OscConfig+0x508>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d108      	bne.n	8002348 <HAL_RCC_OscConfig+0x4d8>
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002346:	e029      	b.n	800239c <HAL_RCC_OscConfig+0x52c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b05      	cmp	r3, #5
 800234e:	d115      	bne.n	800237c <HAL_RCC_OscConfig+0x50c>
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	4a03      	ldr	r2, [pc, #12]	; (8002374 <HAL_RCC_OscConfig+0x504>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x52c>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	4b9a      	ldr	r3, [pc, #616]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	4a99      	ldr	r2, [pc, #612]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800238c:	4b96      	ldr	r3, [pc, #600]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	4a95      	ldr	r2, [pc, #596]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d016      	beq.n	80023d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe fd02 	bl	8000dac <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe fcfe 	bl	8000dac <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e162      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ed      	beq.n	80023ac <HAL_RCC_OscConfig+0x53c>
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe fceb 	bl	8000dac <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fce7 	bl	8000dac <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e14b      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f0:	4b7d      	ldr	r3, [pc, #500]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ed      	bne.n	80023da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fe:	7ffb      	ldrb	r3, [r7, #31]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 800240a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03c      	beq.n	8002496 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002424:	4b70      	ldr	r3, [pc, #448]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800242a:	4a6f      	ldr	r2, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fcba 	bl	8000dac <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243c:	f7fe fcb6 	bl	8000dac <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e11c      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800244e:	4b66      	ldr	r3, [pc, #408]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ef      	beq.n	800243c <HAL_RCC_OscConfig+0x5cc>
 800245c:	e01b      	b.n	8002496 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800245e:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002464:	4a60      	ldr	r2, [pc, #384]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe fc9d 	bl	8000dac <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002476:	f7fe fc99 	bl	8000dac <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0ff      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002488:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 800248a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ef      	bne.n	8002476 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80f3 	beq.w	8002686 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	f040 80c9 	bne.w	800263c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024aa:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0203 	and.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d12c      	bne.n	8002518 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	3b01      	subs	r3, #1
 80024ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d123      	bne.n	8002518 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d11b      	bne.n	8002518 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d113      	bne.n	8002518 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d109      	bne.n	8002518 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	3b01      	subs	r3, #1
 8002512:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d06b      	beq.n	80025f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d062      	beq.n	80025e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0ac      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800252e:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002538:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800253a:	f7fe fc37 	bl	8000dac <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fc33 	bl	8000dac <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e099      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCC_OscConfig+0x77c>)
 8002566:	4013      	ands	r3, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002570:	3a01      	subs	r2, #1
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	4311      	orrs	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800257a:	0212      	lsls	r2, r2, #8
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0552      	lsls	r2, r2, #21
 8002588:	4311      	orrs	r1, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800258e:	0852      	lsrs	r2, r2, #1
 8002590:	3a01      	subs	r2, #1
 8002592:	0652      	lsls	r2, r2, #25
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800259a:	06d2      	lsls	r2, r2, #27
 800259c:	430a      	orrs	r2, r1
 800259e:	4912      	ldr	r1, [pc, #72]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025bc:	f7fe fbf6 	bl	8000dac <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fbf2 	bl	8000dac <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e058      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_RCC_OscConfig+0x778>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e2:	e050      	b.n	8002686 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e04f      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d144      	bne.n	8002686 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002612:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002614:	f7fe fbca 	bl	8000dac <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fbc6 	bl	8000dac <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e02c      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x7ac>
 800263a:	e024      	b.n	8002686 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d01f      	beq.n	8002682 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 8002648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fbad 	bl	8000dac <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fba9 	bl	8000dac <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e00f      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4905      	ldr	r1, [pc, #20]	; (8002690 <HAL_RCC_OscConfig+0x820>)
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_OscConfig+0x824>)
 800267c:	4013      	ands	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
 8002680:	e001      	b.n	8002686 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	feeefffc 	.word	0xfeeefffc

08002698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0e7      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ac:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d910      	bls.n	80026dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	4970      	ldr	r1, [pc, #448]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cf      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d010      	beq.n	800270a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d908      	bls.n	800270a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4960      	ldr	r1, [pc, #384]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d04c      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d121      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0a6      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002736:	4b54      	ldr	r3, [pc, #336]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e09a      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e08e      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e086      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4943      	ldr	r1, [pc, #268]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7fe fb14 	bl	8000dac <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fb10 	bl	8000dac <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e06e      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d208      	bcs.n	80027de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	492b      	ldr	r1, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d210      	bcs.n	800280e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	4923      	ldr	r1, [pc, #140]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_RCC_ClockConfig+0x1ec>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e036      	b.n	800287c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4918      	ldr	r1, [pc, #96]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d009      	beq.n	800284c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4910      	ldr	r1, [pc, #64]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800284c:	f000 f824 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1f4>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1fc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fa4b 	bl	8000d0c <HAL_InitTick>
 8002876:	4603      	mov	r3, r0
 8002878:	72fb      	strb	r3, [r7, #11]

  return status;
 800287a:	7afb      	ldrb	r3, [r7, #11]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	080043bc 	.word	0x080043bc
 8002890:	20000000 	.word	0x20000000
 8002894:	20000004 	.word	0x20000004

08002898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x34>
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d121      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d11e      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028d8:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f4:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d102      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e004      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d101      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <HAL_RCC_GetSysClockFreq+0x114>)
 800291e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d134      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0xa6>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d003      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xac>
 800293c:	e005      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002940:	617b      	str	r3, [r7, #20]
      break;
 8002942:	e005      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002946:	617b      	str	r3, [r7, #20]
      break;
 8002948:	e002      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	617b      	str	r3, [r7, #20]
      break;
 800294e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	3301      	adds	r3, #1
 800295c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	0e5b      	lsrs	r3, r3, #25
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	3301      	adds	r3, #1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002990:	69bb      	ldr	r3, [r7, #24]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	080043d4 	.word	0x080043d4
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	080043cc 	.word	0x080043cc

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029f8:	f7ff ffda 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0adb      	lsrs	r3, r3, #11
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4904      	ldr	r1, [pc, #16]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	080043cc 	.word	0x080043cc

08002a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a38:	f7ff f9b6 	bl	8001da8 <HAL_PWREx_GetVoltageRange>
 8002a3c:	6178      	str	r0, [r7, #20]
 8002a3e:	e014      	b.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a58:	f7ff f9a6 	bl	8001da8 <HAL_PWREx_GetVoltageRange>
 8002a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a70:	d10b      	bne.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d919      	bls.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a7c:	d902      	bls.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a7e:	2302      	movs	r3, #2
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	e013      	b.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a84:	2301      	movs	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	e010      	b.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d902      	bls.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a90:	2303      	movs	r3, #3
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e00a      	b.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d102      	bne.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e004      	b.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b70      	cmp	r3, #112	; 0x70
 8002aa6:	d101      	bne.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 0207 	bic.w	r2, r3, #7
 8002ab4:	4909      	ldr	r1, [pc, #36]	; (8002adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d001      	beq.n	8002ace <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40022000 	.word	0x40022000

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae8:	2300      	movs	r3, #0
 8002aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aec:	2300      	movs	r3, #0
 8002aee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d031      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b04:	d01a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b0a:	d814      	bhi.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b14:	d10f      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b16:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b22:	e00c      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f9ce 	bl	8002ecc <RCCEx_PLLSAI1_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	74fb      	strb	r3, [r7, #19]
      break;
 8002b3a:	e000      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b44:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	494e      	ldr	r1, [pc, #312]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b5a:	e001      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 809e 	beq.w	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b72:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a39      	ldr	r2, [pc, #228]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe f8fc 	bl	8000dac <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bb6:	e009      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7fe f8f8 	bl	8000dac <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d902      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	74fb      	strb	r3, [r7, #19]
        break;
 8002bca:	e005      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ef      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d15a      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01e      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d019      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c26:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d016      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f8b8 	bl	8000dac <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe f8b4 	bl	8000dac <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d902      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	74fb      	strb	r3, [r7, #19]
            break;
 8002c56:	e006      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ec      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6c:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7a:	4904      	ldr	r1, [pc, #16]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	74bb      	strb	r3, [r7, #18]
 8002c88:	e006      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c98:	7c7b      	ldrb	r3, [r7, #17]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4b8a      	ldr	r3, [pc, #552]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	4a89      	ldr	r2, [pc, #548]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb6:	4b84      	ldr	r3, [pc, #528]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f023 0203 	bic.w	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4980      	ldr	r1, [pc, #512]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 020c 	bic.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	4978      	ldr	r1, [pc, #480]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	496f      	ldr	r1, [pc, #444]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	4967      	ldr	r1, [pc, #412]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d3e:	4b62      	ldr	r3, [pc, #392]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	495e      	ldr	r1, [pc, #376]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	4956      	ldr	r1, [pc, #344]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	494d      	ldr	r1, [pc, #308]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d028      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da4:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4945      	ldr	r1, [pc, #276]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc4:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a3f      	ldr	r2, [pc, #252]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dce:	60d3      	str	r3, [r2, #12]
 8002dd0:	e011      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f872 	bl	8002ecc <RCCEx_PLLSAI1_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d028      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2c:	60d3      	str	r3, [r2, #12]
 8002e2e:	e011      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f843 	bl	8002ecc <RCCEx_PLLSAI1_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01c      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	2102      	movs	r1, #2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f820 	bl	8002ecc <RCCEx_PLLSAI1_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb4:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ebc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000

08002ecc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eda:	4b74      	ldr	r3, [pc, #464]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ee6:	4b71      	ldr	r3, [pc, #452]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0203 	and.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d10d      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002efe:	4b6b      	ldr	r3, [pc, #428]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d047      	beq.n	8002fa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e044      	b.n	8002fa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d018      	beq.n	8002f52 <RCCEx_PLLSAI1_Config+0x86>
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d825      	bhi.n	8002f70 <RCCEx_PLLSAI1_Config+0xa4>
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d002      	beq.n	8002f2e <RCCEx_PLLSAI1_Config+0x62>
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d009      	beq.n	8002f40 <RCCEx_PLLSAI1_Config+0x74>
 8002f2c:	e020      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11d      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3e:	e01a      	b.n	8002f76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f40:	4b5a      	ldr	r3, [pc, #360]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f50:	e013      	b.n	8002f7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f52:	4b56      	ldr	r3, [pc, #344]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f5e:	4b53      	ldr	r3, [pc, #332]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f6e:	e006      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e004      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f86:	4b49      	ldr	r3, [pc, #292]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	4943      	ldr	r1, [pc, #268]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d17c      	bne.n	80030a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fa8:	4b40      	ldr	r3, [pc, #256]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb4:	f7fd fefa 	bl	8000dac <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fba:	e009      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fbc:	f7fd fef6 	bl	8000dac <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fce:	e005      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ef      	bne.n	8002fbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d15f      	bne.n	80030a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d110      	bne.n	800300a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	0211      	lsls	r1, r2, #8
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68d2      	ldr	r2, [r2, #12]
 8002ffe:	06d2      	lsls	r2, r2, #27
 8003000:	430a      	orrs	r2, r1
 8003002:	492a      	ldr	r1, [pc, #168]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	610b      	str	r3, [r1, #16]
 8003008:	e027      	b.n	800305a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d112      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003018:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6912      	ldr	r2, [r2, #16]
 8003026:	0852      	lsrs	r2, r2, #1
 8003028:	3a01      	subs	r2, #1
 800302a:	0552      	lsls	r2, r2, #21
 800302c:	430a      	orrs	r2, r1
 800302e:	491f      	ldr	r1, [pc, #124]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003030:	4313      	orrs	r3, r2
 8003032:	610b      	str	r3, [r1, #16]
 8003034:	e011      	b.n	800305a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800303e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6892      	ldr	r2, [r2, #8]
 8003046:	0211      	lsls	r1, r2, #8
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6952      	ldr	r2, [r2, #20]
 800304c:	0852      	lsrs	r2, r2, #1
 800304e:	3a01      	subs	r2, #1
 8003050:	0652      	lsls	r2, r2, #25
 8003052:	430a      	orrs	r2, r1
 8003054:	4915      	ldr	r1, [pc, #84]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003064:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fd fea1 	bl	8000dac <HAL_GetTick>
 800306a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800306c:	e009      	b.n	8003082 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800306e:	f7fd fe9d 	bl	8000dac <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d902      	bls.n	8003082 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	73fb      	strb	r3, [r7, #15]
          break;
 8003080:	e005      	b.n	800308e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ef      	beq.n	800306e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e040      	b.n	8003144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fcfc 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8c0 	bl	8003274 <UART_SetConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fae0 	bl	80036cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fb67 	bl	8003810 <UART_CheckIdleState>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003160:	2b20      	cmp	r3, #32
 8003162:	f040 8082 	bne.w	800326a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_UART_Transmit+0x26>
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07a      	b.n	800326c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_UART_Transmit+0x38>
 8003180:	2302      	movs	r3, #2
 8003182:	e073      	b.n	800326c <HAL_UART_Transmit+0x120>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2221      	movs	r2, #33	; 0x21
 8003198:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800319a:	f7fd fe07 	bl	8000dac <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	88fa      	ldrh	r2, [r7, #6]
 80031a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d108      	bne.n	80031cc <HAL_UART_Transmit+0x80>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e003      	b.n	80031d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80031dc:	e02d      	b.n	800323a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fb5a 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e039      	b.n	800326c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10b      	bne.n	8003216 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800320a:	b292      	uxth	r2, r2
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3302      	adds	r3, #2
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	e008      	b.n	8003228 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b292      	uxth	r2, r2
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1cb      	bne.n	80031de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	2140      	movs	r1, #64	; 0x40
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fb26 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e005      	b.n	800326c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b08a      	sub	sp, #40	; 0x28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	431a      	orrs	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4313      	orrs	r3, r2
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4bb4      	ldr	r3, [pc, #720]	; (8003574 <UART_SetConfig+0x300>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4aa9      	ldr	r2, [pc, #676]	; (8003578 <UART_SetConfig+0x304>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	4313      	orrs	r3, r2
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4aa0      	ldr	r2, [pc, #640]	; (800357c <UART_SetConfig+0x308>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d126      	bne.n	800334c <UART_SetConfig+0xd8>
 80032fe:	4ba0      	ldr	r3, [pc, #640]	; (8003580 <UART_SetConfig+0x30c>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b03      	cmp	r3, #3
 800330a:	d81b      	bhi.n	8003344 <UART_SetConfig+0xd0>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <UART_SetConfig+0xa0>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003325 	.word	0x08003325
 8003318:	08003335 	.word	0x08003335
 800331c:	0800332d 	.word	0x0800332d
 8003320:	0800333d 	.word	0x0800333d
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e080      	b.n	800342e <UART_SetConfig+0x1ba>
 800332c:	2302      	movs	r3, #2
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003332:	e07c      	b.n	800342e <UART_SetConfig+0x1ba>
 8003334:	2304      	movs	r3, #4
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333a:	e078      	b.n	800342e <UART_SetConfig+0x1ba>
 800333c:	2308      	movs	r3, #8
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003342:	e074      	b.n	800342e <UART_SetConfig+0x1ba>
 8003344:	2310      	movs	r3, #16
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334a:	e070      	b.n	800342e <UART_SetConfig+0x1ba>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a8c      	ldr	r2, [pc, #560]	; (8003584 <UART_SetConfig+0x310>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d138      	bne.n	80033c8 <UART_SetConfig+0x154>
 8003356:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <UART_SetConfig+0x30c>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d82d      	bhi.n	80033c0 <UART_SetConfig+0x14c>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <UART_SetConfig+0xf8>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080033c1 	.word	0x080033c1
 8003374:	080033c1 	.word	0x080033c1
 8003378:	080033c1 	.word	0x080033c1
 800337c:	080033b1 	.word	0x080033b1
 8003380:	080033c1 	.word	0x080033c1
 8003384:	080033c1 	.word	0x080033c1
 8003388:	080033c1 	.word	0x080033c1
 800338c:	080033a9 	.word	0x080033a9
 8003390:	080033c1 	.word	0x080033c1
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033b9 	.word	0x080033b9
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a6:	e042      	b.n	800342e <UART_SetConfig+0x1ba>
 80033a8:	2302      	movs	r3, #2
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ae:	e03e      	b.n	800342e <UART_SetConfig+0x1ba>
 80033b0:	2304      	movs	r3, #4
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b6:	e03a      	b.n	800342e <UART_SetConfig+0x1ba>
 80033b8:	2308      	movs	r3, #8
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033be:	e036      	b.n	800342e <UART_SetConfig+0x1ba>
 80033c0:	2310      	movs	r3, #16
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c6:	e032      	b.n	800342e <UART_SetConfig+0x1ba>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6a      	ldr	r2, [pc, #424]	; (8003578 <UART_SetConfig+0x304>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d12a      	bne.n	8003428 <UART_SetConfig+0x1b4>
 80033d2:	4b6b      	ldr	r3, [pc, #428]	; (8003580 <UART_SetConfig+0x30c>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033e0:	d01a      	beq.n	8003418 <UART_SetConfig+0x1a4>
 80033e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033e6:	d81b      	bhi.n	8003420 <UART_SetConfig+0x1ac>
 80033e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ec:	d00c      	beq.n	8003408 <UART_SetConfig+0x194>
 80033ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f2:	d815      	bhi.n	8003420 <UART_SetConfig+0x1ac>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <UART_SetConfig+0x18c>
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d008      	beq.n	8003410 <UART_SetConfig+0x19c>
 80033fe:	e00f      	b.n	8003420 <UART_SetConfig+0x1ac>
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e012      	b.n	800342e <UART_SetConfig+0x1ba>
 8003408:	2302      	movs	r3, #2
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340e:	e00e      	b.n	800342e <UART_SetConfig+0x1ba>
 8003410:	2304      	movs	r3, #4
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e00a      	b.n	800342e <UART_SetConfig+0x1ba>
 8003418:	2308      	movs	r3, #8
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341e:	e006      	b.n	800342e <UART_SetConfig+0x1ba>
 8003420:	2310      	movs	r3, #16
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003426:	e002      	b.n	800342e <UART_SetConfig+0x1ba>
 8003428:	2310      	movs	r3, #16
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a51      	ldr	r2, [pc, #324]	; (8003578 <UART_SetConfig+0x304>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d17a      	bne.n	800352e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800343c:	2b08      	cmp	r3, #8
 800343e:	d824      	bhi.n	800348a <UART_SetConfig+0x216>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <UART_SetConfig+0x1d4>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	0800346d 	.word	0x0800346d
 800344c:	0800348b 	.word	0x0800348b
 8003450:	08003475 	.word	0x08003475
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800347b 	.word	0x0800347b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	0800348b 	.word	0x0800348b
 8003464:	0800348b 	.word	0x0800348b
 8003468:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800346c:	f7ff faac 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003470:	61f8      	str	r0, [r7, #28]
        break;
 8003472:	e010      	b.n	8003496 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b44      	ldr	r3, [pc, #272]	; (8003588 <UART_SetConfig+0x314>)
 8003476:	61fb      	str	r3, [r7, #28]
        break;
 8003478:	e00d      	b.n	8003496 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7ff fa0d 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 800347e:	61f8      	str	r0, [r7, #28]
        break;
 8003480:	e009      	b.n	8003496 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003486:	61fb      	str	r3, [r7, #28]
        break;
 8003488:	e005      	b.n	8003496 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003494:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8107 	beq.w	80036ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d305      	bcc.n	80034ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d903      	bls.n	80034c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034c0:	e0f4      	b.n	80036ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2200      	movs	r2, #0
 80034c6:	461c      	mov	r4, r3
 80034c8:	4615      	mov	r5, r2
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	022b      	lsls	r3, r5, #8
 80034d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034d8:	0222      	lsls	r2, r4, #8
 80034da:	68f9      	ldr	r1, [r7, #12]
 80034dc:	6849      	ldr	r1, [r1, #4]
 80034de:	0849      	lsrs	r1, r1, #1
 80034e0:	2000      	movs	r0, #0
 80034e2:	4688      	mov	r8, r1
 80034e4:	4681      	mov	r9, r0
 80034e6:	eb12 0a08 	adds.w	sl, r2, r8
 80034ea:	eb43 0b09 	adc.w	fp, r3, r9
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034fc:	4650      	mov	r0, sl
 80034fe:	4659      	mov	r1, fp
 8003500:	f7fc febe 	bl	8000280 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003512:	d308      	bcc.n	8003526 <UART_SetConfig+0x2b2>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351a:	d204      	bcs.n	8003526 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	e0c2      	b.n	80036ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800352c:	e0be      	b.n	80036ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003536:	d16a      	bne.n	800360e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800353c:	2b08      	cmp	r3, #8
 800353e:	d834      	bhi.n	80035aa <UART_SetConfig+0x336>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <UART_SetConfig+0x2d4>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	0800356d 	.word	0x0800356d
 800354c:	0800358d 	.word	0x0800358d
 8003550:	08003595 	.word	0x08003595
 8003554:	080035ab 	.word	0x080035ab
 8003558:	0800359b 	.word	0x0800359b
 800355c:	080035ab 	.word	0x080035ab
 8003560:	080035ab 	.word	0x080035ab
 8003564:	080035ab 	.word	0x080035ab
 8003568:	080035a3 	.word	0x080035a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800356c:	f7ff fa2c 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003570:	61f8      	str	r0, [r7, #28]
        break;
 8003572:	e020      	b.n	80035b6 <UART_SetConfig+0x342>
 8003574:	efff69f3 	.word	0xefff69f3
 8003578:	40008000 	.word	0x40008000
 800357c:	40013800 	.word	0x40013800
 8003580:	40021000 	.word	0x40021000
 8003584:	40004400 	.word	0x40004400
 8003588:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800358c:	f7ff fa32 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8003590:	61f8      	str	r0, [r7, #28]
        break;
 8003592:	e010      	b.n	80035b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003594:	4b4c      	ldr	r3, [pc, #304]	; (80036c8 <UART_SetConfig+0x454>)
 8003596:	61fb      	str	r3, [r7, #28]
        break;
 8003598:	e00d      	b.n	80035b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359a:	f7ff f97d 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 800359e:	61f8      	str	r0, [r7, #28]
        break;
 80035a0:	e009      	b.n	80035b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a6:	61fb      	str	r3, [r7, #28]
        break;
 80035a8:	e005      	b.n	80035b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d077      	beq.n	80036ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005a      	lsls	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d916      	bls.n	8003606 <UART_SetConfig+0x392>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d212      	bcs.n	8003606 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f023 030f 	bic.w	r3, r3, #15
 80035e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	8afb      	ldrh	r3, [r7, #22]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	8afa      	ldrh	r2, [r7, #22]
 8003602:	60da      	str	r2, [r3, #12]
 8003604:	e052      	b.n	80036ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800360c:	e04e      	b.n	80036ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800360e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003612:	2b08      	cmp	r3, #8
 8003614:	d827      	bhi.n	8003666 <UART_SetConfig+0x3f2>
 8003616:	a201      	add	r2, pc, #4	; (adr r2, 800361c <UART_SetConfig+0x3a8>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003641 	.word	0x08003641
 8003620:	08003649 	.word	0x08003649
 8003624:	08003651 	.word	0x08003651
 8003628:	08003667 	.word	0x08003667
 800362c:	08003657 	.word	0x08003657
 8003630:	08003667 	.word	0x08003667
 8003634:	08003667 	.word	0x08003667
 8003638:	08003667 	.word	0x08003667
 800363c:	0800365f 	.word	0x0800365f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003640:	f7ff f9c2 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003644:	61f8      	str	r0, [r7, #28]
        break;
 8003646:	e014      	b.n	8003672 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7ff f9d4 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 800364c:	61f8      	str	r0, [r7, #28]
        break;
 800364e:	e010      	b.n	8003672 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <UART_SetConfig+0x454>)
 8003652:	61fb      	str	r3, [r7, #28]
        break;
 8003654:	e00d      	b.n	8003672 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003656:	f7ff f91f 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 800365a:	61f8      	str	r0, [r7, #28]
        break;
 800365c:	e009      	b.n	8003672 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003662:	61fb      	str	r3, [r7, #28]
        break;
 8003664:	e005      	b.n	8003672 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003670:	bf00      	nop
    }

    if (pclk != 0U)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d019      	beq.n	80036ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	085a      	lsrs	r2, r3, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	441a      	add	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b0f      	cmp	r3, #15
 8003690:	d909      	bls.n	80036a6 <UART_SetConfig+0x432>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d205      	bcs.n	80036a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e002      	b.n	80036ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c6:	bf00      	nop
 80036c8:	00f42400 	.word	0x00f42400

080036cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ca:	d10a      	bne.n	80037e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003820:	f7fd fac4 	bl	8000dac <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d10e      	bne.n	8003852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f82d 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e023      	b.n	800389a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d10e      	bne.n	800387e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f817 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00d      	b.n	800389a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b09c      	sub	sp, #112	; 0x70
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	e0a5      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	f000 80a1 	beq.w	8003a00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fd fa75 	bl	8000dac <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80038ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d13e      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e8:	667b      	str	r3, [r7, #100]	; 0x64
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3308      	adds	r3, #8
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	663b      	str	r3, [r7, #96]	; 0x60
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003926:	64ba      	str	r2, [r7, #72]	; 0x48
 8003928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800392c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e067      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d04f      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396e:	d147      	bne.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003978:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800398e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
 800399a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800399e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e6      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3308      	adds	r3, #8
 80039b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	613b      	str	r3, [r7, #16]
   return(result);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3308      	adds	r3, #8
 80039ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039cc:	623a      	str	r2, [r7, #32]
 80039ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	69f9      	ldr	r1, [r7, #28]
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e5      	bne.n	80039ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e010      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	f43f af4a 	beq.w	80038b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3770      	adds	r7, #112	; 0x70
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <__errno>:
 8003a2c:	4b01      	ldr	r3, [pc, #4]	; (8003a34 <__errno+0x8>)
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	2000000c 	.word	0x2000000c

08003a38 <__libc_init_array>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	4d0d      	ldr	r5, [pc, #52]	; (8003a70 <__libc_init_array+0x38>)
 8003a3c:	4c0d      	ldr	r4, [pc, #52]	; (8003a74 <__libc_init_array+0x3c>)
 8003a3e:	1b64      	subs	r4, r4, r5
 8003a40:	10a4      	asrs	r4, r4, #2
 8003a42:	2600      	movs	r6, #0
 8003a44:	42a6      	cmp	r6, r4
 8003a46:	d109      	bne.n	8003a5c <__libc_init_array+0x24>
 8003a48:	4d0b      	ldr	r5, [pc, #44]	; (8003a78 <__libc_init_array+0x40>)
 8003a4a:	4c0c      	ldr	r4, [pc, #48]	; (8003a7c <__libc_init_array+0x44>)
 8003a4c:	f000 fc8e 	bl	800436c <_init>
 8003a50:	1b64      	subs	r4, r4, r5
 8003a52:	10a4      	asrs	r4, r4, #2
 8003a54:	2600      	movs	r6, #0
 8003a56:	42a6      	cmp	r6, r4
 8003a58:	d105      	bne.n	8003a66 <__libc_init_array+0x2e>
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
 8003a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a60:	4798      	blx	r3
 8003a62:	3601      	adds	r6, #1
 8003a64:	e7ee      	b.n	8003a44 <__libc_init_array+0xc>
 8003a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a6a:	4798      	blx	r3
 8003a6c:	3601      	adds	r6, #1
 8003a6e:	e7f2      	b.n	8003a56 <__libc_init_array+0x1e>
 8003a70:	08004440 	.word	0x08004440
 8003a74:	08004440 	.word	0x08004440
 8003a78:	08004440 	.word	0x08004440
 8003a7c:	08004444 	.word	0x08004444

08003a80 <memset>:
 8003a80:	4402      	add	r2, r0
 8003a82:	4603      	mov	r3, r0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d100      	bne.n	8003a8a <memset+0xa>
 8003a88:	4770      	bx	lr
 8003a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8e:	e7f9      	b.n	8003a84 <memset+0x4>

08003a90 <siprintf>:
 8003a90:	b40e      	push	{r1, r2, r3}
 8003a92:	b500      	push	{lr}
 8003a94:	b09c      	sub	sp, #112	; 0x70
 8003a96:	ab1d      	add	r3, sp, #116	; 0x74
 8003a98:	9002      	str	r0, [sp, #8]
 8003a9a:	9006      	str	r0, [sp, #24]
 8003a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aa0:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <siprintf+0x38>)
 8003aa2:	9107      	str	r1, [sp, #28]
 8003aa4:	9104      	str	r1, [sp, #16]
 8003aa6:	4909      	ldr	r1, [pc, #36]	; (8003acc <siprintf+0x3c>)
 8003aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aac:	9105      	str	r1, [sp, #20]
 8003aae:	6800      	ldr	r0, [r0, #0]
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	a902      	add	r1, sp, #8
 8003ab4:	f000 f868 	bl	8003b88 <_svfiprintf_r>
 8003ab8:	9b02      	ldr	r3, [sp, #8]
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	b01c      	add	sp, #112	; 0x70
 8003ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ac4:	b003      	add	sp, #12
 8003ac6:	4770      	bx	lr
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	ffff0208 	.word	0xffff0208

08003ad0 <__ssputs_r>:
 8003ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad4:	688e      	ldr	r6, [r1, #8]
 8003ad6:	429e      	cmp	r6, r3
 8003ad8:	4682      	mov	sl, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	4690      	mov	r8, r2
 8003ade:	461f      	mov	r7, r3
 8003ae0:	d838      	bhi.n	8003b54 <__ssputs_r+0x84>
 8003ae2:	898a      	ldrh	r2, [r1, #12]
 8003ae4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ae8:	d032      	beq.n	8003b50 <__ssputs_r+0x80>
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	6909      	ldr	r1, [r1, #16]
 8003aee:	eba5 0901 	sub.w	r9, r5, r1
 8003af2:	6965      	ldr	r5, [r4, #20]
 8003af4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003af8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003afc:	3301      	adds	r3, #1
 8003afe:	444b      	add	r3, r9
 8003b00:	106d      	asrs	r5, r5, #1
 8003b02:	429d      	cmp	r5, r3
 8003b04:	bf38      	it	cc
 8003b06:	461d      	movcc	r5, r3
 8003b08:	0553      	lsls	r3, r2, #21
 8003b0a:	d531      	bpl.n	8003b70 <__ssputs_r+0xa0>
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f000 fb63 	bl	80041d8 <_malloc_r>
 8003b12:	4606      	mov	r6, r0
 8003b14:	b950      	cbnz	r0, 8003b2c <__ssputs_r+0x5c>
 8003b16:	230c      	movs	r3, #12
 8003b18:	f8ca 3000 	str.w	r3, [sl]
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b22:	81a3      	strh	r3, [r4, #12]
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b2c:	6921      	ldr	r1, [r4, #16]
 8003b2e:	464a      	mov	r2, r9
 8003b30:	f000 fabe 	bl	80040b0 <memcpy>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	6126      	str	r6, [r4, #16]
 8003b42:	6165      	str	r5, [r4, #20]
 8003b44:	444e      	add	r6, r9
 8003b46:	eba5 0509 	sub.w	r5, r5, r9
 8003b4a:	6026      	str	r6, [r4, #0]
 8003b4c:	60a5      	str	r5, [r4, #8]
 8003b4e:	463e      	mov	r6, r7
 8003b50:	42be      	cmp	r6, r7
 8003b52:	d900      	bls.n	8003b56 <__ssputs_r+0x86>
 8003b54:	463e      	mov	r6, r7
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	4632      	mov	r2, r6
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	f000 fab6 	bl	80040cc <memmove>
 8003b60:	68a3      	ldr	r3, [r4, #8]
 8003b62:	1b9b      	subs	r3, r3, r6
 8003b64:	60a3      	str	r3, [r4, #8]
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	4433      	add	r3, r6
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	e7db      	b.n	8003b28 <__ssputs_r+0x58>
 8003b70:	462a      	mov	r2, r5
 8003b72:	f000 fba5 	bl	80042c0 <_realloc_r>
 8003b76:	4606      	mov	r6, r0
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d1e1      	bne.n	8003b40 <__ssputs_r+0x70>
 8003b7c:	6921      	ldr	r1, [r4, #16]
 8003b7e:	4650      	mov	r0, sl
 8003b80:	f000 fabe 	bl	8004100 <_free_r>
 8003b84:	e7c7      	b.n	8003b16 <__ssputs_r+0x46>
	...

08003b88 <_svfiprintf_r>:
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	4698      	mov	r8, r3
 8003b8e:	898b      	ldrh	r3, [r1, #12]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	b09d      	sub	sp, #116	; 0x74
 8003b94:	4607      	mov	r7, r0
 8003b96:	460d      	mov	r5, r1
 8003b98:	4614      	mov	r4, r2
 8003b9a:	d50e      	bpl.n	8003bba <_svfiprintf_r+0x32>
 8003b9c:	690b      	ldr	r3, [r1, #16]
 8003b9e:	b963      	cbnz	r3, 8003bba <_svfiprintf_r+0x32>
 8003ba0:	2140      	movs	r1, #64	; 0x40
 8003ba2:	f000 fb19 	bl	80041d8 <_malloc_r>
 8003ba6:	6028      	str	r0, [r5, #0]
 8003ba8:	6128      	str	r0, [r5, #16]
 8003baa:	b920      	cbnz	r0, 8003bb6 <_svfiprintf_r+0x2e>
 8003bac:	230c      	movs	r3, #12
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	e0d1      	b.n	8003d5a <_svfiprintf_r+0x1d2>
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	616b      	str	r3, [r5, #20]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bc8:	2330      	movs	r3, #48	; 0x30
 8003bca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d74 <_svfiprintf_r+0x1ec>
 8003bce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bd2:	f04f 0901 	mov.w	r9, #1
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	469a      	mov	sl, r3
 8003bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bde:	b10a      	cbz	r2, 8003be4 <_svfiprintf_r+0x5c>
 8003be0:	2a25      	cmp	r2, #37	; 0x25
 8003be2:	d1f9      	bne.n	8003bd8 <_svfiprintf_r+0x50>
 8003be4:	ebba 0b04 	subs.w	fp, sl, r4
 8003be8:	d00b      	beq.n	8003c02 <_svfiprintf_r+0x7a>
 8003bea:	465b      	mov	r3, fp
 8003bec:	4622      	mov	r2, r4
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	f7ff ff6d 	bl	8003ad0 <__ssputs_r>
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f000 80aa 	beq.w	8003d50 <_svfiprintf_r+0x1c8>
 8003bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bfe:	445a      	add	r2, fp
 8003c00:	9209      	str	r2, [sp, #36]	; 0x24
 8003c02:	f89a 3000 	ldrb.w	r3, [sl]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80a2 	beq.w	8003d50 <_svfiprintf_r+0x1c8>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c16:	f10a 0a01 	add.w	sl, sl, #1
 8003c1a:	9304      	str	r3, [sp, #16]
 8003c1c:	9307      	str	r3, [sp, #28]
 8003c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c22:	931a      	str	r3, [sp, #104]	; 0x68
 8003c24:	4654      	mov	r4, sl
 8003c26:	2205      	movs	r2, #5
 8003c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2c:	4851      	ldr	r0, [pc, #324]	; (8003d74 <_svfiprintf_r+0x1ec>)
 8003c2e:	f7fc fad7 	bl	80001e0 <memchr>
 8003c32:	9a04      	ldr	r2, [sp, #16]
 8003c34:	b9d8      	cbnz	r0, 8003c6e <_svfiprintf_r+0xe6>
 8003c36:	06d0      	lsls	r0, r2, #27
 8003c38:	bf44      	itt	mi
 8003c3a:	2320      	movmi	r3, #32
 8003c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c40:	0711      	lsls	r1, r2, #28
 8003c42:	bf44      	itt	mi
 8003c44:	232b      	movmi	r3, #43	; 0x2b
 8003c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c50:	d015      	beq.n	8003c7e <_svfiprintf_r+0xf6>
 8003c52:	9a07      	ldr	r2, [sp, #28]
 8003c54:	4654      	mov	r4, sl
 8003c56:	2000      	movs	r0, #0
 8003c58:	f04f 0c0a 	mov.w	ip, #10
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c62:	3b30      	subs	r3, #48	; 0x30
 8003c64:	2b09      	cmp	r3, #9
 8003c66:	d94e      	bls.n	8003d06 <_svfiprintf_r+0x17e>
 8003c68:	b1b0      	cbz	r0, 8003c98 <_svfiprintf_r+0x110>
 8003c6a:	9207      	str	r2, [sp, #28]
 8003c6c:	e014      	b.n	8003c98 <_svfiprintf_r+0x110>
 8003c6e:	eba0 0308 	sub.w	r3, r0, r8
 8003c72:	fa09 f303 	lsl.w	r3, r9, r3
 8003c76:	4313      	orrs	r3, r2
 8003c78:	9304      	str	r3, [sp, #16]
 8003c7a:	46a2      	mov	sl, r4
 8003c7c:	e7d2      	b.n	8003c24 <_svfiprintf_r+0x9c>
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	1d19      	adds	r1, r3, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	9103      	str	r1, [sp, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bfbb      	ittet	lt
 8003c8a:	425b      	neglt	r3, r3
 8003c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c90:	9307      	strge	r3, [sp, #28]
 8003c92:	9307      	strlt	r3, [sp, #28]
 8003c94:	bfb8      	it	lt
 8003c96:	9204      	strlt	r2, [sp, #16]
 8003c98:	7823      	ldrb	r3, [r4, #0]
 8003c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c9c:	d10c      	bne.n	8003cb8 <_svfiprintf_r+0x130>
 8003c9e:	7863      	ldrb	r3, [r4, #1]
 8003ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca2:	d135      	bne.n	8003d10 <_svfiprintf_r+0x188>
 8003ca4:	9b03      	ldr	r3, [sp, #12]
 8003ca6:	1d1a      	adds	r2, r3, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	9203      	str	r2, [sp, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bfb8      	it	lt
 8003cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cb4:	3402      	adds	r4, #2
 8003cb6:	9305      	str	r3, [sp, #20]
 8003cb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d84 <_svfiprintf_r+0x1fc>
 8003cbc:	7821      	ldrb	r1, [r4, #0]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	4650      	mov	r0, sl
 8003cc2:	f7fc fa8d 	bl	80001e0 <memchr>
 8003cc6:	b140      	cbz	r0, 8003cda <_svfiprintf_r+0x152>
 8003cc8:	2340      	movs	r3, #64	; 0x40
 8003cca:	eba0 000a 	sub.w	r0, r0, sl
 8003cce:	fa03 f000 	lsl.w	r0, r3, r0
 8003cd2:	9b04      	ldr	r3, [sp, #16]
 8003cd4:	4303      	orrs	r3, r0
 8003cd6:	3401      	adds	r4, #1
 8003cd8:	9304      	str	r3, [sp, #16]
 8003cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cde:	4826      	ldr	r0, [pc, #152]	; (8003d78 <_svfiprintf_r+0x1f0>)
 8003ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ce4:	2206      	movs	r2, #6
 8003ce6:	f7fc fa7b 	bl	80001e0 <memchr>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d038      	beq.n	8003d60 <_svfiprintf_r+0x1d8>
 8003cee:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <_svfiprintf_r+0x1f4>)
 8003cf0:	bb1b      	cbnz	r3, 8003d3a <_svfiprintf_r+0x1b2>
 8003cf2:	9b03      	ldr	r3, [sp, #12]
 8003cf4:	3307      	adds	r3, #7
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	9303      	str	r3, [sp, #12]
 8003cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d00:	4433      	add	r3, r6
 8003d02:	9309      	str	r3, [sp, #36]	; 0x24
 8003d04:	e767      	b.n	8003bd6 <_svfiprintf_r+0x4e>
 8003d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	e7a5      	b.n	8003c5c <_svfiprintf_r+0xd4>
 8003d10:	2300      	movs	r3, #0
 8003d12:	3401      	adds	r4, #1
 8003d14:	9305      	str	r3, [sp, #20]
 8003d16:	4619      	mov	r1, r3
 8003d18:	f04f 0c0a 	mov.w	ip, #10
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d22:	3a30      	subs	r2, #48	; 0x30
 8003d24:	2a09      	cmp	r2, #9
 8003d26:	d903      	bls.n	8003d30 <_svfiprintf_r+0x1a8>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0c5      	beq.n	8003cb8 <_svfiprintf_r+0x130>
 8003d2c:	9105      	str	r1, [sp, #20]
 8003d2e:	e7c3      	b.n	8003cb8 <_svfiprintf_r+0x130>
 8003d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d34:	4604      	mov	r4, r0
 8003d36:	2301      	movs	r3, #1
 8003d38:	e7f0      	b.n	8003d1c <_svfiprintf_r+0x194>
 8003d3a:	ab03      	add	r3, sp, #12
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	462a      	mov	r2, r5
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <_svfiprintf_r+0x1f8>)
 8003d42:	a904      	add	r1, sp, #16
 8003d44:	4638      	mov	r0, r7
 8003d46:	f3af 8000 	nop.w
 8003d4a:	1c42      	adds	r2, r0, #1
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	d1d6      	bne.n	8003cfe <_svfiprintf_r+0x176>
 8003d50:	89ab      	ldrh	r3, [r5, #12]
 8003d52:	065b      	lsls	r3, r3, #25
 8003d54:	f53f af2c 	bmi.w	8003bb0 <_svfiprintf_r+0x28>
 8003d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d5a:	b01d      	add	sp, #116	; 0x74
 8003d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d60:	ab03      	add	r3, sp, #12
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	462a      	mov	r2, r5
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <_svfiprintf_r+0x1f8>)
 8003d68:	a904      	add	r1, sp, #16
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f000 f87a 	bl	8003e64 <_printf_i>
 8003d70:	e7eb      	b.n	8003d4a <_svfiprintf_r+0x1c2>
 8003d72:	bf00      	nop
 8003d74:	08004404 	.word	0x08004404
 8003d78:	0800440e 	.word	0x0800440e
 8003d7c:	00000000 	.word	0x00000000
 8003d80:	08003ad1 	.word	0x08003ad1
 8003d84:	0800440a 	.word	0x0800440a

08003d88 <_printf_common>:
 8003d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	4616      	mov	r6, r2
 8003d8e:	4699      	mov	r9, r3
 8003d90:	688a      	ldr	r2, [r1, #8]
 8003d92:	690b      	ldr	r3, [r1, #16]
 8003d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bfb8      	it	lt
 8003d9c:	4613      	movlt	r3, r2
 8003d9e:	6033      	str	r3, [r6, #0]
 8003da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003da4:	4607      	mov	r7, r0
 8003da6:	460c      	mov	r4, r1
 8003da8:	b10a      	cbz	r2, 8003dae <_printf_common+0x26>
 8003daa:	3301      	adds	r3, #1
 8003dac:	6033      	str	r3, [r6, #0]
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	0699      	lsls	r1, r3, #26
 8003db2:	bf42      	ittt	mi
 8003db4:	6833      	ldrmi	r3, [r6, #0]
 8003db6:	3302      	addmi	r3, #2
 8003db8:	6033      	strmi	r3, [r6, #0]
 8003dba:	6825      	ldr	r5, [r4, #0]
 8003dbc:	f015 0506 	ands.w	r5, r5, #6
 8003dc0:	d106      	bne.n	8003dd0 <_printf_common+0x48>
 8003dc2:	f104 0a19 	add.w	sl, r4, #25
 8003dc6:	68e3      	ldr	r3, [r4, #12]
 8003dc8:	6832      	ldr	r2, [r6, #0]
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	42ab      	cmp	r3, r5
 8003dce:	dc26      	bgt.n	8003e1e <_printf_common+0x96>
 8003dd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dd4:	1e13      	subs	r3, r2, #0
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	0692      	lsls	r2, r2, #26
 8003dde:	d42b      	bmi.n	8003e38 <_printf_common+0xb0>
 8003de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003de4:	4649      	mov	r1, r9
 8003de6:	4638      	mov	r0, r7
 8003de8:	47c0      	blx	r8
 8003dea:	3001      	adds	r0, #1
 8003dec:	d01e      	beq.n	8003e2c <_printf_common+0xa4>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	68e5      	ldr	r5, [r4, #12]
 8003df2:	6832      	ldr	r2, [r6, #0]
 8003df4:	f003 0306 	and.w	r3, r3, #6
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	bf08      	it	eq
 8003dfc:	1aad      	subeq	r5, r5, r2
 8003dfe:	68a3      	ldr	r3, [r4, #8]
 8003e00:	6922      	ldr	r2, [r4, #16]
 8003e02:	bf0c      	ite	eq
 8003e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e08:	2500      	movne	r5, #0
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	bfc4      	itt	gt
 8003e0e:	1a9b      	subgt	r3, r3, r2
 8003e10:	18ed      	addgt	r5, r5, r3
 8003e12:	2600      	movs	r6, #0
 8003e14:	341a      	adds	r4, #26
 8003e16:	42b5      	cmp	r5, r6
 8003e18:	d11a      	bne.n	8003e50 <_printf_common+0xc8>
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e008      	b.n	8003e30 <_printf_common+0xa8>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4652      	mov	r2, sl
 8003e22:	4649      	mov	r1, r9
 8003e24:	4638      	mov	r0, r7
 8003e26:	47c0      	blx	r8
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d103      	bne.n	8003e34 <_printf_common+0xac>
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e34:	3501      	adds	r5, #1
 8003e36:	e7c6      	b.n	8003dc6 <_printf_common+0x3e>
 8003e38:	18e1      	adds	r1, r4, r3
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	2030      	movs	r0, #48	; 0x30
 8003e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e42:	4422      	add	r2, r4
 8003e44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	e7c7      	b.n	8003de0 <_printf_common+0x58>
 8003e50:	2301      	movs	r3, #1
 8003e52:	4622      	mov	r2, r4
 8003e54:	4649      	mov	r1, r9
 8003e56:	4638      	mov	r0, r7
 8003e58:	47c0      	blx	r8
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d0e6      	beq.n	8003e2c <_printf_common+0xa4>
 8003e5e:	3601      	adds	r6, #1
 8003e60:	e7d9      	b.n	8003e16 <_printf_common+0x8e>
	...

08003e64 <_printf_i>:
 8003e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e68:	7e0f      	ldrb	r7, [r1, #24]
 8003e6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e6c:	2f78      	cmp	r7, #120	; 0x78
 8003e6e:	4691      	mov	r9, r2
 8003e70:	4680      	mov	r8, r0
 8003e72:	460c      	mov	r4, r1
 8003e74:	469a      	mov	sl, r3
 8003e76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e7a:	d807      	bhi.n	8003e8c <_printf_i+0x28>
 8003e7c:	2f62      	cmp	r7, #98	; 0x62
 8003e7e:	d80a      	bhi.n	8003e96 <_printf_i+0x32>
 8003e80:	2f00      	cmp	r7, #0
 8003e82:	f000 80d8 	beq.w	8004036 <_printf_i+0x1d2>
 8003e86:	2f58      	cmp	r7, #88	; 0x58
 8003e88:	f000 80a3 	beq.w	8003fd2 <_printf_i+0x16e>
 8003e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e94:	e03a      	b.n	8003f0c <_printf_i+0xa8>
 8003e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e9a:	2b15      	cmp	r3, #21
 8003e9c:	d8f6      	bhi.n	8003e8c <_printf_i+0x28>
 8003e9e:	a101      	add	r1, pc, #4	; (adr r1, 8003ea4 <_printf_i+0x40>)
 8003ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ea4:	08003efd 	.word	0x08003efd
 8003ea8:	08003f11 	.word	0x08003f11
 8003eac:	08003e8d 	.word	0x08003e8d
 8003eb0:	08003e8d 	.word	0x08003e8d
 8003eb4:	08003e8d 	.word	0x08003e8d
 8003eb8:	08003e8d 	.word	0x08003e8d
 8003ebc:	08003f11 	.word	0x08003f11
 8003ec0:	08003e8d 	.word	0x08003e8d
 8003ec4:	08003e8d 	.word	0x08003e8d
 8003ec8:	08003e8d 	.word	0x08003e8d
 8003ecc:	08003e8d 	.word	0x08003e8d
 8003ed0:	0800401d 	.word	0x0800401d
 8003ed4:	08003f41 	.word	0x08003f41
 8003ed8:	08003fff 	.word	0x08003fff
 8003edc:	08003e8d 	.word	0x08003e8d
 8003ee0:	08003e8d 	.word	0x08003e8d
 8003ee4:	0800403f 	.word	0x0800403f
 8003ee8:	08003e8d 	.word	0x08003e8d
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003e8d 	.word	0x08003e8d
 8003ef4:	08003e8d 	.word	0x08003e8d
 8003ef8:	08004007 	.word	0x08004007
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	1d1a      	adds	r2, r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	602a      	str	r2, [r5, #0]
 8003f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0a3      	b.n	8004058 <_printf_i+0x1f4>
 8003f10:	6820      	ldr	r0, [r4, #0]
 8003f12:	6829      	ldr	r1, [r5, #0]
 8003f14:	0606      	lsls	r6, r0, #24
 8003f16:	f101 0304 	add.w	r3, r1, #4
 8003f1a:	d50a      	bpl.n	8003f32 <_printf_i+0xce>
 8003f1c:	680e      	ldr	r6, [r1, #0]
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	2e00      	cmp	r6, #0
 8003f22:	da03      	bge.n	8003f2c <_printf_i+0xc8>
 8003f24:	232d      	movs	r3, #45	; 0x2d
 8003f26:	4276      	negs	r6, r6
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2c:	485e      	ldr	r0, [pc, #376]	; (80040a8 <_printf_i+0x244>)
 8003f2e:	230a      	movs	r3, #10
 8003f30:	e019      	b.n	8003f66 <_printf_i+0x102>
 8003f32:	680e      	ldr	r6, [r1, #0]
 8003f34:	602b      	str	r3, [r5, #0]
 8003f36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f3a:	bf18      	it	ne
 8003f3c:	b236      	sxthne	r6, r6
 8003f3e:	e7ef      	b.n	8003f20 <_printf_i+0xbc>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	1d19      	adds	r1, r3, #4
 8003f46:	6029      	str	r1, [r5, #0]
 8003f48:	0601      	lsls	r1, r0, #24
 8003f4a:	d501      	bpl.n	8003f50 <_printf_i+0xec>
 8003f4c:	681e      	ldr	r6, [r3, #0]
 8003f4e:	e002      	b.n	8003f56 <_printf_i+0xf2>
 8003f50:	0646      	lsls	r6, r0, #25
 8003f52:	d5fb      	bpl.n	8003f4c <_printf_i+0xe8>
 8003f54:	881e      	ldrh	r6, [r3, #0]
 8003f56:	4854      	ldr	r0, [pc, #336]	; (80040a8 <_printf_i+0x244>)
 8003f58:	2f6f      	cmp	r7, #111	; 0x6f
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2308      	moveq	r3, #8
 8003f5e:	230a      	movne	r3, #10
 8003f60:	2100      	movs	r1, #0
 8003f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f66:	6865      	ldr	r5, [r4, #4]
 8003f68:	60a5      	str	r5, [r4, #8]
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	bfa2      	ittt	ge
 8003f6e:	6821      	ldrge	r1, [r4, #0]
 8003f70:	f021 0104 	bicge.w	r1, r1, #4
 8003f74:	6021      	strge	r1, [r4, #0]
 8003f76:	b90e      	cbnz	r6, 8003f7c <_printf_i+0x118>
 8003f78:	2d00      	cmp	r5, #0
 8003f7a:	d04d      	beq.n	8004018 <_printf_i+0x1b4>
 8003f7c:	4615      	mov	r5, r2
 8003f7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f82:	fb03 6711 	mls	r7, r3, r1, r6
 8003f86:	5dc7      	ldrb	r7, [r0, r7]
 8003f88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f8c:	4637      	mov	r7, r6
 8003f8e:	42bb      	cmp	r3, r7
 8003f90:	460e      	mov	r6, r1
 8003f92:	d9f4      	bls.n	8003f7e <_printf_i+0x11a>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d10b      	bne.n	8003fb0 <_printf_i+0x14c>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	07de      	lsls	r6, r3, #31
 8003f9c:	d508      	bpl.n	8003fb0 <_printf_i+0x14c>
 8003f9e:	6923      	ldr	r3, [r4, #16]
 8003fa0:	6861      	ldr	r1, [r4, #4]
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	bfde      	ittt	le
 8003fa6:	2330      	movle	r3, #48	; 0x30
 8003fa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fb0:	1b52      	subs	r2, r2, r5
 8003fb2:	6122      	str	r2, [r4, #16]
 8003fb4:	f8cd a000 	str.w	sl, [sp]
 8003fb8:	464b      	mov	r3, r9
 8003fba:	aa03      	add	r2, sp, #12
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	f7ff fee2 	bl	8003d88 <_printf_common>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d14c      	bne.n	8004062 <_printf_i+0x1fe>
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fcc:	b004      	add	sp, #16
 8003fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd2:	4835      	ldr	r0, [pc, #212]	; (80040a8 <_printf_i+0x244>)
 8003fd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fd8:	6829      	ldr	r1, [r5, #0]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fe0:	6029      	str	r1, [r5, #0]
 8003fe2:	061d      	lsls	r5, r3, #24
 8003fe4:	d514      	bpl.n	8004010 <_printf_i+0x1ac>
 8003fe6:	07df      	lsls	r7, r3, #31
 8003fe8:	bf44      	itt	mi
 8003fea:	f043 0320 	orrmi.w	r3, r3, #32
 8003fee:	6023      	strmi	r3, [r4, #0]
 8003ff0:	b91e      	cbnz	r6, 8003ffa <_printf_i+0x196>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	f023 0320 	bic.w	r3, r3, #32
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	e7b0      	b.n	8003f60 <_printf_i+0xfc>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f043 0320 	orr.w	r3, r3, #32
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	2378      	movs	r3, #120	; 0x78
 8004008:	4828      	ldr	r0, [pc, #160]	; (80040ac <_printf_i+0x248>)
 800400a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800400e:	e7e3      	b.n	8003fd8 <_printf_i+0x174>
 8004010:	0659      	lsls	r1, r3, #25
 8004012:	bf48      	it	mi
 8004014:	b2b6      	uxthmi	r6, r6
 8004016:	e7e6      	b.n	8003fe6 <_printf_i+0x182>
 8004018:	4615      	mov	r5, r2
 800401a:	e7bb      	b.n	8003f94 <_printf_i+0x130>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	6826      	ldr	r6, [r4, #0]
 8004020:	6961      	ldr	r1, [r4, #20]
 8004022:	1d18      	adds	r0, r3, #4
 8004024:	6028      	str	r0, [r5, #0]
 8004026:	0635      	lsls	r5, r6, #24
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	d501      	bpl.n	8004030 <_printf_i+0x1cc>
 800402c:	6019      	str	r1, [r3, #0]
 800402e:	e002      	b.n	8004036 <_printf_i+0x1d2>
 8004030:	0670      	lsls	r0, r6, #25
 8004032:	d5fb      	bpl.n	800402c <_printf_i+0x1c8>
 8004034:	8019      	strh	r1, [r3, #0]
 8004036:	2300      	movs	r3, #0
 8004038:	6123      	str	r3, [r4, #16]
 800403a:	4615      	mov	r5, r2
 800403c:	e7ba      	b.n	8003fb4 <_printf_i+0x150>
 800403e:	682b      	ldr	r3, [r5, #0]
 8004040:	1d1a      	adds	r2, r3, #4
 8004042:	602a      	str	r2, [r5, #0]
 8004044:	681d      	ldr	r5, [r3, #0]
 8004046:	6862      	ldr	r2, [r4, #4]
 8004048:	2100      	movs	r1, #0
 800404a:	4628      	mov	r0, r5
 800404c:	f7fc f8c8 	bl	80001e0 <memchr>
 8004050:	b108      	cbz	r0, 8004056 <_printf_i+0x1f2>
 8004052:	1b40      	subs	r0, r0, r5
 8004054:	6060      	str	r0, [r4, #4]
 8004056:	6863      	ldr	r3, [r4, #4]
 8004058:	6123      	str	r3, [r4, #16]
 800405a:	2300      	movs	r3, #0
 800405c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004060:	e7a8      	b.n	8003fb4 <_printf_i+0x150>
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	462a      	mov	r2, r5
 8004066:	4649      	mov	r1, r9
 8004068:	4640      	mov	r0, r8
 800406a:	47d0      	blx	sl
 800406c:	3001      	adds	r0, #1
 800406e:	d0ab      	beq.n	8003fc8 <_printf_i+0x164>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	079b      	lsls	r3, r3, #30
 8004074:	d413      	bmi.n	800409e <_printf_i+0x23a>
 8004076:	68e0      	ldr	r0, [r4, #12]
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	4298      	cmp	r0, r3
 800407c:	bfb8      	it	lt
 800407e:	4618      	movlt	r0, r3
 8004080:	e7a4      	b.n	8003fcc <_printf_i+0x168>
 8004082:	2301      	movs	r3, #1
 8004084:	4632      	mov	r2, r6
 8004086:	4649      	mov	r1, r9
 8004088:	4640      	mov	r0, r8
 800408a:	47d0      	blx	sl
 800408c:	3001      	adds	r0, #1
 800408e:	d09b      	beq.n	8003fc8 <_printf_i+0x164>
 8004090:	3501      	adds	r5, #1
 8004092:	68e3      	ldr	r3, [r4, #12]
 8004094:	9903      	ldr	r1, [sp, #12]
 8004096:	1a5b      	subs	r3, r3, r1
 8004098:	42ab      	cmp	r3, r5
 800409a:	dcf2      	bgt.n	8004082 <_printf_i+0x21e>
 800409c:	e7eb      	b.n	8004076 <_printf_i+0x212>
 800409e:	2500      	movs	r5, #0
 80040a0:	f104 0619 	add.w	r6, r4, #25
 80040a4:	e7f5      	b.n	8004092 <_printf_i+0x22e>
 80040a6:	bf00      	nop
 80040a8:	08004415 	.word	0x08004415
 80040ac:	08004426 	.word	0x08004426

080040b0 <memcpy>:
 80040b0:	440a      	add	r2, r1
 80040b2:	4291      	cmp	r1, r2
 80040b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040b8:	d100      	bne.n	80040bc <memcpy+0xc>
 80040ba:	4770      	bx	lr
 80040bc:	b510      	push	{r4, lr}
 80040be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040c6:	4291      	cmp	r1, r2
 80040c8:	d1f9      	bne.n	80040be <memcpy+0xe>
 80040ca:	bd10      	pop	{r4, pc}

080040cc <memmove>:
 80040cc:	4288      	cmp	r0, r1
 80040ce:	b510      	push	{r4, lr}
 80040d0:	eb01 0402 	add.w	r4, r1, r2
 80040d4:	d902      	bls.n	80040dc <memmove+0x10>
 80040d6:	4284      	cmp	r4, r0
 80040d8:	4623      	mov	r3, r4
 80040da:	d807      	bhi.n	80040ec <memmove+0x20>
 80040dc:	1e43      	subs	r3, r0, #1
 80040de:	42a1      	cmp	r1, r4
 80040e0:	d008      	beq.n	80040f4 <memmove+0x28>
 80040e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040ea:	e7f8      	b.n	80040de <memmove+0x12>
 80040ec:	4402      	add	r2, r0
 80040ee:	4601      	mov	r1, r0
 80040f0:	428a      	cmp	r2, r1
 80040f2:	d100      	bne.n	80040f6 <memmove+0x2a>
 80040f4:	bd10      	pop	{r4, pc}
 80040f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040fe:	e7f7      	b.n	80040f0 <memmove+0x24>

08004100 <_free_r>:
 8004100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004102:	2900      	cmp	r1, #0
 8004104:	d044      	beq.n	8004190 <_free_r+0x90>
 8004106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410a:	9001      	str	r0, [sp, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f1a1 0404 	sub.w	r4, r1, #4
 8004112:	bfb8      	it	lt
 8004114:	18e4      	addlt	r4, r4, r3
 8004116:	f000 f913 	bl	8004340 <__malloc_lock>
 800411a:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <_free_r+0x94>)
 800411c:	9801      	ldr	r0, [sp, #4]
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	b933      	cbnz	r3, 8004130 <_free_r+0x30>
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	6014      	str	r4, [r2, #0]
 8004126:	b003      	add	sp, #12
 8004128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800412c:	f000 b90e 	b.w	800434c <__malloc_unlock>
 8004130:	42a3      	cmp	r3, r4
 8004132:	d908      	bls.n	8004146 <_free_r+0x46>
 8004134:	6825      	ldr	r5, [r4, #0]
 8004136:	1961      	adds	r1, r4, r5
 8004138:	428b      	cmp	r3, r1
 800413a:	bf01      	itttt	eq
 800413c:	6819      	ldreq	r1, [r3, #0]
 800413e:	685b      	ldreq	r3, [r3, #4]
 8004140:	1949      	addeq	r1, r1, r5
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	e7ed      	b.n	8004122 <_free_r+0x22>
 8004146:	461a      	mov	r2, r3
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	b10b      	cbz	r3, 8004150 <_free_r+0x50>
 800414c:	42a3      	cmp	r3, r4
 800414e:	d9fa      	bls.n	8004146 <_free_r+0x46>
 8004150:	6811      	ldr	r1, [r2, #0]
 8004152:	1855      	adds	r5, r2, r1
 8004154:	42a5      	cmp	r5, r4
 8004156:	d10b      	bne.n	8004170 <_free_r+0x70>
 8004158:	6824      	ldr	r4, [r4, #0]
 800415a:	4421      	add	r1, r4
 800415c:	1854      	adds	r4, r2, r1
 800415e:	42a3      	cmp	r3, r4
 8004160:	6011      	str	r1, [r2, #0]
 8004162:	d1e0      	bne.n	8004126 <_free_r+0x26>
 8004164:	681c      	ldr	r4, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	6053      	str	r3, [r2, #4]
 800416a:	4421      	add	r1, r4
 800416c:	6011      	str	r1, [r2, #0]
 800416e:	e7da      	b.n	8004126 <_free_r+0x26>
 8004170:	d902      	bls.n	8004178 <_free_r+0x78>
 8004172:	230c      	movs	r3, #12
 8004174:	6003      	str	r3, [r0, #0]
 8004176:	e7d6      	b.n	8004126 <_free_r+0x26>
 8004178:	6825      	ldr	r5, [r4, #0]
 800417a:	1961      	adds	r1, r4, r5
 800417c:	428b      	cmp	r3, r1
 800417e:	bf04      	itt	eq
 8004180:	6819      	ldreq	r1, [r3, #0]
 8004182:	685b      	ldreq	r3, [r3, #4]
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	bf04      	itt	eq
 8004188:	1949      	addeq	r1, r1, r5
 800418a:	6021      	streq	r1, [r4, #0]
 800418c:	6054      	str	r4, [r2, #4]
 800418e:	e7ca      	b.n	8004126 <_free_r+0x26>
 8004190:	b003      	add	sp, #12
 8004192:	bd30      	pop	{r4, r5, pc}
 8004194:	2000016c 	.word	0x2000016c

08004198 <sbrk_aligned>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4e0e      	ldr	r6, [pc, #56]	; (80041d4 <sbrk_aligned+0x3c>)
 800419c:	460c      	mov	r4, r1
 800419e:	6831      	ldr	r1, [r6, #0]
 80041a0:	4605      	mov	r5, r0
 80041a2:	b911      	cbnz	r1, 80041aa <sbrk_aligned+0x12>
 80041a4:	f000 f8bc 	bl	8004320 <_sbrk_r>
 80041a8:	6030      	str	r0, [r6, #0]
 80041aa:	4621      	mov	r1, r4
 80041ac:	4628      	mov	r0, r5
 80041ae:	f000 f8b7 	bl	8004320 <_sbrk_r>
 80041b2:	1c43      	adds	r3, r0, #1
 80041b4:	d00a      	beq.n	80041cc <sbrk_aligned+0x34>
 80041b6:	1cc4      	adds	r4, r0, #3
 80041b8:	f024 0403 	bic.w	r4, r4, #3
 80041bc:	42a0      	cmp	r0, r4
 80041be:	d007      	beq.n	80041d0 <sbrk_aligned+0x38>
 80041c0:	1a21      	subs	r1, r4, r0
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f8ac 	bl	8004320 <_sbrk_r>
 80041c8:	3001      	adds	r0, #1
 80041ca:	d101      	bne.n	80041d0 <sbrk_aligned+0x38>
 80041cc:	f04f 34ff 	mov.w	r4, #4294967295
 80041d0:	4620      	mov	r0, r4
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	20000170 	.word	0x20000170

080041d8 <_malloc_r>:
 80041d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041dc:	1ccd      	adds	r5, r1, #3
 80041de:	f025 0503 	bic.w	r5, r5, #3
 80041e2:	3508      	adds	r5, #8
 80041e4:	2d0c      	cmp	r5, #12
 80041e6:	bf38      	it	cc
 80041e8:	250c      	movcc	r5, #12
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	4607      	mov	r7, r0
 80041ee:	db01      	blt.n	80041f4 <_malloc_r+0x1c>
 80041f0:	42a9      	cmp	r1, r5
 80041f2:	d905      	bls.n	8004200 <_malloc_r+0x28>
 80041f4:	230c      	movs	r3, #12
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	2600      	movs	r6, #0
 80041fa:	4630      	mov	r0, r6
 80041fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004200:	4e2e      	ldr	r6, [pc, #184]	; (80042bc <_malloc_r+0xe4>)
 8004202:	f000 f89d 	bl	8004340 <__malloc_lock>
 8004206:	6833      	ldr	r3, [r6, #0]
 8004208:	461c      	mov	r4, r3
 800420a:	bb34      	cbnz	r4, 800425a <_malloc_r+0x82>
 800420c:	4629      	mov	r1, r5
 800420e:	4638      	mov	r0, r7
 8004210:	f7ff ffc2 	bl	8004198 <sbrk_aligned>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	4604      	mov	r4, r0
 8004218:	d14d      	bne.n	80042b6 <_malloc_r+0xde>
 800421a:	6834      	ldr	r4, [r6, #0]
 800421c:	4626      	mov	r6, r4
 800421e:	2e00      	cmp	r6, #0
 8004220:	d140      	bne.n	80042a4 <_malloc_r+0xcc>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	4631      	mov	r1, r6
 8004226:	4638      	mov	r0, r7
 8004228:	eb04 0803 	add.w	r8, r4, r3
 800422c:	f000 f878 	bl	8004320 <_sbrk_r>
 8004230:	4580      	cmp	r8, r0
 8004232:	d13a      	bne.n	80042aa <_malloc_r+0xd2>
 8004234:	6821      	ldr	r1, [r4, #0]
 8004236:	3503      	adds	r5, #3
 8004238:	1a6d      	subs	r5, r5, r1
 800423a:	f025 0503 	bic.w	r5, r5, #3
 800423e:	3508      	adds	r5, #8
 8004240:	2d0c      	cmp	r5, #12
 8004242:	bf38      	it	cc
 8004244:	250c      	movcc	r5, #12
 8004246:	4629      	mov	r1, r5
 8004248:	4638      	mov	r0, r7
 800424a:	f7ff ffa5 	bl	8004198 <sbrk_aligned>
 800424e:	3001      	adds	r0, #1
 8004250:	d02b      	beq.n	80042aa <_malloc_r+0xd2>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	442b      	add	r3, r5
 8004256:	6023      	str	r3, [r4, #0]
 8004258:	e00e      	b.n	8004278 <_malloc_r+0xa0>
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	1b52      	subs	r2, r2, r5
 800425e:	d41e      	bmi.n	800429e <_malloc_r+0xc6>
 8004260:	2a0b      	cmp	r2, #11
 8004262:	d916      	bls.n	8004292 <_malloc_r+0xba>
 8004264:	1961      	adds	r1, r4, r5
 8004266:	42a3      	cmp	r3, r4
 8004268:	6025      	str	r5, [r4, #0]
 800426a:	bf18      	it	ne
 800426c:	6059      	strne	r1, [r3, #4]
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	bf08      	it	eq
 8004272:	6031      	streq	r1, [r6, #0]
 8004274:	5162      	str	r2, [r4, r5]
 8004276:	604b      	str	r3, [r1, #4]
 8004278:	4638      	mov	r0, r7
 800427a:	f104 060b 	add.w	r6, r4, #11
 800427e:	f000 f865 	bl	800434c <__malloc_unlock>
 8004282:	f026 0607 	bic.w	r6, r6, #7
 8004286:	1d23      	adds	r3, r4, #4
 8004288:	1af2      	subs	r2, r6, r3
 800428a:	d0b6      	beq.n	80041fa <_malloc_r+0x22>
 800428c:	1b9b      	subs	r3, r3, r6
 800428e:	50a3      	str	r3, [r4, r2]
 8004290:	e7b3      	b.n	80041fa <_malloc_r+0x22>
 8004292:	6862      	ldr	r2, [r4, #4]
 8004294:	42a3      	cmp	r3, r4
 8004296:	bf0c      	ite	eq
 8004298:	6032      	streq	r2, [r6, #0]
 800429a:	605a      	strne	r2, [r3, #4]
 800429c:	e7ec      	b.n	8004278 <_malloc_r+0xa0>
 800429e:	4623      	mov	r3, r4
 80042a0:	6864      	ldr	r4, [r4, #4]
 80042a2:	e7b2      	b.n	800420a <_malloc_r+0x32>
 80042a4:	4634      	mov	r4, r6
 80042a6:	6876      	ldr	r6, [r6, #4]
 80042a8:	e7b9      	b.n	800421e <_malloc_r+0x46>
 80042aa:	230c      	movs	r3, #12
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4638      	mov	r0, r7
 80042b0:	f000 f84c 	bl	800434c <__malloc_unlock>
 80042b4:	e7a1      	b.n	80041fa <_malloc_r+0x22>
 80042b6:	6025      	str	r5, [r4, #0]
 80042b8:	e7de      	b.n	8004278 <_malloc_r+0xa0>
 80042ba:	bf00      	nop
 80042bc:	2000016c 	.word	0x2000016c

080042c0 <_realloc_r>:
 80042c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c4:	4680      	mov	r8, r0
 80042c6:	4614      	mov	r4, r2
 80042c8:	460e      	mov	r6, r1
 80042ca:	b921      	cbnz	r1, 80042d6 <_realloc_r+0x16>
 80042cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042d0:	4611      	mov	r1, r2
 80042d2:	f7ff bf81 	b.w	80041d8 <_malloc_r>
 80042d6:	b92a      	cbnz	r2, 80042e4 <_realloc_r+0x24>
 80042d8:	f7ff ff12 	bl	8004100 <_free_r>
 80042dc:	4625      	mov	r5, r4
 80042de:	4628      	mov	r0, r5
 80042e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e4:	f000 f838 	bl	8004358 <_malloc_usable_size_r>
 80042e8:	4284      	cmp	r4, r0
 80042ea:	4607      	mov	r7, r0
 80042ec:	d802      	bhi.n	80042f4 <_realloc_r+0x34>
 80042ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042f2:	d812      	bhi.n	800431a <_realloc_r+0x5a>
 80042f4:	4621      	mov	r1, r4
 80042f6:	4640      	mov	r0, r8
 80042f8:	f7ff ff6e 	bl	80041d8 <_malloc_r>
 80042fc:	4605      	mov	r5, r0
 80042fe:	2800      	cmp	r0, #0
 8004300:	d0ed      	beq.n	80042de <_realloc_r+0x1e>
 8004302:	42bc      	cmp	r4, r7
 8004304:	4622      	mov	r2, r4
 8004306:	4631      	mov	r1, r6
 8004308:	bf28      	it	cs
 800430a:	463a      	movcs	r2, r7
 800430c:	f7ff fed0 	bl	80040b0 <memcpy>
 8004310:	4631      	mov	r1, r6
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff fef4 	bl	8004100 <_free_r>
 8004318:	e7e1      	b.n	80042de <_realloc_r+0x1e>
 800431a:	4635      	mov	r5, r6
 800431c:	e7df      	b.n	80042de <_realloc_r+0x1e>
	...

08004320 <_sbrk_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d06      	ldr	r5, [pc, #24]	; (800433c <_sbrk_r+0x1c>)
 8004324:	2300      	movs	r3, #0
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	f7fc fc64 	bl	8000bf8 <_sbrk>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_sbrk_r+0x1a>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_sbrk_r+0x1a>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	20000174 	.word	0x20000174

08004340 <__malloc_lock>:
 8004340:	4801      	ldr	r0, [pc, #4]	; (8004348 <__malloc_lock+0x8>)
 8004342:	f000 b811 	b.w	8004368 <__retarget_lock_acquire_recursive>
 8004346:	bf00      	nop
 8004348:	20000178 	.word	0x20000178

0800434c <__malloc_unlock>:
 800434c:	4801      	ldr	r0, [pc, #4]	; (8004354 <__malloc_unlock+0x8>)
 800434e:	f000 b80c 	b.w	800436a <__retarget_lock_release_recursive>
 8004352:	bf00      	nop
 8004354:	20000178 	.word	0x20000178

08004358 <_malloc_usable_size_r>:
 8004358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800435c:	1f18      	subs	r0, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	bfbc      	itt	lt
 8004362:	580b      	ldrlt	r3, [r1, r0]
 8004364:	18c0      	addlt	r0, r0, r3
 8004366:	4770      	bx	lr

08004368 <__retarget_lock_acquire_recursive>:
 8004368:	4770      	bx	lr

0800436a <__retarget_lock_release_recursive>:
 800436a:	4770      	bx	lr

0800436c <_init>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	bf00      	nop
 8004370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004372:	bc08      	pop	{r3}
 8004374:	469e      	mov	lr, r3
 8004376:	4770      	bx	lr

08004378 <_fini>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr
