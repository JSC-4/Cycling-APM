
Cycling_APM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d528  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  0800d6b8  0800d6b8  0001d6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e07c  0800e07c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e07c  0800e07c  0001e07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e084  0800e084  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e084  0800e084  0001e084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e088  0800e088  0001e088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028d4  200001f4  0800e280  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ac8  0800e280  00022ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1f3  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb0  00000000  00000000  0003d417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00040fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00042930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ea8  00000000  00000000  000440e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211ae  00000000  00000000  00068f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d22d8  00000000  00000000  0008a136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c40e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c8c  00000000  00000000  0015c460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6a0 	.word	0x0800d6a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800d6a0 	.word	0x0800d6a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <dfr_initialise>:
#include "dfr_no2_co.h"             // Include header file for dfr sensor

HAL_StatusTypeDef dfr_initialise(dfr_data *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->no2 = 0;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
	dev->co = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	dev->r0_ox = 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	839a      	strh	r2, [r3, #28]
	dev->r0_red = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	83da      	strh	r2, [r3, #30]
	dev->oxData = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	841a      	strh	r2, [r3, #32]
	dev->redData = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	845a      	strh	r2, [r3, #34]	; 0x22
	dev->powerData = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	849a      	strh	r2, [r3, #36]	; 0x24
	dev->RS_R0_RED_data = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
	dev->RS_R0_OX_data = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c

	return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <getGasData>:

/* Take a measurement, and get the readings for NO2 and CO */
HAL_StatusTypeDef getGasData(dfr_data *dev)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	status = getSensorData(dev);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fada 	bl	80015aa <getSensorData>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_ERROR)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <getGasData+0x1c>
    {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e030      	b.n	8001066 <getGasData+0x7e>
    }
    dev->no2 = getNitrogenDioxide(dev);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f833 	bl	8001070 <getNitrogenDioxide>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->co = getCarbonMonoxide(dev);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f88f 	bl	8001138 <getCarbonMonoxide>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->ch4 = getMethane(dev);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f8e3 	bl	80011f0 <getMethane>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	edc3 7a03 	vstr	s15, [r3, #12]
    dev->c2h5oh = getEthanol(dev);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f93b 	bl	80012b0 <getEthanol>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->h2 = getHydrogen(dev);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f98f 	bl	8001368 <getHydrogen>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->nh3 = getAmmonia(dev);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f9e3 	bl	8001420 <getAmmonia>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edc3 7a06 	vstr	s15, [r3, #24]

    return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <getNitrogenDioxide>:

/* Convert  measurement for NO2*/
float getNitrogenDioxide(dfr_data *dev)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    if (dev->RS_R0_OX_data < 1.1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa63 	bl	8000548 <__aeabi_f2d>
 8001082:	a324      	add	r3, pc, #144	; (adr r3, 8001114 <getNitrogenDioxide+0xa4>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fd28 	bl	8000adc <__aeabi_dcmplt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <getNitrogenDioxide+0x28>
        return 0;
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e034      	b.n	8001102 <getNitrogenDioxide+0x92>
    float nitrogendioxide = (dev->RS_R0_OX_data - 0.045) / 6.13;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	a31e      	add	r3, pc, #120	; (adr r3, 800111c <getNitrogenDioxide+0xac>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff f8ee 	bl	8000288 <__aeabi_dsub>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	a31b      	add	r3, pc, #108	; (adr r3, 8001124 <getNitrogenDioxide+0xb4>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fbc7 	bl	800084c <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd8f 	bl	8000be8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
    if (nitrogendioxide < 0.1)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fa3a 	bl	8000548 <__aeabi_f2d>
 80010d4:	a315      	add	r3, pc, #84	; (adr r3, 800112c <getNitrogenDioxide+0xbc>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fcff 	bl	8000adc <__aeabi_dcmplt>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <getNitrogenDioxide+0x7a>
        return 0.0;
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e00b      	b.n	8001102 <getNitrogenDioxide+0x92>
    if (nitrogendioxide > 10.0)
 80010ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	dd01      	ble.n	8001100 <getNitrogenDioxide+0x90>
        return 10.0;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <getNitrogenDioxide+0xa0>)
 80010fe:	e000      	b.n	8001102 <getNitrogenDioxide+0x92>
    return nitrogendioxide;
 8001100:	68fb      	ldr	r3, [r7, #12]
}
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	41200000 	.word	0x41200000
 8001114:	9999999a 	.word	0x9999999a
 8001118:	3ff19999 	.word	0x3ff19999
 800111c:	70a3d70a 	.word	0x70a3d70a
 8001120:	3fa70a3d 	.word	0x3fa70a3d
 8001124:	b851eb85 	.word	0xb851eb85
 8001128:	4018851e 	.word	0x4018851e
 800112c:	9999999a 	.word	0x9999999a
 8001130:	3fb99999 	.word	0x3fb99999
 8001134:	00000000 	.word	0x00000000

08001138 <getCarbonMonoxide>:

/* Convert measurement for CO*/
float getCarbonMonoxide(dfr_data *dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    if (dev->RS_R0_RED_data > 0.425)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9ff 	bl	8000548 <__aeabi_f2d>
 800114a:	a325      	add	r3, pc, #148	; (adr r3, 80011e0 <getCarbonMonoxide+0xa8>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <getCarbonMonoxide+0x28>
        return 0.0;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e034      	b.n	80011ca <getCarbonMonoxide+0x92>
    float co = (0.425 - dev->RS_R0_RED_data) / 0.000405;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9ef 	bl	8000548 <__aeabi_f2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	a11c      	add	r1, pc, #112	; (adr r1, 80011e0 <getCarbonMonoxide+0xa8>)
 8001170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001174:	f7ff f888 	bl	8000288 <__aeabi_dsub>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	a319      	add	r3, pc, #100	; (adr r3, 80011e8 <getCarbonMonoxide+0xb0>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fb61 	bl	800084c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd29 	bl	8000be8 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	60fb      	str	r3, [r7, #12]
    if (co > 1000.0)
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80011d8 <getCarbonMonoxide+0xa0>
 80011a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	dd01      	ble.n	80011b0 <getCarbonMonoxide+0x78>
        return 1000.0;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <getCarbonMonoxide+0xa4>)
 80011ae:	e00c      	b.n	80011ca <getCarbonMonoxide+0x92>
    if (co < 1.0)
 80011b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d502      	bpl.n	80011c8 <getCarbonMonoxide+0x90>
        return 0.0;
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	e000      	b.n	80011ca <getCarbonMonoxide+0x92>
    return co;
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb0 0a67 	vmov.f32	s0, s15
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	447a0000 	.word	0x447a0000
 80011dc:	447a0000 	.word	0x447a0000
 80011e0:	33333333 	.word	0x33333333
 80011e4:	3fdb3333 	.word	0x3fdb3333
 80011e8:	c13fd0d0 	.word	0xc13fd0d0
 80011ec:	3f3a8ac5 	.word	0x3f3a8ac5

080011f0 <getMethane>:

float getMethane(dfr_data *dev)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.786)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	a326      	add	r3, pc, #152	; (adr r3, 800129c <getMethane+0xac>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <getMethane+0x28>
    return 0.0;
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	e034      	b.n	8001282 <getMethane+0x92>
  float methane = (0.786 - dev->RS_R0_RED_data) / 0.000023;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f993 	bl	8000548 <__aeabi_f2d>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	a11d      	add	r1, pc, #116	; (adr r1, 800129c <getMethane+0xac>)
 8001228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800122c:	f7ff f82c 	bl	8000288 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	a31a      	add	r3, pc, #104	; (adr r3, 80012a4 <getMethane+0xb4>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fccd 	bl	8000be8 <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	60fb      	str	r3, [r7, #12]
  if(methane < 1000.0) methane = 0.0;
 8001252:	edd7 7a03 	vldr	s15, [r7, #12]
 8001256:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001290 <getMethane+0xa0>
 800125a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	d502      	bpl.n	800126a <getMethane+0x7a>
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  if(methane > 25000.0) methane = 25000.0;
 800126a:	edd7 7a03 	vldr	s15, [r7, #12]
 800126e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001294 <getMethane+0xa4>
 8001272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	dd01      	ble.n	8001280 <getMethane+0x90>
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <getMethane+0xa8>)
 800127e:	60fb      	str	r3, [r7, #12]
  return methane;
 8001280:	68fb      	ldr	r3, [r7, #12]
}
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	447a0000 	.word	0x447a0000
 8001294:	46c35000 	.word	0x46c35000
 8001298:	46c35000 	.word	0x46c35000
 800129c:	78d4fdf4 	.word	0x78d4fdf4
 80012a0:	3fe926e9 	.word	0x3fe926e9
 80012a4:	f705857b 	.word	0xf705857b
 80012a8:	3ef81e03 	.word	0x3ef81e03
 80012ac:	00000000 	.word	0x00000000

080012b0 <getEthanol>:

float getEthanol(dfr_data *dev)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.306)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	a325      	add	r3, pc, #148	; (adr r3, 8001358 <getEthanol+0xa8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <getEthanol+0x28>
    return 0.0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e034      	b.n	8001342 <getEthanol+0x92>
  float ethanol = (0.306 - dev->RS_R0_RED_data) / 0.00057;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	a11c      	add	r1, pc, #112	; (adr r1, 8001358 <getEthanol+0xa8>)
 80012e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ec:	f7fe ffcc 	bl	8000288 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	a319      	add	r3, pc, #100	; (adr r3, 8001360 <getEthanol+0xb0>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff faa5 	bl	800084c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fc6d 	bl	8000be8 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	60fb      	str	r3, [r7, #12]
  if(ethanol < 10.0)
 8001312:	edd7 7a03 	vldr	s15, [r7, #12]
 8001316:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800131a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	d502      	bpl.n	800132a <getEthanol+0x7a>
    return 0.0;
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e00b      	b.n	8001342 <getEthanol+0x92>
  if(ethanol > 500.0)
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001350 <getEthanol+0xa0>
 8001332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	dd01      	ble.n	8001340 <getEthanol+0x90>
    return 500.0;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <getEthanol+0xa4>)
 800133e:	e000      	b.n	8001342 <getEthanol+0x92>
  return ethanol;
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43fa0000 	.word	0x43fa0000
 8001354:	43fa0000 	.word	0x43fa0000
 8001358:	0624dd2f 	.word	0x0624dd2f
 800135c:	3fd39581 	.word	0x3fd39581
 8001360:	adea8976 	.word	0xadea8976
 8001364:	3f42ad81 	.word	0x3f42ad81

08001368 <getHydrogen>:

float getHydrogen(dfr_data *dev)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.279)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a325      	add	r3, pc, #148	; (adr r3, 8001410 <getHydrogen+0xa8>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <getHydrogen+0x28>
    return 0.0;
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e034      	b.n	80013fa <getHydrogen+0x92>
  float hydrogen = (0.279 - dev->RS_R0_RED_data) / 0.00026;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	a11c      	add	r1, pc, #112	; (adr r1, 8001410 <getHydrogen+0xa8>)
 80013a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013a4:	f7fe ff70 	bl	8000288 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	a319      	add	r3, pc, #100	; (adr r3, 8001418 <getHydrogen+0xb0>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff fa49 	bl	800084c <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fc11 	bl	8000be8 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	60fb      	str	r3, [r7, #12]
  if(hydrogen < 1.0)
 80013ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d502      	bpl.n	80013e2 <getHydrogen+0x7a>
    return 0.0;
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e00b      	b.n	80013fa <getHydrogen+0x92>
  if(hydrogen > 1000.0)
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001408 <getHydrogen+0xa0>
 80013ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	dd01      	ble.n	80013f8 <getHydrogen+0x90>
    return 1000.0;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <getHydrogen+0xa4>)
 80013f6:	e000      	b.n	80013fa <getHydrogen+0x92>
  return hydrogen;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	447a0000 	.word	0x447a0000
 800140c:	447a0000 	.word	0x447a0000
 8001410:	d0e56042 	.word	0xd0e56042
 8001414:	3fd1db22 	.word	0x3fd1db22
 8001418:	7f38c543 	.word	0x7f38c543
 800141c:	3f310a13 	.word	0x3f310a13

08001420 <getAmmonia>:

float getAmmonia(dfr_data *dev)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(dev->RS_R0_RED_data > 0.8)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	a325      	add	r3, pc, #148	; (adr r3, 80014c8 <getAmmonia+0xa8>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <getAmmonia+0x28>
    return 0.0;
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	e034      	b.n	80014b2 <getAmmonia+0x92>
  float ammonia = (0.8 - dev->RS_R0_RED_data) / 0.0015;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	a11c      	add	r1, pc, #112	; (adr r1, 80014c8 <getAmmonia+0xa8>)
 8001458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800145c:	f7fe ff14 	bl	8000288 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a319      	add	r3, pc, #100	; (adr r3, 80014d0 <getAmmonia+0xb0>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f9ed 	bl	800084c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fbb5 	bl	8000be8 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]
  if(ammonia < 1.0)
 8001482:	edd7 7a03 	vldr	s15, [r7, #12]
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800148a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d502      	bpl.n	800149a <getAmmonia+0x7a>
    return 0.0;
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e00b      	b.n	80014b2 <getAmmonia+0x92>
  if(ammonia > 500.0)
 800149a:	edd7 7a03 	vldr	s15, [r7, #12]
 800149e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80014c0 <getAmmonia+0xa0>
 80014a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	dd01      	ble.n	80014b0 <getAmmonia+0x90>
    return 500.0;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <getAmmonia+0xa4>)
 80014ae:	e000      	b.n	80014b2 <getAmmonia+0x92>
  return ammonia;
 80014b0:	68fb      	ldr	r3, [r7, #12]
}
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	43fa0000 	.word	0x43fa0000
 80014c4:	43fa0000 	.word	0x43fa0000
 80014c8:	9999999a 	.word	0x9999999a
 80014cc:	3fe99999 	.word	0x3fe99999
 80014d0:	bc6a7efa 	.word	0xbc6a7efa
 80014d4:	3f589374 	.word	0x3f589374

080014d8 <dfrWakeUp>:

/* Check if device is in sleep state */
HAL_StatusTypeDef dfrWakeUp(dfr_data *dev)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
    uint8_t mode[1] = {0x00};
 80014e0:	2300      	movs	r3, #0
 80014e2:	733b      	strb	r3, [r7, #12]
    uint8_t regData[2] = {POWER_MODE_REGISTER, WAKE_UP_MODE};
 80014e4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80014e8:	813b      	strh	r3, [r7, #8]

    /* Set the address pointer to power mode register */
    status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x78 << 1), regData, 1,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f107 0208 	add.w	r2, r7, #8
 80014f2:	2332      	movs	r3, #50	; 0x32
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	21f0      	movs	r1, #240	; 0xf0
 80014fa:	f002 f991 	bl	8003820 <HAL_I2C_Master_Transmit>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
			50);
    if (status != 0)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <dfrWakeUp+0x34>
    {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e025      	b.n	8001558 <dfrWakeUp+0x80>
    }

    /* Read current power mode setting */
    status = HAL_I2C_Master_Receive(dev->i2cHandle, (0x78 << 1) | 0x01, mode, 1,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f107 020c 	add.w	r2, r7, #12
 8001514:	2332      	movs	r3, #50	; 0x32
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	21f1      	movs	r1, #241	; 0xf1
 800151c:	f002 fa74 	bl	8003a08 <HAL_I2C_Master_Receive>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
			50);
    if (status != 0)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <dfrWakeUp+0x56>
    {
//        printf("Failed to write I2C device address for getting sensor data (err %i)\n", ret);
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e014      	b.n	8001558 <dfrWakeUp+0x80>
    }

    /* Device is sleeping*/
    if (mode[0] == 0)
 800152e:	7b3b      	ldrb	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d110      	bne.n	8001556 <dfrWakeUp+0x7e>
    {

        status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x78 << 1), regData, 2,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	2332      	movs	r3, #50	; 0x32
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	21f0      	movs	r1, #240	; 0xf0
 8001544:	f002 f96c 	bl	8003820 <HAL_I2C_Master_Transmit>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
    			50);
        if (status != 0)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <dfrWakeUp+0x7e>
        {
            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <dfrWakeUp+0x80>
    }
    else
    {
//        printf("Device is woken up\n");
    }
    return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <dfrWarmUpData>:

HAL_StatusTypeDef dfrWarmUpData(dfr_data *dev)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	status = getSensorData(dev);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f81e 	bl	80015aa <getSensorData>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_ERROR)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <dfrWarmUpData+0x1c>
    {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e012      	b.n	80015a2 <dfrWarmUpData+0x42>
    }

    /* Calculate oxsiding and reducing values */
    dev->r0_ox = dev->powerData - dev->oxData;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	8c1b      	ldrh	r3, [r3, #32]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	839a      	strh	r2, [r3, #28]
    dev->r0_red = dev->powerData - dev->redData;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	b21a      	sxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	83da      	strh	r2, [r3, #30]

    return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <getSensorData>:

/* Read sensor for measurements */
int16_t getSensorData(dfr_data *dev)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b08c      	sub	sp, #48	; 0x30
 80015ae:	af04      	add	r7, sp, #16
 80015b0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
//    uint8_t buf[1] = {OX_REGISTER_HIGH};
    uint8_t recv_data[20] = {0x00};
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]

    status = HAL_I2C_Mem_Read(dev->i2cHandle, (0x78 << 1), 0x04, I2C_MEMADD_SIZE_8BIT, recv_data, 6, 100);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2306      	movs	r3, #6
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	2204      	movs	r2, #4
 80015da:	21f0      	movs	r1, #240	; 0xf0
 80015dc:	f002 fb0a 	bl	8003bf4 <HAL_I2C_Mem_Read>
 80015e0:	4603      	mov	r3, r0
 80015e2:	77fb      	strb	r3, [r7, #31]
    /* Set the address pointer to OX_REGISTER_HIGH */
//    status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x78 << 1), buf, 1,
//			50);
    if (status != 0)
 80015e4:	7ffb      	ldrb	r3, [r7, #31]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <getSensorData+0x44>
    {
//        printf("Failed to write I2C device address for getting sensor data (err %i)\n", ret);
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e04a      	b.n	8001684 <getSensorData+0xda>
////        printf("Failed to write I2C device address for getting sensor data (err %i)\n", ret);
//        return HAL_ERROR;
//    }

    /* Shift high and low data in the buffer */
    dev->oxData = (((uint16_t)recv_data[0] << 8) + (uint16_t)recv_data[1]);
 80015ee:	7a3b      	ldrb	r3, [r7, #8]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	7a7b      	ldrb	r3, [r7, #9]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	841a      	strh	r2, [r3, #32]
    dev->redData = (((uint16_t)recv_data[2] << 8) + (uint16_t)recv_data[3]);
 8001602:	7abb      	ldrb	r3, [r7, #10]
 8001604:	b29b      	uxth	r3, r3
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b29a      	uxth	r2, r3
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4413      	add	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	845a      	strh	r2, [r3, #34]	; 0x22
    dev->powerData = (((uint16_t)recv_data[4] << 8) + (uint16_t)recv_data[5]);
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	b29b      	uxth	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b29a      	uxth	r2, r3
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b29a      	uxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	849a      	strh	r2, [r3, #36]	; 0x24

    // printf("__r0_ox = %d, __r0_red = %d, powerData = %d, oxData = %d, redData = %d\n", data->r0_ox, data->r0_red, data->powerData, data->oxData, data->redData);

    dev->RS_R0_RED_data = (float)(dev->powerData - dev->redData) / (float)dev->r0_red;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    dev->RS_R0_OX_data = (float)(dev->powerData - dev->oxData) / (float)dev->r0_ox;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	8c1b      	ldrh	r3, [r3, #32]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <DS3231_DecodeBCD>:
int bcd2dec(uint8_t b)
{
	return b = ((b / 16) * 10 + (b % 16));
}

uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	b2db      	uxtb	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <ds3231_initialise>:
int dec2bcd(char d) {
	return (((d / 10) << 4) | (d % 10));
}

HAL_StatusTypeDef ds3231_initialise(ds3231_data *dev,
		I2C_HandleTypeDef *i2cHandle) {
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <getTime>:
	return HAL_OK;
}

/* Method to get the time from the DS3231. The three registers are one after the
 other, so an repeat I2C read can be done. */
HAL_StatusTypeDef getTime(ds3231_data *dev) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	uint8_t cmd[1];
	uint8_t buf[3];

	cmd[0] = DS3231_SECONDS;
 80016e4:	2300      	movs	r3, #0
 80016e6:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Master_Transmit(dev->i2cHandle, (DS3231_ADDR << 1), cmd, 1, 50);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	2332      	movs	r3, #50	; 0x32
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	21d0      	movs	r1, #208	; 0xd0
 80016f8:	f002 f892 	bl	8003820 <HAL_I2C_Master_Transmit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
//	if (status != 0) {
////    	printf("Failed to write I2C device address (err %i)\n", ret);
//		return HAL_TIMEOUT;
//	}

    status = HAL_I2C_Master_Receive(dev->i2cHandle, (DS3231_ADDR << 1), buf, 3,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f107 0208 	add.w	r2, r7, #8
 8001708:	2332      	movs	r3, #50	; 0x32
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2303      	movs	r3, #3
 800170e:	21d0      	movs	r1, #208	; 0xd0
 8001710:	f002 f97a 	bl	8003a08 <HAL_I2C_Master_Receive>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]

//	for (int i = 0; i < 3; i++) {
//		bcd2dec(buf[i]);
//	}

	dev->second = DS3231_DecodeBCD(buf[0]);
 8001718:	7a3b      	ldrb	r3, [r7, #8]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffb6 	bl	800168c <DS3231_DecodeBCD>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	711a      	strb	r2, [r3, #4]
	dev->minute = DS3231_DecodeBCD(buf[1]);
 8001728:	7a7b      	ldrb	r3, [r7, #9]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffae 	bl	800168c <DS3231_DecodeBCD>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	715a      	strb	r2, [r3, #5]
	dev->hour = DS3231_DecodeBCD(buf[2]);
 8001738:	7abb      	ldrb	r3, [r7, #10]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffa6 	bl	800168c <DS3231_DecodeBCD>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2108      	movs	r1, #8
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f001 ff9d 	bl	800369c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f001 fcfa 	bl	800315c <HAL_Delay>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2108      	movs	r1, #8
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f001 ff90 	bl	800369c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f001 fced 	bl	800315c <HAL_Delay>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001792:	bf00      	nop
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <SPI_TxByte+0x30>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d1f8      	bne.n	8001794 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80017a2:	1df9      	adds	r1, r7, #7
 80017a4:	2364      	movs	r3, #100	; 0x64
 80017a6:	2201      	movs	r2, #1
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <SPI_TxByte+0x30>)
 80017aa:	f004 f8e8 	bl	800597e <HAL_SPI_Transmit>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000026c 	.word	0x2000026c

080017bc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017c8:	bf00      	nop
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <SPI_TxBuffer+0x30>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d1f8      	bne.n	80017ca <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <SPI_TxBuffer+0x30>)
 80017e0:	f004 f8cd 	bl	800597e <HAL_SPI_Transmit>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000026c 	.word	0x2000026c

080017f0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80017f6:	23ff      	movs	r3, #255	; 0xff
 80017f8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017fa:	bf00      	nop
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <SPI_RxByte+0x34>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d1f8      	bne.n	80017fc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800180a:	1dba      	adds	r2, r7, #6
 800180c:	1df9      	adds	r1, r7, #7
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <SPI_RxByte+0x34>)
 8001816:	f004 fa20 	bl	8005c5a <HAL_SPI_TransmitReceive>

	return data;
 800181a:	79bb      	ldrb	r3, [r7, #6]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000026c 	.word	0x2000026c

08001828 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001830:	f7ff ffde 	bl	80017f0 <SPI_RxByte>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <SD_ReadyWait+0x30>)
 800184c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001850:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001852:	f7ff ffcd 	bl	80017f0 <SPI_RxByte>
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d003      	beq.n	8001868 <SD_ReadyWait+0x24>
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SD_ReadyWait+0x30>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f4      	bne.n	8001852 <SD_ReadyWait+0xe>

	return res;
 8001868:	79fb      	ldrb	r3, [r7, #7]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000212 	.word	0x20000212

08001878 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800187e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001882:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001884:	f7ff ff72 	bl	800176c <DESELECT>
	for(int i = 0; i < 10; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	e005      	b.n	800189a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800188e:	20ff      	movs	r0, #255	; 0xff
 8001890:	f7ff ff7a 	bl	8001788 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b09      	cmp	r3, #9
 800189e:	ddf6      	ble.n	800188e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80018a0:	f7ff ff57 	bl	8001752 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80018b8:	2395      	movs	r3, #149	; 0x95
 80018ba:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80018bc:	463b      	mov	r3, r7
 80018be:	2106      	movs	r1, #6
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff7b 	bl	80017bc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80018c6:	e002      	b.n	80018ce <SD_PowerOn+0x56>
	{
		cnt--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80018ce:	f7ff ff8f 	bl	80017f0 <SPI_RxByte>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d002      	beq.n	80018de <SD_PowerOn+0x66>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f4      	bne.n	80018c8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80018de:	f7ff ff45 	bl	800176c <DESELECT>
	SPI_TxByte(0XFF);
 80018e2:	20ff      	movs	r0, #255	; 0xff
 80018e4:	f7ff ff50 	bl	8001788 <SPI_TxByte>

	PowerFlag = 1;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <SD_PowerOn+0x80>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000215 	.word	0x20000215

080018fc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <SD_PowerOff+0x14>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000215 	.word	0x20000215

08001914 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <SD_CheckPower+0x14>)
 800191a:	781b      	ldrb	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000215 	.word	0x20000215

0800192c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <SD_RxDataBlock+0x58>)
 8001938:	22c8      	movs	r2, #200	; 0xc8
 800193a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800193c:	f7ff ff58 	bl	80017f0 <SPI_RxByte>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d103      	bne.n	8001952 <SD_RxDataBlock+0x26>
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <SD_RxDataBlock+0x58>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f4      	bne.n	800193c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2bfe      	cmp	r3, #254	; 0xfe
 8001956:	d001      	beq.n	800195c <SD_RxDataBlock+0x30>
 8001958:	2300      	movs	r3, #0
 800195a:	e00f      	b.n	800197c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff60 	bl	8001828 <SPI_RxBytePtr>
	} while(len--);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	603a      	str	r2, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f4      	bne.n	800195c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001972:	f7ff ff3d 	bl	80017f0 <SPI_RxByte>
	SPI_RxByte();
 8001976:	f7ff ff3b 	bl	80017f0 <SPI_RxByte>

	return TRUE;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000210 	.word	0x20000210

08001988 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001998:	f7ff ff54 	bl	8001844 <SD_ReadyWait>
 800199c:	4603      	mov	r3, r0
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d001      	beq.n	80019a6 <SD_TxDataBlock+0x1e>
 80019a2:	2300      	movs	r3, #0
 80019a4:	e02f      	b.n	8001a06 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff feed 	bl	8001788 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	2bfd      	cmp	r3, #253	; 0xfd
 80019b2:	d020      	beq.n	80019f6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80019b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff feff 	bl	80017bc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80019be:	f7ff ff17 	bl	80017f0 <SPI_RxByte>
		SPI_RxByte();
 80019c2:	f7ff ff15 	bl	80017f0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80019c6:	e00b      	b.n	80019e0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80019c8:	f7ff ff12 	bl	80017f0 <SPI_RxByte>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d006      	beq.n	80019e8 <SD_TxDataBlock+0x60>
			i++;
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	3301      	adds	r3, #1
 80019de:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	2b40      	cmp	r3, #64	; 0x40
 80019e4:	d9f0      	bls.n	80019c8 <SD_TxDataBlock+0x40>
 80019e6:	e000      	b.n	80019ea <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80019e8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80019ea:	bf00      	nop
 80019ec:	f7ff ff00 	bl	80017f0 <SPI_RxByte>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0fa      	beq.n	80019ec <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d101      	bne.n	8001a04 <SD_TxDataBlock+0x7c>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	6039      	str	r1, [r7, #0]
 8001a18:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001a1a:	f7ff ff13 	bl	8001844 <SD_ReadyWait>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d001      	beq.n	8001a28 <SD_SendCmd+0x1a>
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	e042      	b.n	8001aae <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff feac 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	0e1b      	lsrs	r3, r3, #24
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fea6 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fea0 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fe9a 	bl	8001788 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fe95 	bl	8001788 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d102      	bne.n	8001a6a <SD_SendCmd+0x5c>
 8001a64:	2395      	movs	r3, #149	; 0x95
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e007      	b.n	8001a7a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b48      	cmp	r3, #72	; 0x48
 8001a6e:	d102      	bne.n	8001a76 <SD_SendCmd+0x68>
 8001a70:	2387      	movs	r3, #135	; 0x87
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <SD_SendCmd+0x6c>
	else crc = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe83 	bl	8001788 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b4c      	cmp	r3, #76	; 0x4c
 8001a86:	d101      	bne.n	8001a8c <SD_SendCmd+0x7e>
 8001a88:	f7ff feb2 	bl	80017f0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001a90:	f7ff feae 	bl	80017f0 <SPI_RxByte>
 8001a94:	4603      	mov	r3, r0
 8001a96:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001a98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da05      	bge.n	8001aac <SD_SendCmd+0x9e>
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	73bb      	strb	r3, [r7, #14]
 8001aa6:	7bbb      	ldrb	r3, [r7, #14]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f1      	bne.n	8001a90 <SD_SendCmd+0x82>

	return res;
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SD_disk_initialize+0x14>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0d1      	b.n	8001c70 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <SD_disk_initialize+0x2a>
 8001ada:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	e0c6      	b.n	8001c70 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001ae2:	f7ff fec9 	bl	8001878 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001ae6:	f7ff fe34 	bl	8001752 <SELECT>

	/* check disk type */
	type = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001aee:	2100      	movs	r1, #0
 8001af0:	2040      	movs	r0, #64	; 0x40
 8001af2:	f7ff ff8c 	bl	8001a0e <SD_SendCmd>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 80a1 	bne.w	8001c40 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b04:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b0a:	2048      	movs	r0, #72	; 0x48
 8001b0c:	f7ff ff7f 	bl	8001a0e <SD_SendCmd>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d155      	bne.n	8001bc2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e00c      	b.n	8001b36 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001b1c:	7bfc      	ldrb	r4, [r7, #15]
 8001b1e:	f7ff fe67 	bl	80017f0 <SPI_RxByte>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	f104 0310 	add.w	r3, r4, #16
 8001b2a:	443b      	add	r3, r7
 8001b2c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d9ef      	bls.n	8001b1c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b3c:	7abb      	ldrb	r3, [r7, #10]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d17e      	bne.n	8001c40 <SD_disk_initialize+0x188>
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	2baa      	cmp	r3, #170	; 0xaa
 8001b46:	d17b      	bne.n	8001c40 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2077      	movs	r0, #119	; 0x77
 8001b4c:	f7ff ff5f 	bl	8001a0e <SD_SendCmd>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d807      	bhi.n	8001b66 <SD_disk_initialize+0xae>
 8001b56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b5a:	2069      	movs	r0, #105	; 0x69
 8001b5c:	f7ff ff57 	bl	8001a0e <SD_SendCmd>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ec      	bne.n	8001b48 <SD_disk_initialize+0x90>
 8001b6e:	e000      	b.n	8001b72 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b70:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d062      	beq.n	8001c40 <SD_disk_initialize+0x188>
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	207a      	movs	r0, #122	; 0x7a
 8001b7e:	f7ff ff46 	bl	8001a0e <SD_SendCmd>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d15b      	bne.n	8001c40 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e00c      	b.n	8001ba8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001b8e:	7bfc      	ldrb	r4, [r7, #15]
 8001b90:	f7ff fe2e 	bl	80017f0 <SPI_RxByte>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	f104 0310 	add.w	r3, r4, #16
 8001b9c:	443b      	add	r3, r7
 8001b9e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d9ef      	bls.n	8001b8e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001bae:	7a3b      	ldrb	r3, [r7, #8]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SD_disk_initialize+0x104>
 8001bb8:	230c      	movs	r3, #12
 8001bba:	e000      	b.n	8001bbe <SD_disk_initialize+0x106>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	73bb      	strb	r3, [r7, #14]
 8001bc0:	e03e      	b.n	8001c40 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2077      	movs	r0, #119	; 0x77
 8001bc6:	f7ff ff22 	bl	8001a0e <SD_SendCmd>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d808      	bhi.n	8001be2 <SD_disk_initialize+0x12a>
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2069      	movs	r0, #105	; 0x69
 8001bd4:	f7ff ff1b 	bl	8001a0e <SD_SendCmd>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d801      	bhi.n	8001be2 <SD_disk_initialize+0x12a>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e000      	b.n	8001be4 <SD_disk_initialize+0x12c>
 8001be2:	2301      	movs	r3, #1
 8001be4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d10e      	bne.n	8001c0a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001bec:	2100      	movs	r1, #0
 8001bee:	2077      	movs	r0, #119	; 0x77
 8001bf0:	f7ff ff0d 	bl	8001a0e <SD_SendCmd>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d80e      	bhi.n	8001c18 <SD_disk_initialize+0x160>
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2069      	movs	r0, #105	; 0x69
 8001bfe:	f7ff ff06 	bl	8001a0e <SD_SendCmd>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <SD_disk_initialize+0x160>
 8001c08:	e00c      	b.n	8001c24 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2041      	movs	r0, #65	; 0x41
 8001c0e:	f7ff fefe 	bl	8001a0e <SD_SendCmd>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e2      	bne.n	8001be6 <SD_disk_initialize+0x12e>
 8001c20:	e000      	b.n	8001c24 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c22:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <SD_disk_initialize+0x1c4>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <SD_disk_initialize+0x184>
 8001c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c30:	2050      	movs	r0, #80	; 0x50
 8001c32:	f7ff feec 	bl	8001a0e <SD_SendCmd>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SD_disk_initialize+0x188>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <SD_disk_initialize+0x1c8>)
 8001c42:	7bbb      	ldrb	r3, [r7, #14]
 8001c44:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001c46:	f7ff fd91 	bl	800176c <DESELECT>
	SPI_RxByte();
 8001c4a:	f7ff fdd1 	bl	80017f0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001c4e:	7bbb      	ldrb	r3, [r7, #14]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e001      	b.n	8001c6a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c66:	f7ff fe49 	bl	80018fc <SD_PowerOff>
	}

	return Stat;
 8001c6a:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <SD_disk_initialize+0x1c0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000210 	.word	0x20000210
 8001c80:	20000214 	.word	0x20000214

08001c84 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SD_disk_status+0x14>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e002      	b.n	8001c9e <SD_disk_status+0x1a>
	return Stat;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SD_disk_status+0x28>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000

08001cb0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <SD_disk_read+0x1c>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <SD_disk_read+0x20>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e051      	b.n	8001d74 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <SD_disk_read+0xcc>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SD_disk_read+0x32>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e048      	b.n	8001d74 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <SD_disk_read+0xd0>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <SD_disk_read+0x44>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	607b      	str	r3, [r7, #4]

	SELECT();
 8001cf4:	f7ff fd2d 	bl	8001752 <SELECT>

	if (count == 1)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d111      	bne.n	8001d22 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	2051      	movs	r0, #81	; 0x51
 8001d02:	f7ff fe84 	bl	8001a0e <SD_SendCmd>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d129      	bne.n	8001d60 <SD_disk_read+0xb0>
 8001d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d10:	68b8      	ldr	r0, [r7, #8]
 8001d12:	f7ff fe0b 	bl	800192c <SD_RxDataBlock>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d021      	beq.n	8001d60 <SD_disk_read+0xb0>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	e01e      	b.n	8001d60 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	2052      	movs	r0, #82	; 0x52
 8001d26:	f7ff fe72 	bl	8001a0e <SD_SendCmd>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d117      	bne.n	8001d60 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f7ff fdf9 	bl	800192c <SD_RxDataBlock>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00a      	beq.n	8001d56 <SD_disk_read+0xa6>
				buff += 512;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d46:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ed      	bne.n	8001d30 <SD_disk_read+0x80>
 8001d54:	e000      	b.n	8001d58 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d56:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001d58:	2100      	movs	r1, #0
 8001d5a:	204c      	movs	r0, #76	; 0x4c
 8001d5c:	f7ff fe57 	bl	8001a0e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001d60:	f7ff fd04 	bl	800176c <DESELECT>
	SPI_RxByte();
 8001d64:	f7ff fd44 	bl	80017f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000214 	.word	0x20000214

08001d84 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <SD_disk_write+0x1c>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <SD_disk_write+0x20>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e06b      	b.n	8001e7c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001da4:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <SD_disk_write+0x100>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <SD_disk_write+0x32>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e062      	b.n	8001e7c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <SD_disk_write+0x100>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SD_disk_write+0x44>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e059      	b.n	8001e7c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <SD_disk_write+0x104>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <SD_disk_write+0x56>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	025b      	lsls	r3, r3, #9
 8001dd8:	607b      	str	r3, [r7, #4]

	SELECT();
 8001dda:	f7ff fcba 	bl	8001752 <SELECT>

	if (count == 1)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d110      	bne.n	8001e06 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	2058      	movs	r0, #88	; 0x58
 8001de8:	f7ff fe11 	bl	8001a0e <SD_SendCmd>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d13a      	bne.n	8001e68 <SD_disk_write+0xe4>
 8001df2:	21fe      	movs	r1, #254	; 0xfe
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f7ff fdc7 	bl	8001988 <SD_TxDataBlock>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d033      	beq.n	8001e68 <SD_disk_write+0xe4>
			count = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	e030      	b.n	8001e68 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <SD_disk_write+0x104>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001e12:	2100      	movs	r1, #0
 8001e14:	2077      	movs	r0, #119	; 0x77
 8001e16:	f7ff fdfa 	bl	8001a0e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	2057      	movs	r0, #87	; 0x57
 8001e1e:	f7ff fdf6 	bl	8001a0e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	2059      	movs	r0, #89	; 0x59
 8001e26:	f7ff fdf2 	bl	8001a0e <SD_SendCmd>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11b      	bne.n	8001e68 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e30:	21fc      	movs	r1, #252	; 0xfc
 8001e32:	68b8      	ldr	r0, [r7, #8]
 8001e34:	f7ff fda8 	bl	8001988 <SD_TxDataBlock>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <SD_disk_write+0xd0>
				buff += 512;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e44:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ee      	bne.n	8001e30 <SD_disk_write+0xac>
 8001e52:	e000      	b.n	8001e56 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e54:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001e56:	21fd      	movs	r1, #253	; 0xfd
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fd95 	bl	8001988 <SD_TxDataBlock>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001e68:	f7ff fc80 	bl	800176c <DESELECT>
	SPI_RxByte();
 8001e6c:	f7ff fcc0 	bl	80017f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000214 	.word	0x20000214

08001e8c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	603a      	str	r2, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <SD_disk_ioctl+0x1e>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e115      	b.n	80020d6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d124      	bne.n	8001f00 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d012      	beq.n	8001ee4 <SD_disk_ioctl+0x58>
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	dc1a      	bgt.n	8001ef8 <SD_disk_ioctl+0x6c>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <SD_disk_ioctl+0x40>
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d006      	beq.n	8001ed8 <SD_disk_ioctl+0x4c>
 8001eca:	e015      	b.n	8001ef8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001ecc:	f7ff fd16 	bl	80018fc <SD_PowerOff>
			res = RES_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ed6:	e0fc      	b.n	80020d2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001ed8:	f7ff fcce 	bl	8001878 <SD_PowerOn>
			res = RES_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ee2:	e0f6      	b.n	80020d2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	1c5c      	adds	r4, r3, #1
 8001ee8:	f7ff fd14 	bl	8001914 <SD_CheckPower>
 8001eec:	4603      	mov	r3, r0
 8001eee:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ef6:	e0ec      	b.n	80020d2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001efe:	e0e8      	b.n	80020d2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f00:	4b77      	ldr	r3, [pc, #476]	; (80020e0 <SD_disk_ioctl+0x254>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SD_disk_ioctl+0x86>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0e1      	b.n	80020d6 <SD_disk_ioctl+0x24a>

		SELECT();
 8001f12:	f7ff fc1e 	bl	8001752 <SELECT>

		switch (ctrl)
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	2b0d      	cmp	r3, #13
 8001f1a:	f200 80cb 	bhi.w	80020b4 <SD_disk_ioctl+0x228>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <SD_disk_ioctl+0x98>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	0800201f 	.word	0x0800201f
 8001f28:	08001f5d 	.word	0x08001f5d
 8001f2c:	0800200f 	.word	0x0800200f
 8001f30:	080020b5 	.word	0x080020b5
 8001f34:	080020b5 	.word	0x080020b5
 8001f38:	080020b5 	.word	0x080020b5
 8001f3c:	080020b5 	.word	0x080020b5
 8001f40:	080020b5 	.word	0x080020b5
 8001f44:	080020b5 	.word	0x080020b5
 8001f48:	080020b5 	.word	0x080020b5
 8001f4c:	080020b5 	.word	0x080020b5
 8001f50:	08002031 	.word	0x08002031
 8001f54:	08002055 	.word	0x08002055
 8001f58:	08002079 	.word	0x08002079
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2049      	movs	r0, #73	; 0x49
 8001f60:	f7ff fd55 	bl	8001a0e <SD_SendCmd>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80a8 	bne.w	80020bc <SD_disk_ioctl+0x230>
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2110      	movs	r1, #16
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fcda 	bl	800192c <SD_RxDataBlock>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 809e 	beq.w	80020bc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d10e      	bne.n	8001fa8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f8a:	7d7b      	ldrb	r3, [r7, #21]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	7d3b      	ldrb	r3, [r7, #20]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001f9e:	8bfb      	ldrh	r3, [r7, #30]
 8001fa0:	029a      	lsls	r2, r3, #10
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e02e      	b.n	8002006 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fa8:	7c7b      	ldrb	r3, [r7, #17]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	09db      	lsrs	r3, r3, #7
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	7d7b      	ldrb	r3, [r7, #21]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f003 0306 	and.w	r3, r3, #6
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	3302      	adds	r3, #2
 8001fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001fd0:	7d3b      	ldrb	r3, [r7, #20]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	7cbb      	ldrb	r3, [r7, #18]
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ff8:	8bfa      	ldrh	r2, [r7, #30]
 8001ffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ffe:	3b09      	subs	r3, #9
 8002000:	409a      	lsls	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800200c:	e056      	b.n	80020bc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002014:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800201c:	e055      	b.n	80020ca <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800201e:	f7ff fc11 	bl	8001844 <SD_ReadyWait>
 8002022:	4603      	mov	r3, r0
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d14b      	bne.n	80020c0 <SD_disk_ioctl+0x234>
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800202e:	e047      	b.n	80020c0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002030:	2100      	movs	r1, #0
 8002032:	2049      	movs	r0, #73	; 0x49
 8002034:	f7ff fceb 	bl	8001a0e <SD_SendCmd>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d142      	bne.n	80020c4 <SD_disk_ioctl+0x238>
 800203e:	2110      	movs	r1, #16
 8002040:	6a38      	ldr	r0, [r7, #32]
 8002042:	f7ff fc73 	bl	800192c <SD_RxDataBlock>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d03b      	beq.n	80020c4 <SD_disk_ioctl+0x238>
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002052:	e037      	b.n	80020c4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002054:	2100      	movs	r1, #0
 8002056:	204a      	movs	r0, #74	; 0x4a
 8002058:	f7ff fcd9 	bl	8001a0e <SD_SendCmd>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d132      	bne.n	80020c8 <SD_disk_ioctl+0x23c>
 8002062:	2110      	movs	r1, #16
 8002064:	6a38      	ldr	r0, [r7, #32]
 8002066:	f7ff fc61 	bl	800192c <SD_RxDataBlock>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02b      	beq.n	80020c8 <SD_disk_ioctl+0x23c>
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002076:	e027      	b.n	80020c8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002078:	2100      	movs	r1, #0
 800207a:	207a      	movs	r0, #122	; 0x7a
 800207c:	f7ff fcc7 	bl	8001a0e <SD_SendCmd>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800208c:	e00b      	b.n	80020a6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800208e:	6a3c      	ldr	r4, [r7, #32]
 8002090:	1c63      	adds	r3, r4, #1
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	f7ff fbac 	bl	80017f0 <SPI_RxByte>
 8002098:	4603      	mov	r3, r0
 800209a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800209c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020a0:	3301      	adds	r3, #1
 80020a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d9ef      	bls.n	800208e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80020b4:	2304      	movs	r3, #4
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020ba:	e006      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020bc:	bf00      	nop
 80020be:	e004      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020c0:	bf00      	nop
 80020c2:	e002      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <SD_disk_ioctl+0x23e>
			break;
 80020c8:	bf00      	nop
		}

		DESELECT();
 80020ca:	f7ff fb4f 	bl	800176c <DESELECT>
		SPI_RxByte();
 80020ce:	f7ff fb8f 	bl	80017f0 <SPI_RxByte>
	}

	return res;
 80020d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	372c      	adds	r7, #44	; 0x2c
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* Registers for interfacing with the sensor */

void send_uart(char *string) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe f86f 	bl	80001d0 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000); // Transmit in blocking mode
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <send_uart+0x2c>)
 8002102:	f004 fc13 	bl	800692c <HAL_UART_Transmit>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000031c 	.word	0x2000031c

08002114 <bufClear>:
		i++;
	return i;
}

/* To clear the buffer */
void bufClear(void) {
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0

	for (int i = 0; i < 1024; i++) {
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	e007      	b.n	8002130 <bufClear+0x1c>
		buffer[i] = 0;
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <bufClear+0x34>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3301      	adds	r3, #1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	dbf3      	blt.n	8002120 <bufClear+0xc>
	}
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20002460 	.word	0x20002460

0800214c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800214c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002150:	b0f0      	sub	sp, #448	; 0x1c0
 8002152:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002154:	f000 ff8d 	bl	8003072 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002158:	f000 f9a2 	bl	80024a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800215c:	f000 fad8 	bl	8002710 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002160:	f000 faa6 	bl	80026b0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002164:	f000 f9fe 	bl	8002564 <MX_I2C1_Init>
	MX_TIM16_Init();
 8002168:	f000 fa7a 	bl	8002660 <MX_TIM16_Init>
	MX_SPI1_Init();
 800216c:	f000 fa3a 	bl	80025e4 <MX_SPI1_Init>
	MX_FATFS_Init();
 8002170:	f005 f84c 	bl	800720c <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	dfr_initialise(&dfr_s, &hi2c1);
 8002174:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002178:	49ae      	ldr	r1, [pc, #696]	; (8002434 <main+0x2e8>)
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff06 	bl	8000f8c <dfr_initialise>
	pm_initialise(&pm_s, &hi2c1);
 8002180:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002184:	49ab      	ldr	r1, [pc, #684]	; (8002434 <main+0x2e8>)
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fb49 	bl	800281e <pm_initialise>
	sht40_initialise(&sht40_s, &hi2c1);
 800218c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002190:	49a8      	ldr	r1, [pc, #672]	; (8002434 <main+0x2e8>)
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fc12 	bl	80029bc <sht40_initialise>
	ds3231_initialise(&ds3231_s, &hi2c1);
 8002198:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800219c:	49a5      	ldr	r1, [pc, #660]	; (8002434 <main+0x2e8>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fa8d 	bl	80016be <ds3231_initialise>
	char strDate[10];
	char strPm[20];

	char str[255];

	status = dfrWakeUp(&dfr_s);
 80021a4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f995 	bl	80014d8 <dfrWakeUp>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	if (status != HAL_OK) {
 80021b4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <main+0x78>
		send_uart("Error\n\r");
 80021bc:	489e      	ldr	r0, [pc, #632]	; (8002438 <main+0x2ec>)
 80021be:	f7ff ff91 	bl	80020e4 <send_uart>
 80021c2:	e002      	b.n	80021ca <main+0x7e>
	} else {
		send_uart("Device is woken up\r\n");
 80021c4:	489d      	ldr	r0, [pc, #628]	; (800243c <main+0x2f0>)
 80021c6:	f7ff ff8d 	bl	80020e4 <send_uart>
	}
	// Start Timer
	HAL_TIM_Base_Start_IT(&htim16);
 80021ca:	489d      	ldr	r0, [pc, #628]	; (8002440 <main+0x2f4>)
 80021cc:	f004 f914 	bl	80063f8 <HAL_TIM_Base_Start_IT>
	while (warmUpTimer <= 180)
 80021d0:	bf00      	nop
 80021d2:	4b9c      	ldr	r3, [pc, #624]	; (8002444 <main+0x2f8>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2bb4      	cmp	r3, #180	; 0xb4
 80021d8:	d9fb      	bls.n	80021d2 <main+0x86>
		;
	HAL_TIM_Base_Stop_IT(&htim16);
 80021da:	4899      	ldr	r0, [pc, #612]	; (8002440 <main+0x2f4>)
 80021dc:	f004 f960 	bl	80064a0 <HAL_TIM_Base_Stop_IT>

	status = dfrWarmUpData(&dfr_s);
 80021e0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f9bb 	bl	8001560 <dfrWarmUpData>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	if (status != HAL_OK) {
 80021f0:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <main+0xb4>
		send_uart("Error\n\r");
 80021f8:	488f      	ldr	r0, [pc, #572]	; (8002438 <main+0x2ec>)
 80021fa:	f7ff ff73 	bl	80020e4 <send_uart>
 80021fe:	e002      	b.n	8002206 <main+0xba>
	} else {
		send_uart("Initial values calculated\r\n");
 8002200:	4891      	ldr	r0, [pc, #580]	; (8002448 <main+0x2fc>)
 8002202:	f7ff ff6f 	bl	80020e4 <send_uart>
	}
	/* Mount SD Card */

	fresult = f_mount(&fs, "/", 1);
 8002206:	2201      	movs	r2, #1
 8002208:	4990      	ldr	r1, [pc, #576]	; (800244c <main+0x300>)
 800220a:	4891      	ldr	r0, [pc, #580]	; (8002450 <main+0x304>)
 800220c:	f007 fa4e 	bl	80096ac <f_mount>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b8f      	ldr	r3, [pc, #572]	; (8002454 <main+0x308>)
 8002216:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8002218:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <main+0x308>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <main+0xdc>
		send_uart("SD card mounted successfully ...\n\r");
 8002220:	488d      	ldr	r0, [pc, #564]	; (8002458 <main+0x30c>)
 8002222:	f7ff ff5f 	bl	80020e4 <send_uart>
 8002226:	e002      	b.n	800222e <main+0xe2>
	} else {
		send_uart("error in mounting sd card ... \n\r");
 8002228:	488c      	ldr	r0, [pc, #560]	; (800245c <main+0x310>)
 800222a:	f7ff ff5b 	bl	80020e4 <send_uart>
	}

	/***** Card Capacity Details ********/

	/* Check free space */
	f_getfree("", &free_space, &pfs);
 800222e:	4a8c      	ldr	r2, [pc, #560]	; (8002460 <main+0x314>)
 8002230:	498c      	ldr	r1, [pc, #560]	; (8002464 <main+0x318>)
 8002232:	488d      	ldr	r0, [pc, #564]	; (8002468 <main+0x31c>)
 8002234:	f008 f8ac 	bl	800a390 <f_getfree>

	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002238:	4b89      	ldr	r3, [pc, #548]	; (8002460 <main+0x314>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	3b02      	subs	r3, #2
 8002240:	4a87      	ldr	r2, [pc, #540]	; (8002460 <main+0x314>)
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	8952      	ldrh	r2, [r2, #10]
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f95a 	bl	8000504 <__aeabi_ui2d>
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b85      	ldr	r3, [pc, #532]	; (800246c <main+0x320>)
 8002256:	f7fe f9cf 	bl	80005f8 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7fe fca1 	bl	8000ba8 <__aeabi_d2uiz>
 8002266:	4603      	mov	r3, r0
 8002268:	4a81      	ldr	r2, [pc, #516]	; (8002470 <main+0x324>)
 800226a:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD Card Total Size: \t%lu\n\r", total);
 800226c:	4b80      	ldr	r3, [pc, #512]	; (8002470 <main+0x324>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4980      	ldr	r1, [pc, #512]	; (8002474 <main+0x328>)
 8002274:	4880      	ldr	r0, [pc, #512]	; (8002478 <main+0x32c>)
 8002276:	f008 ff99 	bl	800b1ac <siprintf>
	send_uart(buffer);
 800227a:	487f      	ldr	r0, [pc, #508]	; (8002478 <main+0x32c>)
 800227c:	f7ff ff32 	bl	80020e4 <send_uart>
	bufClear();
 8002280:	f7ff ff48 	bl	8002114 <bufClear>
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8002284:	4b76      	ldr	r3, [pc, #472]	; (8002460 <main+0x314>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	895b      	ldrh	r3, [r3, #10]
 800228a:	461a      	mov	r2, r3
 800228c:	4b7b      	ldr	r3, [pc, #492]	; (800247c <main+0x330>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f935 	bl	8000504 <__aeabi_ui2d>
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	4b73      	ldr	r3, [pc, #460]	; (800246c <main+0x320>)
 80022a0:	f7fe f9aa 	bl	80005f8 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fc7c 	bl	8000ba8 <__aeabi_d2uiz>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a6c      	ldr	r2, [pc, #432]	; (8002464 <main+0x318>)
 80022b4:	6013      	str	r3, [r2, #0]
	send_uart(buffer);
 80022b6:	4870      	ldr	r0, [pc, #448]	; (8002478 <main+0x32c>)
 80022b8:	f7ff ff14 	bl	80020e4 <send_uart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		status = getTime(&ds3231_s);
 80022bc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fa0b 	bl	80016dc <getTime>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if (status == HAL_ERROR) {
 80022cc:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d103      	bne.n	80022dc <main+0x190>
			send_uart("ERROR\n\r");
 80022d4:	486a      	ldr	r0, [pc, #424]	; (8002480 <main+0x334>)
 80022d6:	f7ff ff05 	bl	80020e4 <send_uart>
 80022da:	e00e      	b.n	80022fa <main+0x1ae>
		} else {
			sprintf(strDate, "%02d:%02d:%02d", ds3231_s.hour, ds3231_s.minute,
 80022dc:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 80022e0:	461a      	mov	r2, r3
 80022e2:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 80022e6:	4619      	mov	r1, r3
					ds3231_s.second);
 80022e8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
			sprintf(strDate, "%02d:%02d:%02d", ds3231_s.hour, ds3231_s.minute,
 80022ec:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	460b      	mov	r3, r1
 80022f4:	4963      	ldr	r1, [pc, #396]	; (8002484 <main+0x338>)
 80022f6:	f008 ff59 	bl	800b1ac <siprintf>
		}
		status = sht40_read(&sht40_s);
 80022fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fb7a 	bl	80029f8 <sht40_read>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if (status == HAL_TIMEOUT) {
 800230a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800230e:	2b03      	cmp	r3, #3
 8002310:	d103      	bne.n	800231a <main+0x1ce>
			send_uart("Timeout\n\r");
 8002312:	485d      	ldr	r0, [pc, #372]	; (8002488 <main+0x33c>)
 8002314:	f7ff fee6 	bl	80020e4 <send_uart>
 8002318:	e006      	b.n	8002328 <main+0x1dc>
		} else if (status == HAL_ERROR) {
 800231a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <main+0x1dc>
			send_uart("Error\n\r");
 8002322:	4845      	ldr	r0, [pc, #276]	; (8002438 <main+0x2ec>)
 8002324:	f7ff fede 	bl	80020e4 <send_uart>
		}

		status = pm_read(&pm_s);
 8002328:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800232c:	4618      	mov	r0, r3
 800232e:	f000 faa6 	bl	800287e <pm_read>
 8002332:	4603      	mov	r3, r0
 8002334:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if (status == HAL_ERROR) {
 8002338:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800233c:	2b01      	cmp	r3, #1
 800233e:	d103      	bne.n	8002348 <main+0x1fc>
			send_uart("Error\n\r");
 8002340:	483d      	ldr	r0, [pc, #244]	; (8002438 <main+0x2ec>)
 8002342:	f7ff fecf 	bl	80020e4 <send_uart>
 8002346:	e00e      	b.n	8002366 <main+0x21a>
		} else {
			sprintf(strPm, "%d,%d,%d", pm_s.pm10_env, pm_s.pm25_env, pm_s.pm100_env);
 8002348:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 800234c:	461a      	mov	r2, r3
 800234e:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002352:	4619      	mov	r1, r3
 8002354:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8002358:	f507 7082 	add.w	r0, r7, #260	; 0x104
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	460b      	mov	r3, r1
 8002360:	494a      	ldr	r1, [pc, #296]	; (800248c <main+0x340>)
 8002362:	f008 ff23 	bl	800b1ac <siprintf>
		}

		status = getGasData(&dfr_s);
 8002366:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fe3c 	bl	8000fe8 <getGasData>
 8002370:	4603      	mov	r3, r0
 8002372:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if (status == HAL_TIMEOUT) {
 8002376:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800237a:	2b03      	cmp	r3, #3
 800237c:	d103      	bne.n	8002386 <main+0x23a>
			send_uart("Timeout\n\r");
 800237e:	4842      	ldr	r0, [pc, #264]	; (8002488 <main+0x33c>)
 8002380:	f7ff feb0 	bl	80020e4 <send_uart>
 8002384:	e006      	b.n	8002394 <main+0x248>
		} else if (status == HAL_ERROR) {
 8002386:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800238a:	2b01      	cmp	r3, #1
 800238c:	d102      	bne.n	8002394 <main+0x248>
			send_uart("Error\n\r");
 800238e:	482a      	ldr	r0, [pc, #168]	; (8002438 <main+0x2ec>)
 8002390:	f7ff fea8 	bl	80020e4 <send_uart>
		}
		sprintf(str, "%s,%.1lf,%.1lf,%s,%.1f,%.3f\r\n", strDate, sht40_s.temperature,
 8002394:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8002398:	e9d7 8950 	ldrd	r8, r9, [r7, #320]	; 0x140
				sht40_s.humidity, strPm, dfr_s.co, dfr_s.no2
 800239c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
		sprintf(str, "%s,%.1lf,%.1lf,%s,%.1f,%.3f\r\n", strDate, sht40_s.temperature,
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	4682      	mov	sl, r0
 80023a8:	468b      	mov	fp, r1
				sht40_s.humidity, strPm, dfr_s.co, dfr_s.no2
 80023aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
		sprintf(str, "%s,%.1lf,%.1lf,%s,%.1f,%.3f\r\n", strDate, sht40_s.temperature,
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8ca 	bl	8000548 <__aeabi_f2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80023bc:	1d38      	adds	r0, r7, #4
 80023be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80023c2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80023c6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023ca:	9304      	str	r3, [sp, #16]
 80023cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023d0:	e9cd 4500 	strd	r4, r5, [sp]
 80023d4:	460a      	mov	r2, r1
 80023d6:	492e      	ldr	r1, [pc, #184]	; (8002490 <main+0x344>)
 80023d8:	f008 fee8 	bl	800b1ac <siprintf>
				);
		send_uart(str);
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fe80 	bl	80020e4 <send_uart>

		/* Open a file to write */
		fresult = f_open(&fil, "sensor.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80023e4:	2212      	movs	r2, #18
 80023e6:	492b      	ldr	r1, [pc, #172]	; (8002494 <main+0x348>)
 80023e8:	482b      	ldr	r0, [pc, #172]	; (8002498 <main+0x34c>)
 80023ea:	f007 f9a5 	bl	8009738 <f_open>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <main+0x308>)
 80023f4:	701a      	strb	r2, [r3, #0]

		fresult = f_lseek(&fil, f_size(&fil));
 80023f6:	4b28      	ldr	r3, [pc, #160]	; (8002498 <main+0x34c>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4826      	ldr	r0, [pc, #152]	; (8002498 <main+0x34c>)
 80023fe:	f007 fda3 	bl	8009f48 <f_lseek>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <main+0x308>)
 8002408:	701a      	strb	r2, [r3, #0]

		/* Writing text */
		fresult = f_puts(str, &fil);
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	4922      	ldr	r1, [pc, #136]	; (8002498 <main+0x34c>)
 800240e:	4618      	mov	r0, r3
 8002410:	f008 f8ea 	bl	800a5e8 <f_puts>
 8002414:	4603      	mov	r3, r0
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <main+0x308>)
 800241a:	701a      	strb	r2, [r3, #0]

		/* Close file */
		f_close(&fil);
 800241c:	481e      	ldr	r0, [pc, #120]	; (8002498 <main+0x34c>)
 800241e:	f007 fd69 	bl	8009ef4 <f_close>

		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8002422:	2108      	movs	r1, #8
 8002424:	481d      	ldr	r0, [pc, #116]	; (800249c <main+0x350>)
 8002426:	f001 f951 	bl	80036cc <HAL_GPIO_TogglePin>

		HAL_Delay(100);
 800242a:	2064      	movs	r0, #100	; 0x64
 800242c:	f000 fe96 	bl	800315c <HAL_Delay>
		status = getTime(&ds3231_s);
 8002430:	e744      	b.n	80022bc <main+0x170>
 8002432:	bf00      	nop
 8002434:	20000218 	.word	0x20000218
 8002438:	0800d6b8 	.word	0x0800d6b8
 800243c:	0800d6c0 	.word	0x0800d6c0
 8002440:	200002d0 	.word	0x200002d0
 8002444:	200003a0 	.word	0x200003a0
 8002448:	0800d6d8 	.word	0x0800d6d8
 800244c:	0800d6f4 	.word	0x0800d6f4
 8002450:	200003f4 	.word	0x200003f4
 8002454:	2000245c 	.word	0x2000245c
 8002458:	0800d6f8 	.word	0x0800d6f8
 800245c:	0800d71c 	.word	0x0800d71c
 8002460:	20002860 	.word	0x20002860
 8002464:	2000286c 	.word	0x2000286c
 8002468:	0800d740 	.word	0x0800d740
 800246c:	3fe00000 	.word	0x3fe00000
 8002470:	20002868 	.word	0x20002868
 8002474:	0800d744 	.word	0x0800d744
 8002478:	20002460 	.word	0x20002460
 800247c:	20002864 	.word	0x20002864
 8002480:	0800d760 	.word	0x0800d760
 8002484:	0800d768 	.word	0x0800d768
 8002488:	0800d778 	.word	0x0800d778
 800248c:	0800d784 	.word	0x0800d784
 8002490:	0800d790 	.word	0x0800d790
 8002494:	0800d7b0 	.word	0x0800d7b0
 8002498:	2000142c 	.word	0x2000142c
 800249c:	48000400 	.word	0x48000400

080024a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b096      	sub	sp, #88	; 0x58
 80024a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	2244      	movs	r2, #68	; 0x44
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f008 fa0a 	bl	800a8c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80024b4:	463b      	mov	r3, r7
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80024c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024c6:	f002 f831 	bl	800452c <HAL_PWREx_ControlVoltageScaling>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80024d0:	f000 f9a0 	bl	8002814 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80024d4:	f002 f80c 	bl	80044f0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <SystemClock_Config+0xc0>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	4a20      	ldr	r2, [pc, #128]	; (8002560 <SystemClock_Config+0xc0>)
 80024e0:	f023 0318 	bic.w	r3, r3, #24
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80024e8:	2314      	movs	r3, #20
 80024ea:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024f0:	2301      	movs	r3, #1
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024f8:	2360      	movs	r3, #96	; 0x60
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024fc:	2302      	movs	r3, #2
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002500:	2301      	movs	r3, #1
 8002502:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8002508:	2328      	movs	r3, #40	; 0x28
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800250c:	2307      	movs	r3, #7
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002510:	2302      	movs	r3, #2
 8002512:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002514:	2302      	movs	r3, #2
 8002516:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4618      	mov	r0, r3
 800251e:	f002 f85b 	bl	80045d8 <HAL_RCC_OscConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <SystemClock_Config+0x8c>
		Error_Handler();
 8002528:	f000 f974 	bl	8002814 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800252c:	230f      	movs	r3, #15
 800252e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002530:	2303      	movs	r3, #3
 8002532:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002540:	463b      	mov	r3, r7
 8002542:	2104      	movs	r1, #4
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fc5b 	bl	8004e00 <HAL_RCC_ClockConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <SystemClock_Config+0xb4>
		Error_Handler();
 8002550:	f000 f960 	bl	8002814 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002554:	f003 f86e 	bl	8005634 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002558:	bf00      	nop
 800255a:	3758      	adds	r7, #88	; 0x58
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000

08002564 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <MX_I2C1_Init+0x74>)
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <MX_I2C1_Init+0x78>)
 800256c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002570:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <MX_I2C1_Init+0x7c>)
 8002572:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <MX_I2C1_Init+0x74>)
 800257c:	2201      	movs	r2, #1
 800257e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <MX_I2C1_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <MX_I2C1_Init+0x74>)
 800259a:	2200      	movs	r2, #0
 800259c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800259e:	480e      	ldr	r0, [pc, #56]	; (80025d8 <MX_I2C1_Init+0x74>)
 80025a0:	f001 f8ae 	bl	8003700 <HAL_I2C_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C1_Init+0x4a>
		Error_Handler();
 80025aa:	f000 f933 	bl	8002814 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80025ae:	2100      	movs	r1, #0
 80025b0:	4809      	ldr	r0, [pc, #36]	; (80025d8 <MX_I2C1_Init+0x74>)
 80025b2:	f001 ff05 	bl	80043c0 <HAL_I2CEx_ConfigAnalogFilter>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80025bc:	f000 f92a 	bl	8002814 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80025c0:	2100      	movs	r1, #0
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_I2C1_Init+0x74>)
 80025c4:	f001 ff47 	bl	8004456 <HAL_I2CEx_ConfigDigitalFilter>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80025ce:	f000 f921 	bl	8002814 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000218 	.word	0x20000218
 80025dc:	40005400 	.word	0x40005400
 80025e0:	10909cec 	.word	0x10909cec

080025e4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <MX_SPI1_Init+0x74>)
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <MX_SPI1_Init+0x78>)
 80025ec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <MX_SPI1_Init+0x74>)
 80025f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025f4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <MX_SPI1_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <MX_SPI1_Init+0x74>)
 80025fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002602:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <MX_SPI1_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <MX_SPI1_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <MX_SPI1_Init+0x74>)
 8002612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002616:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <MX_SPI1_Init+0x74>)
 800261a:	2210      	movs	r2, #16
 800261c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_SPI1_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <MX_SPI1_Init+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <MX_SPI1_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <MX_SPI1_Init+0x74>)
 8002632:	2207      	movs	r2, #7
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <MX_SPI1_Init+0x74>)
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <MX_SPI1_Init+0x74>)
 800263e:	2208      	movs	r2, #8
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <MX_SPI1_Init+0x74>)
 8002644:	f003 f8f8 	bl	8005838 <HAL_SPI_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800264e:	f000 f8e1 	bl	8002814 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000026c 	.word	0x2000026c
 800265c:	40013000 	.word	0x40013000

08002660 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_TIM16_Init+0x48>)
 8002666:	4a11      	ldr	r2, [pc, #68]	; (80026ac <MX_TIM16_Init+0x4c>)
 8002668:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_TIM16_Init+0x48>)
 800266c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002670:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <MX_TIM16_Init+0x48>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10000 - 1;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_TIM16_Init+0x48>)
 800267a:	f242 720f 	movw	r2, #9999	; 0x270f
 800267e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_TIM16_Init+0x48>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_TIM16_Init+0x48>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MX_TIM16_Init+0x48>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_TIM16_Init+0x48>)
 8002694:	f003 fe58 	bl	8006348 <HAL_TIM_Base_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM16_Init+0x42>
		Error_Handler();
 800269e:	f000 f8b9 	bl	8002814 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200002d0 	.word	0x200002d0
 80026ac:	40014400 	.word	0x40014400

080026b0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026b6:	4a15      	ldr	r2, [pc, #84]	; (800270c <MX_USART2_UART_Init+0x5c>)
 80026b8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80026f2:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_USART2_UART_Init+0x58>)
 80026f4:	f004 f8cc 	bl	8006890 <HAL_UART_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80026fe:	f000 f889 	bl	8002814 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000031c 	.word	0x2000031c
 800270c:	40004400 	.word	0x40004400

08002710 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <MX_GPIO_Init+0xb8>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <MX_GPIO_Init+0xb8>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <MX_GPIO_Init+0xb8>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <MX_GPIO_Init+0xb8>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <MX_GPIO_Init+0xb8>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <MX_GPIO_Init+0xb8>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <MX_GPIO_Init+0xb8>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <MX_GPIO_Init+0xb8>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <MX_GPIO_Init+0xb8>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2108      	movs	r1, #8
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f000 ff91 	bl	800369c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	2108      	movs	r1, #8
 800277e:	4813      	ldr	r0, [pc, #76]	; (80027cc <MX_GPIO_Init+0xbc>)
 8002780:	f000 ff8c 	bl	800369c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8002784:	2308      	movs	r3, #8
 8002786:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002788:	2301      	movs	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279e:	f000 fe13 	bl	80033c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80027a2:	2308      	movs	r3, #8
 80027a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a6:	2301      	movs	r3, #1
 80027a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	4619      	mov	r1, r3
 80027b8:	4804      	ldr	r0, [pc, #16]	; (80027cc <MX_GPIO_Init+0xbc>)
 80027ba:	f000 fe05 	bl	80033c8 <HAL_GPIO_Init>

}
 80027be:	bf00      	nop
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	48000400 	.word	0x48000400

080027d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10d      	bne.n	80027fc <HAL_TIM_PeriodElapsedCallback+0x2c>
		sprintf(str1, "Seconds passed: %d\r\n", warmUpTimer++);
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	b2d1      	uxtb	r1, r2
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80027ea:	7011      	strb	r1, [r2, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4907      	ldr	r1, [pc, #28]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80027f0:	4807      	ldr	r0, [pc, #28]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80027f2:	f008 fcdb 	bl	800b1ac <siprintf>
		send_uart(str1);
 80027f6:	4806      	ldr	r0, [pc, #24]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80027f8:	f7ff fc74 	bl	80020e4 <send_uart>

	}
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200002d0 	.word	0x200002d0
 8002808:	200003a0 	.word	0x200003a0
 800280c:	0800d7bc 	.word	0x0800d7bc
 8002810:	200003a4 	.word	0x200003a4

08002814 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800281c:	e7fe      	b.n	800281c <Error_Handler+0x8>

0800281e <pm_initialise>:
#include "particulate_matter.h"     // Include header file for pm sensor

HAL_StatusTypeDef pm_initialise(pm_data *dev, I2C_HandleTypeDef *i2cHandle) {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->pm10_standard = 0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	809a      	strh	r2, [r3, #4]
	dev->pm25_standard = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	80da      	strh	r2, [r3, #6]
	dev->pm100_standard = 0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	811a      	strh	r2, [r3, #8]

	dev->pm10_env = 0;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	815a      	strh	r2, [r3, #10]
	dev->pm25_env = 0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	819a      	strh	r2, [r3, #12]
	dev->pm100_env = 0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	81da      	strh	r2, [r3, #14]

	dev->particles_03um = 0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	821a      	strh	r2, [r3, #16]
	dev->particles_05um = 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	825a      	strh	r2, [r3, #18]
	dev->particles_10um = 0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	829a      	strh	r2, [r3, #20]
	dev->particles_25um = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	82da      	strh	r2, [r3, #22]
	dev->particles_100um = 0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	835a      	strh	r2, [r3, #26]

	return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <pm_read>:

HAL_StatusTypeDef pm_read(pm_data *dev) {
 800287e:	b580      	push	{r7, lr}
 8002880:	b094      	sub	sp, #80	; 0x50
 8002882:	af02      	add	r7, sp, #8
 8002884:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t pm_buffer[32] = { 0 };
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	615a      	str	r2, [r3, #20]
 800289c:	619a      	str	r2, [r3, #24]

	/* Write address pointer to start of the registers */
	status = HAL_I2C_Master_Transmit(dev->i2cHandle, PM_ADDR, PM_SC1, 1,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2301      	movs	r3, #1
 80028aa:	2200      	movs	r2, #0
 80028ac:	2124      	movs	r1, #36	; 0x24
 80028ae:	f000 ffb7 	bl	8003820 <HAL_I2C_Master_Transmit>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 80028b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <pm_read+0x46>
		return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e077      	b.n	80029b4 <pm_read+0x136>
	} else {
		/* Read particulate matter registers */
		status = HAL_I2C_Master_Receive(dev->i2cHandle, PM_ADDR, pm_buffer, 32,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2320      	movs	r3, #32
 80028d4:	2124      	movs	r1, #36	; 0x24
 80028d6:	f001 f897 	bl	8003a08 <HAL_I2C_Master_Receive>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				HAL_MAX_DELAY);

		/* Check if first element is 0x42 */
		if (status != HAL_OK) {
 80028e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <pm_read+0x6e>
			return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e063      	b.n	80029b4 <pm_read+0x136>
		} else {
			if (pm_buffer[0] != 0x42) {
 80028ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028f0:	2b42      	cmp	r3, #66	; 0x42
 80028f2:	d001      	beq.n	80028f8 <pm_read+0x7a>
				return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e05d      	b.n	80029b4 <pm_read+0x136>
			} else {

				/* Shift data in buffer */
				uint16_t buffer_u16[12];
				for (uint8_t i = 0; i < 12; i++) {
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80028fe:	e030      	b.n	8002962 <pm_read+0xe4>
					buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
 8002900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002904:	3301      	adds	r3, #1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	3301      	adds	r3, #1
 800290a:	3348      	adds	r3, #72	; 0x48
 800290c:	443b      	add	r3, r7
 800290e:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002912:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002916:	b292      	uxth	r2, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	3348      	adds	r3, #72	; 0x48
 800291c:	443b      	add	r3, r7
 800291e:	f823 2c3c 	strh.w	r2, [r3, #-60]
					buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
 8002922:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	3348      	adds	r3, #72	; 0x48
 800292a:	443b      	add	r3, r7
 800292c:	f833 1c3c 	ldrh.w	r1, [r3, #-60]
 8002930:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002934:	3301      	adds	r3, #1
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	3348      	adds	r3, #72	; 0x48
 800293a:	443b      	add	r3, r7
 800293c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002940:	b29b      	uxth	r3, r3
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	b29a      	uxth	r2, r3
 8002946:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800294a:	440a      	add	r2, r1
 800294c:	b292      	uxth	r2, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	3348      	adds	r3, #72	; 0x48
 8002952:	443b      	add	r3, r7
 8002954:	f823 2c3c 	strh.w	r2, [r3, #-60]
				for (uint8_t i = 0; i < 12; i++) {
 8002958:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800295c:	3301      	adds	r3, #1
 800295e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002962:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002966:	2b0b      	cmp	r3, #11
 8002968:	d9ca      	bls.n	8002900 <pm_read+0x82>
				}

				/* Store readings in structure */
				dev->pm10_standard = buffer_u16[0];
 800296a:	89ba      	ldrh	r2, [r7, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	809a      	strh	r2, [r3, #4]
				dev->pm25_standard = buffer_u16[1];
 8002970:	89fa      	ldrh	r2, [r7, #14]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	80da      	strh	r2, [r3, #6]
				dev->pm100_standard = buffer_u16[2];
 8002976:	8a3a      	ldrh	r2, [r7, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	811a      	strh	r2, [r3, #8]
				dev->pm10_env = buffer_u16[3];
 800297c:	8a7a      	ldrh	r2, [r7, #18]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	815a      	strh	r2, [r3, #10]
				dev->pm25_env = buffer_u16[4];
 8002982:	8aba      	ldrh	r2, [r7, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	819a      	strh	r2, [r3, #12]
				dev->pm100_env = buffer_u16[5];
 8002988:	8afa      	ldrh	r2, [r7, #22]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	81da      	strh	r2, [r3, #14]
				dev->particles_03um = buffer_u16[6];
 800298e:	8b3a      	ldrh	r2, [r7, #24]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	821a      	strh	r2, [r3, #16]
				dev->particles_05um = buffer_u16[7];
 8002994:	8b7a      	ldrh	r2, [r7, #26]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	825a      	strh	r2, [r3, #18]
				dev->particles_10um = buffer_u16[8];
 800299a:	8bba      	ldrh	r2, [r7, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	829a      	strh	r2, [r3, #20]
				dev->particles_25um = buffer_u16[9];
 80029a0:	8bfa      	ldrh	r2, [r7, #30]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	82da      	strh	r2, [r3, #22]
				dev->particles_50um = buffer_u16[10];
 80029a6:	8c3a      	ldrh	r2, [r7, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	831a      	strh	r2, [r3, #24]
				dev->particles_100um = buffer_u16[11];
 80029ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	835a      	strh	r2, [r3, #26]
			}
		}
	}
	return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3748      	adds	r7, #72	; 0x48
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <sht40_initialise>:
#include "sht40.h"      // Include header file for sht40

HAL_StatusTypeDef sht40_initialise(sht40_data *dev, I2C_HandleTypeDef *i2cHandle) {
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->temperature = 0;
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->humidity = 0;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <sht40_read>:

/* Function to read the sht40 sensor */
HAL_StatusTypeDef sht40_read(sht40_data *dev)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

    uint8_t sht40_buffer[6] = {0};
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	2300      	movs	r3, #0
 8002a06:	823b      	strh	r3, [r7, #16]
	float t_ticks, rh_ticks = 0;
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    uint8_t buf[1] = {SHT40_HP};
 8002a0e:	23fd      	movs	r3, #253	; 0xfd
 8002a10:	723b      	strb	r3, [r7, #8]

    /* Write to the high precision register for temperature and humitidy values */
//    status = HAL_I2C_Mem_Write(dev->i2cHandle, SHT40_ADDR, SHT40_HP, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_Max);
        status = HAL_I2C_Master_Transmit(dev->i2cHandle, (0x44 << 1), buf, 1,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	f107 0208 	add.w	r2, r7, #8
 8002a1a:	2332      	movs	r3, #50	; 0x32
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2301      	movs	r3, #1
 8002a20:	2188      	movs	r1, #136	; 0x88
 8002a22:	f000 fefd 	bl	8003820 <HAL_I2C_Master_Transmit>
 8002a26:	4603      	mov	r3, r0
 8002a28:	76fb      	strb	r3, [r7, #27]
    			50);
    if (status != 0)
 8002a2a:	7efb      	ldrb	r3, [r7, #27]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <sht40_read+0x3c>
    {
//    	printf("Failed to write I2C device address (err %i)\n", ret);
    	return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e056      	b.n	8002ae2 <sht40_read+0xea>
    }

    /* wait for 10 millseconds */
    HAL_Delay(10);
 8002a34:	200a      	movs	r0, #10
 8002a36:	f000 fb91 	bl	800315c <HAL_Delay>

    /* Read the six return values for the register */
//    status = HAL_I2C_Mem_Read(dev->i2cHandle, SHT40_ADDR, SHT40_HP, I2C_MEMADD_SIZE_8BIT, sht40_buffer, 6, HAL_MAX_DELAY);
    status = HAL_I2C_Master_Receive(dev->i2cHandle, (0x44 << 1) | 0x01, sht40_buffer, 6,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	f107 020c 	add.w	r2, r7, #12
 8002a42:	2332      	movs	r3, #50	; 0x32
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2306      	movs	r3, #6
 8002a48:	2189      	movs	r1, #137	; 0x89
 8002a4a:	f000 ffdd 	bl	8003a08 <HAL_I2C_Master_Receive>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	76fb      	strb	r3, [r7, #27]
			50);
    if (status != 0)
 8002a52:	7efb      	ldrb	r3, [r7, #27]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <sht40_read+0x64>
    {
//    	printf("Failed to read I2C device address (err %i)\n", ret);
    	return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e042      	b.n	8002ae2 <sht40_read+0xea>
    }

    /* Shift the data and convert to temperature and humidty reading */
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
 8002a5c:	7b3b      	ldrb	r3, [r7, #12]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	7b7a      	ldrb	r2, [r7, #13]
 8002a62:	4413      	add	r3, r2
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6c:	edc7 7a05 	vstr	s15, [r7, #20]
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	7c3a      	ldrb	r2, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a80:	edc7 7a07 	vstr	s15, [r7, #28]

    dev->temperature = -45 + 175 * t_ticks / 65535;
 8002a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a88:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002aec <sht40_read+0xf4>
 8002a8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a90:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002af0 <sht40_read+0xf8>
 8002a94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a98:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002af4 <sht40_read+0xfc>
 8002a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aa0:	ee17 0a90 	vmov	r0, s15
 8002aa4:	f7fd fd50 	bl	8000548 <__aeabi_f2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	e9c1 2302 	strd	r2, r3, [r1, #8]
    dev->humidity = -6 + 125 * rh_ticks / 65535;
 8002ab2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ab6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002af8 <sht40_read+0x100>
 8002aba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002abe:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002af0 <sht40_read+0xf8>
 8002ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ace:	ee17 0a90 	vmov	r0, s15
 8002ad2:	f7fd fd39 	bl	8000548 <__aeabi_f2d>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	432f0000 	.word	0x432f0000
 8002af0:	477fff00 	.word	0x477fff00
 8002af4:	42340000 	.word	0x42340000
 8002af8:	42fa0000 	.word	0x42fa0000

08002afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_MspInit+0x44>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b06:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_MspInit+0x44>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_MspInit+0x44>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_MspInit+0x44>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <HAL_MspInit+0x44>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_MspInit+0x44>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b09e      	sub	sp, #120	; 0x78
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	2254      	movs	r2, #84	; 0x54
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f007 feaf 	bl	800a8c8 <memset>
  if(hi2c->Instance==I2C1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_I2C_MspInit+0xa8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d137      	bne.n	8002be4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b74:	2340      	movs	r3, #64	; 0x40
 8002b76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 fb61 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b8c:	f7ff fe42 	bl	8002814 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_I2C_MspInit+0xac>)
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <HAL_I2C_MspInit+0xac>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_I2C_MspInit+0xac>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ba8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bae:	2312      	movs	r3, #18
 8002bb0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc8:	f000 fbfe 	bl	80033c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_I2C_MspInit+0xac>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_I2C_MspInit+0xac>)
 8002bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_I2C_MspInit+0xac>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002be4:	bf00      	nop
 8002be6:	3778      	adds	r7, #120	; 0x78
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40005400 	.word	0x40005400
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <HAL_SPI_MspInit+0x7c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d128      	bne.n	8002c68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_SPI_MspInit+0x80>)
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_SPI_MspInit+0x80>)
 8002c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c20:	6613      	str	r3, [r2, #96]	; 0x60
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_SPI_MspInit+0x80>)
 8002c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_SPI_MspInit+0x80>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_SPI_MspInit+0x80>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_SPI_MspInit+0x80>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002c46:	23c2      	movs	r3, #194	; 0xc2
 8002c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c56:	2305      	movs	r3, #5
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c64:	f000 fbb0 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40013000 	.word	0x40013000
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_TIM_Base_MspInit+0x44>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d113      	bne.n	8002cb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_TIM_Base_MspInit+0x48>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <HAL_TIM_Base_MspInit+0x48>)
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	6613      	str	r3, [r2, #96]	; 0x60
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_TIM_Base_MspInit+0x48>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2019      	movs	r0, #25
 8002ca8:	f000 fb57 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002cac:	2019      	movs	r0, #25
 8002cae:	f000 fb70 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b09e      	sub	sp, #120	; 0x78
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	2254      	movs	r2, #84	; 0x54
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f007 fdef 	bl	800a8c8 <memset>
  if(huart->Instance==USART2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <HAL_UART_MspInit+0xcc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d148      	bne.n	8002d86 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cfc:	f107 0310 	add.w	r3, r7, #16
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 faa1 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d0c:	f7ff fd82 	bl	8002814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d10:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_UART_MspInit+0xd0>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_UART_MspInit+0xd0>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_UART_MspInit+0xd0>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_UART_MspInit+0xd0>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a19      	ldr	r2, [pc, #100]	; (8002d94 <HAL_UART_MspInit+0xd0>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_UART_MspInit+0xd0>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002d40:	2304      	movs	r3, #4
 8002d42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d50:	2307      	movs	r3, #7
 8002d52:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d5e:	f000 fb33 	bl	80033c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002d74:	2303      	movs	r3, #3
 8002d76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d82:	f000 fb21 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d86:	bf00      	nop
 8002d88:	3778      	adds	r7, #120	; 0x78
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40004400 	.word	0x40004400
 8002d94:	40021000 	.word	0x40021000

08002d98 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0

	if (Timer1 > 0)
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <SDTimer_Handler+0x40>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <SDTimer_Handler+0x1c>
		Timer1--;
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <SDTimer_Handler+0x40>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <SDTimer_Handler+0x40>)
 8002db2:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0)
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <SDTimer_Handler+0x44>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <SDTimer_Handler+0x34>
		Timer2--;
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <SDTimer_Handler+0x44>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SDTimer_Handler+0x44>)
 8002dca:	701a      	strb	r2, [r3, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000210 	.word	0x20000210
 8002ddc:	20000212 	.word	0x20000212

08002de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <NMI_Handler+0x4>

08002de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <HardFault_Handler+0x4>

08002dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <MemManage_Handler+0x4>

08002df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df6:	e7fe      	b.n	8002df6 <BusFault_Handler+0x4>

08002df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <UsageFault_Handler+0x4>

08002dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <SysTick_Handler+0x30>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <SysTick_Handler+0x30>)
 8002e38:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10){
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <SysTick_Handler+0x30>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d904      	bls.n	8002e4e <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SysTick_Handler+0x30>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002e4a:	f7ff ffa5 	bl	8002d98 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e4e:	f000 f965 	bl	800311c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20002870 	.word	0x20002870

08002e5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e62:	f003 fb4c 	bl	80064fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200002d0 	.word	0x200002d0

08002e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
	return 1;
 8002e74:	2301      	movs	r3, #1
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_kill>:

int _kill(int pid, int sig)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e8a:	f007 fcf3 	bl	800a874 <__errno>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2216      	movs	r2, #22
 8002e92:	601a      	str	r2, [r3, #0]
	return -1;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_exit>:

void _exit (int status)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ffe7 	bl	8002e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eb2:	e7fe      	b.n	8002eb2 <_exit+0x12>

08002eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e00a      	b.n	8002edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ec6:	f3af 8000 	nop.w
 8002eca:	4601      	mov	r1, r0
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	60ba      	str	r2, [r7, #8]
 8002ed2:	b2ca      	uxtb	r2, r1
 8002ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dbf0      	blt.n	8002ec6 <_read+0x12>
	}

return len;
 8002ee4:	687b      	ldr	r3, [r7, #4]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e009      	b.n	8002f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	60ba      	str	r2, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3301      	adds	r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	dbf1      	blt.n	8002f00 <_write+0x12>
	}
	return len;
 8002f1c:	687b      	ldr	r3, [r7, #4]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_close>:

int _close(int file)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_isatty>:

int _isatty(int file)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	return 1;
 8002f66:	2301      	movs	r3, #1
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <_sbrk+0x5c>)
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <_sbrk+0x60>)
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <_sbrk+0x64>)
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <_sbrk+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d207      	bcs.n	8002fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc0:	f007 fc58 	bl	800a874 <__errno>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e009      	b.n	8002fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <_sbrk+0x64>)
 8002fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20010000 	.word	0x20010000
 8002ff0:	00000400 	.word	0x00000400
 8002ff4:	20002874 	.word	0x20002874
 8002ff8:	20002ac8 	.word	0x20002ac8

08002ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <SystemInit+0x20>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <SystemInit+0x20>)
 8003008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800300c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003024:	f7ff ffea 	bl	8002ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <LoopForever+0x6>)
  ldr r1, =_edata
 800302a:	490d      	ldr	r1, [pc, #52]	; (8003060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <LoopForever+0xe>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <LoopForever+0x16>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800304e:	f007 fc17 	bl	800a880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003052:	f7ff f87b 	bl	800214c <main>

08003056 <LoopForever>:

LoopForever:
    b LoopForever
 8003056:	e7fe      	b.n	8003056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003058:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003064:	0800e08c 	.word	0x0800e08c
  ldr r2, =_sbss
 8003068:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800306c:	20002ac8 	.word	0x20002ac8

08003070 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC1_IRQHandler>

08003072 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800307c:	2003      	movs	r0, #3
 800307e:	f000 f961 	bl	8003344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003082:	2000      	movs	r0, #0
 8003084:	f000 f80e 	bl	80030a4 <HAL_InitTick>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	71fb      	strb	r3, [r7, #7]
 8003092:	e001      	b.n	8003098 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003094:	f7ff fd32 	bl	8002afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003098:	79fb      	ldrb	r3, [r7, #7]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_InitTick+0x6c>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d023      	beq.n	8003100 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030b8:	4b16      	ldr	r3, [pc, #88]	; (8003114 <HAL_InitTick+0x70>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_InitTick+0x6c>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f96d 	bl	80033ae <HAL_SYSTICK_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d809      	bhi.n	80030f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e0:	2200      	movs	r2, #0
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	f000 f937 	bl	800335a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_InitTick+0x74>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e007      	b.n	8003104 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e004      	b.n	8003104 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e001      	b.n	8003104 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000000c 	.word	0x2000000c
 8003114:	20000004 	.word	0x20000004
 8003118:	20000008 	.word	0x20000008

0800311c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x20>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_IncTick+0x24>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_IncTick+0x24>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000000c 	.word	0x2000000c
 8003140:	20002878 	.word	0x20002878

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20002878 	.word	0x20002878

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff ffee 	bl	8003144 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d005      	beq.n	8003182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_Delay+0x44>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003182:	bf00      	nop
 8003184:	f7ff ffde 	bl	8003144 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d8f7      	bhi.n	8003184 <HAL_Delay+0x28>
  {
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003310:	d301      	bcc.n	8003316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003312:	2301      	movs	r3, #1
 8003314:	e00f      	b.n	8003336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <SysTick_Config+0x40>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331e:	210f      	movs	r1, #15
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f7ff ff8e 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <SysTick_Config+0x40>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <SysTick_Config+0x40>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010

08003344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff29 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800336c:	f7ff ff3e 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	6978      	ldr	r0, [r7, #20]
 8003378:	f7ff ff8e 	bl	8003298 <NVIC_EncodePriority>
 800337c:	4602      	mov	r2, r0
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff5d 	bl	8003244 <__NVIC_SetPriority>
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff31 	bl	8003208 <__NVIC_EnableIRQ>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ffa2 	bl	8003300 <SysTick_Config>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d6:	e148      	b.n	800366a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2101      	movs	r1, #1
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 813a 	beq.w	8003664 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d005      	beq.n	8003408 <HAL_GPIO_Init+0x40>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d130      	bne.n	800346a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343e:	2201      	movs	r2, #1
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 0201 	and.w	r2, r3, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b03      	cmp	r3, #3
 8003474:	d017      	beq.n	80034a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d123      	bne.n	80034fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	220f      	movs	r2, #15
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	08da      	lsrs	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3208      	adds	r2, #8
 80034f4:	6939      	ldr	r1, [r7, #16]
 80034f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2203      	movs	r2, #3
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 0203 	and.w	r2, r3, #3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8094 	beq.w	8003664 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353c:	4b52      	ldr	r3, [pc, #328]	; (8003688 <HAL_GPIO_Init+0x2c0>)
 800353e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003540:	4a51      	ldr	r2, [pc, #324]	; (8003688 <HAL_GPIO_Init+0x2c0>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6613      	str	r3, [r2, #96]	; 0x60
 8003548:	4b4f      	ldr	r3, [pc, #316]	; (8003688 <HAL_GPIO_Init+0x2c0>)
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003554:	4a4d      	ldr	r2, [pc, #308]	; (800368c <HAL_GPIO_Init+0x2c4>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	220f      	movs	r2, #15
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800357e:	d00d      	beq.n	800359c <HAL_GPIO_Init+0x1d4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a43      	ldr	r2, [pc, #268]	; (8003690 <HAL_GPIO_Init+0x2c8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d007      	beq.n	8003598 <HAL_GPIO_Init+0x1d0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_GPIO_Init+0x2cc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <HAL_GPIO_Init+0x1cc>
 8003590:	2302      	movs	r3, #2
 8003592:	e004      	b.n	800359e <HAL_GPIO_Init+0x1d6>
 8003594:	2307      	movs	r3, #7
 8003596:	e002      	b.n	800359e <HAL_GPIO_Init+0x1d6>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_GPIO_Init+0x1d6>
 800359c:	2300      	movs	r3, #0
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	f002 0203 	and.w	r2, r2, #3
 80035a4:	0092      	lsls	r2, r2, #2
 80035a6:	4093      	lsls	r3, r2
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035ae:	4937      	ldr	r1, [pc, #220]	; (800368c <HAL_GPIO_Init+0x2c4>)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035e6:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800360a:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3301      	adds	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f aeaf 	bne.w	80033d8 <HAL_GPIO_Init+0x10>
  }
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40021000 	.word	0x40021000
 800368c:	40010000 	.word	0x40010000
 8003690:	48000400 	.word	0x48000400
 8003694:	48000800 	.word	0x48000800
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	4613      	mov	r3, r2
 80036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	041a      	lsls	r2, r3, #16
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	43d9      	mvns	r1, r3
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	400b      	ands	r3, r1
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	619a      	str	r2, [r3, #24]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e081      	b.n	8003816 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fa0c 	bl	8002b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2224      	movs	r2, #36	; 0x24
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003750:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003760:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d107      	bne.n	800377a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	e006      	b.n	8003788 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003786:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d104      	bne.n	800379a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003798:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69d9      	ldr	r1, [r3, #28]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	461a      	mov	r2, r3
 800382c:	460b      	mov	r3, r1
 800382e:	817b      	strh	r3, [r7, #10]
 8003830:	4613      	mov	r3, r2
 8003832:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b20      	cmp	r3, #32
 800383e:	f040 80da 	bne.w	80039f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_I2C_Master_Transmit+0x30>
 800384c:	2302      	movs	r3, #2
 800384e:	e0d3      	b.n	80039f8 <HAL_I2C_Master_Transmit+0x1d8>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003858:	f7ff fc74 	bl	8003144 <HAL_GetTick>
 800385c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2319      	movs	r3, #25
 8003864:	2201      	movs	r2, #1
 8003866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fb54 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0be      	b.n	80039f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2221      	movs	r2, #33	; 0x21
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2210      	movs	r2, #16
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	893a      	ldrh	r2, [r7, #8]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2bff      	cmp	r3, #255	; 0xff
 80038aa:	d90e      	bls.n	80038ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	22ff      	movs	r2, #255	; 0xff
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	8979      	ldrh	r1, [r7, #10]
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <HAL_I2C_Master_Transmit+0x1e0>)
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fd4a 	bl	800435c <I2C_TransferConfig>
 80038c8:	e06c      	b.n	80039a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <HAL_I2C_Master_Transmit+0x1e0>)
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fd39 	bl	800435c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038ea:	e05b      	b.n	80039a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	6a39      	ldr	r1, [r7, #32]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fb51 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e07b      	b.n	80039f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d034      	beq.n	80039a4 <HAL_I2C_Master_Transmit+0x184>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d130      	bne.n	80039a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fae3 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e04d      	b.n	80039f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2bff      	cmp	r3, #255	; 0xff
 8003964:	d90e      	bls.n	8003984 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	b2da      	uxtb	r2, r3
 8003972:	8979      	ldrh	r1, [r7, #10]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fced 	bl	800435c <I2C_TransferConfig>
 8003982:	e00f      	b.n	80039a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	b2da      	uxtb	r2, r3
 8003994:	8979      	ldrh	r1, [r7, #10]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fcdc 	bl	800435c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d19e      	bne.n	80038ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	6a39      	ldr	r1, [r7, #32]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fb30 	bl	8004018 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e01a      	b.n	80039f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2220      	movs	r2, #32
 80039c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_I2C_Master_Transmit+0x1e4>)
 80039d6:	400b      	ands	r3, r1
 80039d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	80002000 	.word	0x80002000
 8003a04:	fe00e800 	.word	0xfe00e800

08003a08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	460b      	mov	r3, r1
 8003a16:	817b      	strh	r3, [r7, #10]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	f040 80db 	bne.w	8003be0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2C_Master_Receive+0x30>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0d4      	b.n	8003be2 <HAL_I2C_Master_Receive+0x1da>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a40:	f7ff fb80 	bl	8003144 <HAL_GetTick>
 8003a44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2319      	movs	r3, #25
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fa60 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0bf      	b.n	8003be2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2222      	movs	r2, #34	; 0x22
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	893a      	ldrh	r2, [r7, #8]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2bff      	cmp	r3, #255	; 0xff
 8003a92:	d90e      	bls.n	8003ab2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	4b52      	ldr	r3, [pc, #328]	; (8003bec <HAL_I2C_Master_Receive+0x1e4>)
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fc56 	bl	800435c <I2C_TransferConfig>
 8003ab0:	e06d      	b.n	8003b8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	8979      	ldrh	r1, [r7, #10]
 8003ac4:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_I2C_Master_Receive+0x1e4>)
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fc45 	bl	800435c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ad2:	e05c      	b.n	8003b8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	6a39      	ldr	r1, [r7, #32]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fad9 	bl	8004090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e07c      	b.n	8003be2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d034      	beq.n	8003b8e <HAL_I2C_Master_Receive+0x186>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d130      	bne.n	8003b8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f9ee 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e04d      	b.n	8003be2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2bff      	cmp	r3, #255	; 0xff
 8003b4e:	d90e      	bls.n	8003b6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	22ff      	movs	r2, #255	; 0xff
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	8979      	ldrh	r1, [r7, #10]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fbf8 	bl	800435c <I2C_TransferConfig>
 8003b6c:	e00f      	b.n	8003b8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	8979      	ldrh	r1, [r7, #10]
 8003b80:	2300      	movs	r3, #0
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fbe7 	bl	800435c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d19d      	bne.n	8003ad4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	6a39      	ldr	r1, [r7, #32]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fa3b 	bl	8004018 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e01a      	b.n	8003be2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_I2C_Master_Receive+0x1e8>)
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	80002400 	.word	0x80002400
 8003bf0:	fe00e800 	.word	0xfe00e800

08003bf4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	460b      	mov	r3, r1
 8003c08:	813b      	strh	r3, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	f040 80fd 	bne.w	8003e16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_I2C_Mem_Read+0x34>
 8003c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0f1      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2C_Mem_Read+0x4e>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e0ea      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c4a:	f7ff fa7b 	bl	8003144 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2319      	movs	r3, #25
 8003c56:	2201      	movs	r2, #1
 8003c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f95b 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0d5      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2222      	movs	r2, #34	; 0x22
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a3a      	ldr	r2, [r7, #32]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c94:	88f8      	ldrh	r0, [r7, #6]
 8003c96:	893a      	ldrh	r2, [r7, #8]
 8003c98:	8979      	ldrh	r1, [r7, #10]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f8bf 	bl	8003e28 <I2C_RequestMemoryRead>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0ad      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2bff      	cmp	r3, #255	; 0xff
 8003cc4:	d90e      	bls.n	8003ce4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	22ff      	movs	r2, #255	; 0xff
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	8979      	ldrh	r1, [r7, #10]
 8003cd4:	4b52      	ldr	r3, [pc, #328]	; (8003e20 <HAL_I2C_Mem_Read+0x22c>)
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fb3d 	bl	800435c <I2C_TransferConfig>
 8003ce2:	e00f      	b.n	8003d04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	8979      	ldrh	r1, [r7, #10]
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	; (8003e20 <HAL_I2C_Mem_Read+0x22c>)
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fb2c 	bl	800435c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f902 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07c      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d034      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x1d0>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d130      	bne.n	8003dc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2180      	movs	r1, #128	; 0x80
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f8d3 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e04d      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2bff      	cmp	r3, #255	; 0xff
 8003d84:	d90e      	bls.n	8003da4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	22ff      	movs	r2, #255	; 0xff
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	8979      	ldrh	r1, [r7, #10]
 8003d94:	2300      	movs	r3, #0
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fadd 	bl	800435c <I2C_TransferConfig>
 8003da2:	e00f      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	8979      	ldrh	r1, [r7, #10]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 facc 	bl	800435c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d19a      	bne.n	8003d04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f920 	bl	8004018 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e01a      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2220      	movs	r2, #32
 8003de8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_I2C_Mem_Read+0x230>)
 8003df6:	400b      	ands	r3, r1
 8003df8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	80002400 	.word	0x80002400
 8003e24:	fe00e800 	.word	0xfe00e800

08003e28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	8979      	ldrh	r1, [r7, #10]
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <I2C_RequestMemoryRead+0xa4>)
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa84 	bl	800435c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f89d 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e02c      	b.n	8003ec2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d105      	bne.n	8003e7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6e:	893b      	ldrh	r3, [r7, #8]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
 8003e78:	e015      	b.n	8003ea6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	69b9      	ldr	r1, [r7, #24]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f883 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e012      	b.n	8003ec2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e9c:	893b      	ldrh	r3, [r7, #8]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2140      	movs	r1, #64	; 0x40
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f831 	bl	8003f18 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	80002000 	.word	0x80002000

08003ed0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d103      	bne.n	8003eee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d007      	beq.n	8003f0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	619a      	str	r2, [r3, #24]
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f28:	e022      	b.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d01e      	beq.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7ff f907 	bl	8003144 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e00f      	b.n	8003f90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d0cd      	beq.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fa4:	e02c      	b.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f8ea 	bl	8004184 <I2C_IsErrorOccurred>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02a      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d01e      	beq.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7ff f8bf 	bl	8003144 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d113      	bne.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e007      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d1cb      	bne.n	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004024:	e028      	b.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f8aa 	bl	8004184 <I2C_IsErrorOccurred>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e026      	b.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7ff f883 	bl	8003144 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d113      	bne.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e007      	b.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d1cf      	bne.n	8004026 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800409c:	e064      	b.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f86e 	bl	8004184 <I2C_IsErrorOccurred>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e062      	b.n	8004178 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d138      	bne.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d105      	bne.n	80040da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e04e      	b.n	8004178 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d107      	bne.n	80040f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2210      	movs	r2, #16
 80040ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2204      	movs	r2, #4
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
 80040f6:	e002      	b.n	80040fe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2220      	movs	r2, #32
 8004104:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004112:	400b      	ands	r3, r1
 8004114:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e022      	b.n	8004178 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7ff f807 	bl	8003144 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10f      	bne.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e007      	b.n	8004178 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d193      	bne.n	800409e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	fe00e800 	.word	0xfe00e800

08004184 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d075      	beq.n	800429c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2210      	movs	r2, #16
 80041b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041b8:	e056      	b.n	8004268 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d052      	beq.n	8004268 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe ffbf 	bl	8003144 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_IsErrorOccurred+0x54>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d147      	bne.n	8004268 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d12e      	bne.n	800425a <I2C_IsErrorOccurred+0xd6>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004202:	d02a      	beq.n	800425a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	2b20      	cmp	r3, #32
 8004208:	d027      	beq.n	800425a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004218:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800421a:	f7fe ff93 	bl	8003144 <HAL_GetTick>
 800421e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004220:	e01b      	b.n	800425a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004222:	f7fe ff8f 	bl	8003144 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b19      	cmp	r3, #25
 800422e:	d914      	bls.n	800425a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	d1dc      	bne.n	8004222 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b20      	cmp	r3, #32
 8004274:	d003      	beq.n	800427e <I2C_IsErrorOccurred+0xfa>
 8004276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800427a:	2b00      	cmp	r3, #0
 800427c:	d09d      	beq.n	80041ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800427e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2220      	movs	r2, #32
 800428c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f043 0304 	orr.w	r3, r3, #4
 8004294:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f043 0308 	orr.w	r3, r3, #8
 80042d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004302:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800430a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01c      	beq.n	800434c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff fddc 	bl	8003ed0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6859      	ldr	r1, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <I2C_IsErrorOccurred+0x1d4>)
 8004324:	400b      	ands	r3, r1
 8004326:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800434c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004350:	4618      	mov	r0, r3
 8004352:	3728      	adds	r7, #40	; 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	fe00e800 	.word	0xfe00e800

0800435c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	817b      	strh	r3, [r7, #10]
 800436a:	4613      	mov	r3, r2
 800436c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004374:	7a7b      	ldrb	r3, [r7, #9]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800437c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	4313      	orrs	r3, r2
 8004386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800438a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	0d5b      	lsrs	r3, r3, #21
 8004396:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <I2C_TransferConfig+0x60>)
 800439c:	430b      	orrs	r3, r1
 800439e:	43db      	mvns	r3, r3
 80043a0:	ea02 0103 	and.w	r1, r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	03ff63ff 	.word	0x03ff63ff

080043c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d138      	bne.n	8004448 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e032      	b.n	800444a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004412:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b20      	cmp	r3, #32
 800446a:	d139      	bne.n	80044e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004476:	2302      	movs	r3, #2
 8004478:	e033      	b.n	80044e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2224      	movs	r2, #36	; 0x24
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a04      	ldr	r2, [pc, #16]	; (800450c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40007000 	.word	0x40007000

08004510 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <HAL_PWREx_GetVoltageRange+0x18>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40007000 	.word	0x40007000

0800452c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453a:	d130      	bne.n	800459e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004548:	d038      	beq.n	80045bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004552:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004558:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800455a:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2232      	movs	r2, #50	; 0x32
 8004560:	fb02 f303 	mul.w	r3, r2, r3
 8004564:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	0c9b      	lsrs	r3, r3, #18
 800456c:	3301      	adds	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004570:	e002      	b.n	8004578 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004584:	d102      	bne.n	800458c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f2      	bne.n	8004572 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004598:	d110      	bne.n	80045bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e00f      	b.n	80045be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d007      	beq.n	80045bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045b4:	4a05      	ldr	r2, [pc, #20]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40007000 	.word	0x40007000
 80045d0:	20000004 	.word	0x20000004
 80045d4:	431bde83 	.word	0x431bde83

080045d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f000 bc02 	b.w	8004df0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ec:	4b96      	ldr	r3, [pc, #600]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f6:	4b94      	ldr	r3, [pc, #592]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80e4 	beq.w	80047d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_RCC_OscConfig+0x4c>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	f040 808b 	bne.w	8004732 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b01      	cmp	r3, #1
 8004620:	f040 8087 	bne.w	8004732 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004624:	4b88      	ldr	r3, [pc, #544]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_OscConfig+0x64>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e3d9      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	4b81      	ldr	r3, [pc, #516]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_RCC_OscConfig+0x7e>
 800464c:	4b7e      	ldr	r3, [pc, #504]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004654:	e005      	b.n	8004662 <HAL_RCC_OscConfig+0x8a>
 8004656:	4b7c      	ldr	r3, [pc, #496]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004662:	4293      	cmp	r3, r2
 8004664:	d223      	bcs.n	80046ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fd8c 	bl	8005188 <RCC_SetFlashLatencyFromMSIRange>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e3ba      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800467a:	4b73      	ldr	r3, [pc, #460]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a72      	ldr	r2, [pc, #456]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004680:	f043 0308 	orr.w	r3, r3, #8
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b70      	ldr	r3, [pc, #448]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	496d      	ldr	r1, [pc, #436]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004698:	4b6b      	ldr	r3, [pc, #428]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	4968      	ldr	r1, [pc, #416]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
 80046ac:	e025      	b.n	80046fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ae:	4b66      	ldr	r3, [pc, #408]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a65      	ldr	r2, [pc, #404]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80046b4:	f043 0308 	orr.w	r3, r3, #8
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4960      	ldr	r1, [pc, #384]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046cc:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	495b      	ldr	r1, [pc, #364]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fd4c 	bl	8005188 <RCC_SetFlashLatencyFromMSIRange>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e37a      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046fa:	f000 fc81 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 80046fe:	4602      	mov	r2, r0
 8004700:	4b51      	ldr	r3, [pc, #324]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	4950      	ldr	r1, [pc, #320]	; (800484c <HAL_RCC_OscConfig+0x274>)
 800470c:	5ccb      	ldrb	r3, [r1, r3]
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	fa22 f303 	lsr.w	r3, r2, r3
 8004716:	4a4e      	ldr	r2, [pc, #312]	; (8004850 <HAL_RCC_OscConfig+0x278>)
 8004718:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800471a:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <HAL_RCC_OscConfig+0x27c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fcc0 	bl	80030a4 <HAL_InitTick>
 8004724:	4603      	mov	r3, r0
 8004726:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d052      	beq.n	80047d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	e35e      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d032      	beq.n	80047a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800473a:	4b43      	ldr	r3, [pc, #268]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a42      	ldr	r2, [pc, #264]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004746:	f7fe fcfd 	bl	8003144 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800474e:	f7fe fcf9 	bl	8003144 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e347      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004760:	4b39      	ldr	r3, [pc, #228]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800476c:	4b36      	ldr	r3, [pc, #216]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a35      	ldr	r2, [pc, #212]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004772:	f043 0308 	orr.w	r3, r3, #8
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b33      	ldr	r3, [pc, #204]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	4930      	ldr	r1, [pc, #192]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800478a:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	492b      	ldr	r1, [pc, #172]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800479a:	4313      	orrs	r3, r2
 800479c:	604b      	str	r3, [r1, #4]
 800479e:	e01a      	b.n	80047d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047a0:	4b29      	ldr	r3, [pc, #164]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a28      	ldr	r2, [pc, #160]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047ac:	f7fe fcca 	bl	8003144 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047b4:	f7fe fcc6 	bl	8003144 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e314      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x1dc>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d073      	beq.n	80048ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x21c>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d10e      	bne.n	800480c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d10b      	bne.n	800480c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d063      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2f0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d15f      	bne.n	80048c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e2f1      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d106      	bne.n	8004824 <HAL_RCC_OscConfig+0x24c>
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e025      	b.n	8004870 <HAL_RCC_OscConfig+0x298>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800482c:	d114      	bne.n	8004858 <HAL_RCC_OscConfig+0x280>
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a05      	ldr	r2, [pc, #20]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b03      	ldr	r3, [pc, #12]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a02      	ldr	r2, [pc, #8]	; (8004848 <HAL_RCC_OscConfig+0x270>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e013      	b.n	8004870 <HAL_RCC_OscConfig+0x298>
 8004848:	40021000 	.word	0x40021000
 800484c:	0800d81c 	.word	0x0800d81c
 8004850:	20000004 	.word	0x20000004
 8004854:	20000008 	.word	0x20000008
 8004858:	4ba0      	ldr	r3, [pc, #640]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a9f      	ldr	r2, [pc, #636]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 800485e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b9d      	ldr	r3, [pc, #628]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a9c      	ldr	r2, [pc, #624]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 800486a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe fc64 	bl	8003144 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fe fc60 	bl	8003144 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e2ae      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004892:	4b92      	ldr	r3, [pc, #584]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x2a8>
 800489e:	e014      	b.n	80048ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe fc50 	bl	8003144 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fe fc4c 	bl	8003144 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e29a      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2d0>
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d060      	beq.n	8004998 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_OscConfig+0x310>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d119      	bne.n	8004916 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d116      	bne.n	8004916 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e8:	4b7c      	ldr	r3, [pc, #496]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_OscConfig+0x328>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e277      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004900:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	4973      	ldr	r1, [pc, #460]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004914:	e040      	b.n	8004998 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d023      	beq.n	8004966 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800491e:	4b6f      	ldr	r3, [pc, #444]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6e      	ldr	r2, [pc, #440]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fe fc0b 	bl	8003144 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004932:	f7fe fc07 	bl	8003144 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e255      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004944:	4b65      	ldr	r3, [pc, #404]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b62      	ldr	r3, [pc, #392]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	495f      	ldr	r1, [pc, #380]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
 8004964:	e018      	b.n	8004998 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004966:	4b5d      	ldr	r3, [pc, #372]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a5c      	ldr	r2, [pc, #368]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 800496c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fe fbe7 	bl	8003144 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497a:	f7fe fbe3 	bl	8003144 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e231      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498c:	4b53      	ldr	r3, [pc, #332]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d03c      	beq.n	8004a1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01c      	beq.n	80049e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ac:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b2:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fe fbc2 	bl	8003144 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c4:	f7fe fbbe 	bl	8003144 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e20c      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d6:	4b41      	ldr	r3, [pc, #260]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 80049d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ef      	beq.n	80049c4 <HAL_RCC_OscConfig+0x3ec>
 80049e4:	e01b      	b.n	8004a1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e6:	4b3d      	ldr	r3, [pc, #244]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 80049e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ec:	4a3b      	ldr	r2, [pc, #236]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fe fba5 	bl	8003144 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049fe:	f7fe fba1 	bl	8003144 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1ef      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a10:	4b32      	ldr	r3, [pc, #200]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ef      	bne.n	80049fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80a6 	beq.w	8004b78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a30:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3c:	4b27      	ldr	r3, [pc, #156]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	4a26      	ldr	r2, [pc, #152]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <HAL_RCC_OscConfig+0x508>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d118      	bne.n	8004a96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a64:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <HAL_RCC_OscConfig+0x508>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_RCC_OscConfig+0x508>)
 8004a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a70:	f7fe fb68 	bl	8003144 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a78:	f7fe fb64 	bl	8003144 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1b2      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_RCC_OscConfig+0x508>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d108      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4d8>
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aae:	e029      	b.n	8004b04 <HAL_RCC_OscConfig+0x52c>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d115      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x50c>
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004ac0:	f043 0304 	orr.w	r3, r3, #4
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	4a03      	ldr	r2, [pc, #12]	; (8004adc <HAL_RCC_OscConfig+0x504>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad8:	e014      	b.n	8004b04 <HAL_RCC_OscConfig+0x52c>
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	4b9a      	ldr	r3, [pc, #616]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	4a99      	ldr	r2, [pc, #612]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af4:	4b96      	ldr	r3, [pc, #600]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	4a95      	ldr	r2, [pc, #596]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004afc:	f023 0304 	bic.w	r3, r3, #4
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d016      	beq.n	8004b3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fe fb1a 	bl	8003144 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fe fb16 	bl	8003144 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e162      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2a:	4b89      	ldr	r3, [pc, #548]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0ed      	beq.n	8004b14 <HAL_RCC_OscConfig+0x53c>
 8004b38:	e015      	b.n	8004b66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fe fb03 	bl	8003144 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fe faff 	bl	8003144 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e14b      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b58:	4b7d      	ldr	r3, [pc, #500]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ed      	bne.n	8004b42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b66:	7ffb      	ldrb	r3, [r7, #31]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6c:	4b78      	ldr	r3, [pc, #480]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b70:	4a77      	ldr	r2, [pc, #476]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03c      	beq.n	8004bfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01c      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b8c:	4b70      	ldr	r3, [pc, #448]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b92:	4a6f      	ldr	r2, [pc, #444]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fe fad2 	bl	8003144 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba4:	f7fe face 	bl	8003144 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e11c      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb6:	4b66      	ldr	r3, [pc, #408]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ef      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x5cc>
 8004bc4:	e01b      	b.n	8004bfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bc6:	4b62      	ldr	r3, [pc, #392]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bcc:	4a60      	ldr	r2, [pc, #384]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fe fab5 	bl	8003144 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bde:	f7fe fab1 	bl	8003144 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e0ff      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ef      	bne.n	8004bde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80f3 	beq.w	8004dee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	f040 80c9 	bne.w	8004da4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c12:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f003 0203 	and.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d12c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	3b01      	subs	r3, #1
 8004c32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d123      	bne.n	8004c80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d11b      	bne.n	8004c80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d113      	bne.n	8004c80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	3b01      	subs	r3, #1
 8004c66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d06b      	beq.n	8004d58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d062      	beq.n	8004d4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c86:	4b32      	ldr	r3, [pc, #200]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0ac      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2d      	ldr	r2, [pc, #180]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ca2:	f7fe fa4f 	bl	8003144 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fe fa4b 	bl	8003144 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e099      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc8:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <HAL_RCC_OscConfig+0x77c>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0112      	lsls	r2, r2, #4
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ce2:	0212      	lsls	r2, r2, #8
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0552      	lsls	r2, r2, #21
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cf6:	0852      	lsrs	r2, r2, #1
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0652      	lsls	r2, r2, #25
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d02:	06d2      	lsls	r2, r2, #27
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4912      	ldr	r1, [pc, #72]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0f      	ldr	r2, [pc, #60]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d24:	f7fe fa0e 	bl	8003144 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fe fa0a 	bl	8003144 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e058      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <HAL_RCC_OscConfig+0x778>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d4a:	e050      	b.n	8004dee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e04f      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
 8004d50:	40021000 	.word	0x40021000
 8004d54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d144      	bne.n	8004dee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d64:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a23      	ldr	r2, [pc, #140]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d70:	4b21      	ldr	r3, [pc, #132]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d7c:	f7fe f9e2 	bl	8003144 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fe f9de 	bl	8003144 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e02c      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d96:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x7ac>
 8004da2:	e024      	b.n	8004dee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d01f      	beq.n	8004dea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a12      	ldr	r2, [pc, #72]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7fe f9c5 	bl	8003144 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7fe f9c1 	bl	8003144 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e00f      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	4905      	ldr	r1, [pc, #20]	; (8004df8 <HAL_RCC_OscConfig+0x820>)
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_OscConfig+0x824>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	60cb      	str	r3, [r1, #12]
 8004de8:	e001      	b.n	8004dee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	feeefffc 	.word	0xfeeefffc

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0e7      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b75      	ldr	r3, [pc, #468]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d910      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b72      	ldr	r3, [pc, #456]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 0207 	bic.w	r2, r3, #7
 8004e2a:	4970      	ldr	r1, [pc, #448]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b6e      	ldr	r3, [pc, #440]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0cf      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	4b66      	ldr	r3, [pc, #408]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d908      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e60:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4960      	ldr	r1, [pc, #384]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04c      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e86:	4b5a      	ldr	r3, [pc, #360]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d121      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0a6      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9e:	4b54      	ldr	r3, [pc, #336]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d115      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e09a      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eb6:	4b4e      	ldr	r3, [pc, #312]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e08e      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec6:	4b4a      	ldr	r3, [pc, #296]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e086      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ed6:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 0203 	bic.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4943      	ldr	r1, [pc, #268]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fe f92c 	bl	8003144 <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef0:	f7fe f928 	bl	8003144 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e06e      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 020c 	and.w	r2, r3, #12
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1eb      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d208      	bcs.n	8004f46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	4b2e      	ldr	r3, [pc, #184]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	492b      	ldr	r1, [pc, #172]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d210      	bcs.n	8004f76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 0207 	bic.w	r2, r3, #7
 8004f5c:	4923      	ldr	r1, [pc, #140]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f64:	4b21      	ldr	r3, [pc, #132]	; (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e036      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f82:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4918      	ldr	r1, [pc, #96]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fb4:	f000 f824 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	490b      	ldr	r1, [pc, #44]	; (8004ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_ClockConfig+0x1fc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe f863 	bl	80030a4 <HAL_InitTick>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40022000 	.word	0x40022000
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	0800d81c 	.word	0x0800d81c
 8004ff8:	20000004 	.word	0x20000004
 8004ffc:	20000008 	.word	0x20000008

08005000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	b089      	sub	sp, #36	; 0x24
 8005004:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500e:	4b3e      	ldr	r3, [pc, #248]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005018:	4b3b      	ldr	r3, [pc, #236]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x34>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d121      	bne.n	8005072 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d11e      	bne.n	8005072 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005034:	4b34      	ldr	r3, [pc, #208]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d107      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005040:	4b31      	ldr	r3, [pc, #196]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	e005      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005050:	4b2d      	ldr	r3, [pc, #180]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800505c:	4a2b      	ldr	r2, [pc, #172]	; (800510c <HAL_RCC_GetSysClockFreq+0x10c>)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005064:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10d      	bne.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005070:	e00a      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d102      	bne.n	800507e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005078:	4b25      	ldr	r3, [pc, #148]	; (8005110 <HAL_RCC_GetSysClockFreq+0x110>)
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e004      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d101      	bne.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005084:	4b23      	ldr	r3, [pc, #140]	; (8005114 <HAL_RCC_GetSysClockFreq+0x114>)
 8005086:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d134      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800508e:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d003      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xac>
 80050a4:	e005      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <HAL_RCC_GetSysClockFreq+0x110>)
 80050a8:	617b      	str	r3, [r7, #20]
      break;
 80050aa:	e005      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <HAL_RCC_GetSysClockFreq+0x114>)
 80050ae:	617b      	str	r3, [r7, #20]
      break;
 80050b0:	e002      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	617b      	str	r3, [r7, #20]
      break;
 80050b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	3301      	adds	r3, #1
 80050c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	fb03 f202 	mul.w	r2, r3, r2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	0e5b      	lsrs	r3, r3, #25
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	3301      	adds	r3, #1
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050f8:	69bb      	ldr	r3, [r7, #24]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3724      	adds	r7, #36	; 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000
 800510c:	0800d834 	.word	0x0800d834
 8005110:	00f42400 	.word	0x00f42400
 8005114:	007a1200 	.word	0x007a1200

08005118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_GetHCLKFreq+0x14>)
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000004 	.word	0x20000004

08005130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005134:	f7ff fff0 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4904      	ldr	r1, [pc, #16]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40021000 	.word	0x40021000
 8005158:	0800d82c 	.word	0x0800d82c

0800515c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005160:	f7ff ffda 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	0adb      	lsrs	r3, r3, #11
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000
 8005184:	0800d82c 	.word	0x0800d82c

08005188 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051a0:	f7ff f9b6 	bl	8004510 <HAL_PWREx_GetVoltageRange>
 80051a4:	6178      	str	r0, [r7, #20]
 80051a6:	e014      	b.n	80051d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ac:	4a24      	ldr	r2, [pc, #144]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6593      	str	r3, [r2, #88]	; 0x58
 80051b4:	4b22      	ldr	r3, [pc, #136]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051c0:	f7ff f9a6 	bl	8004510 <HAL_PWREx_GetVoltageRange>
 80051c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051c6:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d8:	d10b      	bne.n	80051f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d919      	bls.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2ba0      	cmp	r3, #160	; 0xa0
 80051e4:	d902      	bls.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051e6:	2302      	movs	r3, #2
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e013      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051ec:	2301      	movs	r3, #1
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e010      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b80      	cmp	r3, #128	; 0x80
 80051f6:	d902      	bls.n	80051fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051f8:	2303      	movs	r3, #3
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e00a      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b80      	cmp	r3, #128	; 0x80
 8005202:	d102      	bne.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005204:	2302      	movs	r3, #2
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e004      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b70      	cmp	r3, #112	; 0x70
 800520e:	d101      	bne.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005210:	2301      	movs	r3, #1
 8005212:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 0207 	bic.w	r2, r3, #7
 800521c:	4909      	ldr	r1, [pc, #36]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d001      	beq.n	8005236 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	40022000 	.word	0x40022000

08005248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005250:	2300      	movs	r3, #0
 8005252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005254:	2300      	movs	r3, #0
 8005256:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005260:	2b00      	cmp	r3, #0
 8005262:	d031      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005268:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800526c:	d01a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800526e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005272:	d814      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800527c:	d10f      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800527e:	4b5d      	ldr	r3, [pc, #372]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4a5c      	ldr	r2, [pc, #368]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800528a:	e00c      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f9de 	bl	8005654 <RCCEx_PLLSAI1_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	74fb      	strb	r3, [r7, #19]
      break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80052a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052ac:	4b51      	ldr	r3, [pc, #324]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	494e      	ldr	r1, [pc, #312]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052c2:	e001      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 809e 	beq.w	8005412 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d6:	2300      	movs	r3, #0
 80052d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052da:	4b46      	ldr	r3, [pc, #280]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f0:	4b40      	ldr	r3, [pc, #256]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	4a3f      	ldr	r2, [pc, #252]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6593      	str	r3, [r2, #88]	; 0x58
 80052fc:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005308:	2301      	movs	r3, #1
 800530a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800530c:	4b3a      	ldr	r3, [pc, #232]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a39      	ldr	r2, [pc, #228]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005316:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005318:	f7fd ff14 	bl	8003144 <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800531e:	e009      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005320:	f7fd ff10 	bl	8003144 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d902      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	74fb      	strb	r3, [r7, #19]
        break;
 8005332:	e005      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005334:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0ef      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d15a      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005346:	4b2b      	ldr	r3, [pc, #172]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005350:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01e      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	429a      	cmp	r2, r3
 8005360:	d019      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	4a1b      	ldr	r2, [pc, #108]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800538e:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d016      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fd fed0 	bl	8003144 <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a6:	e00b      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a8:	f7fd fecc 	bl	8003144 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d902      	bls.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	74fb      	strb	r3, [r7, #19]
            break;
 80053be:	e006      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0ec      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	4904      	ldr	r1, [pc, #16]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053ea:	e009      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
 80053f0:	e006      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005400:	7c7b      	ldrb	r3, [r7, #17]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005406:	4b8a      	ldr	r3, [pc, #552]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	4a89      	ldr	r2, [pc, #548]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800540c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541e:	4b84      	ldr	r3, [pc, #528]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f023 0203 	bic.w	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	4980      	ldr	r1, [pc, #512]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005440:	4b7b      	ldr	r3, [pc, #492]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f023 020c 	bic.w	r2, r3, #12
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	4978      	ldr	r1, [pc, #480]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005462:	4b73      	ldr	r3, [pc, #460]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	496f      	ldr	r1, [pc, #444]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005484:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	4967      	ldr	r1, [pc, #412]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a6:	4b62      	ldr	r3, [pc, #392]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	495e      	ldr	r1, [pc, #376]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054c8:	4b59      	ldr	r3, [pc, #356]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	4956      	ldr	r1, [pc, #344]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ea:	4b51      	ldr	r3, [pc, #324]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	494d      	ldr	r1, [pc, #308]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d028      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800550c:	4b48      	ldr	r3, [pc, #288]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	4945      	ldr	r1, [pc, #276]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552a:	d106      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552c:	4b40      	ldr	r3, [pc, #256]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a3f      	ldr	r2, [pc, #252]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	60d3      	str	r3, [r2, #12]
 8005538:	e011      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005542:	d10c      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	2101      	movs	r1, #1
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f882 	bl	8005654 <RCCEx_PLLSAI1_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d028      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800556a:	4b31      	ldr	r3, [pc, #196]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	492d      	ldr	r1, [pc, #180]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005588:	d106      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558a:	4b29      	ldr	r3, [pc, #164]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4a28      	ldr	r2, [pc, #160]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005594:	60d3      	str	r3, [r2, #12]
 8005596:	e011      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	2101      	movs	r1, #1
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f853 	bl	8005654 <RCCEx_PLLSAI1_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01c      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d6:	4916      	ldr	r1, [pc, #88]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e6:	d10c      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	2102      	movs	r1, #2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f830 	bl	8005654 <RCCEx_PLLSAI1_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800560e:	4b08      	ldr	r3, [pc, #32]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561c:	4904      	ldr	r1, [pc, #16]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005624:	7cbb      	ldrb	r3, [r7, #18]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40021000 	.word	0x40021000

08005634 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a04      	ldr	r2, [pc, #16]	; (8005650 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800563e:	f043 0304 	orr.w	r3, r3, #4
 8005642:	6013      	str	r3, [r2, #0]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000

08005654 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005662:	4b74      	ldr	r3, [pc, #464]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d018      	beq.n	80056a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800566e:	4b71      	ldr	r3, [pc, #452]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0203 	and.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d10d      	bne.n	800569a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
       ||
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005686:	4b6b      	ldr	r3, [pc, #428]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	091b      	lsrs	r3, r3, #4
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
       ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d047      	beq.n	800572a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
 800569e:	e044      	b.n	800572a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d018      	beq.n	80056da <RCCEx_PLLSAI1_Config+0x86>
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d825      	bhi.n	80056f8 <RCCEx_PLLSAI1_Config+0xa4>
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d002      	beq.n	80056b6 <RCCEx_PLLSAI1_Config+0x62>
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d009      	beq.n	80056c8 <RCCEx_PLLSAI1_Config+0x74>
 80056b4:	e020      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056b6:	4b5f      	ldr	r3, [pc, #380]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11d      	bne.n	80056fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c6:	e01a      	b.n	80056fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056c8:	4b5a      	ldr	r3, [pc, #360]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d116      	bne.n	8005702 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d8:	e013      	b.n	8005702 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056da:	4b56      	ldr	r3, [pc, #344]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056e6:	4b53      	ldr	r3, [pc, #332]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056f6:	e006      	b.n	8005706 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e004      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005706:	bf00      	nop
    }

    if(status == HAL_OK)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10d      	bne.n	800572a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800570e:	4b49      	ldr	r3, [pc, #292]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	430b      	orrs	r3, r1
 8005724:	4943      	ldr	r1, [pc, #268]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005726:	4313      	orrs	r3, r2
 8005728:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d17c      	bne.n	800582a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005730:	4b40      	ldr	r3, [pc, #256]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3f      	ldr	r2, [pc, #252]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800573a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd fd02 	bl	8003144 <HAL_GetTick>
 8005740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005742:	e009      	b.n	8005758 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005744:	f7fd fcfe 	bl	8003144 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d902      	bls.n	8005758 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	73fb      	strb	r3, [r7, #15]
        break;
 8005756:	e005      	b.n	8005764 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005758:	4b36      	ldr	r3, [pc, #216]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ef      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d15f      	bne.n	800582a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d110      	bne.n	8005792 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005770:	4b30      	ldr	r3, [pc, #192]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005778:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6892      	ldr	r2, [r2, #8]
 8005780:	0211      	lsls	r1, r2, #8
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68d2      	ldr	r2, [r2, #12]
 8005786:	06d2      	lsls	r2, r2, #27
 8005788:	430a      	orrs	r2, r1
 800578a:	492a      	ldr	r1, [pc, #168]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800578c:	4313      	orrs	r3, r2
 800578e:	610b      	str	r3, [r1, #16]
 8005790:	e027      	b.n	80057e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d112      	bne.n	80057be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005798:	4b26      	ldr	r3, [pc, #152]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6892      	ldr	r2, [r2, #8]
 80057a8:	0211      	lsls	r1, r2, #8
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6912      	ldr	r2, [r2, #16]
 80057ae:	0852      	lsrs	r2, r2, #1
 80057b0:	3a01      	subs	r2, #1
 80057b2:	0552      	lsls	r2, r2, #21
 80057b4:	430a      	orrs	r2, r1
 80057b6:	491f      	ldr	r1, [pc, #124]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	610b      	str	r3, [r1, #16]
 80057bc:	e011      	b.n	80057e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057be:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6892      	ldr	r2, [r2, #8]
 80057ce:	0211      	lsls	r1, r2, #8
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6952      	ldr	r2, [r2, #20]
 80057d4:	0852      	lsrs	r2, r2, #1
 80057d6:	3a01      	subs	r2, #1
 80057d8:	0652      	lsls	r2, r2, #25
 80057da:	430a      	orrs	r2, r1
 80057dc:	4915      	ldr	r1, [pc, #84]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057e2:	4b14      	ldr	r3, [pc, #80]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ee:	f7fd fca9 	bl	8003144 <HAL_GetTick>
 80057f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057f4:	e009      	b.n	800580a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057f6:	f7fd fca5 	bl	8003144 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d902      	bls.n	800580a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	73fb      	strb	r3, [r7, #15]
          break;
 8005808:	e005      	b.n	8005816 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ef      	beq.n	80057f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	4903      	ldr	r1, [pc, #12]	; (8005834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005826:	4313      	orrs	r3, r2
 8005828:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000

08005838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e095      	b.n	8005976 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d108      	bne.n	8005864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800585a:	d009      	beq.n	8005870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	61da      	str	r2, [r3, #28]
 8005862:	e005      	b.n	8005870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fd f9b2 	bl	8002bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b0:	d902      	bls.n	80058b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e002      	b.n	80058be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058c6:	d007      	beq.n	80058d8 <HAL_SPI_Init+0xa0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	ea42 0103 	orr.w	r1, r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	0c1b      	lsrs	r3, r3, #16
 8005934:	f003 0204 	and.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005954:	ea42 0103 	orr.w	r1, r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b088      	sub	sp, #32
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_SPI_Transmit+0x22>
 800599c:	2302      	movs	r3, #2
 800599e:	e158      	b.n	8005c52 <HAL_SPI_Transmit+0x2d4>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059a8:	f7fd fbcc 	bl	8003144 <HAL_GetTick>
 80059ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d002      	beq.n	80059c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059c2:	e13d      	b.n	8005c40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_SPI_Transmit+0x52>
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059d4:	e134      	b.n	8005c40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2203      	movs	r2, #3
 80059da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a20:	d10f      	bne.n	8005a42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d007      	beq.n	8005a60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a68:	d94b      	bls.n	8005b02 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit+0xfa>
 8005a72:	8afb      	ldrh	r3, [r7, #22]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d13e      	bne.n	8005af6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	1c9a      	adds	r2, r3, #2
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a9c:	e02b      	b.n	8005af6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d112      	bne.n	8005ad2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	1c9a      	adds	r2, r3, #2
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ad0:	e011      	b.n	8005af6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad2:	f7fd fb37 	bl	8003144 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d803      	bhi.n	8005aea <HAL_SPI_Transmit+0x16c>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d102      	bne.n	8005af0 <HAL_SPI_Transmit+0x172>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005af4:	e0a4      	b.n	8005c40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1ce      	bne.n	8005a9e <HAL_SPI_Transmit+0x120>
 8005b00:	e07c      	b.n	8005bfc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_Transmit+0x192>
 8005b0a:	8afb      	ldrh	r3, [r7, #22]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d170      	bne.n	8005bf2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d912      	bls.n	8005b40 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	1c9a      	adds	r2, r3, #2
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b02      	subs	r3, #2
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b3e:	e058      	b.n	8005bf2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	7812      	ldrb	r2, [r2, #0]
 8005b4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b66:	e044      	b.n	8005bf2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d12b      	bne.n	8005bce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d912      	bls.n	8005ba6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	881a      	ldrh	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b02      	subs	r3, #2
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba4:	e025      	b.n	8005bf2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	7812      	ldrb	r2, [r2, #0]
 8005bb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bcc:	e011      	b.n	8005bf2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bce:	f7fd fab9 	bl	8003144 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d803      	bhi.n	8005be6 <HAL_SPI_Transmit+0x268>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d102      	bne.n	8005bec <HAL_SPI_Transmit+0x26e>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bf0:	e026      	b.n	8005c40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1b5      	bne.n	8005b68 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fb5b 	bl	80062bc <SPI_EndRxTxTransaction>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e000      	b.n	8005c40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005c3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b08a      	sub	sp, #40	; 0x28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x26>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e1fb      	b.n	8006078 <HAL_SPI_TransmitReceive+0x41e>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c88:	f7fd fa5c 	bl	8003144 <HAL_GetTick>
 8005c8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c9c:	887b      	ldrh	r3, [r7, #2]
 8005c9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ca0:	887b      	ldrh	r3, [r7, #2]
 8005ca2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ca4:	7efb      	ldrb	r3, [r7, #27]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x6e>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d102      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x66>
 8005cba:	7efb      	ldrb	r3, [r7, #27]
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d003      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005cc6:	e1cd      	b.n	8006064 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_SPI_TransmitReceive+0x80>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_SPI_TransmitReceive+0x80>
 8005cd4:	887b      	ldrh	r3, [r7, #2]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ce0:	e1c0      	b.n	8006064 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d003      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2205      	movs	r2, #5
 8005cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	887a      	ldrh	r2, [r7, #2]
 8005d06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	887a      	ldrh	r2, [r7, #2]
 8005d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	887a      	ldrh	r2, [r7, #2]
 8005d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	887a      	ldrh	r2, [r7, #2]
 8005d22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d38:	d802      	bhi.n	8005d40 <HAL_SPI_TransmitReceive+0xe6>
 8005d3a:	8a3b      	ldrh	r3, [r7, #16]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d908      	bls.n	8005d52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	e007      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d007      	beq.n	8005d80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d88:	d97c      	bls.n	8005e84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_SPI_TransmitReceive+0x13e>
 8005d92:	8a7b      	ldrh	r3, [r7, #18]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d169      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dbc:	e056      	b.n	8005e6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d11b      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x1aa>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d016      	beq.n	8005e04 <HAL_SPI_TransmitReceive+0x1aa>
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d113      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	881a      	ldrh	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d11c      	bne.n	8005e4c <HAL_SPI_TransmitReceive+0x1f2>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d016      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	b292      	uxth	r2, r2
 8005e2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	1c9a      	adds	r2, r3, #2
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e4c:	f7fd f97a 	bl	8003144 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d807      	bhi.n	8005e6c <HAL_SPI_TransmitReceive+0x212>
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d003      	beq.n	8005e6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e6a:	e0fb      	b.n	8006064 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1a3      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x164>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d19d      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x164>
 8005e82:	e0df      	b.n	8006044 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_SPI_TransmitReceive+0x23a>
 8005e8c:	8a7b      	ldrh	r3, [r7, #18]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	f040 80cb 	bne.w	800602a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d912      	bls.n	8005ec4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	881a      	ldrh	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	1c9a      	adds	r2, r3, #2
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b02      	subs	r3, #2
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec2:	e0b2      	b.n	800602a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eea:	e09e      	b.n	800602a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d134      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x30a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02f      	beq.n	8005f64 <HAL_SPI_TransmitReceive+0x30a>
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d12c      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d912      	bls.n	8005f3a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b02      	subs	r3, #2
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f38:	e012      	b.n	8005f60 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d148      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x3aa>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d042      	beq.n	8006004 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d923      	bls.n	8005fd2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	b292      	uxth	r2, r2
 8005f96:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b02      	subs	r3, #2
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d81f      	bhi.n	8006000 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	e016      	b.n	8006000 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f103 020c 	add.w	r2, r3, #12
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	7812      	ldrb	r2, [r2, #0]
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006000:	2301      	movs	r3, #1
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006004:	f7fd f89e 	bl	8003144 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006010:	429a      	cmp	r2, r3
 8006012:	d803      	bhi.n	800601c <HAL_SPI_TransmitReceive+0x3c2>
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d102      	bne.n	8006022 <HAL_SPI_TransmitReceive+0x3c8>
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006028:	e01c      	b.n	8006064 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f af5b 	bne.w	8005eec <HAL_SPI_TransmitReceive+0x292>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	f47f af54 	bne.w	8005eec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f937 	bl	80062bc <SPI_EndRxTxTransaction>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d006      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
 8006060:	e000      	b.n	8006064 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006078:	4618      	mov	r0, r3
 800607a:	3728      	adds	r7, #40	; 0x28
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006090:	f7fd f858 	bl	8003144 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a0:	f7fd f850 	bl	8003144 <HAL_GetTick>
 80060a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060a6:	4b39      	ldr	r3, [pc, #228]	; (800618c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	015b      	lsls	r3, r3, #5
 80060ac:	0d1b      	lsrs	r3, r3, #20
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060b6:	e054      	b.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d050      	beq.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c0:	f7fd f840 	bl	8003144 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d902      	bls.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d13d      	bne.n	8006152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ee:	d111      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	d004      	beq.n	8006104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006102:	d107      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611c:	d10f      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800613c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e017      	b.n	8006182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3b01      	subs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4013      	ands	r3, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	429a      	cmp	r2, r3
 800617e:	d19b      	bne.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000004 	.word	0x20000004

08006190 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061a2:	f7fc ffcf 	bl	8003144 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	4413      	add	r3, r2
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80061b2:	f7fc ffc7 	bl	8003144 <HAL_GetTick>
 80061b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061c0:	4b3d      	ldr	r3, [pc, #244]	; (80062b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	00da      	lsls	r2, r3, #3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	0d1b      	lsrs	r3, r3, #20
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061d8:	e060      	b.n	800629c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061e0:	d107      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d050      	beq.n	800629c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061fa:	f7fc ffa3 	bl	8003144 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	429a      	cmp	r2, r3
 8006208:	d902      	bls.n	8006210 <SPI_WaitFifoStateUntilTimeout+0x80>
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d13d      	bne.n	800628c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800621e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006228:	d111      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006232:	d004      	beq.n	800623e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d107      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	d10f      	bne.n	8006278 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006276:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e010      	b.n	80062ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	3b01      	subs	r3, #1
 800629a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4013      	ands	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d196      	bne.n	80061da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3728      	adds	r7, #40	; 0x28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000004 	.word	0x20000004

080062bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ff5b 	bl	8006190 <SPI_WaitFifoStateUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e027      	b.n	8006340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fec0 	bl	8006080 <SPI_WaitFlagStateUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d007      	beq.n	8006316 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630a:	f043 0220 	orr.w	r2, r3, #32
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e014      	b.n	8006340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff ff34 	bl	8006190 <SPI_WaitFifoStateUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	f043 0220 	orr.w	r2, r3, #32
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e000      	b.n	8006340 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e049      	b.n	80063ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fc fc82 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f000 fa00 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d001      	beq.n	8006410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e03b      	b.n	8006488 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <HAL_TIM_Base_Start_IT+0x9c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x4e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643a:	d004      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x4e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <HAL_TIM_Base_Start_IT+0xa0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d115      	bne.n	8006472 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	4b13      	ldr	r3, [pc, #76]	; (800649c <HAL_TIM_Base_Start_IT+0xa4>)
 800644e:	4013      	ands	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b06      	cmp	r3, #6
 8006456:	d015      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x8c>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d011      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006470:	e008      	b.n	8006484 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e000      	b.n	8006486 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40014000 	.word	0x40014000
 800649c:	00010007 	.word	0x00010007

080064a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	f241 1311 	movw	r3, #4369	; 0x1111
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <HAL_TIM_Base_Stop_IT+0x48>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	f240 4344 	movw	r3, #1092	; 0x444
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_Base_Stop_IT+0x48>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d122      	bne.n	800655a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d11b      	bne.n	800655a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0202 	mvn.w	r2, #2
 800652a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f905 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 8006546:	e005      	b.n	8006554 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8f7 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f908 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b04      	cmp	r3, #4
 8006566:	d122      	bne.n	80065ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d11b      	bne.n	80065ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f06f 0204 	mvn.w	r2, #4
 800657e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f8db 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 800659a:	e005      	b.n	80065a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f8cd 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8de 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d122      	bne.n	8006602 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d11b      	bne.n	8006602 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0208 	mvn.w	r2, #8
 80065d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2204      	movs	r2, #4
 80065d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8b1 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 80065ee:	e005      	b.n	80065fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8a3 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8b4 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b10      	cmp	r3, #16
 800660e:	d122      	bne.n	8006656 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b10      	cmp	r3, #16
 800661c:	d11b      	bne.n	8006656 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f06f 0210 	mvn.w	r2, #16
 8006626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2208      	movs	r2, #8
 800662c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f887 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 8006642:	e005      	b.n	8006650 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f879 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f88a 	bl	8006764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10e      	bne.n	8006682 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f06f 0201 	mvn.w	r2, #1
 800667a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7fc f8a7 	bl	80027d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b80      	cmp	r3, #128	; 0x80
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f8dd 	bl	8006868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066bc:	d10e      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d107      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f8d0 	bl	800687c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e6:	2b40      	cmp	r3, #64	; 0x40
 80066e8:	d10e      	bne.n	8006708 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d107      	bne.n	8006708 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f838 	bl	8006778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b20      	cmp	r3, #32
 8006714:	d10e      	bne.n	8006734 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b20      	cmp	r3, #32
 8006722:	d107      	bne.n	8006734 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0220 	mvn.w	r2, #32
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f890 	bl	8006854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <TIM_Base_SetConfig+0xbc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_Base_SetConfig+0x20>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067aa:	d108      	bne.n	80067be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a21      	ldr	r2, [pc, #132]	; (8006848 <TIM_Base_SetConfig+0xbc>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00b      	beq.n	80067de <TIM_Base_SetConfig+0x52>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d007      	beq.n	80067de <TIM_Base_SetConfig+0x52>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1e      	ldr	r2, [pc, #120]	; (800684c <TIM_Base_SetConfig+0xc0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_Base_SetConfig+0x52>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1d      	ldr	r2, [pc, #116]	; (8006850 <TIM_Base_SetConfig+0xc4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d108      	bne.n	80067f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <TIM_Base_SetConfig+0xbc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d007      	beq.n	800682c <TIM_Base_SetConfig+0xa0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a0b      	ldr	r2, [pc, #44]	; (800684c <TIM_Base_SetConfig+0xc0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_Base_SetConfig+0xa0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0a      	ldr	r2, [pc, #40]	; (8006850 <TIM_Base_SetConfig+0xc4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d103      	bne.n	8006834 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	615a      	str	r2, [r3, #20]
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40012c00 	.word	0x40012c00
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400

08006854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e040      	b.n	8006924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fc fa06 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2224      	movs	r2, #36	; 0x24
 80068bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8c0 	bl	8006a54 <UART_SetConfig>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e022      	b.n	8006924 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fae0 	bl	8006eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800690a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fb67 	bl	8006ff0 <UART_CheckIdleState>
 8006922:	4603      	mov	r3, r0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006940:	2b20      	cmp	r3, #32
 8006942:	f040 8082 	bne.w	8006a4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_UART_Transmit+0x26>
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e07a      	b.n	8006a4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_UART_Transmit+0x38>
 8006960:	2302      	movs	r3, #2
 8006962:	e073      	b.n	8006a4c <HAL_UART_Transmit+0x120>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2221      	movs	r2, #33	; 0x21
 8006978:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800697a:	f7fc fbe3 	bl	8003144 <HAL_GetTick>
 800697e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006998:	d108      	bne.n	80069ac <HAL_UART_Transmit+0x80>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	e003      	b.n	80069b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069bc:	e02d      	b.n	8006a1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fb5a 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e039      	b.n	8006a4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	881a      	ldrh	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ea:	b292      	uxth	r2, r2
 80069ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	3302      	adds	r3, #2
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e008      	b.n	8006a08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	b292      	uxth	r2, r2
 8006a00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	3301      	adds	r3, #1
 8006a06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1cb      	bne.n	80069be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2140      	movs	r1, #64	; 0x40
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fb26 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e005      	b.n	8006a4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e000      	b.n	8006a4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a4a:	2302      	movs	r3, #2
  }
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a58:	b08a      	sub	sp, #40	; 0x28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4bb4      	ldr	r3, [pc, #720]	; (8006d54 <UART_SetConfig+0x300>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4aa9      	ldr	r2, [pc, #676]	; (8006d58 <UART_SetConfig+0x304>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abc:	4313      	orrs	r3, r2
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4aa0      	ldr	r2, [pc, #640]	; (8006d5c <UART_SetConfig+0x308>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d126      	bne.n	8006b2c <UART_SetConfig+0xd8>
 8006ade:	4ba0      	ldr	r3, [pc, #640]	; (8006d60 <UART_SetConfig+0x30c>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d81b      	bhi.n	8006b24 <UART_SetConfig+0xd0>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <UART_SetConfig+0xa0>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b15 	.word	0x08006b15
 8006afc:	08006b0d 	.word	0x08006b0d
 8006b00:	08006b1d 	.word	0x08006b1d
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e080      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b12:	e07c      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b14:	2304      	movs	r3, #4
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e078      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b22:	e074      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b24:	2310      	movs	r3, #16
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e070      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a8c      	ldr	r2, [pc, #560]	; (8006d64 <UART_SetConfig+0x310>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d138      	bne.n	8006ba8 <UART_SetConfig+0x154>
 8006b36:	4b8a      	ldr	r3, [pc, #552]	; (8006d60 <UART_SetConfig+0x30c>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f003 030c 	and.w	r3, r3, #12
 8006b40:	2b0c      	cmp	r3, #12
 8006b42:	d82d      	bhi.n	8006ba0 <UART_SetConfig+0x14c>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0xf8>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b81 	.word	0x08006b81
 8006b50:	08006ba1 	.word	0x08006ba1
 8006b54:	08006ba1 	.word	0x08006ba1
 8006b58:	08006ba1 	.word	0x08006ba1
 8006b5c:	08006b91 	.word	0x08006b91
 8006b60:	08006ba1 	.word	0x08006ba1
 8006b64:	08006ba1 	.word	0x08006ba1
 8006b68:	08006ba1 	.word	0x08006ba1
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006b99 	.word	0x08006b99
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b86:	e042      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8e:	e03e      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b90:	2304      	movs	r3, #4
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b96:	e03a      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9e:	e036      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba6:	e032      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a6a      	ldr	r2, [pc, #424]	; (8006d58 <UART_SetConfig+0x304>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d12a      	bne.n	8006c08 <UART_SetConfig+0x1b4>
 8006bb2:	4b6b      	ldr	r3, [pc, #428]	; (8006d60 <UART_SetConfig+0x30c>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc0:	d01a      	beq.n	8006bf8 <UART_SetConfig+0x1a4>
 8006bc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc6:	d81b      	bhi.n	8006c00 <UART_SetConfig+0x1ac>
 8006bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bcc:	d00c      	beq.n	8006be8 <UART_SetConfig+0x194>
 8006bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd2:	d815      	bhi.n	8006c00 <UART_SetConfig+0x1ac>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <UART_SetConfig+0x18c>
 8006bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bdc:	d008      	beq.n	8006bf0 <UART_SetConfig+0x19c>
 8006bde:	e00f      	b.n	8006c00 <UART_SetConfig+0x1ac>
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be6:	e012      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006be8:	2302      	movs	r3, #2
 8006bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bee:	e00e      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf6:	e00a      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfe:	e006      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006c00:	2310      	movs	r3, #16
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c06:	e002      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a51      	ldr	r2, [pc, #324]	; (8006d58 <UART_SetConfig+0x304>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d17a      	bne.n	8006d0e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d824      	bhi.n	8006c6a <UART_SetConfig+0x216>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x1d4>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c6b 	.word	0x08006c6b
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c6b 	.word	0x08006c6b
 8006c38:	08006c5b 	.word	0x08006c5b
 8006c3c:	08006c6b 	.word	0x08006c6b
 8006c40:	08006c6b 	.word	0x08006c6b
 8006c44:	08006c6b 	.word	0x08006c6b
 8006c48:	08006c63 	.word	0x08006c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fe fa70 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8006c50:	61f8      	str	r0, [r7, #28]
        break;
 8006c52:	e010      	b.n	8006c76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c54:	4b44      	ldr	r3, [pc, #272]	; (8006d68 <UART_SetConfig+0x314>)
 8006c56:	61fb      	str	r3, [r7, #28]
        break;
 8006c58:	e00d      	b.n	8006c76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5a:	f7fe f9d1 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8006c5e:	61f8      	str	r0, [r7, #28]
        break;
 8006c60:	e009      	b.n	8006c76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c66:	61fb      	str	r3, [r7, #28]
        break;
 8006c68:	e005      	b.n	8006c76 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8107 	beq.w	8006e8c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d305      	bcc.n	8006c9a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca0:	e0f4      	b.n	8006e8c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	461c      	mov	r4, r3
 8006ca8:	4615      	mov	r5, r2
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	022b      	lsls	r3, r5, #8
 8006cb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006cb8:	0222      	lsls	r2, r4, #8
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	6849      	ldr	r1, [r1, #4]
 8006cbe:	0849      	lsrs	r1, r1, #1
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	4688      	mov	r8, r1
 8006cc4:	4681      	mov	r9, r0
 8006cc6:	eb12 0a08 	adds.w	sl, r2, r8
 8006cca:	eb43 0b09 	adc.w	fp, r3, r9
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	603b      	str	r3, [r7, #0]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cdc:	4650      	mov	r0, sl
 8006cde:	4659      	mov	r1, fp
 8006ce0:	f7f9 ffd2 	bl	8000c88 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4613      	mov	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf2:	d308      	bcc.n	8006d06 <UART_SetConfig+0x2b2>
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfa:	d204      	bcs.n	8006d06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	60da      	str	r2, [r3, #12]
 8006d04:	e0c2      	b.n	8006e8c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d0c:	e0be      	b.n	8006e8c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d16:	d16a      	bne.n	8006dee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d834      	bhi.n	8006d8a <UART_SetConfig+0x336>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x2d4>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d75 	.word	0x08006d75
 8006d34:	08006d8b 	.word	0x08006d8b
 8006d38:	08006d7b 	.word	0x08006d7b
 8006d3c:	08006d8b 	.word	0x08006d8b
 8006d40:	08006d8b 	.word	0x08006d8b
 8006d44:	08006d8b 	.word	0x08006d8b
 8006d48:	08006d83 	.word	0x08006d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4c:	f7fe f9f0 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8006d50:	61f8      	str	r0, [r7, #28]
        break;
 8006d52:	e020      	b.n	8006d96 <UART_SetConfig+0x342>
 8006d54:	efff69f3 	.word	0xefff69f3
 8006d58:	40008000 	.word	0x40008000
 8006d5c:	40013800 	.word	0x40013800
 8006d60:	40021000 	.word	0x40021000
 8006d64:	40004400 	.word	0x40004400
 8006d68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d6c:	f7fe f9f6 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 8006d70:	61f8      	str	r0, [r7, #28]
        break;
 8006d72:	e010      	b.n	8006d96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d74:	4b4c      	ldr	r3, [pc, #304]	; (8006ea8 <UART_SetConfig+0x454>)
 8006d76:	61fb      	str	r3, [r7, #28]
        break;
 8006d78:	e00d      	b.n	8006d96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7a:	f7fe f941 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8006d7e:	61f8      	str	r0, [r7, #28]
        break;
 8006d80:	e009      	b.n	8006d96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	61fb      	str	r3, [r7, #28]
        break;
 8006d88:	e005      	b.n	8006d96 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d077      	beq.n	8006e8c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	005a      	lsls	r2, r3, #1
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	441a      	add	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2b0f      	cmp	r3, #15
 8006db6:	d916      	bls.n	8006de6 <UART_SetConfig+0x392>
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbe:	d212      	bcs.n	8006de6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f023 030f 	bic.w	r3, r3, #15
 8006dc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	8afb      	ldrh	r3, [r7, #22]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	8afa      	ldrh	r2, [r7, #22]
 8006de2:	60da      	str	r2, [r3, #12]
 8006de4:	e052      	b.n	8006e8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dec:	e04e      	b.n	8006e8c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d827      	bhi.n	8006e46 <UART_SetConfig+0x3f2>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <UART_SetConfig+0x3a8>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e29 	.word	0x08006e29
 8006e04:	08006e31 	.word	0x08006e31
 8006e08:	08006e47 	.word	0x08006e47
 8006e0c:	08006e37 	.word	0x08006e37
 8006e10:	08006e47 	.word	0x08006e47
 8006e14:	08006e47 	.word	0x08006e47
 8006e18:	08006e47 	.word	0x08006e47
 8006e1c:	08006e3f 	.word	0x08006e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e20:	f7fe f986 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8006e24:	61f8      	str	r0, [r7, #28]
        break;
 8006e26:	e014      	b.n	8006e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e28:	f7fe f998 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 8006e2c:	61f8      	str	r0, [r7, #28]
        break;
 8006e2e:	e010      	b.n	8006e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e30:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <UART_SetConfig+0x454>)
 8006e32:	61fb      	str	r3, [r7, #28]
        break;
 8006e34:	e00d      	b.n	8006e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e36:	f7fe f8e3 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8006e3a:	61f8      	str	r0, [r7, #28]
        break;
 8006e3c:	e009      	b.n	8006e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e42:	61fb      	str	r3, [r7, #28]
        break;
 8006e44:	e005      	b.n	8006e52 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e50:	bf00      	nop
    }

    if (pclk != 0U)
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d019      	beq.n	8006e8c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	085a      	lsrs	r2, r3, #1
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	441a      	add	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b0f      	cmp	r3, #15
 8006e70:	d909      	bls.n	8006e86 <UART_SetConfig+0x432>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d205      	bcs.n	8006e86 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60da      	str	r2, [r3, #12]
 8006e84:	e002      	b.n	8006e8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea6:	bf00      	nop
 8006ea8:	00f42400 	.word	0x00f42400

08006eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01a      	beq.n	8006fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006faa:	d10a      	bne.n	8006fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	605a      	str	r2, [r3, #4]
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007000:	f7fc f8a0 	bl	8003144 <HAL_GetTick>
 8007004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b08      	cmp	r3, #8
 8007012:	d10e      	bne.n	8007032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f82d 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e023      	b.n	800707a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b04      	cmp	r3, #4
 800703e:	d10e      	bne.n	800705e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f817 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e00d      	b.n	800707a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b09c      	sub	sp, #112	; 0x70
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	e0a5      	b.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	f000 80a1 	beq.w	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709e:	f7fc f851 	bl	8003144 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80070ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d13e      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070c8:	667b      	str	r3, [r7, #100]	; 0x64
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e6      	bne.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	663b      	str	r3, [r7, #96]	; 0x60
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007106:	64ba      	str	r2, [r7, #72]	; 0x48
 8007108:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800710c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e067      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d04f      	beq.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714e:	d147      	bne.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007158:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800716e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
 800717a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800717e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e6      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3308      	adds	r3, #8
 8007192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	613b      	str	r3, [r7, #16]
   return(result);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3308      	adds	r3, #8
 80071aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071ac:	623a      	str	r2, [r7, #32]
 80071ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	69f9      	ldr	r1, [r7, #28]
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e5      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2220      	movs	r2, #32
 80071c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2220      	movs	r2, #32
 80071ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e010      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f43f af4a 	beq.w	8007094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3770      	adds	r7, #112	; 0x70
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007210:	4904      	ldr	r1, [pc, #16]	; (8007224 <MX_FATFS_Init+0x18>)
 8007212:	4805      	ldr	r0, [pc, #20]	; (8007228 <MX_FATFS_Init+0x1c>)
 8007214:	f003 fa58 	bl	800a6c8 <FATFS_LinkDriver>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <MX_FATFS_Init+0x20>)
 800721e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007220:	bf00      	nop
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20002880 	.word	0x20002880
 8007228:	20000010 	.word	0x20000010
 800722c:	2000287c 	.word	0x2000287c

08007230 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007234:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	4618      	mov	r0, r3
 800724e:	f7fa fc33 	bl	8001ab8 <SD_disk_initialize>
 8007252:	4603      	mov	r3, r0
 8007254:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	4603      	mov	r3, r0
 8007266:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	4618      	mov	r0, r3
 800726c:	f7fa fd0a 	bl	8001c84 <SD_disk_status>
 8007270:	4603      	mov	r3, r0
 8007272:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800728c:	7bf8      	ldrb	r0, [r7, #15]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	f7fa fd0c 	bl	8001cb0 <SD_disk_read>
 8007298:	4603      	mov	r3, r0
 800729a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80072b4:	7bf8      	ldrb	r0, [r7, #15]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	f7fa fd62 	bl	8001d84 <SD_disk_write>
 80072c0:	4603      	mov	r3, r0
 80072c2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	603a      	str	r2, [r7, #0]
 80072d6:	71fb      	strb	r3, [r7, #7]
 80072d8:	460b      	mov	r3, r1
 80072da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	79b9      	ldrb	r1, [r7, #6]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fa fdd0 	bl	8001e8c <SD_disk_ioctl>
 80072ec:	4603      	mov	r3, r0
 80072ee:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	4a08      	ldr	r2, [pc, #32]	; (8007328 <disk_status+0x30>)
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	79fa      	ldrb	r2, [r7, #7]
 8007310:	4905      	ldr	r1, [pc, #20]	; (8007328 <disk_status+0x30>)
 8007312:	440a      	add	r2, r1
 8007314:	7a12      	ldrb	r2, [r2, #8]
 8007316:	4610      	mov	r0, r2
 8007318:	4798      	blx	r3
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20002aac 	.word	0x20002aac

0800732c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	4a0d      	ldr	r2, [pc, #52]	; (8007374 <disk_initialize+0x48>)
 800733e:	5cd3      	ldrb	r3, [r2, r3]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d111      	bne.n	8007368 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <disk_initialize+0x48>)
 8007348:	2101      	movs	r1, #1
 800734a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	4a09      	ldr	r2, [pc, #36]	; (8007374 <disk_initialize+0x48>)
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	79fa      	ldrb	r2, [r7, #7]
 800735a:	4906      	ldr	r1, [pc, #24]	; (8007374 <disk_initialize+0x48>)
 800735c:	440a      	add	r2, r1
 800735e:	7a12      	ldrb	r2, [r2, #8]
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20002aac 	.word	0x20002aac

08007378 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <disk_read+0x3c>)
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	689c      	ldr	r4, [r3, #8]
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	4a07      	ldr	r2, [pc, #28]	; (80073b4 <disk_read+0x3c>)
 8007398:	4413      	add	r3, r2
 800739a:	7a18      	ldrb	r0, [r3, #8]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	47a0      	blx	r4
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd90      	pop	{r4, r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20002aac 	.word	0x20002aac

080073b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	4a0a      	ldr	r2, [pc, #40]	; (80073f4 <disk_write+0x3c>)
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	68dc      	ldr	r4, [r3, #12]
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4a07      	ldr	r2, [pc, #28]	; (80073f4 <disk_write+0x3c>)
 80073d8:	4413      	add	r3, r2
 80073da:	7a18      	ldrb	r0, [r3, #8]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	47a0      	blx	r4
 80073e4:	4603      	mov	r3, r0
 80073e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd90      	pop	{r4, r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20002aac 	.word	0x20002aac

080073f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	603a      	str	r2, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
 8007404:	460b      	mov	r3, r1
 8007406:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	4a09      	ldr	r2, [pc, #36]	; (8007430 <disk_ioctl+0x38>)
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	79fa      	ldrb	r2, [r7, #7]
 8007416:	4906      	ldr	r1, [pc, #24]	; (8007430 <disk_ioctl+0x38>)
 8007418:	440a      	add	r2, r1
 800741a:	7a10      	ldrb	r0, [r2, #8]
 800741c:	79b9      	ldrb	r1, [r7, #6]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4798      	blx	r3
 8007422:	4603      	mov	r3, r0
 8007424:	73fb      	strb	r3, [r7, #15]
  return res;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20002aac 	.word	0x20002aac

08007434 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3301      	adds	r3, #1
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007444:	89fb      	ldrh	r3, [r7, #14]
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	b21a      	sxth	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b21b      	sxth	r3, r3
 8007450:	4313      	orrs	r3, r2
 8007452:	b21b      	sxth	r3, r3
 8007454:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007456:	89fb      	ldrh	r3, [r7, #14]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3303      	adds	r3, #3
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	3202      	adds	r2, #2
 800747c:	7812      	ldrb	r2, [r2, #0]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	3201      	adds	r2, #1
 800748a:	7812      	ldrb	r2, [r2, #0]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	7812      	ldrb	r2, [r2, #0]
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]
	return rv;
 800749c:	68fb      	ldr	r3, [r7, #12]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	887a      	ldrh	r2, [r7, #2]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	887b      	ldrh	r3, [r7, #2]
 80074c4:	0a1b      	lsrs	r3, r3, #8
 80074c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	887a      	ldrh	r2, [r7, #2]
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	0a1b      	lsrs	r3, r3, #8
 800751e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00d      	beq.n	800756e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	1c53      	adds	r3, r2, #1
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	1c59      	adds	r1, r3, #1
 800755c:	6179      	str	r1, [r7, #20]
 800755e:	7812      	ldrb	r2, [r2, #0]
 8007560:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3b01      	subs	r3, #1
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f1      	bne.n	8007552 <mem_cpy+0x1a>
	}
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	617a      	str	r2, [r7, #20]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3b01      	subs	r3, #1
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f3      	bne.n	800758a <mem_set+0x10>
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80075b0:	b480      	push	{r7}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	61fa      	str	r2, [r7, #28]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4619      	mov	r1, r3
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	61ba      	str	r2, [r7, #24]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	1acb      	subs	r3, r1, r3
 80075dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <mem_cmp+0x40>
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0eb      	beq.n	80075c8 <mem_cmp+0x18>

	return r;
 80075f0:	697b      	ldr	r3, [r7, #20]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3724      	adds	r7, #36	; 0x24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007608:	e002      	b.n	8007610 <chk_chr+0x12>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3301      	adds	r3, #1
 800760e:	607b      	str	r3, [r7, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <chk_chr+0x26>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	4293      	cmp	r3, r2
 8007622:	d1f2      	bne.n	800760a <chk_chr+0xc>
	return *str;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	781b      	ldrb	r3, [r3, #0]
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800763e:	2300      	movs	r3, #0
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	e029      	b.n	800769c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007648:	4a27      	ldr	r2, [pc, #156]	; (80076e8 <chk_lock+0xb4>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	4413      	add	r3, r2
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01d      	beq.n	8007692 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007656:	4a24      	ldr	r2, [pc, #144]	; (80076e8 <chk_lock+0xb4>)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	4413      	add	r3, r2
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d116      	bne.n	8007696 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <chk_lock+0xb4>)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	4413      	add	r3, r2
 8007670:	3304      	adds	r3, #4
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007678:	429a      	cmp	r2, r3
 800767a:	d10c      	bne.n	8007696 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800767c:	4a1a      	ldr	r2, [pc, #104]	; (80076e8 <chk_lock+0xb4>)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	4413      	add	r3, r2
 8007684:	3308      	adds	r3, #8
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800768c:	429a      	cmp	r2, r3
 800768e:	d102      	bne.n	8007696 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007690:	e007      	b.n	80076a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007692:	2301      	movs	r3, #1
 8007694:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d9d2      	bls.n	8007648 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d109      	bne.n	80076bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d102      	bne.n	80076b4 <chk_lock+0x80>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d101      	bne.n	80076b8 <chk_lock+0x84>
 80076b4:	2300      	movs	r3, #0
 80076b6:	e010      	b.n	80076da <chk_lock+0xa6>
 80076b8:	2312      	movs	r3, #18
 80076ba:	e00e      	b.n	80076da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d108      	bne.n	80076d4 <chk_lock+0xa0>
 80076c2:	4a09      	ldr	r2, [pc, #36]	; (80076e8 <chk_lock+0xb4>)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	4413      	add	r3, r2
 80076ca:	330c      	adds	r3, #12
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d2:	d101      	bne.n	80076d8 <chk_lock+0xa4>
 80076d4:	2310      	movs	r3, #16
 80076d6:	e000      	b.n	80076da <chk_lock+0xa6>
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	2000288c 	.word	0x2000288c

080076ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	e002      	b.n	80076fe <enq_lock+0x12>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3301      	adds	r3, #1
 80076fc:	607b      	str	r3, [r7, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d806      	bhi.n	8007712 <enq_lock+0x26>
 8007704:	4a09      	ldr	r2, [pc, #36]	; (800772c <enq_lock+0x40>)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	4413      	add	r3, r2
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f2      	bne.n	80076f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b02      	cmp	r3, #2
 8007716:	bf14      	ite	ne
 8007718:	2301      	movne	r3, #1
 800771a:	2300      	moveq	r3, #0
 800771c:	b2db      	uxtb	r3, r3
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	2000288c 	.word	0x2000288c

08007730 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	e01f      	b.n	8007780 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007740:	4a41      	ldr	r2, [pc, #260]	; (8007848 <inc_lock+0x118>)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	4413      	add	r3, r2
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d113      	bne.n	800777a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007752:	4a3d      	ldr	r2, [pc, #244]	; (8007848 <inc_lock+0x118>)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	4413      	add	r3, r2
 800775a:	3304      	adds	r3, #4
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007762:	429a      	cmp	r2, r3
 8007764:	d109      	bne.n	800777a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007766:	4a38      	ldr	r2, [pc, #224]	; (8007848 <inc_lock+0x118>)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	4413      	add	r3, r2
 800776e:	3308      	adds	r3, #8
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007776:	429a      	cmp	r2, r3
 8007778:	d006      	beq.n	8007788 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d9dc      	bls.n	8007740 <inc_lock+0x10>
 8007786:	e000      	b.n	800778a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007788:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d132      	bne.n	80077f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e002      	b.n	800779c <inc_lock+0x6c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3301      	adds	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d806      	bhi.n	80077b0 <inc_lock+0x80>
 80077a2:	4a29      	ldr	r2, [pc, #164]	; (8007848 <inc_lock+0x118>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	4413      	add	r3, r2
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f2      	bne.n	8007796 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d101      	bne.n	80077ba <inc_lock+0x8a>
 80077b6:	2300      	movs	r3, #0
 80077b8:	e040      	b.n	800783c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4922      	ldr	r1, [pc, #136]	; (8007848 <inc_lock+0x118>)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	440b      	add	r3, r1
 80077c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	491e      	ldr	r1, [pc, #120]	; (8007848 <inc_lock+0x118>)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	440b      	add	r3, r1
 80077d4:	3304      	adds	r3, #4
 80077d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	695a      	ldr	r2, [r3, #20]
 80077dc:	491a      	ldr	r1, [pc, #104]	; (8007848 <inc_lock+0x118>)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	440b      	add	r3, r1
 80077e4:	3308      	adds	r3, #8
 80077e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077e8:	4a17      	ldr	r2, [pc, #92]	; (8007848 <inc_lock+0x118>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	4413      	add	r3, r2
 80077f0:	330c      	adds	r3, #12
 80077f2:	2200      	movs	r2, #0
 80077f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <inc_lock+0xe0>
 80077fc:	4a12      	ldr	r2, [pc, #72]	; (8007848 <inc_lock+0x118>)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	4413      	add	r3, r2
 8007804:	330c      	adds	r3, #12
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <inc_lock+0xe0>
 800780c:	2300      	movs	r3, #0
 800780e:	e015      	b.n	800783c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d108      	bne.n	8007828 <inc_lock+0xf8>
 8007816:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <inc_lock+0x118>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	4413      	add	r3, r2
 800781e:	330c      	adds	r3, #12
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	e001      	b.n	800782c <inc_lock+0xfc>
 8007828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800782c:	4906      	ldr	r1, [pc, #24]	; (8007848 <inc_lock+0x118>)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	440b      	add	r3, r1
 8007834:	330c      	adds	r3, #12
 8007836:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	2000288c 	.word	0x2000288c

0800784c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3b01      	subs	r3, #1
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d825      	bhi.n	80078ac <dec_lock+0x60>
		n = Files[i].ctr;
 8007860:	4a17      	ldr	r2, [pc, #92]	; (80078c0 <dec_lock+0x74>)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	4413      	add	r3, r2
 8007868:	330c      	adds	r3, #12
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800786e:	89fb      	ldrh	r3, [r7, #14]
 8007870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007874:	d101      	bne.n	800787a <dec_lock+0x2e>
 8007876:	2300      	movs	r3, #0
 8007878:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800787a:	89fb      	ldrh	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <dec_lock+0x3a>
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	3b01      	subs	r3, #1
 8007884:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007886:	4a0e      	ldr	r2, [pc, #56]	; (80078c0 <dec_lock+0x74>)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	4413      	add	r3, r2
 800788e:	330c      	adds	r3, #12
 8007890:	89fa      	ldrh	r2, [r7, #14]
 8007892:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007894:	89fb      	ldrh	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <dec_lock+0x5a>
 800789a:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <dec_lock+0x74>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	4413      	add	r3, r2
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	737b      	strb	r3, [r7, #13]
 80078aa:	e001      	b.n	80078b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80078ac:	2302      	movs	r3, #2
 80078ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80078b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	2000288c 	.word	0x2000288c

080078c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e010      	b.n	80078f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078d2:	4a0d      	ldr	r2, [pc, #52]	; (8007908 <clear_lock+0x44>)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	4413      	add	r3, r2
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d105      	bne.n	80078ee <clear_lock+0x2a>
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <clear_lock+0x44>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	4413      	add	r3, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3301      	adds	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d9eb      	bls.n	80078d2 <clear_lock+0xe>
	}
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	2000288c 	.word	0x2000288c

0800790c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	78db      	ldrb	r3, [r3, #3]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d034      	beq.n	800798a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007924:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7858      	ldrb	r0, [r3, #1]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007930:	2301      	movs	r3, #1
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	f7ff fd40 	bl	80073b8 <disk_write>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <sync_window+0x38>
			res = FR_DISK_ERR;
 800793e:	2301      	movs	r3, #1
 8007940:	73fb      	strb	r3, [r7, #15]
 8007942:	e022      	b.n	800798a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	1ad2      	subs	r2, r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	429a      	cmp	r2, r3
 8007958:	d217      	bcs.n	800798a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	789b      	ldrb	r3, [r3, #2]
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	e010      	b.n	8007984 <sync_window+0x78>
					wsect += fs->fsize;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4413      	add	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7858      	ldrb	r0, [r3, #1]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007976:	2301      	movs	r3, #1
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	f7ff fd1d 	bl	80073b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3b01      	subs	r3, #1
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d8eb      	bhi.n	8007962 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d01b      	beq.n	80079e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff ffad 	bl	800790c <sync_window>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d113      	bne.n	80079e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7858      	ldrb	r0, [r3, #1]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079c6:	2301      	movs	r3, #1
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	f7ff fcd5 	bl	8007378 <disk_read>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295
 80079d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079da:	2301      	movs	r3, #1
 80079dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff ff87 	bl	800790c <sync_window>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d159      	bne.n	8007abc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d149      	bne.n	8007aa4 <sync_fs+0xb4>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	791b      	ldrb	r3, [r3, #4]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d145      	bne.n	8007aa4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	899b      	ldrh	r3, [r3, #12]
 8007a22:	461a      	mov	r2, r3
 8007a24:	2100      	movs	r1, #0
 8007a26:	f7ff fda8 	bl	800757a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3338      	adds	r3, #56	; 0x38
 8007a2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a32:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fd37 	bl	80074aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3338      	adds	r3, #56	; 0x38
 8007a40:	4921      	ldr	r1, [pc, #132]	; (8007ac8 <sync_fs+0xd8>)
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fd4c 	bl	80074e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3338      	adds	r3, #56	; 0x38
 8007a4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a50:	491e      	ldr	r1, [pc, #120]	; (8007acc <sync_fs+0xdc>)
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff fd44 	bl	80074e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3338      	adds	r3, #56	; 0x38
 8007a5c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7ff fd3a 	bl	80074e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3338      	adds	r3, #56	; 0x38
 8007a70:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7ff fd30 	bl	80074e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7858      	ldrb	r0, [r3, #1]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f7ff fc8d 	bl	80073b8 <disk_write>
			fs->fsi_flag = 0;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	785b      	ldrb	r3, [r3, #1]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fca3 	bl	80073f8 <disk_ioctl>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <sync_fs+0xcc>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	41615252 	.word	0x41615252
 8007acc:	61417272 	.word	0x61417272

08007ad0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	3b02      	subs	r3, #2
 8007ade:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	3b02      	subs	r3, #2
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d301      	bcc.n	8007af0 <clust2sect+0x20>
 8007aec:	2300      	movs	r3, #0
 8007aee:	e008      	b.n	8007b02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	895b      	ldrh	r3, [r3, #10]
 8007af4:	461a      	mov	r2, r3
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	fb03 f202 	mul.w	r2, r3, r2
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	4413      	add	r3, r2
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d904      	bls.n	8007b2e <get_fat+0x20>
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d302      	bcc.n	8007b34 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b2e:	2301      	movs	r3, #1
 8007b30:	617b      	str	r3, [r7, #20]
 8007b32:	e0bb      	b.n	8007cac <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b34:	f04f 33ff 	mov.w	r3, #4294967295
 8007b38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f000 8083 	beq.w	8007c4a <get_fat+0x13c>
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	f300 80a7 	bgt.w	8007c98 <get_fat+0x18a>
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d002      	beq.n	8007b54 <get_fat+0x46>
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d056      	beq.n	8007c00 <get_fat+0xf2>
 8007b52:	e0a1      	b.n	8007c98 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	899b      	ldrh	r3, [r3, #12]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b72:	4413      	add	r3, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	6938      	ldr	r0, [r7, #16]
 8007b78:	f7ff ff0c 	bl	8007994 <move_window>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f040 808d 	bne.w	8007c9e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	60fa      	str	r2, [r7, #12]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	8992      	ldrh	r2, [r2, #12]
 8007b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b92:	fb01 f202 	mul.w	r2, r1, r2
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ba0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	899b      	ldrh	r3, [r3, #12]
 8007baa:	4619      	mov	r1, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6938      	ldr	r0, [r7, #16]
 8007bb8:	f7ff feec 	bl	8007994 <move_window>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d16f      	bne.n	8007ca2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	899b      	ldrh	r3, [r3, #12]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bce:	fb01 f202 	mul.w	r2, r1, r2
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	461a      	mov	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <get_fat+0xe8>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	091b      	lsrs	r3, r3, #4
 8007bf4:	e002      	b.n	8007bfc <get_fat+0xee>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bfc:	617b      	str	r3, [r7, #20]
			break;
 8007bfe:	e055      	b.n	8007cac <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	899b      	ldrh	r3, [r3, #12]
 8007c08:	085b      	lsrs	r3, r3, #1
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c14:	4413      	add	r3, r2
 8007c16:	4619      	mov	r1, r3
 8007c18:	6938      	ldr	r0, [r7, #16]
 8007c1a:	f7ff febb 	bl	8007994 <move_window>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d140      	bne.n	8007ca6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	8992      	ldrh	r2, [r2, #12]
 8007c32:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c36:	fb00 f202 	mul.w	r2, r0, r2
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff fbf8 	bl	8007434 <ld_word>
 8007c44:	4603      	mov	r3, r0
 8007c46:	617b      	str	r3, [r7, #20]
			break;
 8007c48:	e030      	b.n	8007cac <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	899b      	ldrh	r3, [r3, #12]
 8007c52:	089b      	lsrs	r3, r3, #2
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c5e:	4413      	add	r3, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	6938      	ldr	r0, [r7, #16]
 8007c64:	f7ff fe96 	bl	8007994 <move_window>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d11d      	bne.n	8007caa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	8992      	ldrh	r2, [r2, #12]
 8007c7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c80:	fb00 f202 	mul.w	r2, r0, r2
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	440b      	add	r3, r1
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff fbeb 	bl	8007464 <ld_dword>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c94:	617b      	str	r3, [r7, #20]
			break;
 8007c96:	e009      	b.n	8007cac <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c98:	2301      	movs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e006      	b.n	8007cac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c9e:	bf00      	nop
 8007ca0:	e004      	b.n	8007cac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ca2:	bf00      	nop
 8007ca4:	e002      	b.n	8007cac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ca6:	bf00      	nop
 8007ca8:	e000      	b.n	8007cac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007caa:	bf00      	nop
		}
	}

	return val;
 8007cac:	697b      	ldr	r3, [r7, #20]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cb6:	b590      	push	{r4, r7, lr}
 8007cb8:	b089      	sub	sp, #36	; 0x24
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	f240 8102 	bls.w	8007ed2 <put_fat+0x21c>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	f080 80fc 	bcs.w	8007ed2 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	f000 80b6 	beq.w	8007e50 <put_fat+0x19a>
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	f300 80fd 	bgt.w	8007ee4 <put_fat+0x22e>
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d003      	beq.n	8007cf6 <put_fat+0x40>
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	f000 8083 	beq.w	8007dfa <put_fat+0x144>
 8007cf4:	e0f6      	b.n	8007ee4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	4413      	add	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	899b      	ldrh	r3, [r3, #12]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d14:	4413      	add	r3, r2
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fe3b 	bl	8007994 <move_window>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d22:	7ffb      	ldrb	r3, [r7, #31]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 80d6 	bne.w	8007ed6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	61ba      	str	r2, [r7, #24]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	8992      	ldrh	r2, [r2, #12]
 8007d3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d3e:	fb00 f202 	mul.w	r2, r0, r2
 8007d42:	1a9b      	subs	r3, r3, r2
 8007d44:	440b      	add	r3, r1
 8007d46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00d      	beq.n	8007d6e <put_fat+0xb8>
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	b25b      	sxtb	r3, r3
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	b25a      	sxtb	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b25b      	sxtb	r3, r3
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	e001      	b.n	8007d72 <put_fat+0xbc>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	899b      	ldrh	r3, [r3, #12]
 8007d84:	4619      	mov	r1, r3
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d8c:	4413      	add	r3, r2
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff fdff 	bl	8007994 <move_window>
 8007d96:	4603      	mov	r3, r0
 8007d98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d9a:	7ffb      	ldrb	r3, [r7, #31]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 809c 	bne.w	8007eda <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	899b      	ldrh	r3, [r3, #12]
 8007dac:	461a      	mov	r2, r3
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007db4:	fb00 f202 	mul.w	r2, r0, r2
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	440b      	add	r3, r1
 8007dbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <put_fat+0x11a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	091b      	lsrs	r3, r3, #4
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	e00e      	b.n	8007dee <put_fat+0x138>
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	b25b      	sxtb	r3, r3
 8007dd6:	f023 030f 	bic.w	r3, r3, #15
 8007dda:	b25a      	sxtb	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	b25b      	sxtb	r3, r3
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	4313      	orrs	r3, r2
 8007dea:	b25b      	sxtb	r3, r3
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	70da      	strb	r2, [r3, #3]
			break;
 8007df8:	e074      	b.n	8007ee4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	899b      	ldrh	r3, [r3, #12]
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	4619      	mov	r1, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e0e:	4413      	add	r3, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff fdbe 	bl	8007994 <move_window>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e1c:	7ffb      	ldrb	r3, [r7, #31]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d15d      	bne.n	8007ede <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	8992      	ldrh	r2, [r2, #12]
 8007e30:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e34:	fb00 f202 	mul.w	r2, r0, r2
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	b292      	uxth	r2, r2
 8007e40:	4611      	mov	r1, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fb31 	bl	80074aa <st_word>
			fs->wflag = 1;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	70da      	strb	r2, [r3, #3]
			break;
 8007e4e:	e049      	b.n	8007ee4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	899b      	ldrh	r3, [r3, #12]
 8007e58:	089b      	lsrs	r3, r3, #2
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e64:	4413      	add	r3, r2
 8007e66:	4619      	mov	r1, r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fd93 	bl	8007994 <move_window>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e72:	7ffb      	ldrb	r3, [r7, #31]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d134      	bne.n	8007ee2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	8992      	ldrh	r2, [r2, #12]
 8007e8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e90:	fb00 f202 	mul.w	r2, r0, r2
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	440b      	add	r3, r1
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff fae3 	bl	8007464 <ld_dword>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ea4:	4323      	orrs	r3, r4
 8007ea6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	8992      	ldrh	r2, [r2, #12]
 8007eb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eba:	fb00 f202 	mul.w	r2, r0, r2
 8007ebe:	1a9b      	subs	r3, r3, r2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff fb0b 	bl	80074e0 <st_dword>
			fs->wflag = 1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	70da      	strb	r2, [r3, #3]
			break;
 8007ed0:	e008      	b.n	8007ee4 <put_fat+0x22e>
		}
	}
 8007ed2:	bf00      	nop
 8007ed4:	e006      	b.n	8007ee4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ed6:	bf00      	nop
 8007ed8:	e004      	b.n	8007ee4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007eda:	bf00      	nop
 8007edc:	e002      	b.n	8007ee4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ede:	bf00      	nop
 8007ee0:	e000      	b.n	8007ee4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ee2:	bf00      	nop
	return res;
 8007ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3724      	adds	r7, #36	; 0x24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd90      	pop	{r4, r7, pc}

08007eee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b088      	sub	sp, #32
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d904      	bls.n	8007f14 <remove_chain+0x26>
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d301      	bcc.n	8007f18 <remove_chain+0x2a>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e04b      	b.n	8007fb0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	69b8      	ldr	r0, [r7, #24]
 8007f26:	f7ff fec6 	bl	8007cb6 <put_fat>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f2e:	7ffb      	ldrb	r3, [r7, #31]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <remove_chain+0x4a>
 8007f34:	7ffb      	ldrb	r3, [r7, #31]
 8007f36:	e03b      	b.n	8007fb0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fde7 	bl	8007b0e <get_fat>
 8007f40:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d031      	beq.n	8007fac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <remove_chain+0x64>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e02e      	b.n	8007fb0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d101      	bne.n	8007f5e <remove_chain+0x70>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e028      	b.n	8007fb0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f5e:	2200      	movs	r2, #0
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	69b8      	ldr	r0, [r7, #24]
 8007f64:	f7ff fea7 	bl	8007cb6 <put_fat>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f6c:	7ffb      	ldrb	r3, [r7, #31]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <remove_chain+0x88>
 8007f72:	7ffb      	ldrb	r3, [r7, #31]
 8007f74:	e01c      	b.n	8007fb0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	3b02      	subs	r3, #2
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d20b      	bcs.n	8007f9c <remove_chain+0xae>
			fs->free_clst++;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	791b      	ldrb	r3, [r3, #4]
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d3c6      	bcc.n	8007f38 <remove_chain+0x4a>
 8007faa:	e000      	b.n	8007fae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007fac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3720      	adds	r7, #32
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10d      	bne.n	8007fea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <create_chain+0x2c>
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d31b      	bcc.n	800801c <create_chain+0x64>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	61bb      	str	r3, [r7, #24]
 8007fe8:	e018      	b.n	800801c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff fd8e 	bl	8007b0e <get_fat>
 8007ff2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d801      	bhi.n	8007ffe <create_chain+0x46>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e070      	b.n	80080e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d101      	bne.n	800800a <create_chain+0x52>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	e06a      	b.n	80080e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	429a      	cmp	r2, r3
 8008012:	d201      	bcs.n	8008018 <create_chain+0x60>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	e063      	b.n	80080e0 <create_chain+0x128>
		scl = clst;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	429a      	cmp	r2, r3
 800802e:	d307      	bcc.n	8008040 <create_chain+0x88>
				ncl = 2;
 8008030:	2302      	movs	r3, #2
 8008032:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	429a      	cmp	r2, r3
 800803a:	d901      	bls.n	8008040 <create_chain+0x88>
 800803c:	2300      	movs	r3, #0
 800803e:	e04f      	b.n	80080e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008040:	69f9      	ldr	r1, [r7, #28]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff fd63 	bl	8007b0e <get_fat>
 8008048:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d003      	beq.n	800805e <create_chain+0xa6>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	d101      	bne.n	8008062 <create_chain+0xaa>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	e03e      	b.n	80080e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	429a      	cmp	r2, r3
 8008068:	d1da      	bne.n	8008020 <create_chain+0x68>
 800806a:	2300      	movs	r3, #0
 800806c:	e038      	b.n	80080e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800806e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	69f9      	ldr	r1, [r7, #28]
 8008076:	6938      	ldr	r0, [r7, #16]
 8008078:	f7ff fe1d 	bl	8007cb6 <put_fat>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <create_chain+0xe2>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d006      	beq.n	800809a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6938      	ldr	r0, [r7, #16]
 8008092:	f7ff fe10 	bl	8007cb6 <put_fat>
 8008096:	4603      	mov	r3, r0
 8008098:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d116      	bne.n	80080ce <create_chain+0x116>
		fs->last_clst = ncl;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	3b02      	subs	r3, #2
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d804      	bhi.n	80080be <create_chain+0x106>
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	1e5a      	subs	r2, r3, #1
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	711a      	strb	r2, [r3, #4]
 80080cc:	e007      	b.n	80080de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d102      	bne.n	80080da <create_chain+0x122>
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
 80080d8:	e000      	b.n	80080dc <create_chain+0x124>
 80080da:	2301      	movs	r3, #1
 80080dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80080de:	69fb      	ldr	r3, [r7, #28]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	3304      	adds	r3, #4
 80080fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	899b      	ldrh	r3, [r3, #12]
 8008104:	461a      	mov	r2, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	fbb3 f3f2 	udiv	r3, r3, r2
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	8952      	ldrh	r2, [r2, #10]
 8008110:	fbb3 f3f2 	udiv	r3, r3, r2
 8008114:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	613a      	str	r2, [r7, #16]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <clmt_clust+0x42>
 8008126:	2300      	movs	r3, #0
 8008128:	e010      	b.n	800814c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	d307      	bcc.n	8008142 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	3304      	adds	r3, #4
 800813e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008140:	e7e9      	b.n	8008116 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008142:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	4413      	add	r3, r2
}
 800814c:	4618      	mov	r0, r3
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800816e:	d204      	bcs.n	800817a <dir_sdi+0x22>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <dir_sdi+0x26>
		return FR_INT_ERR;
 800817a:	2302      	movs	r3, #2
 800817c:	e071      	b.n	8008262 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <dir_sdi+0x46>
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d902      	bls.n	800819e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10c      	bne.n	80081be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	8912      	ldrh	r2, [r2, #8]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d301      	bcc.n	80081b4 <dir_sdi+0x5c>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e056      	b.n	8008262 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	61da      	str	r2, [r3, #28]
 80081bc:	e02d      	b.n	800821a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	895b      	ldrh	r3, [r3, #10]
 80081c2:	461a      	mov	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	899b      	ldrh	r3, [r3, #12]
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081ce:	e019      	b.n	8008204 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6979      	ldr	r1, [r7, #20]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fc9a 	bl	8007b0e <get_fat>
 80081da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e2:	d101      	bne.n	80081e8 <dir_sdi+0x90>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e03c      	b.n	8008262 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d904      	bls.n	80081f8 <dir_sdi+0xa0>
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d301      	bcc.n	80081fc <dir_sdi+0xa4>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e032      	b.n	8008262 <dir_sdi+0x10a>
			ofs -= csz;
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	429a      	cmp	r2, r3
 800820a:	d2e1      	bcs.n	80081d0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800820c:	6979      	ldr	r1, [r7, #20]
 800820e:	6938      	ldr	r0, [r7, #16]
 8008210:	f7ff fc5e 	bl	8007ad0 <clust2sect>
 8008214:	4602      	mov	r2, r0
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <dir_sdi+0xd4>
 8008228:	2302      	movs	r3, #2
 800822a:	e01a      	b.n	8008262 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	899b      	ldrh	r3, [r3, #12]
 8008234:	4619      	mov	r1, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	fbb3 f3f1 	udiv	r3, r3, r1
 800823c:	441a      	add	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	899b      	ldrh	r3, [r3, #12]
 800824c:	461a      	mov	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	fbb3 f0f2 	udiv	r0, r3, r2
 8008254:	fb00 f202 	mul.w	r2, r0, r2
 8008258:	1a9b      	subs	r3, r3, r2
 800825a:	18ca      	adds	r2, r1, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	3320      	adds	r3, #32
 8008280:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <dir_next+0x28>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008290:	d301      	bcc.n	8008296 <dir_next+0x2c>
 8008292:	2304      	movs	r3, #4
 8008294:	e0bb      	b.n	800840e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	899b      	ldrh	r3, [r3, #12]
 800829a:	461a      	mov	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	fbb3 f1f2 	udiv	r1, r3, r2
 80082a2:	fb01 f202 	mul.w	r2, r1, r2
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f040 809d 	bne.w	80083e8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	8912      	ldrh	r2, [r2, #8]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	f0c0 808d 	bcc.w	80083e8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	61da      	str	r2, [r3, #28]
 80082d4:	2304      	movs	r3, #4
 80082d6:	e09a      	b.n	800840e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	899b      	ldrh	r3, [r3, #12]
 80082dc:	461a      	mov	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	8952      	ldrh	r2, [r2, #10]
 80082e8:	3a01      	subs	r2, #1
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d17b      	bne.n	80083e8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	4619      	mov	r1, r3
 80082f8:	4610      	mov	r0, r2
 80082fa:	f7ff fc08 	bl	8007b0e <get_fat>
 80082fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d801      	bhi.n	800830a <dir_next+0xa0>
 8008306:	2302      	movs	r3, #2
 8008308:	e081      	b.n	800840e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008310:	d101      	bne.n	8008316 <dir_next+0xac>
 8008312:	2301      	movs	r3, #1
 8008314:	e07b      	b.n	800840e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	429a      	cmp	r2, r3
 800831e:	d359      	bcc.n	80083d4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	61da      	str	r2, [r3, #28]
 800832c:	2304      	movs	r3, #4
 800832e:	e06e      	b.n	800840e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7ff fe3d 	bl	8007fb8 <create_chain>
 800833e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <dir_next+0xe0>
 8008346:	2307      	movs	r3, #7
 8008348:	e061      	b.n	800840e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d101      	bne.n	8008354 <dir_next+0xea>
 8008350:	2302      	movs	r3, #2
 8008352:	e05c      	b.n	800840e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d101      	bne.n	8008360 <dir_next+0xf6>
 800835c:	2301      	movs	r3, #1
 800835e:	e056      	b.n	800840e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff fad3 	bl	800790c <sync_window>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <dir_next+0x106>
 800836c:	2301      	movs	r3, #1
 800836e:	e04e      	b.n	800840e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	899b      	ldrh	r3, [r3, #12]
 800837a:	461a      	mov	r2, r3
 800837c:	2100      	movs	r1, #0
 800837e:	f7ff f8fc 	bl	800757a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008382:	2300      	movs	r3, #0
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	6979      	ldr	r1, [r7, #20]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7ff fba1 	bl	8007ad0 <clust2sect>
 800838e:	4602      	mov	r2, r0
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	635a      	str	r2, [r3, #52]	; 0x34
 8008394:	e012      	b.n	80083bc <dir_next+0x152>
						fs->wflag = 1;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f7ff fab5 	bl	800790c <sync_window>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <dir_next+0x142>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e030      	b.n	800840e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	3301      	adds	r3, #1
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	635a      	str	r2, [r3, #52]	; 0x34
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	895b      	ldrh	r3, [r3, #10]
 80083c0:	461a      	mov	r2, r3
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d3e6      	bcc.n	8008396 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80083da:	6979      	ldr	r1, [r7, #20]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fb77 	bl	8007ad0 <clust2sect>
 80083e2:	4602      	mov	r2, r0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	899b      	ldrh	r3, [r3, #12]
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008400:	fb00 f202 	mul.w	r2, r0, r2
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	18ca      	adds	r2, r1, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008426:	2100      	movs	r1, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff fe95 	bl	8008158 <dir_sdi>
 800842e:	4603      	mov	r3, r0
 8008430:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d12b      	bne.n	8008490 <dir_alloc+0x7a>
		n = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	4619      	mov	r1, r3
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7ff faa6 	bl	8007994 <move_window>
 8008448:	4603      	mov	r3, r0
 800844a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d11d      	bne.n	800848e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2be5      	cmp	r3, #229	; 0xe5
 800845a:	d004      	beq.n	8008466 <dir_alloc+0x50>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d107      	bne.n	8008476 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	3301      	adds	r3, #1
 800846a:	613b      	str	r3, [r7, #16]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d102      	bne.n	800847a <dir_alloc+0x64>
 8008474:	e00c      	b.n	8008490 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800847a:	2101      	movs	r1, #1
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff fef4 	bl	800826a <dir_next>
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0d7      	beq.n	800843c <dir_alloc+0x26>
 800848c:	e000      	b.n	8008490 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800848e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	2b04      	cmp	r3, #4
 8008494:	d101      	bne.n	800849a <dir_alloc+0x84>
 8008496:	2307      	movs	r3, #7
 8008498:	75fb      	strb	r3, [r7, #23]
	return res;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	331a      	adds	r3, #26
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe ffbe 	bl	8007434 <ld_word>
 80084b8:	4603      	mov	r3, r0
 80084ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d109      	bne.n	80084d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	3314      	adds	r3, #20
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe ffb3 	bl	8007434 <ld_word>
 80084ce:	4603      	mov	r3, r0
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80084d8:	68fb      	ldr	r3, [r7, #12]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	331a      	adds	r3, #26
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	b292      	uxth	r2, r2
 80084f6:	4611      	mov	r1, r2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe ffd6 	bl	80074aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b03      	cmp	r3, #3
 8008504:	d109      	bne.n	800851a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f103 0214 	add.w	r2, r3, #20
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	0c1b      	lsrs	r3, r3, #16
 8008510:	b29b      	uxth	r3, r3
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7fe ffc8 	bl	80074aa <st_word>
	}
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	331a      	adds	r3, #26
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe ff7e 	bl	8007434 <ld_word>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <cmp_lfn+0x1e>
 800853e:	2300      	movs	r3, #0
 8008540:	e059      	b.n	80085f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800854a:	1e5a      	subs	r2, r3, #1
 800854c:	4613      	mov	r3, r2
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008558:	2301      	movs	r3, #1
 800855a:	81fb      	strh	r3, [r7, #14]
 800855c:	2300      	movs	r3, #0
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	e033      	b.n	80085ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008562:	4a27      	ldr	r2, [pc, #156]	; (8008600 <cmp_lfn+0xdc>)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	4413      	add	r3, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe ff5f 	bl	8007434 <ld_word>
 8008576:	4603      	mov	r3, r0
 8008578:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800857a:	89fb      	ldrh	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01a      	beq.n	80085b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2bfe      	cmp	r3, #254	; 0xfe
 8008584:	d812      	bhi.n	80085ac <cmp_lfn+0x88>
 8008586:	89bb      	ldrh	r3, [r7, #12]
 8008588:	4618      	mov	r0, r3
 800858a:	f002 f8e9 	bl	800a760 <ff_wtoupper>
 800858e:	4603      	mov	r3, r0
 8008590:	461c      	mov	r4, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	617a      	str	r2, [r7, #20]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 f8dd 	bl	800a760 <ff_wtoupper>
 80085a6:	4603      	mov	r3, r0
 80085a8:	429c      	cmp	r4, r3
 80085aa:	d001      	beq.n	80085b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80085ac:	2300      	movs	r3, #0
 80085ae:	e022      	b.n	80085f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80085b0:	89bb      	ldrh	r3, [r7, #12]
 80085b2:	81fb      	strh	r3, [r7, #14]
 80085b4:	e006      	b.n	80085c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80085b6:	89bb      	ldrh	r3, [r7, #12]
 80085b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085bc:	4293      	cmp	r3, r2
 80085be:	d001      	beq.n	80085c4 <cmp_lfn+0xa0>
 80085c0:	2300      	movs	r3, #0
 80085c2:	e018      	b.n	80085f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	3301      	adds	r3, #1
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	2b0c      	cmp	r3, #12
 80085ce:	d9c8      	bls.n	8008562 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <cmp_lfn+0xd0>
 80085dc:	89fb      	ldrh	r3, [r7, #14]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d008      	beq.n	80085f4 <cmp_lfn+0xd0>
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4413      	add	r3, r2
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <cmp_lfn+0xd0>
 80085f0:	2300      	movs	r3, #0
 80085f2:	e000      	b.n	80085f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80085f4:	2301      	movs	r3, #1
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd90      	pop	{r4, r7, pc}
 80085fe:	bf00      	nop
 8008600:	0800d8e4 	.word	0x0800d8e4

08008604 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4611      	mov	r1, r2
 8008610:	461a      	mov	r2, r3
 8008612:	460b      	mov	r3, r1
 8008614:	71fb      	strb	r3, [r7, #7]
 8008616:	4613      	mov	r3, r2
 8008618:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	330d      	adds	r3, #13
 800861e:	79ba      	ldrb	r2, [r7, #6]
 8008620:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	330b      	adds	r3, #11
 8008626:	220f      	movs	r2, #15
 8008628:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	330c      	adds	r3, #12
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	331a      	adds	r3, #26
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe ff36 	bl	80074aa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	1e5a      	subs	r2, r3, #1
 8008642:	4613      	mov	r3, r2
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	82fb      	strh	r3, [r7, #22]
 8008652:	2300      	movs	r3, #0
 8008654:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008656:	8afb      	ldrh	r3, [r7, #22]
 8008658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800865c:	4293      	cmp	r3, r2
 800865e:	d007      	beq.n	8008670 <put_lfn+0x6c>
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	61fa      	str	r2, [r7, #28]
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008670:	4a17      	ldr	r2, [pc, #92]	; (80086d0 <put_lfn+0xcc>)
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	4413      	add	r3, r2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	8afa      	ldrh	r2, [r7, #22]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe ff11 	bl	80074aa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008688:	8afb      	ldrh	r3, [r7, #22]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <put_lfn+0x90>
 800868e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008692:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	3301      	adds	r3, #1
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b0c      	cmp	r3, #12
 800869e:	d9da      	bls.n	8008656 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80086a0:	8afb      	ldrh	r3, [r7, #22]
 80086a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d006      	beq.n	80086b8 <put_lfn+0xb4>
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <put_lfn+0xbc>
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	79fa      	ldrb	r2, [r7, #7]
 80086c4:	701a      	strb	r2, [r3, #0]
}
 80086c6:	bf00      	nop
 80086c8:	3720      	adds	r7, #32
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	0800d8e4 	.word	0x0800d8e4

080086d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08c      	sub	sp, #48	; 0x30
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80086e2:	220b      	movs	r2, #11
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7fe ff26 	bl	8007538 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	d92b      	bls.n	800874a <gen_numname+0x76>
		sr = seq;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80086f6:	e022      	b.n	800873e <gen_numname+0x6a>
			wc = *lfn++;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	1c9a      	adds	r2, r3, #2
 80086fc:	607a      	str	r2, [r7, #4]
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008702:	2300      	movs	r3, #0
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28
 8008706:	e017      	b.n	8008738 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	005a      	lsls	r2, r3, #1
 800870c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <gen_numname+0x5e>
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800872c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008730:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	3301      	adds	r3, #1
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
 8008738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873a:	2b0f      	cmp	r3, #15
 800873c:	d9e4      	bls.n	8008708 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1d8      	bne.n	80086f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800874a:	2307      	movs	r3, #7
 800874c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	b2db      	uxtb	r3, r3
 8008758:	3330      	adds	r3, #48	; 0x30
 800875a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800875e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008762:	2b39      	cmp	r3, #57	; 0x39
 8008764:	d904      	bls.n	8008770 <gen_numname+0x9c>
 8008766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800876a:	3307      	adds	r3, #7
 800876c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	1e5a      	subs	r2, r3, #1
 8008774:	62ba      	str	r2, [r7, #40]	; 0x28
 8008776:	3330      	adds	r3, #48	; 0x30
 8008778:	443b      	add	r3, r7
 800877a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800877e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1df      	bne.n	800874e <gen_numname+0x7a>
	ns[i] = '~';
 800878e:	f107 0214 	add.w	r2, r7, #20
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	4413      	add	r3, r2
 8008796:	227e      	movs	r2, #126	; 0x7e
 8008798:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800879a:	2300      	movs	r3, #0
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
 800879e:	e002      	b.n	80087a6 <gen_numname+0xd2>
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	3301      	adds	r3, #1
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
 80087a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d205      	bcs.n	80087ba <gen_numname+0xe6>
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	4413      	add	r3, r2
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d1f2      	bne.n	80087a0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	2b07      	cmp	r3, #7
 80087be:	d807      	bhi.n	80087d0 <gen_numname+0xfc>
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	62ba      	str	r2, [r7, #40]	; 0x28
 80087c6:	3330      	adds	r3, #48	; 0x30
 80087c8:	443b      	add	r3, r7
 80087ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80087ce:	e000      	b.n	80087d2 <gen_numname+0xfe>
 80087d0:	2120      	movs	r1, #32
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	627a      	str	r2, [r7, #36]	; 0x24
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	460a      	mov	r2, r1
 80087de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	2b07      	cmp	r3, #7
 80087e4:	d9e9      	bls.n	80087ba <gen_numname+0xe6>
}
 80087e6:	bf00      	nop
 80087e8:	bf00      	nop
 80087ea:	3730      	adds	r7, #48	; 0x30
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80087fc:	230b      	movs	r3, #11
 80087fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	b2da      	uxtb	r2, r3
 8008804:	0852      	lsrs	r2, r2, #1
 8008806:	01db      	lsls	r3, r3, #7
 8008808:	4313      	orrs	r3, r2
 800880a:	b2da      	uxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	1c59      	adds	r1, r3, #1
 8008810:	6079      	str	r1, [r7, #4]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	4413      	add	r3, r2
 8008816:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3b01      	subs	r3, #1
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1ed      	bne.n	8008800 <sum_sfn+0x10>
	return sum;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fc88 	bl	8008158 <dir_sdi>
 8008848:	4603      	mov	r3, r0
 800884a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <dir_find+0x24>
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	e0a9      	b.n	80089aa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008856:	23ff      	movs	r3, #255	; 0xff
 8008858:	753b      	strb	r3, [r7, #20]
 800885a:	7d3b      	ldrb	r3, [r7, #20]
 800885c:	757b      	strb	r3, [r7, #21]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f04f 32ff 	mov.w	r2, #4294967295
 8008864:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	4619      	mov	r1, r3
 800886c:	6938      	ldr	r0, [r7, #16]
 800886e:	f7ff f891 	bl	8007994 <move_window>
 8008872:	4603      	mov	r3, r0
 8008874:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f040 8090 	bne.w	800899e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008886:	7dbb      	ldrb	r3, [r7, #22]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <dir_find+0x60>
 800888c:	2304      	movs	r3, #4
 800888e:	75fb      	strb	r3, [r7, #23]
 8008890:	e08a      	b.n	80089a8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	330b      	adds	r3, #11
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7bfa      	ldrb	r2, [r7, #15]
 80088a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80088a6:	7dbb      	ldrb	r3, [r7, #22]
 80088a8:	2be5      	cmp	r3, #229	; 0xe5
 80088aa:	d007      	beq.n	80088bc <dir_find+0x8a>
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <dir_find+0x98>
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	2b0f      	cmp	r3, #15
 80088ba:	d006      	beq.n	80088ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80088bc:	23ff      	movs	r3, #255	; 0xff
 80088be:	757b      	strb	r3, [r7, #21]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f04f 32ff 	mov.w	r2, #4294967295
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
 80088c8:	e05e      	b.n	8008988 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b0f      	cmp	r3, #15
 80088ce:	d136      	bne.n	800893e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d154      	bne.n	8008988 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80088de:	7dbb      	ldrb	r3, [r7, #22]
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	7b5b      	ldrb	r3, [r3, #13]
 80088ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80088f0:	7dbb      	ldrb	r3, [r7, #22]
 80088f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f6:	75bb      	strb	r3, [r7, #22]
 80088f8:	7dbb      	ldrb	r3, [r7, #22]
 80088fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	695a      	ldr	r2, [r3, #20]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008904:	7dba      	ldrb	r2, [r7, #22]
 8008906:	7d7b      	ldrb	r3, [r7, #21]
 8008908:	429a      	cmp	r2, r3
 800890a:	d115      	bne.n	8008938 <dir_find+0x106>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	330d      	adds	r3, #13
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	7d3a      	ldrb	r2, [r7, #20]
 8008916:	429a      	cmp	r2, r3
 8008918:	d10e      	bne.n	8008938 <dir_find+0x106>
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	691a      	ldr	r2, [r3, #16]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	4619      	mov	r1, r3
 8008924:	4610      	mov	r0, r2
 8008926:	f7ff fdfd 	bl	8008524 <cmp_lfn>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <dir_find+0x106>
 8008930:	7d7b      	ldrb	r3, [r7, #21]
 8008932:	3b01      	subs	r3, #1
 8008934:	b2db      	uxtb	r3, r3
 8008936:	e000      	b.n	800893a <dir_find+0x108>
 8008938:	23ff      	movs	r3, #255	; 0xff
 800893a:	757b      	strb	r3, [r7, #21]
 800893c:	e024      	b.n	8008988 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800893e:	7d7b      	ldrb	r3, [r7, #21]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <dir_find+0x126>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff ff51 	bl	80087f0 <sum_sfn>
 800894e:	4603      	mov	r3, r0
 8008950:	461a      	mov	r2, r3
 8008952:	7d3b      	ldrb	r3, [r7, #20]
 8008954:	4293      	cmp	r3, r2
 8008956:	d024      	beq.n	80089a2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <dir_find+0x14a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a18      	ldr	r0, [r3, #32]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3324      	adds	r3, #36	; 0x24
 800896e:	220b      	movs	r2, #11
 8008970:	4619      	mov	r1, r3
 8008972:	f7fe fe1d 	bl	80075b0 <mem_cmp>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d014      	beq.n	80089a6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800897c:	23ff      	movs	r3, #255	; 0xff
 800897e:	757b      	strb	r3, [r7, #21]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f04f 32ff 	mov.w	r2, #4294967295
 8008986:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008988:	2100      	movs	r1, #0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fc6d 	bl	800826a <dir_next>
 8008990:	4603      	mov	r3, r0
 8008992:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f43f af65 	beq.w	8008866 <dir_find+0x34>
 800899c:	e004      	b.n	80089a8 <dir_find+0x176>
		if (res != FR_OK) break;
 800899e:	bf00      	nop
 80089a0:	e002      	b.n	80089a8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80089a2:	bf00      	nop
 80089a4:	e000      	b.n	80089a8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80089a6:	bf00      	nop

	return res;
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80089c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <dir_register+0x20>
 80089d0:	2306      	movs	r3, #6
 80089d2:	e0e0      	b.n	8008b96 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80089d4:	2300      	movs	r3, #0
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
 80089d8:	e002      	b.n	80089e0 <dir_register+0x2c>
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	3301      	adds	r3, #1
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	4413      	add	r3, r2
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f4      	bne.n	80089da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	220c      	movs	r2, #12
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe fd9b 	bl	8007538 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d032      	beq.n	8008a72 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2240      	movs	r2, #64	; 0x40
 8008a10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008a14:	2301      	movs	r3, #1
 8008a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a18:	e016      	b.n	8008a48 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	f107 010c 	add.w	r1, r7, #12
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	f7ff fe53 	bl	80086d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff feff 	bl	8008832 <dir_find>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	3301      	adds	r3, #1
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	2b63      	cmp	r3, #99	; 0x63
 8008a4c:	d9e5      	bls.n	8008a1a <dir_register+0x66>
 8008a4e:	e000      	b.n	8008a52 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008a50:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	2b64      	cmp	r3, #100	; 0x64
 8008a56:	d101      	bne.n	8008a5c <dir_register+0xa8>
 8008a58:	2307      	movs	r3, #7
 8008a5a:	e09c      	b.n	8008b96 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d002      	beq.n	8008a6a <dir_register+0xb6>
 8008a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a68:	e095      	b.n	8008b96 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008a6a:	7dfa      	ldrb	r2, [r7, #23]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d007      	beq.n	8008a8c <dir_register+0xd8>
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	330c      	adds	r3, #12
 8008a80:	4a47      	ldr	r2, [pc, #284]	; (8008ba0 <dir_register+0x1ec>)
 8008a82:	fba2 2303 	umull	r2, r3, r2, r3
 8008a86:	089b      	lsrs	r3, r3, #2
 8008a88:	3301      	adds	r3, #1
 8008a8a:	e000      	b.n	8008a8e <dir_register+0xda>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008a90:	6a39      	ldr	r1, [r7, #32]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fcbf 	bl	8008416 <dir_alloc>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d148      	bne.n	8008b38 <dir_register+0x184>
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	623b      	str	r3, [r7, #32]
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d042      	beq.n	8008b38 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695a      	ldr	r2, [r3, #20]
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	015b      	lsls	r3, r3, #5
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff fb4a 	bl	8008158 <dir_sdi>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d132      	bne.n	8008b38 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3324      	adds	r3, #36	; 0x24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fe8a 	bl	80087f0 <sum_sfn>
 8008adc:	4603      	mov	r3, r0
 8008ade:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	69f8      	ldr	r0, [r7, #28]
 8008ae8:	f7fe ff54 	bl	8007994 <move_window>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d11d      	bne.n	8008b36 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	6918      	ldr	r0, [r3, #16]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a19      	ldr	r1, [r3, #32]
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	7efb      	ldrb	r3, [r7, #27]
 8008b08:	f7ff fd7c 	bl	8008604 <put_lfn>
				fs->wflag = 1;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008b12:	2100      	movs	r1, #0
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fba8 	bl	800826a <dir_next>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d107      	bne.n	8008b38 <dir_register+0x184>
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	623b      	str	r3, [r7, #32]
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1d5      	bne.n	8008ae0 <dir_register+0x12c>
 8008b34:	e000      	b.n	8008b38 <dir_register+0x184>
				if (res != FR_OK) break;
 8008b36:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d128      	bne.n	8008b92 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	4619      	mov	r1, r3
 8008b46:	69f8      	ldr	r0, [r7, #28]
 8008b48:	f7fe ff24 	bl	8007994 <move_window>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d11b      	bne.n	8008b92 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe fd09 	bl	800757a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a18      	ldr	r0, [r3, #32]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	220b      	movs	r2, #11
 8008b72:	4619      	mov	r1, r3
 8008b74:	f7fe fce0 	bl	8007538 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	330c      	adds	r3, #12
 8008b84:	f002 0218 	and.w	r2, r2, #24
 8008b88:	b2d2      	uxtb	r2, r2
 8008b8a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3730      	adds	r7, #48	; 0x30
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	4ec4ec4f 	.word	0x4ec4ec4f

08008ba4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08a      	sub	sp, #40	; 0x28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	61ba      	str	r2, [r7, #24]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4413      	add	r3, r2
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bd4:	2b1f      	cmp	r3, #31
 8008bd6:	d940      	bls.n	8008c5a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bda:	2b2f      	cmp	r3, #47	; 0x2f
 8008bdc:	d006      	beq.n	8008bec <create_name+0x48>
 8008bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be0:	2b5c      	cmp	r3, #92	; 0x5c
 8008be2:	d110      	bne.n	8008c06 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008be4:	e002      	b.n	8008bec <create_name+0x48>
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	3301      	adds	r3, #1
 8008bea:	61bb      	str	r3, [r7, #24]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b2f      	cmp	r3, #47	; 0x2f
 8008bf6:	d0f6      	beq.n	8008be6 <create_name+0x42>
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b5c      	cmp	r3, #92	; 0x5c
 8008c02:	d0f0      	beq.n	8008be6 <create_name+0x42>
			break;
 8008c04:	e02a      	b.n	8008c5c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2bfe      	cmp	r3, #254	; 0xfe
 8008c0a:	d901      	bls.n	8008c10 <create_name+0x6c>
 8008c0c:	2306      	movs	r3, #6
 8008c0e:	e17d      	b.n	8008f0c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 fd64 	bl	800a6e8 <ff_convert>
 8008c20:	4603      	mov	r3, r0
 8008c22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <create_name+0x8a>
 8008c2a:	2306      	movs	r3, #6
 8008c2c:	e16e      	b.n	8008f0c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c30:	2b7f      	cmp	r3, #127	; 0x7f
 8008c32:	d809      	bhi.n	8008c48 <create_name+0xa4>
 8008c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c36:	4619      	mov	r1, r3
 8008c38:	488d      	ldr	r0, [pc, #564]	; (8008e70 <create_name+0x2cc>)
 8008c3a:	f7fe fce0 	bl	80075fe <chk_chr>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <create_name+0xa4>
 8008c44:	2306      	movs	r3, #6
 8008c46:	e161      	b.n	8008f0c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	617a      	str	r2, [r7, #20]
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c56:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008c58:	e7b4      	b.n	8008bc4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008c5a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	441a      	add	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c68:	2b1f      	cmp	r3, #31
 8008c6a:	d801      	bhi.n	8008c70 <create_name+0xcc>
 8008c6c:	2304      	movs	r3, #4
 8008c6e:	e000      	b.n	8008c72 <create_name+0xce>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008c76:	e011      	b.n	8008c9c <create_name+0xf8>
		w = lfn[di - 1];
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d002      	beq.n	8008c96 <create_name+0xf2>
 8008c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c92:	2b2e      	cmp	r3, #46	; 0x2e
 8008c94:	d106      	bne.n	8008ca4 <create_name+0x100>
		di--;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1ea      	bne.n	8008c78 <create_name+0xd4>
 8008ca2:	e000      	b.n	8008ca6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008ca4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <create_name+0x118>
 8008cb8:	2306      	movs	r3, #6
 8008cba:	e127      	b.n	8008f0c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3324      	adds	r3, #36	; 0x24
 8008cc0:	220b      	movs	r2, #11
 8008cc2:	2120      	movs	r1, #32
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe fc58 	bl	800757a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61bb      	str	r3, [r7, #24]
 8008cce:	e002      	b.n	8008cd6 <create_name+0x132>
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d0f5      	beq.n	8008cd0 <create_name+0x12c>
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	2b2e      	cmp	r3, #46	; 0x2e
 8008cf0:	d0ee      	beq.n	8008cd0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d009      	beq.n	8008d0c <create_name+0x168>
 8008cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cfc:	f043 0303 	orr.w	r3, r3, #3
 8008d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008d04:	e002      	b.n	8008d0c <create_name+0x168>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d009      	beq.n	8008d26 <create_name+0x182>
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	2b2e      	cmp	r3, #46	; 0x2e
 8008d24:	d1ef      	bne.n	8008d06 <create_name+0x162>

	i = b = 0; ni = 8;
 8008d26:	2300      	movs	r3, #0
 8008d28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	623b      	str	r3, [r7, #32]
 8008d30:	2308      	movs	r3, #8
 8008d32:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	61ba      	str	r2, [r7, #24]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8090 	beq.w	8008e6c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d006      	beq.n	8008d60 <create_name+0x1bc>
 8008d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d54:	2b2e      	cmp	r3, #46	; 0x2e
 8008d56:	d10a      	bne.n	8008d6e <create_name+0x1ca>
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d006      	beq.n	8008d6e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d64:	f043 0303 	orr.w	r3, r3, #3
 8008d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d6c:	e07d      	b.n	8008e6a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008d6e:	6a3a      	ldr	r2, [r7, #32]
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d203      	bcs.n	8008d7e <create_name+0x1da>
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d123      	bne.n	8008dc6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	2b0b      	cmp	r3, #11
 8008d82:	d106      	bne.n	8008d92 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d88:	f043 0303 	orr.w	r3, r3, #3
 8008d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d90:	e075      	b.n	8008e7e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d005      	beq.n	8008da6 <create_name+0x202>
 8008d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d9e:	f043 0303 	orr.w	r3, r3, #3
 8008da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d866      	bhi.n	8008e7c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	61bb      	str	r3, [r7, #24]
 8008db2:	2308      	movs	r3, #8
 8008db4:	623b      	str	r3, [r7, #32]
 8008db6:	230b      	movs	r3, #11
 8008db8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008dba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008dc4:	e051      	b.n	8008e6a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8008dca:	d914      	bls.n	8008df6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f001 fc89 	bl	800a6e8 <ff_convert>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <create_name+0x246>
 8008de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008de2:	3b80      	subs	r3, #128	; 0x80
 8008de4:	4a23      	ldr	r2, [pc, #140]	; (8008e74 <create_name+0x2d0>)
 8008de6:	5cd3      	ldrb	r3, [r2, r3]
 8008de8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dee:	f043 0302 	orr.w	r3, r3, #2
 8008df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <create_name+0x268>
 8008dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dfe:	4619      	mov	r1, r3
 8008e00:	481d      	ldr	r0, [pc, #116]	; (8008e78 <create_name+0x2d4>)
 8008e02:	f7fe fbfc 	bl	80075fe <chk_chr>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d008      	beq.n	8008e1e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008e0c:	235f      	movs	r3, #95	; 0x5f
 8008e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e14:	f043 0303 	orr.w	r3, r3, #3
 8008e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e1c:	e01b      	b.n	8008e56 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e20:	2b40      	cmp	r3, #64	; 0x40
 8008e22:	d909      	bls.n	8008e38 <create_name+0x294>
 8008e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e26:	2b5a      	cmp	r3, #90	; 0x5a
 8008e28:	d806      	bhi.n	8008e38 <create_name+0x294>
					b |= 2;
 8008e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e2e:	f043 0302 	orr.w	r3, r3, #2
 8008e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e36:	e00e      	b.n	8008e56 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e3a:	2b60      	cmp	r3, #96	; 0x60
 8008e3c:	d90b      	bls.n	8008e56 <create_name+0x2b2>
 8008e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e40:	2b7a      	cmp	r3, #122	; 0x7a
 8008e42:	d808      	bhi.n	8008e56 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008e44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e48:	f043 0301 	orr.w	r3, r3, #1
 8008e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e52:	3b20      	subs	r3, #32
 8008e54:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	623a      	str	r2, [r7, #32]
 8008e5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e5e:	b2d1      	uxtb	r1, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	460a      	mov	r2, r1
 8008e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008e6a:	e763      	b.n	8008d34 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008e6c:	bf00      	nop
 8008e6e:	e006      	b.n	8008e7e <create_name+0x2da>
 8008e70:	0800d7d4 	.word	0x0800d7d4
 8008e74:	0800d864 	.word	0x0800d864
 8008e78:	0800d7e0 	.word	0x0800d7e0
			if (si > di) break;			/* No extension */
 8008e7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e84:	2be5      	cmp	r3, #229	; 0xe5
 8008e86:	d103      	bne.n	8008e90 <create_name+0x2ec>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d104      	bne.n	8008ea0 <create_name+0x2fc>
 8008e96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ea4:	f003 030c 	and.w	r3, r3, #12
 8008ea8:	2b0c      	cmp	r3, #12
 8008eaa:	d005      	beq.n	8008eb8 <create_name+0x314>
 8008eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d105      	bne.n	8008ec4 <create_name+0x320>
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d117      	bne.n	8008f00 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d105      	bne.n	8008ee8 <create_name+0x344>
 8008edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ee0:	f043 0310 	orr.w	r3, r3, #16
 8008ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eec:	f003 030c 	and.w	r3, r3, #12
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d105      	bne.n	8008f00 <create_name+0x35c>
 8008ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ef8:	f043 0308 	orr.w	r3, r3, #8
 8008efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008f0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3728      	adds	r7, #40	; 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008f28:	e002      	b.n	8008f30 <follow_path+0x1c>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b2f      	cmp	r3, #47	; 0x2f
 8008f36:	d0f8      	beq.n	8008f2a <follow_path+0x16>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f3e:	d0f4      	beq.n	8008f2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2200      	movs	r2, #0
 8008f44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b1f      	cmp	r3, #31
 8008f4c:	d80a      	bhi.n	8008f64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2280      	movs	r2, #128	; 0x80
 8008f52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008f56:	2100      	movs	r1, #0
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff f8fd 	bl	8008158 <dir_sdi>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
 8008f62:	e048      	b.n	8008ff6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f64:	463b      	mov	r3, r7
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff fe1b 	bl	8008ba4 <create_name>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d139      	bne.n	8008fec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff fc5a 	bl	8008832 <dir_find>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d12c      	bne.n	8008ff0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008f96:	7afb      	ldrb	r3, [r7, #11]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d127      	bne.n	8008ff0 <follow_path+0xdc>
 8008fa0:	2305      	movs	r3, #5
 8008fa2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008fa4:	e024      	b.n	8008ff0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fa6:	7afb      	ldrb	r3, [r7, #11]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d121      	bne.n	8008ff4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	799b      	ldrb	r3, [r3, #6]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d102      	bne.n	8008fc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008fbc:	2305      	movs	r3, #5
 8008fbe:	75fb      	strb	r3, [r7, #23]
 8008fc0:	e019      	b.n	8008ff6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	8992      	ldrh	r2, [r2, #12]
 8008fd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fd4:	fb00 f202 	mul.w	r2, r0, r2
 8008fd8:	1a9b      	subs	r3, r3, r2
 8008fda:	440b      	add	r3, r1
 8008fdc:	4619      	mov	r1, r3
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff fa60 	bl	80084a4 <ld_clust>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008fea:	e7bb      	b.n	8008f64 <follow_path+0x50>
			if (res != FR_OK) break;
 8008fec:	bf00      	nop
 8008fee:	e002      	b.n	8008ff6 <follow_path+0xe2>
				break;
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ff4:	bf00      	nop
			}
		}
	}

	return res;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009008:	f04f 33ff 	mov.w	r3, #4294967295
 800900c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d031      	beq.n	800907a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	e002      	b.n	8009024 <get_ldnumber+0x24>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	3301      	adds	r3, #1
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b1f      	cmp	r3, #31
 800902a:	d903      	bls.n	8009034 <get_ldnumber+0x34>
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b3a      	cmp	r3, #58	; 0x3a
 8009032:	d1f4      	bne.n	800901e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b3a      	cmp	r3, #58	; 0x3a
 800903a:	d11c      	bne.n	8009076 <get_ldnumber+0x76>
			tp = *path;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	60fa      	str	r2, [r7, #12]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	3b30      	subs	r3, #48	; 0x30
 800904c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2b09      	cmp	r3, #9
 8009052:	d80e      	bhi.n	8009072 <get_ldnumber+0x72>
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	429a      	cmp	r2, r3
 800905a:	d10a      	bne.n	8009072 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d107      	bne.n	8009072 <get_ldnumber+0x72>
					vol = (int)i;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	3301      	adds	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	e002      	b.n	800907c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800907a:	693b      	ldr	r3, [r7, #16]
}
 800907c:	4618      	mov	r0, r3
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	70da      	strb	r2, [r3, #3]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f04f 32ff 	mov.w	r2, #4294967295
 800909e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7fe fc76 	bl	8007994 <move_window>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <check_fs+0x2a>
 80090ae:	2304      	movs	r3, #4
 80090b0:	e038      	b.n	8009124 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3338      	adds	r3, #56	; 0x38
 80090b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe f9ba 	bl	8007434 <ld_word>
 80090c0:	4603      	mov	r3, r0
 80090c2:	461a      	mov	r2, r3
 80090c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d001      	beq.n	80090d0 <check_fs+0x48>
 80090cc:	2303      	movs	r3, #3
 80090ce:	e029      	b.n	8009124 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090d6:	2be9      	cmp	r3, #233	; 0xe9
 80090d8:	d009      	beq.n	80090ee <check_fs+0x66>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090e0:	2beb      	cmp	r3, #235	; 0xeb
 80090e2:	d11e      	bne.n	8009122 <check_fs+0x9a>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090ea:	2b90      	cmp	r3, #144	; 0x90
 80090ec:	d119      	bne.n	8009122 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3338      	adds	r3, #56	; 0x38
 80090f2:	3336      	adds	r3, #54	; 0x36
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe f9b5 	bl	8007464 <ld_dword>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009100:	4a0a      	ldr	r2, [pc, #40]	; (800912c <check_fs+0xa4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d101      	bne.n	800910a <check_fs+0x82>
 8009106:	2300      	movs	r3, #0
 8009108:	e00c      	b.n	8009124 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3338      	adds	r3, #56	; 0x38
 800910e:	3352      	adds	r3, #82	; 0x52
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe f9a7 	bl	8007464 <ld_dword>
 8009116:	4603      	mov	r3, r0
 8009118:	4a05      	ldr	r2, [pc, #20]	; (8009130 <check_fs+0xa8>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d101      	bne.n	8009122 <check_fs+0x9a>
 800911e:	2300      	movs	r3, #0
 8009120:	e000      	b.n	8009124 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009122:	2302      	movs	r3, #2
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	00544146 	.word	0x00544146
 8009130:	33544146 	.word	0x33544146

08009134 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b096      	sub	sp, #88	; 0x58
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7ff ff59 	bl	8009000 <get_ldnumber>
 800914e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	2b00      	cmp	r3, #0
 8009154:	da01      	bge.n	800915a <find_volume+0x26>
 8009156:	230b      	movs	r3, #11
 8009158:	e265      	b.n	8009626 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800915a:	4a9f      	ldr	r2, [pc, #636]	; (80093d8 <find_volume+0x2a4>)
 800915c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800915e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009162:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <find_volume+0x3a>
 800916a:	230c      	movs	r3, #12
 800916c:	e25b      	b.n	8009626 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009172:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	f023 0301 	bic.w	r3, r3, #1
 800917a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01a      	beq.n	80091ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	785b      	ldrb	r3, [r3, #1]
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe f8b5 	bl	80072f8 <disk_status>
 800918e:	4603      	mov	r3, r0
 8009190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10c      	bne.n	80091ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d007      	beq.n	80091b6 <find_volume+0x82>
 80091a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80091b2:	230a      	movs	r3, #10
 80091b4:	e237      	b.n	8009626 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80091b6:	2300      	movs	r3, #0
 80091b8:	e235      	b.n	8009626 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	2200      	movs	r2, #0
 80091be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe f8ad 	bl	800732c <disk_initialize>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80091d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80091e4:	2303      	movs	r3, #3
 80091e6:	e21e      	b.n	8009626 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <find_volume+0xca>
 80091ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80091fa:	230a      	movs	r3, #10
 80091fc:	e213      	b.n	8009626 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	7858      	ldrb	r0, [r3, #1]
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	330c      	adds	r3, #12
 8009206:	461a      	mov	r2, r3
 8009208:	2102      	movs	r1, #2
 800920a:	f7fe f8f5 	bl	80073f8 <disk_ioctl>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <find_volume+0xe4>
 8009214:	2301      	movs	r3, #1
 8009216:	e206      	b.n	8009626 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	899b      	ldrh	r3, [r3, #12]
 800921c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009220:	d80d      	bhi.n	800923e <find_volume+0x10a>
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	899b      	ldrh	r3, [r3, #12]
 8009226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800922a:	d308      	bcc.n	800923e <find_volume+0x10a>
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	899b      	ldrh	r3, [r3, #12]
 8009230:	461a      	mov	r2, r3
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	899b      	ldrh	r3, [r3, #12]
 8009236:	3b01      	subs	r3, #1
 8009238:	4013      	ands	r3, r2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <find_volume+0x10e>
 800923e:	2301      	movs	r3, #1
 8009240:	e1f1      	b.n	8009626 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009246:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800924a:	f7ff ff1d 	bl	8009088 <check_fs>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009258:	2b02      	cmp	r3, #2
 800925a:	d149      	bne.n	80092f0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800925c:	2300      	movs	r3, #0
 800925e:	643b      	str	r3, [r7, #64]	; 0x40
 8009260:	e01e      	b.n	80092a0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009270:	4413      	add	r3, r2
 8009272:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	3304      	adds	r3, #4
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d006      	beq.n	800928c <find_volume+0x158>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	3308      	adds	r3, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe f8ee 	bl	8007464 <ld_dword>
 8009288:	4602      	mov	r2, r0
 800928a:	e000      	b.n	800928e <find_volume+0x15a>
 800928c:	2200      	movs	r2, #0
 800928e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	3358      	adds	r3, #88	; 0x58
 8009294:	443b      	add	r3, r7
 8009296:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800929a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929c:	3301      	adds	r3, #1
 800929e:	643b      	str	r3, [r7, #64]	; 0x40
 80092a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d9dd      	bls.n	8009262 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80092a6:	2300      	movs	r3, #0
 80092a8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80092aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <find_volume+0x182>
 80092b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b2:	3b01      	subs	r3, #1
 80092b4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80092b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	3358      	adds	r3, #88	; 0x58
 80092bc:	443b      	add	r3, r7
 80092be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80092c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80092c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <find_volume+0x1a2>
 80092ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092ce:	f7ff fedb 	bl	8009088 <check_fs>
 80092d2:	4603      	mov	r3, r0
 80092d4:	e000      	b.n	80092d8 <find_volume+0x1a4>
 80092d6:	2303      	movs	r3, #3
 80092d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80092dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d905      	bls.n	80092f0 <find_volume+0x1bc>
 80092e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e6:	3301      	adds	r3, #1
 80092e8:	643b      	str	r3, [r7, #64]	; 0x40
 80092ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d9e2      	bls.n	80092b6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80092f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	d101      	bne.n	80092fc <find_volume+0x1c8>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e194      	b.n	8009626 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009300:	2b01      	cmp	r3, #1
 8009302:	d901      	bls.n	8009308 <find_volume+0x1d4>
 8009304:	230d      	movs	r3, #13
 8009306:	e18e      	b.n	8009626 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	3338      	adds	r3, #56	; 0x38
 800930c:	330b      	adds	r3, #11
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe f890 	bl	8007434 <ld_word>
 8009314:	4603      	mov	r3, r0
 8009316:	461a      	mov	r2, r3
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	899b      	ldrh	r3, [r3, #12]
 800931c:	429a      	cmp	r2, r3
 800931e:	d001      	beq.n	8009324 <find_volume+0x1f0>
 8009320:	230d      	movs	r3, #13
 8009322:	e180      	b.n	8009626 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	3338      	adds	r3, #56	; 0x38
 8009328:	3316      	adds	r3, #22
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe f882 	bl	8007434 <ld_word>
 8009330:	4603      	mov	r3, r0
 8009332:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d106      	bne.n	8009348 <find_volume+0x214>
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	3338      	adds	r3, #56	; 0x38
 800933e:	3324      	adds	r3, #36	; 0x24
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe f88f 	bl	8007464 <ld_dword>
 8009346:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800934c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	789b      	ldrb	r3, [r3, #2]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d005      	beq.n	800936c <find_volume+0x238>
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	789b      	ldrb	r3, [r3, #2]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d001      	beq.n	800936c <find_volume+0x238>
 8009368:	230d      	movs	r3, #13
 800936a:	e15c      	b.n	8009626 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	789b      	ldrb	r3, [r3, #2]
 8009370:	461a      	mov	r2, r3
 8009372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009374:	fb02 f303 	mul.w	r3, r2, r3
 8009378:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009380:	b29a      	uxth	r2, r3
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	895b      	ldrh	r3, [r3, #10]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d008      	beq.n	80093a0 <find_volume+0x26c>
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	895b      	ldrh	r3, [r3, #10]
 8009392:	461a      	mov	r2, r3
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	895b      	ldrh	r3, [r3, #10]
 8009398:	3b01      	subs	r3, #1
 800939a:	4013      	ands	r3, r2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <find_volume+0x270>
 80093a0:	230d      	movs	r3, #13
 80093a2:	e140      	b.n	8009626 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	3338      	adds	r3, #56	; 0x38
 80093a8:	3311      	adds	r3, #17
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe f842 	bl	8007434 <ld_word>
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	891b      	ldrh	r3, [r3, #8]
 80093bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093be:	8992      	ldrh	r2, [r2, #12]
 80093c0:	0952      	lsrs	r2, r2, #5
 80093c2:	b292      	uxth	r2, r2
 80093c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093c8:	fb01 f202 	mul.w	r2, r1, r2
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <find_volume+0x2a8>
 80093d4:	230d      	movs	r3, #13
 80093d6:	e126      	b.n	8009626 <find_volume+0x4f2>
 80093d8:	20002884 	.word	0x20002884

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	3338      	adds	r3, #56	; 0x38
 80093e0:	3313      	adds	r3, #19
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe f826 	bl	8007434 <ld_word>
 80093e8:	4603      	mov	r3, r0
 80093ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80093ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <find_volume+0x2cc>
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	3338      	adds	r3, #56	; 0x38
 80093f6:	3320      	adds	r3, #32
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe f833 	bl	8007464 <ld_dword>
 80093fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	3338      	adds	r3, #56	; 0x38
 8009404:	330e      	adds	r3, #14
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe f814 	bl	8007434 <ld_word>
 800940c:	4603      	mov	r3, r0
 800940e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009410:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <find_volume+0x2e6>
 8009416:	230d      	movs	r3, #13
 8009418:	e105      	b.n	8009626 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800941a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800941c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941e:	4413      	add	r3, r2
 8009420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009422:	8911      	ldrh	r1, [r2, #8]
 8009424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009426:	8992      	ldrh	r2, [r2, #12]
 8009428:	0952      	lsrs	r2, r2, #5
 800942a:	b292      	uxth	r2, r2
 800942c:	fbb1 f2f2 	udiv	r2, r1, r2
 8009430:	b292      	uxth	r2, r2
 8009432:	4413      	add	r3, r2
 8009434:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	429a      	cmp	r2, r3
 800943c:	d201      	bcs.n	8009442 <find_volume+0x30e>
 800943e:	230d      	movs	r3, #13
 8009440:	e0f1      	b.n	8009626 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800944a:	8952      	ldrh	r2, [r2, #10]
 800944c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <find_volume+0x328>
 8009458:	230d      	movs	r3, #13
 800945a:	e0e4      	b.n	8009626 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800945c:	2303      	movs	r3, #3
 800945e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009468:	4293      	cmp	r3, r2
 800946a:	d802      	bhi.n	8009472 <find_volume+0x33e>
 800946c:	2302      	movs	r3, #2
 800946e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009478:	4293      	cmp	r3, r2
 800947a:	d802      	bhi.n	8009482 <find_volume+0x34e>
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	1c9a      	adds	r2, r3, #2
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800948e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009490:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009494:	441a      	add	r2, r3
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800949a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	441a      	add	r2, r3
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80094a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d11e      	bne.n	80094ea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	3338      	adds	r3, #56	; 0x38
 80094b0:	332a      	adds	r3, #42	; 0x2a
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fd ffbe 	bl	8007434 <ld_word>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <find_volume+0x38e>
 80094be:	230d      	movs	r3, #13
 80094c0:	e0b1      	b.n	8009626 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	891b      	ldrh	r3, [r3, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <find_volume+0x39a>
 80094ca:	230d      	movs	r3, #13
 80094cc:	e0ab      	b.n	8009626 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	3338      	adds	r3, #56	; 0x38
 80094d2:	332c      	adds	r3, #44	; 0x2c
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fd ffc5 	bl	8007464 <ld_dword>
 80094da:	4602      	mov	r2, r0
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	647b      	str	r3, [r7, #68]	; 0x44
 80094e8:	e01f      	b.n	800952a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	891b      	ldrh	r3, [r3, #8]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <find_volume+0x3c2>
 80094f2:	230d      	movs	r3, #13
 80094f4:	e097      	b.n	8009626 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fc:	441a      	add	r2, r3
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009506:	2b02      	cmp	r3, #2
 8009508:	d103      	bne.n	8009512 <find_volume+0x3de>
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	e00a      	b.n	8009528 <find_volume+0x3f4>
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	69da      	ldr	r2, [r3, #28]
 8009516:	4613      	mov	r3, r2
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	4413      	add	r3, r2
 800951c:	085a      	lsrs	r2, r3, #1
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009528:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	6a1a      	ldr	r2, [r3, #32]
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	899b      	ldrh	r3, [r3, #12]
 8009532:	4619      	mov	r1, r3
 8009534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009536:	440b      	add	r3, r1
 8009538:	3b01      	subs	r3, #1
 800953a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800953c:	8989      	ldrh	r1, [r1, #12]
 800953e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009542:	429a      	cmp	r2, r3
 8009544:	d201      	bcs.n	800954a <find_volume+0x416>
 8009546:	230d      	movs	r3, #13
 8009548:	e06d      	b.n	8009626 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	f04f 32ff 	mov.w	r2, #4294967295
 8009550:	619a      	str	r2, [r3, #24]
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	699a      	ldr	r2, [r3, #24]
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	2280      	movs	r2, #128	; 0x80
 800955e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009564:	2b03      	cmp	r3, #3
 8009566:	d149      	bne.n	80095fc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	3338      	adds	r3, #56	; 0x38
 800956c:	3330      	adds	r3, #48	; 0x30
 800956e:	4618      	mov	r0, r3
 8009570:	f7fd ff60 	bl	8007434 <ld_word>
 8009574:	4603      	mov	r3, r0
 8009576:	2b01      	cmp	r3, #1
 8009578:	d140      	bne.n	80095fc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800957a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800957c:	3301      	adds	r3, #1
 800957e:	4619      	mov	r1, r3
 8009580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009582:	f7fe fa07 	bl	8007994 <move_window>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d137      	bne.n	80095fc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	2200      	movs	r2, #0
 8009590:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	3338      	adds	r3, #56	; 0x38
 8009596:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd ff4a 	bl	8007434 <ld_word>
 80095a0:	4603      	mov	r3, r0
 80095a2:	461a      	mov	r2, r3
 80095a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d127      	bne.n	80095fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	3338      	adds	r3, #56	; 0x38
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fd ff57 	bl	8007464 <ld_dword>
 80095b6:	4603      	mov	r3, r0
 80095b8:	4a1d      	ldr	r2, [pc, #116]	; (8009630 <find_volume+0x4fc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d11e      	bne.n	80095fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	3338      	adds	r3, #56	; 0x38
 80095c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fd ff4c 	bl	8007464 <ld_dword>
 80095cc:	4603      	mov	r3, r0
 80095ce:	4a19      	ldr	r2, [pc, #100]	; (8009634 <find_volume+0x500>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d113      	bne.n	80095fc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	3338      	adds	r3, #56	; 0x38
 80095d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fd ff41 	bl	8007464 <ld_dword>
 80095e2:	4602      	mov	r2, r0
 80095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	3338      	adds	r3, #56	; 0x38
 80095ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fd ff37 	bl	8007464 <ld_dword>
 80095f6:	4602      	mov	r2, r0
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009602:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009604:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <find_volume+0x504>)
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	3301      	adds	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <find_volume+0x504>)
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <find_volume+0x504>)
 8009612:	881a      	ldrh	r2, [r3, #0]
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	4a08      	ldr	r2, [pc, #32]	; (800963c <find_volume+0x508>)
 800961c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800961e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009620:	f7fe f950 	bl	80078c4 <clear_lock>
#endif
	return FR_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3758      	adds	r7, #88	; 0x58
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	41615252 	.word	0x41615252
 8009634:	61417272 	.word	0x61417272
 8009638:	20002888 	.word	0x20002888
 800963c:	200028ac 	.word	0x200028ac

08009640 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800964a:	2309      	movs	r3, #9
 800964c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01c      	beq.n	800968e <validate+0x4e>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d018      	beq.n	800968e <validate+0x4e>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d013      	beq.n	800968e <validate+0x4e>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	889a      	ldrh	r2, [r3, #4]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	88db      	ldrh	r3, [r3, #6]
 8009670:	429a      	cmp	r2, r3
 8009672:	d10c      	bne.n	800968e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	785b      	ldrb	r3, [r3, #1]
 800967a:	4618      	mov	r0, r3
 800967c:	f7fd fe3c 	bl	80072f8 <disk_status>
 8009680:	4603      	mov	r3, r0
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <validate+0x4e>
			res = FR_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <validate+0x5a>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	e000      	b.n	800969c <validate+0x5c>
 800969a:	2300      	movs	r3, #0
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	6013      	str	r3, [r2, #0]
	return res;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80096be:	f107 0310 	add.w	r3, r7, #16
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fc9c 	bl	8009000 <get_ldnumber>
 80096c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	da01      	bge.n	80096d4 <f_mount+0x28>
 80096d0:	230b      	movs	r3, #11
 80096d2:	e02b      	b.n	800972c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80096d4:	4a17      	ldr	r2, [pc, #92]	; (8009734 <f_mount+0x88>)
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80096e4:	69b8      	ldr	r0, [r7, #24]
 80096e6:	f7fe f8ed 	bl	80078c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	490d      	ldr	r1, [pc, #52]	; (8009734 <f_mount+0x88>)
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <f_mount+0x66>
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d001      	beq.n	8009716 <f_mount+0x6a>
 8009712:	2300      	movs	r3, #0
 8009714:	e00a      	b.n	800972c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009716:	f107 010c 	add.w	r1, r7, #12
 800971a:	f107 0308 	add.w	r3, r7, #8
 800971e:	2200      	movs	r2, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff fd07 	bl	8009134 <find_volume>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800972a:	7dfb      	ldrb	r3, [r7, #23]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3720      	adds	r7, #32
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20002884 	.word	0x20002884

08009738 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b09a      	sub	sp, #104	; 0x68
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4613      	mov	r3, r2
 8009744:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <f_open+0x18>
 800974c:	2309      	movs	r3, #9
 800974e:	e1bb      	b.n	8009ac8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009756:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009758:	79fa      	ldrb	r2, [r7, #7]
 800975a:	f107 0114 	add.w	r1, r7, #20
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fce6 	bl	8009134 <find_volume>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800976e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009772:	2b00      	cmp	r3, #0
 8009774:	f040 819f 	bne.w	8009ab6 <f_open+0x37e>
		dj.obj.fs = fs;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	f107 0318 	add.w	r3, r7, #24
 8009782:	4611      	mov	r1, r2
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fbc5 	bl	8008f14 <follow_path>
 800978a:	4603      	mov	r3, r0
 800978c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11a      	bne.n	80097ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800979c:	b25b      	sxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	da03      	bge.n	80097aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80097a2:	2306      	movs	r3, #6
 80097a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80097a8:	e011      	b.n	80097ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	f023 0301 	bic.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	461a      	mov	r2, r3
 80097bc:	f107 0318 	add.w	r3, r7, #24
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fd ff36 	bl	8007634 <chk_lock>
 80097c8:	4603      	mov	r3, r0
 80097ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	f003 031c 	and.w	r3, r3, #28
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d07f      	beq.n	80098d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80097d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d017      	beq.n	8009810 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80097e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d10e      	bne.n	8009806 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80097e8:	f7fd ff80 	bl	80076ec <enq_lock>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d006      	beq.n	8009800 <f_open+0xc8>
 80097f2:	f107 0318 	add.w	r3, r7, #24
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff f8dc 	bl	80089b4 <dir_register>
 80097fc:	4603      	mov	r3, r0
 80097fe:	e000      	b.n	8009802 <f_open+0xca>
 8009800:	2312      	movs	r3, #18
 8009802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	f043 0308 	orr.w	r3, r3, #8
 800980c:	71fb      	strb	r3, [r7, #7]
 800980e:	e010      	b.n	8009832 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009810:	7fbb      	ldrb	r3, [r7, #30]
 8009812:	f003 0311 	and.w	r3, r3, #17
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <f_open+0xea>
					res = FR_DENIED;
 800981a:	2307      	movs	r3, #7
 800981c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009820:	e007      	b.n	8009832 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <f_open+0xfa>
 800982c:	2308      	movs	r3, #8
 800982e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009832:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009836:	2b00      	cmp	r3, #0
 8009838:	d168      	bne.n	800990c <f_open+0x1d4>
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	f003 0308 	and.w	r3, r3, #8
 8009840:	2b00      	cmp	r3, #0
 8009842:	d063      	beq.n	800990c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009844:	f7fd fcf4 	bl	8007230 <get_fattime>
 8009848:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	330e      	adds	r3, #14
 800984e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009850:	4618      	mov	r0, r3
 8009852:	f7fd fe45 	bl	80074e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	3316      	adds	r3, #22
 800985a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800985c:	4618      	mov	r0, r3
 800985e:	f7fd fe3f 	bl	80074e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	330b      	adds	r3, #11
 8009866:	2220      	movs	r2, #32
 8009868:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe fe17 	bl	80084a4 <ld_clust>
 8009876:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800987c:	2200      	movs	r2, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe fe2f 	bl	80084e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	331c      	adds	r3, #28
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f7fd fe28 	bl	80074e0 <st_dword>
					fs->wflag = 1;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2201      	movs	r2, #1
 8009894:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009898:	2b00      	cmp	r3, #0
 800989a:	d037      	beq.n	800990c <f_open+0x1d4>
						dw = fs->winsect;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80098a2:	f107 0318 	add.w	r3, r7, #24
 80098a6:	2200      	movs	r2, #0
 80098a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fb1f 	bl	8007eee <remove_chain>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80098b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d126      	bne.n	800990c <f_open+0x1d4>
							res = move_window(fs, dw);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe f866 	bl	8007994 <move_window>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098d2:	3a01      	subs	r2, #1
 80098d4:	615a      	str	r2, [r3, #20]
 80098d6:	e019      	b.n	800990c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80098d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d115      	bne.n	800990c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80098e0:	7fbb      	ldrb	r3, [r7, #30]
 80098e2:	f003 0310 	and.w	r3, r3, #16
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80098ea:	2304      	movs	r3, #4
 80098ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80098f0:	e00c      	b.n	800990c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d007      	beq.n	800990c <f_open+0x1d4>
 80098fc:	7fbb      	ldrb	r3, [r7, #30]
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <f_open+0x1d4>
						res = FR_DENIED;
 8009906:	2307      	movs	r3, #7
 8009908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800990c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009910:	2b00      	cmp	r3, #0
 8009912:	d128      	bne.n	8009966 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	f003 0308 	and.w	r3, r3, #8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009924:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800992e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	f023 0301 	bic.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	bf14      	ite	ne
 800993e:	2301      	movne	r3, #1
 8009940:	2300      	moveq	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	f107 0318 	add.w	r3, r7, #24
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f7fd feef 	bl	8007730 <inc_lock>
 8009952:	4602      	mov	r2, r0
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <f_open+0x22e>
 8009960:	2302      	movs	r3, #2
 8009962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009966:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800996a:	2b00      	cmp	r3, #0
 800996c:	f040 80a3 	bne.w	8009ab6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fd94 	bl	80084a4 <ld_clust>
 800997c:	4602      	mov	r2, r0
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	331c      	adds	r3, #28
 8009986:	4618      	mov	r0, r3
 8009988:	f7fd fd6c 	bl	8007464 <ld_dword>
 800998c:	4602      	mov	r2, r0
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	88da      	ldrh	r2, [r3, #6]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	79fa      	ldrb	r2, [r7, #7]
 80099aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3330      	adds	r3, #48	; 0x30
 80099c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fd fdd6 	bl	800757a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	f003 0320 	and.w	r3, r3, #32
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d06e      	beq.n	8009ab6 <f_open+0x37e>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d06a      	beq.n	8009ab6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	895b      	ldrh	r3, [r3, #10]
 80099ec:	461a      	mov	r2, r3
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	899b      	ldrh	r3, [r3, #12]
 80099f2:	fb02 f303 	mul.w	r3, r2, r3
 80099f6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a04:	e016      	b.n	8009a34 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe f87f 	bl	8007b0e <get_fat>
 8009a10:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d802      	bhi.n	8009a1e <f_open+0x2e6>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a24:	d102      	bne.n	8009a2c <f_open+0x2f4>
 8009a26:	2301      	movs	r3, #1
 8009a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d103      	bne.n	8009a44 <f_open+0x30c>
 8009a3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d8e0      	bhi.n	8009a06 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d131      	bne.n	8009ab6 <f_open+0x37e>
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	899b      	ldrh	r3, [r3, #12]
 8009a56:	461a      	mov	r2, r3
 8009a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a5e:	fb01 f202 	mul.w	r2, r1, r2
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d026      	beq.n	8009ab6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe f82f 	bl	8007ad0 <clust2sect>
 8009a72:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d103      	bne.n	8009a82 <f_open+0x34a>
						res = FR_INT_ERR;
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a80:	e019      	b.n	8009ab6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	899b      	ldrh	r3, [r3, #12]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a90:	441a      	add	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	7858      	ldrb	r0, [r3, #1]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f7fd fc67 	bl	8007378 <disk_read>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <f_open+0x37e>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <f_open+0x38c>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ac4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3768      	adds	r7, #104	; 0x68
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08c      	sub	sp, #48	; 0x30
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f107 0210 	add.w	r2, r7, #16
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fda5 	bl	8009640 <validate>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d107      	bne.n	8009b14 <f_write+0x44>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	7d5b      	ldrb	r3, [r3, #21]
 8009b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <f_write+0x4a>
 8009b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b18:	e16a      	b.n	8009df0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	7d1b      	ldrb	r3, [r3, #20]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <f_write+0x5a>
 8009b26:	2307      	movs	r3, #7
 8009b28:	e162      	b.n	8009df0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	699a      	ldr	r2, [r3, #24]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	441a      	add	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	f080 814c 	bcs.w	8009dd4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	43db      	mvns	r3, r3
 8009b42:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009b44:	e146      	b.n	8009dd4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	8992      	ldrh	r2, [r2, #12]
 8009b4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b52:	fb01 f202 	mul.w	r2, r1, r2
 8009b56:	1a9b      	subs	r3, r3, r2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f040 80f1 	bne.w	8009d40 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	8992      	ldrh	r2, [r2, #12]
 8009b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	8952      	ldrh	r2, [r2, #10]
 8009b6e:	3a01      	subs	r2, #1
 8009b70:	4013      	ands	r3, r2
 8009b72:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d143      	bne.n	8009c02 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10c      	bne.n	8009b9c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d11a      	bne.n	8009bc4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2100      	movs	r1, #0
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fa10 	bl	8007fb8 <create_chain>
 8009b98:	62b8      	str	r0, [r7, #40]	; 0x28
 8009b9a:	e013      	b.n	8009bc4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d007      	beq.n	8009bb4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7fe fa9c 	bl	80080e8 <clmt_clust>
 8009bb0:	62b8      	str	r0, [r7, #40]	; 0x28
 8009bb2:	e007      	b.n	8009bc4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f7fe f9fb 	bl	8007fb8 <create_chain>
 8009bc2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 8109 	beq.w	8009dde <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d104      	bne.n	8009bdc <f_write+0x10c>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	755a      	strb	r2, [r3, #21]
 8009bd8:	2302      	movs	r3, #2
 8009bda:	e109      	b.n	8009df0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d104      	bne.n	8009bee <f_write+0x11e>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	755a      	strb	r2, [r3, #21]
 8009bea:	2301      	movs	r3, #1
 8009bec:	e100      	b.n	8009df0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bf2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <f_write+0x132>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c00:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	7d1b      	ldrb	r3, [r3, #20]
 8009c06:	b25b      	sxtb	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	da18      	bge.n	8009c3e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	7858      	ldrb	r0, [r3, #1]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6a1a      	ldr	r2, [r3, #32]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f7fd fbcc 	bl	80073b8 <disk_write>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <f_write+0x160>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	755a      	strb	r2, [r3, #21]
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e0df      	b.n	8009df0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	7d1b      	ldrb	r3, [r3, #20]
 8009c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	69db      	ldr	r3, [r3, #28]
 8009c44:	4619      	mov	r1, r3
 8009c46:	4610      	mov	r0, r2
 8009c48:	f7fd ff42 	bl	8007ad0 <clust2sect>
 8009c4c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d104      	bne.n	8009c5e <f_write+0x18e>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2202      	movs	r2, #2
 8009c58:	755a      	strb	r2, [r3, #21]
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e0c8      	b.n	8009df0 <f_write+0x320>
			sect += csect;
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	4413      	add	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	899b      	ldrh	r3, [r3, #12]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c72:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d043      	beq.n	8009d02 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	4413      	add	r3, r2
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	8952      	ldrh	r2, [r2, #10]
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d905      	bls.n	8009c94 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	895b      	ldrh	r3, [r3, #10]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	7858      	ldrb	r0, [r3, #1]
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	69f9      	ldr	r1, [r7, #28]
 8009c9e:	f7fd fb8b 	bl	80073b8 <disk_write>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <f_write+0x1e2>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2201      	movs	r2, #1
 8009cac:	755a      	strb	r2, [r3, #21]
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e09e      	b.n	8009df0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a1a      	ldr	r2, [r3, #32]
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	6a3a      	ldr	r2, [r7, #32]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d918      	bls.n	8009cf2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a1a      	ldr	r2, [r3, #32]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	8992      	ldrh	r2, [r2, #12]
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	69fa      	ldr	r2, [r7, #28]
 8009cd8:	18d1      	adds	r1, r2, r3
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	899b      	ldrh	r3, [r3, #12]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f7fd fc2a 	bl	8007538 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	7d1b      	ldrb	r3, [r3, #20]
 8009ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	899b      	ldrh	r3, [r3, #12]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009d00:	e04b      	b.n	8009d9a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d016      	beq.n	8009d3a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	699a      	ldr	r2, [r3, #24]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d210      	bcs.n	8009d3a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	7858      	ldrb	r0, [r3, #1]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d22:	2301      	movs	r3, #1
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	f7fd fb27 	bl	8007378 <disk_read>
 8009d2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	755a      	strb	r2, [r3, #21]
 8009d36:	2301      	movs	r3, #1
 8009d38:	e05a      	b.n	8009df0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	899b      	ldrh	r3, [r3, #12]
 8009d44:	4618      	mov	r0, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	8992      	ldrh	r2, [r2, #12]
 8009d4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d52:	fb01 f202 	mul.w	r2, r1, r2
 8009d56:	1a9b      	subs	r3, r3, r2
 8009d58:	1ac3      	subs	r3, r0, r3
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d901      	bls.n	8009d68 <f_write+0x298>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	8992      	ldrh	r2, [r2, #12]
 8009d76:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d7a:	fb00 f202 	mul.w	r2, r0, r2
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	440b      	add	r3, r1
 8009d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d84:	69f9      	ldr	r1, [r7, #28]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fd fbd6 	bl	8007538 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	7d1b      	ldrb	r3, [r3, #20]
 8009d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	4413      	add	r3, r2
 8009da0:	61fb      	str	r3, [r7, #28]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	699a      	ldr	r2, [r3, #24]
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	441a      	add	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	619a      	str	r2, [r3, #24]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	bf38      	it	cc
 8009dba:	461a      	movcc	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	60da      	str	r2, [r3, #12]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	441a      	add	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f47f aeb5 	bne.w	8009b46 <f_write+0x76>
 8009ddc:	e000      	b.n	8009de0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009dde:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	7d1b      	ldrb	r3, [r3, #20]
 8009de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3730      	adds	r7, #48	; 0x30
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f107 0208 	add.w	r2, r7, #8
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff fc19 	bl	8009640 <validate>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d168      	bne.n	8009eea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	7d1b      	ldrb	r3, [r3, #20]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d062      	beq.n	8009eea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7d1b      	ldrb	r3, [r3, #20]
 8009e28:	b25b      	sxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da15      	bge.n	8009e5a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	7858      	ldrb	r0, [r3, #1]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a1a      	ldr	r2, [r3, #32]
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f7fd fabb 	bl	80073b8 <disk_write>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <f_sync+0x54>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e04f      	b.n	8009eec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7d1b      	ldrb	r3, [r3, #20]
 8009e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009e5a:	f7fd f9e9 	bl	8007230 <get_fattime>
 8009e5e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f7fd fd93 	bl	8007994 <move_window>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d138      	bne.n	8009eea <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	330b      	adds	r3, #11
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	330b      	adds	r3, #11
 8009e88:	f042 0220 	orr.w	r2, r2, #32
 8009e8c:	b2d2      	uxtb	r2, r2
 8009e8e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	68f9      	ldr	r1, [r7, #12]
 8009e9c:	f7fe fb21 	bl	80084e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f103 021c 	add.w	r2, r3, #28
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4610      	mov	r0, r2
 8009eae:	f7fd fb17 	bl	80074e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3316      	adds	r3, #22
 8009eb6:	6939      	ldr	r1, [r7, #16]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fd fb11 	bl	80074e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3312      	adds	r3, #18
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fd faf0 	bl	80074aa <st_word>
					fs->wflag = 1;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fd fd8c 	bl	80079f0 <sync_fs>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7d1b      	ldrb	r3, [r3, #20]
 8009ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff ff7b 	bl	8009df8 <f_sync>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d118      	bne.n	8009f3e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f107 0208 	add.w	r2, r7, #8
 8009f12:	4611      	mov	r1, r2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fb93 	bl	8009640 <validate>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10c      	bne.n	8009f3e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fd fc8f 	bl	800784c <dec_lock>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b090      	sub	sp, #64	; 0x40
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f107 0208 	add.w	r2, r7, #8
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff fb70 	bl	8009640 <validate>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d103      	bne.n	8009f76 <f_lseek+0x2e>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	7d5b      	ldrb	r3, [r3, #21]
 8009f72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009f76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <f_lseek+0x3c>
 8009f7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f82:	e201      	b.n	800a388 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 80d9 	beq.w	800a140 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f94:	d15a      	bne.n	800a04c <f_lseek+0x104>
			tbl = fp->cltbl;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	1d1a      	adds	r2, r3, #4
 8009fa0:	627a      	str	r2, [r7, #36]	; 0x24
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	617b      	str	r3, [r7, #20]
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d03a      	beq.n	800a02c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	613b      	str	r3, [r7, #16]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fca:	3301      	adds	r3, #1
 8009fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fd fd9b 	bl	8007b0e <get_fat>
 8009fd8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d804      	bhi.n	8009fea <f_lseek+0xa2>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	755a      	strb	r2, [r3, #21]
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e1ce      	b.n	800a388 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff0:	d104      	bne.n	8009ffc <f_lseek+0xb4>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	755a      	strb	r2, [r3, #21]
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e1c5      	b.n	800a388 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3301      	adds	r3, #1
 800a000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a002:	429a      	cmp	r2, r3
 800a004:	d0de      	beq.n	8009fc4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d809      	bhi.n	800a022 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	1d1a      	adds	r2, r3, #4
 800a012:	627a      	str	r2, [r7, #36]	; 0x24
 800a014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	627a      	str	r2, [r7, #36]	; 0x24
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a028:	429a      	cmp	r2, r3
 800a02a:	d3c4      	bcc.n	8009fb6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a032:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d803      	bhi.n	800a044 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	e19f      	b.n	800a384 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a044:	2311      	movs	r3, #17
 800a046:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a04a:	e19b      	b.n	800a384 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	429a      	cmp	r2, r3
 800a054:	d902      	bls.n	800a05c <f_lseek+0x114>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 818d 	beq.w	800a384 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7fe f839 	bl	80080e8 <clmt_clust>
 800a076:	4602      	mov	r2, r0
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	4619      	mov	r1, r3
 800a084:	4610      	mov	r0, r2
 800a086:	f7fd fd23 	bl	8007ad0 <clust2sect>
 800a08a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d104      	bne.n	800a09c <f_lseek+0x154>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2202      	movs	r2, #2
 800a096:	755a      	strb	r2, [r3, #21]
 800a098:	2302      	movs	r3, #2
 800a09a:	e175      	b.n	800a388 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	8992      	ldrh	r2, [r2, #12]
 800a0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	8952      	ldrh	r2, [r2, #10]
 800a0ac:	3a01      	subs	r2, #1
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	8992      	ldrh	r2, [r2, #12]
 800a0be:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c2:	fb01 f202 	mul.w	r2, r1, r2
 800a0c6:	1a9b      	subs	r3, r3, r2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 815b 	beq.w	800a384 <f_lseek+0x43c>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	f000 8155 	beq.w	800a384 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	7d1b      	ldrb	r3, [r3, #20]
 800a0de:	b25b      	sxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	da18      	bge.n	800a116 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	7858      	ldrb	r0, [r3, #1]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1a      	ldr	r2, [r3, #32]
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	f7fd f960 	bl	80073b8 <disk_write>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d004      	beq.n	800a108 <f_lseek+0x1c0>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	755a      	strb	r2, [r3, #21]
 800a104:	2301      	movs	r3, #1
 800a106:	e13f      	b.n	800a388 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	7d1b      	ldrb	r3, [r3, #20]
 800a10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a110:	b2da      	uxtb	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	7858      	ldrb	r0, [r3, #1]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a120:	2301      	movs	r3, #1
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	f7fd f928 	bl	8007378 <disk_read>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d004      	beq.n	800a138 <f_lseek+0x1f0>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	755a      	strb	r2, [r3, #21]
 800a134:	2301      	movs	r3, #1
 800a136:	e127      	b.n	800a388 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	621a      	str	r2, [r3, #32]
 800a13e:	e121      	b.n	800a384 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	429a      	cmp	r2, r3
 800a148:	d908      	bls.n	800a15c <f_lseek+0x214>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	7d1b      	ldrb	r3, [r3, #20]
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d102      	bne.n	800a15c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a16a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 80b5 	beq.w	800a2de <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	895b      	ldrh	r3, [r3, #10]
 800a178:	461a      	mov	r2, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	899b      	ldrh	r3, [r3, #12]
 800a17e:	fb02 f303 	mul.w	r3, r2, r3
 800a182:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01b      	beq.n	800a1c2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	1e5a      	subs	r2, r3, #1
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	fbb2 f2f3 	udiv	r2, r2, r3
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	1e59      	subs	r1, r3, #1
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d30f      	bcc.n	800a1c2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	1e5a      	subs	r2, r3, #1
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	425b      	negs	r3, r3
 800a1aa:	401a      	ands	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1c0:	e022      	b.n	800a208 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d119      	bne.n	800a202 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fd fef0 	bl	8007fb8 <create_chain>
 800a1d8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d104      	bne.n	800a1ea <f_lseek+0x2a2>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	755a      	strb	r2, [r3, #21]
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	e0ce      	b.n	800a388 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f0:	d104      	bne.n	800a1fc <f_lseek+0x2b4>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	755a      	strb	r2, [r3, #21]
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e0c5      	b.n	800a388 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a200:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a206:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d067      	beq.n	800a2de <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a20e:	e03a      	b.n	800a286 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699a      	ldr	r2, [r3, #24]
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	441a      	add	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	7d1b      	ldrb	r3, [r3, #20]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00b      	beq.n	800a248 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd febf 	bl	8007fb8 <create_chain>
 800a23a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d108      	bne.n	800a254 <f_lseek+0x30c>
							ofs = 0; break;
 800a242:	2300      	movs	r3, #0
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	e022      	b.n	800a28e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fd fc5e 	bl	8007b0e <get_fat>
 800a252:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d104      	bne.n	800a266 <f_lseek+0x31e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	755a      	strb	r2, [r3, #21]
 800a262:	2301      	movs	r3, #1
 800a264:	e090      	b.n	800a388 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d904      	bls.n	800a276 <f_lseek+0x32e>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a272:	429a      	cmp	r2, r3
 800a274:	d304      	bcc.n	800a280 <f_lseek+0x338>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2202      	movs	r2, #2
 800a27a:	755a      	strb	r2, [r3, #21]
 800a27c:	2302      	movs	r3, #2
 800a27e:	e083      	b.n	800a388 <f_lseek+0x440>
					fp->clust = clst;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a284:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d8c0      	bhi.n	800a210 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	441a      	add	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	899b      	ldrh	r3, [r3, #12]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2a6:	fb01 f202 	mul.w	r2, r1, r2
 800a2aa:	1a9b      	subs	r3, r3, r2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d016      	beq.n	800a2de <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fd fc0b 	bl	8007ad0 <clust2sect>
 800a2ba:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d104      	bne.n	800a2cc <f_lseek+0x384>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	755a      	strb	r2, [r3, #21]
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e05d      	b.n	800a388 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	899b      	ldrh	r3, [r3, #12]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2da:	4413      	add	r3, r2
 800a2dc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	699a      	ldr	r2, [r3, #24]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d90a      	bls.n	800a300 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	7d1b      	ldrb	r3, [r3, #20]
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	8992      	ldrh	r2, [r2, #12]
 800a308:	fbb3 f1f2 	udiv	r1, r3, r2
 800a30c:	fb01 f202 	mul.w	r2, r1, r2
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d036      	beq.n	800a384 <f_lseek+0x43c>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d031      	beq.n	800a384 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7d1b      	ldrb	r3, [r3, #20]
 800a324:	b25b      	sxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	da18      	bge.n	800a35c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	7858      	ldrb	r0, [r3, #1]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a1a      	ldr	r2, [r3, #32]
 800a338:	2301      	movs	r3, #1
 800a33a:	f7fd f83d 	bl	80073b8 <disk_write>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <f_lseek+0x406>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	755a      	strb	r2, [r3, #21]
 800a34a:	2301      	movs	r3, #1
 800a34c:	e01c      	b.n	800a388 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	7d1b      	ldrb	r3, [r3, #20]
 800a352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	7858      	ldrb	r0, [r3, #1]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a366:	2301      	movs	r3, #1
 800a368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a36a:	f7fd f805 	bl	8007378 <disk_read>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d004      	beq.n	800a37e <f_lseek+0x436>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	755a      	strb	r2, [r3, #21]
 800a37a:	2301      	movs	r3, #1
 800a37c:	e004      	b.n	800a388 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a382:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a384:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3740      	adds	r7, #64	; 0x40
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b092      	sub	sp, #72	; 0x48
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a39c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe fec4 	bl	8009134 <find_volume>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a3b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f040 8099 	bne.w	800a4ee <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	699a      	ldr	r2, [r3, #24]
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	3b02      	subs	r3, #2
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d804      	bhi.n	800a3da <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	699a      	ldr	r2, [r3, #24]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	e089      	b.n	800a4ee <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d128      	bne.n	800a438 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a3ee:	f107 0314 	add.w	r3, r7, #20
 800a3f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fd fb8a 	bl	8007b0e <get_fat>
 800a3fa:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	d103      	bne.n	800a40c <f_getfree+0x7c>
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a40a:	e063      	b.n	800a4d4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d103      	bne.n	800a41a <f_getfree+0x8a>
 800a412:	2302      	movs	r3, #2
 800a414:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a418:	e05c      	b.n	800a4d4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <f_getfree+0x96>
 800a420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a422:	3301      	adds	r3, #1
 800a424:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a428:	3301      	adds	r3, #1
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	69db      	ldr	r3, [r3, #28]
 800a430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a432:	429a      	cmp	r2, r3
 800a434:	d3db      	bcc.n	800a3ee <f_getfree+0x5e>
 800a436:	e04d      	b.n	800a4d4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	637b      	str	r3, [r7, #52]	; 0x34
 800a448:	2300      	movs	r3, #0
 800a44a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d113      	bne.n	800a47a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	63ba      	str	r2, [r7, #56]	; 0x38
 800a45a:	4619      	mov	r1, r3
 800a45c:	f7fd fa9a 	bl	8007994 <move_window>
 800a460:	4603      	mov	r3, r0
 800a462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a466:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d131      	bne.n	800a4d2 <f_getfree+0x142>
							p = fs->win;
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	3338      	adds	r3, #56	; 0x38
 800a472:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	899b      	ldrh	r3, [r3, #12]
 800a478:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d10f      	bne.n	800a4a2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a484:	f7fc ffd6 	bl	8007434 <ld_word>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <f_getfree+0x104>
 800a48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a490:	3301      	adds	r3, #1
 800a492:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	3302      	adds	r3, #2
 800a498:	633b      	str	r3, [r7, #48]	; 0x30
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	3b02      	subs	r3, #2
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a0:	e010      	b.n	800a4c4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a4a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4a4:	f7fc ffde 	bl	8007464 <ld_dword>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <f_getfree+0x128>
 800a4b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	633b      	str	r3, [r7, #48]	; 0x30
 800a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c0:	3b04      	subs	r3, #4
 800a4c2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1bd      	bne.n	800a44c <f_getfree+0xbc>
 800a4d0:	e000      	b.n	800a4d4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a4d2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4d8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4de:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	791a      	ldrb	r2, [r3, #4]
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a4ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3748      	adds	r7, #72	; 0x48
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	2b0a      	cmp	r3, #10
 800a50a:	d103      	bne.n	800a514 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a50c:	210d      	movs	r1, #13
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff fff3 	bl	800a4fa <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	db25      	blt.n	800a56c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	60fa      	str	r2, [r7, #12]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	4413      	add	r3, r2
 800a52a:	78fa      	ldrb	r2, [r7, #3]
 800a52c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b3c      	cmp	r3, #60	; 0x3c
 800a532:	dd12      	ble.n	800a55a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f103 010c 	add.w	r1, r3, #12
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	f107 0308 	add.w	r3, r7, #8
 800a544:	f7ff fac4 	bl	8009ad0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d101      	bne.n	800a554 <putc_bfd+0x5a>
 800a550:	2300      	movs	r3, #0
 800a552:	e001      	b.n	800a558 <putc_bfd+0x5e>
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	609a      	str	r2, [r3, #8]
 800a56a:	e000      	b.n	800a56e <putc_bfd+0x74>
	if (i < 0) return;
 800a56c:	bf00      	nop
}
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	db16      	blt.n	800a5b2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6818      	ldr	r0, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f103 010c 	add.w	r1, r3, #12
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	461a      	mov	r2, r3
 800a594:	f107 030c 	add.w	r3, r7, #12
 800a598:	f7ff fa9a 	bl	8009ad0 <f_write>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d107      	bne.n	800a5b2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d102      	bne.n	800a5b2 <putc_flush+0x3e>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	e001      	b.n	800a5b6 <putc_flush+0x42>
	return EOF;
 800a5b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	605a      	str	r2, [r3, #4]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	609a      	str	r2, [r3, #8]
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b096      	sub	sp, #88	; 0x58
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a5f2:	f107 030c 	add.w	r3, r7, #12
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff ffe0 	bl	800a5be <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a5fe:	e009      	b.n	800a614 <f_puts+0x2c>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	607a      	str	r2, [r7, #4]
 800a606:	781a      	ldrb	r2, [r3, #0]
 800a608:	f107 030c 	add.w	r3, r7, #12
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff ff73 	bl	800a4fa <putc_bfd>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1f1      	bne.n	800a600 <f_puts+0x18>
	return putc_flush(&pb);
 800a61c:	f107 030c 	add.w	r3, r7, #12
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff ffa7 	bl	800a574 <putc_flush>
 800a626:	4603      	mov	r3, r0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3758      	adds	r7, #88	; 0x58
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a63e:	2301      	movs	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a646:	4b1f      	ldr	r3, [pc, #124]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a648:	7a5b      	ldrb	r3, [r3, #9]
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d131      	bne.n	800a6b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a650:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a652:	7a5b      	ldrb	r3, [r3, #9]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	461a      	mov	r2, r3
 800a658:	4b1a      	ldr	r3, [pc, #104]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a65a:	2100      	movs	r1, #0
 800a65c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a65e:	4b19      	ldr	r3, [pc, #100]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a660:	7a5b      	ldrb	r3, [r3, #9]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	4a17      	ldr	r2, [pc, #92]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a66e:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a670:	7a5b      	ldrb	r3, [r3, #9]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	461a      	mov	r2, r3
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a678:	4413      	add	r3, r2
 800a67a:	79fa      	ldrb	r2, [r7, #7]
 800a67c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a67e:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a680:	7a5b      	ldrb	r3, [r3, #9]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	b2d1      	uxtb	r1, r2
 800a688:	4a0e      	ldr	r2, [pc, #56]	; (800a6c4 <FATFS_LinkDriverEx+0x94>)
 800a68a:	7251      	strb	r1, [r2, #9]
 800a68c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a68e:	7dbb      	ldrb	r3, [r7, #22]
 800a690:	3330      	adds	r3, #48	; 0x30
 800a692:	b2da      	uxtb	r2, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	3301      	adds	r3, #1
 800a69c:	223a      	movs	r2, #58	; 0x3a
 800a69e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	222f      	movs	r2, #47	; 0x2f
 800a6a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	3303      	adds	r3, #3
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	371c      	adds	r7, #28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20002aac 	.word	0x20002aac

0800a6c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff ffaa 	bl	800a630 <FATFS_LinkDriverEx>
 800a6dc:	4603      	mov	r3, r0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a6f4:	88fb      	ldrh	r3, [r7, #6]
 800a6f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a6f8:	d802      	bhi.n	800a700 <ff_convert+0x18>
		c = chr;
 800a6fa:	88fb      	ldrh	r3, [r7, #6]
 800a6fc:	81fb      	strh	r3, [r7, #14]
 800a6fe:	e025      	b.n	800a74c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	2bff      	cmp	r3, #255	; 0xff
 800a70a:	d805      	bhi.n	800a718 <ff_convert+0x30>
 800a70c:	88fb      	ldrh	r3, [r7, #6]
 800a70e:	3b80      	subs	r3, #128	; 0x80
 800a710:	4a12      	ldr	r2, [pc, #72]	; (800a75c <ff_convert+0x74>)
 800a712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a716:	e000      	b.n	800a71a <ff_convert+0x32>
 800a718:	2300      	movs	r3, #0
 800a71a:	81fb      	strh	r3, [r7, #14]
 800a71c:	e016      	b.n	800a74c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a71e:	2300      	movs	r3, #0
 800a720:	81fb      	strh	r3, [r7, #14]
 800a722:	e009      	b.n	800a738 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a724:	89fb      	ldrh	r3, [r7, #14]
 800a726:	4a0d      	ldr	r2, [pc, #52]	; (800a75c <ff_convert+0x74>)
 800a728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a72c:	88fa      	ldrh	r2, [r7, #6]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d006      	beq.n	800a740 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a732:	89fb      	ldrh	r3, [r7, #14]
 800a734:	3301      	adds	r3, #1
 800a736:	81fb      	strh	r3, [r7, #14]
 800a738:	89fb      	ldrh	r3, [r7, #14]
 800a73a:	2b7f      	cmp	r3, #127	; 0x7f
 800a73c:	d9f2      	bls.n	800a724 <ff_convert+0x3c>
 800a73e:	e000      	b.n	800a742 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a740:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a742:	89fb      	ldrh	r3, [r7, #14]
 800a744:	3380      	adds	r3, #128	; 0x80
 800a746:	b29b      	uxth	r3, r3
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a74c:	89fb      	ldrh	r3, [r7, #14]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	0800d8f4 	.word	0x0800d8f4

0800a760 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a770:	d201      	bcs.n	800a776 <ff_wtoupper+0x16>
 800a772:	4b3e      	ldr	r3, [pc, #248]	; (800a86c <ff_wtoupper+0x10c>)
 800a774:	e000      	b.n	800a778 <ff_wtoupper+0x18>
 800a776:	4b3e      	ldr	r3, [pc, #248]	; (800a870 <ff_wtoupper+0x110>)
 800a778:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	1c9a      	adds	r2, r3, #2
 800a77e:	617a      	str	r2, [r7, #20]
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a784:	8a7b      	ldrh	r3, [r7, #18]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d068      	beq.n	800a85c <ff_wtoupper+0xfc>
 800a78a:	88fa      	ldrh	r2, [r7, #6]
 800a78c:	8a7b      	ldrh	r3, [r7, #18]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d364      	bcc.n	800a85c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	1c9a      	adds	r2, r3, #2
 800a796:	617a      	str	r2, [r7, #20]
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	823b      	strh	r3, [r7, #16]
 800a79c:	8a3b      	ldrh	r3, [r7, #16]
 800a79e:	0a1b      	lsrs	r3, r3, #8
 800a7a0:	81fb      	strh	r3, [r7, #14]
 800a7a2:	8a3b      	ldrh	r3, [r7, #16]
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a7a8:	88fa      	ldrh	r2, [r7, #6]
 800a7aa:	8a79      	ldrh	r1, [r7, #18]
 800a7ac:	8a3b      	ldrh	r3, [r7, #16]
 800a7ae:	440b      	add	r3, r1
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	da49      	bge.n	800a848 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a7b4:	89fb      	ldrh	r3, [r7, #14]
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	d84f      	bhi.n	800a85a <ff_wtoupper+0xfa>
 800a7ba:	a201      	add	r2, pc, #4	; (adr r2, 800a7c0 <ff_wtoupper+0x60>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a7e5 	.word	0x0800a7e5
 800a7c4:	0800a7f7 	.word	0x0800a7f7
 800a7c8:	0800a80d 	.word	0x0800a80d
 800a7cc:	0800a815 	.word	0x0800a815
 800a7d0:	0800a81d 	.word	0x0800a81d
 800a7d4:	0800a825 	.word	0x0800a825
 800a7d8:	0800a82d 	.word	0x0800a82d
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a83d 	.word	0x0800a83d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a7e4:	88fa      	ldrh	r2, [r7, #6]
 800a7e6:	8a7b      	ldrh	r3, [r7, #18]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	80fb      	strh	r3, [r7, #6]
 800a7f4:	e027      	b.n	800a846 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a7f6:	88fa      	ldrh	r2, [r7, #6]
 800a7f8:	8a7b      	ldrh	r3, [r7, #18]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	b29b      	uxth	r3, r3
 800a804:	88fa      	ldrh	r2, [r7, #6]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	80fb      	strh	r3, [r7, #6]
 800a80a:	e01c      	b.n	800a846 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a80c:	88fb      	ldrh	r3, [r7, #6]
 800a80e:	3b10      	subs	r3, #16
 800a810:	80fb      	strh	r3, [r7, #6]
 800a812:	e018      	b.n	800a846 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a814:	88fb      	ldrh	r3, [r7, #6]
 800a816:	3b20      	subs	r3, #32
 800a818:	80fb      	strh	r3, [r7, #6]
 800a81a:	e014      	b.n	800a846 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a81c:	88fb      	ldrh	r3, [r7, #6]
 800a81e:	3b30      	subs	r3, #48	; 0x30
 800a820:	80fb      	strh	r3, [r7, #6]
 800a822:	e010      	b.n	800a846 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	3b1a      	subs	r3, #26
 800a828:	80fb      	strh	r3, [r7, #6]
 800a82a:	e00c      	b.n	800a846 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a82c:	88fb      	ldrh	r3, [r7, #6]
 800a82e:	3308      	adds	r3, #8
 800a830:	80fb      	strh	r3, [r7, #6]
 800a832:	e008      	b.n	800a846 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a834:	88fb      	ldrh	r3, [r7, #6]
 800a836:	3b50      	subs	r3, #80	; 0x50
 800a838:	80fb      	strh	r3, [r7, #6]
 800a83a:	e004      	b.n	800a846 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a83c:	88fb      	ldrh	r3, [r7, #6]
 800a83e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a842:	80fb      	strh	r3, [r7, #6]
 800a844:	bf00      	nop
			}
			break;
 800a846:	e008      	b.n	800a85a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a848:	89fb      	ldrh	r3, [r7, #14]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d195      	bne.n	800a77a <ff_wtoupper+0x1a>
 800a84e:	8a3b      	ldrh	r3, [r7, #16]
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	4413      	add	r3, r2
 800a856:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a858:	e78f      	b.n	800a77a <ff_wtoupper+0x1a>
			break;
 800a85a:	bf00      	nop
	}

	return chr;
 800a85c:	88fb      	ldrh	r3, [r7, #6]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	0800d9f4 	.word	0x0800d9f4
 800a870:	0800dbe8 	.word	0x0800dbe8

0800a874 <__errno>:
 800a874:	4b01      	ldr	r3, [pc, #4]	; (800a87c <__errno+0x8>)
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20000024 	.word	0x20000024

0800a880 <__libc_init_array>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	4d0d      	ldr	r5, [pc, #52]	; (800a8b8 <__libc_init_array+0x38>)
 800a884:	4c0d      	ldr	r4, [pc, #52]	; (800a8bc <__libc_init_array+0x3c>)
 800a886:	1b64      	subs	r4, r4, r5
 800a888:	10a4      	asrs	r4, r4, #2
 800a88a:	2600      	movs	r6, #0
 800a88c:	42a6      	cmp	r6, r4
 800a88e:	d109      	bne.n	800a8a4 <__libc_init_array+0x24>
 800a890:	4d0b      	ldr	r5, [pc, #44]	; (800a8c0 <__libc_init_array+0x40>)
 800a892:	4c0c      	ldr	r4, [pc, #48]	; (800a8c4 <__libc_init_array+0x44>)
 800a894:	f002 ff04 	bl	800d6a0 <_init>
 800a898:	1b64      	subs	r4, r4, r5
 800a89a:	10a4      	asrs	r4, r4, #2
 800a89c:	2600      	movs	r6, #0
 800a89e:	42a6      	cmp	r6, r4
 800a8a0:	d105      	bne.n	800a8ae <__libc_init_array+0x2e>
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a8:	4798      	blx	r3
 800a8aa:	3601      	adds	r6, #1
 800a8ac:	e7ee      	b.n	800a88c <__libc_init_array+0xc>
 800a8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b2:	4798      	blx	r3
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	e7f2      	b.n	800a89e <__libc_init_array+0x1e>
 800a8b8:	0800e084 	.word	0x0800e084
 800a8bc:	0800e084 	.word	0x0800e084
 800a8c0:	0800e084 	.word	0x0800e084
 800a8c4:	0800e088 	.word	0x0800e088

0800a8c8 <memset>:
 800a8c8:	4402      	add	r2, r0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d100      	bne.n	800a8d2 <memset+0xa>
 800a8d0:	4770      	bx	lr
 800a8d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d6:	e7f9      	b.n	800a8cc <memset+0x4>

0800a8d8 <__cvt>:
 800a8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	ec55 4b10 	vmov	r4, r5, d0
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	460e      	mov	r6, r1
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	462b      	mov	r3, r5
 800a8e8:	bfbb      	ittet	lt
 800a8ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8ee:	461d      	movlt	r5, r3
 800a8f0:	2300      	movge	r3, #0
 800a8f2:	232d      	movlt	r3, #45	; 0x2d
 800a8f4:	700b      	strb	r3, [r1, #0]
 800a8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8fc:	4691      	mov	r9, r2
 800a8fe:	f023 0820 	bic.w	r8, r3, #32
 800a902:	bfbc      	itt	lt
 800a904:	4622      	movlt	r2, r4
 800a906:	4614      	movlt	r4, r2
 800a908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a90c:	d005      	beq.n	800a91a <__cvt+0x42>
 800a90e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a912:	d100      	bne.n	800a916 <__cvt+0x3e>
 800a914:	3601      	adds	r6, #1
 800a916:	2102      	movs	r1, #2
 800a918:	e000      	b.n	800a91c <__cvt+0x44>
 800a91a:	2103      	movs	r1, #3
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	ab02      	add	r3, sp, #8
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	ec45 4b10 	vmov	d0, r4, r5
 800a928:	4653      	mov	r3, sl
 800a92a:	4632      	mov	r2, r6
 800a92c:	f000 fcec 	bl	800b308 <_dtoa_r>
 800a930:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a934:	4607      	mov	r7, r0
 800a936:	d102      	bne.n	800a93e <__cvt+0x66>
 800a938:	f019 0f01 	tst.w	r9, #1
 800a93c:	d022      	beq.n	800a984 <__cvt+0xac>
 800a93e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a942:	eb07 0906 	add.w	r9, r7, r6
 800a946:	d110      	bne.n	800a96a <__cvt+0x92>
 800a948:	783b      	ldrb	r3, [r7, #0]
 800a94a:	2b30      	cmp	r3, #48	; 0x30
 800a94c:	d10a      	bne.n	800a964 <__cvt+0x8c>
 800a94e:	2200      	movs	r2, #0
 800a950:	2300      	movs	r3, #0
 800a952:	4620      	mov	r0, r4
 800a954:	4629      	mov	r1, r5
 800a956:	f7f6 f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a95a:	b918      	cbnz	r0, 800a964 <__cvt+0x8c>
 800a95c:	f1c6 0601 	rsb	r6, r6, #1
 800a960:	f8ca 6000 	str.w	r6, [sl]
 800a964:	f8da 3000 	ldr.w	r3, [sl]
 800a968:	4499      	add	r9, r3
 800a96a:	2200      	movs	r2, #0
 800a96c:	2300      	movs	r3, #0
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f6 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a976:	b108      	cbz	r0, 800a97c <__cvt+0xa4>
 800a978:	f8cd 900c 	str.w	r9, [sp, #12]
 800a97c:	2230      	movs	r2, #48	; 0x30
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	454b      	cmp	r3, r9
 800a982:	d307      	bcc.n	800a994 <__cvt+0xbc>
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a988:	1bdb      	subs	r3, r3, r7
 800a98a:	4638      	mov	r0, r7
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	b004      	add	sp, #16
 800a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a994:	1c59      	adds	r1, r3, #1
 800a996:	9103      	str	r1, [sp, #12]
 800a998:	701a      	strb	r2, [r3, #0]
 800a99a:	e7f0      	b.n	800a97e <__cvt+0xa6>

0800a99c <__exponent>:
 800a99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2900      	cmp	r1, #0
 800a9a2:	bfb8      	it	lt
 800a9a4:	4249      	neglt	r1, r1
 800a9a6:	f803 2b02 	strb.w	r2, [r3], #2
 800a9aa:	bfb4      	ite	lt
 800a9ac:	222d      	movlt	r2, #45	; 0x2d
 800a9ae:	222b      	movge	r2, #43	; 0x2b
 800a9b0:	2909      	cmp	r1, #9
 800a9b2:	7042      	strb	r2, [r0, #1]
 800a9b4:	dd2a      	ble.n	800aa0c <__exponent+0x70>
 800a9b6:	f10d 0407 	add.w	r4, sp, #7
 800a9ba:	46a4      	mov	ip, r4
 800a9bc:	270a      	movs	r7, #10
 800a9be:	46a6      	mov	lr, r4
 800a9c0:	460a      	mov	r2, r1
 800a9c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a9c6:	fb07 1516 	mls	r5, r7, r6, r1
 800a9ca:	3530      	adds	r5, #48	; 0x30
 800a9cc:	2a63      	cmp	r2, #99	; 0x63
 800a9ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	dcf1      	bgt.n	800a9be <__exponent+0x22>
 800a9da:	3130      	adds	r1, #48	; 0x30
 800a9dc:	f1ae 0502 	sub.w	r5, lr, #2
 800a9e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9e4:	1c44      	adds	r4, r0, #1
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4561      	cmp	r1, ip
 800a9ea:	d30a      	bcc.n	800aa02 <__exponent+0x66>
 800a9ec:	f10d 0209 	add.w	r2, sp, #9
 800a9f0:	eba2 020e 	sub.w	r2, r2, lr
 800a9f4:	4565      	cmp	r5, ip
 800a9f6:	bf88      	it	hi
 800a9f8:	2200      	movhi	r2, #0
 800a9fa:	4413      	add	r3, r2
 800a9fc:	1a18      	subs	r0, r3, r0
 800a9fe:	b003      	add	sp, #12
 800aa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa06:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aa0a:	e7ed      	b.n	800a9e8 <__exponent+0x4c>
 800aa0c:	2330      	movs	r3, #48	; 0x30
 800aa0e:	3130      	adds	r1, #48	; 0x30
 800aa10:	7083      	strb	r3, [r0, #2]
 800aa12:	70c1      	strb	r1, [r0, #3]
 800aa14:	1d03      	adds	r3, r0, #4
 800aa16:	e7f1      	b.n	800a9fc <__exponent+0x60>

0800aa18 <_printf_float>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	ed2d 8b02 	vpush	{d8}
 800aa20:	b08d      	sub	sp, #52	; 0x34
 800aa22:	460c      	mov	r4, r1
 800aa24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa28:	4616      	mov	r6, r2
 800aa2a:	461f      	mov	r7, r3
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	f001 fa59 	bl	800bee4 <_localeconv_r>
 800aa32:	f8d0 a000 	ldr.w	sl, [r0]
 800aa36:	4650      	mov	r0, sl
 800aa38:	f7f5 fbca 	bl	80001d0 <strlen>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	f8d8 3000 	ldr.w	r3, [r8]
 800aa48:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	f023 0307 	bic.w	r3, r3, #7
 800aa52:	f103 0208 	add.w	r2, r3, #8
 800aa56:	f8c8 2000 	str.w	r2, [r8]
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa6a:	9307      	str	r3, [sp, #28]
 800aa6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa70:	ee08 0a10 	vmov	s16, r0
 800aa74:	4b9f      	ldr	r3, [pc, #636]	; (800acf4 <_printf_float+0x2dc>)
 800aa76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7e:	f7f6 f855 	bl	8000b2c <__aeabi_dcmpun>
 800aa82:	bb88      	cbnz	r0, 800aae8 <_printf_float+0xd0>
 800aa84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa88:	4b9a      	ldr	r3, [pc, #616]	; (800acf4 <_printf_float+0x2dc>)
 800aa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8e:	f7f6 f82f 	bl	8000af0 <__aeabi_dcmple>
 800aa92:	bb48      	cbnz	r0, 800aae8 <_printf_float+0xd0>
 800aa94:	2200      	movs	r2, #0
 800aa96:	2300      	movs	r3, #0
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	f7f6 f81e 	bl	8000adc <__aeabi_dcmplt>
 800aaa0:	b110      	cbz	r0, 800aaa8 <_printf_float+0x90>
 800aaa2:	232d      	movs	r3, #45	; 0x2d
 800aaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa8:	4b93      	ldr	r3, [pc, #588]	; (800acf8 <_printf_float+0x2e0>)
 800aaaa:	4894      	ldr	r0, [pc, #592]	; (800acfc <_printf_float+0x2e4>)
 800aaac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aab0:	bf94      	ite	ls
 800aab2:	4698      	movls	r8, r3
 800aab4:	4680      	movhi	r8, r0
 800aab6:	2303      	movs	r3, #3
 800aab8:	6123      	str	r3, [r4, #16]
 800aaba:	9b05      	ldr	r3, [sp, #20]
 800aabc:	f023 0204 	bic.w	r2, r3, #4
 800aac0:	6022      	str	r2, [r4, #0]
 800aac2:	f04f 0900 	mov.w	r9, #0
 800aac6:	9700      	str	r7, [sp, #0]
 800aac8:	4633      	mov	r3, r6
 800aaca:	aa0b      	add	r2, sp, #44	; 0x2c
 800aacc:	4621      	mov	r1, r4
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 f9d8 	bl	800ae84 <_printf_common>
 800aad4:	3001      	adds	r0, #1
 800aad6:	f040 8090 	bne.w	800abfa <_printf_float+0x1e2>
 800aada:	f04f 30ff 	mov.w	r0, #4294967295
 800aade:	b00d      	add	sp, #52	; 0x34
 800aae0:	ecbd 8b02 	vpop	{d8}
 800aae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4640      	mov	r0, r8
 800aaee:	4649      	mov	r1, r9
 800aaf0:	f7f6 f81c 	bl	8000b2c <__aeabi_dcmpun>
 800aaf4:	b140      	cbz	r0, 800ab08 <_printf_float+0xf0>
 800aaf6:	464b      	mov	r3, r9
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfbc      	itt	lt
 800aafc:	232d      	movlt	r3, #45	; 0x2d
 800aafe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ab02:	487f      	ldr	r0, [pc, #508]	; (800ad00 <_printf_float+0x2e8>)
 800ab04:	4b7f      	ldr	r3, [pc, #508]	; (800ad04 <_printf_float+0x2ec>)
 800ab06:	e7d1      	b.n	800aaac <_printf_float+0x94>
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab0e:	9206      	str	r2, [sp, #24]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	d13f      	bne.n	800ab94 <_printf_float+0x17c>
 800ab14:	2306      	movs	r3, #6
 800ab16:	6063      	str	r3, [r4, #4]
 800ab18:	9b05      	ldr	r3, [sp, #20]
 800ab1a:	6861      	ldr	r1, [r4, #4]
 800ab1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab20:	2300      	movs	r3, #0
 800ab22:	9303      	str	r3, [sp, #12]
 800ab24:	ab0a      	add	r3, sp, #40	; 0x28
 800ab26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab2a:	ab09      	add	r3, sp, #36	; 0x24
 800ab2c:	ec49 8b10 	vmov	d0, r8, r9
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	6022      	str	r2, [r4, #0]
 800ab34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f7ff fecd 	bl	800a8d8 <__cvt>
 800ab3e:	9b06      	ldr	r3, [sp, #24]
 800ab40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab42:	2b47      	cmp	r3, #71	; 0x47
 800ab44:	4680      	mov	r8, r0
 800ab46:	d108      	bne.n	800ab5a <_printf_float+0x142>
 800ab48:	1cc8      	adds	r0, r1, #3
 800ab4a:	db02      	blt.n	800ab52 <_printf_float+0x13a>
 800ab4c:	6863      	ldr	r3, [r4, #4]
 800ab4e:	4299      	cmp	r1, r3
 800ab50:	dd41      	ble.n	800abd6 <_printf_float+0x1be>
 800ab52:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab56:	fa5f fb8b 	uxtb.w	fp, fp
 800ab5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab5e:	d820      	bhi.n	800aba2 <_printf_float+0x18a>
 800ab60:	3901      	subs	r1, #1
 800ab62:	465a      	mov	r2, fp
 800ab64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab68:	9109      	str	r1, [sp, #36]	; 0x24
 800ab6a:	f7ff ff17 	bl	800a99c <__exponent>
 800ab6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab70:	1813      	adds	r3, r2, r0
 800ab72:	2a01      	cmp	r2, #1
 800ab74:	4681      	mov	r9, r0
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	dc02      	bgt.n	800ab80 <_printf_float+0x168>
 800ab7a:	6822      	ldr	r2, [r4, #0]
 800ab7c:	07d2      	lsls	r2, r2, #31
 800ab7e:	d501      	bpl.n	800ab84 <_printf_float+0x16c>
 800ab80:	3301      	adds	r3, #1
 800ab82:	6123      	str	r3, [r4, #16]
 800ab84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d09c      	beq.n	800aac6 <_printf_float+0xae>
 800ab8c:	232d      	movs	r3, #45	; 0x2d
 800ab8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab92:	e798      	b.n	800aac6 <_printf_float+0xae>
 800ab94:	9a06      	ldr	r2, [sp, #24]
 800ab96:	2a47      	cmp	r2, #71	; 0x47
 800ab98:	d1be      	bne.n	800ab18 <_printf_float+0x100>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1bc      	bne.n	800ab18 <_printf_float+0x100>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7b9      	b.n	800ab16 <_printf_float+0xfe>
 800aba2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aba6:	d118      	bne.n	800abda <_printf_float+0x1c2>
 800aba8:	2900      	cmp	r1, #0
 800abaa:	6863      	ldr	r3, [r4, #4]
 800abac:	dd0b      	ble.n	800abc6 <_printf_float+0x1ae>
 800abae:	6121      	str	r1, [r4, #16]
 800abb0:	b913      	cbnz	r3, 800abb8 <_printf_float+0x1a0>
 800abb2:	6822      	ldr	r2, [r4, #0]
 800abb4:	07d0      	lsls	r0, r2, #31
 800abb6:	d502      	bpl.n	800abbe <_printf_float+0x1a6>
 800abb8:	3301      	adds	r3, #1
 800abba:	440b      	add	r3, r1
 800abbc:	6123      	str	r3, [r4, #16]
 800abbe:	65a1      	str	r1, [r4, #88]	; 0x58
 800abc0:	f04f 0900 	mov.w	r9, #0
 800abc4:	e7de      	b.n	800ab84 <_printf_float+0x16c>
 800abc6:	b913      	cbnz	r3, 800abce <_printf_float+0x1b6>
 800abc8:	6822      	ldr	r2, [r4, #0]
 800abca:	07d2      	lsls	r2, r2, #31
 800abcc:	d501      	bpl.n	800abd2 <_printf_float+0x1ba>
 800abce:	3302      	adds	r3, #2
 800abd0:	e7f4      	b.n	800abbc <_printf_float+0x1a4>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e7f2      	b.n	800abbc <_printf_float+0x1a4>
 800abd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abdc:	4299      	cmp	r1, r3
 800abde:	db05      	blt.n	800abec <_printf_float+0x1d4>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	6121      	str	r1, [r4, #16]
 800abe4:	07d8      	lsls	r0, r3, #31
 800abe6:	d5ea      	bpl.n	800abbe <_printf_float+0x1a6>
 800abe8:	1c4b      	adds	r3, r1, #1
 800abea:	e7e7      	b.n	800abbc <_printf_float+0x1a4>
 800abec:	2900      	cmp	r1, #0
 800abee:	bfd4      	ite	le
 800abf0:	f1c1 0202 	rsble	r2, r1, #2
 800abf4:	2201      	movgt	r2, #1
 800abf6:	4413      	add	r3, r2
 800abf8:	e7e0      	b.n	800abbc <_printf_float+0x1a4>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	055a      	lsls	r2, r3, #21
 800abfe:	d407      	bmi.n	800ac10 <_printf_float+0x1f8>
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	4642      	mov	r2, r8
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	d12c      	bne.n	800ac68 <_printf_float+0x250>
 800ac0e:	e764      	b.n	800aada <_printf_float+0xc2>
 800ac10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac14:	f240 80e0 	bls.w	800add8 <_printf_float+0x3c0>
 800ac18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f7f5 ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d034      	beq.n	800ac92 <_printf_float+0x27a>
 800ac28:	4a37      	ldr	r2, [pc, #220]	; (800ad08 <_printf_float+0x2f0>)
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4628      	mov	r0, r5
 800ac30:	47b8      	blx	r7
 800ac32:	3001      	adds	r0, #1
 800ac34:	f43f af51 	beq.w	800aada <_printf_float+0xc2>
 800ac38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	db02      	blt.n	800ac46 <_printf_float+0x22e>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	07d8      	lsls	r0, r3, #31
 800ac44:	d510      	bpl.n	800ac68 <_printf_float+0x250>
 800ac46:	ee18 3a10 	vmov	r3, s16
 800ac4a:	4652      	mov	r2, sl
 800ac4c:	4631      	mov	r1, r6
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b8      	blx	r7
 800ac52:	3001      	adds	r0, #1
 800ac54:	f43f af41 	beq.w	800aada <_printf_float+0xc2>
 800ac58:	f04f 0800 	mov.w	r8, #0
 800ac5c:	f104 091a 	add.w	r9, r4, #26
 800ac60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac62:	3b01      	subs	r3, #1
 800ac64:	4543      	cmp	r3, r8
 800ac66:	dc09      	bgt.n	800ac7c <_printf_float+0x264>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	079b      	lsls	r3, r3, #30
 800ac6c:	f100 8105 	bmi.w	800ae7a <_printf_float+0x462>
 800ac70:	68e0      	ldr	r0, [r4, #12]
 800ac72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac74:	4298      	cmp	r0, r3
 800ac76:	bfb8      	it	lt
 800ac78:	4618      	movlt	r0, r3
 800ac7a:	e730      	b.n	800aade <_printf_float+0xc6>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	464a      	mov	r2, r9
 800ac80:	4631      	mov	r1, r6
 800ac82:	4628      	mov	r0, r5
 800ac84:	47b8      	blx	r7
 800ac86:	3001      	adds	r0, #1
 800ac88:	f43f af27 	beq.w	800aada <_printf_float+0xc2>
 800ac8c:	f108 0801 	add.w	r8, r8, #1
 800ac90:	e7e6      	b.n	800ac60 <_printf_float+0x248>
 800ac92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dc39      	bgt.n	800ad0c <_printf_float+0x2f4>
 800ac98:	4a1b      	ldr	r2, [pc, #108]	; (800ad08 <_printf_float+0x2f0>)
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4631      	mov	r1, r6
 800ac9e:	4628      	mov	r0, r5
 800aca0:	47b8      	blx	r7
 800aca2:	3001      	adds	r0, #1
 800aca4:	f43f af19 	beq.w	800aada <_printf_float+0xc2>
 800aca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acac:	4313      	orrs	r3, r2
 800acae:	d102      	bne.n	800acb6 <_printf_float+0x29e>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	07d9      	lsls	r1, r3, #31
 800acb4:	d5d8      	bpl.n	800ac68 <_printf_float+0x250>
 800acb6:	ee18 3a10 	vmov	r3, s16
 800acba:	4652      	mov	r2, sl
 800acbc:	4631      	mov	r1, r6
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b8      	blx	r7
 800acc2:	3001      	adds	r0, #1
 800acc4:	f43f af09 	beq.w	800aada <_printf_float+0xc2>
 800acc8:	f04f 0900 	mov.w	r9, #0
 800accc:	f104 0a1a 	add.w	sl, r4, #26
 800acd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd2:	425b      	negs	r3, r3
 800acd4:	454b      	cmp	r3, r9
 800acd6:	dc01      	bgt.n	800acdc <_printf_float+0x2c4>
 800acd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acda:	e792      	b.n	800ac02 <_printf_float+0x1ea>
 800acdc:	2301      	movs	r3, #1
 800acde:	4652      	mov	r2, sl
 800ace0:	4631      	mov	r1, r6
 800ace2:	4628      	mov	r0, r5
 800ace4:	47b8      	blx	r7
 800ace6:	3001      	adds	r0, #1
 800ace8:	f43f aef7 	beq.w	800aada <_printf_float+0xc2>
 800acec:	f109 0901 	add.w	r9, r9, #1
 800acf0:	e7ee      	b.n	800acd0 <_printf_float+0x2b8>
 800acf2:	bf00      	nop
 800acf4:	7fefffff 	.word	0x7fefffff
 800acf8:	0800dca8 	.word	0x0800dca8
 800acfc:	0800dcac 	.word	0x0800dcac
 800ad00:	0800dcb4 	.word	0x0800dcb4
 800ad04:	0800dcb0 	.word	0x0800dcb0
 800ad08:	0800dcb8 	.word	0x0800dcb8
 800ad0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad10:	429a      	cmp	r2, r3
 800ad12:	bfa8      	it	ge
 800ad14:	461a      	movge	r2, r3
 800ad16:	2a00      	cmp	r2, #0
 800ad18:	4691      	mov	r9, r2
 800ad1a:	dc37      	bgt.n	800ad8c <_printf_float+0x374>
 800ad1c:	f04f 0b00 	mov.w	fp, #0
 800ad20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad24:	f104 021a 	add.w	r2, r4, #26
 800ad28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad2a:	9305      	str	r3, [sp, #20]
 800ad2c:	eba3 0309 	sub.w	r3, r3, r9
 800ad30:	455b      	cmp	r3, fp
 800ad32:	dc33      	bgt.n	800ad9c <_printf_float+0x384>
 800ad34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	db3b      	blt.n	800adb4 <_printf_float+0x39c>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	07da      	lsls	r2, r3, #31
 800ad40:	d438      	bmi.n	800adb4 <_printf_float+0x39c>
 800ad42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad44:	9a05      	ldr	r2, [sp, #20]
 800ad46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad48:	1a9a      	subs	r2, r3, r2
 800ad4a:	eba3 0901 	sub.w	r9, r3, r1
 800ad4e:	4591      	cmp	r9, r2
 800ad50:	bfa8      	it	ge
 800ad52:	4691      	movge	r9, r2
 800ad54:	f1b9 0f00 	cmp.w	r9, #0
 800ad58:	dc35      	bgt.n	800adc6 <_printf_float+0x3ae>
 800ad5a:	f04f 0800 	mov.w	r8, #0
 800ad5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad62:	f104 0a1a 	add.w	sl, r4, #26
 800ad66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad6a:	1a9b      	subs	r3, r3, r2
 800ad6c:	eba3 0309 	sub.w	r3, r3, r9
 800ad70:	4543      	cmp	r3, r8
 800ad72:	f77f af79 	ble.w	800ac68 <_printf_float+0x250>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4652      	mov	r2, sl
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	f43f aeaa 	beq.w	800aada <_printf_float+0xc2>
 800ad86:	f108 0801 	add.w	r8, r8, #1
 800ad8a:	e7ec      	b.n	800ad66 <_printf_float+0x34e>
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4642      	mov	r2, r8
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	d1c0      	bne.n	800ad1c <_printf_float+0x304>
 800ad9a:	e69e      	b.n	800aada <_printf_float+0xc2>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4628      	mov	r0, r5
 800ada2:	9205      	str	r2, [sp, #20]
 800ada4:	47b8      	blx	r7
 800ada6:	3001      	adds	r0, #1
 800ada8:	f43f ae97 	beq.w	800aada <_printf_float+0xc2>
 800adac:	9a05      	ldr	r2, [sp, #20]
 800adae:	f10b 0b01 	add.w	fp, fp, #1
 800adb2:	e7b9      	b.n	800ad28 <_printf_float+0x310>
 800adb4:	ee18 3a10 	vmov	r3, s16
 800adb8:	4652      	mov	r2, sl
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	d1be      	bne.n	800ad42 <_printf_float+0x32a>
 800adc4:	e689      	b.n	800aada <_printf_float+0xc2>
 800adc6:	9a05      	ldr	r2, [sp, #20]
 800adc8:	464b      	mov	r3, r9
 800adca:	4442      	add	r2, r8
 800adcc:	4631      	mov	r1, r6
 800adce:	4628      	mov	r0, r5
 800add0:	47b8      	blx	r7
 800add2:	3001      	adds	r0, #1
 800add4:	d1c1      	bne.n	800ad5a <_printf_float+0x342>
 800add6:	e680      	b.n	800aada <_printf_float+0xc2>
 800add8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adda:	2a01      	cmp	r2, #1
 800addc:	dc01      	bgt.n	800ade2 <_printf_float+0x3ca>
 800adde:	07db      	lsls	r3, r3, #31
 800ade0:	d538      	bpl.n	800ae54 <_printf_float+0x43c>
 800ade2:	2301      	movs	r3, #1
 800ade4:	4642      	mov	r2, r8
 800ade6:	4631      	mov	r1, r6
 800ade8:	4628      	mov	r0, r5
 800adea:	47b8      	blx	r7
 800adec:	3001      	adds	r0, #1
 800adee:	f43f ae74 	beq.w	800aada <_printf_float+0xc2>
 800adf2:	ee18 3a10 	vmov	r3, s16
 800adf6:	4652      	mov	r2, sl
 800adf8:	4631      	mov	r1, r6
 800adfa:	4628      	mov	r0, r5
 800adfc:	47b8      	blx	r7
 800adfe:	3001      	adds	r0, #1
 800ae00:	f43f ae6b 	beq.w	800aada <_printf_float+0xc2>
 800ae04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f7f5 fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae10:	b9d8      	cbnz	r0, 800ae4a <_printf_float+0x432>
 800ae12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae14:	f108 0201 	add.w	r2, r8, #1
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b8      	blx	r7
 800ae20:	3001      	adds	r0, #1
 800ae22:	d10e      	bne.n	800ae42 <_printf_float+0x42a>
 800ae24:	e659      	b.n	800aada <_printf_float+0xc2>
 800ae26:	2301      	movs	r3, #1
 800ae28:	4652      	mov	r2, sl
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	47b8      	blx	r7
 800ae30:	3001      	adds	r0, #1
 800ae32:	f43f ae52 	beq.w	800aada <_printf_float+0xc2>
 800ae36:	f108 0801 	add.w	r8, r8, #1
 800ae3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	4543      	cmp	r3, r8
 800ae40:	dcf1      	bgt.n	800ae26 <_printf_float+0x40e>
 800ae42:	464b      	mov	r3, r9
 800ae44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae48:	e6dc      	b.n	800ac04 <_printf_float+0x1ec>
 800ae4a:	f04f 0800 	mov.w	r8, #0
 800ae4e:	f104 0a1a 	add.w	sl, r4, #26
 800ae52:	e7f2      	b.n	800ae3a <_printf_float+0x422>
 800ae54:	2301      	movs	r3, #1
 800ae56:	4642      	mov	r2, r8
 800ae58:	e7df      	b.n	800ae1a <_printf_float+0x402>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	464a      	mov	r2, r9
 800ae5e:	4631      	mov	r1, r6
 800ae60:	4628      	mov	r0, r5
 800ae62:	47b8      	blx	r7
 800ae64:	3001      	adds	r0, #1
 800ae66:	f43f ae38 	beq.w	800aada <_printf_float+0xc2>
 800ae6a:	f108 0801 	add.w	r8, r8, #1
 800ae6e:	68e3      	ldr	r3, [r4, #12]
 800ae70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae72:	1a5b      	subs	r3, r3, r1
 800ae74:	4543      	cmp	r3, r8
 800ae76:	dcf0      	bgt.n	800ae5a <_printf_float+0x442>
 800ae78:	e6fa      	b.n	800ac70 <_printf_float+0x258>
 800ae7a:	f04f 0800 	mov.w	r8, #0
 800ae7e:	f104 0919 	add.w	r9, r4, #25
 800ae82:	e7f4      	b.n	800ae6e <_printf_float+0x456>

0800ae84 <_printf_common>:
 800ae84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae88:	4616      	mov	r6, r2
 800ae8a:	4699      	mov	r9, r3
 800ae8c:	688a      	ldr	r2, [r1, #8]
 800ae8e:	690b      	ldr	r3, [r1, #16]
 800ae90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae94:	4293      	cmp	r3, r2
 800ae96:	bfb8      	it	lt
 800ae98:	4613      	movlt	r3, r2
 800ae9a:	6033      	str	r3, [r6, #0]
 800ae9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aea0:	4607      	mov	r7, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	b10a      	cbz	r2, 800aeaa <_printf_common+0x26>
 800aea6:	3301      	adds	r3, #1
 800aea8:	6033      	str	r3, [r6, #0]
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	0699      	lsls	r1, r3, #26
 800aeae:	bf42      	ittt	mi
 800aeb0:	6833      	ldrmi	r3, [r6, #0]
 800aeb2:	3302      	addmi	r3, #2
 800aeb4:	6033      	strmi	r3, [r6, #0]
 800aeb6:	6825      	ldr	r5, [r4, #0]
 800aeb8:	f015 0506 	ands.w	r5, r5, #6
 800aebc:	d106      	bne.n	800aecc <_printf_common+0x48>
 800aebe:	f104 0a19 	add.w	sl, r4, #25
 800aec2:	68e3      	ldr	r3, [r4, #12]
 800aec4:	6832      	ldr	r2, [r6, #0]
 800aec6:	1a9b      	subs	r3, r3, r2
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	dc26      	bgt.n	800af1a <_printf_common+0x96>
 800aecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aed0:	1e13      	subs	r3, r2, #0
 800aed2:	6822      	ldr	r2, [r4, #0]
 800aed4:	bf18      	it	ne
 800aed6:	2301      	movne	r3, #1
 800aed8:	0692      	lsls	r2, r2, #26
 800aeda:	d42b      	bmi.n	800af34 <_printf_common+0xb0>
 800aedc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aee0:	4649      	mov	r1, r9
 800aee2:	4638      	mov	r0, r7
 800aee4:	47c0      	blx	r8
 800aee6:	3001      	adds	r0, #1
 800aee8:	d01e      	beq.n	800af28 <_printf_common+0xa4>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	68e5      	ldr	r5, [r4, #12]
 800aeee:	6832      	ldr	r2, [r6, #0]
 800aef0:	f003 0306 	and.w	r3, r3, #6
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	bf08      	it	eq
 800aef8:	1aad      	subeq	r5, r5, r2
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	6922      	ldr	r2, [r4, #16]
 800aefe:	bf0c      	ite	eq
 800af00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af04:	2500      	movne	r5, #0
 800af06:	4293      	cmp	r3, r2
 800af08:	bfc4      	itt	gt
 800af0a:	1a9b      	subgt	r3, r3, r2
 800af0c:	18ed      	addgt	r5, r5, r3
 800af0e:	2600      	movs	r6, #0
 800af10:	341a      	adds	r4, #26
 800af12:	42b5      	cmp	r5, r6
 800af14:	d11a      	bne.n	800af4c <_printf_common+0xc8>
 800af16:	2000      	movs	r0, #0
 800af18:	e008      	b.n	800af2c <_printf_common+0xa8>
 800af1a:	2301      	movs	r3, #1
 800af1c:	4652      	mov	r2, sl
 800af1e:	4649      	mov	r1, r9
 800af20:	4638      	mov	r0, r7
 800af22:	47c0      	blx	r8
 800af24:	3001      	adds	r0, #1
 800af26:	d103      	bne.n	800af30 <_printf_common+0xac>
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af30:	3501      	adds	r5, #1
 800af32:	e7c6      	b.n	800aec2 <_printf_common+0x3e>
 800af34:	18e1      	adds	r1, r4, r3
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	2030      	movs	r0, #48	; 0x30
 800af3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af3e:	4422      	add	r2, r4
 800af40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af48:	3302      	adds	r3, #2
 800af4a:	e7c7      	b.n	800aedc <_printf_common+0x58>
 800af4c:	2301      	movs	r3, #1
 800af4e:	4622      	mov	r2, r4
 800af50:	4649      	mov	r1, r9
 800af52:	4638      	mov	r0, r7
 800af54:	47c0      	blx	r8
 800af56:	3001      	adds	r0, #1
 800af58:	d0e6      	beq.n	800af28 <_printf_common+0xa4>
 800af5a:	3601      	adds	r6, #1
 800af5c:	e7d9      	b.n	800af12 <_printf_common+0x8e>
	...

0800af60 <_printf_i>:
 800af60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af64:	7e0f      	ldrb	r7, [r1, #24]
 800af66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af68:	2f78      	cmp	r7, #120	; 0x78
 800af6a:	4691      	mov	r9, r2
 800af6c:	4680      	mov	r8, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	469a      	mov	sl, r3
 800af72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af76:	d807      	bhi.n	800af88 <_printf_i+0x28>
 800af78:	2f62      	cmp	r7, #98	; 0x62
 800af7a:	d80a      	bhi.n	800af92 <_printf_i+0x32>
 800af7c:	2f00      	cmp	r7, #0
 800af7e:	f000 80d8 	beq.w	800b132 <_printf_i+0x1d2>
 800af82:	2f58      	cmp	r7, #88	; 0x58
 800af84:	f000 80a3 	beq.w	800b0ce <_printf_i+0x16e>
 800af88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af90:	e03a      	b.n	800b008 <_printf_i+0xa8>
 800af92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af96:	2b15      	cmp	r3, #21
 800af98:	d8f6      	bhi.n	800af88 <_printf_i+0x28>
 800af9a:	a101      	add	r1, pc, #4	; (adr r1, 800afa0 <_printf_i+0x40>)
 800af9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afa0:	0800aff9 	.word	0x0800aff9
 800afa4:	0800b00d 	.word	0x0800b00d
 800afa8:	0800af89 	.word	0x0800af89
 800afac:	0800af89 	.word	0x0800af89
 800afb0:	0800af89 	.word	0x0800af89
 800afb4:	0800af89 	.word	0x0800af89
 800afb8:	0800b00d 	.word	0x0800b00d
 800afbc:	0800af89 	.word	0x0800af89
 800afc0:	0800af89 	.word	0x0800af89
 800afc4:	0800af89 	.word	0x0800af89
 800afc8:	0800af89 	.word	0x0800af89
 800afcc:	0800b119 	.word	0x0800b119
 800afd0:	0800b03d 	.word	0x0800b03d
 800afd4:	0800b0fb 	.word	0x0800b0fb
 800afd8:	0800af89 	.word	0x0800af89
 800afdc:	0800af89 	.word	0x0800af89
 800afe0:	0800b13b 	.word	0x0800b13b
 800afe4:	0800af89 	.word	0x0800af89
 800afe8:	0800b03d 	.word	0x0800b03d
 800afec:	0800af89 	.word	0x0800af89
 800aff0:	0800af89 	.word	0x0800af89
 800aff4:	0800b103 	.word	0x0800b103
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	1d1a      	adds	r2, r3, #4
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	602a      	str	r2, [r5, #0]
 800b000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b008:	2301      	movs	r3, #1
 800b00a:	e0a3      	b.n	800b154 <_printf_i+0x1f4>
 800b00c:	6820      	ldr	r0, [r4, #0]
 800b00e:	6829      	ldr	r1, [r5, #0]
 800b010:	0606      	lsls	r6, r0, #24
 800b012:	f101 0304 	add.w	r3, r1, #4
 800b016:	d50a      	bpl.n	800b02e <_printf_i+0xce>
 800b018:	680e      	ldr	r6, [r1, #0]
 800b01a:	602b      	str	r3, [r5, #0]
 800b01c:	2e00      	cmp	r6, #0
 800b01e:	da03      	bge.n	800b028 <_printf_i+0xc8>
 800b020:	232d      	movs	r3, #45	; 0x2d
 800b022:	4276      	negs	r6, r6
 800b024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b028:	485e      	ldr	r0, [pc, #376]	; (800b1a4 <_printf_i+0x244>)
 800b02a:	230a      	movs	r3, #10
 800b02c:	e019      	b.n	800b062 <_printf_i+0x102>
 800b02e:	680e      	ldr	r6, [r1, #0]
 800b030:	602b      	str	r3, [r5, #0]
 800b032:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b036:	bf18      	it	ne
 800b038:	b236      	sxthne	r6, r6
 800b03a:	e7ef      	b.n	800b01c <_printf_i+0xbc>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	6820      	ldr	r0, [r4, #0]
 800b040:	1d19      	adds	r1, r3, #4
 800b042:	6029      	str	r1, [r5, #0]
 800b044:	0601      	lsls	r1, r0, #24
 800b046:	d501      	bpl.n	800b04c <_printf_i+0xec>
 800b048:	681e      	ldr	r6, [r3, #0]
 800b04a:	e002      	b.n	800b052 <_printf_i+0xf2>
 800b04c:	0646      	lsls	r6, r0, #25
 800b04e:	d5fb      	bpl.n	800b048 <_printf_i+0xe8>
 800b050:	881e      	ldrh	r6, [r3, #0]
 800b052:	4854      	ldr	r0, [pc, #336]	; (800b1a4 <_printf_i+0x244>)
 800b054:	2f6f      	cmp	r7, #111	; 0x6f
 800b056:	bf0c      	ite	eq
 800b058:	2308      	moveq	r3, #8
 800b05a:	230a      	movne	r3, #10
 800b05c:	2100      	movs	r1, #0
 800b05e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b062:	6865      	ldr	r5, [r4, #4]
 800b064:	60a5      	str	r5, [r4, #8]
 800b066:	2d00      	cmp	r5, #0
 800b068:	bfa2      	ittt	ge
 800b06a:	6821      	ldrge	r1, [r4, #0]
 800b06c:	f021 0104 	bicge.w	r1, r1, #4
 800b070:	6021      	strge	r1, [r4, #0]
 800b072:	b90e      	cbnz	r6, 800b078 <_printf_i+0x118>
 800b074:	2d00      	cmp	r5, #0
 800b076:	d04d      	beq.n	800b114 <_printf_i+0x1b4>
 800b078:	4615      	mov	r5, r2
 800b07a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b07e:	fb03 6711 	mls	r7, r3, r1, r6
 800b082:	5dc7      	ldrb	r7, [r0, r7]
 800b084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b088:	4637      	mov	r7, r6
 800b08a:	42bb      	cmp	r3, r7
 800b08c:	460e      	mov	r6, r1
 800b08e:	d9f4      	bls.n	800b07a <_printf_i+0x11a>
 800b090:	2b08      	cmp	r3, #8
 800b092:	d10b      	bne.n	800b0ac <_printf_i+0x14c>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	07de      	lsls	r6, r3, #31
 800b098:	d508      	bpl.n	800b0ac <_printf_i+0x14c>
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	6861      	ldr	r1, [r4, #4]
 800b09e:	4299      	cmp	r1, r3
 800b0a0:	bfde      	ittt	le
 800b0a2:	2330      	movle	r3, #48	; 0x30
 800b0a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0ac:	1b52      	subs	r2, r2, r5
 800b0ae:	6122      	str	r2, [r4, #16]
 800b0b0:	f8cd a000 	str.w	sl, [sp]
 800b0b4:	464b      	mov	r3, r9
 800b0b6:	aa03      	add	r2, sp, #12
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f7ff fee2 	bl	800ae84 <_printf_common>
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d14c      	bne.n	800b15e <_printf_i+0x1fe>
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	b004      	add	sp, #16
 800b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ce:	4835      	ldr	r0, [pc, #212]	; (800b1a4 <_printf_i+0x244>)
 800b0d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0d4:	6829      	ldr	r1, [r5, #0]
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0dc:	6029      	str	r1, [r5, #0]
 800b0de:	061d      	lsls	r5, r3, #24
 800b0e0:	d514      	bpl.n	800b10c <_printf_i+0x1ac>
 800b0e2:	07df      	lsls	r7, r3, #31
 800b0e4:	bf44      	itt	mi
 800b0e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0ea:	6023      	strmi	r3, [r4, #0]
 800b0ec:	b91e      	cbnz	r6, 800b0f6 <_printf_i+0x196>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	f023 0320 	bic.w	r3, r3, #32
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	2310      	movs	r3, #16
 800b0f8:	e7b0      	b.n	800b05c <_printf_i+0xfc>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	f043 0320 	orr.w	r3, r3, #32
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	2378      	movs	r3, #120	; 0x78
 800b104:	4828      	ldr	r0, [pc, #160]	; (800b1a8 <_printf_i+0x248>)
 800b106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b10a:	e7e3      	b.n	800b0d4 <_printf_i+0x174>
 800b10c:	0659      	lsls	r1, r3, #25
 800b10e:	bf48      	it	mi
 800b110:	b2b6      	uxthmi	r6, r6
 800b112:	e7e6      	b.n	800b0e2 <_printf_i+0x182>
 800b114:	4615      	mov	r5, r2
 800b116:	e7bb      	b.n	800b090 <_printf_i+0x130>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	6826      	ldr	r6, [r4, #0]
 800b11c:	6961      	ldr	r1, [r4, #20]
 800b11e:	1d18      	adds	r0, r3, #4
 800b120:	6028      	str	r0, [r5, #0]
 800b122:	0635      	lsls	r5, r6, #24
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	d501      	bpl.n	800b12c <_printf_i+0x1cc>
 800b128:	6019      	str	r1, [r3, #0]
 800b12a:	e002      	b.n	800b132 <_printf_i+0x1d2>
 800b12c:	0670      	lsls	r0, r6, #25
 800b12e:	d5fb      	bpl.n	800b128 <_printf_i+0x1c8>
 800b130:	8019      	strh	r1, [r3, #0]
 800b132:	2300      	movs	r3, #0
 800b134:	6123      	str	r3, [r4, #16]
 800b136:	4615      	mov	r5, r2
 800b138:	e7ba      	b.n	800b0b0 <_printf_i+0x150>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	1d1a      	adds	r2, r3, #4
 800b13e:	602a      	str	r2, [r5, #0]
 800b140:	681d      	ldr	r5, [r3, #0]
 800b142:	6862      	ldr	r2, [r4, #4]
 800b144:	2100      	movs	r1, #0
 800b146:	4628      	mov	r0, r5
 800b148:	f7f5 f84a 	bl	80001e0 <memchr>
 800b14c:	b108      	cbz	r0, 800b152 <_printf_i+0x1f2>
 800b14e:	1b40      	subs	r0, r0, r5
 800b150:	6060      	str	r0, [r4, #4]
 800b152:	6863      	ldr	r3, [r4, #4]
 800b154:	6123      	str	r3, [r4, #16]
 800b156:	2300      	movs	r3, #0
 800b158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b15c:	e7a8      	b.n	800b0b0 <_printf_i+0x150>
 800b15e:	6923      	ldr	r3, [r4, #16]
 800b160:	462a      	mov	r2, r5
 800b162:	4649      	mov	r1, r9
 800b164:	4640      	mov	r0, r8
 800b166:	47d0      	blx	sl
 800b168:	3001      	adds	r0, #1
 800b16a:	d0ab      	beq.n	800b0c4 <_printf_i+0x164>
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	079b      	lsls	r3, r3, #30
 800b170:	d413      	bmi.n	800b19a <_printf_i+0x23a>
 800b172:	68e0      	ldr	r0, [r4, #12]
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	4298      	cmp	r0, r3
 800b178:	bfb8      	it	lt
 800b17a:	4618      	movlt	r0, r3
 800b17c:	e7a4      	b.n	800b0c8 <_printf_i+0x168>
 800b17e:	2301      	movs	r3, #1
 800b180:	4632      	mov	r2, r6
 800b182:	4649      	mov	r1, r9
 800b184:	4640      	mov	r0, r8
 800b186:	47d0      	blx	sl
 800b188:	3001      	adds	r0, #1
 800b18a:	d09b      	beq.n	800b0c4 <_printf_i+0x164>
 800b18c:	3501      	adds	r5, #1
 800b18e:	68e3      	ldr	r3, [r4, #12]
 800b190:	9903      	ldr	r1, [sp, #12]
 800b192:	1a5b      	subs	r3, r3, r1
 800b194:	42ab      	cmp	r3, r5
 800b196:	dcf2      	bgt.n	800b17e <_printf_i+0x21e>
 800b198:	e7eb      	b.n	800b172 <_printf_i+0x212>
 800b19a:	2500      	movs	r5, #0
 800b19c:	f104 0619 	add.w	r6, r4, #25
 800b1a0:	e7f5      	b.n	800b18e <_printf_i+0x22e>
 800b1a2:	bf00      	nop
 800b1a4:	0800dcba 	.word	0x0800dcba
 800b1a8:	0800dccb 	.word	0x0800dccb

0800b1ac <siprintf>:
 800b1ac:	b40e      	push	{r1, r2, r3}
 800b1ae:	b500      	push	{lr}
 800b1b0:	b09c      	sub	sp, #112	; 0x70
 800b1b2:	ab1d      	add	r3, sp, #116	; 0x74
 800b1b4:	9002      	str	r0, [sp, #8]
 800b1b6:	9006      	str	r0, [sp, #24]
 800b1b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1bc:	4809      	ldr	r0, [pc, #36]	; (800b1e4 <siprintf+0x38>)
 800b1be:	9107      	str	r1, [sp, #28]
 800b1c0:	9104      	str	r1, [sp, #16]
 800b1c2:	4909      	ldr	r1, [pc, #36]	; (800b1e8 <siprintf+0x3c>)
 800b1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c8:	9105      	str	r1, [sp, #20]
 800b1ca:	6800      	ldr	r0, [r0, #0]
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	a902      	add	r1, sp, #8
 800b1d0:	f001 fb78 	bl	800c8c4 <_svfiprintf_r>
 800b1d4:	9b02      	ldr	r3, [sp, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	b01c      	add	sp, #112	; 0x70
 800b1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1e0:	b003      	add	sp, #12
 800b1e2:	4770      	bx	lr
 800b1e4:	20000024 	.word	0x20000024
 800b1e8:	ffff0208 	.word	0xffff0208

0800b1ec <quorem>:
 800b1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	6903      	ldr	r3, [r0, #16]
 800b1f2:	690c      	ldr	r4, [r1, #16]
 800b1f4:	42a3      	cmp	r3, r4
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	f2c0 8081 	blt.w	800b2fe <quorem+0x112>
 800b1fc:	3c01      	subs	r4, #1
 800b1fe:	f101 0814 	add.w	r8, r1, #20
 800b202:	f100 0514 	add.w	r5, r0, #20
 800b206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b20a:	9301      	str	r3, [sp, #4]
 800b20c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b214:	3301      	adds	r3, #1
 800b216:	429a      	cmp	r2, r3
 800b218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b21c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b220:	fbb2 f6f3 	udiv	r6, r2, r3
 800b224:	d331      	bcc.n	800b28a <quorem+0x9e>
 800b226:	f04f 0e00 	mov.w	lr, #0
 800b22a:	4640      	mov	r0, r8
 800b22c:	46ac      	mov	ip, r5
 800b22e:	46f2      	mov	sl, lr
 800b230:	f850 2b04 	ldr.w	r2, [r0], #4
 800b234:	b293      	uxth	r3, r2
 800b236:	fb06 e303 	mla	r3, r6, r3, lr
 800b23a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b23e:	b29b      	uxth	r3, r3
 800b240:	ebaa 0303 	sub.w	r3, sl, r3
 800b244:	f8dc a000 	ldr.w	sl, [ip]
 800b248:	0c12      	lsrs	r2, r2, #16
 800b24a:	fa13 f38a 	uxtah	r3, r3, sl
 800b24e:	fb06 e202 	mla	r2, r6, r2, lr
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	9b00      	ldr	r3, [sp, #0]
 800b256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b25a:	b292      	uxth	r2, r2
 800b25c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b264:	f8bd 3000 	ldrh.w	r3, [sp]
 800b268:	4581      	cmp	r9, r0
 800b26a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b26e:	f84c 3b04 	str.w	r3, [ip], #4
 800b272:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b276:	d2db      	bcs.n	800b230 <quorem+0x44>
 800b278:	f855 300b 	ldr.w	r3, [r5, fp]
 800b27c:	b92b      	cbnz	r3, 800b28a <quorem+0x9e>
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	3b04      	subs	r3, #4
 800b282:	429d      	cmp	r5, r3
 800b284:	461a      	mov	r2, r3
 800b286:	d32e      	bcc.n	800b2e6 <quorem+0xfa>
 800b288:	613c      	str	r4, [r7, #16]
 800b28a:	4638      	mov	r0, r7
 800b28c:	f001 f8c6 	bl	800c41c <__mcmp>
 800b290:	2800      	cmp	r0, #0
 800b292:	db24      	blt.n	800b2de <quorem+0xf2>
 800b294:	3601      	adds	r6, #1
 800b296:	4628      	mov	r0, r5
 800b298:	f04f 0c00 	mov.w	ip, #0
 800b29c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2a0:	f8d0 e000 	ldr.w	lr, [r0]
 800b2a4:	b293      	uxth	r3, r2
 800b2a6:	ebac 0303 	sub.w	r3, ip, r3
 800b2aa:	0c12      	lsrs	r2, r2, #16
 800b2ac:	fa13 f38e 	uxtah	r3, r3, lr
 800b2b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2be:	45c1      	cmp	r9, r8
 800b2c0:	f840 3b04 	str.w	r3, [r0], #4
 800b2c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2c8:	d2e8      	bcs.n	800b29c <quorem+0xb0>
 800b2ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2d2:	b922      	cbnz	r2, 800b2de <quorem+0xf2>
 800b2d4:	3b04      	subs	r3, #4
 800b2d6:	429d      	cmp	r5, r3
 800b2d8:	461a      	mov	r2, r3
 800b2da:	d30a      	bcc.n	800b2f2 <quorem+0x106>
 800b2dc:	613c      	str	r4, [r7, #16]
 800b2de:	4630      	mov	r0, r6
 800b2e0:	b003      	add	sp, #12
 800b2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e6:	6812      	ldr	r2, [r2, #0]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	d1cc      	bne.n	800b288 <quorem+0x9c>
 800b2ee:	3c01      	subs	r4, #1
 800b2f0:	e7c7      	b.n	800b282 <quorem+0x96>
 800b2f2:	6812      	ldr	r2, [r2, #0]
 800b2f4:	3b04      	subs	r3, #4
 800b2f6:	2a00      	cmp	r2, #0
 800b2f8:	d1f0      	bne.n	800b2dc <quorem+0xf0>
 800b2fa:	3c01      	subs	r4, #1
 800b2fc:	e7eb      	b.n	800b2d6 <quorem+0xea>
 800b2fe:	2000      	movs	r0, #0
 800b300:	e7ee      	b.n	800b2e0 <quorem+0xf4>
 800b302:	0000      	movs	r0, r0
 800b304:	0000      	movs	r0, r0
	...

0800b308 <_dtoa_r>:
 800b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	ed2d 8b04 	vpush	{d8-d9}
 800b310:	ec57 6b10 	vmov	r6, r7, d0
 800b314:	b093      	sub	sp, #76	; 0x4c
 800b316:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b318:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b31c:	9106      	str	r1, [sp, #24]
 800b31e:	ee10 aa10 	vmov	sl, s0
 800b322:	4604      	mov	r4, r0
 800b324:	9209      	str	r2, [sp, #36]	; 0x24
 800b326:	930c      	str	r3, [sp, #48]	; 0x30
 800b328:	46bb      	mov	fp, r7
 800b32a:	b975      	cbnz	r5, 800b34a <_dtoa_r+0x42>
 800b32c:	2010      	movs	r0, #16
 800b32e:	f000 fddd 	bl	800beec <malloc>
 800b332:	4602      	mov	r2, r0
 800b334:	6260      	str	r0, [r4, #36]	; 0x24
 800b336:	b920      	cbnz	r0, 800b342 <_dtoa_r+0x3a>
 800b338:	4ba7      	ldr	r3, [pc, #668]	; (800b5d8 <_dtoa_r+0x2d0>)
 800b33a:	21ea      	movs	r1, #234	; 0xea
 800b33c:	48a7      	ldr	r0, [pc, #668]	; (800b5dc <_dtoa_r+0x2d4>)
 800b33e:	f001 fbd1 	bl	800cae4 <__assert_func>
 800b342:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b346:	6005      	str	r5, [r0, #0]
 800b348:	60c5      	str	r5, [r0, #12]
 800b34a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b34c:	6819      	ldr	r1, [r3, #0]
 800b34e:	b151      	cbz	r1, 800b366 <_dtoa_r+0x5e>
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	604a      	str	r2, [r1, #4]
 800b354:	2301      	movs	r3, #1
 800b356:	4093      	lsls	r3, r2
 800b358:	608b      	str	r3, [r1, #8]
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fe1c 	bl	800bf98 <_Bfree>
 800b360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b362:	2200      	movs	r2, #0
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	1e3b      	subs	r3, r7, #0
 800b368:	bfaa      	itet	ge
 800b36a:	2300      	movge	r3, #0
 800b36c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b370:	f8c8 3000 	strge.w	r3, [r8]
 800b374:	4b9a      	ldr	r3, [pc, #616]	; (800b5e0 <_dtoa_r+0x2d8>)
 800b376:	bfbc      	itt	lt
 800b378:	2201      	movlt	r2, #1
 800b37a:	f8c8 2000 	strlt.w	r2, [r8]
 800b37e:	ea33 030b 	bics.w	r3, r3, fp
 800b382:	d11b      	bne.n	800b3bc <_dtoa_r+0xb4>
 800b384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b386:	f242 730f 	movw	r3, #9999	; 0x270f
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b390:	4333      	orrs	r3, r6
 800b392:	f000 8592 	beq.w	800beba <_dtoa_r+0xbb2>
 800b396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b398:	b963      	cbnz	r3, 800b3b4 <_dtoa_r+0xac>
 800b39a:	4b92      	ldr	r3, [pc, #584]	; (800b5e4 <_dtoa_r+0x2dc>)
 800b39c:	e022      	b.n	800b3e4 <_dtoa_r+0xdc>
 800b39e:	4b92      	ldr	r3, [pc, #584]	; (800b5e8 <_dtoa_r+0x2e0>)
 800b3a0:	9301      	str	r3, [sp, #4]
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	9801      	ldr	r0, [sp, #4]
 800b3aa:	b013      	add	sp, #76	; 0x4c
 800b3ac:	ecbd 8b04 	vpop	{d8-d9}
 800b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	4b8b      	ldr	r3, [pc, #556]	; (800b5e4 <_dtoa_r+0x2dc>)
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	3303      	adds	r3, #3
 800b3ba:	e7f3      	b.n	800b3a4 <_dtoa_r+0x9c>
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2300      	movs	r3, #0
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	f7f5 fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3c8:	ec4b ab19 	vmov	d9, sl, fp
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	b158      	cbz	r0, 800b3e8 <_dtoa_r+0xe0>
 800b3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f000 856b 	beq.w	800beb4 <_dtoa_r+0xbac>
 800b3de:	4883      	ldr	r0, [pc, #524]	; (800b5ec <_dtoa_r+0x2e4>)
 800b3e0:	6018      	str	r0, [r3, #0]
 800b3e2:	1e43      	subs	r3, r0, #1
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	e7df      	b.n	800b3a8 <_dtoa_r+0xa0>
 800b3e8:	ec4b ab10 	vmov	d0, sl, fp
 800b3ec:	aa10      	add	r2, sp, #64	; 0x40
 800b3ee:	a911      	add	r1, sp, #68	; 0x44
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f001 f8b9 	bl	800c568 <__d2b>
 800b3f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b3fa:	ee08 0a10 	vmov	s16, r0
 800b3fe:	2d00      	cmp	r5, #0
 800b400:	f000 8084 	beq.w	800b50c <_dtoa_r+0x204>
 800b404:	ee19 3a90 	vmov	r3, s19
 800b408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b40c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b410:	4656      	mov	r6, sl
 800b412:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b41a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b41e:	4b74      	ldr	r3, [pc, #464]	; (800b5f0 <_dtoa_r+0x2e8>)
 800b420:	2200      	movs	r2, #0
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f4 ff2f 	bl	8000288 <__aeabi_dsub>
 800b42a:	a365      	add	r3, pc, #404	; (adr r3, 800b5c0 <_dtoa_r+0x2b8>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	f7f5 f8e2 	bl	80005f8 <__aeabi_dmul>
 800b434:	a364      	add	r3, pc, #400	; (adr r3, 800b5c8 <_dtoa_r+0x2c0>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f4 ff27 	bl	800028c <__adddf3>
 800b43e:	4606      	mov	r6, r0
 800b440:	4628      	mov	r0, r5
 800b442:	460f      	mov	r7, r1
 800b444:	f7f5 f86e 	bl	8000524 <__aeabi_i2d>
 800b448:	a361      	add	r3, pc, #388	; (adr r3, 800b5d0 <_dtoa_r+0x2c8>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f5 f8d3 	bl	80005f8 <__aeabi_dmul>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	f7f4 ff17 	bl	800028c <__adddf3>
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	f7f5 fb79 	bl	8000b58 <__aeabi_d2iz>
 800b466:	2200      	movs	r2, #0
 800b468:	9000      	str	r0, [sp, #0]
 800b46a:	2300      	movs	r3, #0
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	f7f5 fb34 	bl	8000adc <__aeabi_dcmplt>
 800b474:	b150      	cbz	r0, 800b48c <_dtoa_r+0x184>
 800b476:	9800      	ldr	r0, [sp, #0]
 800b478:	f7f5 f854 	bl	8000524 <__aeabi_i2d>
 800b47c:	4632      	mov	r2, r6
 800b47e:	463b      	mov	r3, r7
 800b480:	f7f5 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800b484:	b910      	cbnz	r0, 800b48c <_dtoa_r+0x184>
 800b486:	9b00      	ldr	r3, [sp, #0]
 800b488:	3b01      	subs	r3, #1
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	9b00      	ldr	r3, [sp, #0]
 800b48e:	2b16      	cmp	r3, #22
 800b490:	d85a      	bhi.n	800b548 <_dtoa_r+0x240>
 800b492:	9a00      	ldr	r2, [sp, #0]
 800b494:	4b57      	ldr	r3, [pc, #348]	; (800b5f4 <_dtoa_r+0x2ec>)
 800b496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	ec51 0b19 	vmov	r0, r1, d9
 800b4a2:	f7f5 fb1b 	bl	8000adc <__aeabi_dcmplt>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d050      	beq.n	800b54c <_dtoa_r+0x244>
 800b4aa:	9b00      	ldr	r3, [sp, #0]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4b6:	1b5d      	subs	r5, r3, r5
 800b4b8:	1e6b      	subs	r3, r5, #1
 800b4ba:	9305      	str	r3, [sp, #20]
 800b4bc:	bf45      	ittet	mi
 800b4be:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4c2:	9304      	strmi	r3, [sp, #16]
 800b4c4:	2300      	movpl	r3, #0
 800b4c6:	2300      	movmi	r3, #0
 800b4c8:	bf4c      	ite	mi
 800b4ca:	9305      	strmi	r3, [sp, #20]
 800b4cc:	9304      	strpl	r3, [sp, #16]
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	db3d      	blt.n	800b550 <_dtoa_r+0x248>
 800b4d4:	9b05      	ldr	r3, [sp, #20]
 800b4d6:	9a00      	ldr	r2, [sp, #0]
 800b4d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b4da:	4413      	add	r3, r2
 800b4dc:	9305      	str	r3, [sp, #20]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	9307      	str	r3, [sp, #28]
 800b4e2:	9b06      	ldr	r3, [sp, #24]
 800b4e4:	2b09      	cmp	r3, #9
 800b4e6:	f200 8089 	bhi.w	800b5fc <_dtoa_r+0x2f4>
 800b4ea:	2b05      	cmp	r3, #5
 800b4ec:	bfc4      	itt	gt
 800b4ee:	3b04      	subgt	r3, #4
 800b4f0:	9306      	strgt	r3, [sp, #24]
 800b4f2:	9b06      	ldr	r3, [sp, #24]
 800b4f4:	f1a3 0302 	sub.w	r3, r3, #2
 800b4f8:	bfcc      	ite	gt
 800b4fa:	2500      	movgt	r5, #0
 800b4fc:	2501      	movle	r5, #1
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	f200 8087 	bhi.w	800b612 <_dtoa_r+0x30a>
 800b504:	e8df f003 	tbb	[pc, r3]
 800b508:	59383a2d 	.word	0x59383a2d
 800b50c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b510:	441d      	add	r5, r3
 800b512:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b516:	2b20      	cmp	r3, #32
 800b518:	bfc1      	itttt	gt
 800b51a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b51e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b522:	fa0b f303 	lslgt.w	r3, fp, r3
 800b526:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b52a:	bfda      	itte	le
 800b52c:	f1c3 0320 	rsble	r3, r3, #32
 800b530:	fa06 f003 	lslle.w	r0, r6, r3
 800b534:	4318      	orrgt	r0, r3
 800b536:	f7f4 ffe5 	bl	8000504 <__aeabi_ui2d>
 800b53a:	2301      	movs	r3, #1
 800b53c:	4606      	mov	r6, r0
 800b53e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b542:	3d01      	subs	r5, #1
 800b544:	930e      	str	r3, [sp, #56]	; 0x38
 800b546:	e76a      	b.n	800b41e <_dtoa_r+0x116>
 800b548:	2301      	movs	r3, #1
 800b54a:	e7b2      	b.n	800b4b2 <_dtoa_r+0x1aa>
 800b54c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b54e:	e7b1      	b.n	800b4b4 <_dtoa_r+0x1ac>
 800b550:	9b04      	ldr	r3, [sp, #16]
 800b552:	9a00      	ldr	r2, [sp, #0]
 800b554:	1a9b      	subs	r3, r3, r2
 800b556:	9304      	str	r3, [sp, #16]
 800b558:	4253      	negs	r3, r2
 800b55a:	9307      	str	r3, [sp, #28]
 800b55c:	2300      	movs	r3, #0
 800b55e:	930a      	str	r3, [sp, #40]	; 0x28
 800b560:	e7bf      	b.n	800b4e2 <_dtoa_r+0x1da>
 800b562:	2300      	movs	r3, #0
 800b564:	9308      	str	r3, [sp, #32]
 800b566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dc55      	bgt.n	800b618 <_dtoa_r+0x310>
 800b56c:	2301      	movs	r3, #1
 800b56e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b572:	461a      	mov	r2, r3
 800b574:	9209      	str	r2, [sp, #36]	; 0x24
 800b576:	e00c      	b.n	800b592 <_dtoa_r+0x28a>
 800b578:	2301      	movs	r3, #1
 800b57a:	e7f3      	b.n	800b564 <_dtoa_r+0x25c>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b580:	9308      	str	r3, [sp, #32]
 800b582:	9b00      	ldr	r3, [sp, #0]
 800b584:	4413      	add	r3, r2
 800b586:	9302      	str	r3, [sp, #8]
 800b588:	3301      	adds	r3, #1
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	bfb8      	it	lt
 800b590:	2301      	movlt	r3, #1
 800b592:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b594:	2200      	movs	r2, #0
 800b596:	6042      	str	r2, [r0, #4]
 800b598:	2204      	movs	r2, #4
 800b59a:	f102 0614 	add.w	r6, r2, #20
 800b59e:	429e      	cmp	r6, r3
 800b5a0:	6841      	ldr	r1, [r0, #4]
 800b5a2:	d93d      	bls.n	800b620 <_dtoa_r+0x318>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 fcb7 	bl	800bf18 <_Balloc>
 800b5aa:	9001      	str	r0, [sp, #4]
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d13b      	bne.n	800b628 <_dtoa_r+0x320>
 800b5b0:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <_dtoa_r+0x2f0>)
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5b8:	e6c0      	b.n	800b33c <_dtoa_r+0x34>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e7df      	b.n	800b57e <_dtoa_r+0x276>
 800b5be:	bf00      	nop
 800b5c0:	636f4361 	.word	0x636f4361
 800b5c4:	3fd287a7 	.word	0x3fd287a7
 800b5c8:	8b60c8b3 	.word	0x8b60c8b3
 800b5cc:	3fc68a28 	.word	0x3fc68a28
 800b5d0:	509f79fb 	.word	0x509f79fb
 800b5d4:	3fd34413 	.word	0x3fd34413
 800b5d8:	0800dce9 	.word	0x0800dce9
 800b5dc:	0800dd00 	.word	0x0800dd00
 800b5e0:	7ff00000 	.word	0x7ff00000
 800b5e4:	0800dce5 	.word	0x0800dce5
 800b5e8:	0800dcdc 	.word	0x0800dcdc
 800b5ec:	0800dcb9 	.word	0x0800dcb9
 800b5f0:	3ff80000 	.word	0x3ff80000
 800b5f4:	0800ddf0 	.word	0x0800ddf0
 800b5f8:	0800dd5b 	.word	0x0800dd5b
 800b5fc:	2501      	movs	r5, #1
 800b5fe:	2300      	movs	r3, #0
 800b600:	9306      	str	r3, [sp, #24]
 800b602:	9508      	str	r5, [sp, #32]
 800b604:	f04f 33ff 	mov.w	r3, #4294967295
 800b608:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b60c:	2200      	movs	r2, #0
 800b60e:	2312      	movs	r3, #18
 800b610:	e7b0      	b.n	800b574 <_dtoa_r+0x26c>
 800b612:	2301      	movs	r3, #1
 800b614:	9308      	str	r3, [sp, #32]
 800b616:	e7f5      	b.n	800b604 <_dtoa_r+0x2fc>
 800b618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b61e:	e7b8      	b.n	800b592 <_dtoa_r+0x28a>
 800b620:	3101      	adds	r1, #1
 800b622:	6041      	str	r1, [r0, #4]
 800b624:	0052      	lsls	r2, r2, #1
 800b626:	e7b8      	b.n	800b59a <_dtoa_r+0x292>
 800b628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b62a:	9a01      	ldr	r2, [sp, #4]
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	2b0e      	cmp	r3, #14
 800b632:	f200 809d 	bhi.w	800b770 <_dtoa_r+0x468>
 800b636:	2d00      	cmp	r5, #0
 800b638:	f000 809a 	beq.w	800b770 <_dtoa_r+0x468>
 800b63c:	9b00      	ldr	r3, [sp, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	dd32      	ble.n	800b6a8 <_dtoa_r+0x3a0>
 800b642:	4ab7      	ldr	r2, [pc, #732]	; (800b920 <_dtoa_r+0x618>)
 800b644:	f003 030f 	and.w	r3, r3, #15
 800b648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b64c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b650:	9b00      	ldr	r3, [sp, #0]
 800b652:	05d8      	lsls	r0, r3, #23
 800b654:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b658:	d516      	bpl.n	800b688 <_dtoa_r+0x380>
 800b65a:	4bb2      	ldr	r3, [pc, #712]	; (800b924 <_dtoa_r+0x61c>)
 800b65c:	ec51 0b19 	vmov	r0, r1, d9
 800b660:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b664:	f7f5 f8f2 	bl	800084c <__aeabi_ddiv>
 800b668:	f007 070f 	and.w	r7, r7, #15
 800b66c:	4682      	mov	sl, r0
 800b66e:	468b      	mov	fp, r1
 800b670:	2503      	movs	r5, #3
 800b672:	4eac      	ldr	r6, [pc, #688]	; (800b924 <_dtoa_r+0x61c>)
 800b674:	b957      	cbnz	r7, 800b68c <_dtoa_r+0x384>
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	4650      	mov	r0, sl
 800b67c:	4659      	mov	r1, fp
 800b67e:	f7f5 f8e5 	bl	800084c <__aeabi_ddiv>
 800b682:	4682      	mov	sl, r0
 800b684:	468b      	mov	fp, r1
 800b686:	e028      	b.n	800b6da <_dtoa_r+0x3d2>
 800b688:	2502      	movs	r5, #2
 800b68a:	e7f2      	b.n	800b672 <_dtoa_r+0x36a>
 800b68c:	07f9      	lsls	r1, r7, #31
 800b68e:	d508      	bpl.n	800b6a2 <_dtoa_r+0x39a>
 800b690:	4640      	mov	r0, r8
 800b692:	4649      	mov	r1, r9
 800b694:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b698:	f7f4 ffae 	bl	80005f8 <__aeabi_dmul>
 800b69c:	3501      	adds	r5, #1
 800b69e:	4680      	mov	r8, r0
 800b6a0:	4689      	mov	r9, r1
 800b6a2:	107f      	asrs	r7, r7, #1
 800b6a4:	3608      	adds	r6, #8
 800b6a6:	e7e5      	b.n	800b674 <_dtoa_r+0x36c>
 800b6a8:	f000 809b 	beq.w	800b7e2 <_dtoa_r+0x4da>
 800b6ac:	9b00      	ldr	r3, [sp, #0]
 800b6ae:	4f9d      	ldr	r7, [pc, #628]	; (800b924 <_dtoa_r+0x61c>)
 800b6b0:	425e      	negs	r6, r3
 800b6b2:	4b9b      	ldr	r3, [pc, #620]	; (800b920 <_dtoa_r+0x618>)
 800b6b4:	f006 020f 	and.w	r2, r6, #15
 800b6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	ec51 0b19 	vmov	r0, r1, d9
 800b6c4:	f7f4 ff98 	bl	80005f8 <__aeabi_dmul>
 800b6c8:	1136      	asrs	r6, r6, #4
 800b6ca:	4682      	mov	sl, r0
 800b6cc:	468b      	mov	fp, r1
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2502      	movs	r5, #2
 800b6d2:	2e00      	cmp	r6, #0
 800b6d4:	d17a      	bne.n	800b7cc <_dtoa_r+0x4c4>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1d3      	bne.n	800b682 <_dtoa_r+0x37a>
 800b6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 8082 	beq.w	800b7e6 <_dtoa_r+0x4de>
 800b6e2:	4b91      	ldr	r3, [pc, #580]	; (800b928 <_dtoa_r+0x620>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4650      	mov	r0, sl
 800b6e8:	4659      	mov	r1, fp
 800b6ea:	f7f5 f9f7 	bl	8000adc <__aeabi_dcmplt>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d079      	beq.n	800b7e6 <_dtoa_r+0x4de>
 800b6f2:	9b03      	ldr	r3, [sp, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d076      	beq.n	800b7e6 <_dtoa_r+0x4de>
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	dd36      	ble.n	800b76c <_dtoa_r+0x464>
 800b6fe:	9b00      	ldr	r3, [sp, #0]
 800b700:	4650      	mov	r0, sl
 800b702:	4659      	mov	r1, fp
 800b704:	1e5f      	subs	r7, r3, #1
 800b706:	2200      	movs	r2, #0
 800b708:	4b88      	ldr	r3, [pc, #544]	; (800b92c <_dtoa_r+0x624>)
 800b70a:	f7f4 ff75 	bl	80005f8 <__aeabi_dmul>
 800b70e:	9e02      	ldr	r6, [sp, #8]
 800b710:	4682      	mov	sl, r0
 800b712:	468b      	mov	fp, r1
 800b714:	3501      	adds	r5, #1
 800b716:	4628      	mov	r0, r5
 800b718:	f7f4 ff04 	bl	8000524 <__aeabi_i2d>
 800b71c:	4652      	mov	r2, sl
 800b71e:	465b      	mov	r3, fp
 800b720:	f7f4 ff6a 	bl	80005f8 <__aeabi_dmul>
 800b724:	4b82      	ldr	r3, [pc, #520]	; (800b930 <_dtoa_r+0x628>)
 800b726:	2200      	movs	r2, #0
 800b728:	f7f4 fdb0 	bl	800028c <__adddf3>
 800b72c:	46d0      	mov	r8, sl
 800b72e:	46d9      	mov	r9, fp
 800b730:	4682      	mov	sl, r0
 800b732:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b736:	2e00      	cmp	r6, #0
 800b738:	d158      	bne.n	800b7ec <_dtoa_r+0x4e4>
 800b73a:	4b7e      	ldr	r3, [pc, #504]	; (800b934 <_dtoa_r+0x62c>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	4640      	mov	r0, r8
 800b740:	4649      	mov	r1, r9
 800b742:	f7f4 fda1 	bl	8000288 <__aeabi_dsub>
 800b746:	4652      	mov	r2, sl
 800b748:	465b      	mov	r3, fp
 800b74a:	4680      	mov	r8, r0
 800b74c:	4689      	mov	r9, r1
 800b74e:	f7f5 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 800b752:	2800      	cmp	r0, #0
 800b754:	f040 8295 	bne.w	800bc82 <_dtoa_r+0x97a>
 800b758:	4652      	mov	r2, sl
 800b75a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b75e:	4640      	mov	r0, r8
 800b760:	4649      	mov	r1, r9
 800b762:	f7f5 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800b766:	2800      	cmp	r0, #0
 800b768:	f040 8289 	bne.w	800bc7e <_dtoa_r+0x976>
 800b76c:	ec5b ab19 	vmov	sl, fp, d9
 800b770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b772:	2b00      	cmp	r3, #0
 800b774:	f2c0 8148 	blt.w	800ba08 <_dtoa_r+0x700>
 800b778:	9a00      	ldr	r2, [sp, #0]
 800b77a:	2a0e      	cmp	r2, #14
 800b77c:	f300 8144 	bgt.w	800ba08 <_dtoa_r+0x700>
 800b780:	4b67      	ldr	r3, [pc, #412]	; (800b920 <_dtoa_r+0x618>)
 800b782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b786:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f280 80d5 	bge.w	800b93c <_dtoa_r+0x634>
 800b792:	9b03      	ldr	r3, [sp, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f300 80d1 	bgt.w	800b93c <_dtoa_r+0x634>
 800b79a:	f040 826f 	bne.w	800bc7c <_dtoa_r+0x974>
 800b79e:	4b65      	ldr	r3, [pc, #404]	; (800b934 <_dtoa_r+0x62c>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	f7f4 ff27 	bl	80005f8 <__aeabi_dmul>
 800b7aa:	4652      	mov	r2, sl
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	f7f5 f9a9 	bl	8000b04 <__aeabi_dcmpge>
 800b7b2:	9e03      	ldr	r6, [sp, #12]
 800b7b4:	4637      	mov	r7, r6
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	f040 8245 	bne.w	800bc46 <_dtoa_r+0x93e>
 800b7bc:	9d01      	ldr	r5, [sp, #4]
 800b7be:	2331      	movs	r3, #49	; 0x31
 800b7c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b7c4:	9b00      	ldr	r3, [sp, #0]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	e240      	b.n	800bc4e <_dtoa_r+0x946>
 800b7cc:	07f2      	lsls	r2, r6, #31
 800b7ce:	d505      	bpl.n	800b7dc <_dtoa_r+0x4d4>
 800b7d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7d4:	f7f4 ff10 	bl	80005f8 <__aeabi_dmul>
 800b7d8:	3501      	adds	r5, #1
 800b7da:	2301      	movs	r3, #1
 800b7dc:	1076      	asrs	r6, r6, #1
 800b7de:	3708      	adds	r7, #8
 800b7e0:	e777      	b.n	800b6d2 <_dtoa_r+0x3ca>
 800b7e2:	2502      	movs	r5, #2
 800b7e4:	e779      	b.n	800b6da <_dtoa_r+0x3d2>
 800b7e6:	9f00      	ldr	r7, [sp, #0]
 800b7e8:	9e03      	ldr	r6, [sp, #12]
 800b7ea:	e794      	b.n	800b716 <_dtoa_r+0x40e>
 800b7ec:	9901      	ldr	r1, [sp, #4]
 800b7ee:	4b4c      	ldr	r3, [pc, #304]	; (800b920 <_dtoa_r+0x618>)
 800b7f0:	4431      	add	r1, r6
 800b7f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b7f4:	9908      	ldr	r1, [sp, #32]
 800b7f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b7fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7fe:	2900      	cmp	r1, #0
 800b800:	d043      	beq.n	800b88a <_dtoa_r+0x582>
 800b802:	494d      	ldr	r1, [pc, #308]	; (800b938 <_dtoa_r+0x630>)
 800b804:	2000      	movs	r0, #0
 800b806:	f7f5 f821 	bl	800084c <__aeabi_ddiv>
 800b80a:	4652      	mov	r2, sl
 800b80c:	465b      	mov	r3, fp
 800b80e:	f7f4 fd3b 	bl	8000288 <__aeabi_dsub>
 800b812:	9d01      	ldr	r5, [sp, #4]
 800b814:	4682      	mov	sl, r0
 800b816:	468b      	mov	fp, r1
 800b818:	4649      	mov	r1, r9
 800b81a:	4640      	mov	r0, r8
 800b81c:	f7f5 f99c 	bl	8000b58 <__aeabi_d2iz>
 800b820:	4606      	mov	r6, r0
 800b822:	f7f4 fe7f 	bl	8000524 <__aeabi_i2d>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4640      	mov	r0, r8
 800b82c:	4649      	mov	r1, r9
 800b82e:	f7f4 fd2b 	bl	8000288 <__aeabi_dsub>
 800b832:	3630      	adds	r6, #48	; 0x30
 800b834:	f805 6b01 	strb.w	r6, [r5], #1
 800b838:	4652      	mov	r2, sl
 800b83a:	465b      	mov	r3, fp
 800b83c:	4680      	mov	r8, r0
 800b83e:	4689      	mov	r9, r1
 800b840:	f7f5 f94c 	bl	8000adc <__aeabi_dcmplt>
 800b844:	2800      	cmp	r0, #0
 800b846:	d163      	bne.n	800b910 <_dtoa_r+0x608>
 800b848:	4642      	mov	r2, r8
 800b84a:	464b      	mov	r3, r9
 800b84c:	4936      	ldr	r1, [pc, #216]	; (800b928 <_dtoa_r+0x620>)
 800b84e:	2000      	movs	r0, #0
 800b850:	f7f4 fd1a 	bl	8000288 <__aeabi_dsub>
 800b854:	4652      	mov	r2, sl
 800b856:	465b      	mov	r3, fp
 800b858:	f7f5 f940 	bl	8000adc <__aeabi_dcmplt>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	f040 80b5 	bne.w	800b9cc <_dtoa_r+0x6c4>
 800b862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b864:	429d      	cmp	r5, r3
 800b866:	d081      	beq.n	800b76c <_dtoa_r+0x464>
 800b868:	4b30      	ldr	r3, [pc, #192]	; (800b92c <_dtoa_r+0x624>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	4650      	mov	r0, sl
 800b86e:	4659      	mov	r1, fp
 800b870:	f7f4 fec2 	bl	80005f8 <__aeabi_dmul>
 800b874:	4b2d      	ldr	r3, [pc, #180]	; (800b92c <_dtoa_r+0x624>)
 800b876:	4682      	mov	sl, r0
 800b878:	468b      	mov	fp, r1
 800b87a:	4640      	mov	r0, r8
 800b87c:	4649      	mov	r1, r9
 800b87e:	2200      	movs	r2, #0
 800b880:	f7f4 feba 	bl	80005f8 <__aeabi_dmul>
 800b884:	4680      	mov	r8, r0
 800b886:	4689      	mov	r9, r1
 800b888:	e7c6      	b.n	800b818 <_dtoa_r+0x510>
 800b88a:	4650      	mov	r0, sl
 800b88c:	4659      	mov	r1, fp
 800b88e:	f7f4 feb3 	bl	80005f8 <__aeabi_dmul>
 800b892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b894:	9d01      	ldr	r5, [sp, #4]
 800b896:	930f      	str	r3, [sp, #60]	; 0x3c
 800b898:	4682      	mov	sl, r0
 800b89a:	468b      	mov	fp, r1
 800b89c:	4649      	mov	r1, r9
 800b89e:	4640      	mov	r0, r8
 800b8a0:	f7f5 f95a 	bl	8000b58 <__aeabi_d2iz>
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	f7f4 fe3d 	bl	8000524 <__aeabi_i2d>
 800b8aa:	3630      	adds	r6, #48	; 0x30
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	f7f4 fce8 	bl	8000288 <__aeabi_dsub>
 800b8b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b8bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8be:	429d      	cmp	r5, r3
 800b8c0:	4680      	mov	r8, r0
 800b8c2:	4689      	mov	r9, r1
 800b8c4:	f04f 0200 	mov.w	r2, #0
 800b8c8:	d124      	bne.n	800b914 <_dtoa_r+0x60c>
 800b8ca:	4b1b      	ldr	r3, [pc, #108]	; (800b938 <_dtoa_r+0x630>)
 800b8cc:	4650      	mov	r0, sl
 800b8ce:	4659      	mov	r1, fp
 800b8d0:	f7f4 fcdc 	bl	800028c <__adddf3>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4649      	mov	r1, r9
 800b8dc:	f7f5 f91c 	bl	8000b18 <__aeabi_dcmpgt>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d173      	bne.n	800b9cc <_dtoa_r+0x6c4>
 800b8e4:	4652      	mov	r2, sl
 800b8e6:	465b      	mov	r3, fp
 800b8e8:	4913      	ldr	r1, [pc, #76]	; (800b938 <_dtoa_r+0x630>)
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	f7f4 fccc 	bl	8000288 <__aeabi_dsub>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	f7f5 f8f0 	bl	8000adc <__aeabi_dcmplt>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	f43f af35 	beq.w	800b76c <_dtoa_r+0x464>
 800b902:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b904:	1e6b      	subs	r3, r5, #1
 800b906:	930f      	str	r3, [sp, #60]	; 0x3c
 800b908:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b90c:	2b30      	cmp	r3, #48	; 0x30
 800b90e:	d0f8      	beq.n	800b902 <_dtoa_r+0x5fa>
 800b910:	9700      	str	r7, [sp, #0]
 800b912:	e049      	b.n	800b9a8 <_dtoa_r+0x6a0>
 800b914:	4b05      	ldr	r3, [pc, #20]	; (800b92c <_dtoa_r+0x624>)
 800b916:	f7f4 fe6f 	bl	80005f8 <__aeabi_dmul>
 800b91a:	4680      	mov	r8, r0
 800b91c:	4689      	mov	r9, r1
 800b91e:	e7bd      	b.n	800b89c <_dtoa_r+0x594>
 800b920:	0800ddf0 	.word	0x0800ddf0
 800b924:	0800ddc8 	.word	0x0800ddc8
 800b928:	3ff00000 	.word	0x3ff00000
 800b92c:	40240000 	.word	0x40240000
 800b930:	401c0000 	.word	0x401c0000
 800b934:	40140000 	.word	0x40140000
 800b938:	3fe00000 	.word	0x3fe00000
 800b93c:	9d01      	ldr	r5, [sp, #4]
 800b93e:	4656      	mov	r6, sl
 800b940:	465f      	mov	r7, fp
 800b942:	4642      	mov	r2, r8
 800b944:	464b      	mov	r3, r9
 800b946:	4630      	mov	r0, r6
 800b948:	4639      	mov	r1, r7
 800b94a:	f7f4 ff7f 	bl	800084c <__aeabi_ddiv>
 800b94e:	f7f5 f903 	bl	8000b58 <__aeabi_d2iz>
 800b952:	4682      	mov	sl, r0
 800b954:	f7f4 fde6 	bl	8000524 <__aeabi_i2d>
 800b958:	4642      	mov	r2, r8
 800b95a:	464b      	mov	r3, r9
 800b95c:	f7f4 fe4c 	bl	80005f8 <__aeabi_dmul>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4630      	mov	r0, r6
 800b966:	4639      	mov	r1, r7
 800b968:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b96c:	f7f4 fc8c 	bl	8000288 <__aeabi_dsub>
 800b970:	f805 6b01 	strb.w	r6, [r5], #1
 800b974:	9e01      	ldr	r6, [sp, #4]
 800b976:	9f03      	ldr	r7, [sp, #12]
 800b978:	1bae      	subs	r6, r5, r6
 800b97a:	42b7      	cmp	r7, r6
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	d135      	bne.n	800b9ee <_dtoa_r+0x6e6>
 800b982:	f7f4 fc83 	bl	800028c <__adddf3>
 800b986:	4642      	mov	r2, r8
 800b988:	464b      	mov	r3, r9
 800b98a:	4606      	mov	r6, r0
 800b98c:	460f      	mov	r7, r1
 800b98e:	f7f5 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 800b992:	b9d0      	cbnz	r0, 800b9ca <_dtoa_r+0x6c2>
 800b994:	4642      	mov	r2, r8
 800b996:	464b      	mov	r3, r9
 800b998:	4630      	mov	r0, r6
 800b99a:	4639      	mov	r1, r7
 800b99c:	f7f5 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9a0:	b110      	cbz	r0, 800b9a8 <_dtoa_r+0x6a0>
 800b9a2:	f01a 0f01 	tst.w	sl, #1
 800b9a6:	d110      	bne.n	800b9ca <_dtoa_r+0x6c2>
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	ee18 1a10 	vmov	r1, s16
 800b9ae:	f000 faf3 	bl	800bf98 <_Bfree>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9800      	ldr	r0, [sp, #0]
 800b9b6:	702b      	strb	r3, [r5, #0]
 800b9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	6018      	str	r0, [r3, #0]
 800b9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f43f acf1 	beq.w	800b3a8 <_dtoa_r+0xa0>
 800b9c6:	601d      	str	r5, [r3, #0]
 800b9c8:	e4ee      	b.n	800b3a8 <_dtoa_r+0xa0>
 800b9ca:	9f00      	ldr	r7, [sp, #0]
 800b9cc:	462b      	mov	r3, r5
 800b9ce:	461d      	mov	r5, r3
 800b9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9d4:	2a39      	cmp	r2, #57	; 0x39
 800b9d6:	d106      	bne.n	800b9e6 <_dtoa_r+0x6de>
 800b9d8:	9a01      	ldr	r2, [sp, #4]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d1f7      	bne.n	800b9ce <_dtoa_r+0x6c6>
 800b9de:	9901      	ldr	r1, [sp, #4]
 800b9e0:	2230      	movs	r2, #48	; 0x30
 800b9e2:	3701      	adds	r7, #1
 800b9e4:	700a      	strb	r2, [r1, #0]
 800b9e6:	781a      	ldrb	r2, [r3, #0]
 800b9e8:	3201      	adds	r2, #1
 800b9ea:	701a      	strb	r2, [r3, #0]
 800b9ec:	e790      	b.n	800b910 <_dtoa_r+0x608>
 800b9ee:	4ba6      	ldr	r3, [pc, #664]	; (800bc88 <_dtoa_r+0x980>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f7f4 fe01 	bl	80005f8 <__aeabi_dmul>
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	f7f5 f863 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d09d      	beq.n	800b942 <_dtoa_r+0x63a>
 800ba06:	e7cf      	b.n	800b9a8 <_dtoa_r+0x6a0>
 800ba08:	9a08      	ldr	r2, [sp, #32]
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	f000 80d7 	beq.w	800bbbe <_dtoa_r+0x8b6>
 800ba10:	9a06      	ldr	r2, [sp, #24]
 800ba12:	2a01      	cmp	r2, #1
 800ba14:	f300 80ba 	bgt.w	800bb8c <_dtoa_r+0x884>
 800ba18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	f000 80b2 	beq.w	800bb84 <_dtoa_r+0x87c>
 800ba20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba24:	9e07      	ldr	r6, [sp, #28]
 800ba26:	9d04      	ldr	r5, [sp, #16]
 800ba28:	9a04      	ldr	r2, [sp, #16]
 800ba2a:	441a      	add	r2, r3
 800ba2c:	9204      	str	r2, [sp, #16]
 800ba2e:	9a05      	ldr	r2, [sp, #20]
 800ba30:	2101      	movs	r1, #1
 800ba32:	441a      	add	r2, r3
 800ba34:	4620      	mov	r0, r4
 800ba36:	9205      	str	r2, [sp, #20]
 800ba38:	f000 fb66 	bl	800c108 <__i2b>
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	2d00      	cmp	r5, #0
 800ba40:	dd0c      	ble.n	800ba5c <_dtoa_r+0x754>
 800ba42:	9b05      	ldr	r3, [sp, #20]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dd09      	ble.n	800ba5c <_dtoa_r+0x754>
 800ba48:	42ab      	cmp	r3, r5
 800ba4a:	9a04      	ldr	r2, [sp, #16]
 800ba4c:	bfa8      	it	ge
 800ba4e:	462b      	movge	r3, r5
 800ba50:	1ad2      	subs	r2, r2, r3
 800ba52:	9204      	str	r2, [sp, #16]
 800ba54:	9a05      	ldr	r2, [sp, #20]
 800ba56:	1aed      	subs	r5, r5, r3
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	9305      	str	r3, [sp, #20]
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	b31b      	cbz	r3, 800baa8 <_dtoa_r+0x7a0>
 800ba60:	9b08      	ldr	r3, [sp, #32]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 80af 	beq.w	800bbc6 <_dtoa_r+0x8be>
 800ba68:	2e00      	cmp	r6, #0
 800ba6a:	dd13      	ble.n	800ba94 <_dtoa_r+0x78c>
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	4632      	mov	r2, r6
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fc09 	bl	800c288 <__pow5mult>
 800ba76:	ee18 2a10 	vmov	r2, s16
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	4607      	mov	r7, r0
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f000 fb58 	bl	800c134 <__multiply>
 800ba84:	ee18 1a10 	vmov	r1, s16
 800ba88:	4680      	mov	r8, r0
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 fa84 	bl	800bf98 <_Bfree>
 800ba90:	ee08 8a10 	vmov	s16, r8
 800ba94:	9b07      	ldr	r3, [sp, #28]
 800ba96:	1b9a      	subs	r2, r3, r6
 800ba98:	d006      	beq.n	800baa8 <_dtoa_r+0x7a0>
 800ba9a:	ee18 1a10 	vmov	r1, s16
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fbf2 	bl	800c288 <__pow5mult>
 800baa4:	ee08 0a10 	vmov	s16, r0
 800baa8:	2101      	movs	r1, #1
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 fb2c 	bl	800c108 <__i2b>
 800bab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	4606      	mov	r6, r0
 800bab6:	f340 8088 	ble.w	800bbca <_dtoa_r+0x8c2>
 800baba:	461a      	mov	r2, r3
 800babc:	4601      	mov	r1, r0
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 fbe2 	bl	800c288 <__pow5mult>
 800bac4:	9b06      	ldr	r3, [sp, #24]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	4606      	mov	r6, r0
 800baca:	f340 8081 	ble.w	800bbd0 <_dtoa_r+0x8c8>
 800bace:	f04f 0800 	mov.w	r8, #0
 800bad2:	6933      	ldr	r3, [r6, #16]
 800bad4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bad8:	6918      	ldr	r0, [r3, #16]
 800bada:	f000 fac5 	bl	800c068 <__hi0bits>
 800bade:	f1c0 0020 	rsb	r0, r0, #32
 800bae2:	9b05      	ldr	r3, [sp, #20]
 800bae4:	4418      	add	r0, r3
 800bae6:	f010 001f 	ands.w	r0, r0, #31
 800baea:	f000 8092 	beq.w	800bc12 <_dtoa_r+0x90a>
 800baee:	f1c0 0320 	rsb	r3, r0, #32
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	f340 808a 	ble.w	800bc0c <_dtoa_r+0x904>
 800baf8:	f1c0 001c 	rsb	r0, r0, #28
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	4403      	add	r3, r0
 800bb00:	9304      	str	r3, [sp, #16]
 800bb02:	9b05      	ldr	r3, [sp, #20]
 800bb04:	4403      	add	r3, r0
 800bb06:	4405      	add	r5, r0
 800bb08:	9305      	str	r3, [sp, #20]
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	dd07      	ble.n	800bb20 <_dtoa_r+0x818>
 800bb10:	ee18 1a10 	vmov	r1, s16
 800bb14:	461a      	mov	r2, r3
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 fc10 	bl	800c33c <__lshift>
 800bb1c:	ee08 0a10 	vmov	s16, r0
 800bb20:	9b05      	ldr	r3, [sp, #20]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dd05      	ble.n	800bb32 <_dtoa_r+0x82a>
 800bb26:	4631      	mov	r1, r6
 800bb28:	461a      	mov	r2, r3
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f000 fc06 	bl	800c33c <__lshift>
 800bb30:	4606      	mov	r6, r0
 800bb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d06e      	beq.n	800bc16 <_dtoa_r+0x90e>
 800bb38:	ee18 0a10 	vmov	r0, s16
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	f000 fc6d 	bl	800c41c <__mcmp>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	da67      	bge.n	800bc16 <_dtoa_r+0x90e>
 800bb46:	9b00      	ldr	r3, [sp, #0]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	ee18 1a10 	vmov	r1, s16
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	220a      	movs	r2, #10
 800bb52:	2300      	movs	r3, #0
 800bb54:	4620      	mov	r0, r4
 800bb56:	f000 fa41 	bl	800bfdc <__multadd>
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	ee08 0a10 	vmov	s16, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 81b1 	beq.w	800bec8 <_dtoa_r+0xbc0>
 800bb66:	2300      	movs	r3, #0
 800bb68:	4639      	mov	r1, r7
 800bb6a:	220a      	movs	r2, #10
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 fa35 	bl	800bfdc <__multadd>
 800bb72:	9b02      	ldr	r3, [sp, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	4607      	mov	r7, r0
 800bb78:	f300 808e 	bgt.w	800bc98 <_dtoa_r+0x990>
 800bb7c:	9b06      	ldr	r3, [sp, #24]
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	dc51      	bgt.n	800bc26 <_dtoa_r+0x91e>
 800bb82:	e089      	b.n	800bc98 <_dtoa_r+0x990>
 800bb84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb8a:	e74b      	b.n	800ba24 <_dtoa_r+0x71c>
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	1e5e      	subs	r6, r3, #1
 800bb90:	9b07      	ldr	r3, [sp, #28]
 800bb92:	42b3      	cmp	r3, r6
 800bb94:	bfbf      	itttt	lt
 800bb96:	9b07      	ldrlt	r3, [sp, #28]
 800bb98:	9607      	strlt	r6, [sp, #28]
 800bb9a:	1af2      	sublt	r2, r6, r3
 800bb9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb9e:	bfb6      	itet	lt
 800bba0:	189b      	addlt	r3, r3, r2
 800bba2:	1b9e      	subge	r6, r3, r6
 800bba4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bba6:	9b03      	ldr	r3, [sp, #12]
 800bba8:	bfb8      	it	lt
 800bbaa:	2600      	movlt	r6, #0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	bfb7      	itett	lt
 800bbb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bbb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bbb8:	1a9d      	sublt	r5, r3, r2
 800bbba:	2300      	movlt	r3, #0
 800bbbc:	e734      	b.n	800ba28 <_dtoa_r+0x720>
 800bbbe:	9e07      	ldr	r6, [sp, #28]
 800bbc0:	9d04      	ldr	r5, [sp, #16]
 800bbc2:	9f08      	ldr	r7, [sp, #32]
 800bbc4:	e73b      	b.n	800ba3e <_dtoa_r+0x736>
 800bbc6:	9a07      	ldr	r2, [sp, #28]
 800bbc8:	e767      	b.n	800ba9a <_dtoa_r+0x792>
 800bbca:	9b06      	ldr	r3, [sp, #24]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	dc18      	bgt.n	800bc02 <_dtoa_r+0x8fa>
 800bbd0:	f1ba 0f00 	cmp.w	sl, #0
 800bbd4:	d115      	bne.n	800bc02 <_dtoa_r+0x8fa>
 800bbd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbda:	b993      	cbnz	r3, 800bc02 <_dtoa_r+0x8fa>
 800bbdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbe0:	0d1b      	lsrs	r3, r3, #20
 800bbe2:	051b      	lsls	r3, r3, #20
 800bbe4:	b183      	cbz	r3, 800bc08 <_dtoa_r+0x900>
 800bbe6:	9b04      	ldr	r3, [sp, #16]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	9b05      	ldr	r3, [sp, #20]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	f04f 0801 	mov.w	r8, #1
 800bbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f47f af6a 	bne.w	800bad2 <_dtoa_r+0x7ca>
 800bbfe:	2001      	movs	r0, #1
 800bc00:	e76f      	b.n	800bae2 <_dtoa_r+0x7da>
 800bc02:	f04f 0800 	mov.w	r8, #0
 800bc06:	e7f6      	b.n	800bbf6 <_dtoa_r+0x8ee>
 800bc08:	4698      	mov	r8, r3
 800bc0a:	e7f4      	b.n	800bbf6 <_dtoa_r+0x8ee>
 800bc0c:	f43f af7d 	beq.w	800bb0a <_dtoa_r+0x802>
 800bc10:	4618      	mov	r0, r3
 800bc12:	301c      	adds	r0, #28
 800bc14:	e772      	b.n	800bafc <_dtoa_r+0x7f4>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	dc37      	bgt.n	800bc8c <_dtoa_r+0x984>
 800bc1c:	9b06      	ldr	r3, [sp, #24]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	dd34      	ble.n	800bc8c <_dtoa_r+0x984>
 800bc22:	9b03      	ldr	r3, [sp, #12]
 800bc24:	9302      	str	r3, [sp, #8]
 800bc26:	9b02      	ldr	r3, [sp, #8]
 800bc28:	b96b      	cbnz	r3, 800bc46 <_dtoa_r+0x93e>
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	2205      	movs	r2, #5
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f9d4 	bl	800bfdc <__multadd>
 800bc34:	4601      	mov	r1, r0
 800bc36:	4606      	mov	r6, r0
 800bc38:	ee18 0a10 	vmov	r0, s16
 800bc3c:	f000 fbee 	bl	800c41c <__mcmp>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	f73f adbb 	bgt.w	800b7bc <_dtoa_r+0x4b4>
 800bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc48:	9d01      	ldr	r5, [sp, #4]
 800bc4a:	43db      	mvns	r3, r3
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	f04f 0800 	mov.w	r8, #0
 800bc52:	4631      	mov	r1, r6
 800bc54:	4620      	mov	r0, r4
 800bc56:	f000 f99f 	bl	800bf98 <_Bfree>
 800bc5a:	2f00      	cmp	r7, #0
 800bc5c:	f43f aea4 	beq.w	800b9a8 <_dtoa_r+0x6a0>
 800bc60:	f1b8 0f00 	cmp.w	r8, #0
 800bc64:	d005      	beq.n	800bc72 <_dtoa_r+0x96a>
 800bc66:	45b8      	cmp	r8, r7
 800bc68:	d003      	beq.n	800bc72 <_dtoa_r+0x96a>
 800bc6a:	4641      	mov	r1, r8
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f000 f993 	bl	800bf98 <_Bfree>
 800bc72:	4639      	mov	r1, r7
 800bc74:	4620      	mov	r0, r4
 800bc76:	f000 f98f 	bl	800bf98 <_Bfree>
 800bc7a:	e695      	b.n	800b9a8 <_dtoa_r+0x6a0>
 800bc7c:	2600      	movs	r6, #0
 800bc7e:	4637      	mov	r7, r6
 800bc80:	e7e1      	b.n	800bc46 <_dtoa_r+0x93e>
 800bc82:	9700      	str	r7, [sp, #0]
 800bc84:	4637      	mov	r7, r6
 800bc86:	e599      	b.n	800b7bc <_dtoa_r+0x4b4>
 800bc88:	40240000 	.word	0x40240000
 800bc8c:	9b08      	ldr	r3, [sp, #32]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 80ca 	beq.w	800be28 <_dtoa_r+0xb20>
 800bc94:	9b03      	ldr	r3, [sp, #12]
 800bc96:	9302      	str	r3, [sp, #8]
 800bc98:	2d00      	cmp	r5, #0
 800bc9a:	dd05      	ble.n	800bca8 <_dtoa_r+0x9a0>
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	462a      	mov	r2, r5
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fb4b 	bl	800c33c <__lshift>
 800bca6:	4607      	mov	r7, r0
 800bca8:	f1b8 0f00 	cmp.w	r8, #0
 800bcac:	d05b      	beq.n	800bd66 <_dtoa_r+0xa5e>
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 f931 	bl	800bf18 <_Balloc>
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	b928      	cbnz	r0, 800bcc6 <_dtoa_r+0x9be>
 800bcba:	4b87      	ldr	r3, [pc, #540]	; (800bed8 <_dtoa_r+0xbd0>)
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcc2:	f7ff bb3b 	b.w	800b33c <_dtoa_r+0x34>
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	3202      	adds	r2, #2
 800bcca:	0092      	lsls	r2, r2, #2
 800bccc:	f107 010c 	add.w	r1, r7, #12
 800bcd0:	300c      	adds	r0, #12
 800bcd2:	f000 f913 	bl	800befc <memcpy>
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 fb2e 	bl	800c33c <__lshift>
 800bce0:	9b01      	ldr	r3, [sp, #4]
 800bce2:	f103 0901 	add.w	r9, r3, #1
 800bce6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bcea:	4413      	add	r3, r2
 800bcec:	9305      	str	r3, [sp, #20]
 800bcee:	f00a 0301 	and.w	r3, sl, #1
 800bcf2:	46b8      	mov	r8, r7
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	ee18 0a10 	vmov	r0, s16
 800bcfe:	f7ff fa75 	bl	800b1ec <quorem>
 800bd02:	4641      	mov	r1, r8
 800bd04:	9002      	str	r0, [sp, #8]
 800bd06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd0a:	ee18 0a10 	vmov	r0, s16
 800bd0e:	f000 fb85 	bl	800c41c <__mcmp>
 800bd12:	463a      	mov	r2, r7
 800bd14:	9003      	str	r0, [sp, #12]
 800bd16:	4631      	mov	r1, r6
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 fb9b 	bl	800c454 <__mdiff>
 800bd1e:	68c2      	ldr	r2, [r0, #12]
 800bd20:	f109 3bff 	add.w	fp, r9, #4294967295
 800bd24:	4605      	mov	r5, r0
 800bd26:	bb02      	cbnz	r2, 800bd6a <_dtoa_r+0xa62>
 800bd28:	4601      	mov	r1, r0
 800bd2a:	ee18 0a10 	vmov	r0, s16
 800bd2e:	f000 fb75 	bl	800c41c <__mcmp>
 800bd32:	4602      	mov	r2, r0
 800bd34:	4629      	mov	r1, r5
 800bd36:	4620      	mov	r0, r4
 800bd38:	9207      	str	r2, [sp, #28]
 800bd3a:	f000 f92d 	bl	800bf98 <_Bfree>
 800bd3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd42:	ea43 0102 	orr.w	r1, r3, r2
 800bd46:	9b04      	ldr	r3, [sp, #16]
 800bd48:	430b      	orrs	r3, r1
 800bd4a:	464d      	mov	r5, r9
 800bd4c:	d10f      	bne.n	800bd6e <_dtoa_r+0xa66>
 800bd4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd52:	d02a      	beq.n	800bdaa <_dtoa_r+0xaa2>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	dd02      	ble.n	800bd60 <_dtoa_r+0xa58>
 800bd5a:	9b02      	ldr	r3, [sp, #8]
 800bd5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd60:	f88b a000 	strb.w	sl, [fp]
 800bd64:	e775      	b.n	800bc52 <_dtoa_r+0x94a>
 800bd66:	4638      	mov	r0, r7
 800bd68:	e7ba      	b.n	800bce0 <_dtoa_r+0x9d8>
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	e7e2      	b.n	800bd34 <_dtoa_r+0xa2c>
 800bd6e:	9b03      	ldr	r3, [sp, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	db04      	blt.n	800bd7e <_dtoa_r+0xa76>
 800bd74:	9906      	ldr	r1, [sp, #24]
 800bd76:	430b      	orrs	r3, r1
 800bd78:	9904      	ldr	r1, [sp, #16]
 800bd7a:	430b      	orrs	r3, r1
 800bd7c:	d122      	bne.n	800bdc4 <_dtoa_r+0xabc>
 800bd7e:	2a00      	cmp	r2, #0
 800bd80:	ddee      	ble.n	800bd60 <_dtoa_r+0xa58>
 800bd82:	ee18 1a10 	vmov	r1, s16
 800bd86:	2201      	movs	r2, #1
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fad7 	bl	800c33c <__lshift>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	ee08 0a10 	vmov	s16, r0
 800bd94:	f000 fb42 	bl	800c41c <__mcmp>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dc03      	bgt.n	800bda4 <_dtoa_r+0xa9c>
 800bd9c:	d1e0      	bne.n	800bd60 <_dtoa_r+0xa58>
 800bd9e:	f01a 0f01 	tst.w	sl, #1
 800bda2:	d0dd      	beq.n	800bd60 <_dtoa_r+0xa58>
 800bda4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bda8:	d1d7      	bne.n	800bd5a <_dtoa_r+0xa52>
 800bdaa:	2339      	movs	r3, #57	; 0x39
 800bdac:	f88b 3000 	strb.w	r3, [fp]
 800bdb0:	462b      	mov	r3, r5
 800bdb2:	461d      	mov	r5, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdba:	2a39      	cmp	r2, #57	; 0x39
 800bdbc:	d071      	beq.n	800bea2 <_dtoa_r+0xb9a>
 800bdbe:	3201      	adds	r2, #1
 800bdc0:	701a      	strb	r2, [r3, #0]
 800bdc2:	e746      	b.n	800bc52 <_dtoa_r+0x94a>
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	dd07      	ble.n	800bdd8 <_dtoa_r+0xad0>
 800bdc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bdcc:	d0ed      	beq.n	800bdaa <_dtoa_r+0xaa2>
 800bdce:	f10a 0301 	add.w	r3, sl, #1
 800bdd2:	f88b 3000 	strb.w	r3, [fp]
 800bdd6:	e73c      	b.n	800bc52 <_dtoa_r+0x94a>
 800bdd8:	9b05      	ldr	r3, [sp, #20]
 800bdda:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bdde:	4599      	cmp	r9, r3
 800bde0:	d047      	beq.n	800be72 <_dtoa_r+0xb6a>
 800bde2:	ee18 1a10 	vmov	r1, s16
 800bde6:	2300      	movs	r3, #0
 800bde8:	220a      	movs	r2, #10
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 f8f6 	bl	800bfdc <__multadd>
 800bdf0:	45b8      	cmp	r8, r7
 800bdf2:	ee08 0a10 	vmov	s16, r0
 800bdf6:	f04f 0300 	mov.w	r3, #0
 800bdfa:	f04f 020a 	mov.w	r2, #10
 800bdfe:	4641      	mov	r1, r8
 800be00:	4620      	mov	r0, r4
 800be02:	d106      	bne.n	800be12 <_dtoa_r+0xb0a>
 800be04:	f000 f8ea 	bl	800bfdc <__multadd>
 800be08:	4680      	mov	r8, r0
 800be0a:	4607      	mov	r7, r0
 800be0c:	f109 0901 	add.w	r9, r9, #1
 800be10:	e772      	b.n	800bcf8 <_dtoa_r+0x9f0>
 800be12:	f000 f8e3 	bl	800bfdc <__multadd>
 800be16:	4639      	mov	r1, r7
 800be18:	4680      	mov	r8, r0
 800be1a:	2300      	movs	r3, #0
 800be1c:	220a      	movs	r2, #10
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 f8dc 	bl	800bfdc <__multadd>
 800be24:	4607      	mov	r7, r0
 800be26:	e7f1      	b.n	800be0c <_dtoa_r+0xb04>
 800be28:	9b03      	ldr	r3, [sp, #12]
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	9d01      	ldr	r5, [sp, #4]
 800be2e:	ee18 0a10 	vmov	r0, s16
 800be32:	4631      	mov	r1, r6
 800be34:	f7ff f9da 	bl	800b1ec <quorem>
 800be38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	f805 ab01 	strb.w	sl, [r5], #1
 800be42:	1aea      	subs	r2, r5, r3
 800be44:	9b02      	ldr	r3, [sp, #8]
 800be46:	4293      	cmp	r3, r2
 800be48:	dd09      	ble.n	800be5e <_dtoa_r+0xb56>
 800be4a:	ee18 1a10 	vmov	r1, s16
 800be4e:	2300      	movs	r3, #0
 800be50:	220a      	movs	r2, #10
 800be52:	4620      	mov	r0, r4
 800be54:	f000 f8c2 	bl	800bfdc <__multadd>
 800be58:	ee08 0a10 	vmov	s16, r0
 800be5c:	e7e7      	b.n	800be2e <_dtoa_r+0xb26>
 800be5e:	9b02      	ldr	r3, [sp, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	bfc8      	it	gt
 800be64:	461d      	movgt	r5, r3
 800be66:	9b01      	ldr	r3, [sp, #4]
 800be68:	bfd8      	it	le
 800be6a:	2501      	movle	r5, #1
 800be6c:	441d      	add	r5, r3
 800be6e:	f04f 0800 	mov.w	r8, #0
 800be72:	ee18 1a10 	vmov	r1, s16
 800be76:	2201      	movs	r2, #1
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fa5f 	bl	800c33c <__lshift>
 800be7e:	4631      	mov	r1, r6
 800be80:	ee08 0a10 	vmov	s16, r0
 800be84:	f000 faca 	bl	800c41c <__mcmp>
 800be88:	2800      	cmp	r0, #0
 800be8a:	dc91      	bgt.n	800bdb0 <_dtoa_r+0xaa8>
 800be8c:	d102      	bne.n	800be94 <_dtoa_r+0xb8c>
 800be8e:	f01a 0f01 	tst.w	sl, #1
 800be92:	d18d      	bne.n	800bdb0 <_dtoa_r+0xaa8>
 800be94:	462b      	mov	r3, r5
 800be96:	461d      	mov	r5, r3
 800be98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be9c:	2a30      	cmp	r2, #48	; 0x30
 800be9e:	d0fa      	beq.n	800be96 <_dtoa_r+0xb8e>
 800bea0:	e6d7      	b.n	800bc52 <_dtoa_r+0x94a>
 800bea2:	9a01      	ldr	r2, [sp, #4]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d184      	bne.n	800bdb2 <_dtoa_r+0xaaa>
 800bea8:	9b00      	ldr	r3, [sp, #0]
 800beaa:	3301      	adds	r3, #1
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	2331      	movs	r3, #49	; 0x31
 800beb0:	7013      	strb	r3, [r2, #0]
 800beb2:	e6ce      	b.n	800bc52 <_dtoa_r+0x94a>
 800beb4:	4b09      	ldr	r3, [pc, #36]	; (800bedc <_dtoa_r+0xbd4>)
 800beb6:	f7ff ba95 	b.w	800b3e4 <_dtoa_r+0xdc>
 800beba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f47f aa6e 	bne.w	800b39e <_dtoa_r+0x96>
 800bec2:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <_dtoa_r+0xbd8>)
 800bec4:	f7ff ba8e 	b.w	800b3e4 <_dtoa_r+0xdc>
 800bec8:	9b02      	ldr	r3, [sp, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	dcae      	bgt.n	800be2c <_dtoa_r+0xb24>
 800bece:	9b06      	ldr	r3, [sp, #24]
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	f73f aea8 	bgt.w	800bc26 <_dtoa_r+0x91e>
 800bed6:	e7a9      	b.n	800be2c <_dtoa_r+0xb24>
 800bed8:	0800dd5b 	.word	0x0800dd5b
 800bedc:	0800dcb8 	.word	0x0800dcb8
 800bee0:	0800dcdc 	.word	0x0800dcdc

0800bee4 <_localeconv_r>:
 800bee4:	4800      	ldr	r0, [pc, #0]	; (800bee8 <_localeconv_r+0x4>)
 800bee6:	4770      	bx	lr
 800bee8:	20000178 	.word	0x20000178

0800beec <malloc>:
 800beec:	4b02      	ldr	r3, [pc, #8]	; (800bef8 <malloc+0xc>)
 800beee:	4601      	mov	r1, r0
 800bef0:	6818      	ldr	r0, [r3, #0]
 800bef2:	f000 bc17 	b.w	800c724 <_malloc_r>
 800bef6:	bf00      	nop
 800bef8:	20000024 	.word	0x20000024

0800befc <memcpy>:
 800befc:	440a      	add	r2, r1
 800befe:	4291      	cmp	r1, r2
 800bf00:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf04:	d100      	bne.n	800bf08 <memcpy+0xc>
 800bf06:	4770      	bx	lr
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf12:	4291      	cmp	r1, r2
 800bf14:	d1f9      	bne.n	800bf0a <memcpy+0xe>
 800bf16:	bd10      	pop	{r4, pc}

0800bf18 <_Balloc>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	b976      	cbnz	r6, 800bf40 <_Balloc+0x28>
 800bf22:	2010      	movs	r0, #16
 800bf24:	f7ff ffe2 	bl	800beec <malloc>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf2c:	b920      	cbnz	r0, 800bf38 <_Balloc+0x20>
 800bf2e:	4b18      	ldr	r3, [pc, #96]	; (800bf90 <_Balloc+0x78>)
 800bf30:	4818      	ldr	r0, [pc, #96]	; (800bf94 <_Balloc+0x7c>)
 800bf32:	2166      	movs	r1, #102	; 0x66
 800bf34:	f000 fdd6 	bl	800cae4 <__assert_func>
 800bf38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf3c:	6006      	str	r6, [r0, #0]
 800bf3e:	60c6      	str	r6, [r0, #12]
 800bf40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf42:	68f3      	ldr	r3, [r6, #12]
 800bf44:	b183      	cbz	r3, 800bf68 <_Balloc+0x50>
 800bf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf4e:	b9b8      	cbnz	r0, 800bf80 <_Balloc+0x68>
 800bf50:	2101      	movs	r1, #1
 800bf52:	fa01 f605 	lsl.w	r6, r1, r5
 800bf56:	1d72      	adds	r2, r6, #5
 800bf58:	0092      	lsls	r2, r2, #2
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 fb60 	bl	800c620 <_calloc_r>
 800bf60:	b160      	cbz	r0, 800bf7c <_Balloc+0x64>
 800bf62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf66:	e00e      	b.n	800bf86 <_Balloc+0x6e>
 800bf68:	2221      	movs	r2, #33	; 0x21
 800bf6a:	2104      	movs	r1, #4
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fb57 	bl	800c620 <_calloc_r>
 800bf72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf74:	60f0      	str	r0, [r6, #12]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e4      	bne.n	800bf46 <_Balloc+0x2e>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	6802      	ldr	r2, [r0, #0]
 800bf82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf86:	2300      	movs	r3, #0
 800bf88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf8c:	e7f7      	b.n	800bf7e <_Balloc+0x66>
 800bf8e:	bf00      	nop
 800bf90:	0800dce9 	.word	0x0800dce9
 800bf94:	0800dd6c 	.word	0x0800dd6c

0800bf98 <_Bfree>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	b976      	cbnz	r6, 800bfc0 <_Bfree+0x28>
 800bfa2:	2010      	movs	r0, #16
 800bfa4:	f7ff ffa2 	bl	800beec <malloc>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	6268      	str	r0, [r5, #36]	; 0x24
 800bfac:	b920      	cbnz	r0, 800bfb8 <_Bfree+0x20>
 800bfae:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <_Bfree+0x3c>)
 800bfb0:	4809      	ldr	r0, [pc, #36]	; (800bfd8 <_Bfree+0x40>)
 800bfb2:	218a      	movs	r1, #138	; 0x8a
 800bfb4:	f000 fd96 	bl	800cae4 <__assert_func>
 800bfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfbc:	6006      	str	r6, [r0, #0]
 800bfbe:	60c6      	str	r6, [r0, #12]
 800bfc0:	b13c      	cbz	r4, 800bfd2 <_Bfree+0x3a>
 800bfc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfc4:	6862      	ldr	r2, [r4, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfcc:	6021      	str	r1, [r4, #0]
 800bfce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	0800dce9 	.word	0x0800dce9
 800bfd8:	0800dd6c 	.word	0x0800dd6c

0800bfdc <__multadd>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	690d      	ldr	r5, [r1, #16]
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	461e      	mov	r6, r3
 800bfe8:	f101 0c14 	add.w	ip, r1, #20
 800bfec:	2000      	movs	r0, #0
 800bfee:	f8dc 3000 	ldr.w	r3, [ip]
 800bff2:	b299      	uxth	r1, r3
 800bff4:	fb02 6101 	mla	r1, r2, r1, r6
 800bff8:	0c1e      	lsrs	r6, r3, #16
 800bffa:	0c0b      	lsrs	r3, r1, #16
 800bffc:	fb02 3306 	mla	r3, r2, r6, r3
 800c000:	b289      	uxth	r1, r1
 800c002:	3001      	adds	r0, #1
 800c004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c008:	4285      	cmp	r5, r0
 800c00a:	f84c 1b04 	str.w	r1, [ip], #4
 800c00e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c012:	dcec      	bgt.n	800bfee <__multadd+0x12>
 800c014:	b30e      	cbz	r6, 800c05a <__multadd+0x7e>
 800c016:	68a3      	ldr	r3, [r4, #8]
 800c018:	42ab      	cmp	r3, r5
 800c01a:	dc19      	bgt.n	800c050 <__multadd+0x74>
 800c01c:	6861      	ldr	r1, [r4, #4]
 800c01e:	4638      	mov	r0, r7
 800c020:	3101      	adds	r1, #1
 800c022:	f7ff ff79 	bl	800bf18 <_Balloc>
 800c026:	4680      	mov	r8, r0
 800c028:	b928      	cbnz	r0, 800c036 <__multadd+0x5a>
 800c02a:	4602      	mov	r2, r0
 800c02c:	4b0c      	ldr	r3, [pc, #48]	; (800c060 <__multadd+0x84>)
 800c02e:	480d      	ldr	r0, [pc, #52]	; (800c064 <__multadd+0x88>)
 800c030:	21b5      	movs	r1, #181	; 0xb5
 800c032:	f000 fd57 	bl	800cae4 <__assert_func>
 800c036:	6922      	ldr	r2, [r4, #16]
 800c038:	3202      	adds	r2, #2
 800c03a:	f104 010c 	add.w	r1, r4, #12
 800c03e:	0092      	lsls	r2, r2, #2
 800c040:	300c      	adds	r0, #12
 800c042:	f7ff ff5b 	bl	800befc <memcpy>
 800c046:	4621      	mov	r1, r4
 800c048:	4638      	mov	r0, r7
 800c04a:	f7ff ffa5 	bl	800bf98 <_Bfree>
 800c04e:	4644      	mov	r4, r8
 800c050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c054:	3501      	adds	r5, #1
 800c056:	615e      	str	r6, [r3, #20]
 800c058:	6125      	str	r5, [r4, #16]
 800c05a:	4620      	mov	r0, r4
 800c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c060:	0800dd5b 	.word	0x0800dd5b
 800c064:	0800dd6c 	.word	0x0800dd6c

0800c068 <__hi0bits>:
 800c068:	0c03      	lsrs	r3, r0, #16
 800c06a:	041b      	lsls	r3, r3, #16
 800c06c:	b9d3      	cbnz	r3, 800c0a4 <__hi0bits+0x3c>
 800c06e:	0400      	lsls	r0, r0, #16
 800c070:	2310      	movs	r3, #16
 800c072:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c076:	bf04      	itt	eq
 800c078:	0200      	lsleq	r0, r0, #8
 800c07a:	3308      	addeq	r3, #8
 800c07c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c080:	bf04      	itt	eq
 800c082:	0100      	lsleq	r0, r0, #4
 800c084:	3304      	addeq	r3, #4
 800c086:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c08a:	bf04      	itt	eq
 800c08c:	0080      	lsleq	r0, r0, #2
 800c08e:	3302      	addeq	r3, #2
 800c090:	2800      	cmp	r0, #0
 800c092:	db05      	blt.n	800c0a0 <__hi0bits+0x38>
 800c094:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c098:	f103 0301 	add.w	r3, r3, #1
 800c09c:	bf08      	it	eq
 800c09e:	2320      	moveq	r3, #32
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	4770      	bx	lr
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	e7e4      	b.n	800c072 <__hi0bits+0xa>

0800c0a8 <__lo0bits>:
 800c0a8:	6803      	ldr	r3, [r0, #0]
 800c0aa:	f013 0207 	ands.w	r2, r3, #7
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	d00b      	beq.n	800c0ca <__lo0bits+0x22>
 800c0b2:	07da      	lsls	r2, r3, #31
 800c0b4:	d423      	bmi.n	800c0fe <__lo0bits+0x56>
 800c0b6:	0798      	lsls	r0, r3, #30
 800c0b8:	bf49      	itett	mi
 800c0ba:	085b      	lsrmi	r3, r3, #1
 800c0bc:	089b      	lsrpl	r3, r3, #2
 800c0be:	2001      	movmi	r0, #1
 800c0c0:	600b      	strmi	r3, [r1, #0]
 800c0c2:	bf5c      	itt	pl
 800c0c4:	600b      	strpl	r3, [r1, #0]
 800c0c6:	2002      	movpl	r0, #2
 800c0c8:	4770      	bx	lr
 800c0ca:	b298      	uxth	r0, r3
 800c0cc:	b9a8      	cbnz	r0, 800c0fa <__lo0bits+0x52>
 800c0ce:	0c1b      	lsrs	r3, r3, #16
 800c0d0:	2010      	movs	r0, #16
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	b90a      	cbnz	r2, 800c0da <__lo0bits+0x32>
 800c0d6:	3008      	adds	r0, #8
 800c0d8:	0a1b      	lsrs	r3, r3, #8
 800c0da:	071a      	lsls	r2, r3, #28
 800c0dc:	bf04      	itt	eq
 800c0de:	091b      	lsreq	r3, r3, #4
 800c0e0:	3004      	addeq	r0, #4
 800c0e2:	079a      	lsls	r2, r3, #30
 800c0e4:	bf04      	itt	eq
 800c0e6:	089b      	lsreq	r3, r3, #2
 800c0e8:	3002      	addeq	r0, #2
 800c0ea:	07da      	lsls	r2, r3, #31
 800c0ec:	d403      	bmi.n	800c0f6 <__lo0bits+0x4e>
 800c0ee:	085b      	lsrs	r3, r3, #1
 800c0f0:	f100 0001 	add.w	r0, r0, #1
 800c0f4:	d005      	beq.n	800c102 <__lo0bits+0x5a>
 800c0f6:	600b      	str	r3, [r1, #0]
 800c0f8:	4770      	bx	lr
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	e7e9      	b.n	800c0d2 <__lo0bits+0x2a>
 800c0fe:	2000      	movs	r0, #0
 800c100:	4770      	bx	lr
 800c102:	2020      	movs	r0, #32
 800c104:	4770      	bx	lr
	...

0800c108 <__i2b>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	460c      	mov	r4, r1
 800c10c:	2101      	movs	r1, #1
 800c10e:	f7ff ff03 	bl	800bf18 <_Balloc>
 800c112:	4602      	mov	r2, r0
 800c114:	b928      	cbnz	r0, 800c122 <__i2b+0x1a>
 800c116:	4b05      	ldr	r3, [pc, #20]	; (800c12c <__i2b+0x24>)
 800c118:	4805      	ldr	r0, [pc, #20]	; (800c130 <__i2b+0x28>)
 800c11a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c11e:	f000 fce1 	bl	800cae4 <__assert_func>
 800c122:	2301      	movs	r3, #1
 800c124:	6144      	str	r4, [r0, #20]
 800c126:	6103      	str	r3, [r0, #16]
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	bf00      	nop
 800c12c:	0800dd5b 	.word	0x0800dd5b
 800c130:	0800dd6c 	.word	0x0800dd6c

0800c134 <__multiply>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	4691      	mov	r9, r2
 800c13a:	690a      	ldr	r2, [r1, #16]
 800c13c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c140:	429a      	cmp	r2, r3
 800c142:	bfb8      	it	lt
 800c144:	460b      	movlt	r3, r1
 800c146:	460c      	mov	r4, r1
 800c148:	bfbc      	itt	lt
 800c14a:	464c      	movlt	r4, r9
 800c14c:	4699      	movlt	r9, r3
 800c14e:	6927      	ldr	r7, [r4, #16]
 800c150:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c154:	68a3      	ldr	r3, [r4, #8]
 800c156:	6861      	ldr	r1, [r4, #4]
 800c158:	eb07 060a 	add.w	r6, r7, sl
 800c15c:	42b3      	cmp	r3, r6
 800c15e:	b085      	sub	sp, #20
 800c160:	bfb8      	it	lt
 800c162:	3101      	addlt	r1, #1
 800c164:	f7ff fed8 	bl	800bf18 <_Balloc>
 800c168:	b930      	cbnz	r0, 800c178 <__multiply+0x44>
 800c16a:	4602      	mov	r2, r0
 800c16c:	4b44      	ldr	r3, [pc, #272]	; (800c280 <__multiply+0x14c>)
 800c16e:	4845      	ldr	r0, [pc, #276]	; (800c284 <__multiply+0x150>)
 800c170:	f240 115d 	movw	r1, #349	; 0x15d
 800c174:	f000 fcb6 	bl	800cae4 <__assert_func>
 800c178:	f100 0514 	add.w	r5, r0, #20
 800c17c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c180:	462b      	mov	r3, r5
 800c182:	2200      	movs	r2, #0
 800c184:	4543      	cmp	r3, r8
 800c186:	d321      	bcc.n	800c1cc <__multiply+0x98>
 800c188:	f104 0314 	add.w	r3, r4, #20
 800c18c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c190:	f109 0314 	add.w	r3, r9, #20
 800c194:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c198:	9202      	str	r2, [sp, #8]
 800c19a:	1b3a      	subs	r2, r7, r4
 800c19c:	3a15      	subs	r2, #21
 800c19e:	f022 0203 	bic.w	r2, r2, #3
 800c1a2:	3204      	adds	r2, #4
 800c1a4:	f104 0115 	add.w	r1, r4, #21
 800c1a8:	428f      	cmp	r7, r1
 800c1aa:	bf38      	it	cc
 800c1ac:	2204      	movcc	r2, #4
 800c1ae:	9201      	str	r2, [sp, #4]
 800c1b0:	9a02      	ldr	r2, [sp, #8]
 800c1b2:	9303      	str	r3, [sp, #12]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d80c      	bhi.n	800c1d2 <__multiply+0x9e>
 800c1b8:	2e00      	cmp	r6, #0
 800c1ba:	dd03      	ble.n	800c1c4 <__multiply+0x90>
 800c1bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d05a      	beq.n	800c27a <__multiply+0x146>
 800c1c4:	6106      	str	r6, [r0, #16]
 800c1c6:	b005      	add	sp, #20
 800c1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1cc:	f843 2b04 	str.w	r2, [r3], #4
 800c1d0:	e7d8      	b.n	800c184 <__multiply+0x50>
 800c1d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1d6:	f1ba 0f00 	cmp.w	sl, #0
 800c1da:	d024      	beq.n	800c226 <__multiply+0xf2>
 800c1dc:	f104 0e14 	add.w	lr, r4, #20
 800c1e0:	46a9      	mov	r9, r5
 800c1e2:	f04f 0c00 	mov.w	ip, #0
 800c1e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1ea:	f8d9 1000 	ldr.w	r1, [r9]
 800c1ee:	fa1f fb82 	uxth.w	fp, r2
 800c1f2:	b289      	uxth	r1, r1
 800c1f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1fc:	f8d9 2000 	ldr.w	r2, [r9]
 800c200:	4461      	add	r1, ip
 800c202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c206:	fb0a c20b 	mla	r2, sl, fp, ip
 800c20a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c20e:	b289      	uxth	r1, r1
 800c210:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c214:	4577      	cmp	r7, lr
 800c216:	f849 1b04 	str.w	r1, [r9], #4
 800c21a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c21e:	d8e2      	bhi.n	800c1e6 <__multiply+0xb2>
 800c220:	9a01      	ldr	r2, [sp, #4]
 800c222:	f845 c002 	str.w	ip, [r5, r2]
 800c226:	9a03      	ldr	r2, [sp, #12]
 800c228:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c22c:	3304      	adds	r3, #4
 800c22e:	f1b9 0f00 	cmp.w	r9, #0
 800c232:	d020      	beq.n	800c276 <__multiply+0x142>
 800c234:	6829      	ldr	r1, [r5, #0]
 800c236:	f104 0c14 	add.w	ip, r4, #20
 800c23a:	46ae      	mov	lr, r5
 800c23c:	f04f 0a00 	mov.w	sl, #0
 800c240:	f8bc b000 	ldrh.w	fp, [ip]
 800c244:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c248:	fb09 220b 	mla	r2, r9, fp, r2
 800c24c:	4492      	add	sl, r2
 800c24e:	b289      	uxth	r1, r1
 800c250:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c254:	f84e 1b04 	str.w	r1, [lr], #4
 800c258:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c25c:	f8be 1000 	ldrh.w	r1, [lr]
 800c260:	0c12      	lsrs	r2, r2, #16
 800c262:	fb09 1102 	mla	r1, r9, r2, r1
 800c266:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c26a:	4567      	cmp	r7, ip
 800c26c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c270:	d8e6      	bhi.n	800c240 <__multiply+0x10c>
 800c272:	9a01      	ldr	r2, [sp, #4]
 800c274:	50a9      	str	r1, [r5, r2]
 800c276:	3504      	adds	r5, #4
 800c278:	e79a      	b.n	800c1b0 <__multiply+0x7c>
 800c27a:	3e01      	subs	r6, #1
 800c27c:	e79c      	b.n	800c1b8 <__multiply+0x84>
 800c27e:	bf00      	nop
 800c280:	0800dd5b 	.word	0x0800dd5b
 800c284:	0800dd6c 	.word	0x0800dd6c

0800c288 <__pow5mult>:
 800c288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c28c:	4615      	mov	r5, r2
 800c28e:	f012 0203 	ands.w	r2, r2, #3
 800c292:	4606      	mov	r6, r0
 800c294:	460f      	mov	r7, r1
 800c296:	d007      	beq.n	800c2a8 <__pow5mult+0x20>
 800c298:	4c25      	ldr	r4, [pc, #148]	; (800c330 <__pow5mult+0xa8>)
 800c29a:	3a01      	subs	r2, #1
 800c29c:	2300      	movs	r3, #0
 800c29e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2a2:	f7ff fe9b 	bl	800bfdc <__multadd>
 800c2a6:	4607      	mov	r7, r0
 800c2a8:	10ad      	asrs	r5, r5, #2
 800c2aa:	d03d      	beq.n	800c328 <__pow5mult+0xa0>
 800c2ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2ae:	b97c      	cbnz	r4, 800c2d0 <__pow5mult+0x48>
 800c2b0:	2010      	movs	r0, #16
 800c2b2:	f7ff fe1b 	bl	800beec <malloc>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	6270      	str	r0, [r6, #36]	; 0x24
 800c2ba:	b928      	cbnz	r0, 800c2c8 <__pow5mult+0x40>
 800c2bc:	4b1d      	ldr	r3, [pc, #116]	; (800c334 <__pow5mult+0xac>)
 800c2be:	481e      	ldr	r0, [pc, #120]	; (800c338 <__pow5mult+0xb0>)
 800c2c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2c4:	f000 fc0e 	bl	800cae4 <__assert_func>
 800c2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2cc:	6004      	str	r4, [r0, #0]
 800c2ce:	60c4      	str	r4, [r0, #12]
 800c2d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2d8:	b94c      	cbnz	r4, 800c2ee <__pow5mult+0x66>
 800c2da:	f240 2171 	movw	r1, #625	; 0x271
 800c2de:	4630      	mov	r0, r6
 800c2e0:	f7ff ff12 	bl	800c108 <__i2b>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	6003      	str	r3, [r0, #0]
 800c2ee:	f04f 0900 	mov.w	r9, #0
 800c2f2:	07eb      	lsls	r3, r5, #31
 800c2f4:	d50a      	bpl.n	800c30c <__pow5mult+0x84>
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	4622      	mov	r2, r4
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7ff ff1a 	bl	800c134 <__multiply>
 800c300:	4639      	mov	r1, r7
 800c302:	4680      	mov	r8, r0
 800c304:	4630      	mov	r0, r6
 800c306:	f7ff fe47 	bl	800bf98 <_Bfree>
 800c30a:	4647      	mov	r7, r8
 800c30c:	106d      	asrs	r5, r5, #1
 800c30e:	d00b      	beq.n	800c328 <__pow5mult+0xa0>
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	b938      	cbnz	r0, 800c324 <__pow5mult+0x9c>
 800c314:	4622      	mov	r2, r4
 800c316:	4621      	mov	r1, r4
 800c318:	4630      	mov	r0, r6
 800c31a:	f7ff ff0b 	bl	800c134 <__multiply>
 800c31e:	6020      	str	r0, [r4, #0]
 800c320:	f8c0 9000 	str.w	r9, [r0]
 800c324:	4604      	mov	r4, r0
 800c326:	e7e4      	b.n	800c2f2 <__pow5mult+0x6a>
 800c328:	4638      	mov	r0, r7
 800c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32e:	bf00      	nop
 800c330:	0800deb8 	.word	0x0800deb8
 800c334:	0800dce9 	.word	0x0800dce9
 800c338:	0800dd6c 	.word	0x0800dd6c

0800c33c <__lshift>:
 800c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c340:	460c      	mov	r4, r1
 800c342:	6849      	ldr	r1, [r1, #4]
 800c344:	6923      	ldr	r3, [r4, #16]
 800c346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	4607      	mov	r7, r0
 800c34e:	4691      	mov	r9, r2
 800c350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c354:	f108 0601 	add.w	r6, r8, #1
 800c358:	42b3      	cmp	r3, r6
 800c35a:	db0b      	blt.n	800c374 <__lshift+0x38>
 800c35c:	4638      	mov	r0, r7
 800c35e:	f7ff fddb 	bl	800bf18 <_Balloc>
 800c362:	4605      	mov	r5, r0
 800c364:	b948      	cbnz	r0, 800c37a <__lshift+0x3e>
 800c366:	4602      	mov	r2, r0
 800c368:	4b2a      	ldr	r3, [pc, #168]	; (800c414 <__lshift+0xd8>)
 800c36a:	482b      	ldr	r0, [pc, #172]	; (800c418 <__lshift+0xdc>)
 800c36c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c370:	f000 fbb8 	bl	800cae4 <__assert_func>
 800c374:	3101      	adds	r1, #1
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	e7ee      	b.n	800c358 <__lshift+0x1c>
 800c37a:	2300      	movs	r3, #0
 800c37c:	f100 0114 	add.w	r1, r0, #20
 800c380:	f100 0210 	add.w	r2, r0, #16
 800c384:	4618      	mov	r0, r3
 800c386:	4553      	cmp	r3, sl
 800c388:	db37      	blt.n	800c3fa <__lshift+0xbe>
 800c38a:	6920      	ldr	r0, [r4, #16]
 800c38c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c390:	f104 0314 	add.w	r3, r4, #20
 800c394:	f019 091f 	ands.w	r9, r9, #31
 800c398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c39c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c3a0:	d02f      	beq.n	800c402 <__lshift+0xc6>
 800c3a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c3a6:	468a      	mov	sl, r1
 800c3a8:	f04f 0c00 	mov.w	ip, #0
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	fa02 f209 	lsl.w	r2, r2, r9
 800c3b2:	ea42 020c 	orr.w	r2, r2, ip
 800c3b6:	f84a 2b04 	str.w	r2, [sl], #4
 800c3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3be:	4298      	cmp	r0, r3
 800c3c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c3c4:	d8f2      	bhi.n	800c3ac <__lshift+0x70>
 800c3c6:	1b03      	subs	r3, r0, r4
 800c3c8:	3b15      	subs	r3, #21
 800c3ca:	f023 0303 	bic.w	r3, r3, #3
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	f104 0215 	add.w	r2, r4, #21
 800c3d4:	4290      	cmp	r0, r2
 800c3d6:	bf38      	it	cc
 800c3d8:	2304      	movcc	r3, #4
 800c3da:	f841 c003 	str.w	ip, [r1, r3]
 800c3de:	f1bc 0f00 	cmp.w	ip, #0
 800c3e2:	d001      	beq.n	800c3e8 <__lshift+0xac>
 800c3e4:	f108 0602 	add.w	r6, r8, #2
 800c3e8:	3e01      	subs	r6, #1
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	612e      	str	r6, [r5, #16]
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	f7ff fdd2 	bl	800bf98 <_Bfree>
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3fe:	3301      	adds	r3, #1
 800c400:	e7c1      	b.n	800c386 <__lshift+0x4a>
 800c402:	3904      	subs	r1, #4
 800c404:	f853 2b04 	ldr.w	r2, [r3], #4
 800c408:	f841 2f04 	str.w	r2, [r1, #4]!
 800c40c:	4298      	cmp	r0, r3
 800c40e:	d8f9      	bhi.n	800c404 <__lshift+0xc8>
 800c410:	e7ea      	b.n	800c3e8 <__lshift+0xac>
 800c412:	bf00      	nop
 800c414:	0800dd5b 	.word	0x0800dd5b
 800c418:	0800dd6c 	.word	0x0800dd6c

0800c41c <__mcmp>:
 800c41c:	b530      	push	{r4, r5, lr}
 800c41e:	6902      	ldr	r2, [r0, #16]
 800c420:	690c      	ldr	r4, [r1, #16]
 800c422:	1b12      	subs	r2, r2, r4
 800c424:	d10e      	bne.n	800c444 <__mcmp+0x28>
 800c426:	f100 0314 	add.w	r3, r0, #20
 800c42a:	3114      	adds	r1, #20
 800c42c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c430:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c434:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c438:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c43c:	42a5      	cmp	r5, r4
 800c43e:	d003      	beq.n	800c448 <__mcmp+0x2c>
 800c440:	d305      	bcc.n	800c44e <__mcmp+0x32>
 800c442:	2201      	movs	r2, #1
 800c444:	4610      	mov	r0, r2
 800c446:	bd30      	pop	{r4, r5, pc}
 800c448:	4283      	cmp	r3, r0
 800c44a:	d3f3      	bcc.n	800c434 <__mcmp+0x18>
 800c44c:	e7fa      	b.n	800c444 <__mcmp+0x28>
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295
 800c452:	e7f7      	b.n	800c444 <__mcmp+0x28>

0800c454 <__mdiff>:
 800c454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c458:	460c      	mov	r4, r1
 800c45a:	4606      	mov	r6, r0
 800c45c:	4611      	mov	r1, r2
 800c45e:	4620      	mov	r0, r4
 800c460:	4690      	mov	r8, r2
 800c462:	f7ff ffdb 	bl	800c41c <__mcmp>
 800c466:	1e05      	subs	r5, r0, #0
 800c468:	d110      	bne.n	800c48c <__mdiff+0x38>
 800c46a:	4629      	mov	r1, r5
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7ff fd53 	bl	800bf18 <_Balloc>
 800c472:	b930      	cbnz	r0, 800c482 <__mdiff+0x2e>
 800c474:	4b3a      	ldr	r3, [pc, #232]	; (800c560 <__mdiff+0x10c>)
 800c476:	4602      	mov	r2, r0
 800c478:	f240 2132 	movw	r1, #562	; 0x232
 800c47c:	4839      	ldr	r0, [pc, #228]	; (800c564 <__mdiff+0x110>)
 800c47e:	f000 fb31 	bl	800cae4 <__assert_func>
 800c482:	2301      	movs	r3, #1
 800c484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48c:	bfa4      	itt	ge
 800c48e:	4643      	movge	r3, r8
 800c490:	46a0      	movge	r8, r4
 800c492:	4630      	mov	r0, r6
 800c494:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c498:	bfa6      	itte	ge
 800c49a:	461c      	movge	r4, r3
 800c49c:	2500      	movge	r5, #0
 800c49e:	2501      	movlt	r5, #1
 800c4a0:	f7ff fd3a 	bl	800bf18 <_Balloc>
 800c4a4:	b920      	cbnz	r0, 800c4b0 <__mdiff+0x5c>
 800c4a6:	4b2e      	ldr	r3, [pc, #184]	; (800c560 <__mdiff+0x10c>)
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c4ae:	e7e5      	b.n	800c47c <__mdiff+0x28>
 800c4b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4b4:	6926      	ldr	r6, [r4, #16]
 800c4b6:	60c5      	str	r5, [r0, #12]
 800c4b8:	f104 0914 	add.w	r9, r4, #20
 800c4bc:	f108 0514 	add.w	r5, r8, #20
 800c4c0:	f100 0e14 	add.w	lr, r0, #20
 800c4c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4cc:	f108 0210 	add.w	r2, r8, #16
 800c4d0:	46f2      	mov	sl, lr
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4dc:	fa1f f883 	uxth.w	r8, r3
 800c4e0:	fa11 f18b 	uxtah	r1, r1, fp
 800c4e4:	0c1b      	lsrs	r3, r3, #16
 800c4e6:	eba1 0808 	sub.w	r8, r1, r8
 800c4ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4f2:	fa1f f888 	uxth.w	r8, r8
 800c4f6:	1419      	asrs	r1, r3, #16
 800c4f8:	454e      	cmp	r6, r9
 800c4fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4fe:	f84a 3b04 	str.w	r3, [sl], #4
 800c502:	d8e7      	bhi.n	800c4d4 <__mdiff+0x80>
 800c504:	1b33      	subs	r3, r6, r4
 800c506:	3b15      	subs	r3, #21
 800c508:	f023 0303 	bic.w	r3, r3, #3
 800c50c:	3304      	adds	r3, #4
 800c50e:	3415      	adds	r4, #21
 800c510:	42a6      	cmp	r6, r4
 800c512:	bf38      	it	cc
 800c514:	2304      	movcc	r3, #4
 800c516:	441d      	add	r5, r3
 800c518:	4473      	add	r3, lr
 800c51a:	469e      	mov	lr, r3
 800c51c:	462e      	mov	r6, r5
 800c51e:	4566      	cmp	r6, ip
 800c520:	d30e      	bcc.n	800c540 <__mdiff+0xec>
 800c522:	f10c 0203 	add.w	r2, ip, #3
 800c526:	1b52      	subs	r2, r2, r5
 800c528:	f022 0203 	bic.w	r2, r2, #3
 800c52c:	3d03      	subs	r5, #3
 800c52e:	45ac      	cmp	ip, r5
 800c530:	bf38      	it	cc
 800c532:	2200      	movcc	r2, #0
 800c534:	441a      	add	r2, r3
 800c536:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c53a:	b17b      	cbz	r3, 800c55c <__mdiff+0x108>
 800c53c:	6107      	str	r7, [r0, #16]
 800c53e:	e7a3      	b.n	800c488 <__mdiff+0x34>
 800c540:	f856 8b04 	ldr.w	r8, [r6], #4
 800c544:	fa11 f288 	uxtah	r2, r1, r8
 800c548:	1414      	asrs	r4, r2, #16
 800c54a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c54e:	b292      	uxth	r2, r2
 800c550:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c554:	f84e 2b04 	str.w	r2, [lr], #4
 800c558:	1421      	asrs	r1, r4, #16
 800c55a:	e7e0      	b.n	800c51e <__mdiff+0xca>
 800c55c:	3f01      	subs	r7, #1
 800c55e:	e7ea      	b.n	800c536 <__mdiff+0xe2>
 800c560:	0800dd5b 	.word	0x0800dd5b
 800c564:	0800dd6c 	.word	0x0800dd6c

0800c568 <__d2b>:
 800c568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c56c:	4689      	mov	r9, r1
 800c56e:	2101      	movs	r1, #1
 800c570:	ec57 6b10 	vmov	r6, r7, d0
 800c574:	4690      	mov	r8, r2
 800c576:	f7ff fccf 	bl	800bf18 <_Balloc>
 800c57a:	4604      	mov	r4, r0
 800c57c:	b930      	cbnz	r0, 800c58c <__d2b+0x24>
 800c57e:	4602      	mov	r2, r0
 800c580:	4b25      	ldr	r3, [pc, #148]	; (800c618 <__d2b+0xb0>)
 800c582:	4826      	ldr	r0, [pc, #152]	; (800c61c <__d2b+0xb4>)
 800c584:	f240 310a 	movw	r1, #778	; 0x30a
 800c588:	f000 faac 	bl	800cae4 <__assert_func>
 800c58c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c590:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c594:	bb35      	cbnz	r5, 800c5e4 <__d2b+0x7c>
 800c596:	2e00      	cmp	r6, #0
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	d028      	beq.n	800c5ee <__d2b+0x86>
 800c59c:	4668      	mov	r0, sp
 800c59e:	9600      	str	r6, [sp, #0]
 800c5a0:	f7ff fd82 	bl	800c0a8 <__lo0bits>
 800c5a4:	9900      	ldr	r1, [sp, #0]
 800c5a6:	b300      	cbz	r0, 800c5ea <__d2b+0x82>
 800c5a8:	9a01      	ldr	r2, [sp, #4]
 800c5aa:	f1c0 0320 	rsb	r3, r0, #32
 800c5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	40c2      	lsrs	r2, r0
 800c5b6:	6163      	str	r3, [r4, #20]
 800c5b8:	9201      	str	r2, [sp, #4]
 800c5ba:	9b01      	ldr	r3, [sp, #4]
 800c5bc:	61a3      	str	r3, [r4, #24]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	bf14      	ite	ne
 800c5c2:	2202      	movne	r2, #2
 800c5c4:	2201      	moveq	r2, #1
 800c5c6:	6122      	str	r2, [r4, #16]
 800c5c8:	b1d5      	cbz	r5, 800c600 <__d2b+0x98>
 800c5ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5ce:	4405      	add	r5, r0
 800c5d0:	f8c9 5000 	str.w	r5, [r9]
 800c5d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5d8:	f8c8 0000 	str.w	r0, [r8]
 800c5dc:	4620      	mov	r0, r4
 800c5de:	b003      	add	sp, #12
 800c5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5e8:	e7d5      	b.n	800c596 <__d2b+0x2e>
 800c5ea:	6161      	str	r1, [r4, #20]
 800c5ec:	e7e5      	b.n	800c5ba <__d2b+0x52>
 800c5ee:	a801      	add	r0, sp, #4
 800c5f0:	f7ff fd5a 	bl	800c0a8 <__lo0bits>
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	6163      	str	r3, [r4, #20]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	6122      	str	r2, [r4, #16]
 800c5fc:	3020      	adds	r0, #32
 800c5fe:	e7e3      	b.n	800c5c8 <__d2b+0x60>
 800c600:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c604:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c608:	f8c9 0000 	str.w	r0, [r9]
 800c60c:	6918      	ldr	r0, [r3, #16]
 800c60e:	f7ff fd2b 	bl	800c068 <__hi0bits>
 800c612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c616:	e7df      	b.n	800c5d8 <__d2b+0x70>
 800c618:	0800dd5b 	.word	0x0800dd5b
 800c61c:	0800dd6c 	.word	0x0800dd6c

0800c620 <_calloc_r>:
 800c620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c622:	fba1 2402 	umull	r2, r4, r1, r2
 800c626:	b94c      	cbnz	r4, 800c63c <_calloc_r+0x1c>
 800c628:	4611      	mov	r1, r2
 800c62a:	9201      	str	r2, [sp, #4]
 800c62c:	f000 f87a 	bl	800c724 <_malloc_r>
 800c630:	9a01      	ldr	r2, [sp, #4]
 800c632:	4605      	mov	r5, r0
 800c634:	b930      	cbnz	r0, 800c644 <_calloc_r+0x24>
 800c636:	4628      	mov	r0, r5
 800c638:	b003      	add	sp, #12
 800c63a:	bd30      	pop	{r4, r5, pc}
 800c63c:	220c      	movs	r2, #12
 800c63e:	6002      	str	r2, [r0, #0]
 800c640:	2500      	movs	r5, #0
 800c642:	e7f8      	b.n	800c636 <_calloc_r+0x16>
 800c644:	4621      	mov	r1, r4
 800c646:	f7fe f93f 	bl	800a8c8 <memset>
 800c64a:	e7f4      	b.n	800c636 <_calloc_r+0x16>

0800c64c <_free_r>:
 800c64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c64e:	2900      	cmp	r1, #0
 800c650:	d044      	beq.n	800c6dc <_free_r+0x90>
 800c652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c656:	9001      	str	r0, [sp, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f1a1 0404 	sub.w	r4, r1, #4
 800c65e:	bfb8      	it	lt
 800c660:	18e4      	addlt	r4, r4, r3
 800c662:	f000 fa9b 	bl	800cb9c <__malloc_lock>
 800c666:	4a1e      	ldr	r2, [pc, #120]	; (800c6e0 <_free_r+0x94>)
 800c668:	9801      	ldr	r0, [sp, #4]
 800c66a:	6813      	ldr	r3, [r2, #0]
 800c66c:	b933      	cbnz	r3, 800c67c <_free_r+0x30>
 800c66e:	6063      	str	r3, [r4, #4]
 800c670:	6014      	str	r4, [r2, #0]
 800c672:	b003      	add	sp, #12
 800c674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c678:	f000 ba96 	b.w	800cba8 <__malloc_unlock>
 800c67c:	42a3      	cmp	r3, r4
 800c67e:	d908      	bls.n	800c692 <_free_r+0x46>
 800c680:	6825      	ldr	r5, [r4, #0]
 800c682:	1961      	adds	r1, r4, r5
 800c684:	428b      	cmp	r3, r1
 800c686:	bf01      	itttt	eq
 800c688:	6819      	ldreq	r1, [r3, #0]
 800c68a:	685b      	ldreq	r3, [r3, #4]
 800c68c:	1949      	addeq	r1, r1, r5
 800c68e:	6021      	streq	r1, [r4, #0]
 800c690:	e7ed      	b.n	800c66e <_free_r+0x22>
 800c692:	461a      	mov	r2, r3
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	b10b      	cbz	r3, 800c69c <_free_r+0x50>
 800c698:	42a3      	cmp	r3, r4
 800c69a:	d9fa      	bls.n	800c692 <_free_r+0x46>
 800c69c:	6811      	ldr	r1, [r2, #0]
 800c69e:	1855      	adds	r5, r2, r1
 800c6a0:	42a5      	cmp	r5, r4
 800c6a2:	d10b      	bne.n	800c6bc <_free_r+0x70>
 800c6a4:	6824      	ldr	r4, [r4, #0]
 800c6a6:	4421      	add	r1, r4
 800c6a8:	1854      	adds	r4, r2, r1
 800c6aa:	42a3      	cmp	r3, r4
 800c6ac:	6011      	str	r1, [r2, #0]
 800c6ae:	d1e0      	bne.n	800c672 <_free_r+0x26>
 800c6b0:	681c      	ldr	r4, [r3, #0]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	6053      	str	r3, [r2, #4]
 800c6b6:	4421      	add	r1, r4
 800c6b8:	6011      	str	r1, [r2, #0]
 800c6ba:	e7da      	b.n	800c672 <_free_r+0x26>
 800c6bc:	d902      	bls.n	800c6c4 <_free_r+0x78>
 800c6be:	230c      	movs	r3, #12
 800c6c0:	6003      	str	r3, [r0, #0]
 800c6c2:	e7d6      	b.n	800c672 <_free_r+0x26>
 800c6c4:	6825      	ldr	r5, [r4, #0]
 800c6c6:	1961      	adds	r1, r4, r5
 800c6c8:	428b      	cmp	r3, r1
 800c6ca:	bf04      	itt	eq
 800c6cc:	6819      	ldreq	r1, [r3, #0]
 800c6ce:	685b      	ldreq	r3, [r3, #4]
 800c6d0:	6063      	str	r3, [r4, #4]
 800c6d2:	bf04      	itt	eq
 800c6d4:	1949      	addeq	r1, r1, r5
 800c6d6:	6021      	streq	r1, [r4, #0]
 800c6d8:	6054      	str	r4, [r2, #4]
 800c6da:	e7ca      	b.n	800c672 <_free_r+0x26>
 800c6dc:	b003      	add	sp, #12
 800c6de:	bd30      	pop	{r4, r5, pc}
 800c6e0:	20002ab8 	.word	0x20002ab8

0800c6e4 <sbrk_aligned>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	4e0e      	ldr	r6, [pc, #56]	; (800c720 <sbrk_aligned+0x3c>)
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	6831      	ldr	r1, [r6, #0]
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	b911      	cbnz	r1, 800c6f6 <sbrk_aligned+0x12>
 800c6f0:	f000 f9e8 	bl	800cac4 <_sbrk_r>
 800c6f4:	6030      	str	r0, [r6, #0]
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	f000 f9e3 	bl	800cac4 <_sbrk_r>
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	d00a      	beq.n	800c718 <sbrk_aligned+0x34>
 800c702:	1cc4      	adds	r4, r0, #3
 800c704:	f024 0403 	bic.w	r4, r4, #3
 800c708:	42a0      	cmp	r0, r4
 800c70a:	d007      	beq.n	800c71c <sbrk_aligned+0x38>
 800c70c:	1a21      	subs	r1, r4, r0
 800c70e:	4628      	mov	r0, r5
 800c710:	f000 f9d8 	bl	800cac4 <_sbrk_r>
 800c714:	3001      	adds	r0, #1
 800c716:	d101      	bne.n	800c71c <sbrk_aligned+0x38>
 800c718:	f04f 34ff 	mov.w	r4, #4294967295
 800c71c:	4620      	mov	r0, r4
 800c71e:	bd70      	pop	{r4, r5, r6, pc}
 800c720:	20002abc 	.word	0x20002abc

0800c724 <_malloc_r>:
 800c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c728:	1ccd      	adds	r5, r1, #3
 800c72a:	f025 0503 	bic.w	r5, r5, #3
 800c72e:	3508      	adds	r5, #8
 800c730:	2d0c      	cmp	r5, #12
 800c732:	bf38      	it	cc
 800c734:	250c      	movcc	r5, #12
 800c736:	2d00      	cmp	r5, #0
 800c738:	4607      	mov	r7, r0
 800c73a:	db01      	blt.n	800c740 <_malloc_r+0x1c>
 800c73c:	42a9      	cmp	r1, r5
 800c73e:	d905      	bls.n	800c74c <_malloc_r+0x28>
 800c740:	230c      	movs	r3, #12
 800c742:	603b      	str	r3, [r7, #0]
 800c744:	2600      	movs	r6, #0
 800c746:	4630      	mov	r0, r6
 800c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74c:	4e2e      	ldr	r6, [pc, #184]	; (800c808 <_malloc_r+0xe4>)
 800c74e:	f000 fa25 	bl	800cb9c <__malloc_lock>
 800c752:	6833      	ldr	r3, [r6, #0]
 800c754:	461c      	mov	r4, r3
 800c756:	bb34      	cbnz	r4, 800c7a6 <_malloc_r+0x82>
 800c758:	4629      	mov	r1, r5
 800c75a:	4638      	mov	r0, r7
 800c75c:	f7ff ffc2 	bl	800c6e4 <sbrk_aligned>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	4604      	mov	r4, r0
 800c764:	d14d      	bne.n	800c802 <_malloc_r+0xde>
 800c766:	6834      	ldr	r4, [r6, #0]
 800c768:	4626      	mov	r6, r4
 800c76a:	2e00      	cmp	r6, #0
 800c76c:	d140      	bne.n	800c7f0 <_malloc_r+0xcc>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	4631      	mov	r1, r6
 800c772:	4638      	mov	r0, r7
 800c774:	eb04 0803 	add.w	r8, r4, r3
 800c778:	f000 f9a4 	bl	800cac4 <_sbrk_r>
 800c77c:	4580      	cmp	r8, r0
 800c77e:	d13a      	bne.n	800c7f6 <_malloc_r+0xd2>
 800c780:	6821      	ldr	r1, [r4, #0]
 800c782:	3503      	adds	r5, #3
 800c784:	1a6d      	subs	r5, r5, r1
 800c786:	f025 0503 	bic.w	r5, r5, #3
 800c78a:	3508      	adds	r5, #8
 800c78c:	2d0c      	cmp	r5, #12
 800c78e:	bf38      	it	cc
 800c790:	250c      	movcc	r5, #12
 800c792:	4629      	mov	r1, r5
 800c794:	4638      	mov	r0, r7
 800c796:	f7ff ffa5 	bl	800c6e4 <sbrk_aligned>
 800c79a:	3001      	adds	r0, #1
 800c79c:	d02b      	beq.n	800c7f6 <_malloc_r+0xd2>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	442b      	add	r3, r5
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	e00e      	b.n	800c7c4 <_malloc_r+0xa0>
 800c7a6:	6822      	ldr	r2, [r4, #0]
 800c7a8:	1b52      	subs	r2, r2, r5
 800c7aa:	d41e      	bmi.n	800c7ea <_malloc_r+0xc6>
 800c7ac:	2a0b      	cmp	r2, #11
 800c7ae:	d916      	bls.n	800c7de <_malloc_r+0xba>
 800c7b0:	1961      	adds	r1, r4, r5
 800c7b2:	42a3      	cmp	r3, r4
 800c7b4:	6025      	str	r5, [r4, #0]
 800c7b6:	bf18      	it	ne
 800c7b8:	6059      	strne	r1, [r3, #4]
 800c7ba:	6863      	ldr	r3, [r4, #4]
 800c7bc:	bf08      	it	eq
 800c7be:	6031      	streq	r1, [r6, #0]
 800c7c0:	5162      	str	r2, [r4, r5]
 800c7c2:	604b      	str	r3, [r1, #4]
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	f104 060b 	add.w	r6, r4, #11
 800c7ca:	f000 f9ed 	bl	800cba8 <__malloc_unlock>
 800c7ce:	f026 0607 	bic.w	r6, r6, #7
 800c7d2:	1d23      	adds	r3, r4, #4
 800c7d4:	1af2      	subs	r2, r6, r3
 800c7d6:	d0b6      	beq.n	800c746 <_malloc_r+0x22>
 800c7d8:	1b9b      	subs	r3, r3, r6
 800c7da:	50a3      	str	r3, [r4, r2]
 800c7dc:	e7b3      	b.n	800c746 <_malloc_r+0x22>
 800c7de:	6862      	ldr	r2, [r4, #4]
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	bf0c      	ite	eq
 800c7e4:	6032      	streq	r2, [r6, #0]
 800c7e6:	605a      	strne	r2, [r3, #4]
 800c7e8:	e7ec      	b.n	800c7c4 <_malloc_r+0xa0>
 800c7ea:	4623      	mov	r3, r4
 800c7ec:	6864      	ldr	r4, [r4, #4]
 800c7ee:	e7b2      	b.n	800c756 <_malloc_r+0x32>
 800c7f0:	4634      	mov	r4, r6
 800c7f2:	6876      	ldr	r6, [r6, #4]
 800c7f4:	e7b9      	b.n	800c76a <_malloc_r+0x46>
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	603b      	str	r3, [r7, #0]
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	f000 f9d4 	bl	800cba8 <__malloc_unlock>
 800c800:	e7a1      	b.n	800c746 <_malloc_r+0x22>
 800c802:	6025      	str	r5, [r4, #0]
 800c804:	e7de      	b.n	800c7c4 <_malloc_r+0xa0>
 800c806:	bf00      	nop
 800c808:	20002ab8 	.word	0x20002ab8

0800c80c <__ssputs_r>:
 800c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c810:	688e      	ldr	r6, [r1, #8]
 800c812:	429e      	cmp	r6, r3
 800c814:	4682      	mov	sl, r0
 800c816:	460c      	mov	r4, r1
 800c818:	4690      	mov	r8, r2
 800c81a:	461f      	mov	r7, r3
 800c81c:	d838      	bhi.n	800c890 <__ssputs_r+0x84>
 800c81e:	898a      	ldrh	r2, [r1, #12]
 800c820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c824:	d032      	beq.n	800c88c <__ssputs_r+0x80>
 800c826:	6825      	ldr	r5, [r4, #0]
 800c828:	6909      	ldr	r1, [r1, #16]
 800c82a:	eba5 0901 	sub.w	r9, r5, r1
 800c82e:	6965      	ldr	r5, [r4, #20]
 800c830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c838:	3301      	adds	r3, #1
 800c83a:	444b      	add	r3, r9
 800c83c:	106d      	asrs	r5, r5, #1
 800c83e:	429d      	cmp	r5, r3
 800c840:	bf38      	it	cc
 800c842:	461d      	movcc	r5, r3
 800c844:	0553      	lsls	r3, r2, #21
 800c846:	d531      	bpl.n	800c8ac <__ssputs_r+0xa0>
 800c848:	4629      	mov	r1, r5
 800c84a:	f7ff ff6b 	bl	800c724 <_malloc_r>
 800c84e:	4606      	mov	r6, r0
 800c850:	b950      	cbnz	r0, 800c868 <__ssputs_r+0x5c>
 800c852:	230c      	movs	r3, #12
 800c854:	f8ca 3000 	str.w	r3, [sl]
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	f04f 30ff 	mov.w	r0, #4294967295
 800c864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c868:	6921      	ldr	r1, [r4, #16]
 800c86a:	464a      	mov	r2, r9
 800c86c:	f7ff fb46 	bl	800befc <memcpy>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	6126      	str	r6, [r4, #16]
 800c87e:	6165      	str	r5, [r4, #20]
 800c880:	444e      	add	r6, r9
 800c882:	eba5 0509 	sub.w	r5, r5, r9
 800c886:	6026      	str	r6, [r4, #0]
 800c888:	60a5      	str	r5, [r4, #8]
 800c88a:	463e      	mov	r6, r7
 800c88c:	42be      	cmp	r6, r7
 800c88e:	d900      	bls.n	800c892 <__ssputs_r+0x86>
 800c890:	463e      	mov	r6, r7
 800c892:	6820      	ldr	r0, [r4, #0]
 800c894:	4632      	mov	r2, r6
 800c896:	4641      	mov	r1, r8
 800c898:	f000 f966 	bl	800cb68 <memmove>
 800c89c:	68a3      	ldr	r3, [r4, #8]
 800c89e:	1b9b      	subs	r3, r3, r6
 800c8a0:	60a3      	str	r3, [r4, #8]
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	4433      	add	r3, r6
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	e7db      	b.n	800c864 <__ssputs_r+0x58>
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	f000 f981 	bl	800cbb4 <_realloc_r>
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1e1      	bne.n	800c87c <__ssputs_r+0x70>
 800c8b8:	6921      	ldr	r1, [r4, #16]
 800c8ba:	4650      	mov	r0, sl
 800c8bc:	f7ff fec6 	bl	800c64c <_free_r>
 800c8c0:	e7c7      	b.n	800c852 <__ssputs_r+0x46>
	...

0800c8c4 <_svfiprintf_r>:
 800c8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c8:	4698      	mov	r8, r3
 800c8ca:	898b      	ldrh	r3, [r1, #12]
 800c8cc:	061b      	lsls	r3, r3, #24
 800c8ce:	b09d      	sub	sp, #116	; 0x74
 800c8d0:	4607      	mov	r7, r0
 800c8d2:	460d      	mov	r5, r1
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	d50e      	bpl.n	800c8f6 <_svfiprintf_r+0x32>
 800c8d8:	690b      	ldr	r3, [r1, #16]
 800c8da:	b963      	cbnz	r3, 800c8f6 <_svfiprintf_r+0x32>
 800c8dc:	2140      	movs	r1, #64	; 0x40
 800c8de:	f7ff ff21 	bl	800c724 <_malloc_r>
 800c8e2:	6028      	str	r0, [r5, #0]
 800c8e4:	6128      	str	r0, [r5, #16]
 800c8e6:	b920      	cbnz	r0, 800c8f2 <_svfiprintf_r+0x2e>
 800c8e8:	230c      	movs	r3, #12
 800c8ea:	603b      	str	r3, [r7, #0]
 800c8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f0:	e0d1      	b.n	800ca96 <_svfiprintf_r+0x1d2>
 800c8f2:	2340      	movs	r3, #64	; 0x40
 800c8f4:	616b      	str	r3, [r5, #20]
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8fa:	2320      	movs	r3, #32
 800c8fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c900:	f8cd 800c 	str.w	r8, [sp, #12]
 800c904:	2330      	movs	r3, #48	; 0x30
 800c906:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cab0 <_svfiprintf_r+0x1ec>
 800c90a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c90e:	f04f 0901 	mov.w	r9, #1
 800c912:	4623      	mov	r3, r4
 800c914:	469a      	mov	sl, r3
 800c916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c91a:	b10a      	cbz	r2, 800c920 <_svfiprintf_r+0x5c>
 800c91c:	2a25      	cmp	r2, #37	; 0x25
 800c91e:	d1f9      	bne.n	800c914 <_svfiprintf_r+0x50>
 800c920:	ebba 0b04 	subs.w	fp, sl, r4
 800c924:	d00b      	beq.n	800c93e <_svfiprintf_r+0x7a>
 800c926:	465b      	mov	r3, fp
 800c928:	4622      	mov	r2, r4
 800c92a:	4629      	mov	r1, r5
 800c92c:	4638      	mov	r0, r7
 800c92e:	f7ff ff6d 	bl	800c80c <__ssputs_r>
 800c932:	3001      	adds	r0, #1
 800c934:	f000 80aa 	beq.w	800ca8c <_svfiprintf_r+0x1c8>
 800c938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c93a:	445a      	add	r2, fp
 800c93c:	9209      	str	r2, [sp, #36]	; 0x24
 800c93e:	f89a 3000 	ldrb.w	r3, [sl]
 800c942:	2b00      	cmp	r3, #0
 800c944:	f000 80a2 	beq.w	800ca8c <_svfiprintf_r+0x1c8>
 800c948:	2300      	movs	r3, #0
 800c94a:	f04f 32ff 	mov.w	r2, #4294967295
 800c94e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c952:	f10a 0a01 	add.w	sl, sl, #1
 800c956:	9304      	str	r3, [sp, #16]
 800c958:	9307      	str	r3, [sp, #28]
 800c95a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c95e:	931a      	str	r3, [sp, #104]	; 0x68
 800c960:	4654      	mov	r4, sl
 800c962:	2205      	movs	r2, #5
 800c964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c968:	4851      	ldr	r0, [pc, #324]	; (800cab0 <_svfiprintf_r+0x1ec>)
 800c96a:	f7f3 fc39 	bl	80001e0 <memchr>
 800c96e:	9a04      	ldr	r2, [sp, #16]
 800c970:	b9d8      	cbnz	r0, 800c9aa <_svfiprintf_r+0xe6>
 800c972:	06d0      	lsls	r0, r2, #27
 800c974:	bf44      	itt	mi
 800c976:	2320      	movmi	r3, #32
 800c978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c97c:	0711      	lsls	r1, r2, #28
 800c97e:	bf44      	itt	mi
 800c980:	232b      	movmi	r3, #43	; 0x2b
 800c982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c986:	f89a 3000 	ldrb.w	r3, [sl]
 800c98a:	2b2a      	cmp	r3, #42	; 0x2a
 800c98c:	d015      	beq.n	800c9ba <_svfiprintf_r+0xf6>
 800c98e:	9a07      	ldr	r2, [sp, #28]
 800c990:	4654      	mov	r4, sl
 800c992:	2000      	movs	r0, #0
 800c994:	f04f 0c0a 	mov.w	ip, #10
 800c998:	4621      	mov	r1, r4
 800c99a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c99e:	3b30      	subs	r3, #48	; 0x30
 800c9a0:	2b09      	cmp	r3, #9
 800c9a2:	d94e      	bls.n	800ca42 <_svfiprintf_r+0x17e>
 800c9a4:	b1b0      	cbz	r0, 800c9d4 <_svfiprintf_r+0x110>
 800c9a6:	9207      	str	r2, [sp, #28]
 800c9a8:	e014      	b.n	800c9d4 <_svfiprintf_r+0x110>
 800c9aa:	eba0 0308 	sub.w	r3, r0, r8
 800c9ae:	fa09 f303 	lsl.w	r3, r9, r3
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	9304      	str	r3, [sp, #16]
 800c9b6:	46a2      	mov	sl, r4
 800c9b8:	e7d2      	b.n	800c960 <_svfiprintf_r+0x9c>
 800c9ba:	9b03      	ldr	r3, [sp, #12]
 800c9bc:	1d19      	adds	r1, r3, #4
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	9103      	str	r1, [sp, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	bfbb      	ittet	lt
 800c9c6:	425b      	neglt	r3, r3
 800c9c8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9cc:	9307      	strge	r3, [sp, #28]
 800c9ce:	9307      	strlt	r3, [sp, #28]
 800c9d0:	bfb8      	it	lt
 800c9d2:	9204      	strlt	r2, [sp, #16]
 800c9d4:	7823      	ldrb	r3, [r4, #0]
 800c9d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9d8:	d10c      	bne.n	800c9f4 <_svfiprintf_r+0x130>
 800c9da:	7863      	ldrb	r3, [r4, #1]
 800c9dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c9de:	d135      	bne.n	800ca4c <_svfiprintf_r+0x188>
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	1d1a      	adds	r2, r3, #4
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	9203      	str	r2, [sp, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	bfb8      	it	lt
 800c9ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9f0:	3402      	adds	r4, #2
 800c9f2:	9305      	str	r3, [sp, #20]
 800c9f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cac0 <_svfiprintf_r+0x1fc>
 800c9f8:	7821      	ldrb	r1, [r4, #0]
 800c9fa:	2203      	movs	r2, #3
 800c9fc:	4650      	mov	r0, sl
 800c9fe:	f7f3 fbef 	bl	80001e0 <memchr>
 800ca02:	b140      	cbz	r0, 800ca16 <_svfiprintf_r+0x152>
 800ca04:	2340      	movs	r3, #64	; 0x40
 800ca06:	eba0 000a 	sub.w	r0, r0, sl
 800ca0a:	fa03 f000 	lsl.w	r0, r3, r0
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	4303      	orrs	r3, r0
 800ca12:	3401      	adds	r4, #1
 800ca14:	9304      	str	r3, [sp, #16]
 800ca16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca1a:	4826      	ldr	r0, [pc, #152]	; (800cab4 <_svfiprintf_r+0x1f0>)
 800ca1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca20:	2206      	movs	r2, #6
 800ca22:	f7f3 fbdd 	bl	80001e0 <memchr>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d038      	beq.n	800ca9c <_svfiprintf_r+0x1d8>
 800ca2a:	4b23      	ldr	r3, [pc, #140]	; (800cab8 <_svfiprintf_r+0x1f4>)
 800ca2c:	bb1b      	cbnz	r3, 800ca76 <_svfiprintf_r+0x1b2>
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	3307      	adds	r3, #7
 800ca32:	f023 0307 	bic.w	r3, r3, #7
 800ca36:	3308      	adds	r3, #8
 800ca38:	9303      	str	r3, [sp, #12]
 800ca3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca3c:	4433      	add	r3, r6
 800ca3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca40:	e767      	b.n	800c912 <_svfiprintf_r+0x4e>
 800ca42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca46:	460c      	mov	r4, r1
 800ca48:	2001      	movs	r0, #1
 800ca4a:	e7a5      	b.n	800c998 <_svfiprintf_r+0xd4>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	3401      	adds	r4, #1
 800ca50:	9305      	str	r3, [sp, #20]
 800ca52:	4619      	mov	r1, r3
 800ca54:	f04f 0c0a 	mov.w	ip, #10
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca5e:	3a30      	subs	r2, #48	; 0x30
 800ca60:	2a09      	cmp	r2, #9
 800ca62:	d903      	bls.n	800ca6c <_svfiprintf_r+0x1a8>
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d0c5      	beq.n	800c9f4 <_svfiprintf_r+0x130>
 800ca68:	9105      	str	r1, [sp, #20]
 800ca6a:	e7c3      	b.n	800c9f4 <_svfiprintf_r+0x130>
 800ca6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca70:	4604      	mov	r4, r0
 800ca72:	2301      	movs	r3, #1
 800ca74:	e7f0      	b.n	800ca58 <_svfiprintf_r+0x194>
 800ca76:	ab03      	add	r3, sp, #12
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	462a      	mov	r2, r5
 800ca7c:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <_svfiprintf_r+0x1f8>)
 800ca7e:	a904      	add	r1, sp, #16
 800ca80:	4638      	mov	r0, r7
 800ca82:	f7fd ffc9 	bl	800aa18 <_printf_float>
 800ca86:	1c42      	adds	r2, r0, #1
 800ca88:	4606      	mov	r6, r0
 800ca8a:	d1d6      	bne.n	800ca3a <_svfiprintf_r+0x176>
 800ca8c:	89ab      	ldrh	r3, [r5, #12]
 800ca8e:	065b      	lsls	r3, r3, #25
 800ca90:	f53f af2c 	bmi.w	800c8ec <_svfiprintf_r+0x28>
 800ca94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca96:	b01d      	add	sp, #116	; 0x74
 800ca98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9c:	ab03      	add	r3, sp, #12
 800ca9e:	9300      	str	r3, [sp, #0]
 800caa0:	462a      	mov	r2, r5
 800caa2:	4b06      	ldr	r3, [pc, #24]	; (800cabc <_svfiprintf_r+0x1f8>)
 800caa4:	a904      	add	r1, sp, #16
 800caa6:	4638      	mov	r0, r7
 800caa8:	f7fe fa5a 	bl	800af60 <_printf_i>
 800caac:	e7eb      	b.n	800ca86 <_svfiprintf_r+0x1c2>
 800caae:	bf00      	nop
 800cab0:	0800dec4 	.word	0x0800dec4
 800cab4:	0800dece 	.word	0x0800dece
 800cab8:	0800aa19 	.word	0x0800aa19
 800cabc:	0800c80d 	.word	0x0800c80d
 800cac0:	0800deca 	.word	0x0800deca

0800cac4 <_sbrk_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4d06      	ldr	r5, [pc, #24]	; (800cae0 <_sbrk_r+0x1c>)
 800cac8:	2300      	movs	r3, #0
 800caca:	4604      	mov	r4, r0
 800cacc:	4608      	mov	r0, r1
 800cace:	602b      	str	r3, [r5, #0]
 800cad0:	f7f6 fa5e 	bl	8002f90 <_sbrk>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d102      	bne.n	800cade <_sbrk_r+0x1a>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	b103      	cbz	r3, 800cade <_sbrk_r+0x1a>
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	20002ac0 	.word	0x20002ac0

0800cae4 <__assert_func>:
 800cae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cae6:	4614      	mov	r4, r2
 800cae8:	461a      	mov	r2, r3
 800caea:	4b09      	ldr	r3, [pc, #36]	; (800cb10 <__assert_func+0x2c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4605      	mov	r5, r0
 800caf0:	68d8      	ldr	r0, [r3, #12]
 800caf2:	b14c      	cbz	r4, 800cb08 <__assert_func+0x24>
 800caf4:	4b07      	ldr	r3, [pc, #28]	; (800cb14 <__assert_func+0x30>)
 800caf6:	9100      	str	r1, [sp, #0]
 800caf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cafc:	4906      	ldr	r1, [pc, #24]	; (800cb18 <__assert_func+0x34>)
 800cafe:	462b      	mov	r3, r5
 800cb00:	f000 f80e 	bl	800cb20 <fiprintf>
 800cb04:	f000 faac 	bl	800d060 <abort>
 800cb08:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <__assert_func+0x38>)
 800cb0a:	461c      	mov	r4, r3
 800cb0c:	e7f3      	b.n	800caf6 <__assert_func+0x12>
 800cb0e:	bf00      	nop
 800cb10:	20000024 	.word	0x20000024
 800cb14:	0800ded5 	.word	0x0800ded5
 800cb18:	0800dee2 	.word	0x0800dee2
 800cb1c:	0800df10 	.word	0x0800df10

0800cb20 <fiprintf>:
 800cb20:	b40e      	push	{r1, r2, r3}
 800cb22:	b503      	push	{r0, r1, lr}
 800cb24:	4601      	mov	r1, r0
 800cb26:	ab03      	add	r3, sp, #12
 800cb28:	4805      	ldr	r0, [pc, #20]	; (800cb40 <fiprintf+0x20>)
 800cb2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb2e:	6800      	ldr	r0, [r0, #0]
 800cb30:	9301      	str	r3, [sp, #4]
 800cb32:	f000 f897 	bl	800cc64 <_vfiprintf_r>
 800cb36:	b002      	add	sp, #8
 800cb38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb3c:	b003      	add	sp, #12
 800cb3e:	4770      	bx	lr
 800cb40:	20000024 	.word	0x20000024

0800cb44 <__ascii_mbtowc>:
 800cb44:	b082      	sub	sp, #8
 800cb46:	b901      	cbnz	r1, 800cb4a <__ascii_mbtowc+0x6>
 800cb48:	a901      	add	r1, sp, #4
 800cb4a:	b142      	cbz	r2, 800cb5e <__ascii_mbtowc+0x1a>
 800cb4c:	b14b      	cbz	r3, 800cb62 <__ascii_mbtowc+0x1e>
 800cb4e:	7813      	ldrb	r3, [r2, #0]
 800cb50:	600b      	str	r3, [r1, #0]
 800cb52:	7812      	ldrb	r2, [r2, #0]
 800cb54:	1e10      	subs	r0, r2, #0
 800cb56:	bf18      	it	ne
 800cb58:	2001      	movne	r0, #1
 800cb5a:	b002      	add	sp, #8
 800cb5c:	4770      	bx	lr
 800cb5e:	4610      	mov	r0, r2
 800cb60:	e7fb      	b.n	800cb5a <__ascii_mbtowc+0x16>
 800cb62:	f06f 0001 	mvn.w	r0, #1
 800cb66:	e7f8      	b.n	800cb5a <__ascii_mbtowc+0x16>

0800cb68 <memmove>:
 800cb68:	4288      	cmp	r0, r1
 800cb6a:	b510      	push	{r4, lr}
 800cb6c:	eb01 0402 	add.w	r4, r1, r2
 800cb70:	d902      	bls.n	800cb78 <memmove+0x10>
 800cb72:	4284      	cmp	r4, r0
 800cb74:	4623      	mov	r3, r4
 800cb76:	d807      	bhi.n	800cb88 <memmove+0x20>
 800cb78:	1e43      	subs	r3, r0, #1
 800cb7a:	42a1      	cmp	r1, r4
 800cb7c:	d008      	beq.n	800cb90 <memmove+0x28>
 800cb7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb86:	e7f8      	b.n	800cb7a <memmove+0x12>
 800cb88:	4402      	add	r2, r0
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	428a      	cmp	r2, r1
 800cb8e:	d100      	bne.n	800cb92 <memmove+0x2a>
 800cb90:	bd10      	pop	{r4, pc}
 800cb92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb9a:	e7f7      	b.n	800cb8c <memmove+0x24>

0800cb9c <__malloc_lock>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	; (800cba4 <__malloc_lock+0x8>)
 800cb9e:	f000 bc1f 	b.w	800d3e0 <__retarget_lock_acquire_recursive>
 800cba2:	bf00      	nop
 800cba4:	20002ac4 	.word	0x20002ac4

0800cba8 <__malloc_unlock>:
 800cba8:	4801      	ldr	r0, [pc, #4]	; (800cbb0 <__malloc_unlock+0x8>)
 800cbaa:	f000 bc1a 	b.w	800d3e2 <__retarget_lock_release_recursive>
 800cbae:	bf00      	nop
 800cbb0:	20002ac4 	.word	0x20002ac4

0800cbb4 <_realloc_r>:
 800cbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb8:	4680      	mov	r8, r0
 800cbba:	4614      	mov	r4, r2
 800cbbc:	460e      	mov	r6, r1
 800cbbe:	b921      	cbnz	r1, 800cbca <_realloc_r+0x16>
 800cbc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	f7ff bdad 	b.w	800c724 <_malloc_r>
 800cbca:	b92a      	cbnz	r2, 800cbd8 <_realloc_r+0x24>
 800cbcc:	f7ff fd3e 	bl	800c64c <_free_r>
 800cbd0:	4625      	mov	r5, r4
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd8:	f000 fc6a 	bl	800d4b0 <_malloc_usable_size_r>
 800cbdc:	4284      	cmp	r4, r0
 800cbde:	4607      	mov	r7, r0
 800cbe0:	d802      	bhi.n	800cbe8 <_realloc_r+0x34>
 800cbe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbe6:	d812      	bhi.n	800cc0e <_realloc_r+0x5a>
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4640      	mov	r0, r8
 800cbec:	f7ff fd9a 	bl	800c724 <_malloc_r>
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0ed      	beq.n	800cbd2 <_realloc_r+0x1e>
 800cbf6:	42bc      	cmp	r4, r7
 800cbf8:	4622      	mov	r2, r4
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	bf28      	it	cs
 800cbfe:	463a      	movcs	r2, r7
 800cc00:	f7ff f97c 	bl	800befc <memcpy>
 800cc04:	4631      	mov	r1, r6
 800cc06:	4640      	mov	r0, r8
 800cc08:	f7ff fd20 	bl	800c64c <_free_r>
 800cc0c:	e7e1      	b.n	800cbd2 <_realloc_r+0x1e>
 800cc0e:	4635      	mov	r5, r6
 800cc10:	e7df      	b.n	800cbd2 <_realloc_r+0x1e>

0800cc12 <__sfputc_r>:
 800cc12:	6893      	ldr	r3, [r2, #8]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	b410      	push	{r4}
 800cc1a:	6093      	str	r3, [r2, #8]
 800cc1c:	da08      	bge.n	800cc30 <__sfputc_r+0x1e>
 800cc1e:	6994      	ldr	r4, [r2, #24]
 800cc20:	42a3      	cmp	r3, r4
 800cc22:	db01      	blt.n	800cc28 <__sfputc_r+0x16>
 800cc24:	290a      	cmp	r1, #10
 800cc26:	d103      	bne.n	800cc30 <__sfputc_r+0x1e>
 800cc28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc2c:	f000 b94a 	b.w	800cec4 <__swbuf_r>
 800cc30:	6813      	ldr	r3, [r2, #0]
 800cc32:	1c58      	adds	r0, r3, #1
 800cc34:	6010      	str	r0, [r2, #0]
 800cc36:	7019      	strb	r1, [r3, #0]
 800cc38:	4608      	mov	r0, r1
 800cc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <__sfputs_r>:
 800cc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc42:	4606      	mov	r6, r0
 800cc44:	460f      	mov	r7, r1
 800cc46:	4614      	mov	r4, r2
 800cc48:	18d5      	adds	r5, r2, r3
 800cc4a:	42ac      	cmp	r4, r5
 800cc4c:	d101      	bne.n	800cc52 <__sfputs_r+0x12>
 800cc4e:	2000      	movs	r0, #0
 800cc50:	e007      	b.n	800cc62 <__sfputs_r+0x22>
 800cc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc56:	463a      	mov	r2, r7
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f7ff ffda 	bl	800cc12 <__sfputc_r>
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	d1f3      	bne.n	800cc4a <__sfputs_r+0xa>
 800cc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc64 <_vfiprintf_r>:
 800cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	460d      	mov	r5, r1
 800cc6a:	b09d      	sub	sp, #116	; 0x74
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	4698      	mov	r8, r3
 800cc70:	4606      	mov	r6, r0
 800cc72:	b118      	cbz	r0, 800cc7c <_vfiprintf_r+0x18>
 800cc74:	6983      	ldr	r3, [r0, #24]
 800cc76:	b90b      	cbnz	r3, 800cc7c <_vfiprintf_r+0x18>
 800cc78:	f000 fb14 	bl	800d2a4 <__sinit>
 800cc7c:	4b89      	ldr	r3, [pc, #548]	; (800cea4 <_vfiprintf_r+0x240>)
 800cc7e:	429d      	cmp	r5, r3
 800cc80:	d11b      	bne.n	800ccba <_vfiprintf_r+0x56>
 800cc82:	6875      	ldr	r5, [r6, #4]
 800cc84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc86:	07d9      	lsls	r1, r3, #31
 800cc88:	d405      	bmi.n	800cc96 <_vfiprintf_r+0x32>
 800cc8a:	89ab      	ldrh	r3, [r5, #12]
 800cc8c:	059a      	lsls	r2, r3, #22
 800cc8e:	d402      	bmi.n	800cc96 <_vfiprintf_r+0x32>
 800cc90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc92:	f000 fba5 	bl	800d3e0 <__retarget_lock_acquire_recursive>
 800cc96:	89ab      	ldrh	r3, [r5, #12]
 800cc98:	071b      	lsls	r3, r3, #28
 800cc9a:	d501      	bpl.n	800cca0 <_vfiprintf_r+0x3c>
 800cc9c:	692b      	ldr	r3, [r5, #16]
 800cc9e:	b9eb      	cbnz	r3, 800ccdc <_vfiprintf_r+0x78>
 800cca0:	4629      	mov	r1, r5
 800cca2:	4630      	mov	r0, r6
 800cca4:	f000 f96e 	bl	800cf84 <__swsetup_r>
 800cca8:	b1c0      	cbz	r0, 800ccdc <_vfiprintf_r+0x78>
 800ccaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccac:	07dc      	lsls	r4, r3, #31
 800ccae:	d50e      	bpl.n	800ccce <_vfiprintf_r+0x6a>
 800ccb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb4:	b01d      	add	sp, #116	; 0x74
 800ccb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccba:	4b7b      	ldr	r3, [pc, #492]	; (800cea8 <_vfiprintf_r+0x244>)
 800ccbc:	429d      	cmp	r5, r3
 800ccbe:	d101      	bne.n	800ccc4 <_vfiprintf_r+0x60>
 800ccc0:	68b5      	ldr	r5, [r6, #8]
 800ccc2:	e7df      	b.n	800cc84 <_vfiprintf_r+0x20>
 800ccc4:	4b79      	ldr	r3, [pc, #484]	; (800ceac <_vfiprintf_r+0x248>)
 800ccc6:	429d      	cmp	r5, r3
 800ccc8:	bf08      	it	eq
 800ccca:	68f5      	ldreq	r5, [r6, #12]
 800cccc:	e7da      	b.n	800cc84 <_vfiprintf_r+0x20>
 800ccce:	89ab      	ldrh	r3, [r5, #12]
 800ccd0:	0598      	lsls	r0, r3, #22
 800ccd2:	d4ed      	bmi.n	800ccb0 <_vfiprintf_r+0x4c>
 800ccd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd6:	f000 fb84 	bl	800d3e2 <__retarget_lock_release_recursive>
 800ccda:	e7e9      	b.n	800ccb0 <_vfiprintf_r+0x4c>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9309      	str	r3, [sp, #36]	; 0x24
 800cce0:	2320      	movs	r3, #32
 800cce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cce6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccea:	2330      	movs	r3, #48	; 0x30
 800ccec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ceb0 <_vfiprintf_r+0x24c>
 800ccf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccf4:	f04f 0901 	mov.w	r9, #1
 800ccf8:	4623      	mov	r3, r4
 800ccfa:	469a      	mov	sl, r3
 800ccfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd00:	b10a      	cbz	r2, 800cd06 <_vfiprintf_r+0xa2>
 800cd02:	2a25      	cmp	r2, #37	; 0x25
 800cd04:	d1f9      	bne.n	800ccfa <_vfiprintf_r+0x96>
 800cd06:	ebba 0b04 	subs.w	fp, sl, r4
 800cd0a:	d00b      	beq.n	800cd24 <_vfiprintf_r+0xc0>
 800cd0c:	465b      	mov	r3, fp
 800cd0e:	4622      	mov	r2, r4
 800cd10:	4629      	mov	r1, r5
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7ff ff94 	bl	800cc40 <__sfputs_r>
 800cd18:	3001      	adds	r0, #1
 800cd1a:	f000 80aa 	beq.w	800ce72 <_vfiprintf_r+0x20e>
 800cd1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd20:	445a      	add	r2, fp
 800cd22:	9209      	str	r2, [sp, #36]	; 0x24
 800cd24:	f89a 3000 	ldrb.w	r3, [sl]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 80a2 	beq.w	800ce72 <_vfiprintf_r+0x20e>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f04f 32ff 	mov.w	r2, #4294967295
 800cd34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd38:	f10a 0a01 	add.w	sl, sl, #1
 800cd3c:	9304      	str	r3, [sp, #16]
 800cd3e:	9307      	str	r3, [sp, #28]
 800cd40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd44:	931a      	str	r3, [sp, #104]	; 0x68
 800cd46:	4654      	mov	r4, sl
 800cd48:	2205      	movs	r2, #5
 800cd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4e:	4858      	ldr	r0, [pc, #352]	; (800ceb0 <_vfiprintf_r+0x24c>)
 800cd50:	f7f3 fa46 	bl	80001e0 <memchr>
 800cd54:	9a04      	ldr	r2, [sp, #16]
 800cd56:	b9d8      	cbnz	r0, 800cd90 <_vfiprintf_r+0x12c>
 800cd58:	06d1      	lsls	r1, r2, #27
 800cd5a:	bf44      	itt	mi
 800cd5c:	2320      	movmi	r3, #32
 800cd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd62:	0713      	lsls	r3, r2, #28
 800cd64:	bf44      	itt	mi
 800cd66:	232b      	movmi	r3, #43	; 0x2b
 800cd68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd70:	2b2a      	cmp	r3, #42	; 0x2a
 800cd72:	d015      	beq.n	800cda0 <_vfiprintf_r+0x13c>
 800cd74:	9a07      	ldr	r2, [sp, #28]
 800cd76:	4654      	mov	r4, sl
 800cd78:	2000      	movs	r0, #0
 800cd7a:	f04f 0c0a 	mov.w	ip, #10
 800cd7e:	4621      	mov	r1, r4
 800cd80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd84:	3b30      	subs	r3, #48	; 0x30
 800cd86:	2b09      	cmp	r3, #9
 800cd88:	d94e      	bls.n	800ce28 <_vfiprintf_r+0x1c4>
 800cd8a:	b1b0      	cbz	r0, 800cdba <_vfiprintf_r+0x156>
 800cd8c:	9207      	str	r2, [sp, #28]
 800cd8e:	e014      	b.n	800cdba <_vfiprintf_r+0x156>
 800cd90:	eba0 0308 	sub.w	r3, r0, r8
 800cd94:	fa09 f303 	lsl.w	r3, r9, r3
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	46a2      	mov	sl, r4
 800cd9e:	e7d2      	b.n	800cd46 <_vfiprintf_r+0xe2>
 800cda0:	9b03      	ldr	r3, [sp, #12]
 800cda2:	1d19      	adds	r1, r3, #4
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	9103      	str	r1, [sp, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bfbb      	ittet	lt
 800cdac:	425b      	neglt	r3, r3
 800cdae:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb2:	9307      	strge	r3, [sp, #28]
 800cdb4:	9307      	strlt	r3, [sp, #28]
 800cdb6:	bfb8      	it	lt
 800cdb8:	9204      	strlt	r2, [sp, #16]
 800cdba:	7823      	ldrb	r3, [r4, #0]
 800cdbc:	2b2e      	cmp	r3, #46	; 0x2e
 800cdbe:	d10c      	bne.n	800cdda <_vfiprintf_r+0x176>
 800cdc0:	7863      	ldrb	r3, [r4, #1]
 800cdc2:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc4:	d135      	bne.n	800ce32 <_vfiprintf_r+0x1ce>
 800cdc6:	9b03      	ldr	r3, [sp, #12]
 800cdc8:	1d1a      	adds	r2, r3, #4
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	9203      	str	r2, [sp, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	bfb8      	it	lt
 800cdd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdd6:	3402      	adds	r4, #2
 800cdd8:	9305      	str	r3, [sp, #20]
 800cdda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cec0 <_vfiprintf_r+0x25c>
 800cdde:	7821      	ldrb	r1, [r4, #0]
 800cde0:	2203      	movs	r2, #3
 800cde2:	4650      	mov	r0, sl
 800cde4:	f7f3 f9fc 	bl	80001e0 <memchr>
 800cde8:	b140      	cbz	r0, 800cdfc <_vfiprintf_r+0x198>
 800cdea:	2340      	movs	r3, #64	; 0x40
 800cdec:	eba0 000a 	sub.w	r0, r0, sl
 800cdf0:	fa03 f000 	lsl.w	r0, r3, r0
 800cdf4:	9b04      	ldr	r3, [sp, #16]
 800cdf6:	4303      	orrs	r3, r0
 800cdf8:	3401      	adds	r4, #1
 800cdfa:	9304      	str	r3, [sp, #16]
 800cdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce00:	482c      	ldr	r0, [pc, #176]	; (800ceb4 <_vfiprintf_r+0x250>)
 800ce02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce06:	2206      	movs	r2, #6
 800ce08:	f7f3 f9ea 	bl	80001e0 <memchr>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d03f      	beq.n	800ce90 <_vfiprintf_r+0x22c>
 800ce10:	4b29      	ldr	r3, [pc, #164]	; (800ceb8 <_vfiprintf_r+0x254>)
 800ce12:	bb1b      	cbnz	r3, 800ce5c <_vfiprintf_r+0x1f8>
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	3307      	adds	r3, #7
 800ce18:	f023 0307 	bic.w	r3, r3, #7
 800ce1c:	3308      	adds	r3, #8
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce22:	443b      	add	r3, r7
 800ce24:	9309      	str	r3, [sp, #36]	; 0x24
 800ce26:	e767      	b.n	800ccf8 <_vfiprintf_r+0x94>
 800ce28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e7a5      	b.n	800cd7e <_vfiprintf_r+0x11a>
 800ce32:	2300      	movs	r3, #0
 800ce34:	3401      	adds	r4, #1
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f04f 0c0a 	mov.w	ip, #10
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce44:	3a30      	subs	r2, #48	; 0x30
 800ce46:	2a09      	cmp	r2, #9
 800ce48:	d903      	bls.n	800ce52 <_vfiprintf_r+0x1ee>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d0c5      	beq.n	800cdda <_vfiprintf_r+0x176>
 800ce4e:	9105      	str	r1, [sp, #20]
 800ce50:	e7c3      	b.n	800cdda <_vfiprintf_r+0x176>
 800ce52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce56:	4604      	mov	r4, r0
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e7f0      	b.n	800ce3e <_vfiprintf_r+0x1da>
 800ce5c:	ab03      	add	r3, sp, #12
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	462a      	mov	r2, r5
 800ce62:	4b16      	ldr	r3, [pc, #88]	; (800cebc <_vfiprintf_r+0x258>)
 800ce64:	a904      	add	r1, sp, #16
 800ce66:	4630      	mov	r0, r6
 800ce68:	f7fd fdd6 	bl	800aa18 <_printf_float>
 800ce6c:	4607      	mov	r7, r0
 800ce6e:	1c78      	adds	r0, r7, #1
 800ce70:	d1d6      	bne.n	800ce20 <_vfiprintf_r+0x1bc>
 800ce72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce74:	07d9      	lsls	r1, r3, #31
 800ce76:	d405      	bmi.n	800ce84 <_vfiprintf_r+0x220>
 800ce78:	89ab      	ldrh	r3, [r5, #12]
 800ce7a:	059a      	lsls	r2, r3, #22
 800ce7c:	d402      	bmi.n	800ce84 <_vfiprintf_r+0x220>
 800ce7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce80:	f000 faaf 	bl	800d3e2 <__retarget_lock_release_recursive>
 800ce84:	89ab      	ldrh	r3, [r5, #12]
 800ce86:	065b      	lsls	r3, r3, #25
 800ce88:	f53f af12 	bmi.w	800ccb0 <_vfiprintf_r+0x4c>
 800ce8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce8e:	e711      	b.n	800ccb4 <_vfiprintf_r+0x50>
 800ce90:	ab03      	add	r3, sp, #12
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	462a      	mov	r2, r5
 800ce96:	4b09      	ldr	r3, [pc, #36]	; (800cebc <_vfiprintf_r+0x258>)
 800ce98:	a904      	add	r1, sp, #16
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f7fe f860 	bl	800af60 <_printf_i>
 800cea0:	e7e4      	b.n	800ce6c <_vfiprintf_r+0x208>
 800cea2:	bf00      	nop
 800cea4:	0800e03c 	.word	0x0800e03c
 800cea8:	0800e05c 	.word	0x0800e05c
 800ceac:	0800e01c 	.word	0x0800e01c
 800ceb0:	0800dec4 	.word	0x0800dec4
 800ceb4:	0800dece 	.word	0x0800dece
 800ceb8:	0800aa19 	.word	0x0800aa19
 800cebc:	0800cc41 	.word	0x0800cc41
 800cec0:	0800deca 	.word	0x0800deca

0800cec4 <__swbuf_r>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	460e      	mov	r6, r1
 800cec8:	4614      	mov	r4, r2
 800ceca:	4605      	mov	r5, r0
 800cecc:	b118      	cbz	r0, 800ced6 <__swbuf_r+0x12>
 800cece:	6983      	ldr	r3, [r0, #24]
 800ced0:	b90b      	cbnz	r3, 800ced6 <__swbuf_r+0x12>
 800ced2:	f000 f9e7 	bl	800d2a4 <__sinit>
 800ced6:	4b21      	ldr	r3, [pc, #132]	; (800cf5c <__swbuf_r+0x98>)
 800ced8:	429c      	cmp	r4, r3
 800ceda:	d12b      	bne.n	800cf34 <__swbuf_r+0x70>
 800cedc:	686c      	ldr	r4, [r5, #4]
 800cede:	69a3      	ldr	r3, [r4, #24]
 800cee0:	60a3      	str	r3, [r4, #8]
 800cee2:	89a3      	ldrh	r3, [r4, #12]
 800cee4:	071a      	lsls	r2, r3, #28
 800cee6:	d52f      	bpl.n	800cf48 <__swbuf_r+0x84>
 800cee8:	6923      	ldr	r3, [r4, #16]
 800ceea:	b36b      	cbz	r3, 800cf48 <__swbuf_r+0x84>
 800ceec:	6923      	ldr	r3, [r4, #16]
 800ceee:	6820      	ldr	r0, [r4, #0]
 800cef0:	1ac0      	subs	r0, r0, r3
 800cef2:	6963      	ldr	r3, [r4, #20]
 800cef4:	b2f6      	uxtb	r6, r6
 800cef6:	4283      	cmp	r3, r0
 800cef8:	4637      	mov	r7, r6
 800cefa:	dc04      	bgt.n	800cf06 <__swbuf_r+0x42>
 800cefc:	4621      	mov	r1, r4
 800cefe:	4628      	mov	r0, r5
 800cf00:	f000 f93c 	bl	800d17c <_fflush_r>
 800cf04:	bb30      	cbnz	r0, 800cf54 <__swbuf_r+0x90>
 800cf06:	68a3      	ldr	r3, [r4, #8]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	60a3      	str	r3, [r4, #8]
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	1c5a      	adds	r2, r3, #1
 800cf10:	6022      	str	r2, [r4, #0]
 800cf12:	701e      	strb	r6, [r3, #0]
 800cf14:	6963      	ldr	r3, [r4, #20]
 800cf16:	3001      	adds	r0, #1
 800cf18:	4283      	cmp	r3, r0
 800cf1a:	d004      	beq.n	800cf26 <__swbuf_r+0x62>
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	07db      	lsls	r3, r3, #31
 800cf20:	d506      	bpl.n	800cf30 <__swbuf_r+0x6c>
 800cf22:	2e0a      	cmp	r6, #10
 800cf24:	d104      	bne.n	800cf30 <__swbuf_r+0x6c>
 800cf26:	4621      	mov	r1, r4
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f000 f927 	bl	800d17c <_fflush_r>
 800cf2e:	b988      	cbnz	r0, 800cf54 <__swbuf_r+0x90>
 800cf30:	4638      	mov	r0, r7
 800cf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf34:	4b0a      	ldr	r3, [pc, #40]	; (800cf60 <__swbuf_r+0x9c>)
 800cf36:	429c      	cmp	r4, r3
 800cf38:	d101      	bne.n	800cf3e <__swbuf_r+0x7a>
 800cf3a:	68ac      	ldr	r4, [r5, #8]
 800cf3c:	e7cf      	b.n	800cede <__swbuf_r+0x1a>
 800cf3e:	4b09      	ldr	r3, [pc, #36]	; (800cf64 <__swbuf_r+0xa0>)
 800cf40:	429c      	cmp	r4, r3
 800cf42:	bf08      	it	eq
 800cf44:	68ec      	ldreq	r4, [r5, #12]
 800cf46:	e7ca      	b.n	800cede <__swbuf_r+0x1a>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f000 f81a 	bl	800cf84 <__swsetup_r>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d0cb      	beq.n	800ceec <__swbuf_r+0x28>
 800cf54:	f04f 37ff 	mov.w	r7, #4294967295
 800cf58:	e7ea      	b.n	800cf30 <__swbuf_r+0x6c>
 800cf5a:	bf00      	nop
 800cf5c:	0800e03c 	.word	0x0800e03c
 800cf60:	0800e05c 	.word	0x0800e05c
 800cf64:	0800e01c 	.word	0x0800e01c

0800cf68 <__ascii_wctomb>:
 800cf68:	b149      	cbz	r1, 800cf7e <__ascii_wctomb+0x16>
 800cf6a:	2aff      	cmp	r2, #255	; 0xff
 800cf6c:	bf85      	ittet	hi
 800cf6e:	238a      	movhi	r3, #138	; 0x8a
 800cf70:	6003      	strhi	r3, [r0, #0]
 800cf72:	700a      	strbls	r2, [r1, #0]
 800cf74:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf78:	bf98      	it	ls
 800cf7a:	2001      	movls	r0, #1
 800cf7c:	4770      	bx	lr
 800cf7e:	4608      	mov	r0, r1
 800cf80:	4770      	bx	lr
	...

0800cf84 <__swsetup_r>:
 800cf84:	4b32      	ldr	r3, [pc, #200]	; (800d050 <__swsetup_r+0xcc>)
 800cf86:	b570      	push	{r4, r5, r6, lr}
 800cf88:	681d      	ldr	r5, [r3, #0]
 800cf8a:	4606      	mov	r6, r0
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	b125      	cbz	r5, 800cf9a <__swsetup_r+0x16>
 800cf90:	69ab      	ldr	r3, [r5, #24]
 800cf92:	b913      	cbnz	r3, 800cf9a <__swsetup_r+0x16>
 800cf94:	4628      	mov	r0, r5
 800cf96:	f000 f985 	bl	800d2a4 <__sinit>
 800cf9a:	4b2e      	ldr	r3, [pc, #184]	; (800d054 <__swsetup_r+0xd0>)
 800cf9c:	429c      	cmp	r4, r3
 800cf9e:	d10f      	bne.n	800cfc0 <__swsetup_r+0x3c>
 800cfa0:	686c      	ldr	r4, [r5, #4]
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfa8:	0719      	lsls	r1, r3, #28
 800cfaa:	d42c      	bmi.n	800d006 <__swsetup_r+0x82>
 800cfac:	06dd      	lsls	r5, r3, #27
 800cfae:	d411      	bmi.n	800cfd4 <__swsetup_r+0x50>
 800cfb0:	2309      	movs	r3, #9
 800cfb2:	6033      	str	r3, [r6, #0]
 800cfb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfb8:	81a3      	strh	r3, [r4, #12]
 800cfba:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbe:	e03e      	b.n	800d03e <__swsetup_r+0xba>
 800cfc0:	4b25      	ldr	r3, [pc, #148]	; (800d058 <__swsetup_r+0xd4>)
 800cfc2:	429c      	cmp	r4, r3
 800cfc4:	d101      	bne.n	800cfca <__swsetup_r+0x46>
 800cfc6:	68ac      	ldr	r4, [r5, #8]
 800cfc8:	e7eb      	b.n	800cfa2 <__swsetup_r+0x1e>
 800cfca:	4b24      	ldr	r3, [pc, #144]	; (800d05c <__swsetup_r+0xd8>)
 800cfcc:	429c      	cmp	r4, r3
 800cfce:	bf08      	it	eq
 800cfd0:	68ec      	ldreq	r4, [r5, #12]
 800cfd2:	e7e6      	b.n	800cfa2 <__swsetup_r+0x1e>
 800cfd4:	0758      	lsls	r0, r3, #29
 800cfd6:	d512      	bpl.n	800cffe <__swsetup_r+0x7a>
 800cfd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfda:	b141      	cbz	r1, 800cfee <__swsetup_r+0x6a>
 800cfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfe0:	4299      	cmp	r1, r3
 800cfe2:	d002      	beq.n	800cfea <__swsetup_r+0x66>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7ff fb31 	bl	800c64c <_free_r>
 800cfea:	2300      	movs	r3, #0
 800cfec:	6363      	str	r3, [r4, #52]	; 0x34
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cff4:	81a3      	strh	r3, [r4, #12]
 800cff6:	2300      	movs	r3, #0
 800cff8:	6063      	str	r3, [r4, #4]
 800cffa:	6923      	ldr	r3, [r4, #16]
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	f043 0308 	orr.w	r3, r3, #8
 800d004:	81a3      	strh	r3, [r4, #12]
 800d006:	6923      	ldr	r3, [r4, #16]
 800d008:	b94b      	cbnz	r3, 800d01e <__swsetup_r+0x9a>
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d014:	d003      	beq.n	800d01e <__swsetup_r+0x9a>
 800d016:	4621      	mov	r1, r4
 800d018:	4630      	mov	r0, r6
 800d01a:	f000 fa09 	bl	800d430 <__smakebuf_r>
 800d01e:	89a0      	ldrh	r0, [r4, #12]
 800d020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d024:	f010 0301 	ands.w	r3, r0, #1
 800d028:	d00a      	beq.n	800d040 <__swsetup_r+0xbc>
 800d02a:	2300      	movs	r3, #0
 800d02c:	60a3      	str	r3, [r4, #8]
 800d02e:	6963      	ldr	r3, [r4, #20]
 800d030:	425b      	negs	r3, r3
 800d032:	61a3      	str	r3, [r4, #24]
 800d034:	6923      	ldr	r3, [r4, #16]
 800d036:	b943      	cbnz	r3, 800d04a <__swsetup_r+0xc6>
 800d038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d03c:	d1ba      	bne.n	800cfb4 <__swsetup_r+0x30>
 800d03e:	bd70      	pop	{r4, r5, r6, pc}
 800d040:	0781      	lsls	r1, r0, #30
 800d042:	bf58      	it	pl
 800d044:	6963      	ldrpl	r3, [r4, #20]
 800d046:	60a3      	str	r3, [r4, #8]
 800d048:	e7f4      	b.n	800d034 <__swsetup_r+0xb0>
 800d04a:	2000      	movs	r0, #0
 800d04c:	e7f7      	b.n	800d03e <__swsetup_r+0xba>
 800d04e:	bf00      	nop
 800d050:	20000024 	.word	0x20000024
 800d054:	0800e03c 	.word	0x0800e03c
 800d058:	0800e05c 	.word	0x0800e05c
 800d05c:	0800e01c 	.word	0x0800e01c

0800d060 <abort>:
 800d060:	b508      	push	{r3, lr}
 800d062:	2006      	movs	r0, #6
 800d064:	f000 fa54 	bl	800d510 <raise>
 800d068:	2001      	movs	r0, #1
 800d06a:	f7f5 ff19 	bl	8002ea0 <_exit>
	...

0800d070 <__sflush_r>:
 800d070:	898a      	ldrh	r2, [r1, #12]
 800d072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d076:	4605      	mov	r5, r0
 800d078:	0710      	lsls	r0, r2, #28
 800d07a:	460c      	mov	r4, r1
 800d07c:	d458      	bmi.n	800d130 <__sflush_r+0xc0>
 800d07e:	684b      	ldr	r3, [r1, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc05      	bgt.n	800d090 <__sflush_r+0x20>
 800d084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	dc02      	bgt.n	800d090 <__sflush_r+0x20>
 800d08a:	2000      	movs	r0, #0
 800d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d092:	2e00      	cmp	r6, #0
 800d094:	d0f9      	beq.n	800d08a <__sflush_r+0x1a>
 800d096:	2300      	movs	r3, #0
 800d098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d09c:	682f      	ldr	r7, [r5, #0]
 800d09e:	602b      	str	r3, [r5, #0]
 800d0a0:	d032      	beq.n	800d108 <__sflush_r+0x98>
 800d0a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	075a      	lsls	r2, r3, #29
 800d0a8:	d505      	bpl.n	800d0b6 <__sflush_r+0x46>
 800d0aa:	6863      	ldr	r3, [r4, #4]
 800d0ac:	1ac0      	subs	r0, r0, r3
 800d0ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0b0:	b10b      	cbz	r3, 800d0b6 <__sflush_r+0x46>
 800d0b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0b4:	1ac0      	subs	r0, r0, r3
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0bc:	6a21      	ldr	r1, [r4, #32]
 800d0be:	4628      	mov	r0, r5
 800d0c0:	47b0      	blx	r6
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	d106      	bne.n	800d0d6 <__sflush_r+0x66>
 800d0c8:	6829      	ldr	r1, [r5, #0]
 800d0ca:	291d      	cmp	r1, #29
 800d0cc:	d82c      	bhi.n	800d128 <__sflush_r+0xb8>
 800d0ce:	4a2a      	ldr	r2, [pc, #168]	; (800d178 <__sflush_r+0x108>)
 800d0d0:	40ca      	lsrs	r2, r1
 800d0d2:	07d6      	lsls	r6, r2, #31
 800d0d4:	d528      	bpl.n	800d128 <__sflush_r+0xb8>
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	6062      	str	r2, [r4, #4]
 800d0da:	04d9      	lsls	r1, r3, #19
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	6022      	str	r2, [r4, #0]
 800d0e0:	d504      	bpl.n	800d0ec <__sflush_r+0x7c>
 800d0e2:	1c42      	adds	r2, r0, #1
 800d0e4:	d101      	bne.n	800d0ea <__sflush_r+0x7a>
 800d0e6:	682b      	ldr	r3, [r5, #0]
 800d0e8:	b903      	cbnz	r3, 800d0ec <__sflush_r+0x7c>
 800d0ea:	6560      	str	r0, [r4, #84]	; 0x54
 800d0ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ee:	602f      	str	r7, [r5, #0]
 800d0f0:	2900      	cmp	r1, #0
 800d0f2:	d0ca      	beq.n	800d08a <__sflush_r+0x1a>
 800d0f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0f8:	4299      	cmp	r1, r3
 800d0fa:	d002      	beq.n	800d102 <__sflush_r+0x92>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f7ff faa5 	bl	800c64c <_free_r>
 800d102:	2000      	movs	r0, #0
 800d104:	6360      	str	r0, [r4, #52]	; 0x34
 800d106:	e7c1      	b.n	800d08c <__sflush_r+0x1c>
 800d108:	6a21      	ldr	r1, [r4, #32]
 800d10a:	2301      	movs	r3, #1
 800d10c:	4628      	mov	r0, r5
 800d10e:	47b0      	blx	r6
 800d110:	1c41      	adds	r1, r0, #1
 800d112:	d1c7      	bne.n	800d0a4 <__sflush_r+0x34>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0c4      	beq.n	800d0a4 <__sflush_r+0x34>
 800d11a:	2b1d      	cmp	r3, #29
 800d11c:	d001      	beq.n	800d122 <__sflush_r+0xb2>
 800d11e:	2b16      	cmp	r3, #22
 800d120:	d101      	bne.n	800d126 <__sflush_r+0xb6>
 800d122:	602f      	str	r7, [r5, #0]
 800d124:	e7b1      	b.n	800d08a <__sflush_r+0x1a>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d12c:	81a3      	strh	r3, [r4, #12]
 800d12e:	e7ad      	b.n	800d08c <__sflush_r+0x1c>
 800d130:	690f      	ldr	r7, [r1, #16]
 800d132:	2f00      	cmp	r7, #0
 800d134:	d0a9      	beq.n	800d08a <__sflush_r+0x1a>
 800d136:	0793      	lsls	r3, r2, #30
 800d138:	680e      	ldr	r6, [r1, #0]
 800d13a:	bf08      	it	eq
 800d13c:	694b      	ldreq	r3, [r1, #20]
 800d13e:	600f      	str	r7, [r1, #0]
 800d140:	bf18      	it	ne
 800d142:	2300      	movne	r3, #0
 800d144:	eba6 0807 	sub.w	r8, r6, r7
 800d148:	608b      	str	r3, [r1, #8]
 800d14a:	f1b8 0f00 	cmp.w	r8, #0
 800d14e:	dd9c      	ble.n	800d08a <__sflush_r+0x1a>
 800d150:	6a21      	ldr	r1, [r4, #32]
 800d152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d154:	4643      	mov	r3, r8
 800d156:	463a      	mov	r2, r7
 800d158:	4628      	mov	r0, r5
 800d15a:	47b0      	blx	r6
 800d15c:	2800      	cmp	r0, #0
 800d15e:	dc06      	bgt.n	800d16e <__sflush_r+0xfe>
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	f04f 30ff 	mov.w	r0, #4294967295
 800d16c:	e78e      	b.n	800d08c <__sflush_r+0x1c>
 800d16e:	4407      	add	r7, r0
 800d170:	eba8 0800 	sub.w	r8, r8, r0
 800d174:	e7e9      	b.n	800d14a <__sflush_r+0xda>
 800d176:	bf00      	nop
 800d178:	20400001 	.word	0x20400001

0800d17c <_fflush_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	690b      	ldr	r3, [r1, #16]
 800d180:	4605      	mov	r5, r0
 800d182:	460c      	mov	r4, r1
 800d184:	b913      	cbnz	r3, 800d18c <_fflush_r+0x10>
 800d186:	2500      	movs	r5, #0
 800d188:	4628      	mov	r0, r5
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	b118      	cbz	r0, 800d196 <_fflush_r+0x1a>
 800d18e:	6983      	ldr	r3, [r0, #24]
 800d190:	b90b      	cbnz	r3, 800d196 <_fflush_r+0x1a>
 800d192:	f000 f887 	bl	800d2a4 <__sinit>
 800d196:	4b14      	ldr	r3, [pc, #80]	; (800d1e8 <_fflush_r+0x6c>)
 800d198:	429c      	cmp	r4, r3
 800d19a:	d11b      	bne.n	800d1d4 <_fflush_r+0x58>
 800d19c:	686c      	ldr	r4, [r5, #4]
 800d19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d0ef      	beq.n	800d186 <_fflush_r+0xa>
 800d1a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1a8:	07d0      	lsls	r0, r2, #31
 800d1aa:	d404      	bmi.n	800d1b6 <_fflush_r+0x3a>
 800d1ac:	0599      	lsls	r1, r3, #22
 800d1ae:	d402      	bmi.n	800d1b6 <_fflush_r+0x3a>
 800d1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1b2:	f000 f915 	bl	800d3e0 <__retarget_lock_acquire_recursive>
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	f7ff ff59 	bl	800d070 <__sflush_r>
 800d1be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1c0:	07da      	lsls	r2, r3, #31
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	d4e0      	bmi.n	800d188 <_fflush_r+0xc>
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	059b      	lsls	r3, r3, #22
 800d1ca:	d4dd      	bmi.n	800d188 <_fflush_r+0xc>
 800d1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ce:	f000 f908 	bl	800d3e2 <__retarget_lock_release_recursive>
 800d1d2:	e7d9      	b.n	800d188 <_fflush_r+0xc>
 800d1d4:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <_fflush_r+0x70>)
 800d1d6:	429c      	cmp	r4, r3
 800d1d8:	d101      	bne.n	800d1de <_fflush_r+0x62>
 800d1da:	68ac      	ldr	r4, [r5, #8]
 800d1dc:	e7df      	b.n	800d19e <_fflush_r+0x22>
 800d1de:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <_fflush_r+0x74>)
 800d1e0:	429c      	cmp	r4, r3
 800d1e2:	bf08      	it	eq
 800d1e4:	68ec      	ldreq	r4, [r5, #12]
 800d1e6:	e7da      	b.n	800d19e <_fflush_r+0x22>
 800d1e8:	0800e03c 	.word	0x0800e03c
 800d1ec:	0800e05c 	.word	0x0800e05c
 800d1f0:	0800e01c 	.word	0x0800e01c

0800d1f4 <std>:
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	b510      	push	{r4, lr}
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d202:	6083      	str	r3, [r0, #8]
 800d204:	8181      	strh	r1, [r0, #12]
 800d206:	6643      	str	r3, [r0, #100]	; 0x64
 800d208:	81c2      	strh	r2, [r0, #14]
 800d20a:	6183      	str	r3, [r0, #24]
 800d20c:	4619      	mov	r1, r3
 800d20e:	2208      	movs	r2, #8
 800d210:	305c      	adds	r0, #92	; 0x5c
 800d212:	f7fd fb59 	bl	800a8c8 <memset>
 800d216:	4b05      	ldr	r3, [pc, #20]	; (800d22c <std+0x38>)
 800d218:	6263      	str	r3, [r4, #36]	; 0x24
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <std+0x3c>)
 800d21c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d21e:	4b05      	ldr	r3, [pc, #20]	; (800d234 <std+0x40>)
 800d220:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d222:	4b05      	ldr	r3, [pc, #20]	; (800d238 <std+0x44>)
 800d224:	6224      	str	r4, [r4, #32]
 800d226:	6323      	str	r3, [r4, #48]	; 0x30
 800d228:	bd10      	pop	{r4, pc}
 800d22a:	bf00      	nop
 800d22c:	0800d549 	.word	0x0800d549
 800d230:	0800d56b 	.word	0x0800d56b
 800d234:	0800d5a3 	.word	0x0800d5a3
 800d238:	0800d5c7 	.word	0x0800d5c7

0800d23c <_cleanup_r>:
 800d23c:	4901      	ldr	r1, [pc, #4]	; (800d244 <_cleanup_r+0x8>)
 800d23e:	f000 b8af 	b.w	800d3a0 <_fwalk_reent>
 800d242:	bf00      	nop
 800d244:	0800d17d 	.word	0x0800d17d

0800d248 <__sfmoreglue>:
 800d248:	b570      	push	{r4, r5, r6, lr}
 800d24a:	2268      	movs	r2, #104	; 0x68
 800d24c:	1e4d      	subs	r5, r1, #1
 800d24e:	4355      	muls	r5, r2
 800d250:	460e      	mov	r6, r1
 800d252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d256:	f7ff fa65 	bl	800c724 <_malloc_r>
 800d25a:	4604      	mov	r4, r0
 800d25c:	b140      	cbz	r0, 800d270 <__sfmoreglue+0x28>
 800d25e:	2100      	movs	r1, #0
 800d260:	e9c0 1600 	strd	r1, r6, [r0]
 800d264:	300c      	adds	r0, #12
 800d266:	60a0      	str	r0, [r4, #8]
 800d268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d26c:	f7fd fb2c 	bl	800a8c8 <memset>
 800d270:	4620      	mov	r0, r4
 800d272:	bd70      	pop	{r4, r5, r6, pc}

0800d274 <__sfp_lock_acquire>:
 800d274:	4801      	ldr	r0, [pc, #4]	; (800d27c <__sfp_lock_acquire+0x8>)
 800d276:	f000 b8b3 	b.w	800d3e0 <__retarget_lock_acquire_recursive>
 800d27a:	bf00      	nop
 800d27c:	20002ac5 	.word	0x20002ac5

0800d280 <__sfp_lock_release>:
 800d280:	4801      	ldr	r0, [pc, #4]	; (800d288 <__sfp_lock_release+0x8>)
 800d282:	f000 b8ae 	b.w	800d3e2 <__retarget_lock_release_recursive>
 800d286:	bf00      	nop
 800d288:	20002ac5 	.word	0x20002ac5

0800d28c <__sinit_lock_acquire>:
 800d28c:	4801      	ldr	r0, [pc, #4]	; (800d294 <__sinit_lock_acquire+0x8>)
 800d28e:	f000 b8a7 	b.w	800d3e0 <__retarget_lock_acquire_recursive>
 800d292:	bf00      	nop
 800d294:	20002ac6 	.word	0x20002ac6

0800d298 <__sinit_lock_release>:
 800d298:	4801      	ldr	r0, [pc, #4]	; (800d2a0 <__sinit_lock_release+0x8>)
 800d29a:	f000 b8a2 	b.w	800d3e2 <__retarget_lock_release_recursive>
 800d29e:	bf00      	nop
 800d2a0:	20002ac6 	.word	0x20002ac6

0800d2a4 <__sinit>:
 800d2a4:	b510      	push	{r4, lr}
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	f7ff fff0 	bl	800d28c <__sinit_lock_acquire>
 800d2ac:	69a3      	ldr	r3, [r4, #24]
 800d2ae:	b11b      	cbz	r3, 800d2b8 <__sinit+0x14>
 800d2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2b4:	f7ff bff0 	b.w	800d298 <__sinit_lock_release>
 800d2b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2bc:	6523      	str	r3, [r4, #80]	; 0x50
 800d2be:	4b13      	ldr	r3, [pc, #76]	; (800d30c <__sinit+0x68>)
 800d2c0:	4a13      	ldr	r2, [pc, #76]	; (800d310 <__sinit+0x6c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2c6:	42a3      	cmp	r3, r4
 800d2c8:	bf04      	itt	eq
 800d2ca:	2301      	moveq	r3, #1
 800d2cc:	61a3      	streq	r3, [r4, #24]
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 f820 	bl	800d314 <__sfp>
 800d2d4:	6060      	str	r0, [r4, #4]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 f81c 	bl	800d314 <__sfp>
 800d2dc:	60a0      	str	r0, [r4, #8]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f000 f818 	bl	800d314 <__sfp>
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	60e0      	str	r0, [r4, #12]
 800d2e8:	2104      	movs	r1, #4
 800d2ea:	6860      	ldr	r0, [r4, #4]
 800d2ec:	f7ff ff82 	bl	800d1f4 <std>
 800d2f0:	68a0      	ldr	r0, [r4, #8]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	2109      	movs	r1, #9
 800d2f6:	f7ff ff7d 	bl	800d1f4 <std>
 800d2fa:	68e0      	ldr	r0, [r4, #12]
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	2112      	movs	r1, #18
 800d300:	f7ff ff78 	bl	800d1f4 <std>
 800d304:	2301      	movs	r3, #1
 800d306:	61a3      	str	r3, [r4, #24]
 800d308:	e7d2      	b.n	800d2b0 <__sinit+0xc>
 800d30a:	bf00      	nop
 800d30c:	0800dca4 	.word	0x0800dca4
 800d310:	0800d23d 	.word	0x0800d23d

0800d314 <__sfp>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	4607      	mov	r7, r0
 800d318:	f7ff ffac 	bl	800d274 <__sfp_lock_acquire>
 800d31c:	4b1e      	ldr	r3, [pc, #120]	; (800d398 <__sfp+0x84>)
 800d31e:	681e      	ldr	r6, [r3, #0]
 800d320:	69b3      	ldr	r3, [r6, #24]
 800d322:	b913      	cbnz	r3, 800d32a <__sfp+0x16>
 800d324:	4630      	mov	r0, r6
 800d326:	f7ff ffbd 	bl	800d2a4 <__sinit>
 800d32a:	3648      	adds	r6, #72	; 0x48
 800d32c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d330:	3b01      	subs	r3, #1
 800d332:	d503      	bpl.n	800d33c <__sfp+0x28>
 800d334:	6833      	ldr	r3, [r6, #0]
 800d336:	b30b      	cbz	r3, 800d37c <__sfp+0x68>
 800d338:	6836      	ldr	r6, [r6, #0]
 800d33a:	e7f7      	b.n	800d32c <__sfp+0x18>
 800d33c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d340:	b9d5      	cbnz	r5, 800d378 <__sfp+0x64>
 800d342:	4b16      	ldr	r3, [pc, #88]	; (800d39c <__sfp+0x88>)
 800d344:	60e3      	str	r3, [r4, #12]
 800d346:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d34a:	6665      	str	r5, [r4, #100]	; 0x64
 800d34c:	f000 f847 	bl	800d3de <__retarget_lock_init_recursive>
 800d350:	f7ff ff96 	bl	800d280 <__sfp_lock_release>
 800d354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d35c:	6025      	str	r5, [r4, #0]
 800d35e:	61a5      	str	r5, [r4, #24]
 800d360:	2208      	movs	r2, #8
 800d362:	4629      	mov	r1, r5
 800d364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d368:	f7fd faae 	bl	800a8c8 <memset>
 800d36c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d374:	4620      	mov	r0, r4
 800d376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d378:	3468      	adds	r4, #104	; 0x68
 800d37a:	e7d9      	b.n	800d330 <__sfp+0x1c>
 800d37c:	2104      	movs	r1, #4
 800d37e:	4638      	mov	r0, r7
 800d380:	f7ff ff62 	bl	800d248 <__sfmoreglue>
 800d384:	4604      	mov	r4, r0
 800d386:	6030      	str	r0, [r6, #0]
 800d388:	2800      	cmp	r0, #0
 800d38a:	d1d5      	bne.n	800d338 <__sfp+0x24>
 800d38c:	f7ff ff78 	bl	800d280 <__sfp_lock_release>
 800d390:	230c      	movs	r3, #12
 800d392:	603b      	str	r3, [r7, #0]
 800d394:	e7ee      	b.n	800d374 <__sfp+0x60>
 800d396:	bf00      	nop
 800d398:	0800dca4 	.word	0x0800dca4
 800d39c:	ffff0001 	.word	0xffff0001

0800d3a0 <_fwalk_reent>:
 800d3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	4688      	mov	r8, r1
 800d3a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3ac:	2700      	movs	r7, #0
 800d3ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3b2:	f1b9 0901 	subs.w	r9, r9, #1
 800d3b6:	d505      	bpl.n	800d3c4 <_fwalk_reent+0x24>
 800d3b8:	6824      	ldr	r4, [r4, #0]
 800d3ba:	2c00      	cmp	r4, #0
 800d3bc:	d1f7      	bne.n	800d3ae <_fwalk_reent+0xe>
 800d3be:	4638      	mov	r0, r7
 800d3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3c4:	89ab      	ldrh	r3, [r5, #12]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d907      	bls.n	800d3da <_fwalk_reent+0x3a>
 800d3ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	d003      	beq.n	800d3da <_fwalk_reent+0x3a>
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	47c0      	blx	r8
 800d3d8:	4307      	orrs	r7, r0
 800d3da:	3568      	adds	r5, #104	; 0x68
 800d3dc:	e7e9      	b.n	800d3b2 <_fwalk_reent+0x12>

0800d3de <__retarget_lock_init_recursive>:
 800d3de:	4770      	bx	lr

0800d3e0 <__retarget_lock_acquire_recursive>:
 800d3e0:	4770      	bx	lr

0800d3e2 <__retarget_lock_release_recursive>:
 800d3e2:	4770      	bx	lr

0800d3e4 <__swhatbuf_r>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	460e      	mov	r6, r1
 800d3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ec:	2900      	cmp	r1, #0
 800d3ee:	b096      	sub	sp, #88	; 0x58
 800d3f0:	4614      	mov	r4, r2
 800d3f2:	461d      	mov	r5, r3
 800d3f4:	da08      	bge.n	800d408 <__swhatbuf_r+0x24>
 800d3f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	602a      	str	r2, [r5, #0]
 800d3fe:	061a      	lsls	r2, r3, #24
 800d400:	d410      	bmi.n	800d424 <__swhatbuf_r+0x40>
 800d402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d406:	e00e      	b.n	800d426 <__swhatbuf_r+0x42>
 800d408:	466a      	mov	r2, sp
 800d40a:	f000 f903 	bl	800d614 <_fstat_r>
 800d40e:	2800      	cmp	r0, #0
 800d410:	dbf1      	blt.n	800d3f6 <__swhatbuf_r+0x12>
 800d412:	9a01      	ldr	r2, [sp, #4]
 800d414:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d418:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d41c:	425a      	negs	r2, r3
 800d41e:	415a      	adcs	r2, r3
 800d420:	602a      	str	r2, [r5, #0]
 800d422:	e7ee      	b.n	800d402 <__swhatbuf_r+0x1e>
 800d424:	2340      	movs	r3, #64	; 0x40
 800d426:	2000      	movs	r0, #0
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	b016      	add	sp, #88	; 0x58
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d430 <__smakebuf_r>:
 800d430:	898b      	ldrh	r3, [r1, #12]
 800d432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d434:	079d      	lsls	r5, r3, #30
 800d436:	4606      	mov	r6, r0
 800d438:	460c      	mov	r4, r1
 800d43a:	d507      	bpl.n	800d44c <__smakebuf_r+0x1c>
 800d43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	6123      	str	r3, [r4, #16]
 800d444:	2301      	movs	r3, #1
 800d446:	6163      	str	r3, [r4, #20]
 800d448:	b002      	add	sp, #8
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	ab01      	add	r3, sp, #4
 800d44e:	466a      	mov	r2, sp
 800d450:	f7ff ffc8 	bl	800d3e4 <__swhatbuf_r>
 800d454:	9900      	ldr	r1, [sp, #0]
 800d456:	4605      	mov	r5, r0
 800d458:	4630      	mov	r0, r6
 800d45a:	f7ff f963 	bl	800c724 <_malloc_r>
 800d45e:	b948      	cbnz	r0, 800d474 <__smakebuf_r+0x44>
 800d460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d464:	059a      	lsls	r2, r3, #22
 800d466:	d4ef      	bmi.n	800d448 <__smakebuf_r+0x18>
 800d468:	f023 0303 	bic.w	r3, r3, #3
 800d46c:	f043 0302 	orr.w	r3, r3, #2
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	e7e3      	b.n	800d43c <__smakebuf_r+0xc>
 800d474:	4b0d      	ldr	r3, [pc, #52]	; (800d4ac <__smakebuf_r+0x7c>)
 800d476:	62b3      	str	r3, [r6, #40]	; 0x28
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	6020      	str	r0, [r4, #0]
 800d47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d480:	81a3      	strh	r3, [r4, #12]
 800d482:	9b00      	ldr	r3, [sp, #0]
 800d484:	6163      	str	r3, [r4, #20]
 800d486:	9b01      	ldr	r3, [sp, #4]
 800d488:	6120      	str	r0, [r4, #16]
 800d48a:	b15b      	cbz	r3, 800d4a4 <__smakebuf_r+0x74>
 800d48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d490:	4630      	mov	r0, r6
 800d492:	f000 f8d1 	bl	800d638 <_isatty_r>
 800d496:	b128      	cbz	r0, 800d4a4 <__smakebuf_r+0x74>
 800d498:	89a3      	ldrh	r3, [r4, #12]
 800d49a:	f023 0303 	bic.w	r3, r3, #3
 800d49e:	f043 0301 	orr.w	r3, r3, #1
 800d4a2:	81a3      	strh	r3, [r4, #12]
 800d4a4:	89a0      	ldrh	r0, [r4, #12]
 800d4a6:	4305      	orrs	r5, r0
 800d4a8:	81a5      	strh	r5, [r4, #12]
 800d4aa:	e7cd      	b.n	800d448 <__smakebuf_r+0x18>
 800d4ac:	0800d23d 	.word	0x0800d23d

0800d4b0 <_malloc_usable_size_r>:
 800d4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4b4:	1f18      	subs	r0, r3, #4
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bfbc      	itt	lt
 800d4ba:	580b      	ldrlt	r3, [r1, r0]
 800d4bc:	18c0      	addlt	r0, r0, r3
 800d4be:	4770      	bx	lr

0800d4c0 <_raise_r>:
 800d4c0:	291f      	cmp	r1, #31
 800d4c2:	b538      	push	{r3, r4, r5, lr}
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	d904      	bls.n	800d4d4 <_raise_r+0x14>
 800d4ca:	2316      	movs	r3, #22
 800d4cc:	6003      	str	r3, [r0, #0]
 800d4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d2:	bd38      	pop	{r3, r4, r5, pc}
 800d4d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4d6:	b112      	cbz	r2, 800d4de <_raise_r+0x1e>
 800d4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4dc:	b94b      	cbnz	r3, 800d4f2 <_raise_r+0x32>
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f000 f830 	bl	800d544 <_getpid_r>
 800d4e4:	462a      	mov	r2, r5
 800d4e6:	4601      	mov	r1, r0
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ee:	f000 b817 	b.w	800d520 <_kill_r>
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d00a      	beq.n	800d50c <_raise_r+0x4c>
 800d4f6:	1c59      	adds	r1, r3, #1
 800d4f8:	d103      	bne.n	800d502 <_raise_r+0x42>
 800d4fa:	2316      	movs	r3, #22
 800d4fc:	6003      	str	r3, [r0, #0]
 800d4fe:	2001      	movs	r0, #1
 800d500:	e7e7      	b.n	800d4d2 <_raise_r+0x12>
 800d502:	2400      	movs	r4, #0
 800d504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d508:	4628      	mov	r0, r5
 800d50a:	4798      	blx	r3
 800d50c:	2000      	movs	r0, #0
 800d50e:	e7e0      	b.n	800d4d2 <_raise_r+0x12>

0800d510 <raise>:
 800d510:	4b02      	ldr	r3, [pc, #8]	; (800d51c <raise+0xc>)
 800d512:	4601      	mov	r1, r0
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f7ff bfd3 	b.w	800d4c0 <_raise_r>
 800d51a:	bf00      	nop
 800d51c:	20000024 	.word	0x20000024

0800d520 <_kill_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d07      	ldr	r5, [pc, #28]	; (800d540 <_kill_r+0x20>)
 800d524:	2300      	movs	r3, #0
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	4611      	mov	r1, r2
 800d52c:	602b      	str	r3, [r5, #0]
 800d52e:	f7f5 fca7 	bl	8002e80 <_kill>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	d102      	bne.n	800d53c <_kill_r+0x1c>
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	b103      	cbz	r3, 800d53c <_kill_r+0x1c>
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	bd38      	pop	{r3, r4, r5, pc}
 800d53e:	bf00      	nop
 800d540:	20002ac0 	.word	0x20002ac0

0800d544 <_getpid_r>:
 800d544:	f7f5 bc94 	b.w	8002e70 <_getpid>

0800d548 <__sread>:
 800d548:	b510      	push	{r4, lr}
 800d54a:	460c      	mov	r4, r1
 800d54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d550:	f000 f894 	bl	800d67c <_read_r>
 800d554:	2800      	cmp	r0, #0
 800d556:	bfab      	itete	ge
 800d558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d55a:	89a3      	ldrhlt	r3, [r4, #12]
 800d55c:	181b      	addge	r3, r3, r0
 800d55e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d562:	bfac      	ite	ge
 800d564:	6563      	strge	r3, [r4, #84]	; 0x54
 800d566:	81a3      	strhlt	r3, [r4, #12]
 800d568:	bd10      	pop	{r4, pc}

0800d56a <__swrite>:
 800d56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56e:	461f      	mov	r7, r3
 800d570:	898b      	ldrh	r3, [r1, #12]
 800d572:	05db      	lsls	r3, r3, #23
 800d574:	4605      	mov	r5, r0
 800d576:	460c      	mov	r4, r1
 800d578:	4616      	mov	r6, r2
 800d57a:	d505      	bpl.n	800d588 <__swrite+0x1e>
 800d57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d580:	2302      	movs	r3, #2
 800d582:	2200      	movs	r2, #0
 800d584:	f000 f868 	bl	800d658 <_lseek_r>
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d58e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	4632      	mov	r2, r6
 800d596:	463b      	mov	r3, r7
 800d598:	4628      	mov	r0, r5
 800d59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d59e:	f000 b817 	b.w	800d5d0 <_write_r>

0800d5a2 <__sseek>:
 800d5a2:	b510      	push	{r4, lr}
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5aa:	f000 f855 	bl	800d658 <_lseek_r>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	bf15      	itete	ne
 800d5b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5be:	81a3      	strheq	r3, [r4, #12]
 800d5c0:	bf18      	it	ne
 800d5c2:	81a3      	strhne	r3, [r4, #12]
 800d5c4:	bd10      	pop	{r4, pc}

0800d5c6 <__sclose>:
 800d5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ca:	f000 b813 	b.w	800d5f4 <_close_r>
	...

0800d5d0 <_write_r>:
 800d5d0:	b538      	push	{r3, r4, r5, lr}
 800d5d2:	4d07      	ldr	r5, [pc, #28]	; (800d5f0 <_write_r+0x20>)
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	4608      	mov	r0, r1
 800d5d8:	4611      	mov	r1, r2
 800d5da:	2200      	movs	r2, #0
 800d5dc:	602a      	str	r2, [r5, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f7f5 fc85 	bl	8002eee <_write>
 800d5e4:	1c43      	adds	r3, r0, #1
 800d5e6:	d102      	bne.n	800d5ee <_write_r+0x1e>
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	b103      	cbz	r3, 800d5ee <_write_r+0x1e>
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	20002ac0 	.word	0x20002ac0

0800d5f4 <_close_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	4d06      	ldr	r5, [pc, #24]	; (800d610 <_close_r+0x1c>)
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	602b      	str	r3, [r5, #0]
 800d600:	f7f5 fc91 	bl	8002f26 <_close>
 800d604:	1c43      	adds	r3, r0, #1
 800d606:	d102      	bne.n	800d60e <_close_r+0x1a>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b103      	cbz	r3, 800d60e <_close_r+0x1a>
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	20002ac0 	.word	0x20002ac0

0800d614 <_fstat_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d07      	ldr	r5, [pc, #28]	; (800d634 <_fstat_r+0x20>)
 800d618:	2300      	movs	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	4611      	mov	r1, r2
 800d620:	602b      	str	r3, [r5, #0]
 800d622:	f7f5 fc8c 	bl	8002f3e <_fstat>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d102      	bne.n	800d630 <_fstat_r+0x1c>
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	b103      	cbz	r3, 800d630 <_fstat_r+0x1c>
 800d62e:	6023      	str	r3, [r4, #0]
 800d630:	bd38      	pop	{r3, r4, r5, pc}
 800d632:	bf00      	nop
 800d634:	20002ac0 	.word	0x20002ac0

0800d638 <_isatty_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4d06      	ldr	r5, [pc, #24]	; (800d654 <_isatty_r+0x1c>)
 800d63c:	2300      	movs	r3, #0
 800d63e:	4604      	mov	r4, r0
 800d640:	4608      	mov	r0, r1
 800d642:	602b      	str	r3, [r5, #0]
 800d644:	f7f5 fc8b 	bl	8002f5e <_isatty>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_isatty_r+0x1a>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_isatty_r+0x1a>
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	20002ac0 	.word	0x20002ac0

0800d658 <_lseek_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4d07      	ldr	r5, [pc, #28]	; (800d678 <_lseek_r+0x20>)
 800d65c:	4604      	mov	r4, r0
 800d65e:	4608      	mov	r0, r1
 800d660:	4611      	mov	r1, r2
 800d662:	2200      	movs	r2, #0
 800d664:	602a      	str	r2, [r5, #0]
 800d666:	461a      	mov	r2, r3
 800d668:	f7f5 fc84 	bl	8002f74 <_lseek>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	d102      	bne.n	800d676 <_lseek_r+0x1e>
 800d670:	682b      	ldr	r3, [r5, #0]
 800d672:	b103      	cbz	r3, 800d676 <_lseek_r+0x1e>
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	bd38      	pop	{r3, r4, r5, pc}
 800d678:	20002ac0 	.word	0x20002ac0

0800d67c <_read_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4d07      	ldr	r5, [pc, #28]	; (800d69c <_read_r+0x20>)
 800d680:	4604      	mov	r4, r0
 800d682:	4608      	mov	r0, r1
 800d684:	4611      	mov	r1, r2
 800d686:	2200      	movs	r2, #0
 800d688:	602a      	str	r2, [r5, #0]
 800d68a:	461a      	mov	r2, r3
 800d68c:	f7f5 fc12 	bl	8002eb4 <_read>
 800d690:	1c43      	adds	r3, r0, #1
 800d692:	d102      	bne.n	800d69a <_read_r+0x1e>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	b103      	cbz	r3, 800d69a <_read_r+0x1e>
 800d698:	6023      	str	r3, [r4, #0]
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	20002ac0 	.word	0x20002ac0

0800d6a0 <_init>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	bf00      	nop
 800d6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a6:	bc08      	pop	{r3}
 800d6a8:	469e      	mov	lr, r3
 800d6aa:	4770      	bx	lr

0800d6ac <_fini>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	bf00      	nop
 800d6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b2:	bc08      	pop	{r3}
 800d6b4:	469e      	mov	lr, r3
 800d6b6:	4770      	bx	lr
