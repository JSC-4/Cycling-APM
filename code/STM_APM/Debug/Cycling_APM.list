
Cycling_APM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08009f48  08009f48  00019f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a40c  0800a40c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a40c  0800a40c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a414  0800a414  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a41c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  200001f4  0800a610  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a98  0800a610  00021a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccfd  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad4  00000000  00000000  0003cf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  000409f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00042310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bab  00000000  00000000  00043a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002062e  00000000  00000000  0006862b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2224  00000000  00000000  00088c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ae7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b48  00000000  00000000  0015aed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f30 	.word	0x08009f30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08009f30 	.word	0x08009f30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <dfr_initialise>:
#include "dfr_no2_co.h"             // Include header file for dfr sensor

HAL_StatusTypeDef dfr_initialise(dfr_data *dev, I2C_HandleTypeDef *i2cHandle) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->no2 = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
	dev->co = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
	dev->r0_ox = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	819a      	strh	r2, [r3, #12]
	dev->r0_red = 0;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	81da      	strh	r2, [r3, #14]
	dev->oxData = 0;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	821a      	strh	r2, [r3, #16]
	dev->redData = 0;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	825a      	strh	r2, [r3, #18]
	dev->powerData = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	829a      	strh	r2, [r3, #20]
	dev->RS_R0_RED_data = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
	dev->RS_R0_OX_data = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DS3231_DecodeBCD>:
int bcd2dec(uint8_t b)
{
	return b = ((b / 16) * 10 + (b % 16));
}

uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <ds3231_initialise>:
int dec2bcd(char d) {
	return (((d / 10) << 4) | (d % 10));
}

HAL_StatusTypeDef ds3231_initialise(ds3231_data *dev,
		I2C_HandleTypeDef *i2cHandle) {
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <getTime>:
	return HAL_OK;
}

/* Method to get the time from the DS3231. The three registers are one after the
 other, so an repeat I2C read can be done. */
HAL_StatusTypeDef getTime(ds3231_data *dev) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	uint8_t cmd[1];
	uint8_t buf[3];

	cmd[0] = DS3231_SECONDS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Master_Transmit(dev->i2cHandle, (DS3231_ADDR << 1), cmd, 1, 50);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	f107 020c 	add.w	r2, r7, #12
 8000fac:	2332      	movs	r3, #50	; 0x32
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	21d0      	movs	r1, #208	; 0xd0
 8000fb4:	f001 fe7a 	bl	8002cac <HAL_I2C_Master_Transmit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
//	if (status != 0) {
////    	printf("Failed to write I2C device address (err %i)\n", ret);
//		return HAL_TIMEOUT;
//	}

    status = HAL_I2C_Master_Receive(dev->i2cHandle, (DS3231_ADDR << 1), buf, 3,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f107 0208 	add.w	r2, r7, #8
 8000fc4:	2332      	movs	r3, #50	; 0x32
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2303      	movs	r3, #3
 8000fca:	21d0      	movs	r1, #208	; 0xd0
 8000fcc:	f001 ff62 	bl	8002e94 <HAL_I2C_Master_Receive>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]

//	for (int i = 0; i < 3; i++) {
//		bcd2dec(buf[i]);
//	}

	dev->second = DS3231_DecodeBCD(buf[0]);
 8000fd4:	7a3b      	ldrb	r3, [r7, #8]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffb6 	bl	8000f48 <DS3231_DecodeBCD>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	711a      	strb	r2, [r3, #4]
	dev->minute = DS3231_DecodeBCD(buf[1]);
 8000fe4:	7a7b      	ldrb	r3, [r7, #9]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffae 	bl	8000f48 <DS3231_DecodeBCD>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	715a      	strb	r2, [r3, #5]
	dev->hour = DS3231_DecodeBCD(buf[2]);
 8000ff4:	7abb      	ldrb	r3, [r7, #10]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffa6 	bl	8000f48 <DS3231_DecodeBCD>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2108      	movs	r1, #8
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f001 fd9f 	bl	8002b5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 fafc 	bl	800261c <HAL_Delay>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2108      	movs	r1, #8
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f001 fd92 	bl	8002b5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f001 faef 	bl	800261c <HAL_Delay>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800104e:	bf00      	nop
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <SPI_TxByte+0x30>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d1f8      	bne.n	8001050 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800105e:	1df9      	adds	r1, r7, #7
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	2201      	movs	r2, #1
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <SPI_TxByte+0x30>)
 8001066:	f003 fd62 	bl	8004b2e <HAL_SPI_Transmit>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000026c 	.word	0x2000026c

08001078 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001084:	bf00      	nop
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <SPI_TxBuffer+0x30>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b02      	cmp	r3, #2
 8001092:	d1f8      	bne.n	8001086 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <SPI_TxBuffer+0x30>)
 800109c:	f003 fd47 	bl	8004b2e <HAL_SPI_Transmit>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000026c 	.word	0x2000026c

080010ac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010b2:	23ff      	movs	r3, #255	; 0xff
 80010b4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010b6:	bf00      	nop
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <SPI_RxByte+0x34>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d1f8      	bne.n	80010b8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010c6:	1dba      	adds	r2, r7, #6
 80010c8:	1df9      	adds	r1, r7, #7
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <SPI_RxByte+0x34>)
 80010d2:	f003 fe9a 	bl	8004e0a <HAL_SPI_TransmitReceive>

	return data;
 80010d6:	79bb      	ldrb	r3, [r7, #6]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000026c 	.word	0x2000026c

080010e4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010ec:	f7ff ffde 	bl	80010ac <SPI_RxByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	701a      	strb	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <SD_ReadyWait+0x30>)
 8001108:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800110c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800110e:	f7ff ffcd 	bl	80010ac <SPI_RxByte>
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2bff      	cmp	r3, #255	; 0xff
 800111a:	d003      	beq.n	8001124 <SD_ReadyWait+0x24>
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SD_ReadyWait+0x30>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f4      	bne.n	800110e <SD_ReadyWait+0xe>

	return res;
 8001124:	79fb      	ldrb	r3, [r7, #7]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000212 	.word	0x20000212

08001134 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800113a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800113e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001140:	f7ff ff72 	bl	8001028 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	e005      	b.n	8001156 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800114a:	20ff      	movs	r0, #255	; 0xff
 800114c:	f7ff ff7a 	bl	8001044 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	3301      	adds	r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b09      	cmp	r3, #9
 800115a:	ddf6      	ble.n	800114a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800115c:	f7ff ff57 	bl	800100e <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001174:	2395      	movs	r3, #149	; 0x95
 8001176:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001178:	463b      	mov	r3, r7
 800117a:	2106      	movs	r1, #6
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff7b 	bl	8001078 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001182:	e002      	b.n	800118a <SD_PowerOn+0x56>
	{
		cnt--;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3b01      	subs	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800118a:	f7ff ff8f 	bl	80010ac <SPI_RxByte>
 800118e:	4603      	mov	r3, r0
 8001190:	2b01      	cmp	r3, #1
 8001192:	d002      	beq.n	800119a <SD_PowerOn+0x66>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f4      	bne.n	8001184 <SD_PowerOn+0x50>
	}

	DESELECT();
 800119a:	f7ff ff45 	bl	8001028 <DESELECT>
	SPI_TxByte(0XFF);
 800119e:	20ff      	movs	r0, #255	; 0xff
 80011a0:	f7ff ff50 	bl	8001044 <SPI_TxByte>

	PowerFlag = 1;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <SD_PowerOn+0x80>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000215 	.word	0x20000215

080011b8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <SD_PowerOff+0x14>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20000215 	.word	0x20000215

080011d0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <SD_CheckPower+0x14>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000215 	.word	0x20000215

080011e8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <SD_RxDataBlock+0x58>)
 80011f4:	22c8      	movs	r2, #200	; 0xc8
 80011f6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011f8:	f7ff ff58 	bl	80010ac <SPI_RxByte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2bff      	cmp	r3, #255	; 0xff
 8001204:	d103      	bne.n	800120e <SD_RxDataBlock+0x26>
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <SD_RxDataBlock+0x58>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f4      	bne.n	80011f8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2bfe      	cmp	r3, #254	; 0xfe
 8001212:	d001      	beq.n	8001218 <SD_RxDataBlock+0x30>
 8001214:	2300      	movs	r3, #0
 8001216:	e00f      	b.n	8001238 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff60 	bl	80010e4 <SPI_RxBytePtr>
	} while(len--);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	1e5a      	subs	r2, r3, #1
 8001228:	603a      	str	r2, [r7, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800122e:	f7ff ff3d 	bl	80010ac <SPI_RxByte>
	SPI_RxByte();
 8001232:	f7ff ff3b 	bl	80010ac <SPI_RxByte>

	return TRUE;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000210 	.word	0x20000210

08001244 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001254:	f7ff ff54 	bl	8001100 <SD_ReadyWait>
 8001258:	4603      	mov	r3, r0
 800125a:	2bff      	cmp	r3, #255	; 0xff
 800125c:	d001      	beq.n	8001262 <SD_TxDataBlock+0x1e>
 800125e:	2300      	movs	r3, #0
 8001260:	e02f      	b.n	80012c2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff feed 	bl	8001044 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	2bfd      	cmp	r3, #253	; 0xfd
 800126e:	d020      	beq.n	80012b2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff feff 	bl	8001078 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800127a:	f7ff ff17 	bl	80010ac <SPI_RxByte>
		SPI_RxByte();
 800127e:	f7ff ff15 	bl	80010ac <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001282:	e00b      	b.n	800129c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001284:	f7ff ff12 	bl	80010ac <SPI_RxByte>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	2b05      	cmp	r3, #5
 8001294:	d006      	beq.n	80012a4 <SD_TxDataBlock+0x60>
			i++;
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	2b40      	cmp	r3, #64	; 0x40
 80012a0:	d9f0      	bls.n	8001284 <SD_TxDataBlock+0x40>
 80012a2:	e000      	b.n	80012a6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012a4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012a6:	bf00      	nop
 80012a8:	f7ff ff00 	bl	80010ac <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0fa      	beq.n	80012a8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d101      	bne.n	80012c0 <SD_TxDataBlock+0x7c>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	6039      	str	r1, [r7, #0]
 80012d4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012d6:	f7ff ff13 	bl	8001100 <SD_ReadyWait>
 80012da:	4603      	mov	r3, r0
 80012dc:	2bff      	cmp	r3, #255	; 0xff
 80012de:	d001      	beq.n	80012e4 <SD_SendCmd+0x1a>
 80012e0:	23ff      	movs	r3, #255	; 0xff
 80012e2:	e042      	b.n	800136a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff feac 	bl	8001044 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	0e1b      	lsrs	r3, r3, #24
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fea6 	bl	8001044 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	0c1b      	lsrs	r3, r3, #16
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fea0 	bl	8001044 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe9a 	bl	8001044 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe95 	bl	8001044 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b40      	cmp	r3, #64	; 0x40
 800131e:	d102      	bne.n	8001326 <SD_SendCmd+0x5c>
 8001320:	2395      	movs	r3, #149	; 0x95
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e007      	b.n	8001336 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b48      	cmp	r3, #72	; 0x48
 800132a:	d102      	bne.n	8001332 <SD_SendCmd+0x68>
 800132c:	2387      	movs	r3, #135	; 0x87
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e001      	b.n	8001336 <SD_SendCmd+0x6c>
	else crc = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe83 	bl	8001044 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b4c      	cmp	r3, #76	; 0x4c
 8001342:	d101      	bne.n	8001348 <SD_SendCmd+0x7e>
 8001344:	f7ff feb2 	bl	80010ac <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001348:	230a      	movs	r3, #10
 800134a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800134c:	f7ff feae 	bl	80010ac <SPI_RxByte>
 8001350:	4603      	mov	r3, r0
 8001352:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001354:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da05      	bge.n	8001368 <SD_SendCmd+0x9e>
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	3b01      	subs	r3, #1
 8001360:	73bb      	strb	r3, [r7, #14]
 8001362:	7bbb      	ldrb	r3, [r7, #14]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f1      	bne.n	800134c <SD_SendCmd+0x82>

	return res;
 8001368:	7b7b      	ldrb	r3, [r7, #13]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SD_disk_initialize+0x14>
 8001384:	2301      	movs	r3, #1
 8001386:	e0d1      	b.n	800152c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <SD_disk_initialize+0x1c0>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <SD_disk_initialize+0x2a>
 8001396:	4b67      	ldr	r3, [pc, #412]	; (8001534 <SD_disk_initialize+0x1c0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	e0c6      	b.n	800152c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800139e:	f7ff fec9 	bl	8001134 <SD_PowerOn>

	/* slave select */
	SELECT();
 80013a2:	f7ff fe34 	bl	800100e <SELECT>

	/* check disk type */
	type = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013aa:	2100      	movs	r1, #0
 80013ac:	2040      	movs	r0, #64	; 0x40
 80013ae:	f7ff ff8c 	bl	80012ca <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	f040 80a1 	bne.w	80014fc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <SD_disk_initialize+0x1c4>)
 80013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013c6:	2048      	movs	r0, #72	; 0x48
 80013c8:	f7ff ff7f 	bl	80012ca <SD_SendCmd>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d155      	bne.n	800147e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e00c      	b.n	80013f2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013d8:	7bfc      	ldrb	r4, [r7, #15]
 80013da:	f7ff fe67 	bl	80010ac <SPI_RxByte>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	f104 0310 	add.w	r3, r4, #16
 80013e6:	443b      	add	r3, r7
 80013e8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	3301      	adds	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d9ef      	bls.n	80013d8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013f8:	7abb      	ldrb	r3, [r7, #10]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d17e      	bne.n	80014fc <SD_disk_initialize+0x188>
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	2baa      	cmp	r3, #170	; 0xaa
 8001402:	d17b      	bne.n	80014fc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001404:	2100      	movs	r1, #0
 8001406:	2077      	movs	r0, #119	; 0x77
 8001408:	f7ff ff5f 	bl	80012ca <SD_SendCmd>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d807      	bhi.n	8001422 <SD_disk_initialize+0xae>
 8001412:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001416:	2069      	movs	r0, #105	; 0x69
 8001418:	f7ff ff57 	bl	80012ca <SD_SendCmd>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d004      	beq.n	800142c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001422:	4b45      	ldr	r3, [pc, #276]	; (8001538 <SD_disk_initialize+0x1c4>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ec      	bne.n	8001404 <SD_disk_initialize+0x90>
 800142a:	e000      	b.n	800142e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800142c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800142e:	4b42      	ldr	r3, [pc, #264]	; (8001538 <SD_disk_initialize+0x1c4>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d062      	beq.n	80014fc <SD_disk_initialize+0x188>
 8001436:	2100      	movs	r1, #0
 8001438:	207a      	movs	r0, #122	; 0x7a
 800143a:	f7ff ff46 	bl	80012ca <SD_SendCmd>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d15b      	bne.n	80014fc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e00c      	b.n	8001464 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800144a:	7bfc      	ldrb	r4, [r7, #15]
 800144c:	f7ff fe2e 	bl	80010ac <SPI_RxByte>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	f104 0310 	add.w	r3, r4, #16
 8001458:	443b      	add	r3, r7
 800145a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	3301      	adds	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d9ef      	bls.n	800144a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800146a:	7a3b      	ldrb	r3, [r7, #8]
 800146c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SD_disk_initialize+0x104>
 8001474:	230c      	movs	r3, #12
 8001476:	e000      	b.n	800147a <SD_disk_initialize+0x106>
 8001478:	2304      	movs	r3, #4
 800147a:	73bb      	strb	r3, [r7, #14]
 800147c:	e03e      	b.n	80014fc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800147e:	2100      	movs	r1, #0
 8001480:	2077      	movs	r0, #119	; 0x77
 8001482:	f7ff ff22 	bl	80012ca <SD_SendCmd>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d808      	bhi.n	800149e <SD_disk_initialize+0x12a>
 800148c:	2100      	movs	r1, #0
 800148e:	2069      	movs	r0, #105	; 0x69
 8001490:	f7ff ff1b 	bl	80012ca <SD_SendCmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d801      	bhi.n	800149e <SD_disk_initialize+0x12a>
 800149a:	2302      	movs	r3, #2
 800149c:	e000      	b.n	80014a0 <SD_disk_initialize+0x12c>
 800149e:	2301      	movs	r3, #1
 80014a0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d10e      	bne.n	80014c6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014a8:	2100      	movs	r1, #0
 80014aa:	2077      	movs	r0, #119	; 0x77
 80014ac:	f7ff ff0d 	bl	80012ca <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d80e      	bhi.n	80014d4 <SD_disk_initialize+0x160>
 80014b6:	2100      	movs	r1, #0
 80014b8:	2069      	movs	r0, #105	; 0x69
 80014ba:	f7ff ff06 	bl	80012ca <SD_SendCmd>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <SD_disk_initialize+0x160>
 80014c4:	e00c      	b.n	80014e0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014c6:	2100      	movs	r1, #0
 80014c8:	2041      	movs	r0, #65	; 0x41
 80014ca:	f7ff fefe 	bl	80012ca <SD_SendCmd>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <SD_disk_initialize+0x1c4>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e2      	bne.n	80014a2 <SD_disk_initialize+0x12e>
 80014dc:	e000      	b.n	80014e0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014de:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <SD_disk_initialize+0x1c4>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <SD_disk_initialize+0x184>
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	2050      	movs	r0, #80	; 0x50
 80014ee:	f7ff feec 	bl	80012ca <SD_SendCmd>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SD_disk_initialize+0x188>
 80014f8:	2300      	movs	r3, #0
 80014fa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <SD_disk_initialize+0x1c8>)
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001502:	f7ff fd91 	bl	8001028 <DESELECT>
	SPI_RxByte();
 8001506:	f7ff fdd1 	bl	80010ac <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <SD_disk_initialize+0x1c0>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SD_disk_initialize+0x1c0>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e001      	b.n	8001526 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001522:	f7ff fe49 	bl	80011b8 <SD_PowerOff>
	}

	return Stat;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <SD_disk_initialize+0x1c0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000000 	.word	0x20000000
 8001538:	20000210 	.word	0x20000210
 800153c:	20000214 	.word	0x20000214

08001540 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SD_disk_status+0x14>
 8001550:	2301      	movs	r3, #1
 8001552:	e002      	b.n	800155a <SD_disk_status+0x1a>
	return Stat;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SD_disk_status+0x28>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_read+0x1c>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SD_disk_read+0x20>
 8001588:	2304      	movs	r3, #4
 800158a:	e051      	b.n	8001630 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <SD_disk_read+0xcc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SD_disk_read+0x32>
 800159a:	2303      	movs	r3, #3
 800159c:	e048      	b.n	8001630 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <SD_disk_read+0xd0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <SD_disk_read+0x44>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	607b      	str	r3, [r7, #4]

	SELECT();
 80015b0:	f7ff fd2d 	bl	800100e <SELECT>

	if (count == 1)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d111      	bne.n	80015de <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2051      	movs	r0, #81	; 0x51
 80015be:	f7ff fe84 	bl	80012ca <SD_SendCmd>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d129      	bne.n	800161c <SD_disk_read+0xb0>
 80015c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff fe0b 	bl	80011e8 <SD_RxDataBlock>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <SD_disk_read+0xb0>
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	e01e      	b.n	800161c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2052      	movs	r0, #82	; 0x52
 80015e2:	f7ff fe72 	bl	80012ca <SD_SendCmd>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d117      	bne.n	800161c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f7ff fdf9 	bl	80011e8 <SD_RxDataBlock>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <SD_disk_read+0xa6>
				buff += 512;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001602:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ed      	bne.n	80015ec <SD_disk_read+0x80>
 8001610:	e000      	b.n	8001614 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001612:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	204c      	movs	r0, #76	; 0x4c
 8001618:	f7ff fe57 	bl	80012ca <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800161c:	f7ff fd04 	bl	8001028 <DESELECT>
	SPI_RxByte();
 8001620:	f7ff fd44 	bl	80010ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000214 	.word	0x20000214

08001640 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <SD_disk_write+0x1c>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <SD_disk_write+0x20>
 800165c:	2304      	movs	r3, #4
 800165e:	e06b      	b.n	8001738 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <SD_disk_write+0x100>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SD_disk_write+0x32>
 800166e:	2303      	movs	r3, #3
 8001670:	e062      	b.n	8001738 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <SD_disk_write+0x100>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SD_disk_write+0x44>
 8001680:	2302      	movs	r3, #2
 8001682:	e059      	b.n	8001738 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <SD_disk_write+0x104>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <SD_disk_write+0x56>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	607b      	str	r3, [r7, #4]

	SELECT();
 8001696:	f7ff fcba 	bl	800100e <SELECT>

	if (count == 1)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d110      	bne.n	80016c2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	2058      	movs	r0, #88	; 0x58
 80016a4:	f7ff fe11 	bl	80012ca <SD_SendCmd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13a      	bne.n	8001724 <SD_disk_write+0xe4>
 80016ae:	21fe      	movs	r1, #254	; 0xfe
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f7ff fdc7 	bl	8001244 <SD_TxDataBlock>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d033      	beq.n	8001724 <SD_disk_write+0xe4>
			count = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	e030      	b.n	8001724 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <SD_disk_write+0x104>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2077      	movs	r0, #119	; 0x77
 80016d2:	f7ff fdfa 	bl	80012ca <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	2057      	movs	r0, #87	; 0x57
 80016da:	f7ff fdf6 	bl	80012ca <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2059      	movs	r0, #89	; 0x59
 80016e2:	f7ff fdf2 	bl	80012ca <SD_SendCmd>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016ec:	21fc      	movs	r1, #252	; 0xfc
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fda8 	bl	8001244 <SD_TxDataBlock>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <SD_disk_write+0xd0>
				buff += 512;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001700:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <SD_disk_write+0xac>
 800170e:	e000      	b.n	8001712 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001710:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001712:	21fd      	movs	r1, #253	; 0xfd
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fd95 	bl	8001244 <SD_TxDataBlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <SD_disk_write+0xe4>
			{
				count = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001724:	f7ff fc80 	bl	8001028 <DESELECT>
	SPI_RxByte();
 8001728:	f7ff fcc0 	bl	80010ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000214 	.word	0x20000214

08001748 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	; 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	603a      	str	r2, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	460b      	mov	r3, r1
 8001756:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SD_disk_ioctl+0x1e>
 8001762:	2304      	movs	r3, #4
 8001764:	e115      	b.n	8001992 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d124      	bne.n	80017bc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d012      	beq.n	80017a0 <SD_disk_ioctl+0x58>
 800177a:	2b02      	cmp	r3, #2
 800177c:	dc1a      	bgt.n	80017b4 <SD_disk_ioctl+0x6c>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <SD_disk_ioctl+0x40>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d006      	beq.n	8001794 <SD_disk_ioctl+0x4c>
 8001786:	e015      	b.n	80017b4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001788:	f7ff fd16 	bl	80011b8 <SD_PowerOff>
			res = RES_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001792:	e0fc      	b.n	800198e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001794:	f7ff fcce 	bl	8001134 <SD_PowerOn>
			res = RES_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800179e:	e0f6      	b.n	800198e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	1c5c      	adds	r4, r3, #1
 80017a4:	f7ff fd14 	bl	80011d0 <SD_CheckPower>
 80017a8:	4603      	mov	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017b2:	e0ec      	b.n	800198e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017b4:	2304      	movs	r3, #4
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017ba:	e0e8      	b.n	800198e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017bc:	4b77      	ldr	r3, [pc, #476]	; (800199c <SD_disk_ioctl+0x254>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SD_disk_ioctl+0x86>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0e1      	b.n	8001992 <SD_disk_ioctl+0x24a>

		SELECT();
 80017ce:	f7ff fc1e 	bl	800100e <SELECT>

		switch (ctrl)
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	2b0d      	cmp	r3, #13
 80017d6:	f200 80cb 	bhi.w	8001970 <SD_disk_ioctl+0x228>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <SD_disk_ioctl+0x98>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080018db 	.word	0x080018db
 80017e4:	08001819 	.word	0x08001819
 80017e8:	080018cb 	.word	0x080018cb
 80017ec:	08001971 	.word	0x08001971
 80017f0:	08001971 	.word	0x08001971
 80017f4:	08001971 	.word	0x08001971
 80017f8:	08001971 	.word	0x08001971
 80017fc:	08001971 	.word	0x08001971
 8001800:	08001971 	.word	0x08001971
 8001804:	08001971 	.word	0x08001971
 8001808:	08001971 	.word	0x08001971
 800180c:	080018ed 	.word	0x080018ed
 8001810:	08001911 	.word	0x08001911
 8001814:	08001935 	.word	0x08001935
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001818:	2100      	movs	r1, #0
 800181a:	2049      	movs	r0, #73	; 0x49
 800181c:	f7ff fd55 	bl	80012ca <SD_SendCmd>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 80a8 	bne.w	8001978 <SD_disk_ioctl+0x230>
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2110      	movs	r1, #16
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fcda 	bl	80011e8 <SD_RxDataBlock>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 809e 	beq.w	8001978 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800183c:	7b3b      	ldrb	r3, [r7, #12]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10e      	bne.n	8001864 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001846:	7d7b      	ldrb	r3, [r7, #21]
 8001848:	b29a      	uxth	r2, r3
 800184a:	7d3b      	ldrb	r3, [r7, #20]
 800184c:	b29b      	uxth	r3, r3
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	3301      	adds	r3, #1
 8001858:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800185a:	8bfb      	ldrh	r3, [r7, #30]
 800185c:	029a      	lsls	r2, r3, #10
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e02e      	b.n	80018c2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001864:	7c7b      	ldrb	r3, [r7, #17]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	b2da      	uxtb	r2, r3
 800186c:	7dbb      	ldrb	r3, [r7, #22]
 800186e:	09db      	lsrs	r3, r3, #7
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b2da      	uxtb	r2, r3
 8001876:	7d7b      	ldrb	r3, [r7, #21]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f003 0306 	and.w	r3, r3, #6
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3302      	adds	r3, #2
 8001888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800188c:	7d3b      	ldrb	r3, [r7, #20]
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	b2db      	uxtb	r3, r3
 8001892:	b29a      	uxth	r2, r3
 8001894:	7cfb      	ldrb	r3, [r7, #19]
 8001896:	b29b      	uxth	r3, r3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29a      	uxth	r2, r3
 80018a0:	7cbb      	ldrb	r3, [r7, #18]
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018b4:	8bfa      	ldrh	r2, [r7, #30]
 80018b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ba:	3b09      	subs	r3, #9
 80018bc:	409a      	lsls	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018c8:	e056      	b.n	8001978 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018d8:	e055      	b.n	8001986 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018da:	f7ff fc11 	bl	8001100 <SD_ReadyWait>
 80018de:	4603      	mov	r3, r0
 80018e0:	2bff      	cmp	r3, #255	; 0xff
 80018e2:	d14b      	bne.n	800197c <SD_disk_ioctl+0x234>
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018ea:	e047      	b.n	800197c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018ec:	2100      	movs	r1, #0
 80018ee:	2049      	movs	r0, #73	; 0x49
 80018f0:	f7ff fceb 	bl	80012ca <SD_SendCmd>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d142      	bne.n	8001980 <SD_disk_ioctl+0x238>
 80018fa:	2110      	movs	r1, #16
 80018fc:	6a38      	ldr	r0, [r7, #32]
 80018fe:	f7ff fc73 	bl	80011e8 <SD_RxDataBlock>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03b      	beq.n	8001980 <SD_disk_ioctl+0x238>
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800190e:	e037      	b.n	8001980 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001910:	2100      	movs	r1, #0
 8001912:	204a      	movs	r0, #74	; 0x4a
 8001914:	f7ff fcd9 	bl	80012ca <SD_SendCmd>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d132      	bne.n	8001984 <SD_disk_ioctl+0x23c>
 800191e:	2110      	movs	r1, #16
 8001920:	6a38      	ldr	r0, [r7, #32]
 8001922:	f7ff fc61 	bl	80011e8 <SD_RxDataBlock>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d02b      	beq.n	8001984 <SD_disk_ioctl+0x23c>
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001932:	e027      	b.n	8001984 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001934:	2100      	movs	r1, #0
 8001936:	207a      	movs	r0, #122	; 0x7a
 8001938:	f7ff fcc7 	bl	80012ca <SD_SendCmd>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d116      	bne.n	8001970 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001948:	e00b      	b.n	8001962 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800194a:	6a3c      	ldr	r4, [r7, #32]
 800194c:	1c63      	adds	r3, r4, #1
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	f7ff fbac 	bl	80010ac <SPI_RxByte>
 8001954:	4603      	mov	r3, r0
 8001956:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800195c:	3301      	adds	r3, #1
 800195e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001962:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001966:	2b03      	cmp	r3, #3
 8001968:	d9ef      	bls.n	800194a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001970:	2304      	movs	r3, #4
 8001972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001976:	e006      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 8001978:	bf00      	nop
 800197a:	e004      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 800197c:	bf00      	nop
 800197e:	e002      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 8001980:	bf00      	nop
 8001982:	e000      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 8001984:	bf00      	nop
		}

		DESELECT();
 8001986:	f7ff fb4f 	bl	8001028 <DESELECT>
		SPI_RxByte();
 800198a:	f7ff fb8f 	bl	80010ac <SPI_RxByte>
	}

	return res;
 800198e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001992:	4618      	mov	r0, r3
 8001994:	372c      	adds	r7, #44	; 0x2c
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* Registers for interfacing with the sensor */

void send_uart(char *string) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe fc11 	bl	80001d0 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000); // Transmit in blocking mode
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <send_uart+0x2c>)
 80019be:	f004 f809 	bl	80059d4 <HAL_UART_Transmit>
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000031c 	.word	0x2000031c

080019d0 <bufClear>:
		i++;
	return i;
}

/* To clear the buffer */
void bufClear(void) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0

	for (int i = 0; i < 1024; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	e007      	b.n	80019ec <bufClear+0x1c>
		buffer[i] = 0;
 80019dc:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <bufClear+0x34>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	dbf3      	blt.n	80019dc <bufClear+0xc>
	}
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20001430 	.word	0x20001430

08001a08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0b0      	sub	sp, #192	; 0xc0
 8001a0c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a0e:	f000 fd90 	bl	8002532 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a12:	f000 f8c7 	bl	8001ba4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a16:	f000 f9fd 	bl	8001e14 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001a1a:	f000 f9cb 	bl	8001db4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001a1e:	f000 f923 	bl	8001c68 <MX_I2C1_Init>
	MX_TIM16_Init();
 8001a22:	f000 f99f 	bl	8001d64 <MX_TIM16_Init>
	MX_SPI1_Init();
 8001a26:	f000 f95f 	bl	8001ce8 <MX_SPI1_Init>
	MX_FATFS_Init();
 8001a2a:	f004 fc43 	bl	80062b4 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	dfr_initialise(&dfr_s, &hi2c1);
 8001a2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a32:	494c      	ldr	r1, [pc, #304]	; (8001b64 <main+0x15c>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa59 	bl	8000eec <dfr_initialise>
	pm_initialise(&pm_s, &hi2c1);
 8001a3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a3e:	4949      	ldr	r1, [pc, #292]	; (8001b64 <main+0x15c>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fa6e 	bl	8001f22 <pm_initialise>
	sht40_initialise(&sht40_s, &hi2c1);
 8001a46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a4a:	4946      	ldr	r1, [pc, #280]	; (8001b64 <main+0x15c>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fa98 	bl	8001f82 <sht40_initialise>
	ds3231_initialise(&ds3231_s, &hi2c1);
 8001a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a56:	4943      	ldr	r1, [pc, #268]	; (8001b64 <main+0x15c>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa8e 	bl	8000f7a <ds3231_initialise>
//	while (warmUpTimer <= 10)
//		;
//	HAL_TIM_Base_Stop_IT(&htim16);
	/* Mount SD Card */

	fresult = f_mount(&fs, "/", 1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4941      	ldr	r1, [pc, #260]	; (8001b68 <main+0x160>)
 8001a62:	4842      	ldr	r0, [pc, #264]	; (8001b6c <main+0x164>)
 8001a64:	f005 f9f8 	bl	8006e58 <f_mount>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <main+0x168>)
 8001a6e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <main+0x168>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <main+0x78>
		send_uart("SD card mounted successfully ...\n\r");
 8001a78:	483e      	ldr	r0, [pc, #248]	; (8001b74 <main+0x16c>)
 8001a7a:	f7ff ff91 	bl	80019a0 <send_uart>
 8001a7e:	e002      	b.n	8001a86 <main+0x7e>
	} else {
		send_uart("error in mounting sd card ... \n\r");
 8001a80:	483d      	ldr	r0, [pc, #244]	; (8001b78 <main+0x170>)
 8001a82:	f7ff ff8d 	bl	80019a0 <send_uart>
	}

	/***** Card Capacity Details ********/

	/* Check free space */
	f_getfree("", &free_space, &pfs);
 8001a86:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <main+0x174>)
 8001a88:	493d      	ldr	r1, [pc, #244]	; (8001b80 <main+0x178>)
 8001a8a:	483e      	ldr	r0, [pc, #248]	; (8001b84 <main+0x17c>)
 8001a8c:	f005 fa2a 	bl	8006ee4 <f_getfree>

	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <main+0x174>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	3b02      	subs	r3, #2
 8001a98:	4a38      	ldr	r2, [pc, #224]	; (8001b7c <main+0x174>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	8952      	ldrh	r2, [r2, #10]
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd2e 	bl	8000504 <__aeabi_ui2d>
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <main+0x180>)
 8001aae:	f7fe fda3 	bl	80005f8 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f875 	bl	8000ba8 <__aeabi_d2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <main+0x184>)
 8001ac2:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD Card Total Size: \t%lu\n\r", total);
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <main+0x184>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4931      	ldr	r1, [pc, #196]	; (8001b90 <main+0x188>)
 8001acc:	4831      	ldr	r0, [pc, #196]	; (8001b94 <main+0x18c>)
 8001ace:	f005 ffb7 	bl	8007a40 <siprintf>
	send_uart(buffer);
 8001ad2:	4830      	ldr	r0, [pc, #192]	; (8001b94 <main+0x18c>)
 8001ad4:	f7ff ff64 	bl	80019a0 <send_uart>
	bufClear();
 8001ad8:	f7ff ff7a 	bl	80019d0 <bufClear>
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <main+0x174>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	895b      	ldrh	r3, [r3, #10]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <main+0x190>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd09 	bl	8000504 <__aeabi_ui2d>
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <main+0x180>)
 8001af8:	f7fe fd7e 	bl	80005f8 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f850 	bl	8000ba8 <__aeabi_d2uiz>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <main+0x178>)
 8001b0c:	6013      	str	r3, [r2, #0]
	send_uart(buffer);
 8001b0e:	4821      	ldr	r0, [pc, #132]	; (8001b94 <main+0x18c>)
 8001b10:	f7ff ff46 	bl	80019a0 <send_uart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		status = getTime(&ds3231_s);
 8001b14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fa3d 	bl	8000f98 <getTime>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		if (status == HAL_ERROR) {
 8001b24:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d103      	bne.n	8001b34 <main+0x12c>
			send_uart("ERROR\n\r");
 8001b2c:	481b      	ldr	r0, [pc, #108]	; (8001b9c <main+0x194>)
 8001b2e:	f7ff ff37 	bl	80019a0 <send_uart>
 8001b32:	e011      	b.n	8001b58 <main+0x150>
		}
			else{
				sprintf(str, "%02d:%02d:%02d\r\n", ds3231_s.minute, ds3231_s.hour, ds3231_s.second);
 8001b34:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001b44:	1d38      	adds	r0, r7, #4
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4915      	ldr	r1, [pc, #84]	; (8001ba0 <main+0x198>)
 8001b4c:	f005 ff78 	bl	8007a40 <siprintf>
				send_uart(str);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff24 	bl	80019a0 <send_uart>
//		  fresult = f_puts(str, &fil);
//
//		  /* Close file */
//		  f_close(&fil);

			HAL_Delay(1000);
 8001b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5c:	f000 fd5e 	bl	800261c <HAL_Delay>
		status = getTime(&ds3231_s);
 8001b60:	e7d8      	b.n	8001b14 <main+0x10c>
 8001b62:	bf00      	nop
 8001b64:	20000218 	.word	0x20000218
 8001b68:	08009f48 	.word	0x08009f48
 8001b6c:	200003f4 	.word	0x200003f4
 8001b70:	2000142c 	.word	0x2000142c
 8001b74:	08009f4c 	.word	0x08009f4c
 8001b78:	08009f70 	.word	0x08009f70
 8001b7c:	20001830 	.word	0x20001830
 8001b80:	2000183c 	.word	0x2000183c
 8001b84:	08009f94 	.word	0x08009f94
 8001b88:	3fe00000 	.word	0x3fe00000
 8001b8c:	20001838 	.word	0x20001838
 8001b90:	08009f98 	.word	0x08009f98
 8001b94:	20001430 	.word	0x20001430
 8001b98:	20001834 	.word	0x20001834
 8001b9c:	08009fb4 	.word	0x08009fb4
 8001ba0:	08009fbc 	.word	0x08009fbc

08001ba4 <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b096      	sub	sp, #88	; 0x58
 8001ba8:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2244      	movs	r2, #68	; 0x44
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f005 fad2 	bl	800715c <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bca:	f001 fd87 	bl	80036dc <HAL_PWREx_ControlVoltageScaling>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <SystemClock_Config+0x34>
				!= HAL_OK) {
			Error_Handler();
 8001bd4:	f000 f9a0 	bl	8001f18 <Error_Handler>
		}

		/** Configure LSE Drive Capability
		 */
		HAL_PWR_EnableBkUpAccess();
 8001bd8:	f001 fd62 	bl	80036a0 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <SystemClock_Config+0xc0>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <SystemClock_Config+0xc0>)
 8001be4:	f023 0318 	bic.w	r3, r3, #24
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001bec:	2314      	movs	r3, #20
 8001bee:	617b      	str	r3, [r7, #20]
				| RCC_OSCILLATORTYPE_MSI;
		RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
		RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
		RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bfc:	2360      	movs	r3, #96	; 0x60
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c00:	2302      	movs	r3, #2
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c04:	2301      	movs	r3, #1
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLN = 40;
 8001c0c:	2328      	movs	r3, #40	; 0x28
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c10:	2307      	movs	r3, #7
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	653b      	str	r3, [r7, #80]	; 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	657b      	str	r3, [r7, #84]	; 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 fdb1 	bl	8003788 <HAL_RCC_OscConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0x8c>
			Error_Handler();
 8001c2c:	f000 f974 	bl	8001f18 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c30:	230f      	movs	r3, #15
 8001c32:	603b      	str	r3, [r7, #0]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c34:	2303      	movs	r3, #3
 8001c36:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4)
 8001c44:	463b      	mov	r3, r7
 8001c46:	2104      	movs	r1, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 f9b1 	bl	8003fb0 <HAL_RCC_ClockConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0xb4>
				!= HAL_OK) {
			Error_Handler();
 8001c54:	f000 f960 	bl	8001f18 <Error_Handler>
		}

		/** Enable MSI Auto calibration
		 */
		HAL_RCCEx_EnableMSIPLLMode();
 8001c58:	f002 fdc4 	bl	80047e4 <HAL_RCCEx_EnableMSIPLLMode>
	}
 8001c5c:	bf00      	nop
 8001c5e:	3758      	adds	r7, #88	; 0x58
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000

08001c68 <MX_I2C1_Init>:
	/**
	 * @brief I2C1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C1_Init(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
		/* USER CODE END I2C1_Init 0 */

		/* USER CODE BEGIN I2C1_Init 1 */

		/* USER CODE END I2C1_Init 1 */
		hi2c1.Instance = I2C1;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <MX_I2C1_Init+0x78>)
 8001c70:	601a      	str	r2, [r3, #0]
		hi2c1.Init.Timing = 0x10909CEC;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <MX_I2C1_Init+0x7c>)
 8001c76:	605a      	str	r2, [r3, #4]
		hi2c1.Init.OwnAddress1 = 0;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	60da      	str	r2, [r3, #12]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
		hi2c1.Init.OwnAddress2 = 0;
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001ca4:	f000 ff72 	bl	8002b8c <HAL_I2C_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_I2C1_Init+0x4a>
			Error_Handler();
 8001cae:	f000 f933 	bl	8001f18 <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001cb6:	f001 fc5b 	bl	8003570 <HAL_I2CEx_ConfigAnalogFilter>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_I2C1_Init+0x5c>
				!= HAL_OK) {
			Error_Handler();
 8001cc0:	f000 f92a 	bl	8001f18 <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_I2C1_Init+0x74>)
 8001cc8:	f001 fc9d 	bl	8003606 <HAL_I2CEx_ConfigDigitalFilter>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_I2C1_Init+0x6e>
			Error_Handler();
 8001cd2:	f000 f921 	bl	8001f18 <Error_Handler>
		}
		/* USER CODE BEGIN I2C1_Init 2 */

		/* USER CODE END I2C1_Init 2 */

	}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000218 	.word	0x20000218
 8001ce0:	40005400 	.word	0x40005400
 8001ce4:	10909cec 	.word	0x10909cec

08001ce8 <MX_SPI1_Init>:
	/**
	 * @brief SPI1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI1_Init(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI1_Init 1 */

		/* USER CODE END SPI1_Init 1 */
		/* SPI1 parameter configuration*/
		hspi1.Instance = SPI1;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <MX_SPI1_Init+0x78>)
 8001cf0:	601a      	str	r2, [r3, #0]
		hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf8:	605a      	str	r2, [r3, #4]
		hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
		hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d06:	60da      	str	r2, [r3, #12]
		hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
		hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
		hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1a:	619a      	str	r2, [r3, #24]
		hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d1e:	2210      	movs	r2, #16
 8001d20:	61da      	str	r2, [r3, #28]
		hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
		hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
		hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
		hspi1.Init.CRCPolynomial = 7;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d36:	2207      	movs	r2, #7
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
		hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d42:	2208      	movs	r2, #8
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_SPI1_Init+0x74>)
 8001d48:	f002 fe4e 	bl	80049e8 <HAL_SPI_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_SPI1_Init+0x6e>
			Error_Handler();
 8001d52:	f000 f8e1 	bl	8001f18 <Error_Handler>
		}
		/* USER CODE BEGIN SPI1_Init 2 */

		/* USER CODE END SPI1_Init 2 */

	}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000026c 	.word	0x2000026c
 8001d60:	40013000 	.word	0x40013000

08001d64 <MX_TIM16_Init>:
	/**
	 * @brief TIM16 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM16_Init(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
		/* USER CODE END TIM16_Init 0 */

		/* USER CODE BEGIN TIM16_Init 1 */

		/* USER CODE END TIM16_Init 1 */
		htim16.Instance = TIM16;
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <MX_TIM16_Init+0x4c>)
 8001d6c:	601a      	str	r2, [r3, #0]
		htim16.Init.Prescaler = 8000 - 1;
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d70:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d74:	605a      	str	r2, [r3, #4]
		htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
		htim16.Init.Period = 10000 - 1;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d82:	60da      	str	r2, [r3, #12]
		htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
		htim16.Init.RepetitionCounter = 0;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
		htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d98:	f003 fbae 	bl	80054f8 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM16_Init+0x42>
			Error_Handler();
 8001da2:	f000 f8b9 	bl	8001f18 <Error_Handler>
		}
		/* USER CODE BEGIN TIM16_Init 2 */

		/* USER CODE END TIM16_Init 2 */

	}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200002d0 	.word	0x200002d0
 8001db0:	40014400 	.word	0x40014400

08001db4 <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dba:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <MX_USART2_UART_Init+0x5c>)
 8001dbc:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc4:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
		huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001df8:	f003 fd9e 	bl	8005938 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x52>
			Error_Handler();
 8001e02:	f000 f889 	bl	8001f18 <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000031c 	.word	0x2000031c
 8001e10:	40004400 	.word	0x40004400

08001e14 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <MX_GPIO_Init+0xb8>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2108      	movs	r1, #8
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f000 fe6f 	bl	8002b5c <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2108      	movs	r1, #8
 8001e82:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <MX_GPIO_Init+0xbc>)
 8001e84:	f000 fe6a 	bl	8002b5c <HAL_GPIO_WritePin>

		/*Configure GPIO pin : SD_CS_Pin */
		GPIO_InitStruct.Pin = SD_CS_Pin;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea2:	f000 fcf1 	bl	8002888 <HAL_GPIO_Init>

		/*Configure GPIO pin : LD3_Pin */
		GPIO_InitStruct.Pin = LD3_Pin;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_GPIO_Init+0xbc>)
 8001ebe:	f000 fce3 	bl	8002888 <HAL_GPIO_Init>

	}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48000400 	.word	0x48000400

08001ed4 <HAL_TIM_PeriodElapsedCallback>:

	/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
		if (htim == &htim16) {
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10d      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x2c>
			sprintf(str1, "Seconds passed: %d\r\n", warmUpTimer++);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	b2d1      	uxtb	r1, r2
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001eee:	7011      	strb	r1, [r2, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4907      	ldr	r1, [pc, #28]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ef6:	f005 fda3 	bl	8007a40 <siprintf>
			send_uart(str1);
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001efc:	f7ff fd50 	bl	80019a0 <send_uart>

		}
	}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200002d0 	.word	0x200002d0
 8001f0c:	200003a0 	.word	0x200003a0
 8001f10:	08009fd0 	.word	0x08009fd0
 8001f14:	200003a4 	.word	0x200003a4

08001f18 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
}
 8001f1e:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8001f20:	e7fe      	b.n	8001f20 <Error_Handler+0x8>

08001f22 <pm_initialise>:
#include "particulate_matter.h"     // Include header file for pm sensor

HAL_StatusTypeDef pm_initialise(pm_data *dev, I2C_HandleTypeDef *i2cHandle) {
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->pm10_standard = 0;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	809a      	strh	r2, [r3, #4]
	dev->pm25_standard = 0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	80da      	strh	r2, [r3, #6]
	dev->pm100_standard = 0;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	811a      	strh	r2, [r3, #8]

	dev->pm10_env = 0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	815a      	strh	r2, [r3, #10]
	dev->pm25_env = 0;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	819a      	strh	r2, [r3, #12]
	dev->pm100_env = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	81da      	strh	r2, [r3, #14]

	dev->particles_03um = 0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	821a      	strh	r2, [r3, #16]
	dev->particles_05um = 0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	825a      	strh	r2, [r3, #18]
	dev->particles_10um = 0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	829a      	strh	r2, [r3, #20]
	dev->particles_25um = 0;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	82da      	strh	r2, [r3, #22]
	dev->particles_100um = 0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	835a      	strh	r2, [r3, #26]

	return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <sht40_initialise>:
#include "sht40.h"      // Include header file for sht40

HAL_StatusTypeDef sht40_initialise(sht40_data *dev, I2C_HandleTypeDef *i2cHandle) {
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]

	/* Set up the I2C structure */
	dev->i2cHandle = i2cHandle;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	601a      	str	r2, [r3, #0]

	/* Initialise values to zero */
	dev->temperature = 0;
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->humidity = 0;
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_MspInit+0x44>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <HAL_MspInit+0x44>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <HAL_MspInit+0x44>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_MspInit+0x44>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_MspInit+0x44>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_MspInit+0x44>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b09e      	sub	sp, #120	; 0x78
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	2254      	movs	r2, #84	; 0x54
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f005 f899 	bl	800715c <memset>
  if(hi2c->Instance==I2C1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_I2C_MspInit+0xa8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d137      	bne.n	80020a4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002034:	2340      	movs	r3, #64	; 0x40
 8002036:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002038:	2300      	movs	r3, #0
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4618      	mov	r0, r3
 8002042:	f002 f9d9 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800204c:	f7ff ff64 	bl	8001f18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_I2C_MspInit+0xac>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_I2C_MspInit+0xac>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_I2C_MspInit+0xac>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002068:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800206c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206e:	2312      	movs	r3, #18
 8002070:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800207a:	2304      	movs	r3, #4
 800207c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002088:	f000 fbfe 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_I2C_MspInit+0xac>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_I2C_MspInit+0xac>)
 8002092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_I2C_MspInit+0xac>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3778      	adds	r7, #120	; 0x78
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40005400 	.word	0x40005400
 80020b0:	40021000 	.word	0x40021000

080020b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_SPI_MspInit+0x7c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d128      	bne.n	8002128 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020da:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e0:	6613      	str	r3, [r2, #96]	; 0x60
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_SPI_MspInit+0x80>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002106:	23c2      	movs	r3, #194	; 0xc2
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	f000 fbb0 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40013000 	.word	0x40013000
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_TIM_Base_MspInit+0x44>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d113      	bne.n	8002172 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_TIM_Base_MspInit+0x48>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_TIM_Base_MspInit+0x48>)
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	6613      	str	r3, [r2, #96]	; 0x60
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_TIM_Base_MspInit+0x48>)
 8002158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2019      	movs	r0, #25
 8002168:	f000 fb57 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800216c:	2019      	movs	r0, #25
 800216e:	f000 fb70 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40014400 	.word	0x40014400
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b09e      	sub	sp, #120	; 0x78
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	2254      	movs	r2, #84	; 0x54
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 ffd9 	bl	800715c <memset>
  if(huart->Instance==USART2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a28      	ldr	r2, [pc, #160]	; (8002250 <HAL_UART_MspInit+0xcc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d148      	bne.n	8002246 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021b8:	2300      	movs	r3, #0
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 f919 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021cc:	f7ff fea4 	bl	8001f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_UART_MspInit+0xd0>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_UART_MspInit+0xd0>)
 80021d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021da:	6593      	str	r3, [r2, #88]	; 0x58
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_UART_MspInit+0xd0>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_UART_MspInit+0xd0>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_UART_MspInit+0xd0>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_UART_MspInit+0xd0>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002200:	2304      	movs	r3, #4
 8002202:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002210:	2307      	movs	r3, #7
 8002212:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f000 fb33 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002226:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002234:	2303      	movs	r3, #3
 8002236:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f000 fb21 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002246:	bf00      	nop
 8002248:	3778      	adds	r7, #120	; 0x78
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40004400 	.word	0x40004400
 8002254:	40021000 	.word	0x40021000

08002258 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

	if (Timer1 > 0)
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <SDTimer_Handler+0x40>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <SDTimer_Handler+0x1c>
		Timer1--;
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <SDTimer_Handler+0x40>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <SDTimer_Handler+0x40>)
 8002272:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0)
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <SDTimer_Handler+0x44>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <SDTimer_Handler+0x34>
		Timer2--;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <SDTimer_Handler+0x44>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <SDTimer_Handler+0x44>)
 800228a:	701a      	strb	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000210 	.word	0x20000210
 800229c:	20000212 	.word	0x20000212

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <SysTick_Handler+0x30>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <SysTick_Handler+0x30>)
 80022f8:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10){
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <SysTick_Handler+0x30>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b09      	cmp	r3, #9
 8002302:	d904      	bls.n	800230e <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Handler+0x30>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800230a:	f7ff ffa5 	bl	8002258 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230e:	f000 f965 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20001840 	.word	0x20001840

0800231c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002322:	f003 f940 	bl	80055a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200002d0 	.word	0x200002d0

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
	return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_kill>:

int _kill(int pid, int sig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800234a:	f004 fedd 	bl	8007108 <__errno>
 800234e:	4603      	mov	r3, r0
 8002350:	2216      	movs	r2, #22
 8002352:	601a      	str	r2, [r3, #0]
	return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_exit>:

void _exit (int status)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffe7 	bl	8002340 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002372:	e7fe      	b.n	8002372 <_exit+0x12>

08002374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e00a      	b.n	800239c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002386:	f3af 8000 	nop.w
 800238a:	4601      	mov	r1, r0
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	60ba      	str	r2, [r7, #8]
 8002392:	b2ca      	uxtb	r2, r1
 8002394:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbf0      	blt.n	8002386 <_read+0x12>
	}

return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e009      	b.n	80023d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbf1      	blt.n	80023c0 <_write+0x12>
	}
	return len;
 80023dc:	687b      	ldr	r3, [r7, #4]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_close>:

int _close(int file)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
	return -1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240e:	605a      	str	r2, [r3, #4]
	return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <_isatty>:

int _isatty(int file)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	return 1;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
	return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <_sbrk+0x5c>)
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <_sbrk+0x60>)
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <_sbrk+0x64>)
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <_sbrk+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002480:	f004 fe42 	bl	8007108 <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	220c      	movs	r2, #12
 8002488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	e009      	b.n	80024a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <_sbrk+0x64>)
 80024a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20010000 	.word	0x20010000
 80024b0:	00000400 	.word	0x00000400
 80024b4:	20001844 	.word	0x20001844
 80024b8:	20001a98 	.word	0x20001a98

080024bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e4:	f7ff ffea 	bl	80024bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e8:	480c      	ldr	r0, [pc, #48]	; (800251c <LoopForever+0x6>)
  ldr r1, =_edata
 80024ea:	490d      	ldr	r1, [pc, #52]	; (8002520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024ec:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <LoopForever+0xe>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002500:	4c0a      	ldr	r4, [pc, #40]	; (800252c <LoopForever+0x16>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800250e:	f004 fe01 	bl	8007114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002512:	f7ff fa79 	bl	8001a08 <main>

08002516 <LoopForever>:

LoopForever:
    b LoopForever
 8002516:	e7fe      	b.n	8002516 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002518:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002524:	0800a41c 	.word	0x0800a41c
  ldr r2, =_sbss
 8002528:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800252c:	20001a98 	.word	0x20001a98

08002530 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC1_IRQHandler>

08002532 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f961 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002542:	2000      	movs	r0, #0
 8002544:	f000 f80e 	bl	8002564 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	e001      	b.n	8002558 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002554:	f7ff fd32 	bl	8001fbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002558:	79fb      	ldrb	r3, [r7, #7]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_InitTick+0x6c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002578:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_InitTick+0x70>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_InitTick+0x6c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f96d 	bl	800286e <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d809      	bhi.n	80025b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 f937 	bl	800281a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_InitTick+0x74>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e004      	b.n	80025c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e001      	b.n	80025c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	20000004 	.word	0x20000004
 80025d8:	20000008 	.word	0x20000008

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	20001848 	.word	0x20001848

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20001848 	.word	0x20001848

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000000c 	.word	0x2000000c

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff3e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff31 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e148      	b.n	8002b2a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 813a 	beq.w	8002b24 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d005      	beq.n	80028c8 <HAL_GPIO_Init+0x40>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d130      	bne.n	800292a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fe:	2201      	movs	r2, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 0201 	and.w	r2, r3, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b03      	cmp	r3, #3
 8002934:	d017      	beq.n	8002966 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d123      	bne.n	80029ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	6939      	ldr	r1, [r7, #16]
 80029b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8094 	beq.w	8002b24 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fc:	4b52      	ldr	r3, [pc, #328]	; (8002b48 <HAL_GPIO_Init+0x2c0>)
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	4a51      	ldr	r2, [pc, #324]	; (8002b48 <HAL_GPIO_Init+0x2c0>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6613      	str	r3, [r2, #96]	; 0x60
 8002a08:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x2c0>)
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a14:	4a4d      	ldr	r2, [pc, #308]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a3e:	d00d      	beq.n	8002a5c <HAL_GPIO_Init+0x1d4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a43      	ldr	r2, [pc, #268]	; (8002b50 <HAL_GPIO_Init+0x2c8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <HAL_GPIO_Init+0x1d0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a42      	ldr	r2, [pc, #264]	; (8002b54 <HAL_GPIO_Init+0x2cc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d101      	bne.n	8002a54 <HAL_GPIO_Init+0x1cc>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e004      	b.n	8002a5e <HAL_GPIO_Init+0x1d6>
 8002a54:	2307      	movs	r3, #7
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x1d6>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_GPIO_Init+0x1d6>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a6e:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aa0:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aca:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f aeaf 	bne.w	8002898 <HAL_GPIO_Init+0x10>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	48000400 	.word	0x48000400
 8002b54:	48000800 	.word	0x48000800
 8002b58:	40010400 	.word	0x40010400

08002b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b6c:	787b      	ldrb	r3, [r7, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e081      	b.n	8002ca2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fa26 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	e006      	b.n	8002c14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d104      	bne.n	8002c26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	f040 80da 	bne.w	8002e82 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x30>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0d3      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x1d8>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ce4:	f7ff fc8e 	bl	8002604 <HAL_GetTick>
 8002ce8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2319      	movs	r3, #25
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f9e6 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0be      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2221      	movs	r2, #33	; 0x21
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2210      	movs	r2, #16
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	893a      	ldrh	r2, [r7, #8]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2bff      	cmp	r3, #255	; 0xff
 8002d36:	d90e      	bls.n	8002d56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	22ff      	movs	r2, #255	; 0xff
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	8979      	ldrh	r1, [r7, #10]
 8002d46:	4b51      	ldr	r3, [pc, #324]	; (8002e8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fbdc 	bl	800350c <I2C_TransferConfig>
 8002d54:	e06c      	b.n	8002e30 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	8979      	ldrh	r1, [r7, #10]
 8002d68:	4b48      	ldr	r3, [pc, #288]	; (8002e8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fbcb 	bl	800350c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d76:	e05b      	b.n	8002e30 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6a39      	ldr	r1, [r7, #32]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f9e3 	bl	8003148 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e07b      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d034      	beq.n	8002e30 <HAL_I2C_Master_Transmit+0x184>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d130      	bne.n	8002e30 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f975 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e04d      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	d90e      	bls.n	8002e10 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	8979      	ldrh	r1, [r7, #10]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fb7f 	bl	800350c <I2C_TransferConfig>
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	8979      	ldrh	r1, [r7, #10]
 8002e22:	2300      	movs	r3, #0
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fb6e 	bl	800350c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d19e      	bne.n	8002d78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f9c2 	bl	80031c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01a      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2220      	movs	r2, #32
 8002e54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e62:	400b      	ands	r3, r1
 8002e64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	80002000 	.word	0x80002000
 8002e90:	fe00e800 	.word	0xfe00e800

08002e94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	817b      	strh	r3, [r7, #10]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	f040 80db 	bne.w	800306c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_I2C_Master_Receive+0x30>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e0d4      	b.n	800306e <HAL_I2C_Master_Receive+0x1da>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ecc:	f7ff fb9a 	bl	8002604 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2319      	movs	r3, #25
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8f2 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0bf      	b.n	800306e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2222      	movs	r2, #34	; 0x22
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	893a      	ldrh	r2, [r7, #8]
 8002f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2bff      	cmp	r3, #255	; 0xff
 8002f1e:	d90e      	bls.n	8002f3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	22ff      	movs	r2, #255	; 0xff
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	8979      	ldrh	r1, [r7, #10]
 8002f2e:	4b52      	ldr	r3, [pc, #328]	; (8003078 <HAL_I2C_Master_Receive+0x1e4>)
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fae8 	bl	800350c <I2C_TransferConfig>
 8002f3c:	e06d      	b.n	800301a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	8979      	ldrh	r1, [r7, #10]
 8002f50:	4b49      	ldr	r3, [pc, #292]	; (8003078 <HAL_I2C_Master_Receive+0x1e4>)
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fad7 	bl	800350c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f5e:	e05c      	b.n	800301a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	6a39      	ldr	r1, [r7, #32]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f96b 	bl	8003240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e07c      	b.n	800306e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d034      	beq.n	800301a <HAL_I2C_Master_Receive+0x186>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d130      	bne.n	800301a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f880 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e04d      	b.n	800306e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2bff      	cmp	r3, #255	; 0xff
 8002fda:	d90e      	bls.n	8002ffa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	8979      	ldrh	r1, [r7, #10]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa8a 	bl	800350c <I2C_TransferConfig>
 8002ff8:	e00f      	b.n	800301a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	b2da      	uxtb	r2, r3
 800300a:	8979      	ldrh	r1, [r7, #10]
 800300c:	2300      	movs	r3, #0
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fa79 	bl	800350c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d19d      	bne.n	8002f60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	6a39      	ldr	r1, [r7, #32]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f8cd 	bl	80031c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e01a      	b.n	800306e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2220      	movs	r2, #32
 800303e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_I2C_Master_Receive+0x1e8>)
 800304c:	400b      	ands	r3, r1
 800304e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	80002400 	.word	0x80002400
 800307c:	fe00e800 	.word	0xfe00e800

08003080 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d103      	bne.n	800309e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d007      	beq.n	80030bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	619a      	str	r2, [r3, #24]
  }
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d8:	e022      	b.n	8003120 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d01e      	beq.n	8003120 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7ff fa8f 	bl	8002604 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d113      	bne.n	8003120 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e00f      	b.n	8003140 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	429a      	cmp	r2, r3
 800313c:	d0cd      	beq.n	80030da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003154:	e02c      	b.n	80031b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8ea 	bl	8003334 <I2C_IsErrorOccurred>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02a      	b.n	80031c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d01e      	beq.n	80031b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003172:	f7ff fa47 	bl	8002604 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d113      	bne.n	80031b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d1cb      	bne.n	8003156 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d4:	e028      	b.n	8003228 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f8aa 	bl	8003334 <I2C_IsErrorOccurred>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e026      	b.n	8003238 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7ff fa0b 	bl	8002604 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d113      	bne.n	8003228 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e007      	b.n	8003238 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b20      	cmp	r3, #32
 8003234:	d1cf      	bne.n	80031d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800324c:	e064      	b.n	8003318 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f86e 	bl	8003334 <I2C_IsErrorOccurred>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e062      	b.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b20      	cmp	r3, #32
 800326e:	d138      	bne.n	80032e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b04      	cmp	r3, #4
 800327c:	d105      	bne.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e04e      	b.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d107      	bne.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2204      	movs	r2, #4
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
 80032a6:	e002      	b.n	80032ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2220      	movs	r2, #32
 80032b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80032c2:	400b      	ands	r3, r1
 80032c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e022      	b.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7ff f98f 	bl	8002604 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e007      	b.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d193      	bne.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	fe00e800 	.word	0xfe00e800

08003334 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d075      	beq.n	800344c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2210      	movs	r2, #16
 8003366:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003368:	e056      	b.n	8003418 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d052      	beq.n	8003418 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7ff f947 	bl	8002604 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_IsErrorOccurred+0x54>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d147      	bne.n	8003418 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800339a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033aa:	d12e      	bne.n	800340a <I2C_IsErrorOccurred+0xd6>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b2:	d02a      	beq.n	800340a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d027      	beq.n	800340a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033ca:	f7ff f91b 	bl	8002604 <HAL_GetTick>
 80033ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d0:	e01b      	b.n	800340a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033d2:	f7ff f917 	bl	8002604 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b19      	cmp	r3, #25
 80033de:	d914      	bls.n	800340a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b20      	cmp	r3, #32
 8003416:	d1dc      	bne.n	80033d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d003      	beq.n	800342e <I2C_IsErrorOccurred+0xfa>
 8003426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800342a:	2b00      	cmp	r3, #0
 800342c:	d09d      	beq.n	800336a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800342e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2220      	movs	r2, #32
 800343c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003490:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01c      	beq.n	80034fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fddc 	bl	8003080 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <I2C_IsErrorOccurred+0x1d4>)
 80034d4:	400b      	ands	r3, r1
 80034d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80034fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	fe00e800 	.word	0xfe00e800

0800350c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	817b      	strh	r3, [r7, #10]
 800351a:	4613      	mov	r3, r2
 800351c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800351e:	897b      	ldrh	r3, [r7, #10]
 8003520:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003524:	7a7b      	ldrb	r3, [r7, #9]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800352c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	4313      	orrs	r3, r2
 8003536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	0d5b      	lsrs	r3, r3, #21
 8003546:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <I2C_TransferConfig+0x60>)
 800354c:	430b      	orrs	r3, r1
 800354e:	43db      	mvns	r3, r3
 8003550:	ea02 0103 	and.w	r1, r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	03ff63ff 	.word	0x03ff63ff

08003570 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b20      	cmp	r3, #32
 8003584:	d138      	bne.n	80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003590:	2302      	movs	r3, #2
 8003592:	e032      	b.n	80035fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b20      	cmp	r3, #32
 800361a:	d139      	bne.n	8003690 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003626:	2302      	movs	r3, #2
 8003628:	e033      	b.n	8003692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2224      	movs	r2, #36	; 0x24
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003658:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40007000 	.word	0x40007000

080036c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000

080036dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ea:	d130      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d038      	beq.n	800376c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2232      	movs	r2, #50	; 0x32
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9b      	lsrs	r3, r3, #18
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003720:	e002      	b.n	8003728 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003734:	d102      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f2      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	d110      	bne.n	800376c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e00f      	b.n	800376e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d007      	beq.n	800376c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003764:	4a05      	ldr	r2, [pc, #20]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40007000 	.word	0x40007000
 8003780:	20000004 	.word	0x20000004
 8003784:	431bde83 	.word	0x431bde83

08003788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f000 bc02 	b.w	8003fa0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379c:	4b96      	ldr	r3, [pc, #600]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a6:	4b94      	ldr	r3, [pc, #592]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80e4 	beq.w	8003986 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4c>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	f040 808b 	bne.w	80038e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	f040 8087 	bne.w	80038e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037d4:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_OscConfig+0x64>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e3d9      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1a      	ldr	r2, [r3, #32]
 80037f0:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_RCC_OscConfig+0x7e>
 80037fc:	4b7e      	ldr	r3, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003804:	e005      	b.n	8003812 <HAL_RCC_OscConfig+0x8a>
 8003806:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003812:	4293      	cmp	r3, r2
 8003814:	d223      	bcs.n	800385e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fd8c 	bl	8004338 <RCC_SetFlashLatencyFromMSIRange>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e3ba      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382a:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a72      	ldr	r2, [pc, #456]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	496d      	ldr	r1, [pc, #436]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003848:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	4968      	ldr	r1, [pc, #416]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	e025      	b.n	80038aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385e:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4960      	ldr	r1, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	495b      	ldr	r1, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fd4c 	bl	8004338 <RCC_SetFlashLatencyFromMSIRange>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e37a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038aa:	f000 fc81 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4950      	ldr	r1, [pc, #320]	; (80039fc <HAL_RCC_OscConfig+0x274>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	4a4e      	ldr	r2, [pc, #312]	; (8003a00 <HAL_RCC_OscConfig+0x278>)
 80038c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038ca:	4b4e      	ldr	r3, [pc, #312]	; (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fe48 	bl	8002564 <HAL_InitTick>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d052      	beq.n	8003984 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	e35e      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d032      	beq.n	8003950 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a42      	ldr	r2, [pc, #264]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f6:	f7fe fe85 	bl	8002604 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038fe:	f7fe fe81 	bl	8002604 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e347      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a35      	ldr	r2, [pc, #212]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003922:	f043 0308 	orr.w	r3, r3, #8
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4930      	ldr	r1, [pc, #192]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393a:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	492b      	ldr	r1, [pc, #172]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
 800394e:	e01a      	b.n	8003986 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003950:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800395c:	f7fe fe52 	bl	8002604 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003964:	f7fe fe4e 	bl	8002604 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e314      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x1dc>
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003984:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d073      	beq.n	8003a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_OscConfig+0x21c>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d10e      	bne.n	80039bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d10b      	bne.n	80039bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d063      	beq.n	8003a78 <HAL_RCC_OscConfig+0x2f0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d15f      	bne.n	8003a78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e2f1      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x24c>
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e025      	b.n	8003a20 <HAL_RCC_OscConfig+0x298>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039dc:	d114      	bne.n	8003a08 <HAL_RCC_OscConfig+0x280>
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80039e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a02      	ldr	r2, [pc, #8]	; (80039f8 <HAL_RCC_OscConfig+0x270>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e013      	b.n	8003a20 <HAL_RCC_OscConfig+0x298>
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009fe8 	.word	0x08009fe8
 8003a00:	20000004 	.word	0x20000004
 8003a04:	20000008 	.word	0x20000008
 8003a08:	4ba0      	ldr	r3, [pc, #640]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a9f      	ldr	r2, [pc, #636]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b9d      	ldr	r3, [pc, #628]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a9c      	ldr	r2, [pc, #624]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe fdec 	bl	8002604 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe fde8 	bl	8002604 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e2ae      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a42:	4b92      	ldr	r3, [pc, #584]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2a8>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe fdd8 	bl	8002604 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe fdd4 	bl	8002604 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e29a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6a:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2d0>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d060      	beq.n	8003b48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_OscConfig+0x310>
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d116      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a98:	4b7c      	ldr	r3, [pc, #496]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x328>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e277      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	4973      	ldr	r1, [pc, #460]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac4:	e040      	b.n	8003b48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d023      	beq.n	8003b16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ace:	4b6f      	ldr	r3, [pc, #444]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6e      	ldr	r2, [pc, #440]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fe fd93 	bl	8002604 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7fe fd8f 	bl	8002604 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e255      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af4:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b62      	ldr	r3, [pc, #392]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	495f      	ldr	r1, [pc, #380]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
 8003b14:	e018      	b.n	8003b48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b16:	4b5d      	ldr	r3, [pc, #372]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fe fd6f 	bl	8002604 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fe fd6b 	bl	8002604 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e231      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b3c:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03c      	beq.n	8003bce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5c:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b62:	4a4a      	ldr	r2, [pc, #296]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fd4a 	bl	8002604 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fe fd46 	bl	8002604 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e20c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b86:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ef      	beq.n	8003b74 <HAL_RCC_OscConfig+0x3ec>
 8003b94:	e01b      	b.n	8003bce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b96:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9c:	4a3b      	ldr	r2, [pc, #236]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fd2d 	bl	8002604 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fe fd29 	bl	8002604 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1ef      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ef      	bne.n	8003bae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a6 	beq.w	8003d28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003be0:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf8:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x508>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d118      	bne.n	8003c46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c14:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <HAL_RCC_OscConfig+0x508>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <HAL_RCC_OscConfig+0x508>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c20:	f7fe fcf0 	bl	8002604 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c28:	f7fe fcec 	bl	8002604 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1b2      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3a:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_RCC_OscConfig+0x508>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4d8>
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c5e:	e029      	b.n	8003cb4 <HAL_RCC_OscConfig+0x52c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d115      	bne.n	8003c94 <HAL_RCC_OscConfig+0x50c>
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	4a03      	ldr	r2, [pc, #12]	; (8003c8c <HAL_RCC_OscConfig+0x504>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c88:	e014      	b.n	8003cb4 <HAL_RCC_OscConfig+0x52c>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
 8003c94:	4b9a      	ldr	r3, [pc, #616]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	4a99      	ldr	r2, [pc, #612]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca4:	4b96      	ldr	r3, [pc, #600]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	4a95      	ldr	r2, [pc, #596]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d016      	beq.n	8003cea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fe fca2 	bl	8002604 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fc9e 	bl	8002604 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e162      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cda:	4b89      	ldr	r3, [pc, #548]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ed      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x53c>
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fe fc8b 	bl	8002604 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe fc87 	bl	8002604 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e14b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d08:	4b7d      	ldr	r3, [pc, #500]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ed      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b78      	ldr	r3, [pc, #480]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	4a77      	ldr	r2, [pc, #476]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d03c      	beq.n	8003dae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d3c:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d42:	4a6f      	ldr	r2, [pc, #444]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe fc5a 	bl	8002604 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d54:	f7fe fc56 	bl	8002604 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e11c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d66:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ef      	beq.n	8003d54 <HAL_RCC_OscConfig+0x5cc>
 8003d74:	e01b      	b.n	8003dae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d76:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d7c:	4a60      	ldr	r2, [pc, #384]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fe fc3d 	bl	8002604 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8e:	f7fe fc39 	bl	8002604 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0ff      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003da0:	4b57      	ldr	r3, [pc, #348]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ef      	bne.n	8003d8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80f3 	beq.w	8003f9e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	f040 80c9 	bne.w	8003f54 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dc2:	4b4f      	ldr	r3, [pc, #316]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0203 	and.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d12c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	3b01      	subs	r3, #1
 8003de2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d123      	bne.n	8003e30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d11b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d113      	bne.n	8003e30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	3b01      	subs	r3, #1
 8003e16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d06b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d062      	beq.n	8003efc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e36:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0ac      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e52:	f7fe fbd7 	bl	8002604 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fe fbd3 	bl	8002604 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e099      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_OscConfig+0x77c>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0112      	lsls	r2, r2, #4
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e92:	0212      	lsls	r2, r2, #8
 8003e94:	4311      	orrs	r1, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e9a:	0852      	lsrs	r2, r2, #1
 8003e9c:	3a01      	subs	r2, #1
 8003e9e:	0552      	lsls	r2, r2, #21
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ea6:	0852      	lsrs	r2, r2, #1
 8003ea8:	3a01      	subs	r2, #1
 8003eaa:	0652      	lsls	r2, r2, #25
 8003eac:	4311      	orrs	r1, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eb2:	06d2      	lsls	r2, r2, #27
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	4912      	ldr	r1, [pc, #72]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ed4:	f7fe fb96 	bl	8002604 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe fb92 	bl	8002604 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e058      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <HAL_RCC_OscConfig+0x778>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003efa:	e050      	b.n	8003f9e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e04f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
 8003f00:	40021000 	.word	0x40021000
 8003f04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d144      	bne.n	8003f9e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f2c:	f7fe fb6a 	bl	8002604 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe fb66 	bl	8002604 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e02c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x7ac>
 8003f52:	e024      	b.n	8003f9e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d01f      	beq.n	8003f9a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f66:	f7fe fb4d 	bl	8002604 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fe fb49 	bl	8002604 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e00f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	4905      	ldr	r1, [pc, #20]	; (8003fa8 <HAL_RCC_OscConfig+0x820>)
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCC_OscConfig+0x824>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	60cb      	str	r3, [r1, #12]
 8003f98:	e001      	b.n	8003f9e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	feeefffc 	.word	0xfeeefffc

08003fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0e7      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b75      	ldr	r3, [pc, #468]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d910      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b72      	ldr	r3, [pc, #456]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 0207 	bic.w	r2, r3, #7
 8003fda:	4970      	ldr	r1, [pc, #448]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b6e      	ldr	r3, [pc, #440]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0cf      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d010      	beq.n	8004022 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	4b66      	ldr	r3, [pc, #408]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400c:	429a      	cmp	r2, r3
 800400e:	d908      	bls.n	8004022 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004010:	4b63      	ldr	r3, [pc, #396]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4960      	ldr	r1, [pc, #384]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d04c      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004036:	4b5a      	ldr	r3, [pc, #360]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d121      	bne.n	8004086 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0a6      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404e:	4b54      	ldr	r3, [pc, #336]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d115      	bne.n	8004086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e09a      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004066:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e08e      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004076:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e086      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004086:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f023 0203 	bic.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4943      	ldr	r1, [pc, #268]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fe fab4 	bl	8002604 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a0:	f7fe fab0 	bl	8002604 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e06e      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 020c 	and.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1eb      	bne.n	80040a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d208      	bcs.n	80040f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	492b      	ldr	r1, [pc, #172]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d210      	bcs.n	8004126 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 0207 	bic.w	r2, r3, #7
 800410c:	4923      	ldr	r1, [pc, #140]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004114:	4b21      	ldr	r3, [pc, #132]	; (800419c <HAL_RCC_ClockConfig+0x1ec>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e036      	b.n	8004194 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	4918      	ldr	r1, [pc, #96]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4910      	ldr	r1, [pc, #64]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004164:	f000 f824 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	490b      	ldr	r1, [pc, #44]	; (80041a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004182:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_ClockConfig+0x1fc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe f9eb 	bl	8002564 <HAL_InitTick>
 800418e:	4603      	mov	r3, r0
 8004190:	72fb      	strb	r3, [r7, #11]

  return status;
 8004192:	7afb      	ldrb	r3, [r7, #11]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40022000 	.word	0x40022000
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08009fe8 	.word	0x08009fe8
 80041a8:	20000004 	.word	0x20000004
 80041ac:	20000008 	.word	0x20000008

080041b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	; 0x24
 80041b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	2300      	movs	r3, #0
 80041bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041be:	4b3e      	ldr	r3, [pc, #248]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c8:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x34>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d121      	bne.n	8004222 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d11e      	bne.n	8004222 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041e4:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e005      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800420c:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004214:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10d      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b04      	cmp	r3, #4
 8004226:	d102      	bne.n	800422e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800422a:	61bb      	str	r3, [r7, #24]
 800422c:	e004      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d101      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004236:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d134      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800423e:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0xa6>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d003      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0xac>
 8004254:	e005      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004258:	617b      	str	r3, [r7, #20]
      break;
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800425e:	617b      	str	r3, [r7, #20]
      break;
 8004260:	e002      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	617b      	str	r3, [r7, #20]
      break;
 8004266:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	3301      	adds	r3, #1
 8004274:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	fb03 f202 	mul.w	r2, r3, r2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	0e5b      	lsrs	r3, r3, #25
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	3301      	adds	r3, #1
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042a8:	69bb      	ldr	r3, [r7, #24]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3724      	adds	r7, #36	; 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	0800a000 	.word	0x0800a000
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	007a1200 	.word	0x007a1200

080042c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000004 	.word	0x20000004

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	08009ff8 	.word	0x08009ff8

0800430c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004310:	f7ff ffda 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0adb      	lsrs	r3, r3, #11
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	08009ff8 	.word	0x08009ff8

08004338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004350:	f7ff f9b6 	bl	80036c0 <HAL_PWREx_GetVoltageRange>
 8004354:	6178      	str	r0, [r7, #20]
 8004356:	e014      	b.n	8004382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004362:	6593      	str	r3, [r2, #88]	; 0x58
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004370:	f7ff f9a6 	bl	80036c0 <HAL_PWREx_GetVoltageRange>
 8004374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004376:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800437c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004388:	d10b      	bne.n	80043a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b80      	cmp	r3, #128	; 0x80
 800438e:	d919      	bls.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2ba0      	cmp	r3, #160	; 0xa0
 8004394:	d902      	bls.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004396:	2302      	movs	r3, #2
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	e013      	b.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800439c:	2301      	movs	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	e010      	b.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d902      	bls.n	80043ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043a8:	2303      	movs	r3, #3
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e00a      	b.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b80      	cmp	r3, #128	; 0x80
 80043b2:	d102      	bne.n	80043ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043b4:	2302      	movs	r3, #2
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e004      	b.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b70      	cmp	r3, #112	; 0x70
 80043be:	d101      	bne.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043c0:	2301      	movs	r3, #1
 80043c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f023 0207 	bic.w	r2, r3, #7
 80043cc:	4909      	ldr	r1, [pc, #36]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d001      	beq.n	80043e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40022000 	.word	0x40022000

080043f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004400:	2300      	movs	r3, #0
 8004402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004404:	2300      	movs	r3, #0
 8004406:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004410:	2b00      	cmp	r3, #0
 8004412:	d031      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800441c:	d01a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800441e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004422:	d814      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800442c:	d10f      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800442e:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	4a5c      	ldr	r2, [pc, #368]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800443a:	e00c      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f9de 	bl	8004804 <RCCEx_PLLSAI1_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	74fb      	strb	r3, [r7, #19]
      break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445c:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	494e      	ldr	r1, [pc, #312]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004472:	e001      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 809e 	beq.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00d      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	4a3f      	ldr	r2, [pc, #252]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
 80044ac:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b8:	2301      	movs	r3, #1
 80044ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044bc:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a39      	ldr	r2, [pc, #228]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c8:	f7fe f89c 	bl	8002604 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ce:	e009      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d0:	f7fe f898 	bl	8002604 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	74fb      	strb	r3, [r7, #19]
        break;
 80044e2:	e005      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e4:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ef      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d15a      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044f6:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	429a      	cmp	r2, r3
 8004510:	d019      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800451e:	4b21      	ldr	r3, [pc, #132]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800453e:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fe f858 	bl	8002604 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004556:	e00b      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fe f854 	bl	8002604 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d902      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	74fb      	strb	r3, [r7, #19]
            break;
 800456e:	e006      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ec      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004592:	4904      	ldr	r1, [pc, #16]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800459a:	e009      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
 80045a0:	e006      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b0:	7c7b      	ldrb	r3, [r7, #17]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b6:	4b8a      	ldr	r3, [pc, #552]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	4a89      	ldr	r2, [pc, #548]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ce:	4b84      	ldr	r3, [pc, #528]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f023 0203 	bic.w	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4980      	ldr	r1, [pc, #512]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f0:	4b7b      	ldr	r3, [pc, #492]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 020c 	bic.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	4978      	ldr	r1, [pc, #480]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004612:	4b73      	ldr	r3, [pc, #460]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	496f      	ldr	r1, [pc, #444]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004634:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	4967      	ldr	r1, [pc, #412]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004656:	4b62      	ldr	r3, [pc, #392]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	495e      	ldr	r1, [pc, #376]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004678:	4b59      	ldr	r3, [pc, #356]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4956      	ldr	r1, [pc, #344]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469a:	4b51      	ldr	r3, [pc, #324]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	494d      	ldr	r1, [pc, #308]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d028      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046bc:	4b48      	ldr	r3, [pc, #288]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4945      	ldr	r1, [pc, #276]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046da:	d106      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046dc:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a3f      	ldr	r2, [pc, #252]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e6:	60d3      	str	r3, [r2, #12]
 80046e8:	e011      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f2:	d10c      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f882 	bl	8004804 <RCCEx_PLLSAI1_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d028      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800471a:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	492d      	ldr	r1, [pc, #180]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004738:	d106      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473a:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004744:	60d3      	str	r3, [r2, #12]
 8004746:	e011      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004750:	d10c      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2101      	movs	r1, #1
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f853 	bl	8004804 <RCCEx_PLLSAI1_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01c      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004778:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004786:	4916      	ldr	r1, [pc, #88]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004796:	d10c      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	2102      	movs	r1, #2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f830 	bl	8004804 <RCCEx_PLLSAI1_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a8:	7cfb      	ldrb	r3, [r7, #19]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	4904      	ldr	r1, [pc, #16]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000

080047e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	6013      	str	r3, [r2, #0]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000

08004804 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004812:	4b74      	ldr	r3, [pc, #464]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800481e:	4b71      	ldr	r3, [pc, #452]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0203 	and.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d10d      	bne.n	800484a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
       ||
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004836:	4b6b      	ldr	r3, [pc, #428]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
       ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d047      	beq.n	80048da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e044      	b.n	80048da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d018      	beq.n	800488a <RCCEx_PLLSAI1_Config+0x86>
 8004858:	2b03      	cmp	r3, #3
 800485a:	d825      	bhi.n	80048a8 <RCCEx_PLLSAI1_Config+0xa4>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d002      	beq.n	8004866 <RCCEx_PLLSAI1_Config+0x62>
 8004860:	2b02      	cmp	r3, #2
 8004862:	d009      	beq.n	8004878 <RCCEx_PLLSAI1_Config+0x74>
 8004864:	e020      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004866:	4b5f      	ldr	r3, [pc, #380]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11d      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004876:	e01a      	b.n	80048ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004878:	4b5a      	ldr	r3, [pc, #360]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d116      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004888:	e013      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800488a:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10f      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004896:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048a6:	e006      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      break;
 80048ac:	e004      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10d      	bne.n	80048da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048be:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6819      	ldr	r1, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	430b      	orrs	r3, r1
 80048d4:	4943      	ldr	r1, [pc, #268]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d17c      	bne.n	80049da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048e0:	4b40      	ldr	r3, [pc, #256]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3f      	ldr	r2, [pc, #252]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fd fe8a 	bl	8002604 <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048f2:	e009      	b.n	8004908 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f4:	f7fd fe86 	bl	8002604 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d902      	bls.n	8004908 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	73fb      	strb	r3, [r7, #15]
        break;
 8004906:	e005      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ef      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d15f      	bne.n	80049da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d110      	bne.n	8004942 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004928:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6892      	ldr	r2, [r2, #8]
 8004930:	0211      	lsls	r1, r2, #8
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	06d2      	lsls	r2, r2, #27
 8004938:	430a      	orrs	r2, r1
 800493a:	492a      	ldr	r1, [pc, #168]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493c:	4313      	orrs	r3, r2
 800493e:	610b      	str	r3, [r1, #16]
 8004940:	e027      	b.n	8004992 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d112      	bne.n	800496e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004948:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004950:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
 8004958:	0211      	lsls	r1, r2, #8
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6912      	ldr	r2, [r2, #16]
 800495e:	0852      	lsrs	r2, r2, #1
 8004960:	3a01      	subs	r2, #1
 8004962:	0552      	lsls	r2, r2, #21
 8004964:	430a      	orrs	r2, r1
 8004966:	491f      	ldr	r1, [pc, #124]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004968:	4313      	orrs	r3, r2
 800496a:	610b      	str	r3, [r1, #16]
 800496c:	e011      	b.n	8004992 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004976:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6892      	ldr	r2, [r2, #8]
 800497e:	0211      	lsls	r1, r2, #8
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6952      	ldr	r2, [r2, #20]
 8004984:	0852      	lsrs	r2, r2, #1
 8004986:	3a01      	subs	r2, #1
 8004988:	0652      	lsls	r2, r2, #25
 800498a:	430a      	orrs	r2, r1
 800498c:	4915      	ldr	r1, [pc, #84]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498e:	4313      	orrs	r3, r2
 8004990:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004992:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800499c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499e:	f7fd fe31 	bl	8002604 <HAL_GetTick>
 80049a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049a4:	e009      	b.n	80049ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a6:	f7fd fe2d 	bl	8002604 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d902      	bls.n	80049ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	73fb      	strb	r3, [r7, #15]
          break;
 80049b8:	e005      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ef      	beq.n	80049a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	4903      	ldr	r1, [pc, #12]	; (80049e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e095      	b.n	8004b26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d108      	bne.n	8004a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0a:	d009      	beq.n	8004a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61da      	str	r2, [r3, #28]
 8004a12:	e005      	b.n	8004a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fb3a 	bl	80020b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a60:	d902      	bls.n	8004a68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e002      	b.n	8004a6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_Init+0xa0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	ea42 0103 	orr.w	r1, r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	f003 0204 	and.w	r2, r3, #4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b04:	ea42 0103 	orr.w	r1, r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b088      	sub	sp, #32
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_SPI_Transmit+0x22>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e158      	b.n	8004e02 <HAL_SPI_Transmit+0x2d4>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b58:	f7fd fd54 	bl	8002604 <HAL_GetTick>
 8004b5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b72:	e13d      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x52>
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b84:	e134      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c18:	d94b      	bls.n	8004cb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Transmit+0xfa>
 8004c22:	8afb      	ldrh	r3, [r7, #22]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d13e      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c4c:	e02b      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d112      	bne.n	8004c82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c80:	e011      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c82:	f7fd fcbf 	bl	8002604 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d803      	bhi.n	8004c9a <HAL_SPI_Transmit+0x16c>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x172>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ca4:	e0a4      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ce      	bne.n	8004c4e <HAL_SPI_Transmit+0x120>
 8004cb0:	e07c      	b.n	8004dac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Transmit+0x192>
 8004cba:	8afb      	ldrh	r3, [r7, #22]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d170      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d912      	bls.n	8004cf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	881a      	ldrh	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b02      	subs	r3, #2
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cee:	e058      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d16:	e044      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d12b      	bne.n	8004d7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d912      	bls.n	8004d56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d54:	e025      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7c:	e011      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7e:	f7fd fc41 	bl	8002604 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d803      	bhi.n	8004d96 <HAL_SPI_Transmit+0x268>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d102      	bne.n	8004d9c <HAL_SPI_Transmit+0x26e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004da0:	e026      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b5      	bne.n	8004d18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fb5b 	bl	800546c <SPI_EndRxTxTransaction>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e000      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b08a      	sub	sp, #40	; 0x28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
 8004e16:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x26>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e1fb      	b.n	8005228 <HAL_SPI_TransmitReceive+0x41e>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e38:	f7fd fbe4 	bl	8002604 <HAL_GetTick>
 8004e3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e54:	7efb      	ldrb	r3, [r7, #27]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d00e      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x6e>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e60:	d106      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x66>
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d003      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e76:	e1cd      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x80>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x80>
 8004e84:	887b      	ldrh	r3, [r7, #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e90:	e1c0      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d003      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	887a      	ldrh	r2, [r7, #2]
 8004eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ee8:	d802      	bhi.n	8004ef0 <HAL_SPI_TransmitReceive+0xe6>
 8004eea:	8a3b      	ldrh	r3, [r7, #16]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d908      	bls.n	8004f02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	e007      	b.n	8004f12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d007      	beq.n	8004f30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f38:	d97c      	bls.n	8005034 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x13e>
 8004f42:	8a7b      	ldrh	r3, [r7, #18]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d169      	bne.n	800501c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6c:	e056      	b.n	800501c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d113      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d11c      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x1f2>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d016      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	b292      	uxth	r2, r2
 8004fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ffc:	f7fd fb02 	bl	8002604 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	429a      	cmp	r2, r3
 800500a:	d807      	bhi.n	800501c <HAL_SPI_TransmitReceive+0x212>
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d003      	beq.n	800501c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800501a:	e0fb      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1a3      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x164>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d19d      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x164>
 8005032:	e0df      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_SPI_TransmitReceive+0x23a>
 800503c:	8a7b      	ldrh	r3, [r7, #18]
 800503e:	2b01      	cmp	r3, #1
 8005040:	f040 80cb 	bne.w	80051da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d912      	bls.n	8005074 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	1c9a      	adds	r2, r3, #2
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b02      	subs	r3, #2
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005072:	e0b2      	b.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509a:	e09e      	b.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d134      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02f      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d12c      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d912      	bls.n	80050ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b02      	subs	r3, #2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050e8:	e012      	b.n	8005110 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d148      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x3aa>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d042      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d923      	bls.n	8005182 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	b292      	uxth	r2, r2
 8005146:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b02      	subs	r3, #2
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d81f      	bhi.n	80051b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800517e:	605a      	str	r2, [r3, #4]
 8005180:	e016      	b.n	80051b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f103 020c 	add.w	r2, r3, #12
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	7812      	ldrb	r2, [r2, #0]
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b0:	2301      	movs	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051b4:	f7fd fa26 	bl	8002604 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d803      	bhi.n	80051cc <HAL_SPI_TransmitReceive+0x3c2>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d102      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x3c8>
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051d8:	e01c      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f47f af5b 	bne.w	800509c <HAL_SPI_TransmitReceive+0x292>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f47f af54 	bne.w	800509c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f937 	bl	800546c <SPI_EndRxTxTransaction>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	661a      	str	r2, [r3, #96]	; 0x60
 8005210:	e000      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	; 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005240:	f7fd f9e0 	bl	8002604 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4413      	add	r3, r2
 800524e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005250:	f7fd f9d8 	bl	8002604 <HAL_GetTick>
 8005254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	015b      	lsls	r3, r3, #5
 800525c:	0d1b      	lsrs	r3, r3, #20
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005266:	e054      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d050      	beq.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005270:	f7fd f9c8 	bl	8002604 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	429a      	cmp	r2, r3
 800527e:	d902      	bls.n	8005286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d13d      	bne.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529e:	d111      	bne.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	d004      	beq.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d107      	bne.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052cc:	d10f      	bne.n	80052ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e017      	b.n	8005332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3b01      	subs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	429a      	cmp	r2, r3
 800532e:	d19b      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000004 	.word	0x20000004

08005340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005352:	f7fd f957 	bl	8002604 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	4413      	add	r3, r2
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005362:	f7fd f94f 	bl	8002604 <HAL_GetTick>
 8005366:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005370:	4b3d      	ldr	r3, [pc, #244]	; (8005468 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	00da      	lsls	r2, r3, #3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	0d1b      	lsrs	r3, r3, #20
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005388:	e060      	b.n	800544c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005390:	d107      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d050      	beq.n	800544c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053aa:	f7fd f92b 	bl	8002604 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d902      	bls.n	80053c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d13d      	bne.n	800543c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d8:	d111      	bne.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e2:	d004      	beq.n	80053ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d107      	bne.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005406:	d10f      	bne.n	8005428 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e010      	b.n	800545e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	3b01      	subs	r3, #1
 800544a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d196      	bne.n	800538a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000004 	.word	0x20000004

0800546c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff ff5b 	bl	8005340 <SPI_WaitFifoStateUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e027      	b.n	80054f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fec0 	bl	8005230 <SPI_WaitFlagStateUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	f043 0220 	orr.w	r2, r3, #32
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e014      	b.n	80054f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff ff34 	bl	8005340 <SPI_WaitFifoStateUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e000      	b.n	80054f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e049      	b.n	800559e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fc fe0a 	bl	8002138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f000 f97c 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d122      	bne.n	8005602 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d11b      	bne.n	8005602 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f06f 0202 	mvn.w	r2, #2
 80055d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f905 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 80055ee:	e005      	b.n	80055fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f8f7 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f908 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b04      	cmp	r3, #4
 800560e:	d122      	bne.n	8005656 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d11b      	bne.n	8005656 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0204 	mvn.w	r2, #4
 8005626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f8db 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 8005642:	e005      	b.n	8005650 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f8cd 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8de 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b08      	cmp	r3, #8
 8005662:	d122      	bne.n	80056aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b08      	cmp	r3, #8
 8005670:	d11b      	bne.n	80056aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0208 	mvn.w	r2, #8
 800567a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2204      	movs	r2, #4
 8005680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f8b1 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 8005696:	e005      	b.n	80056a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8a3 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8b4 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d122      	bne.n	80056fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d11b      	bne.n	80056fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0210 	mvn.w	r2, #16
 80056ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2208      	movs	r2, #8
 80056d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f887 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 80056ea:	e005      	b.n	80056f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f879 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f88a 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10e      	bne.n	800572a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d107      	bne.n	800572a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f06f 0201 	mvn.w	r2, #1
 8005722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fc fbd5 	bl	8001ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005734:	2b80      	cmp	r3, #128	; 0x80
 8005736:	d10e      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d107      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f8dd 	bl	8005910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f8d0 	bl	8005924 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f838 	bl	8005820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0220 	mvn.w	r2, #32
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f890 	bl	80058fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <TIM_Base_SetConfig+0xbc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_Base_SetConfig+0x20>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d108      	bne.n	8005866 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <TIM_Base_SetConfig+0xbc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00b      	beq.n	8005886 <TIM_Base_SetConfig+0x52>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005874:	d007      	beq.n	8005886 <TIM_Base_SetConfig+0x52>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <TIM_Base_SetConfig+0xc0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_Base_SetConfig+0x52>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <TIM_Base_SetConfig+0xc4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d108      	bne.n	8005898 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <TIM_Base_SetConfig+0xbc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d007      	beq.n	80058d4 <TIM_Base_SetConfig+0xa0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a0b      	ldr	r2, [pc, #44]	; (80058f4 <TIM_Base_SetConfig+0xc0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0xa0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <TIM_Base_SetConfig+0xc4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d103      	bne.n	80058dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	615a      	str	r2, [r3, #20]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400

080058fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e040      	b.n	80059cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc fc12 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8c0 	bl	8005afc <UART_SetConfig>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e022      	b.n	80059cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fae0 	bl	8005f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fb67 	bl	8006098 <UART_CheckIdleState>
 80059ca:	4603      	mov	r3, r0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	f040 8082 	bne.w	8005af2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_UART_Transmit+0x26>
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e07a      	b.n	8005af4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Transmit+0x38>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e073      	b.n	8005af4 <HAL_UART_Transmit+0x120>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2221      	movs	r2, #33	; 0x21
 8005a20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a22:	f7fc fdef 	bl	8002604 <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a40:	d108      	bne.n	8005a54 <HAL_UART_Transmit+0x80>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	e003      	b.n	8005a5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a64:	e02d      	b.n	8005ac2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2180      	movs	r1, #128	; 0x80
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fb5a 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e039      	b.n	8005af4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10b      	bne.n	8005a9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a92:	b292      	uxth	r2, r2
 8005a94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	3302      	adds	r3, #2
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e008      	b.n	8005ab0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	b292      	uxth	r2, r2
 8005aa8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1cb      	bne.n	8005a66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2140      	movs	r1, #64	; 0x40
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 fb26 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e005      	b.n	8005af4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e000      	b.n	8005af4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005af2:	2302      	movs	r3, #2
  }
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b08a      	sub	sp, #40	; 0x28
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4bb4      	ldr	r3, [pc, #720]	; (8005dfc <UART_SetConfig+0x300>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4aa9      	ldr	r2, [pc, #676]	; (8005e00 <UART_SetConfig+0x304>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b64:	4313      	orrs	r3, r2
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4aa0      	ldr	r2, [pc, #640]	; (8005e04 <UART_SetConfig+0x308>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d126      	bne.n	8005bd4 <UART_SetConfig+0xd8>
 8005b86:	4ba0      	ldr	r3, [pc, #640]	; (8005e08 <UART_SetConfig+0x30c>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d81b      	bhi.n	8005bcc <UART_SetConfig+0xd0>
 8005b94:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0xa0>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	08005bb5 	.word	0x08005bb5
 8005ba8:	08005bc5 	.word	0x08005bc5
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb2:	e080      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bba:	e07c      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc2:	e078      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bca:	e074      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd2:	e070      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a8c      	ldr	r2, [pc, #560]	; (8005e0c <UART_SetConfig+0x310>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d138      	bne.n	8005c50 <UART_SetConfig+0x154>
 8005bde:	4b8a      	ldr	r3, [pc, #552]	; (8005e08 <UART_SetConfig+0x30c>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b0c      	cmp	r3, #12
 8005bea:	d82d      	bhi.n	8005c48 <UART_SetConfig+0x14c>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <UART_SetConfig+0xf8>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c49 	.word	0x08005c49
 8005c04:	08005c39 	.word	0x08005c39
 8005c08:	08005c49 	.word	0x08005c49
 8005c0c:	08005c49 	.word	0x08005c49
 8005c10:	08005c49 	.word	0x08005c49
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	08005c49 	.word	0x08005c49
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2e:	e042      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c36:	e03e      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3e:	e03a      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e036      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e032      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a6a      	ldr	r2, [pc, #424]	; (8005e00 <UART_SetConfig+0x304>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d12a      	bne.n	8005cb0 <UART_SetConfig+0x1b4>
 8005c5a:	4b6b      	ldr	r3, [pc, #428]	; (8005e08 <UART_SetConfig+0x30c>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c68:	d01a      	beq.n	8005ca0 <UART_SetConfig+0x1a4>
 8005c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c6e:	d81b      	bhi.n	8005ca8 <UART_SetConfig+0x1ac>
 8005c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c74:	d00c      	beq.n	8005c90 <UART_SetConfig+0x194>
 8005c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7a:	d815      	bhi.n	8005ca8 <UART_SetConfig+0x1ac>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <UART_SetConfig+0x18c>
 8005c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c84:	d008      	beq.n	8005c98 <UART_SetConfig+0x19c>
 8005c86:	e00f      	b.n	8005ca8 <UART_SetConfig+0x1ac>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8e:	e012      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c90:	2302      	movs	r3, #2
 8005c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c96:	e00e      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9e:	e00a      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca6:	e006      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cae:	e002      	b.n	8005cb6 <UART_SetConfig+0x1ba>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a51      	ldr	r2, [pc, #324]	; (8005e00 <UART_SetConfig+0x304>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d17a      	bne.n	8005db6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d824      	bhi.n	8005d12 <UART_SetConfig+0x216>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <UART_SetConfig+0x1d4>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005d13 	.word	0x08005d13
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005d03 	.word	0x08005d03
 8005ce4:	08005d13 	.word	0x08005d13
 8005ce8:	08005d13 	.word	0x08005d13
 8005cec:	08005d13 	.word	0x08005d13
 8005cf0:	08005d0b 	.word	0x08005d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7fe faf4 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	61f8      	str	r0, [r7, #28]
        break;
 8005cfa:	e010      	b.n	8005d1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cfc:	4b44      	ldr	r3, [pc, #272]	; (8005e10 <UART_SetConfig+0x314>)
 8005cfe:	61fb      	str	r3, [r7, #28]
        break;
 8005d00:	e00d      	b.n	8005d1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d02:	f7fe fa55 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8005d06:	61f8      	str	r0, [r7, #28]
        break;
 8005d08:	e009      	b.n	8005d1e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	61fb      	str	r3, [r7, #28]
        break;
 8005d10:	e005      	b.n	8005d1e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8107 	beq.w	8005f34 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d305      	bcc.n	8005d42 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d903      	bls.n	8005d4a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d48:	e0f4      	b.n	8005f34 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	461c      	mov	r4, r3
 8005d50:	4615      	mov	r5, r2
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	022b      	lsls	r3, r5, #8
 8005d5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d60:	0222      	lsls	r2, r4, #8
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	6849      	ldr	r1, [r1, #4]
 8005d66:	0849      	lsrs	r1, r1, #1
 8005d68:	2000      	movs	r0, #0
 8005d6a:	4688      	mov	r8, r1
 8005d6c:	4681      	mov	r9, r0
 8005d6e:	eb12 0a08 	adds.w	sl, r2, r8
 8005d72:	eb43 0b09 	adc.w	fp, r3, r9
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d84:	4650      	mov	r0, sl
 8005d86:	4659      	mov	r1, fp
 8005d88:	f7fa ff2e 	bl	8000be8 <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4613      	mov	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9a:	d308      	bcc.n	8005dae <UART_SetConfig+0x2b2>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da2:	d204      	bcs.n	8005dae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	60da      	str	r2, [r3, #12]
 8005dac:	e0c2      	b.n	8005f34 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005db4:	e0be      	b.n	8005f34 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbe:	d16a      	bne.n	8005e96 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d834      	bhi.n	8005e32 <UART_SetConfig+0x336>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <UART_SetConfig+0x2d4>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005e15 	.word	0x08005e15
 8005dd8:	08005e1d 	.word	0x08005e1d
 8005ddc:	08005e33 	.word	0x08005e33
 8005de0:	08005e23 	.word	0x08005e23
 8005de4:	08005e33 	.word	0x08005e33
 8005de8:	08005e33 	.word	0x08005e33
 8005dec:	08005e33 	.word	0x08005e33
 8005df0:	08005e2b 	.word	0x08005e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fe fa74 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005df8:	61f8      	str	r0, [r7, #28]
        break;
 8005dfa:	e020      	b.n	8005e3e <UART_SetConfig+0x342>
 8005dfc:	efff69f3 	.word	0xefff69f3
 8005e00:	40008000 	.word	0x40008000
 8005e04:	40013800 	.word	0x40013800
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40004400 	.word	0x40004400
 8005e10:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e14:	f7fe fa7a 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 8005e18:	61f8      	str	r0, [r7, #28]
        break;
 8005e1a:	e010      	b.n	8005e3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e1c:	4b4c      	ldr	r3, [pc, #304]	; (8005f50 <UART_SetConfig+0x454>)
 8005e1e:	61fb      	str	r3, [r7, #28]
        break;
 8005e20:	e00d      	b.n	8005e3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e22:	f7fe f9c5 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8005e26:	61f8      	str	r0, [r7, #28]
        break;
 8005e28:	e009      	b.n	8005e3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2e:	61fb      	str	r3, [r7, #28]
        break;
 8005e30:	e005      	b.n	8005e3e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d077      	beq.n	8005f34 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	005a      	lsls	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	441a      	add	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b0f      	cmp	r3, #15
 8005e5e:	d916      	bls.n	8005e8e <UART_SetConfig+0x392>
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e66:	d212      	bcs.n	8005e8e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f023 030f 	bic.w	r3, r3, #15
 8005e70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	085b      	lsrs	r3, r3, #1
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	8afb      	ldrh	r3, [r7, #22]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	8afa      	ldrh	r2, [r7, #22]
 8005e8a:	60da      	str	r2, [r3, #12]
 8005e8c:	e052      	b.n	8005f34 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e94:	e04e      	b.n	8005f34 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d827      	bhi.n	8005eee <UART_SetConfig+0x3f2>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x3a8>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005edf 	.word	0x08005edf
 8005eb8:	08005eef 	.word	0x08005eef
 8005ebc:	08005eef 	.word	0x08005eef
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005ee7 	.word	0x08005ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fe fa0a 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005ecc:	61f8      	str	r0, [r7, #28]
        break;
 8005ece:	e014      	b.n	8005efa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed0:	f7fe fa1c 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 8005ed4:	61f8      	str	r0, [r7, #28]
        break;
 8005ed6:	e010      	b.n	8005efa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <UART_SetConfig+0x454>)
 8005eda:	61fb      	str	r3, [r7, #28]
        break;
 8005edc:	e00d      	b.n	8005efa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fe f967 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8005ee2:	61f8      	str	r0, [r7, #28]
        break;
 8005ee4:	e009      	b.n	8005efa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	61fb      	str	r3, [r7, #28]
        break;
 8005eec:	e005      	b.n	8005efa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d019      	beq.n	8005f34 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	085a      	lsrs	r2, r3, #1
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	d909      	bls.n	8005f2e <UART_SetConfig+0x432>
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f20:	d205      	bcs.n	8005f2e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60da      	str	r2, [r3, #12]
 8005f2c:	e002      	b.n	8005f34 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3728      	adds	r7, #40	; 0x28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f4e:	bf00      	nop
 8005f50:	00f42400 	.word	0x00f42400

08005f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006052:	d10a      	bne.n	800606a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a8:	f7fc faac 	bl	8002604 <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d10e      	bne.n	80060da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f82d 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e023      	b.n	8006122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d10e      	bne.n	8006106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f817 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e00d      	b.n	8006122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b09c      	sub	sp, #112	; 0x70
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613a:	e0a5      	b.n	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006142:	f000 80a1 	beq.w	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006146:	f7fc fa5d 	bl	8002604 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <UART_WaitOnFlagUntilTimeout+0x32>
 8006156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006158:	2b00      	cmp	r3, #0
 800615a:	d13e      	bne.n	80061da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800616a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006170:	667b      	str	r3, [r7, #100]	; 0x64
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800617c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e6      	bne.n	800615c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	663b      	str	r3, [r7, #96]	; 0x60
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80061b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e067      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d04f      	beq.n	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f6:	d147      	bne.n	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006200:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
 8006222:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e6      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	613b      	str	r3, [r7, #16]
   return(result);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	66bb      	str	r3, [r7, #104]	; 0x68
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3308      	adds	r3, #8
 8006252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006254:	623a      	str	r2, [r7, #32]
 8006256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69f9      	ldr	r1, [r7, #28]
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	61bb      	str	r3, [r7, #24]
   return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e010      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	429a      	cmp	r2, r3
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	f43f af4a 	beq.w	800613c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3770      	adds	r7, #112	; 0x70
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80062b8:	4904      	ldr	r1, [pc, #16]	; (80062cc <MX_FATFS_Init+0x18>)
 80062ba:	4805      	ldr	r0, [pc, #20]	; (80062d0 <MX_FATFS_Init+0x1c>)
 80062bc:	f000 ff14 	bl	80070e8 <FATFS_LinkDriver>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <MX_FATFS_Init+0x20>)
 80062c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80062c8:	bf00      	nop
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20001850 	.word	0x20001850
 80062d0:	20000010 	.word	0x20000010
 80062d4:	2000184c 	.word	0x2000184c

080062d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fb f845 	bl	8001374 <SD_disk_initialize>
 80062ea:	4603      	mov	r3, r0
 80062ec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	4603      	mov	r3, r0
 80062fe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fb f91c 	bl	8001540 <SD_disk_status>
 8006308:	4603      	mov	r3, r0
 800630a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006324:	7bf8      	ldrb	r0, [r7, #15]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	f7fb f91e 	bl	800156c <SD_disk_read>
 8006330:	4603      	mov	r3, r0
 8006332:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800634c:	7bf8      	ldrb	r0, [r7, #15]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	f7fb f974 	bl	8001640 <SD_disk_write>
 8006358:	4603      	mov	r3, r0
 800635a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	603a      	str	r2, [r7, #0]
 800636e:	71fb      	strb	r3, [r7, #7]
 8006370:	460b      	mov	r3, r1
 8006372:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	79b9      	ldrb	r1, [r7, #6]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fb f9e2 	bl	8001748 <SD_disk_ioctl>
 8006384:	4603      	mov	r3, r0
 8006386:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <disk_status+0x30>)
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	79fa      	ldrb	r2, [r7, #7]
 80063a8:	4905      	ldr	r1, [pc, #20]	; (80063c0 <disk_status+0x30>)
 80063aa:	440a      	add	r2, r1
 80063ac:	7a12      	ldrb	r2, [r2, #8]
 80063ae:	4610      	mov	r0, r2
 80063b0:	4798      	blx	r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20001a7c 	.word	0x20001a7c

080063c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	4a0d      	ldr	r2, [pc, #52]	; (800640c <disk_initialize+0x48>)
 80063d6:	5cd3      	ldrb	r3, [r2, r3]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d111      	bne.n	8006400 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	4a0b      	ldr	r2, [pc, #44]	; (800640c <disk_initialize+0x48>)
 80063e0:	2101      	movs	r1, #1
 80063e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	4a09      	ldr	r2, [pc, #36]	; (800640c <disk_initialize+0x48>)
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	79fa      	ldrb	r2, [r7, #7]
 80063f2:	4906      	ldr	r1, [pc, #24]	; (800640c <disk_initialize+0x48>)
 80063f4:	440a      	add	r2, r1
 80063f6:	7a12      	ldrb	r2, [r2, #8]
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20001a7c 	.word	0x20001a7c

08006410 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006410:	b590      	push	{r4, r7, lr}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	4a0a      	ldr	r2, [pc, #40]	; (800644c <disk_read+0x3c>)
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	689c      	ldr	r4, [r3, #8]
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	4a07      	ldr	r2, [pc, #28]	; (800644c <disk_read+0x3c>)
 8006430:	4413      	add	r3, r2
 8006432:	7a18      	ldrb	r0, [r3, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	47a0      	blx	r4
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
}
 8006442:	4618      	mov	r0, r3
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd90      	pop	{r4, r7, pc}
 800644a:	bf00      	nop
 800644c:	20001a7c 	.word	0x20001a7c

08006450 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	4a0a      	ldr	r2, [pc, #40]	; (800648c <disk_write+0x3c>)
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68dc      	ldr	r4, [r3, #12]
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	4a07      	ldr	r2, [pc, #28]	; (800648c <disk_write+0x3c>)
 8006470:	4413      	add	r3, r2
 8006472:	7a18      	ldrb	r0, [r3, #8]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	47a0      	blx	r4
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006480:	7dfb      	ldrb	r3, [r7, #23]
}
 8006482:	4618      	mov	r0, r3
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}
 800648a:	bf00      	nop
 800648c:	20001a7c 	.word	0x20001a7c

08006490 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	603a      	str	r2, [r7, #0]
 800649a:	71fb      	strb	r3, [r7, #7]
 800649c:	460b      	mov	r3, r1
 800649e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <disk_ioctl+0x38>)
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	4906      	ldr	r1, [pc, #24]	; (80064c8 <disk_ioctl+0x38>)
 80064b0:	440a      	add	r2, r1
 80064b2:	7a10      	ldrb	r0, [r2, #8]
 80064b4:	79b9      	ldrb	r1, [r7, #6]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20001a7c 	.word	0x20001a7c

080064cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3301      	adds	r3, #1
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80064dc:	89fb      	ldrh	r3, [r7, #14]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	b21a      	sxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b21b      	sxth	r3, r3
 80064e8:	4313      	orrs	r3, r2
 80064ea:	b21b      	sxth	r3, r3
 80064ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80064ee:	89fb      	ldrh	r3, [r7, #14]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3303      	adds	r3, #3
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	3202      	adds	r2, #2
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	3201      	adds	r2, #1
 8006522:	7812      	ldrb	r2, [r2, #0]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
	return rv;
 8006534:	68fb      	ldr	r3, [r7, #12]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e010      	b.n	8006574 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006552:	4a0d      	ldr	r2, [pc, #52]	; (8006588 <clear_lock+0x44>)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	4413      	add	r3, r2
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	429a      	cmp	r2, r3
 8006560:	d105      	bne.n	800656e <clear_lock+0x2a>
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <clear_lock+0x44>)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	4413      	add	r3, r2
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3301      	adds	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d9eb      	bls.n	8006552 <clear_lock+0xe>
	}
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	2000185c 	.word	0x2000185c

0800658c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	78db      	ldrb	r3, [r3, #3]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d034      	beq.n	800660a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7858      	ldrb	r0, [r3, #1]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065b0:	2301      	movs	r3, #1
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	f7ff ff4c 	bl	8006450 <disk_write>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80065be:	2301      	movs	r3, #1
 80065c0:	73fb      	strb	r3, [r7, #15]
 80065c2:	e022      	b.n	800660a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	1ad2      	subs	r2, r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d217      	bcs.n	800660a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	789b      	ldrb	r3, [r3, #2]
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	e010      	b.n	8006604 <sync_window+0x78>
					wsect += fs->fsize;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7858      	ldrb	r0, [r3, #1]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065f6:	2301      	movs	r3, #1
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	f7ff ff29 	bl	8006450 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3b01      	subs	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d8eb      	bhi.n	80065e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d01b      	beq.n	8006664 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ffad 	bl	800658c <sync_window>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d113      	bne.n	8006664 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7858      	ldrb	r0, [r3, #1]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006646:	2301      	movs	r3, #1
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	f7ff fee1 	bl	8006410 <disk_read>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006654:	f04f 33ff 	mov.w	r3, #4294967295
 8006658:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800665a:	2301      	movs	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d904      	bls.n	800668e <get_fat+0x20>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <get_fat+0x26>
		val = 1;	/* Internal error */
 800668e:	2301      	movs	r3, #1
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	e0bb      	b.n	800680c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006694:	f04f 33ff 	mov.w	r3, #4294967295
 8006698:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f000 8083 	beq.w	80067aa <get_fat+0x13c>
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	f300 80a7 	bgt.w	80067f8 <get_fat+0x18a>
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d002      	beq.n	80066b4 <get_fat+0x46>
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d056      	beq.n	8006760 <get_fat+0xf2>
 80066b2:	e0a1      	b.n	80067f8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	085b      	lsrs	r3, r3, #1
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	899b      	ldrh	r3, [r3, #12]
 80066ca:	4619      	mov	r1, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80066d2:	4413      	add	r3, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	6938      	ldr	r0, [r7, #16]
 80066d8:	f7ff ff9c 	bl	8006614 <move_window>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 808d 	bne.w	80067fe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	60fa      	str	r2, [r7, #12]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	8992      	ldrh	r2, [r2, #12]
 80066ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80066f2:	fb01 f202 	mul.w	r2, r1, r2
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006700:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	899b      	ldrh	r3, [r3, #12]
 800670a:	4619      	mov	r1, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006712:	4413      	add	r3, r2
 8006714:	4619      	mov	r1, r3
 8006716:	6938      	ldr	r0, [r7, #16]
 8006718:	f7ff ff7c 	bl	8006614 <move_window>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d16f      	bne.n	8006802 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	899b      	ldrh	r3, [r3, #12]
 8006726:	461a      	mov	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	fbb3 f1f2 	udiv	r1, r3, r2
 800672e:	fb01 f202 	mul.w	r2, r1, r2
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4413      	add	r3, r2
 8006738:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	461a      	mov	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4313      	orrs	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <get_fat+0xe8>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	e002      	b.n	800675c <get_fat+0xee>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675c:	617b      	str	r3, [r7, #20]
			break;
 800675e:	e055      	b.n	800680c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	899b      	ldrh	r3, [r3, #12]
 8006768:	085b      	lsrs	r3, r3, #1
 800676a:	b29b      	uxth	r3, r3
 800676c:	4619      	mov	r1, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	fbb3 f3f1 	udiv	r3, r3, r1
 8006774:	4413      	add	r3, r2
 8006776:	4619      	mov	r1, r3
 8006778:	6938      	ldr	r0, [r7, #16]
 800677a:	f7ff ff4b 	bl	8006614 <move_window>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d140      	bne.n	8006806 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	8992      	ldrh	r2, [r2, #12]
 8006792:	fbb3 f0f2 	udiv	r0, r3, r2
 8006796:	fb00 f202 	mul.w	r2, r0, r2
 800679a:	1a9b      	subs	r3, r3, r2
 800679c:	440b      	add	r3, r1
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fe94 	bl	80064cc <ld_word>
 80067a4:	4603      	mov	r3, r0
 80067a6:	617b      	str	r3, [r7, #20]
			break;
 80067a8:	e030      	b.n	800680c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	899b      	ldrh	r3, [r3, #12]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	4619      	mov	r1, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80067be:	4413      	add	r3, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	6938      	ldr	r0, [r7, #16]
 80067c4:	f7ff ff26 	bl	8006614 <move_window>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d11d      	bne.n	800680a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	8992      	ldrh	r2, [r2, #12]
 80067dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80067e0:	fb00 f202 	mul.w	r2, r0, r2
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	440b      	add	r3, r1
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fe87 	bl	80064fc <ld_dword>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067f4:	617b      	str	r3, [r7, #20]
			break;
 80067f6:	e009      	b.n	800680c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e006      	b.n	800680c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067fe:	bf00      	nop
 8006800:	e004      	b.n	800680c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006802:	bf00      	nop
 8006804:	e002      	b.n	800680c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006806:	bf00      	nop
 8006808:	e000      	b.n	800680c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800680a:	bf00      	nop
		}
	}

	return val;
 800680c:	697b      	ldr	r3, [r7, #20]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d031      	beq.n	8006890 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e002      	b.n	800683a <get_ldnumber+0x24>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3301      	adds	r3, #1
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b1f      	cmp	r3, #31
 8006840:	d903      	bls.n	800684a <get_ldnumber+0x34>
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b3a      	cmp	r3, #58	; 0x3a
 8006848:	d1f4      	bne.n	8006834 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b3a      	cmp	r3, #58	; 0x3a
 8006850:	d11c      	bne.n	800688c <get_ldnumber+0x76>
			tp = *path;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	60fa      	str	r2, [r7, #12]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	3b30      	subs	r3, #48	; 0x30
 8006862:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b09      	cmp	r3, #9
 8006868:	d80e      	bhi.n	8006888 <get_ldnumber+0x72>
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	429a      	cmp	r2, r3
 8006870:	d10a      	bne.n	8006888 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <get_ldnumber+0x72>
					vol = (int)i;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3301      	adds	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	e002      	b.n	8006892 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800688c:	2300      	movs	r3, #0
 800688e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006890:	693b      	ldr	r3, [r7, #16]
}
 8006892:	4618      	mov	r0, r3
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	70da      	strb	r2, [r3, #3]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f04f 32ff 	mov.w	r2, #4294967295
 80068b6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff feaa 	bl	8006614 <move_window>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <check_fs+0x2a>
 80068c6:	2304      	movs	r3, #4
 80068c8:	e038      	b.n	800693c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3338      	adds	r3, #56	; 0x38
 80068ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fdfa 	bl	80064cc <ld_word>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d001      	beq.n	80068e8 <check_fs+0x48>
 80068e4:	2303      	movs	r3, #3
 80068e6:	e029      	b.n	800693c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068ee:	2be9      	cmp	r3, #233	; 0xe9
 80068f0:	d009      	beq.n	8006906 <check_fs+0x66>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068f8:	2beb      	cmp	r3, #235	; 0xeb
 80068fa:	d11e      	bne.n	800693a <check_fs+0x9a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006902:	2b90      	cmp	r3, #144	; 0x90
 8006904:	d119      	bne.n	800693a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3338      	adds	r3, #56	; 0x38
 800690a:	3336      	adds	r3, #54	; 0x36
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fdf5 	bl	80064fc <ld_dword>
 8006912:	4603      	mov	r3, r0
 8006914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006918:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <check_fs+0xa4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d101      	bne.n	8006922 <check_fs+0x82>
 800691e:	2300      	movs	r3, #0
 8006920:	e00c      	b.n	800693c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3338      	adds	r3, #56	; 0x38
 8006926:	3352      	adds	r3, #82	; 0x52
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fde7 	bl	80064fc <ld_dword>
 800692e:	4603      	mov	r3, r0
 8006930:	4a05      	ldr	r2, [pc, #20]	; (8006948 <check_fs+0xa8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d101      	bne.n	800693a <check_fs+0x9a>
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800693a:	2302      	movs	r3, #2
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	00544146 	.word	0x00544146
 8006948:	33544146 	.word	0x33544146

0800694c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b096      	sub	sp, #88	; 0x58
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff ff58 	bl	8006816 <get_ldnumber>
 8006966:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696a:	2b00      	cmp	r3, #0
 800696c:	da01      	bge.n	8006972 <find_volume+0x26>
 800696e:	230b      	movs	r3, #11
 8006970:	e265      	b.n	8006e3e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006972:	4a9f      	ldr	r2, [pc, #636]	; (8006bf0 <find_volume+0x2a4>)
 8006974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <find_volume+0x3a>
 8006982:	230c      	movs	r3, #12
 8006984:	e25b      	b.n	8006e3e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800698a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01a      	beq.n	80069d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fcf5 	bl	8006390 <disk_status>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80069ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <find_volume+0x82>
 80069be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80069ca:	230a      	movs	r3, #10
 80069cc:	e237      	b.n	8006e3e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80069ce:	2300      	movs	r3, #0
 80069d0:	e235      	b.n	8006e3e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80069d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fced 	bl	80063c4 <disk_initialize>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80069f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80069fc:	2303      	movs	r3, #3
 80069fe:	e21e      	b.n	8006e3e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <find_volume+0xca>
 8006a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a12:	230a      	movs	r3, #10
 8006a14:	e213      	b.n	8006e3e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	7858      	ldrb	r0, [r3, #1]
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2102      	movs	r1, #2
 8006a22:	f7ff fd35 	bl	8006490 <disk_ioctl>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <find_volume+0xe4>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e206      	b.n	8006e3e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	899b      	ldrh	r3, [r3, #12]
 8006a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a38:	d80d      	bhi.n	8006a56 <find_volume+0x10a>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	899b      	ldrh	r3, [r3, #12]
 8006a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a42:	d308      	bcc.n	8006a56 <find_volume+0x10a>
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	899b      	ldrh	r3, [r3, #12]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	899b      	ldrh	r3, [r3, #12]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <find_volume+0x10e>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e1f1      	b.n	8006e3e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a62:	f7ff ff1d 	bl	80068a0 <check_fs>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d149      	bne.n	8006b08 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a74:	2300      	movs	r3, #0
 8006a76:	643b      	str	r3, [r7, #64]	; 0x40
 8006a78:	e01e      	b.n	8006ab8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006a88:	4413      	add	r3, r2
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	3304      	adds	r3, #4
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <find_volume+0x158>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	3308      	adds	r3, #8
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fd2e 	bl	80064fc <ld_dword>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	e000      	b.n	8006aa6 <find_volume+0x15a>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	3358      	adds	r3, #88	; 0x58
 8006aac:	443b      	add	r3, r7
 8006aae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d9dd      	bls.n	8006a7a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006abe:	2300      	movs	r3, #0
 8006ac0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <find_volume+0x182>
 8006ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aca:	3b01      	subs	r3, #1
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	3358      	adds	r3, #88	; 0x58
 8006ad4:	443b      	add	r3, r7
 8006ad6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ada:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <find_volume+0x1a2>
 8006ae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ae6:	f7ff fedb 	bl	80068a0 <check_fs>
 8006aea:	4603      	mov	r3, r0
 8006aec:	e000      	b.n	8006af0 <find_volume+0x1a4>
 8006aee:	2303      	movs	r3, #3
 8006af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006af4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d905      	bls.n	8006b08 <find_volume+0x1bc>
 8006afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006afe:	3301      	adds	r3, #1
 8006b00:	643b      	str	r3, [r7, #64]	; 0x40
 8006b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d9e2      	bls.n	8006ace <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d101      	bne.n	8006b14 <find_volume+0x1c8>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e194      	b.n	8006e3e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d901      	bls.n	8006b20 <find_volume+0x1d4>
 8006b1c:	230d      	movs	r3, #13
 8006b1e:	e18e      	b.n	8006e3e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	3338      	adds	r3, #56	; 0x38
 8006b24:	330b      	adds	r3, #11
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fcd0 	bl	80064cc <ld_word>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	899b      	ldrh	r3, [r3, #12]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <find_volume+0x1f0>
 8006b38:	230d      	movs	r3, #13
 8006b3a:	e180      	b.n	8006e3e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	3338      	adds	r3, #56	; 0x38
 8006b40:	3316      	adds	r3, #22
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff fcc2 	bl	80064cc <ld_word>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <find_volume+0x214>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	3338      	adds	r3, #56	; 0x38
 8006b56:	3324      	adds	r3, #36	; 0x24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fccf 	bl	80064fc <ld_dword>
 8006b5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b64:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	789b      	ldrb	r3, [r3, #2]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d005      	beq.n	8006b84 <find_volume+0x238>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	789b      	ldrb	r3, [r3, #2]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d001      	beq.n	8006b84 <find_volume+0x238>
 8006b80:	230d      	movs	r3, #13
 8006b82:	e15c      	b.n	8006e3e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	789b      	ldrb	r3, [r3, #2]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	895b      	ldrh	r3, [r3, #10]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d008      	beq.n	8006bb8 <find_volume+0x26c>
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	895b      	ldrh	r3, [r3, #10]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	895b      	ldrh	r3, [r3, #10]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <find_volume+0x270>
 8006bb8:	230d      	movs	r3, #13
 8006bba:	e140      	b.n	8006e3e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	3338      	adds	r3, #56	; 0x38
 8006bc0:	3311      	adds	r3, #17
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fc82 	bl	80064cc <ld_word>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	891b      	ldrh	r3, [r3, #8]
 8006bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bd6:	8992      	ldrh	r2, [r2, #12]
 8006bd8:	0952      	lsrs	r2, r2, #5
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006be0:	fb01 f202 	mul.w	r2, r1, r2
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <find_volume+0x2a8>
 8006bec:	230d      	movs	r3, #13
 8006bee:	e126      	b.n	8006e3e <find_volume+0x4f2>
 8006bf0:	20001854 	.word	0x20001854

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	3338      	adds	r3, #56	; 0x38
 8006bf8:	3313      	adds	r3, #19
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fc66 	bl	80064cc <ld_word>
 8006c00:	4603      	mov	r3, r0
 8006c02:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <find_volume+0x2cc>
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	3338      	adds	r3, #56	; 0x38
 8006c0e:	3320      	adds	r3, #32
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fc73 	bl	80064fc <ld_dword>
 8006c16:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	3338      	adds	r3, #56	; 0x38
 8006c1c:	330e      	adds	r3, #14
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fc54 	bl	80064cc <ld_word>
 8006c24:	4603      	mov	r3, r0
 8006c26:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006c28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <find_volume+0x2e6>
 8006c2e:	230d      	movs	r3, #13
 8006c30:	e105      	b.n	8006e3e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006c32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c36:	4413      	add	r3, r2
 8006c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3a:	8911      	ldrh	r1, [r2, #8]
 8006c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3e:	8992      	ldrh	r2, [r2, #12]
 8006c40:	0952      	lsrs	r2, r2, #5
 8006c42:	b292      	uxth	r2, r2
 8006c44:	fbb1 f2f2 	udiv	r2, r1, r2
 8006c48:	b292      	uxth	r2, r2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d201      	bcs.n	8006c5a <find_volume+0x30e>
 8006c56:	230d      	movs	r3, #13
 8006c58:	e0f1      	b.n	8006e3e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c62:	8952      	ldrh	r2, [r2, #10]
 8006c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <find_volume+0x328>
 8006c70:	230d      	movs	r3, #13
 8006c72:	e0e4      	b.n	8006e3e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006c74:	2303      	movs	r3, #3
 8006c76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d802      	bhi.n	8006c8a <find_volume+0x33e>
 8006c84:	2302      	movs	r3, #2
 8006c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d802      	bhi.n	8006c9a <find_volume+0x34e>
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	1c9a      	adds	r2, r3, #2
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ca8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	441a      	add	r2, r3
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006cb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	441a      	add	r2, r3
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d11e      	bne.n	8006d02 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	3338      	adds	r3, #56	; 0x38
 8006cc8:	332a      	adds	r3, #42	; 0x2a
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff fbfe 	bl	80064cc <ld_word>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <find_volume+0x38e>
 8006cd6:	230d      	movs	r3, #13
 8006cd8:	e0b1      	b.n	8006e3e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	891b      	ldrh	r3, [r3, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <find_volume+0x39a>
 8006ce2:	230d      	movs	r3, #13
 8006ce4:	e0ab      	b.n	8006e3e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	3338      	adds	r3, #56	; 0x38
 8006cea:	332c      	adds	r3, #44	; 0x2c
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff fc05 	bl	80064fc <ld_dword>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006d00:	e01f      	b.n	8006d42 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	891b      	ldrh	r3, [r3, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <find_volume+0x3c2>
 8006d0a:	230d      	movs	r3, #13
 8006d0c:	e097      	b.n	8006e3e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d14:	441a      	add	r2, r3
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006d1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d103      	bne.n	8006d2a <find_volume+0x3de>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	e00a      	b.n	8006d40 <find_volume+0x3f4>
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	085a      	lsrs	r2, r3, #1
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006d40:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	6a1a      	ldr	r2, [r3, #32]
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	899b      	ldrh	r3, [r3, #12]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4e:	440b      	add	r3, r1
 8006d50:	3b01      	subs	r3, #1
 8006d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d54:	8989      	ldrh	r1, [r1, #12]
 8006d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d201      	bcs.n	8006d62 <find_volume+0x416>
 8006d5e:	230d      	movs	r3, #13
 8006d60:	e06d      	b.n	8006e3e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
 8006d68:	619a      	str	r2, [r3, #24]
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	2280      	movs	r2, #128	; 0x80
 8006d76:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d149      	bne.n	8006e14 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	3338      	adds	r3, #56	; 0x38
 8006d84:	3330      	adds	r3, #48	; 0x30
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff fba0 	bl	80064cc <ld_word>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d140      	bne.n	8006e14 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d94:	3301      	adds	r3, #1
 8006d96:	4619      	mov	r1, r3
 8006d98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d9a:	f7ff fc3b 	bl	8006614 <move_window>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d137      	bne.n	8006e14 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	2200      	movs	r2, #0
 8006da8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	3338      	adds	r3, #56	; 0x38
 8006dae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fb8a 	bl	80064cc <ld_word>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d127      	bne.n	8006e14 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	3338      	adds	r3, #56	; 0x38
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fb97 	bl	80064fc <ld_dword>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <find_volume+0x4fc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d11e      	bne.n	8006e14 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	3338      	adds	r3, #56	; 0x38
 8006dda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff fb8c 	bl	80064fc <ld_dword>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4a19      	ldr	r2, [pc, #100]	; (8006e4c <find_volume+0x500>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d113      	bne.n	8006e14 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	3338      	adds	r3, #56	; 0x38
 8006df0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fb81 	bl	80064fc <ld_dword>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	3338      	adds	r3, #56	; 0x38
 8006e04:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fb77 	bl	80064fc <ld_dword>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006e1a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <find_volume+0x504>)
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <find_volume+0x504>)
 8006e26:	801a      	strh	r2, [r3, #0]
 8006e28:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <find_volume+0x504>)
 8006e2a:	881a      	ldrh	r2, [r3, #0]
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	4a08      	ldr	r2, [pc, #32]	; (8006e54 <find_volume+0x508>)
 8006e34:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006e36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e38:	f7ff fb84 	bl	8006544 <clear_lock>
#endif
	return FR_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3758      	adds	r7, #88	; 0x58
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	41615252 	.word	0x41615252
 8006e4c:	61417272 	.word	0x61417272
 8006e50:	20001858 	.word	0x20001858
 8006e54:	2000187c 	.word	0x2000187c

08006e58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e6a:	f107 0310 	add.w	r3, r7, #16
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fcd1 	bl	8006816 <get_ldnumber>
 8006e74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	da01      	bge.n	8006e80 <f_mount+0x28>
 8006e7c:	230b      	movs	r3, #11
 8006e7e:	e02b      	b.n	8006ed8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <f_mount+0x88>)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e90:	69b8      	ldr	r0, [r7, #24]
 8006e92:	f7ff fb57 	bl	8006544 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	490d      	ldr	r1, [pc, #52]	; (8006ee0 <f_mount+0x88>)
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <f_mount+0x66>
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d001      	beq.n	8006ec2 <f_mount+0x6a>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e00a      	b.n	8006ed8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ec2:	f107 010c 	add.w	r1, r7, #12
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fd3d 	bl	800694c <find_volume>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20001854 	.word	0x20001854

08006ee4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b092      	sub	sp, #72	; 0x48
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006ef0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fd26 	bl	800694c <find_volume>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006f06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 8099 	bne.w	8007042 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	3b02      	subs	r3, #2
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d804      	bhi.n	8006f2e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	699a      	ldr	r2, [r3, #24]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	e089      	b.n	8007042 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d128      	bne.n	8006f8c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006f42:	f107 0314 	add.w	r3, r7, #20
 8006f46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fb90 	bl	800666e <get_fat>
 8006f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d103      	bne.n	8006f60 <f_getfree+0x7c>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f5e:	e063      	b.n	8007028 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d103      	bne.n	8006f6e <f_getfree+0x8a>
 8006f66:	2302      	movs	r3, #2
 8006f68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f6c:	e05c      	b.n	8007028 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <f_getfree+0x96>
 8006f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f76:	3301      	adds	r3, #1
 8006f78:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d3db      	bcc.n	8006f42 <f_getfree+0x5e>
 8006f8a:	e04d      	b.n	8007028 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d113      	bne.n	8006fce <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	63ba      	str	r2, [r7, #56]	; 0x38
 8006fae:	4619      	mov	r1, r3
 8006fb0:	f7ff fb30 	bl	8006614 <move_window>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006fba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d131      	bne.n	8007026 <f_getfree+0x142>
							p = fs->win;
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	3338      	adds	r3, #56	; 0x38
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	899b      	ldrh	r3, [r3, #12]
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d10f      	bne.n	8006ff6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd8:	f7ff fa78 	bl	80064cc <ld_word>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <f_getfree+0x104>
 8006fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	3302      	adds	r3, #2
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	3b02      	subs	r3, #2
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff4:	e010      	b.n	8007018 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff8:	f7ff fa80 	bl	80064fc <ld_dword>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <f_getfree+0x128>
 8007006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007008:	3301      	adds	r3, #1
 800700a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	3304      	adds	r3, #4
 8007010:	633b      	str	r3, [r7, #48]	; 0x30
 8007012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007014:	3b04      	subs	r3, #4
 8007016:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	3b01      	subs	r3, #1
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1bd      	bne.n	8006fa0 <f_getfree+0xbc>
 8007024:	e000      	b.n	8007028 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007026:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800702c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007032:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	791a      	ldrb	r2, [r3, #4]
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007042:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007046:	4618      	mov	r0, r3
 8007048:	3748      	adds	r7, #72	; 0x48
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4613      	mov	r3, r2
 800705c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007066:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007068:	7a5b      	ldrb	r3, [r3, #9]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d131      	bne.n	80070d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007070:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007072:	7a5b      	ldrb	r3, [r3, #9]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 800707a:	2100      	movs	r1, #0
 800707c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800707e:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007080:	7a5b      	ldrb	r3, [r3, #9]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007090:	7a5b      	ldrb	r3, [r3, #9]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007098:	4413      	add	r3, r2
 800709a:	79fa      	ldrb	r2, [r7, #7]
 800709c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800709e:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 80070a0:	7a5b      	ldrb	r3, [r3, #9]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	b2d1      	uxtb	r1, r2
 80070a8:	4a0e      	ldr	r2, [pc, #56]	; (80070e4 <FATFS_LinkDriverEx+0x94>)
 80070aa:	7251      	strb	r1, [r2, #9]
 80070ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070ae:	7dbb      	ldrb	r3, [r7, #22]
 80070b0:	3330      	adds	r3, #48	; 0x30
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3301      	adds	r3, #1
 80070bc:	223a      	movs	r2, #58	; 0x3a
 80070be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3302      	adds	r3, #2
 80070c4:	222f      	movs	r2, #47	; 0x2f
 80070c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3303      	adds	r3, #3
 80070cc:	2200      	movs	r2, #0
 80070ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20001a7c 	.word	0x20001a7c

080070e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070f2:	2200      	movs	r2, #0
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ffaa 	bl	8007050 <FATFS_LinkDriverEx>
 80070fc:	4603      	mov	r3, r0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <__errno>:
 8007108:	4b01      	ldr	r3, [pc, #4]	; (8007110 <__errno+0x8>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000024 	.word	0x20000024

08007114 <__libc_init_array>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	4d0d      	ldr	r5, [pc, #52]	; (800714c <__libc_init_array+0x38>)
 8007118:	4c0d      	ldr	r4, [pc, #52]	; (8007150 <__libc_init_array+0x3c>)
 800711a:	1b64      	subs	r4, r4, r5
 800711c:	10a4      	asrs	r4, r4, #2
 800711e:	2600      	movs	r6, #0
 8007120:	42a6      	cmp	r6, r4
 8007122:	d109      	bne.n	8007138 <__libc_init_array+0x24>
 8007124:	4d0b      	ldr	r5, [pc, #44]	; (8007154 <__libc_init_array+0x40>)
 8007126:	4c0c      	ldr	r4, [pc, #48]	; (8007158 <__libc_init_array+0x44>)
 8007128:	f002 ff02 	bl	8009f30 <_init>
 800712c:	1b64      	subs	r4, r4, r5
 800712e:	10a4      	asrs	r4, r4, #2
 8007130:	2600      	movs	r6, #0
 8007132:	42a6      	cmp	r6, r4
 8007134:	d105      	bne.n	8007142 <__libc_init_array+0x2e>
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	f855 3b04 	ldr.w	r3, [r5], #4
 800713c:	4798      	blx	r3
 800713e:	3601      	adds	r6, #1
 8007140:	e7ee      	b.n	8007120 <__libc_init_array+0xc>
 8007142:	f855 3b04 	ldr.w	r3, [r5], #4
 8007146:	4798      	blx	r3
 8007148:	3601      	adds	r6, #1
 800714a:	e7f2      	b.n	8007132 <__libc_init_array+0x1e>
 800714c:	0800a414 	.word	0x0800a414
 8007150:	0800a414 	.word	0x0800a414
 8007154:	0800a414 	.word	0x0800a414
 8007158:	0800a418 	.word	0x0800a418

0800715c <memset>:
 800715c:	4402      	add	r2, r0
 800715e:	4603      	mov	r3, r0
 8007160:	4293      	cmp	r3, r2
 8007162:	d100      	bne.n	8007166 <memset+0xa>
 8007164:	4770      	bx	lr
 8007166:	f803 1b01 	strb.w	r1, [r3], #1
 800716a:	e7f9      	b.n	8007160 <memset+0x4>

0800716c <__cvt>:
 800716c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	ec55 4b10 	vmov	r4, r5, d0
 8007174:	2d00      	cmp	r5, #0
 8007176:	460e      	mov	r6, r1
 8007178:	4619      	mov	r1, r3
 800717a:	462b      	mov	r3, r5
 800717c:	bfbb      	ittet	lt
 800717e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007182:	461d      	movlt	r5, r3
 8007184:	2300      	movge	r3, #0
 8007186:	232d      	movlt	r3, #45	; 0x2d
 8007188:	700b      	strb	r3, [r1, #0]
 800718a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800718c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007190:	4691      	mov	r9, r2
 8007192:	f023 0820 	bic.w	r8, r3, #32
 8007196:	bfbc      	itt	lt
 8007198:	4622      	movlt	r2, r4
 800719a:	4614      	movlt	r4, r2
 800719c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071a0:	d005      	beq.n	80071ae <__cvt+0x42>
 80071a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071a6:	d100      	bne.n	80071aa <__cvt+0x3e>
 80071a8:	3601      	adds	r6, #1
 80071aa:	2102      	movs	r1, #2
 80071ac:	e000      	b.n	80071b0 <__cvt+0x44>
 80071ae:	2103      	movs	r1, #3
 80071b0:	ab03      	add	r3, sp, #12
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	ab02      	add	r3, sp, #8
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	ec45 4b10 	vmov	d0, r4, r5
 80071bc:	4653      	mov	r3, sl
 80071be:	4632      	mov	r2, r6
 80071c0:	f000 fcea 	bl	8007b98 <_dtoa_r>
 80071c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071c8:	4607      	mov	r7, r0
 80071ca:	d102      	bne.n	80071d2 <__cvt+0x66>
 80071cc:	f019 0f01 	tst.w	r9, #1
 80071d0:	d022      	beq.n	8007218 <__cvt+0xac>
 80071d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071d6:	eb07 0906 	add.w	r9, r7, r6
 80071da:	d110      	bne.n	80071fe <__cvt+0x92>
 80071dc:	783b      	ldrb	r3, [r7, #0]
 80071de:	2b30      	cmp	r3, #48	; 0x30
 80071e0:	d10a      	bne.n	80071f8 <__cvt+0x8c>
 80071e2:	2200      	movs	r2, #0
 80071e4:	2300      	movs	r3, #0
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f9 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ee:	b918      	cbnz	r0, 80071f8 <__cvt+0x8c>
 80071f0:	f1c6 0601 	rsb	r6, r6, #1
 80071f4:	f8ca 6000 	str.w	r6, [sl]
 80071f8:	f8da 3000 	ldr.w	r3, [sl]
 80071fc:	4499      	add	r9, r3
 80071fe:	2200      	movs	r2, #0
 8007200:	2300      	movs	r3, #0
 8007202:	4620      	mov	r0, r4
 8007204:	4629      	mov	r1, r5
 8007206:	f7f9 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800720a:	b108      	cbz	r0, 8007210 <__cvt+0xa4>
 800720c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007210:	2230      	movs	r2, #48	; 0x30
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	454b      	cmp	r3, r9
 8007216:	d307      	bcc.n	8007228 <__cvt+0xbc>
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800721c:	1bdb      	subs	r3, r3, r7
 800721e:	4638      	mov	r0, r7
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	b004      	add	sp, #16
 8007224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007228:	1c59      	adds	r1, r3, #1
 800722a:	9103      	str	r1, [sp, #12]
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e7f0      	b.n	8007212 <__cvt+0xa6>

08007230 <__exponent>:
 8007230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007232:	4603      	mov	r3, r0
 8007234:	2900      	cmp	r1, #0
 8007236:	bfb8      	it	lt
 8007238:	4249      	neglt	r1, r1
 800723a:	f803 2b02 	strb.w	r2, [r3], #2
 800723e:	bfb4      	ite	lt
 8007240:	222d      	movlt	r2, #45	; 0x2d
 8007242:	222b      	movge	r2, #43	; 0x2b
 8007244:	2909      	cmp	r1, #9
 8007246:	7042      	strb	r2, [r0, #1]
 8007248:	dd2a      	ble.n	80072a0 <__exponent+0x70>
 800724a:	f10d 0407 	add.w	r4, sp, #7
 800724e:	46a4      	mov	ip, r4
 8007250:	270a      	movs	r7, #10
 8007252:	46a6      	mov	lr, r4
 8007254:	460a      	mov	r2, r1
 8007256:	fb91 f6f7 	sdiv	r6, r1, r7
 800725a:	fb07 1516 	mls	r5, r7, r6, r1
 800725e:	3530      	adds	r5, #48	; 0x30
 8007260:	2a63      	cmp	r2, #99	; 0x63
 8007262:	f104 34ff 	add.w	r4, r4, #4294967295
 8007266:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800726a:	4631      	mov	r1, r6
 800726c:	dcf1      	bgt.n	8007252 <__exponent+0x22>
 800726e:	3130      	adds	r1, #48	; 0x30
 8007270:	f1ae 0502 	sub.w	r5, lr, #2
 8007274:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007278:	1c44      	adds	r4, r0, #1
 800727a:	4629      	mov	r1, r5
 800727c:	4561      	cmp	r1, ip
 800727e:	d30a      	bcc.n	8007296 <__exponent+0x66>
 8007280:	f10d 0209 	add.w	r2, sp, #9
 8007284:	eba2 020e 	sub.w	r2, r2, lr
 8007288:	4565      	cmp	r5, ip
 800728a:	bf88      	it	hi
 800728c:	2200      	movhi	r2, #0
 800728e:	4413      	add	r3, r2
 8007290:	1a18      	subs	r0, r3, r0
 8007292:	b003      	add	sp, #12
 8007294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800729a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800729e:	e7ed      	b.n	800727c <__exponent+0x4c>
 80072a0:	2330      	movs	r3, #48	; 0x30
 80072a2:	3130      	adds	r1, #48	; 0x30
 80072a4:	7083      	strb	r3, [r0, #2]
 80072a6:	70c1      	strb	r1, [r0, #3]
 80072a8:	1d03      	adds	r3, r0, #4
 80072aa:	e7f1      	b.n	8007290 <__exponent+0x60>

080072ac <_printf_float>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	ed2d 8b02 	vpush	{d8}
 80072b4:	b08d      	sub	sp, #52	; 0x34
 80072b6:	460c      	mov	r4, r1
 80072b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072bc:	4616      	mov	r6, r2
 80072be:	461f      	mov	r7, r3
 80072c0:	4605      	mov	r5, r0
 80072c2:	f001 fa57 	bl	8008774 <_localeconv_r>
 80072c6:	f8d0 a000 	ldr.w	sl, [r0]
 80072ca:	4650      	mov	r0, sl
 80072cc:	f7f8 ff80 	bl	80001d0 <strlen>
 80072d0:	2300      	movs	r3, #0
 80072d2:	930a      	str	r3, [sp, #40]	; 0x28
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	9305      	str	r3, [sp, #20]
 80072d8:	f8d8 3000 	ldr.w	r3, [r8]
 80072dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072e0:	3307      	adds	r3, #7
 80072e2:	f023 0307 	bic.w	r3, r3, #7
 80072e6:	f103 0208 	add.w	r2, r3, #8
 80072ea:	f8c8 2000 	str.w	r2, [r8]
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072fe:	9307      	str	r3, [sp, #28]
 8007300:	f8cd 8018 	str.w	r8, [sp, #24]
 8007304:	ee08 0a10 	vmov	s16, r0
 8007308:	4b9f      	ldr	r3, [pc, #636]	; (8007588 <_printf_float+0x2dc>)
 800730a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800730e:	f04f 32ff 	mov.w	r2, #4294967295
 8007312:	f7f9 fc0b 	bl	8000b2c <__aeabi_dcmpun>
 8007316:	bb88      	cbnz	r0, 800737c <_printf_float+0xd0>
 8007318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800731c:	4b9a      	ldr	r3, [pc, #616]	; (8007588 <_printf_float+0x2dc>)
 800731e:	f04f 32ff 	mov.w	r2, #4294967295
 8007322:	f7f9 fbe5 	bl	8000af0 <__aeabi_dcmple>
 8007326:	bb48      	cbnz	r0, 800737c <_printf_float+0xd0>
 8007328:	2200      	movs	r2, #0
 800732a:	2300      	movs	r3, #0
 800732c:	4640      	mov	r0, r8
 800732e:	4649      	mov	r1, r9
 8007330:	f7f9 fbd4 	bl	8000adc <__aeabi_dcmplt>
 8007334:	b110      	cbz	r0, 800733c <_printf_float+0x90>
 8007336:	232d      	movs	r3, #45	; 0x2d
 8007338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800733c:	4b93      	ldr	r3, [pc, #588]	; (800758c <_printf_float+0x2e0>)
 800733e:	4894      	ldr	r0, [pc, #592]	; (8007590 <_printf_float+0x2e4>)
 8007340:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007344:	bf94      	ite	ls
 8007346:	4698      	movls	r8, r3
 8007348:	4680      	movhi	r8, r0
 800734a:	2303      	movs	r3, #3
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	9b05      	ldr	r3, [sp, #20]
 8007350:	f023 0204 	bic.w	r2, r3, #4
 8007354:	6022      	str	r2, [r4, #0]
 8007356:	f04f 0900 	mov.w	r9, #0
 800735a:	9700      	str	r7, [sp, #0]
 800735c:	4633      	mov	r3, r6
 800735e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007360:	4621      	mov	r1, r4
 8007362:	4628      	mov	r0, r5
 8007364:	f000 f9d8 	bl	8007718 <_printf_common>
 8007368:	3001      	adds	r0, #1
 800736a:	f040 8090 	bne.w	800748e <_printf_float+0x1e2>
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	b00d      	add	sp, #52	; 0x34
 8007374:	ecbd 8b02 	vpop	{d8}
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	4640      	mov	r0, r8
 8007382:	4649      	mov	r1, r9
 8007384:	f7f9 fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8007388:	b140      	cbz	r0, 800739c <_printf_float+0xf0>
 800738a:	464b      	mov	r3, r9
 800738c:	2b00      	cmp	r3, #0
 800738e:	bfbc      	itt	lt
 8007390:	232d      	movlt	r3, #45	; 0x2d
 8007392:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007396:	487f      	ldr	r0, [pc, #508]	; (8007594 <_printf_float+0x2e8>)
 8007398:	4b7f      	ldr	r3, [pc, #508]	; (8007598 <_printf_float+0x2ec>)
 800739a:	e7d1      	b.n	8007340 <_printf_float+0x94>
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073a2:	9206      	str	r2, [sp, #24]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	d13f      	bne.n	8007428 <_printf_float+0x17c>
 80073a8:	2306      	movs	r3, #6
 80073aa:	6063      	str	r3, [r4, #4]
 80073ac:	9b05      	ldr	r3, [sp, #20]
 80073ae:	6861      	ldr	r1, [r4, #4]
 80073b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073b4:	2300      	movs	r3, #0
 80073b6:	9303      	str	r3, [sp, #12]
 80073b8:	ab0a      	add	r3, sp, #40	; 0x28
 80073ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073be:	ab09      	add	r3, sp, #36	; 0x24
 80073c0:	ec49 8b10 	vmov	d0, r8, r9
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	6022      	str	r2, [r4, #0]
 80073c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073cc:	4628      	mov	r0, r5
 80073ce:	f7ff fecd 	bl	800716c <__cvt>
 80073d2:	9b06      	ldr	r3, [sp, #24]
 80073d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073d6:	2b47      	cmp	r3, #71	; 0x47
 80073d8:	4680      	mov	r8, r0
 80073da:	d108      	bne.n	80073ee <_printf_float+0x142>
 80073dc:	1cc8      	adds	r0, r1, #3
 80073de:	db02      	blt.n	80073e6 <_printf_float+0x13a>
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	4299      	cmp	r1, r3
 80073e4:	dd41      	ble.n	800746a <_printf_float+0x1be>
 80073e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80073ea:	fa5f fb8b 	uxtb.w	fp, fp
 80073ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073f2:	d820      	bhi.n	8007436 <_printf_float+0x18a>
 80073f4:	3901      	subs	r1, #1
 80073f6:	465a      	mov	r2, fp
 80073f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073fc:	9109      	str	r1, [sp, #36]	; 0x24
 80073fe:	f7ff ff17 	bl	8007230 <__exponent>
 8007402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007404:	1813      	adds	r3, r2, r0
 8007406:	2a01      	cmp	r2, #1
 8007408:	4681      	mov	r9, r0
 800740a:	6123      	str	r3, [r4, #16]
 800740c:	dc02      	bgt.n	8007414 <_printf_float+0x168>
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	07d2      	lsls	r2, r2, #31
 8007412:	d501      	bpl.n	8007418 <_printf_float+0x16c>
 8007414:	3301      	adds	r3, #1
 8007416:	6123      	str	r3, [r4, #16]
 8007418:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800741c:	2b00      	cmp	r3, #0
 800741e:	d09c      	beq.n	800735a <_printf_float+0xae>
 8007420:	232d      	movs	r3, #45	; 0x2d
 8007422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007426:	e798      	b.n	800735a <_printf_float+0xae>
 8007428:	9a06      	ldr	r2, [sp, #24]
 800742a:	2a47      	cmp	r2, #71	; 0x47
 800742c:	d1be      	bne.n	80073ac <_printf_float+0x100>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1bc      	bne.n	80073ac <_printf_float+0x100>
 8007432:	2301      	movs	r3, #1
 8007434:	e7b9      	b.n	80073aa <_printf_float+0xfe>
 8007436:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800743a:	d118      	bne.n	800746e <_printf_float+0x1c2>
 800743c:	2900      	cmp	r1, #0
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	dd0b      	ble.n	800745a <_printf_float+0x1ae>
 8007442:	6121      	str	r1, [r4, #16]
 8007444:	b913      	cbnz	r3, 800744c <_printf_float+0x1a0>
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	07d0      	lsls	r0, r2, #31
 800744a:	d502      	bpl.n	8007452 <_printf_float+0x1a6>
 800744c:	3301      	adds	r3, #1
 800744e:	440b      	add	r3, r1
 8007450:	6123      	str	r3, [r4, #16]
 8007452:	65a1      	str	r1, [r4, #88]	; 0x58
 8007454:	f04f 0900 	mov.w	r9, #0
 8007458:	e7de      	b.n	8007418 <_printf_float+0x16c>
 800745a:	b913      	cbnz	r3, 8007462 <_printf_float+0x1b6>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	07d2      	lsls	r2, r2, #31
 8007460:	d501      	bpl.n	8007466 <_printf_float+0x1ba>
 8007462:	3302      	adds	r3, #2
 8007464:	e7f4      	b.n	8007450 <_printf_float+0x1a4>
 8007466:	2301      	movs	r3, #1
 8007468:	e7f2      	b.n	8007450 <_printf_float+0x1a4>
 800746a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007470:	4299      	cmp	r1, r3
 8007472:	db05      	blt.n	8007480 <_printf_float+0x1d4>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	6121      	str	r1, [r4, #16]
 8007478:	07d8      	lsls	r0, r3, #31
 800747a:	d5ea      	bpl.n	8007452 <_printf_float+0x1a6>
 800747c:	1c4b      	adds	r3, r1, #1
 800747e:	e7e7      	b.n	8007450 <_printf_float+0x1a4>
 8007480:	2900      	cmp	r1, #0
 8007482:	bfd4      	ite	le
 8007484:	f1c1 0202 	rsble	r2, r1, #2
 8007488:	2201      	movgt	r2, #1
 800748a:	4413      	add	r3, r2
 800748c:	e7e0      	b.n	8007450 <_printf_float+0x1a4>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	055a      	lsls	r2, r3, #21
 8007492:	d407      	bmi.n	80074a4 <_printf_float+0x1f8>
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	4642      	mov	r2, r8
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	47b8      	blx	r7
 800749e:	3001      	adds	r0, #1
 80074a0:	d12c      	bne.n	80074fc <_printf_float+0x250>
 80074a2:	e764      	b.n	800736e <_printf_float+0xc2>
 80074a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074a8:	f240 80e0 	bls.w	800766c <_printf_float+0x3c0>
 80074ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074b0:	2200      	movs	r2, #0
 80074b2:	2300      	movs	r3, #0
 80074b4:	f7f9 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d034      	beq.n	8007526 <_printf_float+0x27a>
 80074bc:	4a37      	ldr	r2, [pc, #220]	; (800759c <_printf_float+0x2f0>)
 80074be:	2301      	movs	r3, #1
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f af51 	beq.w	800736e <_printf_float+0xc2>
 80074cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074d0:	429a      	cmp	r2, r3
 80074d2:	db02      	blt.n	80074da <_printf_float+0x22e>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	07d8      	lsls	r0, r3, #31
 80074d8:	d510      	bpl.n	80074fc <_printf_float+0x250>
 80074da:	ee18 3a10 	vmov	r3, s16
 80074de:	4652      	mov	r2, sl
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	f43f af41 	beq.w	800736e <_printf_float+0xc2>
 80074ec:	f04f 0800 	mov.w	r8, #0
 80074f0:	f104 091a 	add.w	r9, r4, #26
 80074f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f6:	3b01      	subs	r3, #1
 80074f8:	4543      	cmp	r3, r8
 80074fa:	dc09      	bgt.n	8007510 <_printf_float+0x264>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	079b      	lsls	r3, r3, #30
 8007500:	f100 8105 	bmi.w	800770e <_printf_float+0x462>
 8007504:	68e0      	ldr	r0, [r4, #12]
 8007506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007508:	4298      	cmp	r0, r3
 800750a:	bfb8      	it	lt
 800750c:	4618      	movlt	r0, r3
 800750e:	e730      	b.n	8007372 <_printf_float+0xc6>
 8007510:	2301      	movs	r3, #1
 8007512:	464a      	mov	r2, r9
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	f43f af27 	beq.w	800736e <_printf_float+0xc2>
 8007520:	f108 0801 	add.w	r8, r8, #1
 8007524:	e7e6      	b.n	80074f4 <_printf_float+0x248>
 8007526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	dc39      	bgt.n	80075a0 <_printf_float+0x2f4>
 800752c:	4a1b      	ldr	r2, [pc, #108]	; (800759c <_printf_float+0x2f0>)
 800752e:	2301      	movs	r3, #1
 8007530:	4631      	mov	r1, r6
 8007532:	4628      	mov	r0, r5
 8007534:	47b8      	blx	r7
 8007536:	3001      	adds	r0, #1
 8007538:	f43f af19 	beq.w	800736e <_printf_float+0xc2>
 800753c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007540:	4313      	orrs	r3, r2
 8007542:	d102      	bne.n	800754a <_printf_float+0x29e>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	d5d8      	bpl.n	80074fc <_printf_float+0x250>
 800754a:	ee18 3a10 	vmov	r3, s16
 800754e:	4652      	mov	r2, sl
 8007550:	4631      	mov	r1, r6
 8007552:	4628      	mov	r0, r5
 8007554:	47b8      	blx	r7
 8007556:	3001      	adds	r0, #1
 8007558:	f43f af09 	beq.w	800736e <_printf_float+0xc2>
 800755c:	f04f 0900 	mov.w	r9, #0
 8007560:	f104 0a1a 	add.w	sl, r4, #26
 8007564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007566:	425b      	negs	r3, r3
 8007568:	454b      	cmp	r3, r9
 800756a:	dc01      	bgt.n	8007570 <_printf_float+0x2c4>
 800756c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800756e:	e792      	b.n	8007496 <_printf_float+0x1ea>
 8007570:	2301      	movs	r3, #1
 8007572:	4652      	mov	r2, sl
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f aef7 	beq.w	800736e <_printf_float+0xc2>
 8007580:	f109 0901 	add.w	r9, r9, #1
 8007584:	e7ee      	b.n	8007564 <_printf_float+0x2b8>
 8007586:	bf00      	nop
 8007588:	7fefffff 	.word	0x7fefffff
 800758c:	0800a034 	.word	0x0800a034
 8007590:	0800a038 	.word	0x0800a038
 8007594:	0800a040 	.word	0x0800a040
 8007598:	0800a03c 	.word	0x0800a03c
 800759c:	0800a044 	.word	0x0800a044
 80075a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075a4:	429a      	cmp	r2, r3
 80075a6:	bfa8      	it	ge
 80075a8:	461a      	movge	r2, r3
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	4691      	mov	r9, r2
 80075ae:	dc37      	bgt.n	8007620 <_printf_float+0x374>
 80075b0:	f04f 0b00 	mov.w	fp, #0
 80075b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075b8:	f104 021a 	add.w	r2, r4, #26
 80075bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075be:	9305      	str	r3, [sp, #20]
 80075c0:	eba3 0309 	sub.w	r3, r3, r9
 80075c4:	455b      	cmp	r3, fp
 80075c6:	dc33      	bgt.n	8007630 <_printf_float+0x384>
 80075c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075cc:	429a      	cmp	r2, r3
 80075ce:	db3b      	blt.n	8007648 <_printf_float+0x39c>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	07da      	lsls	r2, r3, #31
 80075d4:	d438      	bmi.n	8007648 <_printf_float+0x39c>
 80075d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d8:	9a05      	ldr	r2, [sp, #20]
 80075da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075dc:	1a9a      	subs	r2, r3, r2
 80075de:	eba3 0901 	sub.w	r9, r3, r1
 80075e2:	4591      	cmp	r9, r2
 80075e4:	bfa8      	it	ge
 80075e6:	4691      	movge	r9, r2
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	dc35      	bgt.n	800765a <_printf_float+0x3ae>
 80075ee:	f04f 0800 	mov.w	r8, #0
 80075f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075f6:	f104 0a1a 	add.w	sl, r4, #26
 80075fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	eba3 0309 	sub.w	r3, r3, r9
 8007604:	4543      	cmp	r3, r8
 8007606:	f77f af79 	ble.w	80074fc <_printf_float+0x250>
 800760a:	2301      	movs	r3, #1
 800760c:	4652      	mov	r2, sl
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	f43f aeaa 	beq.w	800736e <_printf_float+0xc2>
 800761a:	f108 0801 	add.w	r8, r8, #1
 800761e:	e7ec      	b.n	80075fa <_printf_float+0x34e>
 8007620:	4613      	mov	r3, r2
 8007622:	4631      	mov	r1, r6
 8007624:	4642      	mov	r2, r8
 8007626:	4628      	mov	r0, r5
 8007628:	47b8      	blx	r7
 800762a:	3001      	adds	r0, #1
 800762c:	d1c0      	bne.n	80075b0 <_printf_float+0x304>
 800762e:	e69e      	b.n	800736e <_printf_float+0xc2>
 8007630:	2301      	movs	r3, #1
 8007632:	4631      	mov	r1, r6
 8007634:	4628      	mov	r0, r5
 8007636:	9205      	str	r2, [sp, #20]
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f ae97 	beq.w	800736e <_printf_float+0xc2>
 8007640:	9a05      	ldr	r2, [sp, #20]
 8007642:	f10b 0b01 	add.w	fp, fp, #1
 8007646:	e7b9      	b.n	80075bc <_printf_float+0x310>
 8007648:	ee18 3a10 	vmov	r3, s16
 800764c:	4652      	mov	r2, sl
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	d1be      	bne.n	80075d6 <_printf_float+0x32a>
 8007658:	e689      	b.n	800736e <_printf_float+0xc2>
 800765a:	9a05      	ldr	r2, [sp, #20]
 800765c:	464b      	mov	r3, r9
 800765e:	4442      	add	r2, r8
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	d1c1      	bne.n	80075ee <_printf_float+0x342>
 800766a:	e680      	b.n	800736e <_printf_float+0xc2>
 800766c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766e:	2a01      	cmp	r2, #1
 8007670:	dc01      	bgt.n	8007676 <_printf_float+0x3ca>
 8007672:	07db      	lsls	r3, r3, #31
 8007674:	d538      	bpl.n	80076e8 <_printf_float+0x43c>
 8007676:	2301      	movs	r3, #1
 8007678:	4642      	mov	r2, r8
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f ae74 	beq.w	800736e <_printf_float+0xc2>
 8007686:	ee18 3a10 	vmov	r3, s16
 800768a:	4652      	mov	r2, sl
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	f43f ae6b 	beq.w	800736e <_printf_float+0xc2>
 8007698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800769c:	2200      	movs	r2, #0
 800769e:	2300      	movs	r3, #0
 80076a0:	f7f9 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 80076a4:	b9d8      	cbnz	r0, 80076de <_printf_float+0x432>
 80076a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a8:	f108 0201 	add.w	r2, r8, #1
 80076ac:	3b01      	subs	r3, #1
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	d10e      	bne.n	80076d6 <_printf_float+0x42a>
 80076b8:	e659      	b.n	800736e <_printf_float+0xc2>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4652      	mov	r2, sl
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	f43f ae52 	beq.w	800736e <_printf_float+0xc2>
 80076ca:	f108 0801 	add.w	r8, r8, #1
 80076ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d0:	3b01      	subs	r3, #1
 80076d2:	4543      	cmp	r3, r8
 80076d4:	dcf1      	bgt.n	80076ba <_printf_float+0x40e>
 80076d6:	464b      	mov	r3, r9
 80076d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076dc:	e6dc      	b.n	8007498 <_printf_float+0x1ec>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	f104 0a1a 	add.w	sl, r4, #26
 80076e6:	e7f2      	b.n	80076ce <_printf_float+0x422>
 80076e8:	2301      	movs	r3, #1
 80076ea:	4642      	mov	r2, r8
 80076ec:	e7df      	b.n	80076ae <_printf_float+0x402>
 80076ee:	2301      	movs	r3, #1
 80076f0:	464a      	mov	r2, r9
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	f43f ae38 	beq.w	800736e <_printf_float+0xc2>
 80076fe:	f108 0801 	add.w	r8, r8, #1
 8007702:	68e3      	ldr	r3, [r4, #12]
 8007704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007706:	1a5b      	subs	r3, r3, r1
 8007708:	4543      	cmp	r3, r8
 800770a:	dcf0      	bgt.n	80076ee <_printf_float+0x442>
 800770c:	e6fa      	b.n	8007504 <_printf_float+0x258>
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	f104 0919 	add.w	r9, r4, #25
 8007716:	e7f4      	b.n	8007702 <_printf_float+0x456>

08007718 <_printf_common>:
 8007718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	4616      	mov	r6, r2
 800771e:	4699      	mov	r9, r3
 8007720:	688a      	ldr	r2, [r1, #8]
 8007722:	690b      	ldr	r3, [r1, #16]
 8007724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007728:	4293      	cmp	r3, r2
 800772a:	bfb8      	it	lt
 800772c:	4613      	movlt	r3, r2
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007734:	4607      	mov	r7, r0
 8007736:	460c      	mov	r4, r1
 8007738:	b10a      	cbz	r2, 800773e <_printf_common+0x26>
 800773a:	3301      	adds	r3, #1
 800773c:	6033      	str	r3, [r6, #0]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	0699      	lsls	r1, r3, #26
 8007742:	bf42      	ittt	mi
 8007744:	6833      	ldrmi	r3, [r6, #0]
 8007746:	3302      	addmi	r3, #2
 8007748:	6033      	strmi	r3, [r6, #0]
 800774a:	6825      	ldr	r5, [r4, #0]
 800774c:	f015 0506 	ands.w	r5, r5, #6
 8007750:	d106      	bne.n	8007760 <_printf_common+0x48>
 8007752:	f104 0a19 	add.w	sl, r4, #25
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	6832      	ldr	r2, [r6, #0]
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	42ab      	cmp	r3, r5
 800775e:	dc26      	bgt.n	80077ae <_printf_common+0x96>
 8007760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007764:	1e13      	subs	r3, r2, #0
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	bf18      	it	ne
 800776a:	2301      	movne	r3, #1
 800776c:	0692      	lsls	r2, r2, #26
 800776e:	d42b      	bmi.n	80077c8 <_printf_common+0xb0>
 8007770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007774:	4649      	mov	r1, r9
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d01e      	beq.n	80077bc <_printf_common+0xa4>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	68e5      	ldr	r5, [r4, #12]
 8007782:	6832      	ldr	r2, [r6, #0]
 8007784:	f003 0306 	and.w	r3, r3, #6
 8007788:	2b04      	cmp	r3, #4
 800778a:	bf08      	it	eq
 800778c:	1aad      	subeq	r5, r5, r2
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	bf0c      	ite	eq
 8007794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007798:	2500      	movne	r5, #0
 800779a:	4293      	cmp	r3, r2
 800779c:	bfc4      	itt	gt
 800779e:	1a9b      	subgt	r3, r3, r2
 80077a0:	18ed      	addgt	r5, r5, r3
 80077a2:	2600      	movs	r6, #0
 80077a4:	341a      	adds	r4, #26
 80077a6:	42b5      	cmp	r5, r6
 80077a8:	d11a      	bne.n	80077e0 <_printf_common+0xc8>
 80077aa:	2000      	movs	r0, #0
 80077ac:	e008      	b.n	80077c0 <_printf_common+0xa8>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4652      	mov	r2, sl
 80077b2:	4649      	mov	r1, r9
 80077b4:	4638      	mov	r0, r7
 80077b6:	47c0      	blx	r8
 80077b8:	3001      	adds	r0, #1
 80077ba:	d103      	bne.n	80077c4 <_printf_common+0xac>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c4:	3501      	adds	r5, #1
 80077c6:	e7c6      	b.n	8007756 <_printf_common+0x3e>
 80077c8:	18e1      	adds	r1, r4, r3
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	2030      	movs	r0, #48	; 0x30
 80077ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077d2:	4422      	add	r2, r4
 80077d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077dc:	3302      	adds	r3, #2
 80077de:	e7c7      	b.n	8007770 <_printf_common+0x58>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4622      	mov	r2, r4
 80077e4:	4649      	mov	r1, r9
 80077e6:	4638      	mov	r0, r7
 80077e8:	47c0      	blx	r8
 80077ea:	3001      	adds	r0, #1
 80077ec:	d0e6      	beq.n	80077bc <_printf_common+0xa4>
 80077ee:	3601      	adds	r6, #1
 80077f0:	e7d9      	b.n	80077a6 <_printf_common+0x8e>
	...

080077f4 <_printf_i>:
 80077f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	7e0f      	ldrb	r7, [r1, #24]
 80077fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077fc:	2f78      	cmp	r7, #120	; 0x78
 80077fe:	4691      	mov	r9, r2
 8007800:	4680      	mov	r8, r0
 8007802:	460c      	mov	r4, r1
 8007804:	469a      	mov	sl, r3
 8007806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800780a:	d807      	bhi.n	800781c <_printf_i+0x28>
 800780c:	2f62      	cmp	r7, #98	; 0x62
 800780e:	d80a      	bhi.n	8007826 <_printf_i+0x32>
 8007810:	2f00      	cmp	r7, #0
 8007812:	f000 80d8 	beq.w	80079c6 <_printf_i+0x1d2>
 8007816:	2f58      	cmp	r7, #88	; 0x58
 8007818:	f000 80a3 	beq.w	8007962 <_printf_i+0x16e>
 800781c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007824:	e03a      	b.n	800789c <_printf_i+0xa8>
 8007826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800782a:	2b15      	cmp	r3, #21
 800782c:	d8f6      	bhi.n	800781c <_printf_i+0x28>
 800782e:	a101      	add	r1, pc, #4	; (adr r1, 8007834 <_printf_i+0x40>)
 8007830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007834:	0800788d 	.word	0x0800788d
 8007838:	080078a1 	.word	0x080078a1
 800783c:	0800781d 	.word	0x0800781d
 8007840:	0800781d 	.word	0x0800781d
 8007844:	0800781d 	.word	0x0800781d
 8007848:	0800781d 	.word	0x0800781d
 800784c:	080078a1 	.word	0x080078a1
 8007850:	0800781d 	.word	0x0800781d
 8007854:	0800781d 	.word	0x0800781d
 8007858:	0800781d 	.word	0x0800781d
 800785c:	0800781d 	.word	0x0800781d
 8007860:	080079ad 	.word	0x080079ad
 8007864:	080078d1 	.word	0x080078d1
 8007868:	0800798f 	.word	0x0800798f
 800786c:	0800781d 	.word	0x0800781d
 8007870:	0800781d 	.word	0x0800781d
 8007874:	080079cf 	.word	0x080079cf
 8007878:	0800781d 	.word	0x0800781d
 800787c:	080078d1 	.word	0x080078d1
 8007880:	0800781d 	.word	0x0800781d
 8007884:	0800781d 	.word	0x0800781d
 8007888:	08007997 	.word	0x08007997
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	602a      	str	r2, [r5, #0]
 8007894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800789c:	2301      	movs	r3, #1
 800789e:	e0a3      	b.n	80079e8 <_printf_i+0x1f4>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	6829      	ldr	r1, [r5, #0]
 80078a4:	0606      	lsls	r6, r0, #24
 80078a6:	f101 0304 	add.w	r3, r1, #4
 80078aa:	d50a      	bpl.n	80078c2 <_printf_i+0xce>
 80078ac:	680e      	ldr	r6, [r1, #0]
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	2e00      	cmp	r6, #0
 80078b2:	da03      	bge.n	80078bc <_printf_i+0xc8>
 80078b4:	232d      	movs	r3, #45	; 0x2d
 80078b6:	4276      	negs	r6, r6
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078bc:	485e      	ldr	r0, [pc, #376]	; (8007a38 <_printf_i+0x244>)
 80078be:	230a      	movs	r3, #10
 80078c0:	e019      	b.n	80078f6 <_printf_i+0x102>
 80078c2:	680e      	ldr	r6, [r1, #0]
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078ca:	bf18      	it	ne
 80078cc:	b236      	sxthne	r6, r6
 80078ce:	e7ef      	b.n	80078b0 <_printf_i+0xbc>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	1d19      	adds	r1, r3, #4
 80078d6:	6029      	str	r1, [r5, #0]
 80078d8:	0601      	lsls	r1, r0, #24
 80078da:	d501      	bpl.n	80078e0 <_printf_i+0xec>
 80078dc:	681e      	ldr	r6, [r3, #0]
 80078de:	e002      	b.n	80078e6 <_printf_i+0xf2>
 80078e0:	0646      	lsls	r6, r0, #25
 80078e2:	d5fb      	bpl.n	80078dc <_printf_i+0xe8>
 80078e4:	881e      	ldrh	r6, [r3, #0]
 80078e6:	4854      	ldr	r0, [pc, #336]	; (8007a38 <_printf_i+0x244>)
 80078e8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ea:	bf0c      	ite	eq
 80078ec:	2308      	moveq	r3, #8
 80078ee:	230a      	movne	r3, #10
 80078f0:	2100      	movs	r1, #0
 80078f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078f6:	6865      	ldr	r5, [r4, #4]
 80078f8:	60a5      	str	r5, [r4, #8]
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	bfa2      	ittt	ge
 80078fe:	6821      	ldrge	r1, [r4, #0]
 8007900:	f021 0104 	bicge.w	r1, r1, #4
 8007904:	6021      	strge	r1, [r4, #0]
 8007906:	b90e      	cbnz	r6, 800790c <_printf_i+0x118>
 8007908:	2d00      	cmp	r5, #0
 800790a:	d04d      	beq.n	80079a8 <_printf_i+0x1b4>
 800790c:	4615      	mov	r5, r2
 800790e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007912:	fb03 6711 	mls	r7, r3, r1, r6
 8007916:	5dc7      	ldrb	r7, [r0, r7]
 8007918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800791c:	4637      	mov	r7, r6
 800791e:	42bb      	cmp	r3, r7
 8007920:	460e      	mov	r6, r1
 8007922:	d9f4      	bls.n	800790e <_printf_i+0x11a>
 8007924:	2b08      	cmp	r3, #8
 8007926:	d10b      	bne.n	8007940 <_printf_i+0x14c>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	07de      	lsls	r6, r3, #31
 800792c:	d508      	bpl.n	8007940 <_printf_i+0x14c>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	6861      	ldr	r1, [r4, #4]
 8007932:	4299      	cmp	r1, r3
 8007934:	bfde      	ittt	le
 8007936:	2330      	movle	r3, #48	; 0x30
 8007938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800793c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007940:	1b52      	subs	r2, r2, r5
 8007942:	6122      	str	r2, [r4, #16]
 8007944:	f8cd a000 	str.w	sl, [sp]
 8007948:	464b      	mov	r3, r9
 800794a:	aa03      	add	r2, sp, #12
 800794c:	4621      	mov	r1, r4
 800794e:	4640      	mov	r0, r8
 8007950:	f7ff fee2 	bl	8007718 <_printf_common>
 8007954:	3001      	adds	r0, #1
 8007956:	d14c      	bne.n	80079f2 <_printf_i+0x1fe>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	b004      	add	sp, #16
 800795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007962:	4835      	ldr	r0, [pc, #212]	; (8007a38 <_printf_i+0x244>)
 8007964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007970:	6029      	str	r1, [r5, #0]
 8007972:	061d      	lsls	r5, r3, #24
 8007974:	d514      	bpl.n	80079a0 <_printf_i+0x1ac>
 8007976:	07df      	lsls	r7, r3, #31
 8007978:	bf44      	itt	mi
 800797a:	f043 0320 	orrmi.w	r3, r3, #32
 800797e:	6023      	strmi	r3, [r4, #0]
 8007980:	b91e      	cbnz	r6, 800798a <_printf_i+0x196>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f023 0320 	bic.w	r3, r3, #32
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	2310      	movs	r3, #16
 800798c:	e7b0      	b.n	80078f0 <_printf_i+0xfc>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	f043 0320 	orr.w	r3, r3, #32
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	2378      	movs	r3, #120	; 0x78
 8007998:	4828      	ldr	r0, [pc, #160]	; (8007a3c <_printf_i+0x248>)
 800799a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800799e:	e7e3      	b.n	8007968 <_printf_i+0x174>
 80079a0:	0659      	lsls	r1, r3, #25
 80079a2:	bf48      	it	mi
 80079a4:	b2b6      	uxthmi	r6, r6
 80079a6:	e7e6      	b.n	8007976 <_printf_i+0x182>
 80079a8:	4615      	mov	r5, r2
 80079aa:	e7bb      	b.n	8007924 <_printf_i+0x130>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	6826      	ldr	r6, [r4, #0]
 80079b0:	6961      	ldr	r1, [r4, #20]
 80079b2:	1d18      	adds	r0, r3, #4
 80079b4:	6028      	str	r0, [r5, #0]
 80079b6:	0635      	lsls	r5, r6, #24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	d501      	bpl.n	80079c0 <_printf_i+0x1cc>
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	e002      	b.n	80079c6 <_printf_i+0x1d2>
 80079c0:	0670      	lsls	r0, r6, #25
 80079c2:	d5fb      	bpl.n	80079bc <_printf_i+0x1c8>
 80079c4:	8019      	strh	r1, [r3, #0]
 80079c6:	2300      	movs	r3, #0
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	4615      	mov	r5, r2
 80079cc:	e7ba      	b.n	8007944 <_printf_i+0x150>
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	602a      	str	r2, [r5, #0]
 80079d4:	681d      	ldr	r5, [r3, #0]
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	2100      	movs	r1, #0
 80079da:	4628      	mov	r0, r5
 80079dc:	f7f8 fc00 	bl	80001e0 <memchr>
 80079e0:	b108      	cbz	r0, 80079e6 <_printf_i+0x1f2>
 80079e2:	1b40      	subs	r0, r0, r5
 80079e4:	6060      	str	r0, [r4, #4]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	2300      	movs	r3, #0
 80079ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f0:	e7a8      	b.n	8007944 <_printf_i+0x150>
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	462a      	mov	r2, r5
 80079f6:	4649      	mov	r1, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	47d0      	blx	sl
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0ab      	beq.n	8007958 <_printf_i+0x164>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	079b      	lsls	r3, r3, #30
 8007a04:	d413      	bmi.n	8007a2e <_printf_i+0x23a>
 8007a06:	68e0      	ldr	r0, [r4, #12]
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	bfb8      	it	lt
 8007a0e:	4618      	movlt	r0, r3
 8007a10:	e7a4      	b.n	800795c <_printf_i+0x168>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4632      	mov	r2, r6
 8007a16:	4649      	mov	r1, r9
 8007a18:	4640      	mov	r0, r8
 8007a1a:	47d0      	blx	sl
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d09b      	beq.n	8007958 <_printf_i+0x164>
 8007a20:	3501      	adds	r5, #1
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	9903      	ldr	r1, [sp, #12]
 8007a26:	1a5b      	subs	r3, r3, r1
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dcf2      	bgt.n	8007a12 <_printf_i+0x21e>
 8007a2c:	e7eb      	b.n	8007a06 <_printf_i+0x212>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	f104 0619 	add.w	r6, r4, #25
 8007a34:	e7f5      	b.n	8007a22 <_printf_i+0x22e>
 8007a36:	bf00      	nop
 8007a38:	0800a046 	.word	0x0800a046
 8007a3c:	0800a057 	.word	0x0800a057

08007a40 <siprintf>:
 8007a40:	b40e      	push	{r1, r2, r3}
 8007a42:	b500      	push	{lr}
 8007a44:	b09c      	sub	sp, #112	; 0x70
 8007a46:	ab1d      	add	r3, sp, #116	; 0x74
 8007a48:	9002      	str	r0, [sp, #8]
 8007a4a:	9006      	str	r0, [sp, #24]
 8007a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a50:	4809      	ldr	r0, [pc, #36]	; (8007a78 <siprintf+0x38>)
 8007a52:	9107      	str	r1, [sp, #28]
 8007a54:	9104      	str	r1, [sp, #16]
 8007a56:	4909      	ldr	r1, [pc, #36]	; (8007a7c <siprintf+0x3c>)
 8007a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a5c:	9105      	str	r1, [sp, #20]
 8007a5e:	6800      	ldr	r0, [r0, #0]
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	a902      	add	r1, sp, #8
 8007a64:	f001 fb76 	bl	8009154 <_svfiprintf_r>
 8007a68:	9b02      	ldr	r3, [sp, #8]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	b01c      	add	sp, #112	; 0x70
 8007a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a74:	b003      	add	sp, #12
 8007a76:	4770      	bx	lr
 8007a78:	20000024 	.word	0x20000024
 8007a7c:	ffff0208 	.word	0xffff0208

08007a80 <quorem>:
 8007a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	6903      	ldr	r3, [r0, #16]
 8007a86:	690c      	ldr	r4, [r1, #16]
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	f2c0 8081 	blt.w	8007b92 <quorem+0x112>
 8007a90:	3c01      	subs	r4, #1
 8007a92:	f101 0814 	add.w	r8, r1, #20
 8007a96:	f100 0514 	add.w	r5, r0, #20
 8007a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ab4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ab8:	d331      	bcc.n	8007b1e <quorem+0x9e>
 8007aba:	f04f 0e00 	mov.w	lr, #0
 8007abe:	4640      	mov	r0, r8
 8007ac0:	46ac      	mov	ip, r5
 8007ac2:	46f2      	mov	sl, lr
 8007ac4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ac8:	b293      	uxth	r3, r2
 8007aca:	fb06 e303 	mla	r3, r6, r3, lr
 8007ace:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ad8:	f8dc a000 	ldr.w	sl, [ip]
 8007adc:	0c12      	lsrs	r2, r2, #16
 8007ade:	fa13 f38a 	uxtah	r3, r3, sl
 8007ae2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	9b00      	ldr	r3, [sp, #0]
 8007aea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007aee:	b292      	uxth	r2, r2
 8007af0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007af8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007afc:	4581      	cmp	r9, r0
 8007afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b02:	f84c 3b04 	str.w	r3, [ip], #4
 8007b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b0a:	d2db      	bcs.n	8007ac4 <quorem+0x44>
 8007b0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b10:	b92b      	cbnz	r3, 8007b1e <quorem+0x9e>
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	429d      	cmp	r5, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	d32e      	bcc.n	8007b7a <quorem+0xfa>
 8007b1c:	613c      	str	r4, [r7, #16]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	f001 f8c4 	bl	8008cac <__mcmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	db24      	blt.n	8007b72 <quorem+0xf2>
 8007b28:	3601      	adds	r6, #1
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f04f 0c00 	mov.w	ip, #0
 8007b30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b34:	f8d0 e000 	ldr.w	lr, [r0]
 8007b38:	b293      	uxth	r3, r2
 8007b3a:	ebac 0303 	sub.w	r3, ip, r3
 8007b3e:	0c12      	lsrs	r2, r2, #16
 8007b40:	fa13 f38e 	uxtah	r3, r3, lr
 8007b44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b52:	45c1      	cmp	r9, r8
 8007b54:	f840 3b04 	str.w	r3, [r0], #4
 8007b58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b5c:	d2e8      	bcs.n	8007b30 <quorem+0xb0>
 8007b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b66:	b922      	cbnz	r2, 8007b72 <quorem+0xf2>
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	429d      	cmp	r5, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	d30a      	bcc.n	8007b86 <quorem+0x106>
 8007b70:	613c      	str	r4, [r7, #16]
 8007b72:	4630      	mov	r0, r6
 8007b74:	b003      	add	sp, #12
 8007b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7a:	6812      	ldr	r2, [r2, #0]
 8007b7c:	3b04      	subs	r3, #4
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	d1cc      	bne.n	8007b1c <quorem+0x9c>
 8007b82:	3c01      	subs	r4, #1
 8007b84:	e7c7      	b.n	8007b16 <quorem+0x96>
 8007b86:	6812      	ldr	r2, [r2, #0]
 8007b88:	3b04      	subs	r3, #4
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	d1f0      	bne.n	8007b70 <quorem+0xf0>
 8007b8e:	3c01      	subs	r4, #1
 8007b90:	e7eb      	b.n	8007b6a <quorem+0xea>
 8007b92:	2000      	movs	r0, #0
 8007b94:	e7ee      	b.n	8007b74 <quorem+0xf4>
	...

08007b98 <_dtoa_r>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	ed2d 8b04 	vpush	{d8-d9}
 8007ba0:	ec57 6b10 	vmov	r6, r7, d0
 8007ba4:	b093      	sub	sp, #76	; 0x4c
 8007ba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ba8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bac:	9106      	str	r1, [sp, #24]
 8007bae:	ee10 aa10 	vmov	sl, s0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb8:	46bb      	mov	fp, r7
 8007bba:	b975      	cbnz	r5, 8007bda <_dtoa_r+0x42>
 8007bbc:	2010      	movs	r0, #16
 8007bbe:	f000 fddd 	bl	800877c <malloc>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6260      	str	r0, [r4, #36]	; 0x24
 8007bc6:	b920      	cbnz	r0, 8007bd2 <_dtoa_r+0x3a>
 8007bc8:	4ba7      	ldr	r3, [pc, #668]	; (8007e68 <_dtoa_r+0x2d0>)
 8007bca:	21ea      	movs	r1, #234	; 0xea
 8007bcc:	48a7      	ldr	r0, [pc, #668]	; (8007e6c <_dtoa_r+0x2d4>)
 8007bce:	f001 fbd1 	bl	8009374 <__assert_func>
 8007bd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bd6:	6005      	str	r5, [r0, #0]
 8007bd8:	60c5      	str	r5, [r0, #12]
 8007bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bdc:	6819      	ldr	r1, [r3, #0]
 8007bde:	b151      	cbz	r1, 8007bf6 <_dtoa_r+0x5e>
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	604a      	str	r2, [r1, #4]
 8007be4:	2301      	movs	r3, #1
 8007be6:	4093      	lsls	r3, r2
 8007be8:	608b      	str	r3, [r1, #8]
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 fe1c 	bl	8008828 <_Bfree>
 8007bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	1e3b      	subs	r3, r7, #0
 8007bf8:	bfaa      	itet	ge
 8007bfa:	2300      	movge	r3, #0
 8007bfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c00:	f8c8 3000 	strge.w	r3, [r8]
 8007c04:	4b9a      	ldr	r3, [pc, #616]	; (8007e70 <_dtoa_r+0x2d8>)
 8007c06:	bfbc      	itt	lt
 8007c08:	2201      	movlt	r2, #1
 8007c0a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c0e:	ea33 030b 	bics.w	r3, r3, fp
 8007c12:	d11b      	bne.n	8007c4c <_dtoa_r+0xb4>
 8007c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c16:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c20:	4333      	orrs	r3, r6
 8007c22:	f000 8592 	beq.w	800874a <_dtoa_r+0xbb2>
 8007c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c28:	b963      	cbnz	r3, 8007c44 <_dtoa_r+0xac>
 8007c2a:	4b92      	ldr	r3, [pc, #584]	; (8007e74 <_dtoa_r+0x2dc>)
 8007c2c:	e022      	b.n	8007c74 <_dtoa_r+0xdc>
 8007c2e:	4b92      	ldr	r3, [pc, #584]	; (8007e78 <_dtoa_r+0x2e0>)
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	3308      	adds	r3, #8
 8007c34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	9801      	ldr	r0, [sp, #4]
 8007c3a:	b013      	add	sp, #76	; 0x4c
 8007c3c:	ecbd 8b04 	vpop	{d8-d9}
 8007c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c44:	4b8b      	ldr	r3, [pc, #556]	; (8007e74 <_dtoa_r+0x2dc>)
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	3303      	adds	r3, #3
 8007c4a:	e7f3      	b.n	8007c34 <_dtoa_r+0x9c>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2300      	movs	r3, #0
 8007c50:	4650      	mov	r0, sl
 8007c52:	4659      	mov	r1, fp
 8007c54:	f7f8 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c58:	ec4b ab19 	vmov	d9, sl, fp
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	b158      	cbz	r0, 8007c78 <_dtoa_r+0xe0>
 8007c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c62:	2301      	movs	r3, #1
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 856b 	beq.w	8008744 <_dtoa_r+0xbac>
 8007c6e:	4883      	ldr	r0, [pc, #524]	; (8007e7c <_dtoa_r+0x2e4>)
 8007c70:	6018      	str	r0, [r3, #0]
 8007c72:	1e43      	subs	r3, r0, #1
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	e7df      	b.n	8007c38 <_dtoa_r+0xa0>
 8007c78:	ec4b ab10 	vmov	d0, sl, fp
 8007c7c:	aa10      	add	r2, sp, #64	; 0x40
 8007c7e:	a911      	add	r1, sp, #68	; 0x44
 8007c80:	4620      	mov	r0, r4
 8007c82:	f001 f8b9 	bl	8008df8 <__d2b>
 8007c86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c8a:	ee08 0a10 	vmov	s16, r0
 8007c8e:	2d00      	cmp	r5, #0
 8007c90:	f000 8084 	beq.w	8007d9c <_dtoa_r+0x204>
 8007c94:	ee19 3a90 	vmov	r3, s19
 8007c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ca0:	4656      	mov	r6, sl
 8007ca2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007caa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cae:	4b74      	ldr	r3, [pc, #464]	; (8007e80 <_dtoa_r+0x2e8>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7f8 fae7 	bl	8000288 <__aeabi_dsub>
 8007cba:	a365      	add	r3, pc, #404	; (adr r3, 8007e50 <_dtoa_r+0x2b8>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fc9a 	bl	80005f8 <__aeabi_dmul>
 8007cc4:	a364      	add	r3, pc, #400	; (adr r3, 8007e58 <_dtoa_r+0x2c0>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f7f8 fadf 	bl	800028c <__adddf3>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	f7f8 fc26 	bl	8000524 <__aeabi_i2d>
 8007cd8:	a361      	add	r3, pc, #388	; (adr r3, 8007e60 <_dtoa_r+0x2c8>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	f7f8 fc8b 	bl	80005f8 <__aeabi_dmul>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 facf 	bl	800028c <__adddf3>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	460f      	mov	r7, r1
 8007cf2:	f7f8 ff31 	bl	8000b58 <__aeabi_d2iz>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	9000      	str	r0, [sp, #0]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 feec 	bl	8000adc <__aeabi_dcmplt>
 8007d04:	b150      	cbz	r0, 8007d1c <_dtoa_r+0x184>
 8007d06:	9800      	ldr	r0, [sp, #0]
 8007d08:	f7f8 fc0c 	bl	8000524 <__aeabi_i2d>
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	463b      	mov	r3, r7
 8007d10:	f7f8 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d14:	b910      	cbnz	r0, 8007d1c <_dtoa_r+0x184>
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	9b00      	ldr	r3, [sp, #0]
 8007d1e:	2b16      	cmp	r3, #22
 8007d20:	d85a      	bhi.n	8007dd8 <_dtoa_r+0x240>
 8007d22:	9a00      	ldr	r2, [sp, #0]
 8007d24:	4b57      	ldr	r3, [pc, #348]	; (8007e84 <_dtoa_r+0x2ec>)
 8007d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	ec51 0b19 	vmov	r0, r1, d9
 8007d32:	f7f8 fed3 	bl	8000adc <__aeabi_dcmplt>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d050      	beq.n	8007ddc <_dtoa_r+0x244>
 8007d3a:	9b00      	ldr	r3, [sp, #0]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	2300      	movs	r3, #0
 8007d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d46:	1b5d      	subs	r5, r3, r5
 8007d48:	1e6b      	subs	r3, r5, #1
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	bf45      	ittet	mi
 8007d4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d52:	9304      	strmi	r3, [sp, #16]
 8007d54:	2300      	movpl	r3, #0
 8007d56:	2300      	movmi	r3, #0
 8007d58:	bf4c      	ite	mi
 8007d5a:	9305      	strmi	r3, [sp, #20]
 8007d5c:	9304      	strpl	r3, [sp, #16]
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	db3d      	blt.n	8007de0 <_dtoa_r+0x248>
 8007d64:	9b05      	ldr	r3, [sp, #20]
 8007d66:	9a00      	ldr	r2, [sp, #0]
 8007d68:	920a      	str	r2, [sp, #40]	; 0x28
 8007d6a:	4413      	add	r3, r2
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9307      	str	r3, [sp, #28]
 8007d72:	9b06      	ldr	r3, [sp, #24]
 8007d74:	2b09      	cmp	r3, #9
 8007d76:	f200 8089 	bhi.w	8007e8c <_dtoa_r+0x2f4>
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	bfc4      	itt	gt
 8007d7e:	3b04      	subgt	r3, #4
 8007d80:	9306      	strgt	r3, [sp, #24]
 8007d82:	9b06      	ldr	r3, [sp, #24]
 8007d84:	f1a3 0302 	sub.w	r3, r3, #2
 8007d88:	bfcc      	ite	gt
 8007d8a:	2500      	movgt	r5, #0
 8007d8c:	2501      	movle	r5, #1
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	f200 8087 	bhi.w	8007ea2 <_dtoa_r+0x30a>
 8007d94:	e8df f003 	tbb	[pc, r3]
 8007d98:	59383a2d 	.word	0x59383a2d
 8007d9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007da0:	441d      	add	r5, r3
 8007da2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	bfc1      	itttt	gt
 8007daa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007db2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007db6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dba:	bfda      	itte	le
 8007dbc:	f1c3 0320 	rsble	r3, r3, #32
 8007dc0:	fa06 f003 	lslle.w	r0, r6, r3
 8007dc4:	4318      	orrgt	r0, r3
 8007dc6:	f7f8 fb9d 	bl	8000504 <__aeabi_ui2d>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4606      	mov	r6, r0
 8007dce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007dd2:	3d01      	subs	r5, #1
 8007dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8007dd6:	e76a      	b.n	8007cae <_dtoa_r+0x116>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e7b2      	b.n	8007d42 <_dtoa_r+0x1aa>
 8007ddc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dde:	e7b1      	b.n	8007d44 <_dtoa_r+0x1ac>
 8007de0:	9b04      	ldr	r3, [sp, #16]
 8007de2:	9a00      	ldr	r2, [sp, #0]
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	4253      	negs	r3, r2
 8007dea:	9307      	str	r3, [sp, #28]
 8007dec:	2300      	movs	r3, #0
 8007dee:	930a      	str	r3, [sp, #40]	; 0x28
 8007df0:	e7bf      	b.n	8007d72 <_dtoa_r+0x1da>
 8007df2:	2300      	movs	r3, #0
 8007df4:	9308      	str	r3, [sp, #32]
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dc55      	bgt.n	8007ea8 <_dtoa_r+0x310>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e02:	461a      	mov	r2, r3
 8007e04:	9209      	str	r2, [sp, #36]	; 0x24
 8007e06:	e00c      	b.n	8007e22 <_dtoa_r+0x28a>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e7f3      	b.n	8007df4 <_dtoa_r+0x25c>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e10:	9308      	str	r3, [sp, #32]
 8007e12:	9b00      	ldr	r3, [sp, #0]
 8007e14:	4413      	add	r3, r2
 8007e16:	9302      	str	r3, [sp, #8]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	9303      	str	r3, [sp, #12]
 8007e1e:	bfb8      	it	lt
 8007e20:	2301      	movlt	r3, #1
 8007e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e24:	2200      	movs	r2, #0
 8007e26:	6042      	str	r2, [r0, #4]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	f102 0614 	add.w	r6, r2, #20
 8007e2e:	429e      	cmp	r6, r3
 8007e30:	6841      	ldr	r1, [r0, #4]
 8007e32:	d93d      	bls.n	8007eb0 <_dtoa_r+0x318>
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 fcb7 	bl	80087a8 <_Balloc>
 8007e3a:	9001      	str	r0, [sp, #4]
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d13b      	bne.n	8007eb8 <_dtoa_r+0x320>
 8007e40:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <_dtoa_r+0x2f0>)
 8007e42:	4602      	mov	r2, r0
 8007e44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e48:	e6c0      	b.n	8007bcc <_dtoa_r+0x34>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e7df      	b.n	8007e0e <_dtoa_r+0x276>
 8007e4e:	bf00      	nop
 8007e50:	636f4361 	.word	0x636f4361
 8007e54:	3fd287a7 	.word	0x3fd287a7
 8007e58:	8b60c8b3 	.word	0x8b60c8b3
 8007e5c:	3fc68a28 	.word	0x3fc68a28
 8007e60:	509f79fb 	.word	0x509f79fb
 8007e64:	3fd34413 	.word	0x3fd34413
 8007e68:	0800a075 	.word	0x0800a075
 8007e6c:	0800a08c 	.word	0x0800a08c
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	0800a071 	.word	0x0800a071
 8007e78:	0800a068 	.word	0x0800a068
 8007e7c:	0800a045 	.word	0x0800a045
 8007e80:	3ff80000 	.word	0x3ff80000
 8007e84:	0800a180 	.word	0x0800a180
 8007e88:	0800a0e7 	.word	0x0800a0e7
 8007e8c:	2501      	movs	r5, #1
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9306      	str	r3, [sp, #24]
 8007e92:	9508      	str	r5, [sp, #32]
 8007e94:	f04f 33ff 	mov.w	r3, #4294967295
 8007e98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2312      	movs	r3, #18
 8007ea0:	e7b0      	b.n	8007e04 <_dtoa_r+0x26c>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	9308      	str	r3, [sp, #32]
 8007ea6:	e7f5      	b.n	8007e94 <_dtoa_r+0x2fc>
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007eae:	e7b8      	b.n	8007e22 <_dtoa_r+0x28a>
 8007eb0:	3101      	adds	r1, #1
 8007eb2:	6041      	str	r1, [r0, #4]
 8007eb4:	0052      	lsls	r2, r2, #1
 8007eb6:	e7b8      	b.n	8007e2a <_dtoa_r+0x292>
 8007eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eba:	9a01      	ldr	r2, [sp, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	2b0e      	cmp	r3, #14
 8007ec2:	f200 809d 	bhi.w	8008000 <_dtoa_r+0x468>
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	f000 809a 	beq.w	8008000 <_dtoa_r+0x468>
 8007ecc:	9b00      	ldr	r3, [sp, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dd32      	ble.n	8007f38 <_dtoa_r+0x3a0>
 8007ed2:	4ab7      	ldr	r2, [pc, #732]	; (80081b0 <_dtoa_r+0x618>)
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ee0:	9b00      	ldr	r3, [sp, #0]
 8007ee2:	05d8      	lsls	r0, r3, #23
 8007ee4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ee8:	d516      	bpl.n	8007f18 <_dtoa_r+0x380>
 8007eea:	4bb2      	ldr	r3, [pc, #712]	; (80081b4 <_dtoa_r+0x61c>)
 8007eec:	ec51 0b19 	vmov	r0, r1, d9
 8007ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ef4:	f7f8 fcaa 	bl	800084c <__aeabi_ddiv>
 8007ef8:	f007 070f 	and.w	r7, r7, #15
 8007efc:	4682      	mov	sl, r0
 8007efe:	468b      	mov	fp, r1
 8007f00:	2503      	movs	r5, #3
 8007f02:	4eac      	ldr	r6, [pc, #688]	; (80081b4 <_dtoa_r+0x61c>)
 8007f04:	b957      	cbnz	r7, 8007f1c <_dtoa_r+0x384>
 8007f06:	4642      	mov	r2, r8
 8007f08:	464b      	mov	r3, r9
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	f7f8 fc9d 	bl	800084c <__aeabi_ddiv>
 8007f12:	4682      	mov	sl, r0
 8007f14:	468b      	mov	fp, r1
 8007f16:	e028      	b.n	8007f6a <_dtoa_r+0x3d2>
 8007f18:	2502      	movs	r5, #2
 8007f1a:	e7f2      	b.n	8007f02 <_dtoa_r+0x36a>
 8007f1c:	07f9      	lsls	r1, r7, #31
 8007f1e:	d508      	bpl.n	8007f32 <_dtoa_r+0x39a>
 8007f20:	4640      	mov	r0, r8
 8007f22:	4649      	mov	r1, r9
 8007f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f28:	f7f8 fb66 	bl	80005f8 <__aeabi_dmul>
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	4680      	mov	r8, r0
 8007f30:	4689      	mov	r9, r1
 8007f32:	107f      	asrs	r7, r7, #1
 8007f34:	3608      	adds	r6, #8
 8007f36:	e7e5      	b.n	8007f04 <_dtoa_r+0x36c>
 8007f38:	f000 809b 	beq.w	8008072 <_dtoa_r+0x4da>
 8007f3c:	9b00      	ldr	r3, [sp, #0]
 8007f3e:	4f9d      	ldr	r7, [pc, #628]	; (80081b4 <_dtoa_r+0x61c>)
 8007f40:	425e      	negs	r6, r3
 8007f42:	4b9b      	ldr	r3, [pc, #620]	; (80081b0 <_dtoa_r+0x618>)
 8007f44:	f006 020f 	and.w	r2, r6, #15
 8007f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	ec51 0b19 	vmov	r0, r1, d9
 8007f54:	f7f8 fb50 	bl	80005f8 <__aeabi_dmul>
 8007f58:	1136      	asrs	r6, r6, #4
 8007f5a:	4682      	mov	sl, r0
 8007f5c:	468b      	mov	fp, r1
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2502      	movs	r5, #2
 8007f62:	2e00      	cmp	r6, #0
 8007f64:	d17a      	bne.n	800805c <_dtoa_r+0x4c4>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1d3      	bne.n	8007f12 <_dtoa_r+0x37a>
 8007f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 8082 	beq.w	8008076 <_dtoa_r+0x4de>
 8007f72:	4b91      	ldr	r3, [pc, #580]	; (80081b8 <_dtoa_r+0x620>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	4650      	mov	r0, sl
 8007f78:	4659      	mov	r1, fp
 8007f7a:	f7f8 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d079      	beq.n	8008076 <_dtoa_r+0x4de>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d076      	beq.n	8008076 <_dtoa_r+0x4de>
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd36      	ble.n	8007ffc <_dtoa_r+0x464>
 8007f8e:	9b00      	ldr	r3, [sp, #0]
 8007f90:	4650      	mov	r0, sl
 8007f92:	4659      	mov	r1, fp
 8007f94:	1e5f      	subs	r7, r3, #1
 8007f96:	2200      	movs	r2, #0
 8007f98:	4b88      	ldr	r3, [pc, #544]	; (80081bc <_dtoa_r+0x624>)
 8007f9a:	f7f8 fb2d 	bl	80005f8 <__aeabi_dmul>
 8007f9e:	9e02      	ldr	r6, [sp, #8]
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	468b      	mov	fp, r1
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f7f8 fabc 	bl	8000524 <__aeabi_i2d>
 8007fac:	4652      	mov	r2, sl
 8007fae:	465b      	mov	r3, fp
 8007fb0:	f7f8 fb22 	bl	80005f8 <__aeabi_dmul>
 8007fb4:	4b82      	ldr	r3, [pc, #520]	; (80081c0 <_dtoa_r+0x628>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f7f8 f968 	bl	800028c <__adddf3>
 8007fbc:	46d0      	mov	r8, sl
 8007fbe:	46d9      	mov	r9, fp
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	d158      	bne.n	800807c <_dtoa_r+0x4e4>
 8007fca:	4b7e      	ldr	r3, [pc, #504]	; (80081c4 <_dtoa_r+0x62c>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	f7f8 f959 	bl	8000288 <__aeabi_dsub>
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	465b      	mov	r3, fp
 8007fda:	4680      	mov	r8, r0
 8007fdc:	4689      	mov	r9, r1
 8007fde:	f7f8 fd9b 	bl	8000b18 <__aeabi_dcmpgt>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f040 8295 	bne.w	8008512 <_dtoa_r+0x97a>
 8007fe8:	4652      	mov	r2, sl
 8007fea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 fd73 	bl	8000adc <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f040 8289 	bne.w	800850e <_dtoa_r+0x976>
 8007ffc:	ec5b ab19 	vmov	sl, fp, d9
 8008000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008002:	2b00      	cmp	r3, #0
 8008004:	f2c0 8148 	blt.w	8008298 <_dtoa_r+0x700>
 8008008:	9a00      	ldr	r2, [sp, #0]
 800800a:	2a0e      	cmp	r2, #14
 800800c:	f300 8144 	bgt.w	8008298 <_dtoa_r+0x700>
 8008010:	4b67      	ldr	r3, [pc, #412]	; (80081b0 <_dtoa_r+0x618>)
 8008012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008016:	e9d3 8900 	ldrd	r8, r9, [r3]
 800801a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	f280 80d5 	bge.w	80081cc <_dtoa_r+0x634>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f300 80d1 	bgt.w	80081cc <_dtoa_r+0x634>
 800802a:	f040 826f 	bne.w	800850c <_dtoa_r+0x974>
 800802e:	4b65      	ldr	r3, [pc, #404]	; (80081c4 <_dtoa_r+0x62c>)
 8008030:	2200      	movs	r2, #0
 8008032:	4640      	mov	r0, r8
 8008034:	4649      	mov	r1, r9
 8008036:	f7f8 fadf 	bl	80005f8 <__aeabi_dmul>
 800803a:	4652      	mov	r2, sl
 800803c:	465b      	mov	r3, fp
 800803e:	f7f8 fd61 	bl	8000b04 <__aeabi_dcmpge>
 8008042:	9e03      	ldr	r6, [sp, #12]
 8008044:	4637      	mov	r7, r6
 8008046:	2800      	cmp	r0, #0
 8008048:	f040 8245 	bne.w	80084d6 <_dtoa_r+0x93e>
 800804c:	9d01      	ldr	r5, [sp, #4]
 800804e:	2331      	movs	r3, #49	; 0x31
 8008050:	f805 3b01 	strb.w	r3, [r5], #1
 8008054:	9b00      	ldr	r3, [sp, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	e240      	b.n	80084de <_dtoa_r+0x946>
 800805c:	07f2      	lsls	r2, r6, #31
 800805e:	d505      	bpl.n	800806c <_dtoa_r+0x4d4>
 8008060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008064:	f7f8 fac8 	bl	80005f8 <__aeabi_dmul>
 8008068:	3501      	adds	r5, #1
 800806a:	2301      	movs	r3, #1
 800806c:	1076      	asrs	r6, r6, #1
 800806e:	3708      	adds	r7, #8
 8008070:	e777      	b.n	8007f62 <_dtoa_r+0x3ca>
 8008072:	2502      	movs	r5, #2
 8008074:	e779      	b.n	8007f6a <_dtoa_r+0x3d2>
 8008076:	9f00      	ldr	r7, [sp, #0]
 8008078:	9e03      	ldr	r6, [sp, #12]
 800807a:	e794      	b.n	8007fa6 <_dtoa_r+0x40e>
 800807c:	9901      	ldr	r1, [sp, #4]
 800807e:	4b4c      	ldr	r3, [pc, #304]	; (80081b0 <_dtoa_r+0x618>)
 8008080:	4431      	add	r1, r6
 8008082:	910d      	str	r1, [sp, #52]	; 0x34
 8008084:	9908      	ldr	r1, [sp, #32]
 8008086:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800808a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800808e:	2900      	cmp	r1, #0
 8008090:	d043      	beq.n	800811a <_dtoa_r+0x582>
 8008092:	494d      	ldr	r1, [pc, #308]	; (80081c8 <_dtoa_r+0x630>)
 8008094:	2000      	movs	r0, #0
 8008096:	f7f8 fbd9 	bl	800084c <__aeabi_ddiv>
 800809a:	4652      	mov	r2, sl
 800809c:	465b      	mov	r3, fp
 800809e:	f7f8 f8f3 	bl	8000288 <__aeabi_dsub>
 80080a2:	9d01      	ldr	r5, [sp, #4]
 80080a4:	4682      	mov	sl, r0
 80080a6:	468b      	mov	fp, r1
 80080a8:	4649      	mov	r1, r9
 80080aa:	4640      	mov	r0, r8
 80080ac:	f7f8 fd54 	bl	8000b58 <__aeabi_d2iz>
 80080b0:	4606      	mov	r6, r0
 80080b2:	f7f8 fa37 	bl	8000524 <__aeabi_i2d>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4640      	mov	r0, r8
 80080bc:	4649      	mov	r1, r9
 80080be:	f7f8 f8e3 	bl	8000288 <__aeabi_dsub>
 80080c2:	3630      	adds	r6, #48	; 0x30
 80080c4:	f805 6b01 	strb.w	r6, [r5], #1
 80080c8:	4652      	mov	r2, sl
 80080ca:	465b      	mov	r3, fp
 80080cc:	4680      	mov	r8, r0
 80080ce:	4689      	mov	r9, r1
 80080d0:	f7f8 fd04 	bl	8000adc <__aeabi_dcmplt>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d163      	bne.n	80081a0 <_dtoa_r+0x608>
 80080d8:	4642      	mov	r2, r8
 80080da:	464b      	mov	r3, r9
 80080dc:	4936      	ldr	r1, [pc, #216]	; (80081b8 <_dtoa_r+0x620>)
 80080de:	2000      	movs	r0, #0
 80080e0:	f7f8 f8d2 	bl	8000288 <__aeabi_dsub>
 80080e4:	4652      	mov	r2, sl
 80080e6:	465b      	mov	r3, fp
 80080e8:	f7f8 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f040 80b5 	bne.w	800825c <_dtoa_r+0x6c4>
 80080f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080f4:	429d      	cmp	r5, r3
 80080f6:	d081      	beq.n	8007ffc <_dtoa_r+0x464>
 80080f8:	4b30      	ldr	r3, [pc, #192]	; (80081bc <_dtoa_r+0x624>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	4650      	mov	r0, sl
 80080fe:	4659      	mov	r1, fp
 8008100:	f7f8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8008104:	4b2d      	ldr	r3, [pc, #180]	; (80081bc <_dtoa_r+0x624>)
 8008106:	4682      	mov	sl, r0
 8008108:	468b      	mov	fp, r1
 800810a:	4640      	mov	r0, r8
 800810c:	4649      	mov	r1, r9
 800810e:	2200      	movs	r2, #0
 8008110:	f7f8 fa72 	bl	80005f8 <__aeabi_dmul>
 8008114:	4680      	mov	r8, r0
 8008116:	4689      	mov	r9, r1
 8008118:	e7c6      	b.n	80080a8 <_dtoa_r+0x510>
 800811a:	4650      	mov	r0, sl
 800811c:	4659      	mov	r1, fp
 800811e:	f7f8 fa6b 	bl	80005f8 <__aeabi_dmul>
 8008122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008124:	9d01      	ldr	r5, [sp, #4]
 8008126:	930f      	str	r3, [sp, #60]	; 0x3c
 8008128:	4682      	mov	sl, r0
 800812a:	468b      	mov	fp, r1
 800812c:	4649      	mov	r1, r9
 800812e:	4640      	mov	r0, r8
 8008130:	f7f8 fd12 	bl	8000b58 <__aeabi_d2iz>
 8008134:	4606      	mov	r6, r0
 8008136:	f7f8 f9f5 	bl	8000524 <__aeabi_i2d>
 800813a:	3630      	adds	r6, #48	; 0x30
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 f8a0 	bl	8000288 <__aeabi_dsub>
 8008148:	f805 6b01 	strb.w	r6, [r5], #1
 800814c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800814e:	429d      	cmp	r5, r3
 8008150:	4680      	mov	r8, r0
 8008152:	4689      	mov	r9, r1
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	d124      	bne.n	80081a4 <_dtoa_r+0x60c>
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <_dtoa_r+0x630>)
 800815c:	4650      	mov	r0, sl
 800815e:	4659      	mov	r1, fp
 8008160:	f7f8 f894 	bl	800028c <__adddf3>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4640      	mov	r0, r8
 800816a:	4649      	mov	r1, r9
 800816c:	f7f8 fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 8008170:	2800      	cmp	r0, #0
 8008172:	d173      	bne.n	800825c <_dtoa_r+0x6c4>
 8008174:	4652      	mov	r2, sl
 8008176:	465b      	mov	r3, fp
 8008178:	4913      	ldr	r1, [pc, #76]	; (80081c8 <_dtoa_r+0x630>)
 800817a:	2000      	movs	r0, #0
 800817c:	f7f8 f884 	bl	8000288 <__aeabi_dsub>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4640      	mov	r0, r8
 8008186:	4649      	mov	r1, r9
 8008188:	f7f8 fca8 	bl	8000adc <__aeabi_dcmplt>
 800818c:	2800      	cmp	r0, #0
 800818e:	f43f af35 	beq.w	8007ffc <_dtoa_r+0x464>
 8008192:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008194:	1e6b      	subs	r3, r5, #1
 8008196:	930f      	str	r3, [sp, #60]	; 0x3c
 8008198:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800819c:	2b30      	cmp	r3, #48	; 0x30
 800819e:	d0f8      	beq.n	8008192 <_dtoa_r+0x5fa>
 80081a0:	9700      	str	r7, [sp, #0]
 80081a2:	e049      	b.n	8008238 <_dtoa_r+0x6a0>
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <_dtoa_r+0x624>)
 80081a6:	f7f8 fa27 	bl	80005f8 <__aeabi_dmul>
 80081aa:	4680      	mov	r8, r0
 80081ac:	4689      	mov	r9, r1
 80081ae:	e7bd      	b.n	800812c <_dtoa_r+0x594>
 80081b0:	0800a180 	.word	0x0800a180
 80081b4:	0800a158 	.word	0x0800a158
 80081b8:	3ff00000 	.word	0x3ff00000
 80081bc:	40240000 	.word	0x40240000
 80081c0:	401c0000 	.word	0x401c0000
 80081c4:	40140000 	.word	0x40140000
 80081c8:	3fe00000 	.word	0x3fe00000
 80081cc:	9d01      	ldr	r5, [sp, #4]
 80081ce:	4656      	mov	r6, sl
 80081d0:	465f      	mov	r7, fp
 80081d2:	4642      	mov	r2, r8
 80081d4:	464b      	mov	r3, r9
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 fb37 	bl	800084c <__aeabi_ddiv>
 80081de:	f7f8 fcbb 	bl	8000b58 <__aeabi_d2iz>
 80081e2:	4682      	mov	sl, r0
 80081e4:	f7f8 f99e 	bl	8000524 <__aeabi_i2d>
 80081e8:	4642      	mov	r2, r8
 80081ea:	464b      	mov	r3, r9
 80081ec:	f7f8 fa04 	bl	80005f8 <__aeabi_dmul>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80081fc:	f7f8 f844 	bl	8000288 <__aeabi_dsub>
 8008200:	f805 6b01 	strb.w	r6, [r5], #1
 8008204:	9e01      	ldr	r6, [sp, #4]
 8008206:	9f03      	ldr	r7, [sp, #12]
 8008208:	1bae      	subs	r6, r5, r6
 800820a:	42b7      	cmp	r7, r6
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	d135      	bne.n	800827e <_dtoa_r+0x6e6>
 8008212:	f7f8 f83b 	bl	800028c <__adddf3>
 8008216:	4642      	mov	r2, r8
 8008218:	464b      	mov	r3, r9
 800821a:	4606      	mov	r6, r0
 800821c:	460f      	mov	r7, r1
 800821e:	f7f8 fc7b 	bl	8000b18 <__aeabi_dcmpgt>
 8008222:	b9d0      	cbnz	r0, 800825a <_dtoa_r+0x6c2>
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f8 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008230:	b110      	cbz	r0, 8008238 <_dtoa_r+0x6a0>
 8008232:	f01a 0f01 	tst.w	sl, #1
 8008236:	d110      	bne.n	800825a <_dtoa_r+0x6c2>
 8008238:	4620      	mov	r0, r4
 800823a:	ee18 1a10 	vmov	r1, s16
 800823e:	f000 faf3 	bl	8008828 <_Bfree>
 8008242:	2300      	movs	r3, #0
 8008244:	9800      	ldr	r0, [sp, #0]
 8008246:	702b      	strb	r3, [r5, #0]
 8008248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800824a:	3001      	adds	r0, #1
 800824c:	6018      	str	r0, [r3, #0]
 800824e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008250:	2b00      	cmp	r3, #0
 8008252:	f43f acf1 	beq.w	8007c38 <_dtoa_r+0xa0>
 8008256:	601d      	str	r5, [r3, #0]
 8008258:	e4ee      	b.n	8007c38 <_dtoa_r+0xa0>
 800825a:	9f00      	ldr	r7, [sp, #0]
 800825c:	462b      	mov	r3, r5
 800825e:	461d      	mov	r5, r3
 8008260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008264:	2a39      	cmp	r2, #57	; 0x39
 8008266:	d106      	bne.n	8008276 <_dtoa_r+0x6de>
 8008268:	9a01      	ldr	r2, [sp, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d1f7      	bne.n	800825e <_dtoa_r+0x6c6>
 800826e:	9901      	ldr	r1, [sp, #4]
 8008270:	2230      	movs	r2, #48	; 0x30
 8008272:	3701      	adds	r7, #1
 8008274:	700a      	strb	r2, [r1, #0]
 8008276:	781a      	ldrb	r2, [r3, #0]
 8008278:	3201      	adds	r2, #1
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e790      	b.n	80081a0 <_dtoa_r+0x608>
 800827e:	4ba6      	ldr	r3, [pc, #664]	; (8008518 <_dtoa_r+0x980>)
 8008280:	2200      	movs	r2, #0
 8008282:	f7f8 f9b9 	bl	80005f8 <__aeabi_dmul>
 8008286:	2200      	movs	r2, #0
 8008288:	2300      	movs	r3, #0
 800828a:	4606      	mov	r6, r0
 800828c:	460f      	mov	r7, r1
 800828e:	f7f8 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008292:	2800      	cmp	r0, #0
 8008294:	d09d      	beq.n	80081d2 <_dtoa_r+0x63a>
 8008296:	e7cf      	b.n	8008238 <_dtoa_r+0x6a0>
 8008298:	9a08      	ldr	r2, [sp, #32]
 800829a:	2a00      	cmp	r2, #0
 800829c:	f000 80d7 	beq.w	800844e <_dtoa_r+0x8b6>
 80082a0:	9a06      	ldr	r2, [sp, #24]
 80082a2:	2a01      	cmp	r2, #1
 80082a4:	f300 80ba 	bgt.w	800841c <_dtoa_r+0x884>
 80082a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	f000 80b2 	beq.w	8008414 <_dtoa_r+0x87c>
 80082b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082b4:	9e07      	ldr	r6, [sp, #28]
 80082b6:	9d04      	ldr	r5, [sp, #16]
 80082b8:	9a04      	ldr	r2, [sp, #16]
 80082ba:	441a      	add	r2, r3
 80082bc:	9204      	str	r2, [sp, #16]
 80082be:	9a05      	ldr	r2, [sp, #20]
 80082c0:	2101      	movs	r1, #1
 80082c2:	441a      	add	r2, r3
 80082c4:	4620      	mov	r0, r4
 80082c6:	9205      	str	r2, [sp, #20]
 80082c8:	f000 fb66 	bl	8008998 <__i2b>
 80082cc:	4607      	mov	r7, r0
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	dd0c      	ble.n	80082ec <_dtoa_r+0x754>
 80082d2:	9b05      	ldr	r3, [sp, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dd09      	ble.n	80082ec <_dtoa_r+0x754>
 80082d8:	42ab      	cmp	r3, r5
 80082da:	9a04      	ldr	r2, [sp, #16]
 80082dc:	bfa8      	it	ge
 80082de:	462b      	movge	r3, r5
 80082e0:	1ad2      	subs	r2, r2, r3
 80082e2:	9204      	str	r2, [sp, #16]
 80082e4:	9a05      	ldr	r2, [sp, #20]
 80082e6:	1aed      	subs	r5, r5, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	9b07      	ldr	r3, [sp, #28]
 80082ee:	b31b      	cbz	r3, 8008338 <_dtoa_r+0x7a0>
 80082f0:	9b08      	ldr	r3, [sp, #32]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 80af 	beq.w	8008456 <_dtoa_r+0x8be>
 80082f8:	2e00      	cmp	r6, #0
 80082fa:	dd13      	ble.n	8008324 <_dtoa_r+0x78c>
 80082fc:	4639      	mov	r1, r7
 80082fe:	4632      	mov	r2, r6
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fc09 	bl	8008b18 <__pow5mult>
 8008306:	ee18 2a10 	vmov	r2, s16
 800830a:	4601      	mov	r1, r0
 800830c:	4607      	mov	r7, r0
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fb58 	bl	80089c4 <__multiply>
 8008314:	ee18 1a10 	vmov	r1, s16
 8008318:	4680      	mov	r8, r0
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fa84 	bl	8008828 <_Bfree>
 8008320:	ee08 8a10 	vmov	s16, r8
 8008324:	9b07      	ldr	r3, [sp, #28]
 8008326:	1b9a      	subs	r2, r3, r6
 8008328:	d006      	beq.n	8008338 <_dtoa_r+0x7a0>
 800832a:	ee18 1a10 	vmov	r1, s16
 800832e:	4620      	mov	r0, r4
 8008330:	f000 fbf2 	bl	8008b18 <__pow5mult>
 8008334:	ee08 0a10 	vmov	s16, r0
 8008338:	2101      	movs	r1, #1
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fb2c 	bl	8008998 <__i2b>
 8008340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	4606      	mov	r6, r0
 8008346:	f340 8088 	ble.w	800845a <_dtoa_r+0x8c2>
 800834a:	461a      	mov	r2, r3
 800834c:	4601      	mov	r1, r0
 800834e:	4620      	mov	r0, r4
 8008350:	f000 fbe2 	bl	8008b18 <__pow5mult>
 8008354:	9b06      	ldr	r3, [sp, #24]
 8008356:	2b01      	cmp	r3, #1
 8008358:	4606      	mov	r6, r0
 800835a:	f340 8081 	ble.w	8008460 <_dtoa_r+0x8c8>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	6933      	ldr	r3, [r6, #16]
 8008364:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008368:	6918      	ldr	r0, [r3, #16]
 800836a:	f000 fac5 	bl	80088f8 <__hi0bits>
 800836e:	f1c0 0020 	rsb	r0, r0, #32
 8008372:	9b05      	ldr	r3, [sp, #20]
 8008374:	4418      	add	r0, r3
 8008376:	f010 001f 	ands.w	r0, r0, #31
 800837a:	f000 8092 	beq.w	80084a2 <_dtoa_r+0x90a>
 800837e:	f1c0 0320 	rsb	r3, r0, #32
 8008382:	2b04      	cmp	r3, #4
 8008384:	f340 808a 	ble.w	800849c <_dtoa_r+0x904>
 8008388:	f1c0 001c 	rsb	r0, r0, #28
 800838c:	9b04      	ldr	r3, [sp, #16]
 800838e:	4403      	add	r3, r0
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	9b05      	ldr	r3, [sp, #20]
 8008394:	4403      	add	r3, r0
 8008396:	4405      	add	r5, r0
 8008398:	9305      	str	r3, [sp, #20]
 800839a:	9b04      	ldr	r3, [sp, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	dd07      	ble.n	80083b0 <_dtoa_r+0x818>
 80083a0:	ee18 1a10 	vmov	r1, s16
 80083a4:	461a      	mov	r2, r3
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 fc10 	bl	8008bcc <__lshift>
 80083ac:	ee08 0a10 	vmov	s16, r0
 80083b0:	9b05      	ldr	r3, [sp, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd05      	ble.n	80083c2 <_dtoa_r+0x82a>
 80083b6:	4631      	mov	r1, r6
 80083b8:	461a      	mov	r2, r3
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 fc06 	bl	8008bcc <__lshift>
 80083c0:	4606      	mov	r6, r0
 80083c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d06e      	beq.n	80084a6 <_dtoa_r+0x90e>
 80083c8:	ee18 0a10 	vmov	r0, s16
 80083cc:	4631      	mov	r1, r6
 80083ce:	f000 fc6d 	bl	8008cac <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	da67      	bge.n	80084a6 <_dtoa_r+0x90e>
 80083d6:	9b00      	ldr	r3, [sp, #0]
 80083d8:	3b01      	subs	r3, #1
 80083da:	ee18 1a10 	vmov	r1, s16
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	220a      	movs	r2, #10
 80083e2:	2300      	movs	r3, #0
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fa41 	bl	800886c <__multadd>
 80083ea:	9b08      	ldr	r3, [sp, #32]
 80083ec:	ee08 0a10 	vmov	s16, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 81b1 	beq.w	8008758 <_dtoa_r+0xbc0>
 80083f6:	2300      	movs	r3, #0
 80083f8:	4639      	mov	r1, r7
 80083fa:	220a      	movs	r2, #10
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fa35 	bl	800886c <__multadd>
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	4607      	mov	r7, r0
 8008408:	f300 808e 	bgt.w	8008528 <_dtoa_r+0x990>
 800840c:	9b06      	ldr	r3, [sp, #24]
 800840e:	2b02      	cmp	r3, #2
 8008410:	dc51      	bgt.n	80084b6 <_dtoa_r+0x91e>
 8008412:	e089      	b.n	8008528 <_dtoa_r+0x990>
 8008414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800841a:	e74b      	b.n	80082b4 <_dtoa_r+0x71c>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	1e5e      	subs	r6, r3, #1
 8008420:	9b07      	ldr	r3, [sp, #28]
 8008422:	42b3      	cmp	r3, r6
 8008424:	bfbf      	itttt	lt
 8008426:	9b07      	ldrlt	r3, [sp, #28]
 8008428:	9607      	strlt	r6, [sp, #28]
 800842a:	1af2      	sublt	r2, r6, r3
 800842c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800842e:	bfb6      	itet	lt
 8008430:	189b      	addlt	r3, r3, r2
 8008432:	1b9e      	subge	r6, r3, r6
 8008434:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	bfb8      	it	lt
 800843a:	2600      	movlt	r6, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfb7      	itett	lt
 8008440:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008444:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008448:	1a9d      	sublt	r5, r3, r2
 800844a:	2300      	movlt	r3, #0
 800844c:	e734      	b.n	80082b8 <_dtoa_r+0x720>
 800844e:	9e07      	ldr	r6, [sp, #28]
 8008450:	9d04      	ldr	r5, [sp, #16]
 8008452:	9f08      	ldr	r7, [sp, #32]
 8008454:	e73b      	b.n	80082ce <_dtoa_r+0x736>
 8008456:	9a07      	ldr	r2, [sp, #28]
 8008458:	e767      	b.n	800832a <_dtoa_r+0x792>
 800845a:	9b06      	ldr	r3, [sp, #24]
 800845c:	2b01      	cmp	r3, #1
 800845e:	dc18      	bgt.n	8008492 <_dtoa_r+0x8fa>
 8008460:	f1ba 0f00 	cmp.w	sl, #0
 8008464:	d115      	bne.n	8008492 <_dtoa_r+0x8fa>
 8008466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800846a:	b993      	cbnz	r3, 8008492 <_dtoa_r+0x8fa>
 800846c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008470:	0d1b      	lsrs	r3, r3, #20
 8008472:	051b      	lsls	r3, r3, #20
 8008474:	b183      	cbz	r3, 8008498 <_dtoa_r+0x900>
 8008476:	9b04      	ldr	r3, [sp, #16]
 8008478:	3301      	adds	r3, #1
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	9b05      	ldr	r3, [sp, #20]
 800847e:	3301      	adds	r3, #1
 8008480:	9305      	str	r3, [sp, #20]
 8008482:	f04f 0801 	mov.w	r8, #1
 8008486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008488:	2b00      	cmp	r3, #0
 800848a:	f47f af6a 	bne.w	8008362 <_dtoa_r+0x7ca>
 800848e:	2001      	movs	r0, #1
 8008490:	e76f      	b.n	8008372 <_dtoa_r+0x7da>
 8008492:	f04f 0800 	mov.w	r8, #0
 8008496:	e7f6      	b.n	8008486 <_dtoa_r+0x8ee>
 8008498:	4698      	mov	r8, r3
 800849a:	e7f4      	b.n	8008486 <_dtoa_r+0x8ee>
 800849c:	f43f af7d 	beq.w	800839a <_dtoa_r+0x802>
 80084a0:	4618      	mov	r0, r3
 80084a2:	301c      	adds	r0, #28
 80084a4:	e772      	b.n	800838c <_dtoa_r+0x7f4>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc37      	bgt.n	800851c <_dtoa_r+0x984>
 80084ac:	9b06      	ldr	r3, [sp, #24]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	dd34      	ble.n	800851c <_dtoa_r+0x984>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	9302      	str	r3, [sp, #8]
 80084b6:	9b02      	ldr	r3, [sp, #8]
 80084b8:	b96b      	cbnz	r3, 80084d6 <_dtoa_r+0x93e>
 80084ba:	4631      	mov	r1, r6
 80084bc:	2205      	movs	r2, #5
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 f9d4 	bl	800886c <__multadd>
 80084c4:	4601      	mov	r1, r0
 80084c6:	4606      	mov	r6, r0
 80084c8:	ee18 0a10 	vmov	r0, s16
 80084cc:	f000 fbee 	bl	8008cac <__mcmp>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f73f adbb 	bgt.w	800804c <_dtoa_r+0x4b4>
 80084d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d8:	9d01      	ldr	r5, [sp, #4]
 80084da:	43db      	mvns	r3, r3
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	f04f 0800 	mov.w	r8, #0
 80084e2:	4631      	mov	r1, r6
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 f99f 	bl	8008828 <_Bfree>
 80084ea:	2f00      	cmp	r7, #0
 80084ec:	f43f aea4 	beq.w	8008238 <_dtoa_r+0x6a0>
 80084f0:	f1b8 0f00 	cmp.w	r8, #0
 80084f4:	d005      	beq.n	8008502 <_dtoa_r+0x96a>
 80084f6:	45b8      	cmp	r8, r7
 80084f8:	d003      	beq.n	8008502 <_dtoa_r+0x96a>
 80084fa:	4641      	mov	r1, r8
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 f993 	bl	8008828 <_Bfree>
 8008502:	4639      	mov	r1, r7
 8008504:	4620      	mov	r0, r4
 8008506:	f000 f98f 	bl	8008828 <_Bfree>
 800850a:	e695      	b.n	8008238 <_dtoa_r+0x6a0>
 800850c:	2600      	movs	r6, #0
 800850e:	4637      	mov	r7, r6
 8008510:	e7e1      	b.n	80084d6 <_dtoa_r+0x93e>
 8008512:	9700      	str	r7, [sp, #0]
 8008514:	4637      	mov	r7, r6
 8008516:	e599      	b.n	800804c <_dtoa_r+0x4b4>
 8008518:	40240000 	.word	0x40240000
 800851c:	9b08      	ldr	r3, [sp, #32]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80ca 	beq.w	80086b8 <_dtoa_r+0xb20>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	2d00      	cmp	r5, #0
 800852a:	dd05      	ble.n	8008538 <_dtoa_r+0x9a0>
 800852c:	4639      	mov	r1, r7
 800852e:	462a      	mov	r2, r5
 8008530:	4620      	mov	r0, r4
 8008532:	f000 fb4b 	bl	8008bcc <__lshift>
 8008536:	4607      	mov	r7, r0
 8008538:	f1b8 0f00 	cmp.w	r8, #0
 800853c:	d05b      	beq.n	80085f6 <_dtoa_r+0xa5e>
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4620      	mov	r0, r4
 8008542:	f000 f931 	bl	80087a8 <_Balloc>
 8008546:	4605      	mov	r5, r0
 8008548:	b928      	cbnz	r0, 8008556 <_dtoa_r+0x9be>
 800854a:	4b87      	ldr	r3, [pc, #540]	; (8008768 <_dtoa_r+0xbd0>)
 800854c:	4602      	mov	r2, r0
 800854e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008552:	f7ff bb3b 	b.w	8007bcc <_dtoa_r+0x34>
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	3202      	adds	r2, #2
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	f107 010c 	add.w	r1, r7, #12
 8008560:	300c      	adds	r0, #12
 8008562:	f000 f913 	bl	800878c <memcpy>
 8008566:	2201      	movs	r2, #1
 8008568:	4629      	mov	r1, r5
 800856a:	4620      	mov	r0, r4
 800856c:	f000 fb2e 	bl	8008bcc <__lshift>
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	f103 0901 	add.w	r9, r3, #1
 8008576:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800857a:	4413      	add	r3, r2
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	f00a 0301 	and.w	r3, sl, #1
 8008582:	46b8      	mov	r8, r7
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	4607      	mov	r7, r0
 8008588:	4631      	mov	r1, r6
 800858a:	ee18 0a10 	vmov	r0, s16
 800858e:	f7ff fa77 	bl	8007a80 <quorem>
 8008592:	4641      	mov	r1, r8
 8008594:	9002      	str	r0, [sp, #8]
 8008596:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800859a:	ee18 0a10 	vmov	r0, s16
 800859e:	f000 fb85 	bl	8008cac <__mcmp>
 80085a2:	463a      	mov	r2, r7
 80085a4:	9003      	str	r0, [sp, #12]
 80085a6:	4631      	mov	r1, r6
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 fb9b 	bl	8008ce4 <__mdiff>
 80085ae:	68c2      	ldr	r2, [r0, #12]
 80085b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80085b4:	4605      	mov	r5, r0
 80085b6:	bb02      	cbnz	r2, 80085fa <_dtoa_r+0xa62>
 80085b8:	4601      	mov	r1, r0
 80085ba:	ee18 0a10 	vmov	r0, s16
 80085be:	f000 fb75 	bl	8008cac <__mcmp>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4629      	mov	r1, r5
 80085c6:	4620      	mov	r0, r4
 80085c8:	9207      	str	r2, [sp, #28]
 80085ca:	f000 f92d 	bl	8008828 <_Bfree>
 80085ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085d2:	ea43 0102 	orr.w	r1, r3, r2
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	430b      	orrs	r3, r1
 80085da:	464d      	mov	r5, r9
 80085dc:	d10f      	bne.n	80085fe <_dtoa_r+0xa66>
 80085de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085e2:	d02a      	beq.n	800863a <_dtoa_r+0xaa2>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dd02      	ble.n	80085f0 <_dtoa_r+0xa58>
 80085ea:	9b02      	ldr	r3, [sp, #8]
 80085ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80085f0:	f88b a000 	strb.w	sl, [fp]
 80085f4:	e775      	b.n	80084e2 <_dtoa_r+0x94a>
 80085f6:	4638      	mov	r0, r7
 80085f8:	e7ba      	b.n	8008570 <_dtoa_r+0x9d8>
 80085fa:	2201      	movs	r2, #1
 80085fc:	e7e2      	b.n	80085c4 <_dtoa_r+0xa2c>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	db04      	blt.n	800860e <_dtoa_r+0xa76>
 8008604:	9906      	ldr	r1, [sp, #24]
 8008606:	430b      	orrs	r3, r1
 8008608:	9904      	ldr	r1, [sp, #16]
 800860a:	430b      	orrs	r3, r1
 800860c:	d122      	bne.n	8008654 <_dtoa_r+0xabc>
 800860e:	2a00      	cmp	r2, #0
 8008610:	ddee      	ble.n	80085f0 <_dtoa_r+0xa58>
 8008612:	ee18 1a10 	vmov	r1, s16
 8008616:	2201      	movs	r2, #1
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fad7 	bl	8008bcc <__lshift>
 800861e:	4631      	mov	r1, r6
 8008620:	ee08 0a10 	vmov	s16, r0
 8008624:	f000 fb42 	bl	8008cac <__mcmp>
 8008628:	2800      	cmp	r0, #0
 800862a:	dc03      	bgt.n	8008634 <_dtoa_r+0xa9c>
 800862c:	d1e0      	bne.n	80085f0 <_dtoa_r+0xa58>
 800862e:	f01a 0f01 	tst.w	sl, #1
 8008632:	d0dd      	beq.n	80085f0 <_dtoa_r+0xa58>
 8008634:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008638:	d1d7      	bne.n	80085ea <_dtoa_r+0xa52>
 800863a:	2339      	movs	r3, #57	; 0x39
 800863c:	f88b 3000 	strb.w	r3, [fp]
 8008640:	462b      	mov	r3, r5
 8008642:	461d      	mov	r5, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800864a:	2a39      	cmp	r2, #57	; 0x39
 800864c:	d071      	beq.n	8008732 <_dtoa_r+0xb9a>
 800864e:	3201      	adds	r2, #1
 8008650:	701a      	strb	r2, [r3, #0]
 8008652:	e746      	b.n	80084e2 <_dtoa_r+0x94a>
 8008654:	2a00      	cmp	r2, #0
 8008656:	dd07      	ble.n	8008668 <_dtoa_r+0xad0>
 8008658:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800865c:	d0ed      	beq.n	800863a <_dtoa_r+0xaa2>
 800865e:	f10a 0301 	add.w	r3, sl, #1
 8008662:	f88b 3000 	strb.w	r3, [fp]
 8008666:	e73c      	b.n	80084e2 <_dtoa_r+0x94a>
 8008668:	9b05      	ldr	r3, [sp, #20]
 800866a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800866e:	4599      	cmp	r9, r3
 8008670:	d047      	beq.n	8008702 <_dtoa_r+0xb6a>
 8008672:	ee18 1a10 	vmov	r1, s16
 8008676:	2300      	movs	r3, #0
 8008678:	220a      	movs	r2, #10
 800867a:	4620      	mov	r0, r4
 800867c:	f000 f8f6 	bl	800886c <__multadd>
 8008680:	45b8      	cmp	r8, r7
 8008682:	ee08 0a10 	vmov	s16, r0
 8008686:	f04f 0300 	mov.w	r3, #0
 800868a:	f04f 020a 	mov.w	r2, #10
 800868e:	4641      	mov	r1, r8
 8008690:	4620      	mov	r0, r4
 8008692:	d106      	bne.n	80086a2 <_dtoa_r+0xb0a>
 8008694:	f000 f8ea 	bl	800886c <__multadd>
 8008698:	4680      	mov	r8, r0
 800869a:	4607      	mov	r7, r0
 800869c:	f109 0901 	add.w	r9, r9, #1
 80086a0:	e772      	b.n	8008588 <_dtoa_r+0x9f0>
 80086a2:	f000 f8e3 	bl	800886c <__multadd>
 80086a6:	4639      	mov	r1, r7
 80086a8:	4680      	mov	r8, r0
 80086aa:	2300      	movs	r3, #0
 80086ac:	220a      	movs	r2, #10
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 f8dc 	bl	800886c <__multadd>
 80086b4:	4607      	mov	r7, r0
 80086b6:	e7f1      	b.n	800869c <_dtoa_r+0xb04>
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	9302      	str	r3, [sp, #8]
 80086bc:	9d01      	ldr	r5, [sp, #4]
 80086be:	ee18 0a10 	vmov	r0, s16
 80086c2:	4631      	mov	r1, r6
 80086c4:	f7ff f9dc 	bl	8007a80 <quorem>
 80086c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	f805 ab01 	strb.w	sl, [r5], #1
 80086d2:	1aea      	subs	r2, r5, r3
 80086d4:	9b02      	ldr	r3, [sp, #8]
 80086d6:	4293      	cmp	r3, r2
 80086d8:	dd09      	ble.n	80086ee <_dtoa_r+0xb56>
 80086da:	ee18 1a10 	vmov	r1, s16
 80086de:	2300      	movs	r3, #0
 80086e0:	220a      	movs	r2, #10
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f8c2 	bl	800886c <__multadd>
 80086e8:	ee08 0a10 	vmov	s16, r0
 80086ec:	e7e7      	b.n	80086be <_dtoa_r+0xb26>
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bfc8      	it	gt
 80086f4:	461d      	movgt	r5, r3
 80086f6:	9b01      	ldr	r3, [sp, #4]
 80086f8:	bfd8      	it	le
 80086fa:	2501      	movle	r5, #1
 80086fc:	441d      	add	r5, r3
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	ee18 1a10 	vmov	r1, s16
 8008706:	2201      	movs	r2, #1
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fa5f 	bl	8008bcc <__lshift>
 800870e:	4631      	mov	r1, r6
 8008710:	ee08 0a10 	vmov	s16, r0
 8008714:	f000 faca 	bl	8008cac <__mcmp>
 8008718:	2800      	cmp	r0, #0
 800871a:	dc91      	bgt.n	8008640 <_dtoa_r+0xaa8>
 800871c:	d102      	bne.n	8008724 <_dtoa_r+0xb8c>
 800871e:	f01a 0f01 	tst.w	sl, #1
 8008722:	d18d      	bne.n	8008640 <_dtoa_r+0xaa8>
 8008724:	462b      	mov	r3, r5
 8008726:	461d      	mov	r5, r3
 8008728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800872c:	2a30      	cmp	r2, #48	; 0x30
 800872e:	d0fa      	beq.n	8008726 <_dtoa_r+0xb8e>
 8008730:	e6d7      	b.n	80084e2 <_dtoa_r+0x94a>
 8008732:	9a01      	ldr	r2, [sp, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d184      	bne.n	8008642 <_dtoa_r+0xaaa>
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	3301      	adds	r3, #1
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	2331      	movs	r3, #49	; 0x31
 8008740:	7013      	strb	r3, [r2, #0]
 8008742:	e6ce      	b.n	80084e2 <_dtoa_r+0x94a>
 8008744:	4b09      	ldr	r3, [pc, #36]	; (800876c <_dtoa_r+0xbd4>)
 8008746:	f7ff ba95 	b.w	8007c74 <_dtoa_r+0xdc>
 800874a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800874c:	2b00      	cmp	r3, #0
 800874e:	f47f aa6e 	bne.w	8007c2e <_dtoa_r+0x96>
 8008752:	4b07      	ldr	r3, [pc, #28]	; (8008770 <_dtoa_r+0xbd8>)
 8008754:	f7ff ba8e 	b.w	8007c74 <_dtoa_r+0xdc>
 8008758:	9b02      	ldr	r3, [sp, #8]
 800875a:	2b00      	cmp	r3, #0
 800875c:	dcae      	bgt.n	80086bc <_dtoa_r+0xb24>
 800875e:	9b06      	ldr	r3, [sp, #24]
 8008760:	2b02      	cmp	r3, #2
 8008762:	f73f aea8 	bgt.w	80084b6 <_dtoa_r+0x91e>
 8008766:	e7a9      	b.n	80086bc <_dtoa_r+0xb24>
 8008768:	0800a0e7 	.word	0x0800a0e7
 800876c:	0800a044 	.word	0x0800a044
 8008770:	0800a068 	.word	0x0800a068

08008774 <_localeconv_r>:
 8008774:	4800      	ldr	r0, [pc, #0]	; (8008778 <_localeconv_r+0x4>)
 8008776:	4770      	bx	lr
 8008778:	20000178 	.word	0x20000178

0800877c <malloc>:
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <malloc+0xc>)
 800877e:	4601      	mov	r1, r0
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f000 bc17 	b.w	8008fb4 <_malloc_r>
 8008786:	bf00      	nop
 8008788:	20000024 	.word	0x20000024

0800878c <memcpy>:
 800878c:	440a      	add	r2, r1
 800878e:	4291      	cmp	r1, r2
 8008790:	f100 33ff 	add.w	r3, r0, #4294967295
 8008794:	d100      	bne.n	8008798 <memcpy+0xc>
 8008796:	4770      	bx	lr
 8008798:	b510      	push	{r4, lr}
 800879a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800879e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a2:	4291      	cmp	r1, r2
 80087a4:	d1f9      	bne.n	800879a <memcpy+0xe>
 80087a6:	bd10      	pop	{r4, pc}

080087a8 <_Balloc>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087ac:	4604      	mov	r4, r0
 80087ae:	460d      	mov	r5, r1
 80087b0:	b976      	cbnz	r6, 80087d0 <_Balloc+0x28>
 80087b2:	2010      	movs	r0, #16
 80087b4:	f7ff ffe2 	bl	800877c <malloc>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6260      	str	r0, [r4, #36]	; 0x24
 80087bc:	b920      	cbnz	r0, 80087c8 <_Balloc+0x20>
 80087be:	4b18      	ldr	r3, [pc, #96]	; (8008820 <_Balloc+0x78>)
 80087c0:	4818      	ldr	r0, [pc, #96]	; (8008824 <_Balloc+0x7c>)
 80087c2:	2166      	movs	r1, #102	; 0x66
 80087c4:	f000 fdd6 	bl	8009374 <__assert_func>
 80087c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087cc:	6006      	str	r6, [r0, #0]
 80087ce:	60c6      	str	r6, [r0, #12]
 80087d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087d2:	68f3      	ldr	r3, [r6, #12]
 80087d4:	b183      	cbz	r3, 80087f8 <_Balloc+0x50>
 80087d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087de:	b9b8      	cbnz	r0, 8008810 <_Balloc+0x68>
 80087e0:	2101      	movs	r1, #1
 80087e2:	fa01 f605 	lsl.w	r6, r1, r5
 80087e6:	1d72      	adds	r2, r6, #5
 80087e8:	0092      	lsls	r2, r2, #2
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 fb60 	bl	8008eb0 <_calloc_r>
 80087f0:	b160      	cbz	r0, 800880c <_Balloc+0x64>
 80087f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087f6:	e00e      	b.n	8008816 <_Balloc+0x6e>
 80087f8:	2221      	movs	r2, #33	; 0x21
 80087fa:	2104      	movs	r1, #4
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 fb57 	bl	8008eb0 <_calloc_r>
 8008802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008804:	60f0      	str	r0, [r6, #12]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e4      	bne.n	80087d6 <_Balloc+0x2e>
 800880c:	2000      	movs	r0, #0
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	6802      	ldr	r2, [r0, #0]
 8008812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008816:	2300      	movs	r3, #0
 8008818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800881c:	e7f7      	b.n	800880e <_Balloc+0x66>
 800881e:	bf00      	nop
 8008820:	0800a075 	.word	0x0800a075
 8008824:	0800a0f8 	.word	0x0800a0f8

08008828 <_Bfree>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800882c:	4605      	mov	r5, r0
 800882e:	460c      	mov	r4, r1
 8008830:	b976      	cbnz	r6, 8008850 <_Bfree+0x28>
 8008832:	2010      	movs	r0, #16
 8008834:	f7ff ffa2 	bl	800877c <malloc>
 8008838:	4602      	mov	r2, r0
 800883a:	6268      	str	r0, [r5, #36]	; 0x24
 800883c:	b920      	cbnz	r0, 8008848 <_Bfree+0x20>
 800883e:	4b09      	ldr	r3, [pc, #36]	; (8008864 <_Bfree+0x3c>)
 8008840:	4809      	ldr	r0, [pc, #36]	; (8008868 <_Bfree+0x40>)
 8008842:	218a      	movs	r1, #138	; 0x8a
 8008844:	f000 fd96 	bl	8009374 <__assert_func>
 8008848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800884c:	6006      	str	r6, [r0, #0]
 800884e:	60c6      	str	r6, [r0, #12]
 8008850:	b13c      	cbz	r4, 8008862 <_Bfree+0x3a>
 8008852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008854:	6862      	ldr	r2, [r4, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800885c:	6021      	str	r1, [r4, #0]
 800885e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	0800a075 	.word	0x0800a075
 8008868:	0800a0f8 	.word	0x0800a0f8

0800886c <__multadd>:
 800886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008870:	690d      	ldr	r5, [r1, #16]
 8008872:	4607      	mov	r7, r0
 8008874:	460c      	mov	r4, r1
 8008876:	461e      	mov	r6, r3
 8008878:	f101 0c14 	add.w	ip, r1, #20
 800887c:	2000      	movs	r0, #0
 800887e:	f8dc 3000 	ldr.w	r3, [ip]
 8008882:	b299      	uxth	r1, r3
 8008884:	fb02 6101 	mla	r1, r2, r1, r6
 8008888:	0c1e      	lsrs	r6, r3, #16
 800888a:	0c0b      	lsrs	r3, r1, #16
 800888c:	fb02 3306 	mla	r3, r2, r6, r3
 8008890:	b289      	uxth	r1, r1
 8008892:	3001      	adds	r0, #1
 8008894:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008898:	4285      	cmp	r5, r0
 800889a:	f84c 1b04 	str.w	r1, [ip], #4
 800889e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088a2:	dcec      	bgt.n	800887e <__multadd+0x12>
 80088a4:	b30e      	cbz	r6, 80088ea <__multadd+0x7e>
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	42ab      	cmp	r3, r5
 80088aa:	dc19      	bgt.n	80088e0 <__multadd+0x74>
 80088ac:	6861      	ldr	r1, [r4, #4]
 80088ae:	4638      	mov	r0, r7
 80088b0:	3101      	adds	r1, #1
 80088b2:	f7ff ff79 	bl	80087a8 <_Balloc>
 80088b6:	4680      	mov	r8, r0
 80088b8:	b928      	cbnz	r0, 80088c6 <__multadd+0x5a>
 80088ba:	4602      	mov	r2, r0
 80088bc:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <__multadd+0x84>)
 80088be:	480d      	ldr	r0, [pc, #52]	; (80088f4 <__multadd+0x88>)
 80088c0:	21b5      	movs	r1, #181	; 0xb5
 80088c2:	f000 fd57 	bl	8009374 <__assert_func>
 80088c6:	6922      	ldr	r2, [r4, #16]
 80088c8:	3202      	adds	r2, #2
 80088ca:	f104 010c 	add.w	r1, r4, #12
 80088ce:	0092      	lsls	r2, r2, #2
 80088d0:	300c      	adds	r0, #12
 80088d2:	f7ff ff5b 	bl	800878c <memcpy>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4638      	mov	r0, r7
 80088da:	f7ff ffa5 	bl	8008828 <_Bfree>
 80088de:	4644      	mov	r4, r8
 80088e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088e4:	3501      	adds	r5, #1
 80088e6:	615e      	str	r6, [r3, #20]
 80088e8:	6125      	str	r5, [r4, #16]
 80088ea:	4620      	mov	r0, r4
 80088ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f0:	0800a0e7 	.word	0x0800a0e7
 80088f4:	0800a0f8 	.word	0x0800a0f8

080088f8 <__hi0bits>:
 80088f8:	0c03      	lsrs	r3, r0, #16
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	b9d3      	cbnz	r3, 8008934 <__hi0bits+0x3c>
 80088fe:	0400      	lsls	r0, r0, #16
 8008900:	2310      	movs	r3, #16
 8008902:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008906:	bf04      	itt	eq
 8008908:	0200      	lsleq	r0, r0, #8
 800890a:	3308      	addeq	r3, #8
 800890c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008910:	bf04      	itt	eq
 8008912:	0100      	lsleq	r0, r0, #4
 8008914:	3304      	addeq	r3, #4
 8008916:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800891a:	bf04      	itt	eq
 800891c:	0080      	lsleq	r0, r0, #2
 800891e:	3302      	addeq	r3, #2
 8008920:	2800      	cmp	r0, #0
 8008922:	db05      	blt.n	8008930 <__hi0bits+0x38>
 8008924:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008928:	f103 0301 	add.w	r3, r3, #1
 800892c:	bf08      	it	eq
 800892e:	2320      	moveq	r3, #32
 8008930:	4618      	mov	r0, r3
 8008932:	4770      	bx	lr
 8008934:	2300      	movs	r3, #0
 8008936:	e7e4      	b.n	8008902 <__hi0bits+0xa>

08008938 <__lo0bits>:
 8008938:	6803      	ldr	r3, [r0, #0]
 800893a:	f013 0207 	ands.w	r2, r3, #7
 800893e:	4601      	mov	r1, r0
 8008940:	d00b      	beq.n	800895a <__lo0bits+0x22>
 8008942:	07da      	lsls	r2, r3, #31
 8008944:	d423      	bmi.n	800898e <__lo0bits+0x56>
 8008946:	0798      	lsls	r0, r3, #30
 8008948:	bf49      	itett	mi
 800894a:	085b      	lsrmi	r3, r3, #1
 800894c:	089b      	lsrpl	r3, r3, #2
 800894e:	2001      	movmi	r0, #1
 8008950:	600b      	strmi	r3, [r1, #0]
 8008952:	bf5c      	itt	pl
 8008954:	600b      	strpl	r3, [r1, #0]
 8008956:	2002      	movpl	r0, #2
 8008958:	4770      	bx	lr
 800895a:	b298      	uxth	r0, r3
 800895c:	b9a8      	cbnz	r0, 800898a <__lo0bits+0x52>
 800895e:	0c1b      	lsrs	r3, r3, #16
 8008960:	2010      	movs	r0, #16
 8008962:	b2da      	uxtb	r2, r3
 8008964:	b90a      	cbnz	r2, 800896a <__lo0bits+0x32>
 8008966:	3008      	adds	r0, #8
 8008968:	0a1b      	lsrs	r3, r3, #8
 800896a:	071a      	lsls	r2, r3, #28
 800896c:	bf04      	itt	eq
 800896e:	091b      	lsreq	r3, r3, #4
 8008970:	3004      	addeq	r0, #4
 8008972:	079a      	lsls	r2, r3, #30
 8008974:	bf04      	itt	eq
 8008976:	089b      	lsreq	r3, r3, #2
 8008978:	3002      	addeq	r0, #2
 800897a:	07da      	lsls	r2, r3, #31
 800897c:	d403      	bmi.n	8008986 <__lo0bits+0x4e>
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	f100 0001 	add.w	r0, r0, #1
 8008984:	d005      	beq.n	8008992 <__lo0bits+0x5a>
 8008986:	600b      	str	r3, [r1, #0]
 8008988:	4770      	bx	lr
 800898a:	4610      	mov	r0, r2
 800898c:	e7e9      	b.n	8008962 <__lo0bits+0x2a>
 800898e:	2000      	movs	r0, #0
 8008990:	4770      	bx	lr
 8008992:	2020      	movs	r0, #32
 8008994:	4770      	bx	lr
	...

08008998 <__i2b>:
 8008998:	b510      	push	{r4, lr}
 800899a:	460c      	mov	r4, r1
 800899c:	2101      	movs	r1, #1
 800899e:	f7ff ff03 	bl	80087a8 <_Balloc>
 80089a2:	4602      	mov	r2, r0
 80089a4:	b928      	cbnz	r0, 80089b2 <__i2b+0x1a>
 80089a6:	4b05      	ldr	r3, [pc, #20]	; (80089bc <__i2b+0x24>)
 80089a8:	4805      	ldr	r0, [pc, #20]	; (80089c0 <__i2b+0x28>)
 80089aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089ae:	f000 fce1 	bl	8009374 <__assert_func>
 80089b2:	2301      	movs	r3, #1
 80089b4:	6144      	str	r4, [r0, #20]
 80089b6:	6103      	str	r3, [r0, #16]
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	bf00      	nop
 80089bc:	0800a0e7 	.word	0x0800a0e7
 80089c0:	0800a0f8 	.word	0x0800a0f8

080089c4 <__multiply>:
 80089c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c8:	4691      	mov	r9, r2
 80089ca:	690a      	ldr	r2, [r1, #16]
 80089cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	bfb8      	it	lt
 80089d4:	460b      	movlt	r3, r1
 80089d6:	460c      	mov	r4, r1
 80089d8:	bfbc      	itt	lt
 80089da:	464c      	movlt	r4, r9
 80089dc:	4699      	movlt	r9, r3
 80089de:	6927      	ldr	r7, [r4, #16]
 80089e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089e4:	68a3      	ldr	r3, [r4, #8]
 80089e6:	6861      	ldr	r1, [r4, #4]
 80089e8:	eb07 060a 	add.w	r6, r7, sl
 80089ec:	42b3      	cmp	r3, r6
 80089ee:	b085      	sub	sp, #20
 80089f0:	bfb8      	it	lt
 80089f2:	3101      	addlt	r1, #1
 80089f4:	f7ff fed8 	bl	80087a8 <_Balloc>
 80089f8:	b930      	cbnz	r0, 8008a08 <__multiply+0x44>
 80089fa:	4602      	mov	r2, r0
 80089fc:	4b44      	ldr	r3, [pc, #272]	; (8008b10 <__multiply+0x14c>)
 80089fe:	4845      	ldr	r0, [pc, #276]	; (8008b14 <__multiply+0x150>)
 8008a00:	f240 115d 	movw	r1, #349	; 0x15d
 8008a04:	f000 fcb6 	bl	8009374 <__assert_func>
 8008a08:	f100 0514 	add.w	r5, r0, #20
 8008a0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a10:	462b      	mov	r3, r5
 8008a12:	2200      	movs	r2, #0
 8008a14:	4543      	cmp	r3, r8
 8008a16:	d321      	bcc.n	8008a5c <__multiply+0x98>
 8008a18:	f104 0314 	add.w	r3, r4, #20
 8008a1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a20:	f109 0314 	add.w	r3, r9, #20
 8008a24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a28:	9202      	str	r2, [sp, #8]
 8008a2a:	1b3a      	subs	r2, r7, r4
 8008a2c:	3a15      	subs	r2, #21
 8008a2e:	f022 0203 	bic.w	r2, r2, #3
 8008a32:	3204      	adds	r2, #4
 8008a34:	f104 0115 	add.w	r1, r4, #21
 8008a38:	428f      	cmp	r7, r1
 8008a3a:	bf38      	it	cc
 8008a3c:	2204      	movcc	r2, #4
 8008a3e:	9201      	str	r2, [sp, #4]
 8008a40:	9a02      	ldr	r2, [sp, #8]
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d80c      	bhi.n	8008a62 <__multiply+0x9e>
 8008a48:	2e00      	cmp	r6, #0
 8008a4a:	dd03      	ble.n	8008a54 <__multiply+0x90>
 8008a4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d05a      	beq.n	8008b0a <__multiply+0x146>
 8008a54:	6106      	str	r6, [r0, #16]
 8008a56:	b005      	add	sp, #20
 8008a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5c:	f843 2b04 	str.w	r2, [r3], #4
 8008a60:	e7d8      	b.n	8008a14 <__multiply+0x50>
 8008a62:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a66:	f1ba 0f00 	cmp.w	sl, #0
 8008a6a:	d024      	beq.n	8008ab6 <__multiply+0xf2>
 8008a6c:	f104 0e14 	add.w	lr, r4, #20
 8008a70:	46a9      	mov	r9, r5
 8008a72:	f04f 0c00 	mov.w	ip, #0
 8008a76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a7a:	f8d9 1000 	ldr.w	r1, [r9]
 8008a7e:	fa1f fb82 	uxth.w	fp, r2
 8008a82:	b289      	uxth	r1, r1
 8008a84:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a8c:	f8d9 2000 	ldr.w	r2, [r9]
 8008a90:	4461      	add	r1, ip
 8008a92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a96:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a9e:	b289      	uxth	r1, r1
 8008aa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008aa4:	4577      	cmp	r7, lr
 8008aa6:	f849 1b04 	str.w	r1, [r9], #4
 8008aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aae:	d8e2      	bhi.n	8008a76 <__multiply+0xb2>
 8008ab0:	9a01      	ldr	r2, [sp, #4]
 8008ab2:	f845 c002 	str.w	ip, [r5, r2]
 8008ab6:	9a03      	ldr	r2, [sp, #12]
 8008ab8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008abc:	3304      	adds	r3, #4
 8008abe:	f1b9 0f00 	cmp.w	r9, #0
 8008ac2:	d020      	beq.n	8008b06 <__multiply+0x142>
 8008ac4:	6829      	ldr	r1, [r5, #0]
 8008ac6:	f104 0c14 	add.w	ip, r4, #20
 8008aca:	46ae      	mov	lr, r5
 8008acc:	f04f 0a00 	mov.w	sl, #0
 8008ad0:	f8bc b000 	ldrh.w	fp, [ip]
 8008ad4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ad8:	fb09 220b 	mla	r2, r9, fp, r2
 8008adc:	4492      	add	sl, r2
 8008ade:	b289      	uxth	r1, r1
 8008ae0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ae4:	f84e 1b04 	str.w	r1, [lr], #4
 8008ae8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008aec:	f8be 1000 	ldrh.w	r1, [lr]
 8008af0:	0c12      	lsrs	r2, r2, #16
 8008af2:	fb09 1102 	mla	r1, r9, r2, r1
 8008af6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008afa:	4567      	cmp	r7, ip
 8008afc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b00:	d8e6      	bhi.n	8008ad0 <__multiply+0x10c>
 8008b02:	9a01      	ldr	r2, [sp, #4]
 8008b04:	50a9      	str	r1, [r5, r2]
 8008b06:	3504      	adds	r5, #4
 8008b08:	e79a      	b.n	8008a40 <__multiply+0x7c>
 8008b0a:	3e01      	subs	r6, #1
 8008b0c:	e79c      	b.n	8008a48 <__multiply+0x84>
 8008b0e:	bf00      	nop
 8008b10:	0800a0e7 	.word	0x0800a0e7
 8008b14:	0800a0f8 	.word	0x0800a0f8

08008b18 <__pow5mult>:
 8008b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	4615      	mov	r5, r2
 8008b1e:	f012 0203 	ands.w	r2, r2, #3
 8008b22:	4606      	mov	r6, r0
 8008b24:	460f      	mov	r7, r1
 8008b26:	d007      	beq.n	8008b38 <__pow5mult+0x20>
 8008b28:	4c25      	ldr	r4, [pc, #148]	; (8008bc0 <__pow5mult+0xa8>)
 8008b2a:	3a01      	subs	r2, #1
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b32:	f7ff fe9b 	bl	800886c <__multadd>
 8008b36:	4607      	mov	r7, r0
 8008b38:	10ad      	asrs	r5, r5, #2
 8008b3a:	d03d      	beq.n	8008bb8 <__pow5mult+0xa0>
 8008b3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b3e:	b97c      	cbnz	r4, 8008b60 <__pow5mult+0x48>
 8008b40:	2010      	movs	r0, #16
 8008b42:	f7ff fe1b 	bl	800877c <malloc>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6270      	str	r0, [r6, #36]	; 0x24
 8008b4a:	b928      	cbnz	r0, 8008b58 <__pow5mult+0x40>
 8008b4c:	4b1d      	ldr	r3, [pc, #116]	; (8008bc4 <__pow5mult+0xac>)
 8008b4e:	481e      	ldr	r0, [pc, #120]	; (8008bc8 <__pow5mult+0xb0>)
 8008b50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b54:	f000 fc0e 	bl	8009374 <__assert_func>
 8008b58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b5c:	6004      	str	r4, [r0, #0]
 8008b5e:	60c4      	str	r4, [r0, #12]
 8008b60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b68:	b94c      	cbnz	r4, 8008b7e <__pow5mult+0x66>
 8008b6a:	f240 2171 	movw	r1, #625	; 0x271
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7ff ff12 	bl	8008998 <__i2b>
 8008b74:	2300      	movs	r3, #0
 8008b76:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	6003      	str	r3, [r0, #0]
 8008b7e:	f04f 0900 	mov.w	r9, #0
 8008b82:	07eb      	lsls	r3, r5, #31
 8008b84:	d50a      	bpl.n	8008b9c <__pow5mult+0x84>
 8008b86:	4639      	mov	r1, r7
 8008b88:	4622      	mov	r2, r4
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7ff ff1a 	bl	80089c4 <__multiply>
 8008b90:	4639      	mov	r1, r7
 8008b92:	4680      	mov	r8, r0
 8008b94:	4630      	mov	r0, r6
 8008b96:	f7ff fe47 	bl	8008828 <_Bfree>
 8008b9a:	4647      	mov	r7, r8
 8008b9c:	106d      	asrs	r5, r5, #1
 8008b9e:	d00b      	beq.n	8008bb8 <__pow5mult+0xa0>
 8008ba0:	6820      	ldr	r0, [r4, #0]
 8008ba2:	b938      	cbnz	r0, 8008bb4 <__pow5mult+0x9c>
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ff0b 	bl	80089c4 <__multiply>
 8008bae:	6020      	str	r0, [r4, #0]
 8008bb0:	f8c0 9000 	str.w	r9, [r0]
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	e7e4      	b.n	8008b82 <__pow5mult+0x6a>
 8008bb8:	4638      	mov	r0, r7
 8008bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bbe:	bf00      	nop
 8008bc0:	0800a248 	.word	0x0800a248
 8008bc4:	0800a075 	.word	0x0800a075
 8008bc8:	0800a0f8 	.word	0x0800a0f8

08008bcc <__lshift>:
 8008bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6849      	ldr	r1, [r1, #4]
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bda:	68a3      	ldr	r3, [r4, #8]
 8008bdc:	4607      	mov	r7, r0
 8008bde:	4691      	mov	r9, r2
 8008be0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008be4:	f108 0601 	add.w	r6, r8, #1
 8008be8:	42b3      	cmp	r3, r6
 8008bea:	db0b      	blt.n	8008c04 <__lshift+0x38>
 8008bec:	4638      	mov	r0, r7
 8008bee:	f7ff fddb 	bl	80087a8 <_Balloc>
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	b948      	cbnz	r0, 8008c0a <__lshift+0x3e>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	4b2a      	ldr	r3, [pc, #168]	; (8008ca4 <__lshift+0xd8>)
 8008bfa:	482b      	ldr	r0, [pc, #172]	; (8008ca8 <__lshift+0xdc>)
 8008bfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c00:	f000 fbb8 	bl	8009374 <__assert_func>
 8008c04:	3101      	adds	r1, #1
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	e7ee      	b.n	8008be8 <__lshift+0x1c>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f100 0114 	add.w	r1, r0, #20
 8008c10:	f100 0210 	add.w	r2, r0, #16
 8008c14:	4618      	mov	r0, r3
 8008c16:	4553      	cmp	r3, sl
 8008c18:	db37      	blt.n	8008c8a <__lshift+0xbe>
 8008c1a:	6920      	ldr	r0, [r4, #16]
 8008c1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c20:	f104 0314 	add.w	r3, r4, #20
 8008c24:	f019 091f 	ands.w	r9, r9, #31
 8008c28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c30:	d02f      	beq.n	8008c92 <__lshift+0xc6>
 8008c32:	f1c9 0e20 	rsb	lr, r9, #32
 8008c36:	468a      	mov	sl, r1
 8008c38:	f04f 0c00 	mov.w	ip, #0
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	fa02 f209 	lsl.w	r2, r2, r9
 8008c42:	ea42 020c 	orr.w	r2, r2, ip
 8008c46:	f84a 2b04 	str.w	r2, [sl], #4
 8008c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4e:	4298      	cmp	r0, r3
 8008c50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c54:	d8f2      	bhi.n	8008c3c <__lshift+0x70>
 8008c56:	1b03      	subs	r3, r0, r4
 8008c58:	3b15      	subs	r3, #21
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	3304      	adds	r3, #4
 8008c60:	f104 0215 	add.w	r2, r4, #21
 8008c64:	4290      	cmp	r0, r2
 8008c66:	bf38      	it	cc
 8008c68:	2304      	movcc	r3, #4
 8008c6a:	f841 c003 	str.w	ip, [r1, r3]
 8008c6e:	f1bc 0f00 	cmp.w	ip, #0
 8008c72:	d001      	beq.n	8008c78 <__lshift+0xac>
 8008c74:	f108 0602 	add.w	r6, r8, #2
 8008c78:	3e01      	subs	r6, #1
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	612e      	str	r6, [r5, #16]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	f7ff fdd2 	bl	8008828 <_Bfree>
 8008c84:	4628      	mov	r0, r5
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c8e:	3301      	adds	r3, #1
 8008c90:	e7c1      	b.n	8008c16 <__lshift+0x4a>
 8008c92:	3904      	subs	r1, #4
 8008c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c9c:	4298      	cmp	r0, r3
 8008c9e:	d8f9      	bhi.n	8008c94 <__lshift+0xc8>
 8008ca0:	e7ea      	b.n	8008c78 <__lshift+0xac>
 8008ca2:	bf00      	nop
 8008ca4:	0800a0e7 	.word	0x0800a0e7
 8008ca8:	0800a0f8 	.word	0x0800a0f8

08008cac <__mcmp>:
 8008cac:	b530      	push	{r4, r5, lr}
 8008cae:	6902      	ldr	r2, [r0, #16]
 8008cb0:	690c      	ldr	r4, [r1, #16]
 8008cb2:	1b12      	subs	r2, r2, r4
 8008cb4:	d10e      	bne.n	8008cd4 <__mcmp+0x28>
 8008cb6:	f100 0314 	add.w	r3, r0, #20
 8008cba:	3114      	adds	r1, #20
 8008cbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ccc:	42a5      	cmp	r5, r4
 8008cce:	d003      	beq.n	8008cd8 <__mcmp+0x2c>
 8008cd0:	d305      	bcc.n	8008cde <__mcmp+0x32>
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	bd30      	pop	{r4, r5, pc}
 8008cd8:	4283      	cmp	r3, r0
 8008cda:	d3f3      	bcc.n	8008cc4 <__mcmp+0x18>
 8008cdc:	e7fa      	b.n	8008cd4 <__mcmp+0x28>
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	e7f7      	b.n	8008cd4 <__mcmp+0x28>

08008ce4 <__mdiff>:
 8008ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	460c      	mov	r4, r1
 8008cea:	4606      	mov	r6, r0
 8008cec:	4611      	mov	r1, r2
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4690      	mov	r8, r2
 8008cf2:	f7ff ffdb 	bl	8008cac <__mcmp>
 8008cf6:	1e05      	subs	r5, r0, #0
 8008cf8:	d110      	bne.n	8008d1c <__mdiff+0x38>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7ff fd53 	bl	80087a8 <_Balloc>
 8008d02:	b930      	cbnz	r0, 8008d12 <__mdiff+0x2e>
 8008d04:	4b3a      	ldr	r3, [pc, #232]	; (8008df0 <__mdiff+0x10c>)
 8008d06:	4602      	mov	r2, r0
 8008d08:	f240 2132 	movw	r1, #562	; 0x232
 8008d0c:	4839      	ldr	r0, [pc, #228]	; (8008df4 <__mdiff+0x110>)
 8008d0e:	f000 fb31 	bl	8009374 <__assert_func>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1c:	bfa4      	itt	ge
 8008d1e:	4643      	movge	r3, r8
 8008d20:	46a0      	movge	r8, r4
 8008d22:	4630      	mov	r0, r6
 8008d24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d28:	bfa6      	itte	ge
 8008d2a:	461c      	movge	r4, r3
 8008d2c:	2500      	movge	r5, #0
 8008d2e:	2501      	movlt	r5, #1
 8008d30:	f7ff fd3a 	bl	80087a8 <_Balloc>
 8008d34:	b920      	cbnz	r0, 8008d40 <__mdiff+0x5c>
 8008d36:	4b2e      	ldr	r3, [pc, #184]	; (8008df0 <__mdiff+0x10c>)
 8008d38:	4602      	mov	r2, r0
 8008d3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d3e:	e7e5      	b.n	8008d0c <__mdiff+0x28>
 8008d40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d44:	6926      	ldr	r6, [r4, #16]
 8008d46:	60c5      	str	r5, [r0, #12]
 8008d48:	f104 0914 	add.w	r9, r4, #20
 8008d4c:	f108 0514 	add.w	r5, r8, #20
 8008d50:	f100 0e14 	add.w	lr, r0, #20
 8008d54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d5c:	f108 0210 	add.w	r2, r8, #16
 8008d60:	46f2      	mov	sl, lr
 8008d62:	2100      	movs	r1, #0
 8008d64:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d6c:	fa1f f883 	uxth.w	r8, r3
 8008d70:	fa11 f18b 	uxtah	r1, r1, fp
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	eba1 0808 	sub.w	r8, r1, r8
 8008d7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d82:	fa1f f888 	uxth.w	r8, r8
 8008d86:	1419      	asrs	r1, r3, #16
 8008d88:	454e      	cmp	r6, r9
 8008d8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d8e:	f84a 3b04 	str.w	r3, [sl], #4
 8008d92:	d8e7      	bhi.n	8008d64 <__mdiff+0x80>
 8008d94:	1b33      	subs	r3, r6, r4
 8008d96:	3b15      	subs	r3, #21
 8008d98:	f023 0303 	bic.w	r3, r3, #3
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	3415      	adds	r4, #21
 8008da0:	42a6      	cmp	r6, r4
 8008da2:	bf38      	it	cc
 8008da4:	2304      	movcc	r3, #4
 8008da6:	441d      	add	r5, r3
 8008da8:	4473      	add	r3, lr
 8008daa:	469e      	mov	lr, r3
 8008dac:	462e      	mov	r6, r5
 8008dae:	4566      	cmp	r6, ip
 8008db0:	d30e      	bcc.n	8008dd0 <__mdiff+0xec>
 8008db2:	f10c 0203 	add.w	r2, ip, #3
 8008db6:	1b52      	subs	r2, r2, r5
 8008db8:	f022 0203 	bic.w	r2, r2, #3
 8008dbc:	3d03      	subs	r5, #3
 8008dbe:	45ac      	cmp	ip, r5
 8008dc0:	bf38      	it	cc
 8008dc2:	2200      	movcc	r2, #0
 8008dc4:	441a      	add	r2, r3
 8008dc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dca:	b17b      	cbz	r3, 8008dec <__mdiff+0x108>
 8008dcc:	6107      	str	r7, [r0, #16]
 8008dce:	e7a3      	b.n	8008d18 <__mdiff+0x34>
 8008dd0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008dd4:	fa11 f288 	uxtah	r2, r1, r8
 8008dd8:	1414      	asrs	r4, r2, #16
 8008dda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008dde:	b292      	uxth	r2, r2
 8008de0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008de4:	f84e 2b04 	str.w	r2, [lr], #4
 8008de8:	1421      	asrs	r1, r4, #16
 8008dea:	e7e0      	b.n	8008dae <__mdiff+0xca>
 8008dec:	3f01      	subs	r7, #1
 8008dee:	e7ea      	b.n	8008dc6 <__mdiff+0xe2>
 8008df0:	0800a0e7 	.word	0x0800a0e7
 8008df4:	0800a0f8 	.word	0x0800a0f8

08008df8 <__d2b>:
 8008df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	4689      	mov	r9, r1
 8008dfe:	2101      	movs	r1, #1
 8008e00:	ec57 6b10 	vmov	r6, r7, d0
 8008e04:	4690      	mov	r8, r2
 8008e06:	f7ff fccf 	bl	80087a8 <_Balloc>
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	b930      	cbnz	r0, 8008e1c <__d2b+0x24>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b25      	ldr	r3, [pc, #148]	; (8008ea8 <__d2b+0xb0>)
 8008e12:	4826      	ldr	r0, [pc, #152]	; (8008eac <__d2b+0xb4>)
 8008e14:	f240 310a 	movw	r1, #778	; 0x30a
 8008e18:	f000 faac 	bl	8009374 <__assert_func>
 8008e1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e24:	bb35      	cbnz	r5, 8008e74 <__d2b+0x7c>
 8008e26:	2e00      	cmp	r6, #0
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	d028      	beq.n	8008e7e <__d2b+0x86>
 8008e2c:	4668      	mov	r0, sp
 8008e2e:	9600      	str	r6, [sp, #0]
 8008e30:	f7ff fd82 	bl	8008938 <__lo0bits>
 8008e34:	9900      	ldr	r1, [sp, #0]
 8008e36:	b300      	cbz	r0, 8008e7a <__d2b+0x82>
 8008e38:	9a01      	ldr	r2, [sp, #4]
 8008e3a:	f1c0 0320 	rsb	r3, r0, #32
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	430b      	orrs	r3, r1
 8008e44:	40c2      	lsrs	r2, r0
 8008e46:	6163      	str	r3, [r4, #20]
 8008e48:	9201      	str	r2, [sp, #4]
 8008e4a:	9b01      	ldr	r3, [sp, #4]
 8008e4c:	61a3      	str	r3, [r4, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	bf14      	ite	ne
 8008e52:	2202      	movne	r2, #2
 8008e54:	2201      	moveq	r2, #1
 8008e56:	6122      	str	r2, [r4, #16]
 8008e58:	b1d5      	cbz	r5, 8008e90 <__d2b+0x98>
 8008e5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e5e:	4405      	add	r5, r0
 8008e60:	f8c9 5000 	str.w	r5, [r9]
 8008e64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e68:	f8c8 0000 	str.w	r0, [r8]
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	b003      	add	sp, #12
 8008e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e78:	e7d5      	b.n	8008e26 <__d2b+0x2e>
 8008e7a:	6161      	str	r1, [r4, #20]
 8008e7c:	e7e5      	b.n	8008e4a <__d2b+0x52>
 8008e7e:	a801      	add	r0, sp, #4
 8008e80:	f7ff fd5a 	bl	8008938 <__lo0bits>
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	6163      	str	r3, [r4, #20]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	6122      	str	r2, [r4, #16]
 8008e8c:	3020      	adds	r0, #32
 8008e8e:	e7e3      	b.n	8008e58 <__d2b+0x60>
 8008e90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e98:	f8c9 0000 	str.w	r0, [r9]
 8008e9c:	6918      	ldr	r0, [r3, #16]
 8008e9e:	f7ff fd2b 	bl	80088f8 <__hi0bits>
 8008ea2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ea6:	e7df      	b.n	8008e68 <__d2b+0x70>
 8008ea8:	0800a0e7 	.word	0x0800a0e7
 8008eac:	0800a0f8 	.word	0x0800a0f8

08008eb0 <_calloc_r>:
 8008eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eb2:	fba1 2402 	umull	r2, r4, r1, r2
 8008eb6:	b94c      	cbnz	r4, 8008ecc <_calloc_r+0x1c>
 8008eb8:	4611      	mov	r1, r2
 8008eba:	9201      	str	r2, [sp, #4]
 8008ebc:	f000 f87a 	bl	8008fb4 <_malloc_r>
 8008ec0:	9a01      	ldr	r2, [sp, #4]
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	b930      	cbnz	r0, 8008ed4 <_calloc_r+0x24>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	b003      	add	sp, #12
 8008eca:	bd30      	pop	{r4, r5, pc}
 8008ecc:	220c      	movs	r2, #12
 8008ece:	6002      	str	r2, [r0, #0]
 8008ed0:	2500      	movs	r5, #0
 8008ed2:	e7f8      	b.n	8008ec6 <_calloc_r+0x16>
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	f7fe f941 	bl	800715c <memset>
 8008eda:	e7f4      	b.n	8008ec6 <_calloc_r+0x16>

08008edc <_free_r>:
 8008edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ede:	2900      	cmp	r1, #0
 8008ee0:	d044      	beq.n	8008f6c <_free_r+0x90>
 8008ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee6:	9001      	str	r0, [sp, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f1a1 0404 	sub.w	r4, r1, #4
 8008eee:	bfb8      	it	lt
 8008ef0:	18e4      	addlt	r4, r4, r3
 8008ef2:	f000 fa9b 	bl	800942c <__malloc_lock>
 8008ef6:	4a1e      	ldr	r2, [pc, #120]	; (8008f70 <_free_r+0x94>)
 8008ef8:	9801      	ldr	r0, [sp, #4]
 8008efa:	6813      	ldr	r3, [r2, #0]
 8008efc:	b933      	cbnz	r3, 8008f0c <_free_r+0x30>
 8008efe:	6063      	str	r3, [r4, #4]
 8008f00:	6014      	str	r4, [r2, #0]
 8008f02:	b003      	add	sp, #12
 8008f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f08:	f000 ba96 	b.w	8009438 <__malloc_unlock>
 8008f0c:	42a3      	cmp	r3, r4
 8008f0e:	d908      	bls.n	8008f22 <_free_r+0x46>
 8008f10:	6825      	ldr	r5, [r4, #0]
 8008f12:	1961      	adds	r1, r4, r5
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf01      	itttt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	1949      	addeq	r1, r1, r5
 8008f1e:	6021      	streq	r1, [r4, #0]
 8008f20:	e7ed      	b.n	8008efe <_free_r+0x22>
 8008f22:	461a      	mov	r2, r3
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b10b      	cbz	r3, 8008f2c <_free_r+0x50>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d9fa      	bls.n	8008f22 <_free_r+0x46>
 8008f2c:	6811      	ldr	r1, [r2, #0]
 8008f2e:	1855      	adds	r5, r2, r1
 8008f30:	42a5      	cmp	r5, r4
 8008f32:	d10b      	bne.n	8008f4c <_free_r+0x70>
 8008f34:	6824      	ldr	r4, [r4, #0]
 8008f36:	4421      	add	r1, r4
 8008f38:	1854      	adds	r4, r2, r1
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	d1e0      	bne.n	8008f02 <_free_r+0x26>
 8008f40:	681c      	ldr	r4, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	6053      	str	r3, [r2, #4]
 8008f46:	4421      	add	r1, r4
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	e7da      	b.n	8008f02 <_free_r+0x26>
 8008f4c:	d902      	bls.n	8008f54 <_free_r+0x78>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	6003      	str	r3, [r0, #0]
 8008f52:	e7d6      	b.n	8008f02 <_free_r+0x26>
 8008f54:	6825      	ldr	r5, [r4, #0]
 8008f56:	1961      	adds	r1, r4, r5
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	bf04      	itt	eq
 8008f5c:	6819      	ldreq	r1, [r3, #0]
 8008f5e:	685b      	ldreq	r3, [r3, #4]
 8008f60:	6063      	str	r3, [r4, #4]
 8008f62:	bf04      	itt	eq
 8008f64:	1949      	addeq	r1, r1, r5
 8008f66:	6021      	streq	r1, [r4, #0]
 8008f68:	6054      	str	r4, [r2, #4]
 8008f6a:	e7ca      	b.n	8008f02 <_free_r+0x26>
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd30      	pop	{r4, r5, pc}
 8008f70:	20001a88 	.word	0x20001a88

08008f74 <sbrk_aligned>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	4e0e      	ldr	r6, [pc, #56]	; (8008fb0 <sbrk_aligned+0x3c>)
 8008f78:	460c      	mov	r4, r1
 8008f7a:	6831      	ldr	r1, [r6, #0]
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	b911      	cbnz	r1, 8008f86 <sbrk_aligned+0x12>
 8008f80:	f000 f9e8 	bl	8009354 <_sbrk_r>
 8008f84:	6030      	str	r0, [r6, #0]
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f9e3 	bl	8009354 <_sbrk_r>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	d00a      	beq.n	8008fa8 <sbrk_aligned+0x34>
 8008f92:	1cc4      	adds	r4, r0, #3
 8008f94:	f024 0403 	bic.w	r4, r4, #3
 8008f98:	42a0      	cmp	r0, r4
 8008f9a:	d007      	beq.n	8008fac <sbrk_aligned+0x38>
 8008f9c:	1a21      	subs	r1, r4, r0
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 f9d8 	bl	8009354 <_sbrk_r>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d101      	bne.n	8008fac <sbrk_aligned+0x38>
 8008fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fac:	4620      	mov	r0, r4
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	20001a8c 	.word	0x20001a8c

08008fb4 <_malloc_r>:
 8008fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb8:	1ccd      	adds	r5, r1, #3
 8008fba:	f025 0503 	bic.w	r5, r5, #3
 8008fbe:	3508      	adds	r5, #8
 8008fc0:	2d0c      	cmp	r5, #12
 8008fc2:	bf38      	it	cc
 8008fc4:	250c      	movcc	r5, #12
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	4607      	mov	r7, r0
 8008fca:	db01      	blt.n	8008fd0 <_malloc_r+0x1c>
 8008fcc:	42a9      	cmp	r1, r5
 8008fce:	d905      	bls.n	8008fdc <_malloc_r+0x28>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fdc:	4e2e      	ldr	r6, [pc, #184]	; (8009098 <_malloc_r+0xe4>)
 8008fde:	f000 fa25 	bl	800942c <__malloc_lock>
 8008fe2:	6833      	ldr	r3, [r6, #0]
 8008fe4:	461c      	mov	r4, r3
 8008fe6:	bb34      	cbnz	r4, 8009036 <_malloc_r+0x82>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4638      	mov	r0, r7
 8008fec:	f7ff ffc2 	bl	8008f74 <sbrk_aligned>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	d14d      	bne.n	8009092 <_malloc_r+0xde>
 8008ff6:	6834      	ldr	r4, [r6, #0]
 8008ff8:	4626      	mov	r6, r4
 8008ffa:	2e00      	cmp	r6, #0
 8008ffc:	d140      	bne.n	8009080 <_malloc_r+0xcc>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	4631      	mov	r1, r6
 8009002:	4638      	mov	r0, r7
 8009004:	eb04 0803 	add.w	r8, r4, r3
 8009008:	f000 f9a4 	bl	8009354 <_sbrk_r>
 800900c:	4580      	cmp	r8, r0
 800900e:	d13a      	bne.n	8009086 <_malloc_r+0xd2>
 8009010:	6821      	ldr	r1, [r4, #0]
 8009012:	3503      	adds	r5, #3
 8009014:	1a6d      	subs	r5, r5, r1
 8009016:	f025 0503 	bic.w	r5, r5, #3
 800901a:	3508      	adds	r5, #8
 800901c:	2d0c      	cmp	r5, #12
 800901e:	bf38      	it	cc
 8009020:	250c      	movcc	r5, #12
 8009022:	4629      	mov	r1, r5
 8009024:	4638      	mov	r0, r7
 8009026:	f7ff ffa5 	bl	8008f74 <sbrk_aligned>
 800902a:	3001      	adds	r0, #1
 800902c:	d02b      	beq.n	8009086 <_malloc_r+0xd2>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	442b      	add	r3, r5
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	e00e      	b.n	8009054 <_malloc_r+0xa0>
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	1b52      	subs	r2, r2, r5
 800903a:	d41e      	bmi.n	800907a <_malloc_r+0xc6>
 800903c:	2a0b      	cmp	r2, #11
 800903e:	d916      	bls.n	800906e <_malloc_r+0xba>
 8009040:	1961      	adds	r1, r4, r5
 8009042:	42a3      	cmp	r3, r4
 8009044:	6025      	str	r5, [r4, #0]
 8009046:	bf18      	it	ne
 8009048:	6059      	strne	r1, [r3, #4]
 800904a:	6863      	ldr	r3, [r4, #4]
 800904c:	bf08      	it	eq
 800904e:	6031      	streq	r1, [r6, #0]
 8009050:	5162      	str	r2, [r4, r5]
 8009052:	604b      	str	r3, [r1, #4]
 8009054:	4638      	mov	r0, r7
 8009056:	f104 060b 	add.w	r6, r4, #11
 800905a:	f000 f9ed 	bl	8009438 <__malloc_unlock>
 800905e:	f026 0607 	bic.w	r6, r6, #7
 8009062:	1d23      	adds	r3, r4, #4
 8009064:	1af2      	subs	r2, r6, r3
 8009066:	d0b6      	beq.n	8008fd6 <_malloc_r+0x22>
 8009068:	1b9b      	subs	r3, r3, r6
 800906a:	50a3      	str	r3, [r4, r2]
 800906c:	e7b3      	b.n	8008fd6 <_malloc_r+0x22>
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	42a3      	cmp	r3, r4
 8009072:	bf0c      	ite	eq
 8009074:	6032      	streq	r2, [r6, #0]
 8009076:	605a      	strne	r2, [r3, #4]
 8009078:	e7ec      	b.n	8009054 <_malloc_r+0xa0>
 800907a:	4623      	mov	r3, r4
 800907c:	6864      	ldr	r4, [r4, #4]
 800907e:	e7b2      	b.n	8008fe6 <_malloc_r+0x32>
 8009080:	4634      	mov	r4, r6
 8009082:	6876      	ldr	r6, [r6, #4]
 8009084:	e7b9      	b.n	8008ffa <_malloc_r+0x46>
 8009086:	230c      	movs	r3, #12
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	4638      	mov	r0, r7
 800908c:	f000 f9d4 	bl	8009438 <__malloc_unlock>
 8009090:	e7a1      	b.n	8008fd6 <_malloc_r+0x22>
 8009092:	6025      	str	r5, [r4, #0]
 8009094:	e7de      	b.n	8009054 <_malloc_r+0xa0>
 8009096:	bf00      	nop
 8009098:	20001a88 	.word	0x20001a88

0800909c <__ssputs_r>:
 800909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a0:	688e      	ldr	r6, [r1, #8]
 80090a2:	429e      	cmp	r6, r3
 80090a4:	4682      	mov	sl, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	4690      	mov	r8, r2
 80090aa:	461f      	mov	r7, r3
 80090ac:	d838      	bhi.n	8009120 <__ssputs_r+0x84>
 80090ae:	898a      	ldrh	r2, [r1, #12]
 80090b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090b4:	d032      	beq.n	800911c <__ssputs_r+0x80>
 80090b6:	6825      	ldr	r5, [r4, #0]
 80090b8:	6909      	ldr	r1, [r1, #16]
 80090ba:	eba5 0901 	sub.w	r9, r5, r1
 80090be:	6965      	ldr	r5, [r4, #20]
 80090c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090c8:	3301      	adds	r3, #1
 80090ca:	444b      	add	r3, r9
 80090cc:	106d      	asrs	r5, r5, #1
 80090ce:	429d      	cmp	r5, r3
 80090d0:	bf38      	it	cc
 80090d2:	461d      	movcc	r5, r3
 80090d4:	0553      	lsls	r3, r2, #21
 80090d6:	d531      	bpl.n	800913c <__ssputs_r+0xa0>
 80090d8:	4629      	mov	r1, r5
 80090da:	f7ff ff6b 	bl	8008fb4 <_malloc_r>
 80090de:	4606      	mov	r6, r0
 80090e0:	b950      	cbnz	r0, 80090f8 <__ssputs_r+0x5c>
 80090e2:	230c      	movs	r3, #12
 80090e4:	f8ca 3000 	str.w	r3, [sl]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ee:	81a3      	strh	r3, [r4, #12]
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f8:	6921      	ldr	r1, [r4, #16]
 80090fa:	464a      	mov	r2, r9
 80090fc:	f7ff fb46 	bl	800878c <memcpy>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	6126      	str	r6, [r4, #16]
 800910e:	6165      	str	r5, [r4, #20]
 8009110:	444e      	add	r6, r9
 8009112:	eba5 0509 	sub.w	r5, r5, r9
 8009116:	6026      	str	r6, [r4, #0]
 8009118:	60a5      	str	r5, [r4, #8]
 800911a:	463e      	mov	r6, r7
 800911c:	42be      	cmp	r6, r7
 800911e:	d900      	bls.n	8009122 <__ssputs_r+0x86>
 8009120:	463e      	mov	r6, r7
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	4632      	mov	r2, r6
 8009126:	4641      	mov	r1, r8
 8009128:	f000 f966 	bl	80093f8 <memmove>
 800912c:	68a3      	ldr	r3, [r4, #8]
 800912e:	1b9b      	subs	r3, r3, r6
 8009130:	60a3      	str	r3, [r4, #8]
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	4433      	add	r3, r6
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	2000      	movs	r0, #0
 800913a:	e7db      	b.n	80090f4 <__ssputs_r+0x58>
 800913c:	462a      	mov	r2, r5
 800913e:	f000 f981 	bl	8009444 <_realloc_r>
 8009142:	4606      	mov	r6, r0
 8009144:	2800      	cmp	r0, #0
 8009146:	d1e1      	bne.n	800910c <__ssputs_r+0x70>
 8009148:	6921      	ldr	r1, [r4, #16]
 800914a:	4650      	mov	r0, sl
 800914c:	f7ff fec6 	bl	8008edc <_free_r>
 8009150:	e7c7      	b.n	80090e2 <__ssputs_r+0x46>
	...

08009154 <_svfiprintf_r>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	4698      	mov	r8, r3
 800915a:	898b      	ldrh	r3, [r1, #12]
 800915c:	061b      	lsls	r3, r3, #24
 800915e:	b09d      	sub	sp, #116	; 0x74
 8009160:	4607      	mov	r7, r0
 8009162:	460d      	mov	r5, r1
 8009164:	4614      	mov	r4, r2
 8009166:	d50e      	bpl.n	8009186 <_svfiprintf_r+0x32>
 8009168:	690b      	ldr	r3, [r1, #16]
 800916a:	b963      	cbnz	r3, 8009186 <_svfiprintf_r+0x32>
 800916c:	2140      	movs	r1, #64	; 0x40
 800916e:	f7ff ff21 	bl	8008fb4 <_malloc_r>
 8009172:	6028      	str	r0, [r5, #0]
 8009174:	6128      	str	r0, [r5, #16]
 8009176:	b920      	cbnz	r0, 8009182 <_svfiprintf_r+0x2e>
 8009178:	230c      	movs	r3, #12
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e0d1      	b.n	8009326 <_svfiprintf_r+0x1d2>
 8009182:	2340      	movs	r3, #64	; 0x40
 8009184:	616b      	str	r3, [r5, #20]
 8009186:	2300      	movs	r3, #0
 8009188:	9309      	str	r3, [sp, #36]	; 0x24
 800918a:	2320      	movs	r3, #32
 800918c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009190:	f8cd 800c 	str.w	r8, [sp, #12]
 8009194:	2330      	movs	r3, #48	; 0x30
 8009196:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009340 <_svfiprintf_r+0x1ec>
 800919a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800919e:	f04f 0901 	mov.w	r9, #1
 80091a2:	4623      	mov	r3, r4
 80091a4:	469a      	mov	sl, r3
 80091a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091aa:	b10a      	cbz	r2, 80091b0 <_svfiprintf_r+0x5c>
 80091ac:	2a25      	cmp	r2, #37	; 0x25
 80091ae:	d1f9      	bne.n	80091a4 <_svfiprintf_r+0x50>
 80091b0:	ebba 0b04 	subs.w	fp, sl, r4
 80091b4:	d00b      	beq.n	80091ce <_svfiprintf_r+0x7a>
 80091b6:	465b      	mov	r3, fp
 80091b8:	4622      	mov	r2, r4
 80091ba:	4629      	mov	r1, r5
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff ff6d 	bl	800909c <__ssputs_r>
 80091c2:	3001      	adds	r0, #1
 80091c4:	f000 80aa 	beq.w	800931c <_svfiprintf_r+0x1c8>
 80091c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ca:	445a      	add	r2, fp
 80091cc:	9209      	str	r2, [sp, #36]	; 0x24
 80091ce:	f89a 3000 	ldrb.w	r3, [sl]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80a2 	beq.w	800931c <_svfiprintf_r+0x1c8>
 80091d8:	2300      	movs	r3, #0
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e2:	f10a 0a01 	add.w	sl, sl, #1
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	9307      	str	r3, [sp, #28]
 80091ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091ee:	931a      	str	r3, [sp, #104]	; 0x68
 80091f0:	4654      	mov	r4, sl
 80091f2:	2205      	movs	r2, #5
 80091f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f8:	4851      	ldr	r0, [pc, #324]	; (8009340 <_svfiprintf_r+0x1ec>)
 80091fa:	f7f6 fff1 	bl	80001e0 <memchr>
 80091fe:	9a04      	ldr	r2, [sp, #16]
 8009200:	b9d8      	cbnz	r0, 800923a <_svfiprintf_r+0xe6>
 8009202:	06d0      	lsls	r0, r2, #27
 8009204:	bf44      	itt	mi
 8009206:	2320      	movmi	r3, #32
 8009208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800920c:	0711      	lsls	r1, r2, #28
 800920e:	bf44      	itt	mi
 8009210:	232b      	movmi	r3, #43	; 0x2b
 8009212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009216:	f89a 3000 	ldrb.w	r3, [sl]
 800921a:	2b2a      	cmp	r3, #42	; 0x2a
 800921c:	d015      	beq.n	800924a <_svfiprintf_r+0xf6>
 800921e:	9a07      	ldr	r2, [sp, #28]
 8009220:	4654      	mov	r4, sl
 8009222:	2000      	movs	r0, #0
 8009224:	f04f 0c0a 	mov.w	ip, #10
 8009228:	4621      	mov	r1, r4
 800922a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800922e:	3b30      	subs	r3, #48	; 0x30
 8009230:	2b09      	cmp	r3, #9
 8009232:	d94e      	bls.n	80092d2 <_svfiprintf_r+0x17e>
 8009234:	b1b0      	cbz	r0, 8009264 <_svfiprintf_r+0x110>
 8009236:	9207      	str	r2, [sp, #28]
 8009238:	e014      	b.n	8009264 <_svfiprintf_r+0x110>
 800923a:	eba0 0308 	sub.w	r3, r0, r8
 800923e:	fa09 f303 	lsl.w	r3, r9, r3
 8009242:	4313      	orrs	r3, r2
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	46a2      	mov	sl, r4
 8009248:	e7d2      	b.n	80091f0 <_svfiprintf_r+0x9c>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	1d19      	adds	r1, r3, #4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	9103      	str	r1, [sp, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfbb      	ittet	lt
 8009256:	425b      	neglt	r3, r3
 8009258:	f042 0202 	orrlt.w	r2, r2, #2
 800925c:	9307      	strge	r3, [sp, #28]
 800925e:	9307      	strlt	r3, [sp, #28]
 8009260:	bfb8      	it	lt
 8009262:	9204      	strlt	r2, [sp, #16]
 8009264:	7823      	ldrb	r3, [r4, #0]
 8009266:	2b2e      	cmp	r3, #46	; 0x2e
 8009268:	d10c      	bne.n	8009284 <_svfiprintf_r+0x130>
 800926a:	7863      	ldrb	r3, [r4, #1]
 800926c:	2b2a      	cmp	r3, #42	; 0x2a
 800926e:	d135      	bne.n	80092dc <_svfiprintf_r+0x188>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	1d1a      	adds	r2, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	9203      	str	r2, [sp, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	bfb8      	it	lt
 800927c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009280:	3402      	adds	r4, #2
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009350 <_svfiprintf_r+0x1fc>
 8009288:	7821      	ldrb	r1, [r4, #0]
 800928a:	2203      	movs	r2, #3
 800928c:	4650      	mov	r0, sl
 800928e:	f7f6 ffa7 	bl	80001e0 <memchr>
 8009292:	b140      	cbz	r0, 80092a6 <_svfiprintf_r+0x152>
 8009294:	2340      	movs	r3, #64	; 0x40
 8009296:	eba0 000a 	sub.w	r0, r0, sl
 800929a:	fa03 f000 	lsl.w	r0, r3, r0
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	4303      	orrs	r3, r0
 80092a2:	3401      	adds	r4, #1
 80092a4:	9304      	str	r3, [sp, #16]
 80092a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092aa:	4826      	ldr	r0, [pc, #152]	; (8009344 <_svfiprintf_r+0x1f0>)
 80092ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092b0:	2206      	movs	r2, #6
 80092b2:	f7f6 ff95 	bl	80001e0 <memchr>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d038      	beq.n	800932c <_svfiprintf_r+0x1d8>
 80092ba:	4b23      	ldr	r3, [pc, #140]	; (8009348 <_svfiprintf_r+0x1f4>)
 80092bc:	bb1b      	cbnz	r3, 8009306 <_svfiprintf_r+0x1b2>
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	3307      	adds	r3, #7
 80092c2:	f023 0307 	bic.w	r3, r3, #7
 80092c6:	3308      	adds	r3, #8
 80092c8:	9303      	str	r3, [sp, #12]
 80092ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092cc:	4433      	add	r3, r6
 80092ce:	9309      	str	r3, [sp, #36]	; 0x24
 80092d0:	e767      	b.n	80091a2 <_svfiprintf_r+0x4e>
 80092d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092d6:	460c      	mov	r4, r1
 80092d8:	2001      	movs	r0, #1
 80092da:	e7a5      	b.n	8009228 <_svfiprintf_r+0xd4>
 80092dc:	2300      	movs	r3, #0
 80092de:	3401      	adds	r4, #1
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	4619      	mov	r1, r3
 80092e4:	f04f 0c0a 	mov.w	ip, #10
 80092e8:	4620      	mov	r0, r4
 80092ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ee:	3a30      	subs	r2, #48	; 0x30
 80092f0:	2a09      	cmp	r2, #9
 80092f2:	d903      	bls.n	80092fc <_svfiprintf_r+0x1a8>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0c5      	beq.n	8009284 <_svfiprintf_r+0x130>
 80092f8:	9105      	str	r1, [sp, #20]
 80092fa:	e7c3      	b.n	8009284 <_svfiprintf_r+0x130>
 80092fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009300:	4604      	mov	r4, r0
 8009302:	2301      	movs	r3, #1
 8009304:	e7f0      	b.n	80092e8 <_svfiprintf_r+0x194>
 8009306:	ab03      	add	r3, sp, #12
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	462a      	mov	r2, r5
 800930c:	4b0f      	ldr	r3, [pc, #60]	; (800934c <_svfiprintf_r+0x1f8>)
 800930e:	a904      	add	r1, sp, #16
 8009310:	4638      	mov	r0, r7
 8009312:	f7fd ffcb 	bl	80072ac <_printf_float>
 8009316:	1c42      	adds	r2, r0, #1
 8009318:	4606      	mov	r6, r0
 800931a:	d1d6      	bne.n	80092ca <_svfiprintf_r+0x176>
 800931c:	89ab      	ldrh	r3, [r5, #12]
 800931e:	065b      	lsls	r3, r3, #25
 8009320:	f53f af2c 	bmi.w	800917c <_svfiprintf_r+0x28>
 8009324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009326:	b01d      	add	sp, #116	; 0x74
 8009328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	462a      	mov	r2, r5
 8009332:	4b06      	ldr	r3, [pc, #24]	; (800934c <_svfiprintf_r+0x1f8>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	4638      	mov	r0, r7
 8009338:	f7fe fa5c 	bl	80077f4 <_printf_i>
 800933c:	e7eb      	b.n	8009316 <_svfiprintf_r+0x1c2>
 800933e:	bf00      	nop
 8009340:	0800a254 	.word	0x0800a254
 8009344:	0800a25e 	.word	0x0800a25e
 8009348:	080072ad 	.word	0x080072ad
 800934c:	0800909d 	.word	0x0800909d
 8009350:	0800a25a 	.word	0x0800a25a

08009354 <_sbrk_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d06      	ldr	r5, [pc, #24]	; (8009370 <_sbrk_r+0x1c>)
 8009358:	2300      	movs	r3, #0
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	602b      	str	r3, [r5, #0]
 8009360:	f7f9 f876 	bl	8002450 <_sbrk>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_sbrk_r+0x1a>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_sbrk_r+0x1a>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	20001a90 	.word	0x20001a90

08009374 <__assert_func>:
 8009374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009376:	4614      	mov	r4, r2
 8009378:	461a      	mov	r2, r3
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <__assert_func+0x2c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4605      	mov	r5, r0
 8009380:	68d8      	ldr	r0, [r3, #12]
 8009382:	b14c      	cbz	r4, 8009398 <__assert_func+0x24>
 8009384:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <__assert_func+0x30>)
 8009386:	9100      	str	r1, [sp, #0]
 8009388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800938c:	4906      	ldr	r1, [pc, #24]	; (80093a8 <__assert_func+0x34>)
 800938e:	462b      	mov	r3, r5
 8009390:	f000 f80e 	bl	80093b0 <fiprintf>
 8009394:	f000 faac 	bl	80098f0 <abort>
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <__assert_func+0x38>)
 800939a:	461c      	mov	r4, r3
 800939c:	e7f3      	b.n	8009386 <__assert_func+0x12>
 800939e:	bf00      	nop
 80093a0:	20000024 	.word	0x20000024
 80093a4:	0800a265 	.word	0x0800a265
 80093a8:	0800a272 	.word	0x0800a272
 80093ac:	0800a2a0 	.word	0x0800a2a0

080093b0 <fiprintf>:
 80093b0:	b40e      	push	{r1, r2, r3}
 80093b2:	b503      	push	{r0, r1, lr}
 80093b4:	4601      	mov	r1, r0
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	4805      	ldr	r0, [pc, #20]	; (80093d0 <fiprintf+0x20>)
 80093ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	f000 f897 	bl	80094f4 <_vfiprintf_r>
 80093c6:	b002      	add	sp, #8
 80093c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093cc:	b003      	add	sp, #12
 80093ce:	4770      	bx	lr
 80093d0:	20000024 	.word	0x20000024

080093d4 <__ascii_mbtowc>:
 80093d4:	b082      	sub	sp, #8
 80093d6:	b901      	cbnz	r1, 80093da <__ascii_mbtowc+0x6>
 80093d8:	a901      	add	r1, sp, #4
 80093da:	b142      	cbz	r2, 80093ee <__ascii_mbtowc+0x1a>
 80093dc:	b14b      	cbz	r3, 80093f2 <__ascii_mbtowc+0x1e>
 80093de:	7813      	ldrb	r3, [r2, #0]
 80093e0:	600b      	str	r3, [r1, #0]
 80093e2:	7812      	ldrb	r2, [r2, #0]
 80093e4:	1e10      	subs	r0, r2, #0
 80093e6:	bf18      	it	ne
 80093e8:	2001      	movne	r0, #1
 80093ea:	b002      	add	sp, #8
 80093ec:	4770      	bx	lr
 80093ee:	4610      	mov	r0, r2
 80093f0:	e7fb      	b.n	80093ea <__ascii_mbtowc+0x16>
 80093f2:	f06f 0001 	mvn.w	r0, #1
 80093f6:	e7f8      	b.n	80093ea <__ascii_mbtowc+0x16>

080093f8 <memmove>:
 80093f8:	4288      	cmp	r0, r1
 80093fa:	b510      	push	{r4, lr}
 80093fc:	eb01 0402 	add.w	r4, r1, r2
 8009400:	d902      	bls.n	8009408 <memmove+0x10>
 8009402:	4284      	cmp	r4, r0
 8009404:	4623      	mov	r3, r4
 8009406:	d807      	bhi.n	8009418 <memmove+0x20>
 8009408:	1e43      	subs	r3, r0, #1
 800940a:	42a1      	cmp	r1, r4
 800940c:	d008      	beq.n	8009420 <memmove+0x28>
 800940e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009416:	e7f8      	b.n	800940a <memmove+0x12>
 8009418:	4402      	add	r2, r0
 800941a:	4601      	mov	r1, r0
 800941c:	428a      	cmp	r2, r1
 800941e:	d100      	bne.n	8009422 <memmove+0x2a>
 8009420:	bd10      	pop	{r4, pc}
 8009422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800942a:	e7f7      	b.n	800941c <memmove+0x24>

0800942c <__malloc_lock>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__malloc_lock+0x8>)
 800942e:	f000 bc1f 	b.w	8009c70 <__retarget_lock_acquire_recursive>
 8009432:	bf00      	nop
 8009434:	20001a94 	.word	0x20001a94

08009438 <__malloc_unlock>:
 8009438:	4801      	ldr	r0, [pc, #4]	; (8009440 <__malloc_unlock+0x8>)
 800943a:	f000 bc1a 	b.w	8009c72 <__retarget_lock_release_recursive>
 800943e:	bf00      	nop
 8009440:	20001a94 	.word	0x20001a94

08009444 <_realloc_r>:
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	4680      	mov	r8, r0
 800944a:	4614      	mov	r4, r2
 800944c:	460e      	mov	r6, r1
 800944e:	b921      	cbnz	r1, 800945a <_realloc_r+0x16>
 8009450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009454:	4611      	mov	r1, r2
 8009456:	f7ff bdad 	b.w	8008fb4 <_malloc_r>
 800945a:	b92a      	cbnz	r2, 8009468 <_realloc_r+0x24>
 800945c:	f7ff fd3e 	bl	8008edc <_free_r>
 8009460:	4625      	mov	r5, r4
 8009462:	4628      	mov	r0, r5
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009468:	f000 fc6a 	bl	8009d40 <_malloc_usable_size_r>
 800946c:	4284      	cmp	r4, r0
 800946e:	4607      	mov	r7, r0
 8009470:	d802      	bhi.n	8009478 <_realloc_r+0x34>
 8009472:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009476:	d812      	bhi.n	800949e <_realloc_r+0x5a>
 8009478:	4621      	mov	r1, r4
 800947a:	4640      	mov	r0, r8
 800947c:	f7ff fd9a 	bl	8008fb4 <_malloc_r>
 8009480:	4605      	mov	r5, r0
 8009482:	2800      	cmp	r0, #0
 8009484:	d0ed      	beq.n	8009462 <_realloc_r+0x1e>
 8009486:	42bc      	cmp	r4, r7
 8009488:	4622      	mov	r2, r4
 800948a:	4631      	mov	r1, r6
 800948c:	bf28      	it	cs
 800948e:	463a      	movcs	r2, r7
 8009490:	f7ff f97c 	bl	800878c <memcpy>
 8009494:	4631      	mov	r1, r6
 8009496:	4640      	mov	r0, r8
 8009498:	f7ff fd20 	bl	8008edc <_free_r>
 800949c:	e7e1      	b.n	8009462 <_realloc_r+0x1e>
 800949e:	4635      	mov	r5, r6
 80094a0:	e7df      	b.n	8009462 <_realloc_r+0x1e>

080094a2 <__sfputc_r>:
 80094a2:	6893      	ldr	r3, [r2, #8]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	b410      	push	{r4}
 80094aa:	6093      	str	r3, [r2, #8]
 80094ac:	da08      	bge.n	80094c0 <__sfputc_r+0x1e>
 80094ae:	6994      	ldr	r4, [r2, #24]
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	db01      	blt.n	80094b8 <__sfputc_r+0x16>
 80094b4:	290a      	cmp	r1, #10
 80094b6:	d103      	bne.n	80094c0 <__sfputc_r+0x1e>
 80094b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094bc:	f000 b94a 	b.w	8009754 <__swbuf_r>
 80094c0:	6813      	ldr	r3, [r2, #0]
 80094c2:	1c58      	adds	r0, r3, #1
 80094c4:	6010      	str	r0, [r2, #0]
 80094c6:	7019      	strb	r1, [r3, #0]
 80094c8:	4608      	mov	r0, r1
 80094ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <__sfputs_r>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	4614      	mov	r4, r2
 80094d8:	18d5      	adds	r5, r2, r3
 80094da:	42ac      	cmp	r4, r5
 80094dc:	d101      	bne.n	80094e2 <__sfputs_r+0x12>
 80094de:	2000      	movs	r0, #0
 80094e0:	e007      	b.n	80094f2 <__sfputs_r+0x22>
 80094e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e6:	463a      	mov	r2, r7
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff ffda 	bl	80094a2 <__sfputc_r>
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	d1f3      	bne.n	80094da <__sfputs_r+0xa>
 80094f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094f4 <_vfiprintf_r>:
 80094f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	460d      	mov	r5, r1
 80094fa:	b09d      	sub	sp, #116	; 0x74
 80094fc:	4614      	mov	r4, r2
 80094fe:	4698      	mov	r8, r3
 8009500:	4606      	mov	r6, r0
 8009502:	b118      	cbz	r0, 800950c <_vfiprintf_r+0x18>
 8009504:	6983      	ldr	r3, [r0, #24]
 8009506:	b90b      	cbnz	r3, 800950c <_vfiprintf_r+0x18>
 8009508:	f000 fb14 	bl	8009b34 <__sinit>
 800950c:	4b89      	ldr	r3, [pc, #548]	; (8009734 <_vfiprintf_r+0x240>)
 800950e:	429d      	cmp	r5, r3
 8009510:	d11b      	bne.n	800954a <_vfiprintf_r+0x56>
 8009512:	6875      	ldr	r5, [r6, #4]
 8009514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009516:	07d9      	lsls	r1, r3, #31
 8009518:	d405      	bmi.n	8009526 <_vfiprintf_r+0x32>
 800951a:	89ab      	ldrh	r3, [r5, #12]
 800951c:	059a      	lsls	r2, r3, #22
 800951e:	d402      	bmi.n	8009526 <_vfiprintf_r+0x32>
 8009520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009522:	f000 fba5 	bl	8009c70 <__retarget_lock_acquire_recursive>
 8009526:	89ab      	ldrh	r3, [r5, #12]
 8009528:	071b      	lsls	r3, r3, #28
 800952a:	d501      	bpl.n	8009530 <_vfiprintf_r+0x3c>
 800952c:	692b      	ldr	r3, [r5, #16]
 800952e:	b9eb      	cbnz	r3, 800956c <_vfiprintf_r+0x78>
 8009530:	4629      	mov	r1, r5
 8009532:	4630      	mov	r0, r6
 8009534:	f000 f96e 	bl	8009814 <__swsetup_r>
 8009538:	b1c0      	cbz	r0, 800956c <_vfiprintf_r+0x78>
 800953a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800953c:	07dc      	lsls	r4, r3, #31
 800953e:	d50e      	bpl.n	800955e <_vfiprintf_r+0x6a>
 8009540:	f04f 30ff 	mov.w	r0, #4294967295
 8009544:	b01d      	add	sp, #116	; 0x74
 8009546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	4b7b      	ldr	r3, [pc, #492]	; (8009738 <_vfiprintf_r+0x244>)
 800954c:	429d      	cmp	r5, r3
 800954e:	d101      	bne.n	8009554 <_vfiprintf_r+0x60>
 8009550:	68b5      	ldr	r5, [r6, #8]
 8009552:	e7df      	b.n	8009514 <_vfiprintf_r+0x20>
 8009554:	4b79      	ldr	r3, [pc, #484]	; (800973c <_vfiprintf_r+0x248>)
 8009556:	429d      	cmp	r5, r3
 8009558:	bf08      	it	eq
 800955a:	68f5      	ldreq	r5, [r6, #12]
 800955c:	e7da      	b.n	8009514 <_vfiprintf_r+0x20>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	0598      	lsls	r0, r3, #22
 8009562:	d4ed      	bmi.n	8009540 <_vfiprintf_r+0x4c>
 8009564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009566:	f000 fb84 	bl	8009c72 <__retarget_lock_release_recursive>
 800956a:	e7e9      	b.n	8009540 <_vfiprintf_r+0x4c>
 800956c:	2300      	movs	r3, #0
 800956e:	9309      	str	r3, [sp, #36]	; 0x24
 8009570:	2320      	movs	r3, #32
 8009572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009576:	f8cd 800c 	str.w	r8, [sp, #12]
 800957a:	2330      	movs	r3, #48	; 0x30
 800957c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009740 <_vfiprintf_r+0x24c>
 8009580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009584:	f04f 0901 	mov.w	r9, #1
 8009588:	4623      	mov	r3, r4
 800958a:	469a      	mov	sl, r3
 800958c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009590:	b10a      	cbz	r2, 8009596 <_vfiprintf_r+0xa2>
 8009592:	2a25      	cmp	r2, #37	; 0x25
 8009594:	d1f9      	bne.n	800958a <_vfiprintf_r+0x96>
 8009596:	ebba 0b04 	subs.w	fp, sl, r4
 800959a:	d00b      	beq.n	80095b4 <_vfiprintf_r+0xc0>
 800959c:	465b      	mov	r3, fp
 800959e:	4622      	mov	r2, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7ff ff94 	bl	80094d0 <__sfputs_r>
 80095a8:	3001      	adds	r0, #1
 80095aa:	f000 80aa 	beq.w	8009702 <_vfiprintf_r+0x20e>
 80095ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b0:	445a      	add	r2, fp
 80095b2:	9209      	str	r2, [sp, #36]	; 0x24
 80095b4:	f89a 3000 	ldrb.w	r3, [sl]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80a2 	beq.w	8009702 <_vfiprintf_r+0x20e>
 80095be:	2300      	movs	r3, #0
 80095c0:	f04f 32ff 	mov.w	r2, #4294967295
 80095c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095c8:	f10a 0a01 	add.w	sl, sl, #1
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	9307      	str	r3, [sp, #28]
 80095d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095d4:	931a      	str	r3, [sp, #104]	; 0x68
 80095d6:	4654      	mov	r4, sl
 80095d8:	2205      	movs	r2, #5
 80095da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095de:	4858      	ldr	r0, [pc, #352]	; (8009740 <_vfiprintf_r+0x24c>)
 80095e0:	f7f6 fdfe 	bl	80001e0 <memchr>
 80095e4:	9a04      	ldr	r2, [sp, #16]
 80095e6:	b9d8      	cbnz	r0, 8009620 <_vfiprintf_r+0x12c>
 80095e8:	06d1      	lsls	r1, r2, #27
 80095ea:	bf44      	itt	mi
 80095ec:	2320      	movmi	r3, #32
 80095ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f2:	0713      	lsls	r3, r2, #28
 80095f4:	bf44      	itt	mi
 80095f6:	232b      	movmi	r3, #43	; 0x2b
 80095f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009600:	2b2a      	cmp	r3, #42	; 0x2a
 8009602:	d015      	beq.n	8009630 <_vfiprintf_r+0x13c>
 8009604:	9a07      	ldr	r2, [sp, #28]
 8009606:	4654      	mov	r4, sl
 8009608:	2000      	movs	r0, #0
 800960a:	f04f 0c0a 	mov.w	ip, #10
 800960e:	4621      	mov	r1, r4
 8009610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009614:	3b30      	subs	r3, #48	; 0x30
 8009616:	2b09      	cmp	r3, #9
 8009618:	d94e      	bls.n	80096b8 <_vfiprintf_r+0x1c4>
 800961a:	b1b0      	cbz	r0, 800964a <_vfiprintf_r+0x156>
 800961c:	9207      	str	r2, [sp, #28]
 800961e:	e014      	b.n	800964a <_vfiprintf_r+0x156>
 8009620:	eba0 0308 	sub.w	r3, r0, r8
 8009624:	fa09 f303 	lsl.w	r3, r9, r3
 8009628:	4313      	orrs	r3, r2
 800962a:	9304      	str	r3, [sp, #16]
 800962c:	46a2      	mov	sl, r4
 800962e:	e7d2      	b.n	80095d6 <_vfiprintf_r+0xe2>
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	1d19      	adds	r1, r3, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	9103      	str	r1, [sp, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	bfbb      	ittet	lt
 800963c:	425b      	neglt	r3, r3
 800963e:	f042 0202 	orrlt.w	r2, r2, #2
 8009642:	9307      	strge	r3, [sp, #28]
 8009644:	9307      	strlt	r3, [sp, #28]
 8009646:	bfb8      	it	lt
 8009648:	9204      	strlt	r2, [sp, #16]
 800964a:	7823      	ldrb	r3, [r4, #0]
 800964c:	2b2e      	cmp	r3, #46	; 0x2e
 800964e:	d10c      	bne.n	800966a <_vfiprintf_r+0x176>
 8009650:	7863      	ldrb	r3, [r4, #1]
 8009652:	2b2a      	cmp	r3, #42	; 0x2a
 8009654:	d135      	bne.n	80096c2 <_vfiprintf_r+0x1ce>
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	1d1a      	adds	r2, r3, #4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	9203      	str	r2, [sp, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfb8      	it	lt
 8009662:	f04f 33ff 	movlt.w	r3, #4294967295
 8009666:	3402      	adds	r4, #2
 8009668:	9305      	str	r3, [sp, #20]
 800966a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009750 <_vfiprintf_r+0x25c>
 800966e:	7821      	ldrb	r1, [r4, #0]
 8009670:	2203      	movs	r2, #3
 8009672:	4650      	mov	r0, sl
 8009674:	f7f6 fdb4 	bl	80001e0 <memchr>
 8009678:	b140      	cbz	r0, 800968c <_vfiprintf_r+0x198>
 800967a:	2340      	movs	r3, #64	; 0x40
 800967c:	eba0 000a 	sub.w	r0, r0, sl
 8009680:	fa03 f000 	lsl.w	r0, r3, r0
 8009684:	9b04      	ldr	r3, [sp, #16]
 8009686:	4303      	orrs	r3, r0
 8009688:	3401      	adds	r4, #1
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009690:	482c      	ldr	r0, [pc, #176]	; (8009744 <_vfiprintf_r+0x250>)
 8009692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009696:	2206      	movs	r2, #6
 8009698:	f7f6 fda2 	bl	80001e0 <memchr>
 800969c:	2800      	cmp	r0, #0
 800969e:	d03f      	beq.n	8009720 <_vfiprintf_r+0x22c>
 80096a0:	4b29      	ldr	r3, [pc, #164]	; (8009748 <_vfiprintf_r+0x254>)
 80096a2:	bb1b      	cbnz	r3, 80096ec <_vfiprintf_r+0x1f8>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	3307      	adds	r3, #7
 80096a8:	f023 0307 	bic.w	r3, r3, #7
 80096ac:	3308      	adds	r3, #8
 80096ae:	9303      	str	r3, [sp, #12]
 80096b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b2:	443b      	add	r3, r7
 80096b4:	9309      	str	r3, [sp, #36]	; 0x24
 80096b6:	e767      	b.n	8009588 <_vfiprintf_r+0x94>
 80096b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096bc:	460c      	mov	r4, r1
 80096be:	2001      	movs	r0, #1
 80096c0:	e7a5      	b.n	800960e <_vfiprintf_r+0x11a>
 80096c2:	2300      	movs	r3, #0
 80096c4:	3401      	adds	r4, #1
 80096c6:	9305      	str	r3, [sp, #20]
 80096c8:	4619      	mov	r1, r3
 80096ca:	f04f 0c0a 	mov.w	ip, #10
 80096ce:	4620      	mov	r0, r4
 80096d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d4:	3a30      	subs	r2, #48	; 0x30
 80096d6:	2a09      	cmp	r2, #9
 80096d8:	d903      	bls.n	80096e2 <_vfiprintf_r+0x1ee>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0c5      	beq.n	800966a <_vfiprintf_r+0x176>
 80096de:	9105      	str	r1, [sp, #20]
 80096e0:	e7c3      	b.n	800966a <_vfiprintf_r+0x176>
 80096e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80096e6:	4604      	mov	r4, r0
 80096e8:	2301      	movs	r3, #1
 80096ea:	e7f0      	b.n	80096ce <_vfiprintf_r+0x1da>
 80096ec:	ab03      	add	r3, sp, #12
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	462a      	mov	r2, r5
 80096f2:	4b16      	ldr	r3, [pc, #88]	; (800974c <_vfiprintf_r+0x258>)
 80096f4:	a904      	add	r1, sp, #16
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7fd fdd8 	bl	80072ac <_printf_float>
 80096fc:	4607      	mov	r7, r0
 80096fe:	1c78      	adds	r0, r7, #1
 8009700:	d1d6      	bne.n	80096b0 <_vfiprintf_r+0x1bc>
 8009702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009704:	07d9      	lsls	r1, r3, #31
 8009706:	d405      	bmi.n	8009714 <_vfiprintf_r+0x220>
 8009708:	89ab      	ldrh	r3, [r5, #12]
 800970a:	059a      	lsls	r2, r3, #22
 800970c:	d402      	bmi.n	8009714 <_vfiprintf_r+0x220>
 800970e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009710:	f000 faaf 	bl	8009c72 <__retarget_lock_release_recursive>
 8009714:	89ab      	ldrh	r3, [r5, #12]
 8009716:	065b      	lsls	r3, r3, #25
 8009718:	f53f af12 	bmi.w	8009540 <_vfiprintf_r+0x4c>
 800971c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800971e:	e711      	b.n	8009544 <_vfiprintf_r+0x50>
 8009720:	ab03      	add	r3, sp, #12
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	462a      	mov	r2, r5
 8009726:	4b09      	ldr	r3, [pc, #36]	; (800974c <_vfiprintf_r+0x258>)
 8009728:	a904      	add	r1, sp, #16
 800972a:	4630      	mov	r0, r6
 800972c:	f7fe f862 	bl	80077f4 <_printf_i>
 8009730:	e7e4      	b.n	80096fc <_vfiprintf_r+0x208>
 8009732:	bf00      	nop
 8009734:	0800a3cc 	.word	0x0800a3cc
 8009738:	0800a3ec 	.word	0x0800a3ec
 800973c:	0800a3ac 	.word	0x0800a3ac
 8009740:	0800a254 	.word	0x0800a254
 8009744:	0800a25e 	.word	0x0800a25e
 8009748:	080072ad 	.word	0x080072ad
 800974c:	080094d1 	.word	0x080094d1
 8009750:	0800a25a 	.word	0x0800a25a

08009754 <__swbuf_r>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	460e      	mov	r6, r1
 8009758:	4614      	mov	r4, r2
 800975a:	4605      	mov	r5, r0
 800975c:	b118      	cbz	r0, 8009766 <__swbuf_r+0x12>
 800975e:	6983      	ldr	r3, [r0, #24]
 8009760:	b90b      	cbnz	r3, 8009766 <__swbuf_r+0x12>
 8009762:	f000 f9e7 	bl	8009b34 <__sinit>
 8009766:	4b21      	ldr	r3, [pc, #132]	; (80097ec <__swbuf_r+0x98>)
 8009768:	429c      	cmp	r4, r3
 800976a:	d12b      	bne.n	80097c4 <__swbuf_r+0x70>
 800976c:	686c      	ldr	r4, [r5, #4]
 800976e:	69a3      	ldr	r3, [r4, #24]
 8009770:	60a3      	str	r3, [r4, #8]
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	071a      	lsls	r2, r3, #28
 8009776:	d52f      	bpl.n	80097d8 <__swbuf_r+0x84>
 8009778:	6923      	ldr	r3, [r4, #16]
 800977a:	b36b      	cbz	r3, 80097d8 <__swbuf_r+0x84>
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	6820      	ldr	r0, [r4, #0]
 8009780:	1ac0      	subs	r0, r0, r3
 8009782:	6963      	ldr	r3, [r4, #20]
 8009784:	b2f6      	uxtb	r6, r6
 8009786:	4283      	cmp	r3, r0
 8009788:	4637      	mov	r7, r6
 800978a:	dc04      	bgt.n	8009796 <__swbuf_r+0x42>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f93c 	bl	8009a0c <_fflush_r>
 8009794:	bb30      	cbnz	r0, 80097e4 <__swbuf_r+0x90>
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	3b01      	subs	r3, #1
 800979a:	60a3      	str	r3, [r4, #8]
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	701e      	strb	r6, [r3, #0]
 80097a4:	6963      	ldr	r3, [r4, #20]
 80097a6:	3001      	adds	r0, #1
 80097a8:	4283      	cmp	r3, r0
 80097aa:	d004      	beq.n	80097b6 <__swbuf_r+0x62>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	07db      	lsls	r3, r3, #31
 80097b0:	d506      	bpl.n	80097c0 <__swbuf_r+0x6c>
 80097b2:	2e0a      	cmp	r6, #10
 80097b4:	d104      	bne.n	80097c0 <__swbuf_r+0x6c>
 80097b6:	4621      	mov	r1, r4
 80097b8:	4628      	mov	r0, r5
 80097ba:	f000 f927 	bl	8009a0c <_fflush_r>
 80097be:	b988      	cbnz	r0, 80097e4 <__swbuf_r+0x90>
 80097c0:	4638      	mov	r0, r7
 80097c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c4:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <__swbuf_r+0x9c>)
 80097c6:	429c      	cmp	r4, r3
 80097c8:	d101      	bne.n	80097ce <__swbuf_r+0x7a>
 80097ca:	68ac      	ldr	r4, [r5, #8]
 80097cc:	e7cf      	b.n	800976e <__swbuf_r+0x1a>
 80097ce:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <__swbuf_r+0xa0>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	bf08      	it	eq
 80097d4:	68ec      	ldreq	r4, [r5, #12]
 80097d6:	e7ca      	b.n	800976e <__swbuf_r+0x1a>
 80097d8:	4621      	mov	r1, r4
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 f81a 	bl	8009814 <__swsetup_r>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0cb      	beq.n	800977c <__swbuf_r+0x28>
 80097e4:	f04f 37ff 	mov.w	r7, #4294967295
 80097e8:	e7ea      	b.n	80097c0 <__swbuf_r+0x6c>
 80097ea:	bf00      	nop
 80097ec:	0800a3cc 	.word	0x0800a3cc
 80097f0:	0800a3ec 	.word	0x0800a3ec
 80097f4:	0800a3ac 	.word	0x0800a3ac

080097f8 <__ascii_wctomb>:
 80097f8:	b149      	cbz	r1, 800980e <__ascii_wctomb+0x16>
 80097fa:	2aff      	cmp	r2, #255	; 0xff
 80097fc:	bf85      	ittet	hi
 80097fe:	238a      	movhi	r3, #138	; 0x8a
 8009800:	6003      	strhi	r3, [r0, #0]
 8009802:	700a      	strbls	r2, [r1, #0]
 8009804:	f04f 30ff 	movhi.w	r0, #4294967295
 8009808:	bf98      	it	ls
 800980a:	2001      	movls	r0, #1
 800980c:	4770      	bx	lr
 800980e:	4608      	mov	r0, r1
 8009810:	4770      	bx	lr
	...

08009814 <__swsetup_r>:
 8009814:	4b32      	ldr	r3, [pc, #200]	; (80098e0 <__swsetup_r+0xcc>)
 8009816:	b570      	push	{r4, r5, r6, lr}
 8009818:	681d      	ldr	r5, [r3, #0]
 800981a:	4606      	mov	r6, r0
 800981c:	460c      	mov	r4, r1
 800981e:	b125      	cbz	r5, 800982a <__swsetup_r+0x16>
 8009820:	69ab      	ldr	r3, [r5, #24]
 8009822:	b913      	cbnz	r3, 800982a <__swsetup_r+0x16>
 8009824:	4628      	mov	r0, r5
 8009826:	f000 f985 	bl	8009b34 <__sinit>
 800982a:	4b2e      	ldr	r3, [pc, #184]	; (80098e4 <__swsetup_r+0xd0>)
 800982c:	429c      	cmp	r4, r3
 800982e:	d10f      	bne.n	8009850 <__swsetup_r+0x3c>
 8009830:	686c      	ldr	r4, [r5, #4]
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009838:	0719      	lsls	r1, r3, #28
 800983a:	d42c      	bmi.n	8009896 <__swsetup_r+0x82>
 800983c:	06dd      	lsls	r5, r3, #27
 800983e:	d411      	bmi.n	8009864 <__swsetup_r+0x50>
 8009840:	2309      	movs	r3, #9
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	e03e      	b.n	80098ce <__swsetup_r+0xba>
 8009850:	4b25      	ldr	r3, [pc, #148]	; (80098e8 <__swsetup_r+0xd4>)
 8009852:	429c      	cmp	r4, r3
 8009854:	d101      	bne.n	800985a <__swsetup_r+0x46>
 8009856:	68ac      	ldr	r4, [r5, #8]
 8009858:	e7eb      	b.n	8009832 <__swsetup_r+0x1e>
 800985a:	4b24      	ldr	r3, [pc, #144]	; (80098ec <__swsetup_r+0xd8>)
 800985c:	429c      	cmp	r4, r3
 800985e:	bf08      	it	eq
 8009860:	68ec      	ldreq	r4, [r5, #12]
 8009862:	e7e6      	b.n	8009832 <__swsetup_r+0x1e>
 8009864:	0758      	lsls	r0, r3, #29
 8009866:	d512      	bpl.n	800988e <__swsetup_r+0x7a>
 8009868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800986a:	b141      	cbz	r1, 800987e <__swsetup_r+0x6a>
 800986c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009870:	4299      	cmp	r1, r3
 8009872:	d002      	beq.n	800987a <__swsetup_r+0x66>
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fb31 	bl	8008edc <_free_r>
 800987a:	2300      	movs	r3, #0
 800987c:	6363      	str	r3, [r4, #52]	; 0x34
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	2300      	movs	r3, #0
 8009888:	6063      	str	r3, [r4, #4]
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f043 0308 	orr.w	r3, r3, #8
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	b94b      	cbnz	r3, 80098ae <__swsetup_r+0x9a>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098a4:	d003      	beq.n	80098ae <__swsetup_r+0x9a>
 80098a6:	4621      	mov	r1, r4
 80098a8:	4630      	mov	r0, r6
 80098aa:	f000 fa09 	bl	8009cc0 <__smakebuf_r>
 80098ae:	89a0      	ldrh	r0, [r4, #12]
 80098b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b4:	f010 0301 	ands.w	r3, r0, #1
 80098b8:	d00a      	beq.n	80098d0 <__swsetup_r+0xbc>
 80098ba:	2300      	movs	r3, #0
 80098bc:	60a3      	str	r3, [r4, #8]
 80098be:	6963      	ldr	r3, [r4, #20]
 80098c0:	425b      	negs	r3, r3
 80098c2:	61a3      	str	r3, [r4, #24]
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	b943      	cbnz	r3, 80098da <__swsetup_r+0xc6>
 80098c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098cc:	d1ba      	bne.n	8009844 <__swsetup_r+0x30>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	0781      	lsls	r1, r0, #30
 80098d2:	bf58      	it	pl
 80098d4:	6963      	ldrpl	r3, [r4, #20]
 80098d6:	60a3      	str	r3, [r4, #8]
 80098d8:	e7f4      	b.n	80098c4 <__swsetup_r+0xb0>
 80098da:	2000      	movs	r0, #0
 80098dc:	e7f7      	b.n	80098ce <__swsetup_r+0xba>
 80098de:	bf00      	nop
 80098e0:	20000024 	.word	0x20000024
 80098e4:	0800a3cc 	.word	0x0800a3cc
 80098e8:	0800a3ec 	.word	0x0800a3ec
 80098ec:	0800a3ac 	.word	0x0800a3ac

080098f0 <abort>:
 80098f0:	b508      	push	{r3, lr}
 80098f2:	2006      	movs	r0, #6
 80098f4:	f000 fa54 	bl	8009da0 <raise>
 80098f8:	2001      	movs	r0, #1
 80098fa:	f7f8 fd31 	bl	8002360 <_exit>
	...

08009900 <__sflush_r>:
 8009900:	898a      	ldrh	r2, [r1, #12]
 8009902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009906:	4605      	mov	r5, r0
 8009908:	0710      	lsls	r0, r2, #28
 800990a:	460c      	mov	r4, r1
 800990c:	d458      	bmi.n	80099c0 <__sflush_r+0xc0>
 800990e:	684b      	ldr	r3, [r1, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dc05      	bgt.n	8009920 <__sflush_r+0x20>
 8009914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	dc02      	bgt.n	8009920 <__sflush_r+0x20>
 800991a:	2000      	movs	r0, #0
 800991c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009922:	2e00      	cmp	r6, #0
 8009924:	d0f9      	beq.n	800991a <__sflush_r+0x1a>
 8009926:	2300      	movs	r3, #0
 8009928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800992c:	682f      	ldr	r7, [r5, #0]
 800992e:	602b      	str	r3, [r5, #0]
 8009930:	d032      	beq.n	8009998 <__sflush_r+0x98>
 8009932:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	075a      	lsls	r2, r3, #29
 8009938:	d505      	bpl.n	8009946 <__sflush_r+0x46>
 800993a:	6863      	ldr	r3, [r4, #4]
 800993c:	1ac0      	subs	r0, r0, r3
 800993e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009940:	b10b      	cbz	r3, 8009946 <__sflush_r+0x46>
 8009942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009944:	1ac0      	subs	r0, r0, r3
 8009946:	2300      	movs	r3, #0
 8009948:	4602      	mov	r2, r0
 800994a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800994c:	6a21      	ldr	r1, [r4, #32]
 800994e:	4628      	mov	r0, r5
 8009950:	47b0      	blx	r6
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	d106      	bne.n	8009966 <__sflush_r+0x66>
 8009958:	6829      	ldr	r1, [r5, #0]
 800995a:	291d      	cmp	r1, #29
 800995c:	d82c      	bhi.n	80099b8 <__sflush_r+0xb8>
 800995e:	4a2a      	ldr	r2, [pc, #168]	; (8009a08 <__sflush_r+0x108>)
 8009960:	40ca      	lsrs	r2, r1
 8009962:	07d6      	lsls	r6, r2, #31
 8009964:	d528      	bpl.n	80099b8 <__sflush_r+0xb8>
 8009966:	2200      	movs	r2, #0
 8009968:	6062      	str	r2, [r4, #4]
 800996a:	04d9      	lsls	r1, r3, #19
 800996c:	6922      	ldr	r2, [r4, #16]
 800996e:	6022      	str	r2, [r4, #0]
 8009970:	d504      	bpl.n	800997c <__sflush_r+0x7c>
 8009972:	1c42      	adds	r2, r0, #1
 8009974:	d101      	bne.n	800997a <__sflush_r+0x7a>
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	b903      	cbnz	r3, 800997c <__sflush_r+0x7c>
 800997a:	6560      	str	r0, [r4, #84]	; 0x54
 800997c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800997e:	602f      	str	r7, [r5, #0]
 8009980:	2900      	cmp	r1, #0
 8009982:	d0ca      	beq.n	800991a <__sflush_r+0x1a>
 8009984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009988:	4299      	cmp	r1, r3
 800998a:	d002      	beq.n	8009992 <__sflush_r+0x92>
 800998c:	4628      	mov	r0, r5
 800998e:	f7ff faa5 	bl	8008edc <_free_r>
 8009992:	2000      	movs	r0, #0
 8009994:	6360      	str	r0, [r4, #52]	; 0x34
 8009996:	e7c1      	b.n	800991c <__sflush_r+0x1c>
 8009998:	6a21      	ldr	r1, [r4, #32]
 800999a:	2301      	movs	r3, #1
 800999c:	4628      	mov	r0, r5
 800999e:	47b0      	blx	r6
 80099a0:	1c41      	adds	r1, r0, #1
 80099a2:	d1c7      	bne.n	8009934 <__sflush_r+0x34>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0c4      	beq.n	8009934 <__sflush_r+0x34>
 80099aa:	2b1d      	cmp	r3, #29
 80099ac:	d001      	beq.n	80099b2 <__sflush_r+0xb2>
 80099ae:	2b16      	cmp	r3, #22
 80099b0:	d101      	bne.n	80099b6 <__sflush_r+0xb6>
 80099b2:	602f      	str	r7, [r5, #0]
 80099b4:	e7b1      	b.n	800991a <__sflush_r+0x1a>
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099bc:	81a3      	strh	r3, [r4, #12]
 80099be:	e7ad      	b.n	800991c <__sflush_r+0x1c>
 80099c0:	690f      	ldr	r7, [r1, #16]
 80099c2:	2f00      	cmp	r7, #0
 80099c4:	d0a9      	beq.n	800991a <__sflush_r+0x1a>
 80099c6:	0793      	lsls	r3, r2, #30
 80099c8:	680e      	ldr	r6, [r1, #0]
 80099ca:	bf08      	it	eq
 80099cc:	694b      	ldreq	r3, [r1, #20]
 80099ce:	600f      	str	r7, [r1, #0]
 80099d0:	bf18      	it	ne
 80099d2:	2300      	movne	r3, #0
 80099d4:	eba6 0807 	sub.w	r8, r6, r7
 80099d8:	608b      	str	r3, [r1, #8]
 80099da:	f1b8 0f00 	cmp.w	r8, #0
 80099de:	dd9c      	ble.n	800991a <__sflush_r+0x1a>
 80099e0:	6a21      	ldr	r1, [r4, #32]
 80099e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099e4:	4643      	mov	r3, r8
 80099e6:	463a      	mov	r2, r7
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b0      	blx	r6
 80099ec:	2800      	cmp	r0, #0
 80099ee:	dc06      	bgt.n	80099fe <__sflush_r+0xfe>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	e78e      	b.n	800991c <__sflush_r+0x1c>
 80099fe:	4407      	add	r7, r0
 8009a00:	eba8 0800 	sub.w	r8, r8, r0
 8009a04:	e7e9      	b.n	80099da <__sflush_r+0xda>
 8009a06:	bf00      	nop
 8009a08:	20400001 	.word	0x20400001

08009a0c <_fflush_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	690b      	ldr	r3, [r1, #16]
 8009a10:	4605      	mov	r5, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	b913      	cbnz	r3, 8009a1c <_fflush_r+0x10>
 8009a16:	2500      	movs	r5, #0
 8009a18:	4628      	mov	r0, r5
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	b118      	cbz	r0, 8009a26 <_fflush_r+0x1a>
 8009a1e:	6983      	ldr	r3, [r0, #24]
 8009a20:	b90b      	cbnz	r3, 8009a26 <_fflush_r+0x1a>
 8009a22:	f000 f887 	bl	8009b34 <__sinit>
 8009a26:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <_fflush_r+0x6c>)
 8009a28:	429c      	cmp	r4, r3
 8009a2a:	d11b      	bne.n	8009a64 <_fflush_r+0x58>
 8009a2c:	686c      	ldr	r4, [r5, #4]
 8009a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0ef      	beq.n	8009a16 <_fflush_r+0xa>
 8009a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a38:	07d0      	lsls	r0, r2, #31
 8009a3a:	d404      	bmi.n	8009a46 <_fflush_r+0x3a>
 8009a3c:	0599      	lsls	r1, r3, #22
 8009a3e:	d402      	bmi.n	8009a46 <_fflush_r+0x3a>
 8009a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a42:	f000 f915 	bl	8009c70 <__retarget_lock_acquire_recursive>
 8009a46:	4628      	mov	r0, r5
 8009a48:	4621      	mov	r1, r4
 8009a4a:	f7ff ff59 	bl	8009900 <__sflush_r>
 8009a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a50:	07da      	lsls	r2, r3, #31
 8009a52:	4605      	mov	r5, r0
 8009a54:	d4e0      	bmi.n	8009a18 <_fflush_r+0xc>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	059b      	lsls	r3, r3, #22
 8009a5a:	d4dd      	bmi.n	8009a18 <_fflush_r+0xc>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	f000 f908 	bl	8009c72 <__retarget_lock_release_recursive>
 8009a62:	e7d9      	b.n	8009a18 <_fflush_r+0xc>
 8009a64:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <_fflush_r+0x70>)
 8009a66:	429c      	cmp	r4, r3
 8009a68:	d101      	bne.n	8009a6e <_fflush_r+0x62>
 8009a6a:	68ac      	ldr	r4, [r5, #8]
 8009a6c:	e7df      	b.n	8009a2e <_fflush_r+0x22>
 8009a6e:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <_fflush_r+0x74>)
 8009a70:	429c      	cmp	r4, r3
 8009a72:	bf08      	it	eq
 8009a74:	68ec      	ldreq	r4, [r5, #12]
 8009a76:	e7da      	b.n	8009a2e <_fflush_r+0x22>
 8009a78:	0800a3cc 	.word	0x0800a3cc
 8009a7c:	0800a3ec 	.word	0x0800a3ec
 8009a80:	0800a3ac 	.word	0x0800a3ac

08009a84 <std>:
 8009a84:	2300      	movs	r3, #0
 8009a86:	b510      	push	{r4, lr}
 8009a88:	4604      	mov	r4, r0
 8009a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a92:	6083      	str	r3, [r0, #8]
 8009a94:	8181      	strh	r1, [r0, #12]
 8009a96:	6643      	str	r3, [r0, #100]	; 0x64
 8009a98:	81c2      	strh	r2, [r0, #14]
 8009a9a:	6183      	str	r3, [r0, #24]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	2208      	movs	r2, #8
 8009aa0:	305c      	adds	r0, #92	; 0x5c
 8009aa2:	f7fd fb5b 	bl	800715c <memset>
 8009aa6:	4b05      	ldr	r3, [pc, #20]	; (8009abc <std+0x38>)
 8009aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8009aaa:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <std+0x3c>)
 8009aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aae:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <std+0x40>)
 8009ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ab2:	4b05      	ldr	r3, [pc, #20]	; (8009ac8 <std+0x44>)
 8009ab4:	6224      	str	r4, [r4, #32]
 8009ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	bf00      	nop
 8009abc:	08009dd9 	.word	0x08009dd9
 8009ac0:	08009dfb 	.word	0x08009dfb
 8009ac4:	08009e33 	.word	0x08009e33
 8009ac8:	08009e57 	.word	0x08009e57

08009acc <_cleanup_r>:
 8009acc:	4901      	ldr	r1, [pc, #4]	; (8009ad4 <_cleanup_r+0x8>)
 8009ace:	f000 b8af 	b.w	8009c30 <_fwalk_reent>
 8009ad2:	bf00      	nop
 8009ad4:	08009a0d 	.word	0x08009a0d

08009ad8 <__sfmoreglue>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	2268      	movs	r2, #104	; 0x68
 8009adc:	1e4d      	subs	r5, r1, #1
 8009ade:	4355      	muls	r5, r2
 8009ae0:	460e      	mov	r6, r1
 8009ae2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ae6:	f7ff fa65 	bl	8008fb4 <_malloc_r>
 8009aea:	4604      	mov	r4, r0
 8009aec:	b140      	cbz	r0, 8009b00 <__sfmoreglue+0x28>
 8009aee:	2100      	movs	r1, #0
 8009af0:	e9c0 1600 	strd	r1, r6, [r0]
 8009af4:	300c      	adds	r0, #12
 8009af6:	60a0      	str	r0, [r4, #8]
 8009af8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009afc:	f7fd fb2e 	bl	800715c <memset>
 8009b00:	4620      	mov	r0, r4
 8009b02:	bd70      	pop	{r4, r5, r6, pc}

08009b04 <__sfp_lock_acquire>:
 8009b04:	4801      	ldr	r0, [pc, #4]	; (8009b0c <__sfp_lock_acquire+0x8>)
 8009b06:	f000 b8b3 	b.w	8009c70 <__retarget_lock_acquire_recursive>
 8009b0a:	bf00      	nop
 8009b0c:	20001a95 	.word	0x20001a95

08009b10 <__sfp_lock_release>:
 8009b10:	4801      	ldr	r0, [pc, #4]	; (8009b18 <__sfp_lock_release+0x8>)
 8009b12:	f000 b8ae 	b.w	8009c72 <__retarget_lock_release_recursive>
 8009b16:	bf00      	nop
 8009b18:	20001a95 	.word	0x20001a95

08009b1c <__sinit_lock_acquire>:
 8009b1c:	4801      	ldr	r0, [pc, #4]	; (8009b24 <__sinit_lock_acquire+0x8>)
 8009b1e:	f000 b8a7 	b.w	8009c70 <__retarget_lock_acquire_recursive>
 8009b22:	bf00      	nop
 8009b24:	20001a96 	.word	0x20001a96

08009b28 <__sinit_lock_release>:
 8009b28:	4801      	ldr	r0, [pc, #4]	; (8009b30 <__sinit_lock_release+0x8>)
 8009b2a:	f000 b8a2 	b.w	8009c72 <__retarget_lock_release_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20001a96 	.word	0x20001a96

08009b34 <__sinit>:
 8009b34:	b510      	push	{r4, lr}
 8009b36:	4604      	mov	r4, r0
 8009b38:	f7ff fff0 	bl	8009b1c <__sinit_lock_acquire>
 8009b3c:	69a3      	ldr	r3, [r4, #24]
 8009b3e:	b11b      	cbz	r3, 8009b48 <__sinit+0x14>
 8009b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b44:	f7ff bff0 	b.w	8009b28 <__sinit_lock_release>
 8009b48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b4c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b4e:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <__sinit+0x68>)
 8009b50:	4a13      	ldr	r2, [pc, #76]	; (8009ba0 <__sinit+0x6c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	bf04      	itt	eq
 8009b5a:	2301      	moveq	r3, #1
 8009b5c:	61a3      	streq	r3, [r4, #24]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 f820 	bl	8009ba4 <__sfp>
 8009b64:	6060      	str	r0, [r4, #4]
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 f81c 	bl	8009ba4 <__sfp>
 8009b6c:	60a0      	str	r0, [r4, #8]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f000 f818 	bl	8009ba4 <__sfp>
 8009b74:	2200      	movs	r2, #0
 8009b76:	60e0      	str	r0, [r4, #12]
 8009b78:	2104      	movs	r1, #4
 8009b7a:	6860      	ldr	r0, [r4, #4]
 8009b7c:	f7ff ff82 	bl	8009a84 <std>
 8009b80:	68a0      	ldr	r0, [r4, #8]
 8009b82:	2201      	movs	r2, #1
 8009b84:	2109      	movs	r1, #9
 8009b86:	f7ff ff7d 	bl	8009a84 <std>
 8009b8a:	68e0      	ldr	r0, [r4, #12]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	2112      	movs	r1, #18
 8009b90:	f7ff ff78 	bl	8009a84 <std>
 8009b94:	2301      	movs	r3, #1
 8009b96:	61a3      	str	r3, [r4, #24]
 8009b98:	e7d2      	b.n	8009b40 <__sinit+0xc>
 8009b9a:	bf00      	nop
 8009b9c:	0800a030 	.word	0x0800a030
 8009ba0:	08009acd 	.word	0x08009acd

08009ba4 <__sfp>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	4607      	mov	r7, r0
 8009ba8:	f7ff ffac 	bl	8009b04 <__sfp_lock_acquire>
 8009bac:	4b1e      	ldr	r3, [pc, #120]	; (8009c28 <__sfp+0x84>)
 8009bae:	681e      	ldr	r6, [r3, #0]
 8009bb0:	69b3      	ldr	r3, [r6, #24]
 8009bb2:	b913      	cbnz	r3, 8009bba <__sfp+0x16>
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff ffbd 	bl	8009b34 <__sinit>
 8009bba:	3648      	adds	r6, #72	; 0x48
 8009bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	d503      	bpl.n	8009bcc <__sfp+0x28>
 8009bc4:	6833      	ldr	r3, [r6, #0]
 8009bc6:	b30b      	cbz	r3, 8009c0c <__sfp+0x68>
 8009bc8:	6836      	ldr	r6, [r6, #0]
 8009bca:	e7f7      	b.n	8009bbc <__sfp+0x18>
 8009bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bd0:	b9d5      	cbnz	r5, 8009c08 <__sfp+0x64>
 8009bd2:	4b16      	ldr	r3, [pc, #88]	; (8009c2c <__sfp+0x88>)
 8009bd4:	60e3      	str	r3, [r4, #12]
 8009bd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bda:	6665      	str	r5, [r4, #100]	; 0x64
 8009bdc:	f000 f847 	bl	8009c6e <__retarget_lock_init_recursive>
 8009be0:	f7ff ff96 	bl	8009b10 <__sfp_lock_release>
 8009be4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009be8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bec:	6025      	str	r5, [r4, #0]
 8009bee:	61a5      	str	r5, [r4, #24]
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bf8:	f7fd fab0 	bl	800715c <memset>
 8009bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c04:	4620      	mov	r0, r4
 8009c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c08:	3468      	adds	r4, #104	; 0x68
 8009c0a:	e7d9      	b.n	8009bc0 <__sfp+0x1c>
 8009c0c:	2104      	movs	r1, #4
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f7ff ff62 	bl	8009ad8 <__sfmoreglue>
 8009c14:	4604      	mov	r4, r0
 8009c16:	6030      	str	r0, [r6, #0]
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d1d5      	bne.n	8009bc8 <__sfp+0x24>
 8009c1c:	f7ff ff78 	bl	8009b10 <__sfp_lock_release>
 8009c20:	230c      	movs	r3, #12
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	e7ee      	b.n	8009c04 <__sfp+0x60>
 8009c26:	bf00      	nop
 8009c28:	0800a030 	.word	0x0800a030
 8009c2c:	ffff0001 	.word	0xffff0001

08009c30 <_fwalk_reent>:
 8009c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	4606      	mov	r6, r0
 8009c36:	4688      	mov	r8, r1
 8009c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c3c:	2700      	movs	r7, #0
 8009c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c42:	f1b9 0901 	subs.w	r9, r9, #1
 8009c46:	d505      	bpl.n	8009c54 <_fwalk_reent+0x24>
 8009c48:	6824      	ldr	r4, [r4, #0]
 8009c4a:	2c00      	cmp	r4, #0
 8009c4c:	d1f7      	bne.n	8009c3e <_fwalk_reent+0xe>
 8009c4e:	4638      	mov	r0, r7
 8009c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c54:	89ab      	ldrh	r3, [r5, #12]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d907      	bls.n	8009c6a <_fwalk_reent+0x3a>
 8009c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	d003      	beq.n	8009c6a <_fwalk_reent+0x3a>
 8009c62:	4629      	mov	r1, r5
 8009c64:	4630      	mov	r0, r6
 8009c66:	47c0      	blx	r8
 8009c68:	4307      	orrs	r7, r0
 8009c6a:	3568      	adds	r5, #104	; 0x68
 8009c6c:	e7e9      	b.n	8009c42 <_fwalk_reent+0x12>

08009c6e <__retarget_lock_init_recursive>:
 8009c6e:	4770      	bx	lr

08009c70 <__retarget_lock_acquire_recursive>:
 8009c70:	4770      	bx	lr

08009c72 <__retarget_lock_release_recursive>:
 8009c72:	4770      	bx	lr

08009c74 <__swhatbuf_r>:
 8009c74:	b570      	push	{r4, r5, r6, lr}
 8009c76:	460e      	mov	r6, r1
 8009c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	b096      	sub	sp, #88	; 0x58
 8009c80:	4614      	mov	r4, r2
 8009c82:	461d      	mov	r5, r3
 8009c84:	da08      	bge.n	8009c98 <__swhatbuf_r+0x24>
 8009c86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	061a      	lsls	r2, r3, #24
 8009c90:	d410      	bmi.n	8009cb4 <__swhatbuf_r+0x40>
 8009c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c96:	e00e      	b.n	8009cb6 <__swhatbuf_r+0x42>
 8009c98:	466a      	mov	r2, sp
 8009c9a:	f000 f903 	bl	8009ea4 <_fstat_r>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	dbf1      	blt.n	8009c86 <__swhatbuf_r+0x12>
 8009ca2:	9a01      	ldr	r2, [sp, #4]
 8009ca4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ca8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cac:	425a      	negs	r2, r3
 8009cae:	415a      	adcs	r2, r3
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	e7ee      	b.n	8009c92 <__swhatbuf_r+0x1e>
 8009cb4:	2340      	movs	r3, #64	; 0x40
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	b016      	add	sp, #88	; 0x58
 8009cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009cc0 <__smakebuf_r>:
 8009cc0:	898b      	ldrh	r3, [r1, #12]
 8009cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cc4:	079d      	lsls	r5, r3, #30
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	d507      	bpl.n	8009cdc <__smakebuf_r+0x1c>
 8009ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	6123      	str	r3, [r4, #16]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	6163      	str	r3, [r4, #20]
 8009cd8:	b002      	add	sp, #8
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	ab01      	add	r3, sp, #4
 8009cde:	466a      	mov	r2, sp
 8009ce0:	f7ff ffc8 	bl	8009c74 <__swhatbuf_r>
 8009ce4:	9900      	ldr	r1, [sp, #0]
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7ff f963 	bl	8008fb4 <_malloc_r>
 8009cee:	b948      	cbnz	r0, 8009d04 <__smakebuf_r+0x44>
 8009cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf4:	059a      	lsls	r2, r3, #22
 8009cf6:	d4ef      	bmi.n	8009cd8 <__smakebuf_r+0x18>
 8009cf8:	f023 0303 	bic.w	r3, r3, #3
 8009cfc:	f043 0302 	orr.w	r3, r3, #2
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	e7e3      	b.n	8009ccc <__smakebuf_r+0xc>
 8009d04:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <__smakebuf_r+0x7c>)
 8009d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	6020      	str	r0, [r4, #0]
 8009d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	9b00      	ldr	r3, [sp, #0]
 8009d14:	6163      	str	r3, [r4, #20]
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	6120      	str	r0, [r4, #16]
 8009d1a:	b15b      	cbz	r3, 8009d34 <__smakebuf_r+0x74>
 8009d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 f8d1 	bl	8009ec8 <_isatty_r>
 8009d26:	b128      	cbz	r0, 8009d34 <__smakebuf_r+0x74>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f023 0303 	bic.w	r3, r3, #3
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	89a0      	ldrh	r0, [r4, #12]
 8009d36:	4305      	orrs	r5, r0
 8009d38:	81a5      	strh	r5, [r4, #12]
 8009d3a:	e7cd      	b.n	8009cd8 <__smakebuf_r+0x18>
 8009d3c:	08009acd 	.word	0x08009acd

08009d40 <_malloc_usable_size_r>:
 8009d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d44:	1f18      	subs	r0, r3, #4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfbc      	itt	lt
 8009d4a:	580b      	ldrlt	r3, [r1, r0]
 8009d4c:	18c0      	addlt	r0, r0, r3
 8009d4e:	4770      	bx	lr

08009d50 <_raise_r>:
 8009d50:	291f      	cmp	r1, #31
 8009d52:	b538      	push	{r3, r4, r5, lr}
 8009d54:	4604      	mov	r4, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	d904      	bls.n	8009d64 <_raise_r+0x14>
 8009d5a:	2316      	movs	r3, #22
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d66:	b112      	cbz	r2, 8009d6e <_raise_r+0x1e>
 8009d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d6c:	b94b      	cbnz	r3, 8009d82 <_raise_r+0x32>
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 f830 	bl	8009dd4 <_getpid_r>
 8009d74:	462a      	mov	r2, r5
 8009d76:	4601      	mov	r1, r0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d7e:	f000 b817 	b.w	8009db0 <_kill_r>
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d00a      	beq.n	8009d9c <_raise_r+0x4c>
 8009d86:	1c59      	adds	r1, r3, #1
 8009d88:	d103      	bne.n	8009d92 <_raise_r+0x42>
 8009d8a:	2316      	movs	r3, #22
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	2001      	movs	r0, #1
 8009d90:	e7e7      	b.n	8009d62 <_raise_r+0x12>
 8009d92:	2400      	movs	r4, #0
 8009d94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d98:	4628      	mov	r0, r5
 8009d9a:	4798      	blx	r3
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7e0      	b.n	8009d62 <_raise_r+0x12>

08009da0 <raise>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <raise+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f7ff bfd3 	b.w	8009d50 <_raise_r>
 8009daa:	bf00      	nop
 8009dac:	20000024 	.word	0x20000024

08009db0 <_kill_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d07      	ldr	r5, [pc, #28]	; (8009dd0 <_kill_r+0x20>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	4611      	mov	r1, r2
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	f7f8 fabf 	bl	8002340 <_kill>
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d102      	bne.n	8009dcc <_kill_r+0x1c>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	b103      	cbz	r3, 8009dcc <_kill_r+0x1c>
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	20001a90 	.word	0x20001a90

08009dd4 <_getpid_r>:
 8009dd4:	f7f8 baac 	b.w	8002330 <_getpid>

08009dd8 <__sread>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	460c      	mov	r4, r1
 8009ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de0:	f000 f894 	bl	8009f0c <_read_r>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	bfab      	itete	ge
 8009de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dea:	89a3      	ldrhlt	r3, [r4, #12]
 8009dec:	181b      	addge	r3, r3, r0
 8009dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009df2:	bfac      	ite	ge
 8009df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009df6:	81a3      	strhlt	r3, [r4, #12]
 8009df8:	bd10      	pop	{r4, pc}

08009dfa <__swrite>:
 8009dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfe:	461f      	mov	r7, r3
 8009e00:	898b      	ldrh	r3, [r1, #12]
 8009e02:	05db      	lsls	r3, r3, #23
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4616      	mov	r6, r2
 8009e0a:	d505      	bpl.n	8009e18 <__swrite+0x1e>
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	2302      	movs	r3, #2
 8009e12:	2200      	movs	r2, #0
 8009e14:	f000 f868 	bl	8009ee8 <_lseek_r>
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	4632      	mov	r2, r6
 8009e26:	463b      	mov	r3, r7
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	f000 b817 	b.w	8009e60 <_write_r>

08009e32 <__sseek>:
 8009e32:	b510      	push	{r4, lr}
 8009e34:	460c      	mov	r4, r1
 8009e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3a:	f000 f855 	bl	8009ee8 <_lseek_r>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	bf15      	itete	ne
 8009e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e4e:	81a3      	strheq	r3, [r4, #12]
 8009e50:	bf18      	it	ne
 8009e52:	81a3      	strhne	r3, [r4, #12]
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <__sclose>:
 8009e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5a:	f000 b813 	b.w	8009e84 <_close_r>
	...

08009e60 <_write_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_write_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f8 fa9d 	bl	80023ae <_write>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_write_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_write_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20001a90 	.word	0x20001a90

08009e84 <_close_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d06      	ldr	r5, [pc, #24]	; (8009ea0 <_close_r+0x1c>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	f7f8 faa9 	bl	80023e6 <_close>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_close_r+0x1a>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_close_r+0x1a>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	20001a90 	.word	0x20001a90

08009ea4 <_fstat_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d07      	ldr	r5, [pc, #28]	; (8009ec4 <_fstat_r+0x20>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	602b      	str	r3, [r5, #0]
 8009eb2:	f7f8 faa4 	bl	80023fe <_fstat>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d102      	bne.n	8009ec0 <_fstat_r+0x1c>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b103      	cbz	r3, 8009ec0 <_fstat_r+0x1c>
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20001a90 	.word	0x20001a90

08009ec8 <_isatty_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d06      	ldr	r5, [pc, #24]	; (8009ee4 <_isatty_r+0x1c>)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7f8 faa3 	bl	800241e <_isatty>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_isatty_r+0x1a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_isatty_r+0x1a>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	20001a90 	.word	0x20001a90

08009ee8 <_lseek_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_lseek_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f8 fa9c 	bl	8002434 <_lseek>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_lseek_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_lseek_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20001a90 	.word	0x20001a90

08009f0c <_read_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d07      	ldr	r5, [pc, #28]	; (8009f2c <_read_r+0x20>)
 8009f10:	4604      	mov	r4, r0
 8009f12:	4608      	mov	r0, r1
 8009f14:	4611      	mov	r1, r2
 8009f16:	2200      	movs	r2, #0
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f7f8 fa2a 	bl	8002374 <_read>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_read_r+0x1e>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_read_r+0x1e>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	20001a90 	.word	0x20001a90

08009f30 <_init>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	bf00      	nop
 8009f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f36:	bc08      	pop	{r3}
 8009f38:	469e      	mov	lr, r3
 8009f3a:	4770      	bx	lr

08009f3c <_fini>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	bf00      	nop
 8009f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f42:	bc08      	pop	{r3}
 8009f44:	469e      	mov	lr, r3
 8009f46:	4770      	bx	lr
