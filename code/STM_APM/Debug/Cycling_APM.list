
Cycling_APM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004184  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043fc  080043fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004404  08004404  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800440c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  0800447c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800447c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da8c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbd  00000000  00000000  0002db2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00030280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203f5  00000000  00000000  00030d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e62e  00000000  00000000  0005114d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c219a  00000000  00000000  0005f77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003388  00000000  00000000  00121968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042fc 	.word	0x080042fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080042fc 	.word	0x080042fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <send_uart>:
	particles_25um,      ///< 2.5um Particle Count
	particles_50um,      ///< 5.0um Particle Count
	particles_100um;     ///< 10.0um Particle Count
} pm_data;

void send_uart(char *string){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff fe1f 	bl	80001d0 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000); // Transmit in blocking mode
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	b29a      	uxth	r2, r3
 800059a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <send_uart+0x2c>)
 80005a2:	f002 fd9b 	bl	80030dc <HAL_UART_Transmit>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000e0 	.word	0x200000e0

080005b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0ac      	sub	sp, #176	; 0xb0
 80005b8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ba:	f000 fb56 	bl	8000c6a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005be:	f000 f8c1 	bl	8000744 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c2:	f000 f981 	bl	80008c8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005c6:	f000 f94f 	bl	8000868 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80005ca:	f000 f90d 	bl	80007e8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_StatusTypeDef ret;
    char str[80];

	uint8_t buf[1] = {PM_SC1};
 80005ce:	2300      	movs	r3, #0
 80005d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t pm_buffer[32] = {0};
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]
 80005ea:	619a      	str	r2, [r3, #24]

	send_uart("Testing UART in blocking mode\n\r");
 80005ec:	484f      	ldr	r0, [pc, #316]	; (800072c <main+0x178>)
 80005ee:	f7ff ffc9 	bl	8000584 <send_uart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		ret = HAL_I2C_Master_Transmit(&hi2c1, PM_ADDR, buf, 1, HAL_MAX_DELAY);
 80005f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	2124      	movs	r1, #36	; 0x24
 8000600:	484b      	ldr	r0, [pc, #300]	; (8000730 <main+0x17c>)
 8000602:	f000 fe9f 	bl	8001344 <HAL_I2C_Master_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		if ( ret != HAL_OK ) {
 800060c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <main+0x68>
			send_uart("Error Tx\r\n");
 8000614:	4847      	ldr	r0, [pc, #284]	; (8000734 <main+0x180>)
 8000616:	f7ff ffb5 	bl	8000584 <send_uart>
 800061a:	e7ea      	b.n	80005f2 <main+0x3e>
		} else {
			ret = HAL_I2C_Master_Receive(&hi2c1, PM_ADDR, pm_buffer, 32, HAL_MAX_DELAY);
 800061c:	f107 0218 	add.w	r2, r7, #24
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2320      	movs	r3, #32
 8000628:	2124      	movs	r1, #36	; 0x24
 800062a:	4841      	ldr	r0, [pc, #260]	; (8000730 <main+0x17c>)
 800062c:	f000 ff7e 	bl	800152c <HAL_I2C_Master_Receive>
 8000630:	4603      	mov	r3, r0
 8000632:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
			if ( ret != HAL_OK ) {
 8000636:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <main+0x92>
				send_uart("Error Rx\r\n");
 800063e:	483e      	ldr	r0, [pc, #248]	; (8000738 <main+0x184>)
 8000640:	f7ff ffa0 	bl	8000584 <send_uart>
 8000644:	e7d5      	b.n	80005f2 <main+0x3e>
			} else {
			    if (pm_buffer[0] != 0x42)
 8000646:	7e3b      	ldrb	r3, [r7, #24]
 8000648:	2b42      	cmp	r3, #66	; 0x42
 800064a:	d003      	beq.n	8000654 <main+0xa0>
			    {
			    	send_uart("Error Start Byte != 0x42 \r\n");;
 800064c:	483b      	ldr	r0, [pc, #236]	; (800073c <main+0x188>)
 800064e:	f7ff ff99 	bl	8000584 <send_uart>
 8000652:	e05c      	b.n	800070e <main+0x15a>
			    } else {
			        uint16_t buffer_u16[12];
			        for (uint8_t i = 0; i < 12; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800065a:	e030      	b.n	80006be <main+0x10a>
			        {
			            buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
 800065c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000660:	3301      	adds	r3, #1
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	3301      	adds	r3, #1
 8000666:	33a8      	adds	r3, #168	; 0xa8
 8000668:	443b      	add	r3, r7
 800066a:	f813 2c90 	ldrb.w	r2, [r3, #-144]
 800066e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000672:	b292      	uxth	r2, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	33a8      	adds	r3, #168	; 0xa8
 8000678:	443b      	add	r3, r7
 800067a:	f823 2ca8 	strh.w	r2, [r3, #-168]
			            buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
 800067e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	33a8      	adds	r3, #168	; 0xa8
 8000686:	443b      	add	r3, r7
 8000688:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 800068c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000690:	3301      	adds	r3, #1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	33a8      	adds	r3, #168	; 0xa8
 8000696:	443b      	add	r3, r7
 8000698:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 800069c:	b29b      	uxth	r3, r3
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80006a6:	440a      	add	r2, r1
 80006a8:	b292      	uxth	r2, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	33a8      	adds	r3, #168	; 0xa8
 80006ae:	443b      	add	r3, r7
 80006b0:	f823 2ca8 	strh.w	r2, [r3, #-168]
			        for (uint8_t i = 0; i < 12; i++)
 80006b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80006b8:	3301      	adds	r3, #1
 80006ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80006be:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80006c2:	2b0b      	cmp	r3, #11
 80006c4:	d9ca      	bls.n	800065c <main+0xa8>
			        }
			        /* Store readings in structure */
			         data.pm10_standard = buffer_u16[0];
 80006c6:	883b      	ldrh	r3, [r7, #0]
 80006c8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			         data.pm25_standard = buffer_u16[1];
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			         data.pm100_standard = buffer_u16[2];
 80006d2:	88bb      	ldrh	r3, [r7, #4]
 80006d4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			         data.pm10_env = buffer_u16[3];
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			         data.pm25_env = buffer_u16[4];
 80006de:	893b      	ldrh	r3, [r7, #8]
 80006e0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
			         data.pm100_env = buffer_u16[5];
 80006e4:	897b      	ldrh	r3, [r7, #10]
 80006e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			         data.particles_03um = buffer_u16[6];
 80006ea:	89bb      	ldrh	r3, [r7, #12]
 80006ec:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			         data.particles_05um =  buffer_u16[7];
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			         data.particles_10um =  buffer_u16[8];
 80006f6:	8a3b      	ldrh	r3, [r7, #16]
 80006f8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			         data.particles_25um =  buffer_u16[9];
 80006fc:	8a7b      	ldrh	r3, [r7, #18]
 80006fe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			         data.particles_50um =  buffer_u16[10];
 8000702:	8abb      	ldrh	r3, [r7, #20]
 8000704:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
			         data.particles_100um =  buffer_u16[11];
 8000708:	8afb      	ldrh	r3, [r7, #22]
 800070a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			    }

			       sprintf(str, "Value of PM2.5 = %d\r\n", data.pm25_env);
 800070e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000712:	461a      	mov	r2, r3
 8000714:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000718:	4909      	ldr	r1, [pc, #36]	; (8000740 <main+0x18c>)
 800071a:	4618      	mov	r0, r3
 800071c:	f003 f980 	bl	8003a20 <siprintf>
			       send_uart(str);
 8000720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff2d 	bl	8000584 <send_uart>
		ret = HAL_I2C_Master_Transmit(&hi2c1, PM_ADDR, buf, 1, HAL_MAX_DELAY);
 800072a:	e762      	b.n	80005f2 <main+0x3e>
 800072c:	08004314 	.word	0x08004314
 8000730:	2000008c 	.word	0x2000008c
 8000734:	08004334 	.word	0x08004334
 8000738:	08004340 	.word	0x08004340
 800073c:	0800434c 	.word	0x0800434c
 8000740:	08004368 	.word	0x08004368

08000744 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 8000744:	b580      	push	{r7, lr}
 8000746:	b096      	sub	sp, #88	; 0x58
 8000748:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2244      	movs	r2, #68	; 0x44
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 f95c 	bl	8003a10 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000766:	f44f 7000 	mov.w	r0, #512	; 0x200
 800076a:	f001 faf3 	bl	8001d54 <HAL_PWREx_ControlVoltageScaling>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x34>
		{
			Error_Handler();
 8000774:	f000 f8f2 	bl	800095c <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000780:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000782:	2310      	movs	r3, #16
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLN = 10;
 8000792:	230a      	movs	r3, #10
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000796:	2307      	movs	r3, #7
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	653b      	str	r3, [r7, #80]	; 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	657b      	str	r3, [r7, #84]	; 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fb2a 	bl	8001e00 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x72>
		{
			Error_Handler();
 80007b2:	f000 f8d3 	bl	800095c <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	603b      	str	r3, [r7, #0]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2104      	movs	r1, #4
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 ff2a 	bl	8002628 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9a>
		{
			Error_Handler();
 80007da:	f000 f8bf 	bl	800095c <Error_Handler>
		}
	}
 80007de:	bf00      	nop
 80007e0:	3758      	adds	r7, #88	; 0x58
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_I2C1_Init>:
	 * @brief I2C1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C1_Init(void)
	{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
		/* USER CODE END I2C1_Init 0 */

		/* USER CODE BEGIN I2C1_Init 1 */

		/* USER CODE END I2C1_Init 1 */
		hi2c1.Instance = I2C1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_I2C1_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_I2C1_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
		hi2c1.Init.Timing = 0x10909CEC;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_I2C1_Init+0x74>)
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_I2C1_Init+0x7c>)
 80007f6:	605a      	str	r2, [r3, #4]
		hi2c1.Init.OwnAddress1 = 0;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_I2C1_Init+0x74>)
 8000800:	2201      	movs	r2, #1
 8000802:	60da      	str	r2, [r3, #12]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
		hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <MX_I2C1_Init+0x74>)
 8000824:	f000 fcfe 	bl	8001224 <HAL_I2C_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x4a>
		{
			Error_Handler();
 800082e:	f000 f895 	bl	800095c <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_I2C1_Init+0x74>)
 8000836:	f001 f9e7 	bl	8001c08 <HAL_I2CEx_ConfigAnalogFilter>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x5c>
		{
			Error_Handler();
 8000840:	f000 f88c 	bl	800095c <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_I2C1_Init+0x74>)
 8000848:	f001 fa29 	bl	8001c9e <HAL_I2CEx_ConfigDigitalFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C1_Init+0x6e>
		{
			Error_Handler();
 8000852:	f000 f883 	bl	800095c <Error_Handler>
		}
		/* USER CODE BEGIN I2C1_Init 2 */

		/* USER CODE END I2C1_Init 2 */

	}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000008c 	.word	0x2000008c
 8000860:	40005400 	.word	0x40005400
 8000864:	10909cec 	.word	0x10909cec

08000868 <MX_USART2_UART_Init>:
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void)
	{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART2_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
		huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 80008ac:	f002 fbc8 	bl	8003040 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x52>
		{
			Error_Handler();
 80008b6:	f000 f851 	bl	800095c <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000e0 	.word	0x200000e0
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_GPIO_Init>:
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void)
	{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_GPIO_Init+0x8c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_GPIO_Init+0x8c>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_GPIO_Init+0x8c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_GPIO_Init+0x8c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <MX_GPIO_Init+0x8c>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_GPIO_Init+0x8c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_GPIO_Init+0x8c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <MX_GPIO_Init+0x8c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_GPIO_Init+0x8c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2108      	movs	r1, #8
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x90>)
 800092c:	f000 fc62 	bl	80011f4 <HAL_GPIO_WritePin>

		/*Configure GPIO pin : LD3_Pin */
		GPIO_InitStruct.Pin = LD3_Pin;
 8000930:	2308      	movs	r3, #8
 8000932:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_GPIO_Init+0x90>)
 8000948:	f000 faea 	bl	8000f20 <HAL_GPIO_Init>

	}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400

0800095c <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	; 0x58
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09e      	sub	sp, #120	; 0x78
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	2254      	movs	r2, #84	; 0x54
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 f81d 	bl	8003a10 <memset>
  if(hi2c->Instance==I2C1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <HAL_I2C_MspInit+0xa4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d135      	bne.n	8000a4c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 f83f 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009f8:	f7ff ffb0 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a14:	23c0      	movs	r3, #192	; 0xc0
 8000a16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <HAL_I2C_MspInit+0xac>)
 8000a30:	f000 fa76 	bl	8000f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_I2C_MspInit+0xa8>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3778      	adds	r7, #120	; 0x78
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000400 	.word	0x48000400

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09e      	sub	sp, #120	; 0x78
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	2254      	movs	r2, #84	; 0x54
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 ffc5 	bl	8003a10 <memset>
  if(huart->Instance==USART2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <HAL_UART_MspInit+0xcc>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d148      	bne.n	8000b22 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 ffe7 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa8:	f7ff ff58 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000adc:	2304      	movs	r3, #4
 8000ade:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aec:	2307      	movs	r3, #7
 8000aee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fa11 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b10:	2303      	movs	r3, #3
 8000b12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 f9ff 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3778      	adds	r7, #120	; 0x78
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f8c8 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f002 ff00 	bl	80039bc <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20010000 	.word	0x20010000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	20000164 	.word	0x20000164
 8000bf0:	20000180 	.word	0x20000180

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f002 febf 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fcb3 	bl	80005b4 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c5c:	0800440c 	.word	0x0800440c
  ldr r2, =_sbss
 8000c60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c64:	2000017c 	.word	0x2000017c

08000c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_IRQHandler>

08000c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f91f 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f80e 	bl	8000c9c <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e001      	b.n	8000c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c8c:	f7ff fe6c 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_InitTick+0x6c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d023      	beq.n	8000cf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_InitTick+0x70>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_InitTick+0x6c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f91d 	bl	8000f06 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10f      	bne.n	8000cf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d809      	bhi.n	8000cec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f8f5 	bl	8000ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_InitTick+0x74>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e007      	b.n	8000cfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e004      	b.n	8000cfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e001      	b.n	8000cfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000168 	.word	0x20000168

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000168 	.word	0x20000168

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff47 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff5c 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffb0 	bl	8000e74 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e148      	b.n	80011c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 813a 	beq.w	80011bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d005      	beq.n	8000f60 <HAL_GPIO_Init+0x40>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d130      	bne.n	8000fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f96:	2201      	movs	r2, #1
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 0201 	and.w	r2, r3, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d017      	beq.n	8000ffe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d123      	bne.n	8001052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	6939      	ldr	r1, [r7, #16]
 800104e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0203 	and.w	r2, r3, #3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8094 	beq.w	80011bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <HAL_GPIO_Init+0x2c0>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001098:	4a51      	ldr	r2, [pc, #324]	; (80011e0 <HAL_GPIO_Init+0x2c0>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6613      	str	r3, [r2, #96]	; 0x60
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x2c0>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x2c4>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d6:	d00d      	beq.n	80010f4 <HAL_GPIO_Init+0x1d4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a43      	ldr	r2, [pc, #268]	; (80011e8 <HAL_GPIO_Init+0x2c8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0x1d0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a42      	ldr	r2, [pc, #264]	; (80011ec <HAL_GPIO_Init+0x2cc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_GPIO_Init+0x1cc>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e004      	b.n	80010f6 <HAL_GPIO_Init+0x1d6>
 80010ec:	2307      	movs	r3, #7
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x1d6>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x1d6>
 80010f4:	2300      	movs	r3, #0
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4093      	lsls	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001106:	4937      	ldr	r1, [pc, #220]	; (80011e4 <HAL_GPIO_Init+0x2c4>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001138:	4a2d      	ldr	r2, [pc, #180]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001162:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f47f aeaf 	bne.w	8000f30 <HAL_GPIO_Init+0x10>
  }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	48000800 	.word	0x48000800
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001210:	e002      	b.n	8001218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e081      	b.n	800133a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fbb0 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2224      	movs	r2, #36	; 0x24
 8001254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e006      	b.n	80012ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d104      	bne.n	80012be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69d9      	ldr	r1, [r3, #28]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2220      	movs	r2, #32
 8001326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	460b      	mov	r3, r1
 8001352:	817b      	strh	r3, [r7, #10]
 8001354:	4613      	mov	r3, r2
 8001356:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b20      	cmp	r3, #32
 8001362:	f040 80da 	bne.w	800151a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_I2C_Master_Transmit+0x30>
 8001370:	2302      	movs	r3, #2
 8001372:	e0d3      	b.n	800151c <HAL_I2C_Master_Transmit+0x1d8>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800137c:	f7ff fcde 	bl	8000d3c <HAL_GetTick>
 8001380:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2319      	movs	r3, #25
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f9e6 	bl	8001760 <I2C_WaitOnFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0be      	b.n	800151c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2221      	movs	r2, #33	; 0x21
 80013a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2210      	movs	r2, #16
 80013aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	893a      	ldrh	r2, [r7, #8]
 80013be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2bff      	cmp	r3, #255	; 0xff
 80013ce:	d90e      	bls.n	80013ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	8979      	ldrh	r1, [r7, #10]
 80013de:	4b51      	ldr	r3, [pc, #324]	; (8001524 <HAL_I2C_Master_Transmit+0x1e0>)
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fbdc 	bl	8001ba4 <I2C_TransferConfig>
 80013ec:	e06c      	b.n	80014c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	8979      	ldrh	r1, [r7, #10]
 8001400:	4b48      	ldr	r3, [pc, #288]	; (8001524 <HAL_I2C_Master_Transmit+0x1e0>)
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 fbcb 	bl	8001ba4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800140e:	e05b      	b.n	80014c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	6a39      	ldr	r1, [r7, #32]
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f9e3 	bl	80017e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e07b      	b.n	800151c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d034      	beq.n	80014c8 <HAL_I2C_Master_Transmit+0x184>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001462:	2b00      	cmp	r3, #0
 8001464:	d130      	bne.n	80014c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f975 	bl	8001760 <I2C_WaitOnFlagUntilTimeout>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e04d      	b.n	800151c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001484:	b29b      	uxth	r3, r3
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	d90e      	bls.n	80014a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	22ff      	movs	r2, #255	; 0xff
 800148e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001494:	b2da      	uxtb	r2, r3
 8001496:	8979      	ldrh	r1, [r7, #10]
 8001498:	2300      	movs	r3, #0
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 fb7f 	bl	8001ba4 <I2C_TransferConfig>
 80014a6:	e00f      	b.n	80014c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	8979      	ldrh	r1, [r7, #10]
 80014ba:	2300      	movs	r3, #0
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fb6e 	bl	8001ba4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d19e      	bne.n	8001410 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	6a39      	ldr	r1, [r7, #32]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f9c2 	bl	8001860 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e01a      	b.n	800151c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2220      	movs	r2, #32
 80014ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_I2C_Master_Transmit+0x1e4>)
 80014fa:	400b      	ands	r3, r1
 80014fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800151a:	2302      	movs	r3, #2
  }
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	80002000 	.word	0x80002000
 8001528:	fe00e800 	.word	0xfe00e800

0800152c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	461a      	mov	r2, r3
 8001538:	460b      	mov	r3, r1
 800153a:	817b      	strh	r3, [r7, #10]
 800153c:	4613      	mov	r3, r2
 800153e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b20      	cmp	r3, #32
 800154a:	f040 80db 	bne.w	8001704 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_I2C_Master_Receive+0x30>
 8001558:	2302      	movs	r3, #2
 800155a:	e0d4      	b.n	8001706 <HAL_I2C_Master_Receive+0x1da>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001564:	f7ff fbea 	bl	8000d3c <HAL_GetTick>
 8001568:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2319      	movs	r3, #25
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f8f2 	bl	8001760 <I2C_WaitOnFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0bf      	b.n	8001706 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2222      	movs	r2, #34	; 0x22
 800158a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2210      	movs	r2, #16
 8001592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	893a      	ldrh	r2, [r7, #8]
 80015a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2bff      	cmp	r3, #255	; 0xff
 80015b6:	d90e      	bls.n	80015d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	8979      	ldrh	r1, [r7, #10]
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_I2C_Master_Receive+0x1e4>)
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fae8 	bl	8001ba4 <I2C_TransferConfig>
 80015d4:	e06d      	b.n	80016b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015da:	b29a      	uxth	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	8979      	ldrh	r1, [r7, #10]
 80015e8:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_I2C_Master_Receive+0x1e4>)
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 fad7 	bl	8001ba4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80015f6:	e05c      	b.n	80016b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	6a39      	ldr	r1, [r7, #32]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f96b 	bl	80018d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e07c      	b.n	8001706 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	3b01      	subs	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d034      	beq.n	80016b2 <HAL_I2C_Master_Receive+0x186>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164c:	2b00      	cmp	r3, #0
 800164e:	d130      	bne.n	80016b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	2200      	movs	r2, #0
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f880 	bl	8001760 <I2C_WaitOnFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e04d      	b.n	8001706 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	2bff      	cmp	r3, #255	; 0xff
 8001672:	d90e      	bls.n	8001692 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	22ff      	movs	r2, #255	; 0xff
 8001678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167e:	b2da      	uxtb	r2, r3
 8001680:	8979      	ldrh	r1, [r7, #10]
 8001682:	2300      	movs	r3, #0
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fa8a 	bl	8001ba4 <I2C_TransferConfig>
 8001690:	e00f      	b.n	80016b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	8979      	ldrh	r1, [r7, #10]
 80016a4:	2300      	movs	r3, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fa79 	bl	8001ba4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d19d      	bne.n	80015f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	6a39      	ldr	r1, [r7, #32]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f8cd 	bl	8001860 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e01a      	b.n	8001706 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2220      	movs	r2, #32
 80016d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_I2C_Master_Receive+0x1e8>)
 80016e4:	400b      	ands	r3, r1
 80016e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2220      	movs	r2, #32
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	e000      	b.n	8001706 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001704:	2302      	movs	r3, #2
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	80002400 	.word	0x80002400
 8001714:	fe00e800 	.word	0xfe00e800

08001718 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	d103      	bne.n	8001736 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d007      	beq.n	8001754 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	619a      	str	r2, [r3, #24]
  }
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001770:	e022      	b.n	80017b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d01e      	beq.n	80017b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800177a:	f7ff fadf 	bl	8000d3c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d302      	bcc.n	8001790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d113      	bne.n	80017b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	f043 0220 	orr.w	r2, r3, #32
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2220      	movs	r2, #32
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00f      	b.n	80017d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4013      	ands	r3, r2
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d0cd      	beq.n	8001772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017ec:	e02c      	b.n	8001848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f8ea 	bl	80019cc <I2C_IsErrorOccurred>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e02a      	b.n	8001858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d01e      	beq.n	8001848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180a:	f7ff fa97 	bl	8000d3c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	d302      	bcc.n	8001820 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d113      	bne.n	8001848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f043 0220 	orr.w	r2, r3, #32
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e007      	b.n	8001858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d1cb      	bne.n	80017ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186c:	e028      	b.n	80018c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f8aa 	bl	80019cc <I2C_IsErrorOccurred>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e026      	b.n	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001882:	f7ff fa5b 	bl	8000d3c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	429a      	cmp	r2, r3
 8001890:	d302      	bcc.n	8001898 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d113      	bne.n	80018c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e007      	b.n	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d1cf      	bne.n	800186e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018e4:	e064      	b.n	80019b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f86e 	bl	80019cc <I2C_IsErrorOccurred>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e062      	b.n	80019c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b20      	cmp	r3, #32
 8001906:	d138      	bne.n	800197a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b04      	cmp	r3, #4
 8001914:	d105      	bne.n	8001922 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e04e      	b.n	80019c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b10      	cmp	r3, #16
 800192e:	d107      	bne.n	8001940 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2210      	movs	r2, #16
 8001936:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2204      	movs	r2, #4
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
 800193e:	e002      	b.n	8001946 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2220      	movs	r2, #32
 800194c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800195a:	400b      	ands	r3, r1
 800195c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e022      	b.n	80019c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197a:	f7ff f9df 	bl	8000d3c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	429a      	cmp	r2, r3
 8001988:	d302      	bcc.n	8001990 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10f      	bne.n	80019b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e007      	b.n	80019c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d193      	bne.n	80018e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	fe00e800 	.word	0xfe00e800

080019cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d075      	beq.n	8001ae4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2210      	movs	r2, #16
 80019fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a00:	e056      	b.n	8001ab0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d052      	beq.n	8001ab0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a0a:	f7ff f997 	bl	8000d3c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d302      	bcc.n	8001a20 <I2C_IsErrorOccurred+0x54>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d147      	bne.n	8001ab0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a42:	d12e      	bne.n	8001aa2 <I2C_IsErrorOccurred+0xd6>
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a4a:	d02a      	beq.n	8001aa2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001a4c:	7cfb      	ldrb	r3, [r7, #19]
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	d027      	beq.n	8001aa2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a62:	f7ff f96b 	bl	8000d3c <HAL_GetTick>
 8001a66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a68:	e01b      	b.n	8001aa2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a6a:	f7ff f967 	bl	8000d3c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b19      	cmp	r3, #25
 8001a76:	d914      	bls.n	8001aa2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d1dc      	bne.n	8001a6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d003      	beq.n	8001ac6 <I2C_IsErrorOccurred+0xfa>
 8001abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d09d      	beq.n	8001a02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00b      	beq.n	8001b30 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01c      	beq.n	8001b94 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fddc 	bl	8001718 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <I2C_IsErrorOccurred+0x1d4>)
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	fe00e800 	.word	0xfe00e800

08001ba4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	817b      	strh	r3, [r7, #10]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bb6:	897b      	ldrh	r3, [r7, #10]
 8001bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bbc:	7a7b      	ldrb	r3, [r7, #9]
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	0d5b      	lsrs	r3, r3, #21
 8001bde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <I2C_TransferConfig+0x60>)
 8001be4:	430b      	orrs	r3, r1
 8001be6:	43db      	mvns	r3, r3
 8001be8:	ea02 0103 	and.w	r1, r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	03ff63ff 	.word	0x03ff63ff

08001c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d138      	bne.n	8001c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e032      	b.n	8001c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	; 0x24
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c90:	2302      	movs	r3, #2
  }
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d139      	bne.n	8001d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e033      	b.n	8001d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2224      	movs	r2, #36	; 0x24
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
  }
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40007000 	.word	0x40007000

08001d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d62:	d130      	bne.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d70:	d038      	beq.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d7a:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2232      	movs	r2, #50	; 0x32
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0c9b      	lsrs	r3, r3, #18
 8001d94:	3301      	adds	r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d98:	e002      	b.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dac:	d102      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f2      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc0:	d110      	bne.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e00f      	b.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d007      	beq.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ddc:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40007000 	.word	0x40007000
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f000 bc02 	b.w	8002618 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e14:	4b96      	ldr	r3, [pc, #600]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e1e:	4b94      	ldr	r3, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80e4 	beq.w	8001ffe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4c>
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	f040 808b 	bne.w	8001f5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	f040 8087 	bne.w	8001f5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4c:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_OscConfig+0x64>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e3d9      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_RCC_OscConfig+0x7e>
 8001e74:	4b7e      	ldr	r3, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7c:	e005      	b.n	8001e8a <HAL_RCC_OscConfig+0x8a>
 8001e7e:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d223      	bcs.n	8001ed6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fd8c 	bl	80029b0 <RCC_SetFlashLatencyFromMSIRange>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e3ba      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b70      	ldr	r3, [pc, #448]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	496d      	ldr	r1, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec0:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	4968      	ldr	r1, [pc, #416]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e025      	b.n	8001f22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed6:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4960      	ldr	r1, [pc, #384]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	495b      	ldr	r1, [pc, #364]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fd4c 	bl	80029b0 <RCC_SetFlashLatencyFromMSIRange>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e37a      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f22:	f000 fc81 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	4950      	ldr	r1, [pc, #320]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	4a4e      	ldr	r2, [pc, #312]	; (8002078 <HAL_RCC_OscConfig+0x278>)
 8001f40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f42:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fea8 	bl	8000c9c <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d052      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	e35e      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d032      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fee5 	bl	8000d3c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f76:	f7fe fee1 	bl	8000d3c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e347      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a35      	ldr	r2, [pc, #212]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4930      	ldr	r1, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	492b      	ldr	r1, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
 8001fc6:	e01a      	b.n	8001ffe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a28      	ldr	r2, [pc, #160]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe feb2 	bl	8000d3c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fdc:	f7fe feae 	bl	8000d3c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e314      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1dc>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d073      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d005      	beq.n	800201c <HAL_RCC_OscConfig+0x21c>
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d10e      	bne.n	8002034 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d10b      	bne.n	8002034 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d063      	beq.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d15f      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e2f1      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x24c>
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e025      	b.n	8002098 <HAL_RCC_OscConfig+0x298>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002054:	d114      	bne.n	8002080 <HAL_RCC_OscConfig+0x280>
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a02      	ldr	r2, [pc, #8]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e013      	b.n	8002098 <HAL_RCC_OscConfig+0x298>
 8002070:	40021000 	.word	0x40021000
 8002074:	08004380 	.word	0x08004380
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004
 8002080:	4ba0      	ldr	r3, [pc, #640]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a9f      	ldr	r2, [pc, #636]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b9d      	ldr	r3, [pc, #628]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a9c      	ldr	r2, [pc, #624]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe4c 	bl	8000d3c <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe fe48 	bl	8000d3c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e2ae      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ba:	4b92      	ldr	r3, [pc, #584]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x2a8>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fe38 	bl	8000d3c <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fe34 	bl	8000d3c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e29a      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2d0>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d060      	beq.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x310>
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d119      	bne.n	800213e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d116      	bne.n	800213e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002110:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x328>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e277      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	4973      	ldr	r1, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213c:	e040      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d023      	beq.n	800218e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002146:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe fdf3 	bl	8000d3c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7fe fdef 	bl	8000d3c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e255      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	4b65      	ldr	r3, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b62      	ldr	r3, [pc, #392]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	495f      	ldr	r1, [pc, #380]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e018      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5c      	ldr	r2, [pc, #368]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fdcf 	bl	8000d3c <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a2:	f7fe fdcb 	bl	8000d3c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e231      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03c      	beq.n	8002246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01c      	beq.n	800220e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fdaa 	bl	8000d3c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe fda6 	bl	8000d3c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e20c      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ef      	beq.n	80021ec <HAL_RCC_OscConfig+0x3ec>
 800220c:	e01b      	b.n	8002246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fd8d 	bl	8000d3c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7fe fd89 	bl	8000d3c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1ef      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ef      	bne.n	8002226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80a6 	beq.w	80023a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	; 0x58
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227c:	2301      	movs	r3, #1
 800227e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d118      	bne.n	80022be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002298:	f7fe fd50 	bl	8000d3c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fd4c 	bl	8000d3c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1b2      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4d8>
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d6:	e029      	b.n	800232c <HAL_RCC_OscConfig+0x52c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d115      	bne.n	800230c <HAL_RCC_OscConfig+0x50c>
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002300:	e014      	b.n	800232c <HAL_RCC_OscConfig+0x52c>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	4b9a      	ldr	r3, [pc, #616]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a99      	ldr	r2, [pc, #612]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231c:	4b96      	ldr	r3, [pc, #600]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	4a95      	ldr	r2, [pc, #596]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d016      	beq.n	8002362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fd02 	bl	8000d3c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fcfe 	bl	8000d3c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e162      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	4b89      	ldr	r3, [pc, #548]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ed      	beq.n	800233c <HAL_RCC_OscConfig+0x53c>
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7fe fceb 	bl	8000d3c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fce7 	bl	8000d3c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e14b      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ed      	bne.n	800236a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238e:	7ffb      	ldrb	r3, [r7, #31]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b78      	ldr	r3, [pc, #480]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a77      	ldr	r2, [pc, #476]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03c      	beq.n	8002426 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023b4:	4b70      	ldr	r3, [pc, #448]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80023b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ba:	4a6f      	ldr	r2, [pc, #444]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7fe fcba 	bl	8000d3c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023cc:	f7fe fcb6 	bl	8000d3c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e11c      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023de:	4b66      	ldr	r3, [pc, #408]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80023e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ef      	beq.n	80023cc <HAL_RCC_OscConfig+0x5cc>
 80023ec:	e01b      	b.n	8002426 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ee:	4b62      	ldr	r3, [pc, #392]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80023f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f4:	4a60      	ldr	r2, [pc, #384]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe fc9d 	bl	8000d3c <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002406:	f7fe fc99 	bl	8000d3c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0ff      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002418:	4b57      	ldr	r3, [pc, #348]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 800241a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ef      	bne.n	8002406 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80f3 	beq.w	8002616 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	2b02      	cmp	r3, #2
 8002436:	f040 80c9 	bne.w	80025cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800243a:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	429a      	cmp	r2, r3
 800244c:	d12c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	3b01      	subs	r3, #1
 800245a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d123      	bne.n	80024a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d11b      	bne.n	80024a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d113      	bne.n	80024a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d109      	bne.n	80024a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	3b01      	subs	r3, #1
 80024a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d06b      	beq.n	8002580 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d062      	beq.n	8002574 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0ac      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2d      	ldr	r2, [pc, #180]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80024c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024ca:	f7fe fc37 	bl	8000d3c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fc33 	bl	8000d3c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e099      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x77c>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002500:	3a01      	subs	r2, #1
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800250a:	0212      	lsls	r2, r2, #8
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002512:	0852      	lsrs	r2, r2, #1
 8002514:	3a01      	subs	r2, #1
 8002516:	0552      	lsls	r2, r2, #21
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800251e:	0852      	lsrs	r2, r2, #1
 8002520:	3a01      	subs	r2, #1
 8002522:	0652      	lsls	r2, r2, #25
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800252a:	06d2      	lsls	r2, r2, #27
 800252c:	430a      	orrs	r2, r1
 800252e:	4912      	ldr	r1, [pc, #72]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800254c:	f7fe fbf6 	bl	8000d3c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fbf2 	bl	8000d3c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e058      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <HAL_RCC_OscConfig+0x778>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002572:	e050      	b.n	8002616 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e04f      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
 8002578:	40021000 	.word	0x40021000
 800257c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d144      	bne.n	8002616 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002596:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a4:	f7fe fbca 	bl	8000d3c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fbc6 	bl	8000d3c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e02c      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x7ac>
 80025ca:	e024      	b.n	8002616 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b0c      	cmp	r3, #12
 80025d0:	d01f      	beq.n	8002612 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 80025d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fbad 	bl	8000d3c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fba9 	bl	8000d3c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e00f      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4905      	ldr	r1, [pc, #20]	; (8002620 <HAL_RCC_OscConfig+0x820>)
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_OscConfig+0x824>)
 800260c:	4013      	ands	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
 8002610:	e001      	b.n	8002616 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	feeefffc 	.word	0xfeeefffc

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0e7      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b75      	ldr	r3, [pc, #468]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b72      	ldr	r3, [pc, #456]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4970      	ldr	r1, [pc, #448]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0cf      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002684:	429a      	cmp	r2, r3
 8002686:	d908      	bls.n	800269a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4960      	ldr	r1, [pc, #384]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d04c      	beq.n	8002740 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d121      	bne.n	80026fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0a6      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d115      	bne.n	80026fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e09a      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026de:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e08e      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ee:	4b4a      	ldr	r3, [pc, #296]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e086      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4943      	ldr	r1, [pc, #268]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe fb14 	bl	8000d3c <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fb10 	bl	8000d3c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e06e      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d010      	beq.n	800276e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	429a      	cmp	r2, r3
 800275a:	d208      	bcs.n	800276e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	492b      	ldr	r1, [pc, #172]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800276e:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d210      	bcs.n	800279e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 0207 	bic.w	r2, r3, #7
 8002784:	4923      	ldr	r1, [pc, #140]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCC_ClockConfig+0x1ec>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d001      	beq.n	800279e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e036      	b.n	800280c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	4918      	ldr	r1, [pc, #96]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d009      	beq.n	80027dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4910      	ldr	r1, [pc, #64]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027dc:	f000 f824 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	490b      	ldr	r1, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x1f4>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1f8>)
 80027fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1fc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fa4b 	bl	8000c9c <HAL_InitTick>
 8002806:	4603      	mov	r3, r0
 8002808:	72fb      	strb	r3, [r7, #11]

  return status;
 800280a:	7afb      	ldrb	r3, [r7, #11]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40022000 	.word	0x40022000
 8002818:	40021000 	.word	0x40021000
 800281c:	08004380 	.word	0x08004380
 8002820:	20000000 	.word	0x20000000
 8002824:	20000004 	.word	0x20000004

08002828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002840:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x34>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d121      	bne.n	800289a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d11e      	bne.n	800289a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e005      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002884:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d102      	bne.n	80028a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_GetSysClockFreq+0x110>)
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e004      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_RCC_GetSysClockFreq+0x114>)
 80028ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d134      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0xa6>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d003      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0xac>
 80028cc:	e005      	b.n	80028da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_RCC_GetSysClockFreq+0x110>)
 80028d0:	617b      	str	r3, [r7, #20]
      break;
 80028d2:	e005      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_GetSysClockFreq+0x114>)
 80028d6:	617b      	str	r3, [r7, #20]
      break;
 80028d8:	e002      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	617b      	str	r3, [r7, #20]
      break;
 80028de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	3301      	adds	r3, #1
 80028ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	fb03 f202 	mul.w	r2, r3, r2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	0e5b      	lsrs	r3, r3, #25
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	3301      	adds	r3, #1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002920:	69bb      	ldr	r3, [r7, #24]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	08004398 	.word	0x08004398
 8002938:	00f42400 	.word	0x00f42400
 800293c:	007a1200 	.word	0x007a1200

08002940 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_GetHCLKFreq+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800295c:	f7ff fff0 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4904      	ldr	r1, [pc, #16]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	08004390 	.word	0x08004390

08002984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002988:	f7ff ffda 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0adb      	lsrs	r3, r3, #11
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08004390 	.word	0x08004390

080029b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029c8:	f7ff f9b6 	bl	8001d38 <HAL_PWREx_GetVoltageRange>
 80029cc:	6178      	str	r0, [r7, #20]
 80029ce:	e014      	b.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6593      	str	r3, [r2, #88]	; 0x58
 80029dc:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029e8:	f7ff f9a6 	bl	8001d38 <HAL_PWREx_GetVoltageRange>
 80029ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a00:	d10b      	bne.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d919      	bls.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a0c:	d902      	bls.n	8002a14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a0e:	2302      	movs	r3, #2
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	e013      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a14:	2301      	movs	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e010      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d902      	bls.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a20:	2303      	movs	r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	e00a      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d102      	bne.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e004      	b.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b70      	cmp	r3, #112	; 0x70
 8002a36:	d101      	bne.n	8002a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a38:	2301      	movs	r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 0207 	bic.w	r2, r3, #7
 8002a44:	4909      	ldr	r1, [pc, #36]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d001      	beq.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40022000 	.word	0x40022000

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a78:	2300      	movs	r3, #0
 8002a7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d031      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a94:	d01a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a9a:	d814      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4a5c      	ldr	r2, [pc, #368]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab2:	e00c      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f9ce 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac4:	e003      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	74fb      	strb	r3, [r7, #19]
      break;
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ace:	7cfb      	ldrb	r3, [r7, #19]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ad4:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	494e      	ldr	r1, [pc, #312]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aea:	e001      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 809e 	beq.w	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a3f      	ldr	r2, [pc, #252]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
 8002b24:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a39      	ldr	r2, [pc, #228]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b40:	f7fe f8fc 	bl	8000d3c <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b46:	e009      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe f8f8 	bl	8000d3c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d902      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	74fb      	strb	r3, [r7, #19]
        break;
 8002b5a:	e005      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b5c:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ef      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d15a      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01e      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d019      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bb6:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d016      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f8b8 	bl	8000d3c <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	e00b      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe f8b4 	bl	8000d3c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d902      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	74fb      	strb	r3, [r7, #19]
            break;
 8002be6:	e006      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ec      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c12:	e009      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	74bb      	strb	r3, [r7, #18]
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c28:	7c7b      	ldrb	r3, [r7, #17]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b8a      	ldr	r3, [pc, #552]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4a89      	ldr	r2, [pc, #548]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c46:	4b84      	ldr	r3, [pc, #528]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f023 0203 	bic.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4980      	ldr	r1, [pc, #512]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c68:	4b7b      	ldr	r3, [pc, #492]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f023 020c 	bic.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	4978      	ldr	r1, [pc, #480]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	496f      	ldr	r1, [pc, #444]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	4967      	ldr	r1, [pc, #412]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cce:	4b62      	ldr	r3, [pc, #392]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	495e      	ldr	r1, [pc, #376]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf0:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	4956      	ldr	r1, [pc, #344]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d12:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	494d      	ldr	r1, [pc, #308]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d028      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d34:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4945      	ldr	r1, [pc, #276]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5e:	60d3      	str	r3, [r2, #12]
 8002d60:	e011      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f872 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d028      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	492d      	ldr	r1, [pc, #180]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dbc:	60d3      	str	r3, [r2, #12]
 8002dbe:	e011      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f843 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	4916      	ldr	r1, [pc, #88]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	2102      	movs	r1, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f820 	bl	8002e5c <RCCEx_PLLSAI1_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6a:	4b74      	ldr	r3, [pc, #464]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e76:	4b71      	ldr	r3, [pc, #452]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0203 	and.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10d      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
       ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d047      	beq.n	8002f32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e044      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d018      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x86>
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d825      	bhi.n	8002f00 <RCCEx_PLLSAI1_Config+0xa4>
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d002      	beq.n	8002ebe <RCCEx_PLLSAI1_Config+0x62>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d009      	beq.n	8002ed0 <RCCEx_PLLSAI1_Config+0x74>
 8002ebc:	e020      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ebe:	4b5f      	ldr	r3, [pc, #380]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11d      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ece:	e01a      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed0:	4b5a      	ldr	r3, [pc, #360]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee0:	e013      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ee2:	4b56      	ldr	r3, [pc, #344]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eee:	4b53      	ldr	r3, [pc, #332]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efe:	e006      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e004      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	4943      	ldr	r1, [pc, #268]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d17c      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f38:	4b40      	ldr	r3, [pc, #256]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fd fefa 	bl	8000d3c <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f4a:	e009      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f4c:	f7fd fef6 	bl	8000d3c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d902      	bls.n	8002f60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5e:	e005      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ef      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d15f      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d110      	bne.n	8002f9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	0211      	lsls	r1, r2, #8
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68d2      	ldr	r2, [r2, #12]
 8002f8e:	06d2      	lsls	r2, r2, #27
 8002f90:	430a      	orrs	r2, r1
 8002f92:	492a      	ldr	r1, [pc, #168]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	610b      	str	r3, [r1, #16]
 8002f98:	e027      	b.n	8002fea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d112      	bne.n	8002fc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa0:	4b26      	ldr	r3, [pc, #152]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	0211      	lsls	r1, r2, #8
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6912      	ldr	r2, [r2, #16]
 8002fb6:	0852      	lsrs	r2, r2, #1
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0552      	lsls	r2, r2, #21
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	491f      	ldr	r1, [pc, #124]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	610b      	str	r3, [r1, #16]
 8002fc4:	e011      	b.n	8002fea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6892      	ldr	r2, [r2, #8]
 8002fd6:	0211      	lsls	r1, r2, #8
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6952      	ldr	r2, [r2, #20]
 8002fdc:	0852      	lsrs	r2, r2, #1
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	0652      	lsls	r2, r2, #25
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	4915      	ldr	r1, [pc, #84]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fd fea1 	bl	8000d3c <HAL_GetTick>
 8002ffa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ffc:	e009      	b.n	8003012 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ffe:	f7fd fe9d 	bl	8000d3c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d902      	bls.n	8003012 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	73fb      	strb	r3, [r7, #15]
          break;
 8003010:	e005      	b.n	800301e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ef      	beq.n	8002ffe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <RCCEx_PLLSAI1_Config+0x1e0>)
 800302e:	4313      	orrs	r3, r2
 8003030:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000

08003040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e040      	b.n	80030d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fcfc 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8c0 	bl	8003204 <UART_SetConfig>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e022      	b.n	80030d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fae0 	bl	800365c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fb67 	bl	80037a0 <UART_CheckIdleState>
 80030d2:	4603      	mov	r3, r0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 8082 	bne.w	80031fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_UART_Transmit+0x26>
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07a      	b.n	80031fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_UART_Transmit+0x38>
 8003110:	2302      	movs	r3, #2
 8003112:	e073      	b.n	80031fc <HAL_UART_Transmit+0x120>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2221      	movs	r2, #33	; 0x21
 8003128:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312a:	f7fd fe07 	bl	8000d3c <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	88fa      	ldrh	r2, [r7, #6]
 8003134:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003148:	d108      	bne.n	800315c <HAL_UART_Transmit+0x80>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e003      	b.n	8003164 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800316c:	e02d      	b.n	80031ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2200      	movs	r2, #0
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fb5a 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e039      	b.n	80031fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800319a:	b292      	uxth	r2, r2
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3302      	adds	r3, #2
 80031a2:	61bb      	str	r3, [r7, #24]
 80031a4:	e008      	b.n	80031b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b292      	uxth	r2, r2
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1cb      	bne.n	800316e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	2140      	movs	r1, #64	; 0x40
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fb26 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e005      	b.n	80031fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003208:	b08a      	sub	sp, #40	; 0x28
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4313      	orrs	r3, r2
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4bb4      	ldr	r3, [pc, #720]	; (8003504 <UART_SetConfig+0x300>)
 8003234:	4013      	ands	r3, r2
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323c:	430b      	orrs	r3, r1
 800323e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4aa9      	ldr	r2, [pc, #676]	; (8003508 <UART_SetConfig+0x304>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	4313      	orrs	r3, r2
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4aa0      	ldr	r2, [pc, #640]	; (800350c <UART_SetConfig+0x308>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d126      	bne.n	80032dc <UART_SetConfig+0xd8>
 800328e:	4ba0      	ldr	r3, [pc, #640]	; (8003510 <UART_SetConfig+0x30c>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d81b      	bhi.n	80032d4 <UART_SetConfig+0xd0>
 800329c:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0xa0>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	080032c5 	.word	0x080032c5
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cd 	.word	0x080032cd
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e080      	b.n	80033be <UART_SetConfig+0x1ba>
 80032bc:	2302      	movs	r3, #2
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e07c      	b.n	80033be <UART_SetConfig+0x1ba>
 80032c4:	2304      	movs	r3, #4
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e078      	b.n	80033be <UART_SetConfig+0x1ba>
 80032cc:	2308      	movs	r3, #8
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d2:	e074      	b.n	80033be <UART_SetConfig+0x1ba>
 80032d4:	2310      	movs	r3, #16
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e070      	b.n	80033be <UART_SetConfig+0x1ba>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a8c      	ldr	r2, [pc, #560]	; (8003514 <UART_SetConfig+0x310>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d138      	bne.n	8003358 <UART_SetConfig+0x154>
 80032e6:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <UART_SetConfig+0x30c>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	d82d      	bhi.n	8003350 <UART_SetConfig+0x14c>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <UART_SetConfig+0xf8>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003351 	.word	0x08003351
 8003304:	08003351 	.word	0x08003351
 8003308:	08003351 	.word	0x08003351
 800330c:	08003341 	.word	0x08003341
 8003310:	08003351 	.word	0x08003351
 8003314:	08003351 	.word	0x08003351
 8003318:	08003351 	.word	0x08003351
 800331c:	08003339 	.word	0x08003339
 8003320:	08003351 	.word	0x08003351
 8003324:	08003351 	.word	0x08003351
 8003328:	08003351 	.word	0x08003351
 800332c:	08003349 	.word	0x08003349
 8003330:	2300      	movs	r3, #0
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003336:	e042      	b.n	80033be <UART_SetConfig+0x1ba>
 8003338:	2302      	movs	r3, #2
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e03e      	b.n	80033be <UART_SetConfig+0x1ba>
 8003340:	2304      	movs	r3, #4
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e03a      	b.n	80033be <UART_SetConfig+0x1ba>
 8003348:	2308      	movs	r3, #8
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	e036      	b.n	80033be <UART_SetConfig+0x1ba>
 8003350:	2310      	movs	r3, #16
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e032      	b.n	80033be <UART_SetConfig+0x1ba>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <UART_SetConfig+0x304>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12a      	bne.n	80033b8 <UART_SetConfig+0x1b4>
 8003362:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <UART_SetConfig+0x30c>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800336c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003370:	d01a      	beq.n	80033a8 <UART_SetConfig+0x1a4>
 8003372:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003376:	d81b      	bhi.n	80033b0 <UART_SetConfig+0x1ac>
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337c:	d00c      	beq.n	8003398 <UART_SetConfig+0x194>
 800337e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003382:	d815      	bhi.n	80033b0 <UART_SetConfig+0x1ac>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <UART_SetConfig+0x18c>
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338c:	d008      	beq.n	80033a0 <UART_SetConfig+0x19c>
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x1ac>
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003396:	e012      	b.n	80033be <UART_SetConfig+0x1ba>
 8003398:	2302      	movs	r3, #2
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339e:	e00e      	b.n	80033be <UART_SetConfig+0x1ba>
 80033a0:	2304      	movs	r3, #4
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a6:	e00a      	b.n	80033be <UART_SetConfig+0x1ba>
 80033a8:	2308      	movs	r3, #8
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ae:	e006      	b.n	80033be <UART_SetConfig+0x1ba>
 80033b0:	2310      	movs	r3, #16
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b6:	e002      	b.n	80033be <UART_SetConfig+0x1ba>
 80033b8:	2310      	movs	r3, #16
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a51      	ldr	r2, [pc, #324]	; (8003508 <UART_SetConfig+0x304>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d17a      	bne.n	80034be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d824      	bhi.n	800341a <UART_SetConfig+0x216>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <UART_SetConfig+0x1d4>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033fd 	.word	0x080033fd
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	08003405 	.word	0x08003405
 80033e4:	0800341b 	.word	0x0800341b
 80033e8:	0800340b 	.word	0x0800340b
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	0800341b 	.word	0x0800341b
 80033f4:	0800341b 	.word	0x0800341b
 80033f8:	08003413 	.word	0x08003413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033fc:	f7ff faac 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8003400:	61f8      	str	r0, [r7, #28]
        break;
 8003402:	e010      	b.n	8003426 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003404:	4b44      	ldr	r3, [pc, #272]	; (8003518 <UART_SetConfig+0x314>)
 8003406:	61fb      	str	r3, [r7, #28]
        break;
 8003408:	e00d      	b.n	8003426 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800340a:	f7ff fa0d 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 800340e:	61f8      	str	r0, [r7, #28]
        break;
 8003410:	e009      	b.n	8003426 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003416:	61fb      	str	r3, [r7, #28]
        break;
 8003418:	e005      	b.n	8003426 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8107 	beq.w	800363c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	429a      	cmp	r2, r3
 800343c:	d305      	bcc.n	800344a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	429a      	cmp	r2, r3
 8003448:	d903      	bls.n	8003452 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003450:	e0f4      	b.n	800363c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2200      	movs	r2, #0
 8003456:	461c      	mov	r4, r3
 8003458:	4615      	mov	r5, r2
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	022b      	lsls	r3, r5, #8
 8003464:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003468:	0222      	lsls	r2, r4, #8
 800346a:	68f9      	ldr	r1, [r7, #12]
 800346c:	6849      	ldr	r1, [r1, #4]
 800346e:	0849      	lsrs	r1, r1, #1
 8003470:	2000      	movs	r0, #0
 8003472:	4688      	mov	r8, r1
 8003474:	4681      	mov	r9, r0
 8003476:	eb12 0a08 	adds.w	sl, r2, r8
 800347a:	eb43 0b09 	adc.w	fp, r3, r9
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800348c:	4650      	mov	r0, sl
 800348e:	4659      	mov	r1, fp
 8003490:	f7fc fef6 	bl	8000280 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4613      	mov	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a2:	d308      	bcc.n	80034b6 <UART_SetConfig+0x2b2>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034aa:	d204      	bcs.n	80034b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	e0c2      	b.n	800363c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034bc:	e0be      	b.n	800363c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c6:	d16a      	bne.n	800359e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80034c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d834      	bhi.n	800353a <UART_SetConfig+0x336>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0x2d4>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	0800351d 	.word	0x0800351d
 80034e0:	08003525 	.word	0x08003525
 80034e4:	0800353b 	.word	0x0800353b
 80034e8:	0800352b 	.word	0x0800352b
 80034ec:	0800353b 	.word	0x0800353b
 80034f0:	0800353b 	.word	0x0800353b
 80034f4:	0800353b 	.word	0x0800353b
 80034f8:	08003533 	.word	0x08003533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7ff fa2c 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8003500:	61f8      	str	r0, [r7, #28]
        break;
 8003502:	e020      	b.n	8003546 <UART_SetConfig+0x342>
 8003504:	efff69f3 	.word	0xefff69f3
 8003508:	40008000 	.word	0x40008000
 800350c:	40013800 	.word	0x40013800
 8003510:	40021000 	.word	0x40021000
 8003514:	40004400 	.word	0x40004400
 8003518:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800351c:	f7ff fa32 	bl	8002984 <HAL_RCC_GetPCLK2Freq>
 8003520:	61f8      	str	r0, [r7, #28]
        break;
 8003522:	e010      	b.n	8003546 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003524:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <UART_SetConfig+0x454>)
 8003526:	61fb      	str	r3, [r7, #28]
        break;
 8003528:	e00d      	b.n	8003546 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352a:	f7ff f97d 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 800352e:	61f8      	str	r0, [r7, #28]
        break;
 8003530:	e009      	b.n	8003546 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003536:	61fb      	str	r3, [r7, #28]
        break;
 8003538:	e005      	b.n	8003546 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d077      	beq.n	800363c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005a      	lsls	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	441a      	add	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d916      	bls.n	8003596 <UART_SetConfig+0x392>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356e:	d212      	bcs.n	8003596 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f023 030f 	bic.w	r3, r3, #15
 8003578:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b29a      	uxth	r2, r3
 8003586:	8afb      	ldrh	r3, [r7, #22]
 8003588:	4313      	orrs	r3, r2
 800358a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	8afa      	ldrh	r2, [r7, #22]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	e052      	b.n	800363c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800359c:	e04e      	b.n	800363c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800359e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d827      	bhi.n	80035f6 <UART_SetConfig+0x3f2>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <UART_SetConfig+0x3a8>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035e1 	.word	0x080035e1
 80035b8:	080035f7 	.word	0x080035f7
 80035bc:	080035e7 	.word	0x080035e7
 80035c0:	080035f7 	.word	0x080035f7
 80035c4:	080035f7 	.word	0x080035f7
 80035c8:	080035f7 	.word	0x080035f7
 80035cc:	080035ef 	.word	0x080035ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d0:	f7ff f9c2 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 80035d4:	61f8      	str	r0, [r7, #28]
        break;
 80035d6:	e014      	b.n	8003602 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d8:	f7ff f9d4 	bl	8002984 <HAL_RCC_GetPCLK2Freq>
 80035dc:	61f8      	str	r0, [r7, #28]
        break;
 80035de:	e010      	b.n	8003602 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <UART_SetConfig+0x454>)
 80035e2:	61fb      	str	r3, [r7, #28]
        break;
 80035e4:	e00d      	b.n	8003602 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e6:	f7ff f91f 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80035ea:	61f8      	str	r0, [r7, #28]
        break;
 80035ec:	e009      	b.n	8003602 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f2:	61fb      	str	r3, [r7, #28]
        break;
 80035f4:	e005      	b.n	8003602 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003600:	bf00      	nop
    }

    if (pclk != 0U)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d019      	beq.n	800363c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	085a      	lsrs	r2, r3, #1
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	d909      	bls.n	8003636 <UART_SetConfig+0x432>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d205      	bcs.n	8003636 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	e002      	b.n	800363c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003648:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800364c:	4618      	mov	r0, r3
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003656:	bf00      	nop
 8003658:	00f42400 	.word	0x00f42400

0800365c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01a      	beq.n	8003772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375a:	d10a      	bne.n	8003772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037b0:	f7fd fac4 	bl	8000d3c <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d10e      	bne.n	80037e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f82d 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e023      	b.n	800382a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d10e      	bne.n	800380e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f817 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e00d      	b.n	800382a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b09c      	sub	sp, #112	; 0x70
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003842:	e0a5      	b.n	8003990 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	f000 80a1 	beq.w	8003990 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fd fa75 	bl	8000d3c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <UART_WaitOnFlagUntilTimeout+0x32>
 800385e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003860:	2b00      	cmp	r3, #0
 8003862:	d13e      	bne.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003878:	667b      	str	r3, [r7, #100]	; 0x64
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003884:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e6      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3308      	adds	r3, #8
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	663b      	str	r3, [r7, #96]	; 0x60
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3308      	adds	r3, #8
 80038b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80038b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e5      	bne.n	8003896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e067      	b.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d04f      	beq.n	8003990 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fe:	d147      	bne.n	8003990 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003908:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800391e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
 800392a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800392e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e6      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	613b      	str	r3, [r7, #16]
   return(result);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	66bb      	str	r3, [r7, #104]	; 0x68
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800395c:	623a      	str	r2, [r7, #32]
 800395e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	69f9      	ldr	r1, [r7, #28]
 8003962:	6a3a      	ldr	r2, [r7, #32]
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	61bb      	str	r3, [r7, #24]
   return(result);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e010      	b.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	f43f af4a 	beq.w	8003844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3770      	adds	r7, #112	; 0x70
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <__errno>:
 80039bc:	4b01      	ldr	r3, [pc, #4]	; (80039c4 <__errno+0x8>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4d0d      	ldr	r5, [pc, #52]	; (8003a00 <__libc_init_array+0x38>)
 80039cc:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	2600      	movs	r6, #0
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	4d0b      	ldr	r5, [pc, #44]	; (8003a08 <__libc_init_array+0x40>)
 80039da:	4c0c      	ldr	r4, [pc, #48]	; (8003a0c <__libc_init_array+0x44>)
 80039dc:	f000 fc8e 	bl	80042fc <_init>
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	2600      	movs	r6, #0
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08004404 	.word	0x08004404
 8003a04:	08004404 	.word	0x08004404
 8003a08:	08004404 	.word	0x08004404
 8003a0c:	08004408 	.word	0x08004408

08003a10 <memset>:
 8003a10:	4402      	add	r2, r0
 8003a12:	4603      	mov	r3, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <siprintf>:
 8003a20:	b40e      	push	{r1, r2, r3}
 8003a22:	b500      	push	{lr}
 8003a24:	b09c      	sub	sp, #112	; 0x70
 8003a26:	ab1d      	add	r3, sp, #116	; 0x74
 8003a28:	9002      	str	r0, [sp, #8]
 8003a2a:	9006      	str	r0, [sp, #24]
 8003a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a30:	4809      	ldr	r0, [pc, #36]	; (8003a58 <siprintf+0x38>)
 8003a32:	9107      	str	r1, [sp, #28]
 8003a34:	9104      	str	r1, [sp, #16]
 8003a36:	4909      	ldr	r1, [pc, #36]	; (8003a5c <siprintf+0x3c>)
 8003a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a3c:	9105      	str	r1, [sp, #20]
 8003a3e:	6800      	ldr	r0, [r0, #0]
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	a902      	add	r1, sp, #8
 8003a44:	f000 f868 	bl	8003b18 <_svfiprintf_r>
 8003a48:	9b02      	ldr	r3, [sp, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	b01c      	add	sp, #112	; 0x70
 8003a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a54:	b003      	add	sp, #12
 8003a56:	4770      	bx	lr
 8003a58:	2000000c 	.word	0x2000000c
 8003a5c:	ffff0208 	.word	0xffff0208

08003a60 <__ssputs_r>:
 8003a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a64:	688e      	ldr	r6, [r1, #8]
 8003a66:	429e      	cmp	r6, r3
 8003a68:	4682      	mov	sl, r0
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	4690      	mov	r8, r2
 8003a6e:	461f      	mov	r7, r3
 8003a70:	d838      	bhi.n	8003ae4 <__ssputs_r+0x84>
 8003a72:	898a      	ldrh	r2, [r1, #12]
 8003a74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a78:	d032      	beq.n	8003ae0 <__ssputs_r+0x80>
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	6909      	ldr	r1, [r1, #16]
 8003a7e:	eba5 0901 	sub.w	r9, r5, r1
 8003a82:	6965      	ldr	r5, [r4, #20]
 8003a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	444b      	add	r3, r9
 8003a90:	106d      	asrs	r5, r5, #1
 8003a92:	429d      	cmp	r5, r3
 8003a94:	bf38      	it	cc
 8003a96:	461d      	movcc	r5, r3
 8003a98:	0553      	lsls	r3, r2, #21
 8003a9a:	d531      	bpl.n	8003b00 <__ssputs_r+0xa0>
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f000 fb63 	bl	8004168 <_malloc_r>
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	b950      	cbnz	r0, 8003abc <__ssputs_r+0x5c>
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	f8ca 3000 	str.w	r3, [sl]
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab2:	81a3      	strh	r3, [r4, #12]
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	6921      	ldr	r1, [r4, #16]
 8003abe:	464a      	mov	r2, r9
 8003ac0:	f000 fabe 	bl	8004040 <memcpy>
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	6126      	str	r6, [r4, #16]
 8003ad2:	6165      	str	r5, [r4, #20]
 8003ad4:	444e      	add	r6, r9
 8003ad6:	eba5 0509 	sub.w	r5, r5, r9
 8003ada:	6026      	str	r6, [r4, #0]
 8003adc:	60a5      	str	r5, [r4, #8]
 8003ade:	463e      	mov	r6, r7
 8003ae0:	42be      	cmp	r6, r7
 8003ae2:	d900      	bls.n	8003ae6 <__ssputs_r+0x86>
 8003ae4:	463e      	mov	r6, r7
 8003ae6:	6820      	ldr	r0, [r4, #0]
 8003ae8:	4632      	mov	r2, r6
 8003aea:	4641      	mov	r1, r8
 8003aec:	f000 fab6 	bl	800405c <memmove>
 8003af0:	68a3      	ldr	r3, [r4, #8]
 8003af2:	1b9b      	subs	r3, r3, r6
 8003af4:	60a3      	str	r3, [r4, #8]
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	4433      	add	r3, r6
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	2000      	movs	r0, #0
 8003afe:	e7db      	b.n	8003ab8 <__ssputs_r+0x58>
 8003b00:	462a      	mov	r2, r5
 8003b02:	f000 fba5 	bl	8004250 <_realloc_r>
 8003b06:	4606      	mov	r6, r0
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d1e1      	bne.n	8003ad0 <__ssputs_r+0x70>
 8003b0c:	6921      	ldr	r1, [r4, #16]
 8003b0e:	4650      	mov	r0, sl
 8003b10:	f000 fabe 	bl	8004090 <_free_r>
 8003b14:	e7c7      	b.n	8003aa6 <__ssputs_r+0x46>
	...

08003b18 <_svfiprintf_r>:
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	4698      	mov	r8, r3
 8003b1e:	898b      	ldrh	r3, [r1, #12]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	b09d      	sub	sp, #116	; 0x74
 8003b24:	4607      	mov	r7, r0
 8003b26:	460d      	mov	r5, r1
 8003b28:	4614      	mov	r4, r2
 8003b2a:	d50e      	bpl.n	8003b4a <_svfiprintf_r+0x32>
 8003b2c:	690b      	ldr	r3, [r1, #16]
 8003b2e:	b963      	cbnz	r3, 8003b4a <_svfiprintf_r+0x32>
 8003b30:	2140      	movs	r1, #64	; 0x40
 8003b32:	f000 fb19 	bl	8004168 <_malloc_r>
 8003b36:	6028      	str	r0, [r5, #0]
 8003b38:	6128      	str	r0, [r5, #16]
 8003b3a:	b920      	cbnz	r0, 8003b46 <_svfiprintf_r+0x2e>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	e0d1      	b.n	8003cea <_svfiprintf_r+0x1d2>
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	616b      	str	r3, [r5, #20]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4e:	2320      	movs	r3, #32
 8003b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b58:	2330      	movs	r3, #48	; 0x30
 8003b5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d04 <_svfiprintf_r+0x1ec>
 8003b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b62:	f04f 0901 	mov.w	r9, #1
 8003b66:	4623      	mov	r3, r4
 8003b68:	469a      	mov	sl, r3
 8003b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b6e:	b10a      	cbz	r2, 8003b74 <_svfiprintf_r+0x5c>
 8003b70:	2a25      	cmp	r2, #37	; 0x25
 8003b72:	d1f9      	bne.n	8003b68 <_svfiprintf_r+0x50>
 8003b74:	ebba 0b04 	subs.w	fp, sl, r4
 8003b78:	d00b      	beq.n	8003b92 <_svfiprintf_r+0x7a>
 8003b7a:	465b      	mov	r3, fp
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	4629      	mov	r1, r5
 8003b80:	4638      	mov	r0, r7
 8003b82:	f7ff ff6d 	bl	8003a60 <__ssputs_r>
 8003b86:	3001      	adds	r0, #1
 8003b88:	f000 80aa 	beq.w	8003ce0 <_svfiprintf_r+0x1c8>
 8003b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b8e:	445a      	add	r2, fp
 8003b90:	9209      	str	r2, [sp, #36]	; 0x24
 8003b92:	f89a 3000 	ldrb.w	r3, [sl]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80a2 	beq.w	8003ce0 <_svfiprintf_r+0x1c8>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ba6:	f10a 0a01 	add.w	sl, sl, #1
 8003baa:	9304      	str	r3, [sp, #16]
 8003bac:	9307      	str	r3, [sp, #28]
 8003bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bb4:	4654      	mov	r4, sl
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bbc:	4851      	ldr	r0, [pc, #324]	; (8003d04 <_svfiprintf_r+0x1ec>)
 8003bbe:	f7fc fb0f 	bl	80001e0 <memchr>
 8003bc2:	9a04      	ldr	r2, [sp, #16]
 8003bc4:	b9d8      	cbnz	r0, 8003bfe <_svfiprintf_r+0xe6>
 8003bc6:	06d0      	lsls	r0, r2, #27
 8003bc8:	bf44      	itt	mi
 8003bca:	2320      	movmi	r3, #32
 8003bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bd0:	0711      	lsls	r1, r2, #28
 8003bd2:	bf44      	itt	mi
 8003bd4:	232b      	movmi	r3, #43	; 0x2b
 8003bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bda:	f89a 3000 	ldrb.w	r3, [sl]
 8003bde:	2b2a      	cmp	r3, #42	; 0x2a
 8003be0:	d015      	beq.n	8003c0e <_svfiprintf_r+0xf6>
 8003be2:	9a07      	ldr	r2, [sp, #28]
 8003be4:	4654      	mov	r4, sl
 8003be6:	2000      	movs	r0, #0
 8003be8:	f04f 0c0a 	mov.w	ip, #10
 8003bec:	4621      	mov	r1, r4
 8003bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bf2:	3b30      	subs	r3, #48	; 0x30
 8003bf4:	2b09      	cmp	r3, #9
 8003bf6:	d94e      	bls.n	8003c96 <_svfiprintf_r+0x17e>
 8003bf8:	b1b0      	cbz	r0, 8003c28 <_svfiprintf_r+0x110>
 8003bfa:	9207      	str	r2, [sp, #28]
 8003bfc:	e014      	b.n	8003c28 <_svfiprintf_r+0x110>
 8003bfe:	eba0 0308 	sub.w	r3, r0, r8
 8003c02:	fa09 f303 	lsl.w	r3, r9, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	9304      	str	r3, [sp, #16]
 8003c0a:	46a2      	mov	sl, r4
 8003c0c:	e7d2      	b.n	8003bb4 <_svfiprintf_r+0x9c>
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	1d19      	adds	r1, r3, #4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	9103      	str	r1, [sp, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bfbb      	ittet	lt
 8003c1a:	425b      	neglt	r3, r3
 8003c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c20:	9307      	strge	r3, [sp, #28]
 8003c22:	9307      	strlt	r3, [sp, #28]
 8003c24:	bfb8      	it	lt
 8003c26:	9204      	strlt	r2, [sp, #16]
 8003c28:	7823      	ldrb	r3, [r4, #0]
 8003c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c2c:	d10c      	bne.n	8003c48 <_svfiprintf_r+0x130>
 8003c2e:	7863      	ldrb	r3, [r4, #1]
 8003c30:	2b2a      	cmp	r3, #42	; 0x2a
 8003c32:	d135      	bne.n	8003ca0 <_svfiprintf_r+0x188>
 8003c34:	9b03      	ldr	r3, [sp, #12]
 8003c36:	1d1a      	adds	r2, r3, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	9203      	str	r2, [sp, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bfb8      	it	lt
 8003c40:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c44:	3402      	adds	r4, #2
 8003c46:	9305      	str	r3, [sp, #20]
 8003c48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d14 <_svfiprintf_r+0x1fc>
 8003c4c:	7821      	ldrb	r1, [r4, #0]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	4650      	mov	r0, sl
 8003c52:	f7fc fac5 	bl	80001e0 <memchr>
 8003c56:	b140      	cbz	r0, 8003c6a <_svfiprintf_r+0x152>
 8003c58:	2340      	movs	r3, #64	; 0x40
 8003c5a:	eba0 000a 	sub.w	r0, r0, sl
 8003c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c62:	9b04      	ldr	r3, [sp, #16]
 8003c64:	4303      	orrs	r3, r0
 8003c66:	3401      	adds	r4, #1
 8003c68:	9304      	str	r3, [sp, #16]
 8003c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c6e:	4826      	ldr	r0, [pc, #152]	; (8003d08 <_svfiprintf_r+0x1f0>)
 8003c70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c74:	2206      	movs	r2, #6
 8003c76:	f7fc fab3 	bl	80001e0 <memchr>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d038      	beq.n	8003cf0 <_svfiprintf_r+0x1d8>
 8003c7e:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <_svfiprintf_r+0x1f4>)
 8003c80:	bb1b      	cbnz	r3, 8003cca <_svfiprintf_r+0x1b2>
 8003c82:	9b03      	ldr	r3, [sp, #12]
 8003c84:	3307      	adds	r3, #7
 8003c86:	f023 0307 	bic.w	r3, r3, #7
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	9303      	str	r3, [sp, #12]
 8003c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c90:	4433      	add	r3, r6
 8003c92:	9309      	str	r3, [sp, #36]	; 0x24
 8003c94:	e767      	b.n	8003b66 <_svfiprintf_r+0x4e>
 8003c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	e7a5      	b.n	8003bec <_svfiprintf_r+0xd4>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	3401      	adds	r4, #1
 8003ca4:	9305      	str	r3, [sp, #20]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f04f 0c0a 	mov.w	ip, #10
 8003cac:	4620      	mov	r0, r4
 8003cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb2:	3a30      	subs	r2, #48	; 0x30
 8003cb4:	2a09      	cmp	r2, #9
 8003cb6:	d903      	bls.n	8003cc0 <_svfiprintf_r+0x1a8>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0c5      	beq.n	8003c48 <_svfiprintf_r+0x130>
 8003cbc:	9105      	str	r1, [sp, #20]
 8003cbe:	e7c3      	b.n	8003c48 <_svfiprintf_r+0x130>
 8003cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e7f0      	b.n	8003cac <_svfiprintf_r+0x194>
 8003cca:	ab03      	add	r3, sp, #12
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	462a      	mov	r2, r5
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <_svfiprintf_r+0x1f8>)
 8003cd2:	a904      	add	r1, sp, #16
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	f3af 8000 	nop.w
 8003cda:	1c42      	adds	r2, r0, #1
 8003cdc:	4606      	mov	r6, r0
 8003cde:	d1d6      	bne.n	8003c8e <_svfiprintf_r+0x176>
 8003ce0:	89ab      	ldrh	r3, [r5, #12]
 8003ce2:	065b      	lsls	r3, r3, #25
 8003ce4:	f53f af2c 	bmi.w	8003b40 <_svfiprintf_r+0x28>
 8003ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cea:	b01d      	add	sp, #116	; 0x74
 8003cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf0:	ab03      	add	r3, sp, #12
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	462a      	mov	r2, r5
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <_svfiprintf_r+0x1f8>)
 8003cf8:	a904      	add	r1, sp, #16
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	f000 f87a 	bl	8003df4 <_printf_i>
 8003d00:	e7eb      	b.n	8003cda <_svfiprintf_r+0x1c2>
 8003d02:	bf00      	nop
 8003d04:	080043c8 	.word	0x080043c8
 8003d08:	080043d2 	.word	0x080043d2
 8003d0c:	00000000 	.word	0x00000000
 8003d10:	08003a61 	.word	0x08003a61
 8003d14:	080043ce 	.word	0x080043ce

08003d18 <_printf_common>:
 8003d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1c:	4616      	mov	r6, r2
 8003d1e:	4699      	mov	r9, r3
 8003d20:	688a      	ldr	r2, [r1, #8]
 8003d22:	690b      	ldr	r3, [r1, #16]
 8003d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	bfb8      	it	lt
 8003d2c:	4613      	movlt	r3, r2
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d34:	4607      	mov	r7, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	b10a      	cbz	r2, 8003d3e <_printf_common+0x26>
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	6033      	str	r3, [r6, #0]
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	0699      	lsls	r1, r3, #26
 8003d42:	bf42      	ittt	mi
 8003d44:	6833      	ldrmi	r3, [r6, #0]
 8003d46:	3302      	addmi	r3, #2
 8003d48:	6033      	strmi	r3, [r6, #0]
 8003d4a:	6825      	ldr	r5, [r4, #0]
 8003d4c:	f015 0506 	ands.w	r5, r5, #6
 8003d50:	d106      	bne.n	8003d60 <_printf_common+0x48>
 8003d52:	f104 0a19 	add.w	sl, r4, #25
 8003d56:	68e3      	ldr	r3, [r4, #12]
 8003d58:	6832      	ldr	r2, [r6, #0]
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	dc26      	bgt.n	8003dae <_printf_common+0x96>
 8003d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d64:	1e13      	subs	r3, r2, #0
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	bf18      	it	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	0692      	lsls	r2, r2, #26
 8003d6e:	d42b      	bmi.n	8003dc8 <_printf_common+0xb0>
 8003d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d74:	4649      	mov	r1, r9
 8003d76:	4638      	mov	r0, r7
 8003d78:	47c0      	blx	r8
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d01e      	beq.n	8003dbc <_printf_common+0xa4>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	68e5      	ldr	r5, [r4, #12]
 8003d82:	6832      	ldr	r2, [r6, #0]
 8003d84:	f003 0306 	and.w	r3, r3, #6
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	bf08      	it	eq
 8003d8c:	1aad      	subeq	r5, r5, r2
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	6922      	ldr	r2, [r4, #16]
 8003d92:	bf0c      	ite	eq
 8003d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d98:	2500      	movne	r5, #0
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	bfc4      	itt	gt
 8003d9e:	1a9b      	subgt	r3, r3, r2
 8003da0:	18ed      	addgt	r5, r5, r3
 8003da2:	2600      	movs	r6, #0
 8003da4:	341a      	adds	r4, #26
 8003da6:	42b5      	cmp	r5, r6
 8003da8:	d11a      	bne.n	8003de0 <_printf_common+0xc8>
 8003daa:	2000      	movs	r0, #0
 8003dac:	e008      	b.n	8003dc0 <_printf_common+0xa8>
 8003dae:	2301      	movs	r3, #1
 8003db0:	4652      	mov	r2, sl
 8003db2:	4649      	mov	r1, r9
 8003db4:	4638      	mov	r0, r7
 8003db6:	47c0      	blx	r8
 8003db8:	3001      	adds	r0, #1
 8003dba:	d103      	bne.n	8003dc4 <_printf_common+0xac>
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	e7c6      	b.n	8003d56 <_printf_common+0x3e>
 8003dc8:	18e1      	adds	r1, r4, r3
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	2030      	movs	r0, #48	; 0x30
 8003dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dd2:	4422      	add	r2, r4
 8003dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ddc:	3302      	adds	r3, #2
 8003dde:	e7c7      	b.n	8003d70 <_printf_common+0x58>
 8003de0:	2301      	movs	r3, #1
 8003de2:	4622      	mov	r2, r4
 8003de4:	4649      	mov	r1, r9
 8003de6:	4638      	mov	r0, r7
 8003de8:	47c0      	blx	r8
 8003dea:	3001      	adds	r0, #1
 8003dec:	d0e6      	beq.n	8003dbc <_printf_common+0xa4>
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7d9      	b.n	8003da6 <_printf_common+0x8e>
	...

08003df4 <_printf_i>:
 8003df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	7e0f      	ldrb	r7, [r1, #24]
 8003dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dfc:	2f78      	cmp	r7, #120	; 0x78
 8003dfe:	4691      	mov	r9, r2
 8003e00:	4680      	mov	r8, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	469a      	mov	sl, r3
 8003e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e0a:	d807      	bhi.n	8003e1c <_printf_i+0x28>
 8003e0c:	2f62      	cmp	r7, #98	; 0x62
 8003e0e:	d80a      	bhi.n	8003e26 <_printf_i+0x32>
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	f000 80d8 	beq.w	8003fc6 <_printf_i+0x1d2>
 8003e16:	2f58      	cmp	r7, #88	; 0x58
 8003e18:	f000 80a3 	beq.w	8003f62 <_printf_i+0x16e>
 8003e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e24:	e03a      	b.n	8003e9c <_printf_i+0xa8>
 8003e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e2a:	2b15      	cmp	r3, #21
 8003e2c:	d8f6      	bhi.n	8003e1c <_printf_i+0x28>
 8003e2e:	a101      	add	r1, pc, #4	; (adr r1, 8003e34 <_printf_i+0x40>)
 8003e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003e1d 	.word	0x08003e1d
 8003e40:	08003e1d 	.word	0x08003e1d
 8003e44:	08003e1d 	.word	0x08003e1d
 8003e48:	08003e1d 	.word	0x08003e1d
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003e1d 	.word	0x08003e1d
 8003e54:	08003e1d 	.word	0x08003e1d
 8003e58:	08003e1d 	.word	0x08003e1d
 8003e5c:	08003e1d 	.word	0x08003e1d
 8003e60:	08003fad 	.word	0x08003fad
 8003e64:	08003ed1 	.word	0x08003ed1
 8003e68:	08003f8f 	.word	0x08003f8f
 8003e6c:	08003e1d 	.word	0x08003e1d
 8003e70:	08003e1d 	.word	0x08003e1d
 8003e74:	08003fcf 	.word	0x08003fcf
 8003e78:	08003e1d 	.word	0x08003e1d
 8003e7c:	08003ed1 	.word	0x08003ed1
 8003e80:	08003e1d 	.word	0x08003e1d
 8003e84:	08003e1d 	.word	0x08003e1d
 8003e88:	08003f97 	.word	0x08003f97
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	602a      	str	r2, [r5, #0]
 8003e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0a3      	b.n	8003fe8 <_printf_i+0x1f4>
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	6829      	ldr	r1, [r5, #0]
 8003ea4:	0606      	lsls	r6, r0, #24
 8003ea6:	f101 0304 	add.w	r3, r1, #4
 8003eaa:	d50a      	bpl.n	8003ec2 <_printf_i+0xce>
 8003eac:	680e      	ldr	r6, [r1, #0]
 8003eae:	602b      	str	r3, [r5, #0]
 8003eb0:	2e00      	cmp	r6, #0
 8003eb2:	da03      	bge.n	8003ebc <_printf_i+0xc8>
 8003eb4:	232d      	movs	r3, #45	; 0x2d
 8003eb6:	4276      	negs	r6, r6
 8003eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ebc:	485e      	ldr	r0, [pc, #376]	; (8004038 <_printf_i+0x244>)
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	e019      	b.n	8003ef6 <_printf_i+0x102>
 8003ec2:	680e      	ldr	r6, [r1, #0]
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003eca:	bf18      	it	ne
 8003ecc:	b236      	sxthne	r6, r6
 8003ece:	e7ef      	b.n	8003eb0 <_printf_i+0xbc>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	1d19      	adds	r1, r3, #4
 8003ed6:	6029      	str	r1, [r5, #0]
 8003ed8:	0601      	lsls	r1, r0, #24
 8003eda:	d501      	bpl.n	8003ee0 <_printf_i+0xec>
 8003edc:	681e      	ldr	r6, [r3, #0]
 8003ede:	e002      	b.n	8003ee6 <_printf_i+0xf2>
 8003ee0:	0646      	lsls	r6, r0, #25
 8003ee2:	d5fb      	bpl.n	8003edc <_printf_i+0xe8>
 8003ee4:	881e      	ldrh	r6, [r3, #0]
 8003ee6:	4854      	ldr	r0, [pc, #336]	; (8004038 <_printf_i+0x244>)
 8003ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8003eea:	bf0c      	ite	eq
 8003eec:	2308      	moveq	r3, #8
 8003eee:	230a      	movne	r3, #10
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ef6:	6865      	ldr	r5, [r4, #4]
 8003ef8:	60a5      	str	r5, [r4, #8]
 8003efa:	2d00      	cmp	r5, #0
 8003efc:	bfa2      	ittt	ge
 8003efe:	6821      	ldrge	r1, [r4, #0]
 8003f00:	f021 0104 	bicge.w	r1, r1, #4
 8003f04:	6021      	strge	r1, [r4, #0]
 8003f06:	b90e      	cbnz	r6, 8003f0c <_printf_i+0x118>
 8003f08:	2d00      	cmp	r5, #0
 8003f0a:	d04d      	beq.n	8003fa8 <_printf_i+0x1b4>
 8003f0c:	4615      	mov	r5, r2
 8003f0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f12:	fb03 6711 	mls	r7, r3, r1, r6
 8003f16:	5dc7      	ldrb	r7, [r0, r7]
 8003f18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f1c:	4637      	mov	r7, r6
 8003f1e:	42bb      	cmp	r3, r7
 8003f20:	460e      	mov	r6, r1
 8003f22:	d9f4      	bls.n	8003f0e <_printf_i+0x11a>
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d10b      	bne.n	8003f40 <_printf_i+0x14c>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	07de      	lsls	r6, r3, #31
 8003f2c:	d508      	bpl.n	8003f40 <_printf_i+0x14c>
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	6861      	ldr	r1, [r4, #4]
 8003f32:	4299      	cmp	r1, r3
 8003f34:	bfde      	ittt	le
 8003f36:	2330      	movle	r3, #48	; 0x30
 8003f38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f40:	1b52      	subs	r2, r2, r5
 8003f42:	6122      	str	r2, [r4, #16]
 8003f44:	f8cd a000 	str.w	sl, [sp]
 8003f48:	464b      	mov	r3, r9
 8003f4a:	aa03      	add	r2, sp, #12
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	4640      	mov	r0, r8
 8003f50:	f7ff fee2 	bl	8003d18 <_printf_common>
 8003f54:	3001      	adds	r0, #1
 8003f56:	d14c      	bne.n	8003ff2 <_printf_i+0x1fe>
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	b004      	add	sp, #16
 8003f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f62:	4835      	ldr	r0, [pc, #212]	; (8004038 <_printf_i+0x244>)
 8003f64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f68:	6829      	ldr	r1, [r5, #0]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f70:	6029      	str	r1, [r5, #0]
 8003f72:	061d      	lsls	r5, r3, #24
 8003f74:	d514      	bpl.n	8003fa0 <_printf_i+0x1ac>
 8003f76:	07df      	lsls	r7, r3, #31
 8003f78:	bf44      	itt	mi
 8003f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f7e:	6023      	strmi	r3, [r4, #0]
 8003f80:	b91e      	cbnz	r6, 8003f8a <_printf_i+0x196>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f023 0320 	bic.w	r3, r3, #32
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	e7b0      	b.n	8003ef0 <_printf_i+0xfc>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f043 0320 	orr.w	r3, r3, #32
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	2378      	movs	r3, #120	; 0x78
 8003f98:	4828      	ldr	r0, [pc, #160]	; (800403c <_printf_i+0x248>)
 8003f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f9e:	e7e3      	b.n	8003f68 <_printf_i+0x174>
 8003fa0:	0659      	lsls	r1, r3, #25
 8003fa2:	bf48      	it	mi
 8003fa4:	b2b6      	uxthmi	r6, r6
 8003fa6:	e7e6      	b.n	8003f76 <_printf_i+0x182>
 8003fa8:	4615      	mov	r5, r2
 8003faa:	e7bb      	b.n	8003f24 <_printf_i+0x130>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	6826      	ldr	r6, [r4, #0]
 8003fb0:	6961      	ldr	r1, [r4, #20]
 8003fb2:	1d18      	adds	r0, r3, #4
 8003fb4:	6028      	str	r0, [r5, #0]
 8003fb6:	0635      	lsls	r5, r6, #24
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	d501      	bpl.n	8003fc0 <_printf_i+0x1cc>
 8003fbc:	6019      	str	r1, [r3, #0]
 8003fbe:	e002      	b.n	8003fc6 <_printf_i+0x1d2>
 8003fc0:	0670      	lsls	r0, r6, #25
 8003fc2:	d5fb      	bpl.n	8003fbc <_printf_i+0x1c8>
 8003fc4:	8019      	strh	r1, [r3, #0]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	4615      	mov	r5, r2
 8003fcc:	e7ba      	b.n	8003f44 <_printf_i+0x150>
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	602a      	str	r2, [r5, #0]
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	6862      	ldr	r2, [r4, #4]
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7fc f900 	bl	80001e0 <memchr>
 8003fe0:	b108      	cbz	r0, 8003fe6 <_printf_i+0x1f2>
 8003fe2:	1b40      	subs	r0, r0, r5
 8003fe4:	6060      	str	r0, [r4, #4]
 8003fe6:	6863      	ldr	r3, [r4, #4]
 8003fe8:	6123      	str	r3, [r4, #16]
 8003fea:	2300      	movs	r3, #0
 8003fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff0:	e7a8      	b.n	8003f44 <_printf_i+0x150>
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	462a      	mov	r2, r5
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	47d0      	blx	sl
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d0ab      	beq.n	8003f58 <_printf_i+0x164>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	079b      	lsls	r3, r3, #30
 8004004:	d413      	bmi.n	800402e <_printf_i+0x23a>
 8004006:	68e0      	ldr	r0, [r4, #12]
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	4298      	cmp	r0, r3
 800400c:	bfb8      	it	lt
 800400e:	4618      	movlt	r0, r3
 8004010:	e7a4      	b.n	8003f5c <_printf_i+0x168>
 8004012:	2301      	movs	r3, #1
 8004014:	4632      	mov	r2, r6
 8004016:	4649      	mov	r1, r9
 8004018:	4640      	mov	r0, r8
 800401a:	47d0      	blx	sl
 800401c:	3001      	adds	r0, #1
 800401e:	d09b      	beq.n	8003f58 <_printf_i+0x164>
 8004020:	3501      	adds	r5, #1
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	9903      	ldr	r1, [sp, #12]
 8004026:	1a5b      	subs	r3, r3, r1
 8004028:	42ab      	cmp	r3, r5
 800402a:	dcf2      	bgt.n	8004012 <_printf_i+0x21e>
 800402c:	e7eb      	b.n	8004006 <_printf_i+0x212>
 800402e:	2500      	movs	r5, #0
 8004030:	f104 0619 	add.w	r6, r4, #25
 8004034:	e7f5      	b.n	8004022 <_printf_i+0x22e>
 8004036:	bf00      	nop
 8004038:	080043d9 	.word	0x080043d9
 800403c:	080043ea 	.word	0x080043ea

08004040 <memcpy>:
 8004040:	440a      	add	r2, r1
 8004042:	4291      	cmp	r1, r2
 8004044:	f100 33ff 	add.w	r3, r0, #4294967295
 8004048:	d100      	bne.n	800404c <memcpy+0xc>
 800404a:	4770      	bx	lr
 800404c:	b510      	push	{r4, lr}
 800404e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004056:	4291      	cmp	r1, r2
 8004058:	d1f9      	bne.n	800404e <memcpy+0xe>
 800405a:	bd10      	pop	{r4, pc}

0800405c <memmove>:
 800405c:	4288      	cmp	r0, r1
 800405e:	b510      	push	{r4, lr}
 8004060:	eb01 0402 	add.w	r4, r1, r2
 8004064:	d902      	bls.n	800406c <memmove+0x10>
 8004066:	4284      	cmp	r4, r0
 8004068:	4623      	mov	r3, r4
 800406a:	d807      	bhi.n	800407c <memmove+0x20>
 800406c:	1e43      	subs	r3, r0, #1
 800406e:	42a1      	cmp	r1, r4
 8004070:	d008      	beq.n	8004084 <memmove+0x28>
 8004072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800407a:	e7f8      	b.n	800406e <memmove+0x12>
 800407c:	4402      	add	r2, r0
 800407e:	4601      	mov	r1, r0
 8004080:	428a      	cmp	r2, r1
 8004082:	d100      	bne.n	8004086 <memmove+0x2a>
 8004084:	bd10      	pop	{r4, pc}
 8004086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800408a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800408e:	e7f7      	b.n	8004080 <memmove+0x24>

08004090 <_free_r>:
 8004090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004092:	2900      	cmp	r1, #0
 8004094:	d044      	beq.n	8004120 <_free_r+0x90>
 8004096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409a:	9001      	str	r0, [sp, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f1a1 0404 	sub.w	r4, r1, #4
 80040a2:	bfb8      	it	lt
 80040a4:	18e4      	addlt	r4, r4, r3
 80040a6:	f000 f913 	bl	80042d0 <__malloc_lock>
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <_free_r+0x94>)
 80040ac:	9801      	ldr	r0, [sp, #4]
 80040ae:	6813      	ldr	r3, [r2, #0]
 80040b0:	b933      	cbnz	r3, 80040c0 <_free_r+0x30>
 80040b2:	6063      	str	r3, [r4, #4]
 80040b4:	6014      	str	r4, [r2, #0]
 80040b6:	b003      	add	sp, #12
 80040b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040bc:	f000 b90e 	b.w	80042dc <__malloc_unlock>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d908      	bls.n	80040d6 <_free_r+0x46>
 80040c4:	6825      	ldr	r5, [r4, #0]
 80040c6:	1961      	adds	r1, r4, r5
 80040c8:	428b      	cmp	r3, r1
 80040ca:	bf01      	itttt	eq
 80040cc:	6819      	ldreq	r1, [r3, #0]
 80040ce:	685b      	ldreq	r3, [r3, #4]
 80040d0:	1949      	addeq	r1, r1, r5
 80040d2:	6021      	streq	r1, [r4, #0]
 80040d4:	e7ed      	b.n	80040b2 <_free_r+0x22>
 80040d6:	461a      	mov	r2, r3
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b10b      	cbz	r3, 80040e0 <_free_r+0x50>
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d9fa      	bls.n	80040d6 <_free_r+0x46>
 80040e0:	6811      	ldr	r1, [r2, #0]
 80040e2:	1855      	adds	r5, r2, r1
 80040e4:	42a5      	cmp	r5, r4
 80040e6:	d10b      	bne.n	8004100 <_free_r+0x70>
 80040e8:	6824      	ldr	r4, [r4, #0]
 80040ea:	4421      	add	r1, r4
 80040ec:	1854      	adds	r4, r2, r1
 80040ee:	42a3      	cmp	r3, r4
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	d1e0      	bne.n	80040b6 <_free_r+0x26>
 80040f4:	681c      	ldr	r4, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	6053      	str	r3, [r2, #4]
 80040fa:	4421      	add	r1, r4
 80040fc:	6011      	str	r1, [r2, #0]
 80040fe:	e7da      	b.n	80040b6 <_free_r+0x26>
 8004100:	d902      	bls.n	8004108 <_free_r+0x78>
 8004102:	230c      	movs	r3, #12
 8004104:	6003      	str	r3, [r0, #0]
 8004106:	e7d6      	b.n	80040b6 <_free_r+0x26>
 8004108:	6825      	ldr	r5, [r4, #0]
 800410a:	1961      	adds	r1, r4, r5
 800410c:	428b      	cmp	r3, r1
 800410e:	bf04      	itt	eq
 8004110:	6819      	ldreq	r1, [r3, #0]
 8004112:	685b      	ldreq	r3, [r3, #4]
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	bf04      	itt	eq
 8004118:	1949      	addeq	r1, r1, r5
 800411a:	6021      	streq	r1, [r4, #0]
 800411c:	6054      	str	r4, [r2, #4]
 800411e:	e7ca      	b.n	80040b6 <_free_r+0x26>
 8004120:	b003      	add	sp, #12
 8004122:	bd30      	pop	{r4, r5, pc}
 8004124:	2000016c 	.word	0x2000016c

08004128 <sbrk_aligned>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4e0e      	ldr	r6, [pc, #56]	; (8004164 <sbrk_aligned+0x3c>)
 800412c:	460c      	mov	r4, r1
 800412e:	6831      	ldr	r1, [r6, #0]
 8004130:	4605      	mov	r5, r0
 8004132:	b911      	cbnz	r1, 800413a <sbrk_aligned+0x12>
 8004134:	f000 f8bc 	bl	80042b0 <_sbrk_r>
 8004138:	6030      	str	r0, [r6, #0]
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 f8b7 	bl	80042b0 <_sbrk_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d00a      	beq.n	800415c <sbrk_aligned+0x34>
 8004146:	1cc4      	adds	r4, r0, #3
 8004148:	f024 0403 	bic.w	r4, r4, #3
 800414c:	42a0      	cmp	r0, r4
 800414e:	d007      	beq.n	8004160 <sbrk_aligned+0x38>
 8004150:	1a21      	subs	r1, r4, r0
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f8ac 	bl	80042b0 <_sbrk_r>
 8004158:	3001      	adds	r0, #1
 800415a:	d101      	bne.n	8004160 <sbrk_aligned+0x38>
 800415c:	f04f 34ff 	mov.w	r4, #4294967295
 8004160:	4620      	mov	r0, r4
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	20000170 	.word	0x20000170

08004168 <_malloc_r>:
 8004168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800416c:	1ccd      	adds	r5, r1, #3
 800416e:	f025 0503 	bic.w	r5, r5, #3
 8004172:	3508      	adds	r5, #8
 8004174:	2d0c      	cmp	r5, #12
 8004176:	bf38      	it	cc
 8004178:	250c      	movcc	r5, #12
 800417a:	2d00      	cmp	r5, #0
 800417c:	4607      	mov	r7, r0
 800417e:	db01      	blt.n	8004184 <_malloc_r+0x1c>
 8004180:	42a9      	cmp	r1, r5
 8004182:	d905      	bls.n	8004190 <_malloc_r+0x28>
 8004184:	230c      	movs	r3, #12
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	2600      	movs	r6, #0
 800418a:	4630      	mov	r0, r6
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004190:	4e2e      	ldr	r6, [pc, #184]	; (800424c <_malloc_r+0xe4>)
 8004192:	f000 f89d 	bl	80042d0 <__malloc_lock>
 8004196:	6833      	ldr	r3, [r6, #0]
 8004198:	461c      	mov	r4, r3
 800419a:	bb34      	cbnz	r4, 80041ea <_malloc_r+0x82>
 800419c:	4629      	mov	r1, r5
 800419e:	4638      	mov	r0, r7
 80041a0:	f7ff ffc2 	bl	8004128 <sbrk_aligned>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	4604      	mov	r4, r0
 80041a8:	d14d      	bne.n	8004246 <_malloc_r+0xde>
 80041aa:	6834      	ldr	r4, [r6, #0]
 80041ac:	4626      	mov	r6, r4
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	d140      	bne.n	8004234 <_malloc_r+0xcc>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	4631      	mov	r1, r6
 80041b6:	4638      	mov	r0, r7
 80041b8:	eb04 0803 	add.w	r8, r4, r3
 80041bc:	f000 f878 	bl	80042b0 <_sbrk_r>
 80041c0:	4580      	cmp	r8, r0
 80041c2:	d13a      	bne.n	800423a <_malloc_r+0xd2>
 80041c4:	6821      	ldr	r1, [r4, #0]
 80041c6:	3503      	adds	r5, #3
 80041c8:	1a6d      	subs	r5, r5, r1
 80041ca:	f025 0503 	bic.w	r5, r5, #3
 80041ce:	3508      	adds	r5, #8
 80041d0:	2d0c      	cmp	r5, #12
 80041d2:	bf38      	it	cc
 80041d4:	250c      	movcc	r5, #12
 80041d6:	4629      	mov	r1, r5
 80041d8:	4638      	mov	r0, r7
 80041da:	f7ff ffa5 	bl	8004128 <sbrk_aligned>
 80041de:	3001      	adds	r0, #1
 80041e0:	d02b      	beq.n	800423a <_malloc_r+0xd2>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	442b      	add	r3, r5
 80041e6:	6023      	str	r3, [r4, #0]
 80041e8:	e00e      	b.n	8004208 <_malloc_r+0xa0>
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	1b52      	subs	r2, r2, r5
 80041ee:	d41e      	bmi.n	800422e <_malloc_r+0xc6>
 80041f0:	2a0b      	cmp	r2, #11
 80041f2:	d916      	bls.n	8004222 <_malloc_r+0xba>
 80041f4:	1961      	adds	r1, r4, r5
 80041f6:	42a3      	cmp	r3, r4
 80041f8:	6025      	str	r5, [r4, #0]
 80041fa:	bf18      	it	ne
 80041fc:	6059      	strne	r1, [r3, #4]
 80041fe:	6863      	ldr	r3, [r4, #4]
 8004200:	bf08      	it	eq
 8004202:	6031      	streq	r1, [r6, #0]
 8004204:	5162      	str	r2, [r4, r5]
 8004206:	604b      	str	r3, [r1, #4]
 8004208:	4638      	mov	r0, r7
 800420a:	f104 060b 	add.w	r6, r4, #11
 800420e:	f000 f865 	bl	80042dc <__malloc_unlock>
 8004212:	f026 0607 	bic.w	r6, r6, #7
 8004216:	1d23      	adds	r3, r4, #4
 8004218:	1af2      	subs	r2, r6, r3
 800421a:	d0b6      	beq.n	800418a <_malloc_r+0x22>
 800421c:	1b9b      	subs	r3, r3, r6
 800421e:	50a3      	str	r3, [r4, r2]
 8004220:	e7b3      	b.n	800418a <_malloc_r+0x22>
 8004222:	6862      	ldr	r2, [r4, #4]
 8004224:	42a3      	cmp	r3, r4
 8004226:	bf0c      	ite	eq
 8004228:	6032      	streq	r2, [r6, #0]
 800422a:	605a      	strne	r2, [r3, #4]
 800422c:	e7ec      	b.n	8004208 <_malloc_r+0xa0>
 800422e:	4623      	mov	r3, r4
 8004230:	6864      	ldr	r4, [r4, #4]
 8004232:	e7b2      	b.n	800419a <_malloc_r+0x32>
 8004234:	4634      	mov	r4, r6
 8004236:	6876      	ldr	r6, [r6, #4]
 8004238:	e7b9      	b.n	80041ae <_malloc_r+0x46>
 800423a:	230c      	movs	r3, #12
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4638      	mov	r0, r7
 8004240:	f000 f84c 	bl	80042dc <__malloc_unlock>
 8004244:	e7a1      	b.n	800418a <_malloc_r+0x22>
 8004246:	6025      	str	r5, [r4, #0]
 8004248:	e7de      	b.n	8004208 <_malloc_r+0xa0>
 800424a:	bf00      	nop
 800424c:	2000016c 	.word	0x2000016c

08004250 <_realloc_r>:
 8004250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004254:	4680      	mov	r8, r0
 8004256:	4614      	mov	r4, r2
 8004258:	460e      	mov	r6, r1
 800425a:	b921      	cbnz	r1, 8004266 <_realloc_r+0x16>
 800425c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004260:	4611      	mov	r1, r2
 8004262:	f7ff bf81 	b.w	8004168 <_malloc_r>
 8004266:	b92a      	cbnz	r2, 8004274 <_realloc_r+0x24>
 8004268:	f7ff ff12 	bl	8004090 <_free_r>
 800426c:	4625      	mov	r5, r4
 800426e:	4628      	mov	r0, r5
 8004270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004274:	f000 f838 	bl	80042e8 <_malloc_usable_size_r>
 8004278:	4284      	cmp	r4, r0
 800427a:	4607      	mov	r7, r0
 800427c:	d802      	bhi.n	8004284 <_realloc_r+0x34>
 800427e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004282:	d812      	bhi.n	80042aa <_realloc_r+0x5a>
 8004284:	4621      	mov	r1, r4
 8004286:	4640      	mov	r0, r8
 8004288:	f7ff ff6e 	bl	8004168 <_malloc_r>
 800428c:	4605      	mov	r5, r0
 800428e:	2800      	cmp	r0, #0
 8004290:	d0ed      	beq.n	800426e <_realloc_r+0x1e>
 8004292:	42bc      	cmp	r4, r7
 8004294:	4622      	mov	r2, r4
 8004296:	4631      	mov	r1, r6
 8004298:	bf28      	it	cs
 800429a:	463a      	movcs	r2, r7
 800429c:	f7ff fed0 	bl	8004040 <memcpy>
 80042a0:	4631      	mov	r1, r6
 80042a2:	4640      	mov	r0, r8
 80042a4:	f7ff fef4 	bl	8004090 <_free_r>
 80042a8:	e7e1      	b.n	800426e <_realloc_r+0x1e>
 80042aa:	4635      	mov	r5, r6
 80042ac:	e7df      	b.n	800426e <_realloc_r+0x1e>
	...

080042b0 <_sbrk_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4d06      	ldr	r5, [pc, #24]	; (80042cc <_sbrk_r+0x1c>)
 80042b4:	2300      	movs	r3, #0
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	f7fc fc64 	bl	8000b88 <_sbrk>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_sbrk_r+0x1a>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_sbrk_r+0x1a>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	20000174 	.word	0x20000174

080042d0 <__malloc_lock>:
 80042d0:	4801      	ldr	r0, [pc, #4]	; (80042d8 <__malloc_lock+0x8>)
 80042d2:	f000 b811 	b.w	80042f8 <__retarget_lock_acquire_recursive>
 80042d6:	bf00      	nop
 80042d8:	20000178 	.word	0x20000178

080042dc <__malloc_unlock>:
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <__malloc_unlock+0x8>)
 80042de:	f000 b80c 	b.w	80042fa <__retarget_lock_release_recursive>
 80042e2:	bf00      	nop
 80042e4:	20000178 	.word	0x20000178

080042e8 <_malloc_usable_size_r>:
 80042e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ec:	1f18      	subs	r0, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bfbc      	itt	lt
 80042f2:	580b      	ldrlt	r3, [r1, r0]
 80042f4:	18c0      	addlt	r0, r0, r3
 80042f6:	4770      	bx	lr

080042f8 <__retarget_lock_acquire_recursive>:
 80042f8:	4770      	bx	lr

080042fa <__retarget_lock_release_recursive>:
 80042fa:	4770      	bx	lr

080042fc <_init>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

08004308 <_fini>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr
