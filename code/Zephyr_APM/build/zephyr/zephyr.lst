
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	18 1a 02 20 15 38 02 00 e3 dd 03 00 99 37 02 00     ... .8.......7..
   1c210:	99 37 02 00 99 37 02 00 99 37 02 00 99 37 02 00     .7...7...7...7..
	...
   1c22c:	5d 32 02 00 99 37 02 00 00 00 00 00 c5 31 02 00     ]2...7.......1..
   1c23c:	99 37 02 00                                         .7..

0001c240 <_irq_vector_table>:
   1c240:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c250:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c260:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c270:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c280:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c290:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c2a0:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c2b0:	47 f4 03 00 01 33 02 00 01 33 02 00 01 33 02 00     G....3...3...3..
   1c2c0:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c2d0:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c2e0:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c2f0:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c300:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c310:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c320:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c330:	01 33 02 00 01 33 02 00 01 33 02 00 01 33 02 00     .3...3...3...3..
   1c340:	01 33 02 00                                         .3..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   1c410:	bc 13 03 00 01 00 00 00 00 c2 01 00 00 c2 01 00     ................
   1c420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_dcmpun>:
   1ccec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ccf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ccf4:	d102      	bne.n	1ccfc <__aeabi_dcmpun+0x10>
   1ccf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1ccfa:	d10a      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1ccfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cd00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cd04:	d102      	bne.n	1cd0c <__aeabi_dcmpun+0x20>
   1cd06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cd0a:	d102      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1cd0c:	f04f 0000 	mov.w	r0, #0
   1cd10:	4770      	bx	lr
   1cd12:	f04f 0001 	mov.w	r0, #1
   1cd16:	4770      	bx	lr

0001cd18 <__aeabi_d2iz>:
   1cd18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd20:	d215      	bcs.n	1cd4e <__aeabi_d2iz+0x36>
   1cd22:	d511      	bpl.n	1cd48 <__aeabi_d2iz+0x30>
   1cd24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd2c:	d912      	bls.n	1cd54 <__aeabi_d2iz+0x3c>
   1cd2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd3e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd42:	bf18      	it	ne
   1cd44:	4240      	negne	r0, r0
   1cd46:	4770      	bx	lr
   1cd48:	f04f 0000 	mov.w	r0, #0
   1cd4c:	4770      	bx	lr
   1cd4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd52:	d105      	bne.n	1cd60 <__aeabi_d2iz+0x48>
   1cd54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd58:	bf08      	it	eq
   1cd5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd5e:	4770      	bx	lr
   1cd60:	f04f 0000 	mov.w	r0, #0
   1cd64:	4770      	bx	lr
   1cd66:	bf00      	nop

0001cd68 <__aeabi_d2uiz>:
   1cd68:	004a      	lsls	r2, r1, #1
   1cd6a:	d211      	bcs.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd70:	d211      	bcs.n	1cd96 <__aeabi_d2uiz+0x2e>
   1cd72:	d50d      	bpl.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd7c:	d40e      	bmi.n	1cd9c <__aeabi_d2uiz+0x34>
   1cd7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd8a:	fa23 f002 	lsr.w	r0, r3, r2
   1cd8e:	4770      	bx	lr
   1cd90:	f04f 0000 	mov.w	r0, #0
   1cd94:	4770      	bx	lr
   1cd96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd9a:	d102      	bne.n	1cda2 <__aeabi_d2uiz+0x3a>
   1cd9c:	f04f 30ff 	mov.w	r0, #4294967295
   1cda0:	4770      	bx	lr
   1cda2:	f04f 0000 	mov.w	r0, #0
   1cda6:	4770      	bx	lr

0001cda8 <__aeabi_d2f>:
   1cda8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cdac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cdb0:	bf24      	itt	cs
   1cdb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cdb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cdba:	d90d      	bls.n	1cdd8 <__aeabi_d2f+0x30>
   1cdbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cdc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cdc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cdc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cdcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cdd0:	bf08      	it	eq
   1cdd2:	f020 0001 	biceq.w	r0, r0, #1
   1cdd6:	4770      	bx	lr
   1cdd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cddc:	d121      	bne.n	1ce22 <__aeabi_d2f+0x7a>
   1cdde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cde2:	bfbc      	itt	lt
   1cde4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cde8:	4770      	bxlt	lr
   1cdea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdf2:	f1c2 0218 	rsb	r2, r2, #24
   1cdf6:	f1c2 0c20 	rsb	ip, r2, #32
   1cdfa:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdfe:	fa20 f002 	lsr.w	r0, r0, r2
   1ce02:	bf18      	it	ne
   1ce04:	f040 0001 	orrne.w	r0, r0, #1
   1ce08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ce0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ce10:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ce14:	ea40 000c 	orr.w	r0, r0, ip
   1ce18:	fa23 f302 	lsr.w	r3, r3, r2
   1ce1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ce20:	e7cc      	b.n	1cdbc <__aeabi_d2f+0x14>
   1ce22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ce26:	d107      	bne.n	1ce38 <__aeabi_d2f+0x90>
   1ce28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce2c:	bf1e      	ittt	ne
   1ce2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce36:	4770      	bxne	lr
   1ce38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce44:	4770      	bx	lr
   1ce46:	bf00      	nop

0001ce48 <__aeabi_ldivmod>:
   1ce48:	b97b      	cbnz	r3, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4a:	b972      	cbnz	r2, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4c:	2900      	cmp	r1, #0
   1ce4e:	bfbe      	ittt	lt
   1ce50:	2000      	movlt	r0, #0
   1ce52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce56:	e006      	blt.n	1ce66 <__aeabi_ldivmod+0x1e>
   1ce58:	bf08      	it	eq
   1ce5a:	2800      	cmpeq	r0, #0
   1ce5c:	bf1c      	itt	ne
   1ce5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce62:	f04f 30ff 	movne.w	r0, #4294967295
   1ce66:	f000 b875 	b.w	1cf54 <__aeabi_idiv0>
   1ce6a:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce72:	2900      	cmp	r1, #0
   1ce74:	db09      	blt.n	1ce8a <__aeabi_ldivmod+0x42>
   1ce76:	2b00      	cmp	r3, #0
   1ce78:	db1a      	blt.n	1ceb0 <__aeabi_ldivmod+0x68>
   1ce7a:	f000 f884 	bl	1cf86 <__udivmoddi4>
   1ce7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce86:	b004      	add	sp, #16
   1ce88:	4770      	bx	lr
   1ce8a:	4240      	negs	r0, r0
   1ce8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	db1b      	blt.n	1cecc <__aeabi_ldivmod+0x84>
   1ce94:	f000 f877 	bl	1cf86 <__udivmoddi4>
   1ce98:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cea0:	b004      	add	sp, #16
   1cea2:	4240      	negs	r0, r0
   1cea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cea8:	4252      	negs	r2, r2
   1ceaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceae:	4770      	bx	lr
   1ceb0:	4252      	negs	r2, r2
   1ceb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceb6:	f000 f866 	bl	1cf86 <__udivmoddi4>
   1ceba:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cec2:	b004      	add	sp, #16
   1cec4:	4240      	negs	r0, r0
   1cec6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ceca:	4770      	bx	lr
   1cecc:	4252      	negs	r2, r2
   1cece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ced2:	f000 f858 	bl	1cf86 <__udivmoddi4>
   1ced6:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cede:	b004      	add	sp, #16
   1cee0:	4252      	negs	r2, r2
   1cee2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cee6:	4770      	bx	lr

0001cee8 <__aeabi_uldivmod>:
   1cee8:	b953      	cbnz	r3, 1cf00 <__aeabi_uldivmod+0x18>
   1ceea:	b94a      	cbnz	r2, 1cf00 <__aeabi_uldivmod+0x18>
   1ceec:	2900      	cmp	r1, #0
   1ceee:	bf08      	it	eq
   1cef0:	2800      	cmpeq	r0, #0
   1cef2:	bf1c      	itt	ne
   1cef4:	f04f 31ff 	movne.w	r1, #4294967295
   1cef8:	f04f 30ff 	movne.w	r0, #4294967295
   1cefc:	f000 b82a 	b.w	1cf54 <__aeabi_idiv0>
   1cf00:	f1ad 0c08 	sub.w	ip, sp, #8
   1cf04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cf08:	f000 f83d 	bl	1cf86 <__udivmoddi4>
   1cf0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf14:	b004      	add	sp, #16
   1cf16:	4770      	bx	lr

0001cf18 <__aeabi_d2ulz>:
   1cf18:	b5d0      	push	{r4, r6, r7, lr}
   1cf1a:	2200      	movs	r2, #0
   1cf1c:	4b0b      	ldr	r3, [pc, #44]	; (1cf4c <__aeabi_d2ulz+0x34>)
   1cf1e:	4606      	mov	r6, r0
   1cf20:	460f      	mov	r7, r1
   1cf22:	f7ff fc49 	bl	1c7b8 <__aeabi_dmul>
   1cf26:	f7ff ff1f 	bl	1cd68 <__aeabi_d2uiz>
   1cf2a:	4604      	mov	r4, r0
   1cf2c:	f7ff fbca 	bl	1c6c4 <__aeabi_ui2d>
   1cf30:	2200      	movs	r2, #0
   1cf32:	4b07      	ldr	r3, [pc, #28]	; (1cf50 <__aeabi_d2ulz+0x38>)
   1cf34:	f7ff fc40 	bl	1c7b8 <__aeabi_dmul>
   1cf38:	4602      	mov	r2, r0
   1cf3a:	460b      	mov	r3, r1
   1cf3c:	4630      	mov	r0, r6
   1cf3e:	4639      	mov	r1, r7
   1cf40:	f7ff fa82 	bl	1c448 <__aeabi_dsub>
   1cf44:	f7ff ff10 	bl	1cd68 <__aeabi_d2uiz>
   1cf48:	4621      	mov	r1, r4
   1cf4a:	bdd0      	pop	{r4, r6, r7, pc}
   1cf4c:	3df00000 	.word	0x3df00000
   1cf50:	41f00000 	.word	0x41f00000

0001cf54 <__aeabi_idiv0>:
   1cf54:	4770      	bx	lr
   1cf56:	bf00      	nop

0001cf58 <__aeabi_d2lz>:
   1cf58:	b538      	push	{r3, r4, r5, lr}
   1cf5a:	2200      	movs	r2, #0
   1cf5c:	2300      	movs	r3, #0
   1cf5e:	4604      	mov	r4, r0
   1cf60:	460d      	mov	r5, r1
   1cf62:	f7ff fe9b 	bl	1cc9c <__aeabi_dcmplt>
   1cf66:	b928      	cbnz	r0, 1cf74 <__aeabi_d2lz+0x1c>
   1cf68:	4620      	mov	r0, r4
   1cf6a:	4629      	mov	r1, r5
   1cf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cf70:	f7ff bfd2 	b.w	1cf18 <__aeabi_d2ulz>
   1cf74:	4620      	mov	r0, r4
   1cf76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1cf7a:	f7ff ffcd 	bl	1cf18 <__aeabi_d2ulz>
   1cf7e:	4240      	negs	r0, r0
   1cf80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf84:	bd38      	pop	{r3, r4, r5, pc}

0001cf86 <__udivmoddi4>:
   1cf86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cf8c:	4688      	mov	r8, r1
   1cf8e:	468e      	mov	lr, r1
   1cf90:	4615      	mov	r5, r2
   1cf92:	4604      	mov	r4, r0
   1cf94:	4619      	mov	r1, r3
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	f040 80c6 	bne.w	1d128 <__udivmoddi4+0x1a2>
   1cf9c:	4542      	cmp	r2, r8
   1cf9e:	fab2 f782 	clz	r7, r2
   1cfa2:	d946      	bls.n	1d032 <__udivmoddi4+0xac>
   1cfa4:	b14f      	cbz	r7, 1cfba <__udivmoddi4+0x34>
   1cfa6:	f1c7 0c20 	rsb	ip, r7, #32
   1cfaa:	fa08 f307 	lsl.w	r3, r8, r7
   1cfae:	40bd      	lsls	r5, r7
   1cfb0:	40bc      	lsls	r4, r7
   1cfb2:	fa20 fc0c 	lsr.w	ip, r0, ip
   1cfb6:	ea4c 0e03 	orr.w	lr, ip, r3
   1cfba:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1cfbe:	fa1f fc85 	uxth.w	ip, r5
   1cfc2:	0c22      	lsrs	r2, r4, #16
   1cfc4:	fbbe f9f8 	udiv	r9, lr, r8
   1cfc8:	fb08 e319 	mls	r3, r8, r9, lr
   1cfcc:	fb09 fa0c 	mul.w	sl, r9, ip
   1cfd0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   1cfd4:	459a      	cmp	sl, r3
   1cfd6:	d928      	bls.n	1d02a <__udivmoddi4+0xa4>
   1cfd8:	18eb      	adds	r3, r5, r3
   1cfda:	f109 30ff 	add.w	r0, r9, #4294967295
   1cfde:	d204      	bcs.n	1cfea <__udivmoddi4+0x64>
   1cfe0:	459a      	cmp	sl, r3
   1cfe2:	d902      	bls.n	1cfea <__udivmoddi4+0x64>
   1cfe4:	f1a9 0002 	sub.w	r0, r9, #2
   1cfe8:	442b      	add	r3, r5
   1cfea:	eba3 030a 	sub.w	r3, r3, sl
   1cfee:	b2a4      	uxth	r4, r4
   1cff0:	fbb3 f2f8 	udiv	r2, r3, r8
   1cff4:	fb08 3312 	mls	r3, r8, r2, r3
   1cff8:	fb02 fc0c 	mul.w	ip, r2, ip
   1cffc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d000:	45a4      	cmp	ip, r4
   1d002:	d914      	bls.n	1d02e <__udivmoddi4+0xa8>
   1d004:	192c      	adds	r4, r5, r4
   1d006:	f102 33ff 	add.w	r3, r2, #4294967295
   1d00a:	d203      	bcs.n	1d014 <__udivmoddi4+0x8e>
   1d00c:	45a4      	cmp	ip, r4
   1d00e:	d901      	bls.n	1d014 <__udivmoddi4+0x8e>
   1d010:	1e93      	subs	r3, r2, #2
   1d012:	442c      	add	r4, r5
   1d014:	eba4 040c 	sub.w	r4, r4, ip
   1d018:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1d01c:	b11e      	cbz	r6, 1d026 <__udivmoddi4+0xa0>
   1d01e:	40fc      	lsrs	r4, r7
   1d020:	2300      	movs	r3, #0
   1d022:	6034      	str	r4, [r6, #0]
   1d024:	6073      	str	r3, [r6, #4]
   1d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d02a:	4648      	mov	r0, r9
   1d02c:	e7dd      	b.n	1cfea <__udivmoddi4+0x64>
   1d02e:	4613      	mov	r3, r2
   1d030:	e7f0      	b.n	1d014 <__udivmoddi4+0x8e>
   1d032:	b902      	cbnz	r2, 1d036 <__udivmoddi4+0xb0>
   1d034:	deff      	udf	#255	; 0xff
   1d036:	bb8f      	cbnz	r7, 1d09c <__udivmoddi4+0x116>
   1d038:	eba8 0302 	sub.w	r3, r8, r2
   1d03c:	2101      	movs	r1, #1
   1d03e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d042:	b2aa      	uxth	r2, r5
   1d044:	0c20      	lsrs	r0, r4, #16
   1d046:	fbb3 fcfe 	udiv	ip, r3, lr
   1d04a:	fb0e 331c 	mls	r3, lr, ip, r3
   1d04e:	fb0c f802 	mul.w	r8, ip, r2
   1d052:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1d056:	4598      	cmp	r8, r3
   1d058:	d962      	bls.n	1d120 <__udivmoddi4+0x19a>
   1d05a:	18eb      	adds	r3, r5, r3
   1d05c:	f10c 30ff 	add.w	r0, ip, #4294967295
   1d060:	d204      	bcs.n	1d06c <__udivmoddi4+0xe6>
   1d062:	4598      	cmp	r8, r3
   1d064:	d902      	bls.n	1d06c <__udivmoddi4+0xe6>
   1d066:	f1ac 0002 	sub.w	r0, ip, #2
   1d06a:	442b      	add	r3, r5
   1d06c:	eba3 0308 	sub.w	r3, r3, r8
   1d070:	b2a4      	uxth	r4, r4
   1d072:	fbb3 fcfe 	udiv	ip, r3, lr
   1d076:	fb0e 331c 	mls	r3, lr, ip, r3
   1d07a:	fb0c f202 	mul.w	r2, ip, r2
   1d07e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d082:	42a2      	cmp	r2, r4
   1d084:	d94e      	bls.n	1d124 <__udivmoddi4+0x19e>
   1d086:	192c      	adds	r4, r5, r4
   1d088:	f10c 33ff 	add.w	r3, ip, #4294967295
   1d08c:	d204      	bcs.n	1d098 <__udivmoddi4+0x112>
   1d08e:	42a2      	cmp	r2, r4
   1d090:	d902      	bls.n	1d098 <__udivmoddi4+0x112>
   1d092:	f1ac 0302 	sub.w	r3, ip, #2
   1d096:	442c      	add	r4, r5
   1d098:	1aa4      	subs	r4, r4, r2
   1d09a:	e7bd      	b.n	1d018 <__udivmoddi4+0x92>
   1d09c:	f1c7 0c20 	rsb	ip, r7, #32
   1d0a0:	40bd      	lsls	r5, r7
   1d0a2:	fa08 f307 	lsl.w	r3, r8, r7
   1d0a6:	40bc      	lsls	r4, r7
   1d0a8:	fa28 f90c 	lsr.w	r9, r8, ip
   1d0ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d0b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1d0b4:	ea4c 0203 	orr.w	r2, ip, r3
   1d0b8:	b2ab      	uxth	r3, r5
   1d0ba:	fbb9 fcfe 	udiv	ip, r9, lr
   1d0be:	0c11      	lsrs	r1, r2, #16
   1d0c0:	fb0e 901c 	mls	r0, lr, ip, r9
   1d0c4:	fb0c f803 	mul.w	r8, ip, r3
   1d0c8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d0cc:	4580      	cmp	r8, r0
   1d0ce:	d923      	bls.n	1d118 <__udivmoddi4+0x192>
   1d0d0:	1828      	adds	r0, r5, r0
   1d0d2:	f10c 31ff 	add.w	r1, ip, #4294967295
   1d0d6:	d204      	bcs.n	1d0e2 <__udivmoddi4+0x15c>
   1d0d8:	4580      	cmp	r8, r0
   1d0da:	d902      	bls.n	1d0e2 <__udivmoddi4+0x15c>
   1d0dc:	f1ac 0102 	sub.w	r1, ip, #2
   1d0e0:	4428      	add	r0, r5
   1d0e2:	eba0 0008 	sub.w	r0, r0, r8
   1d0e6:	b292      	uxth	r2, r2
   1d0e8:	fbb0 fcfe 	udiv	ip, r0, lr
   1d0ec:	fb0e 001c 	mls	r0, lr, ip, r0
   1d0f0:	fb0c f803 	mul.w	r8, ip, r3
   1d0f4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   1d0f8:	4598      	cmp	r8, r3
   1d0fa:	d90f      	bls.n	1d11c <__udivmoddi4+0x196>
   1d0fc:	18eb      	adds	r3, r5, r3
   1d0fe:	f10c 32ff 	add.w	r2, ip, #4294967295
   1d102:	d204      	bcs.n	1d10e <__udivmoddi4+0x188>
   1d104:	4598      	cmp	r8, r3
   1d106:	d902      	bls.n	1d10e <__udivmoddi4+0x188>
   1d108:	f1ac 0202 	sub.w	r2, ip, #2
   1d10c:	442b      	add	r3, r5
   1d10e:	eba3 0308 	sub.w	r3, r3, r8
   1d112:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1d116:	e792      	b.n	1d03e <__udivmoddi4+0xb8>
   1d118:	4661      	mov	r1, ip
   1d11a:	e7e2      	b.n	1d0e2 <__udivmoddi4+0x15c>
   1d11c:	4662      	mov	r2, ip
   1d11e:	e7f6      	b.n	1d10e <__udivmoddi4+0x188>
   1d120:	4660      	mov	r0, ip
   1d122:	e7a3      	b.n	1d06c <__udivmoddi4+0xe6>
   1d124:	4663      	mov	r3, ip
   1d126:	e7b7      	b.n	1d098 <__udivmoddi4+0x112>
   1d128:	4543      	cmp	r3, r8
   1d12a:	d905      	bls.n	1d138 <__udivmoddi4+0x1b2>
   1d12c:	b10e      	cbz	r6, 1d132 <__udivmoddi4+0x1ac>
   1d12e:	e9c6 0800 	strd	r0, r8, [r6]
   1d132:	2100      	movs	r1, #0
   1d134:	4608      	mov	r0, r1
   1d136:	e776      	b.n	1d026 <__udivmoddi4+0xa0>
   1d138:	fab3 fc83 	clz	ip, r3
   1d13c:	f1bc 0f00 	cmp.w	ip, #0
   1d140:	d110      	bne.n	1d164 <__udivmoddi4+0x1de>
   1d142:	4543      	cmp	r3, r8
   1d144:	d301      	bcc.n	1d14a <__udivmoddi4+0x1c4>
   1d146:	4282      	cmp	r2, r0
   1d148:	d80a      	bhi.n	1d160 <__udivmoddi4+0x1da>
   1d14a:	1a84      	subs	r4, r0, r2
   1d14c:	eb68 0303 	sbc.w	r3, r8, r3
   1d150:	2001      	movs	r0, #1
   1d152:	469e      	mov	lr, r3
   1d154:	2e00      	cmp	r6, #0
   1d156:	d068      	beq.n	1d22a <__udivmoddi4+0x2a4>
   1d158:	e9c6 4e00 	strd	r4, lr, [r6]
   1d15c:	2100      	movs	r1, #0
   1d15e:	e762      	b.n	1d026 <__udivmoddi4+0xa0>
   1d160:	4660      	mov	r0, ip
   1d162:	e7f7      	b.n	1d154 <__udivmoddi4+0x1ce>
   1d164:	f1cc 0e20 	rsb	lr, ip, #32
   1d168:	fa03 f30c 	lsl.w	r3, r3, ip
   1d16c:	fa02 f50c 	lsl.w	r5, r2, ip
   1d170:	fa00 f70c 	lsl.w	r7, r0, ip
   1d174:	fa22 f40e 	lsr.w	r4, r2, lr
   1d178:	fa28 fb0e 	lsr.w	fp, r8, lr
   1d17c:	fa20 f10e 	lsr.w	r1, r0, lr
   1d180:	431c      	orrs	r4, r3
   1d182:	fa08 f30c 	lsl.w	r3, r8, ip
   1d186:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1d18a:	4319      	orrs	r1, r3
   1d18c:	b2a3      	uxth	r3, r4
   1d18e:	0c0a      	lsrs	r2, r1, #16
   1d190:	fbbb f8f9 	udiv	r8, fp, r9
   1d194:	fb09 bb18 	mls	fp, r9, r8, fp
   1d198:	fb08 fa03 	mul.w	sl, r8, r3
   1d19c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   1d1a0:	4592      	cmp	sl, r2
   1d1a2:	d93e      	bls.n	1d222 <__udivmoddi4+0x29c>
   1d1a4:	18a2      	adds	r2, r4, r2
   1d1a6:	f108 30ff 	add.w	r0, r8, #4294967295
   1d1aa:	d204      	bcs.n	1d1b6 <__udivmoddi4+0x230>
   1d1ac:	4592      	cmp	sl, r2
   1d1ae:	d902      	bls.n	1d1b6 <__udivmoddi4+0x230>
   1d1b0:	f1a8 0002 	sub.w	r0, r8, #2
   1d1b4:	4422      	add	r2, r4
   1d1b6:	eba2 020a 	sub.w	r2, r2, sl
   1d1ba:	b289      	uxth	r1, r1
   1d1bc:	fbb2 f8f9 	udiv	r8, r2, r9
   1d1c0:	fb09 2218 	mls	r2, r9, r8, r2
   1d1c4:	fb08 f303 	mul.w	r3, r8, r3
   1d1c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   1d1cc:	4293      	cmp	r3, r2
   1d1ce:	d92a      	bls.n	1d226 <__udivmoddi4+0x2a0>
   1d1d0:	18a2      	adds	r2, r4, r2
   1d1d2:	f108 31ff 	add.w	r1, r8, #4294967295
   1d1d6:	d204      	bcs.n	1d1e2 <__udivmoddi4+0x25c>
   1d1d8:	4293      	cmp	r3, r2
   1d1da:	d902      	bls.n	1d1e2 <__udivmoddi4+0x25c>
   1d1dc:	f1a8 0102 	sub.w	r1, r8, #2
   1d1e0:	4422      	add	r2, r4
   1d1e2:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d1e6:	1ad2      	subs	r2, r2, r3
   1d1e8:	fba0 9805 	umull	r9, r8, r0, r5
   1d1ec:	4542      	cmp	r2, r8
   1d1ee:	464b      	mov	r3, r9
   1d1f0:	4641      	mov	r1, r8
   1d1f2:	d302      	bcc.n	1d1fa <__udivmoddi4+0x274>
   1d1f4:	d106      	bne.n	1d204 <__udivmoddi4+0x27e>
   1d1f6:	454f      	cmp	r7, r9
   1d1f8:	d204      	bcs.n	1d204 <__udivmoddi4+0x27e>
   1d1fa:	3801      	subs	r0, #1
   1d1fc:	ebb9 0305 	subs.w	r3, r9, r5
   1d200:	eb68 0104 	sbc.w	r1, r8, r4
   1d204:	b18e      	cbz	r6, 1d22a <__udivmoddi4+0x2a4>
   1d206:	1afc      	subs	r4, r7, r3
   1d208:	eb62 0701 	sbc.w	r7, r2, r1
   1d20c:	fa07 fe0e 	lsl.w	lr, r7, lr
   1d210:	fa24 f30c 	lsr.w	r3, r4, ip
   1d214:	fa27 f70c 	lsr.w	r7, r7, ip
   1d218:	ea4e 0303 	orr.w	r3, lr, r3
   1d21c:	e9c6 3700 	strd	r3, r7, [r6]
   1d220:	e79c      	b.n	1d15c <__udivmoddi4+0x1d6>
   1d222:	4640      	mov	r0, r8
   1d224:	e7c7      	b.n	1d1b6 <__udivmoddi4+0x230>
   1d226:	4641      	mov	r1, r8
   1d228:	e7db      	b.n	1d1e2 <__udivmoddi4+0x25c>
   1d22a:	4631      	mov	r1, r6
   1d22c:	e6fb      	b.n	1d026 <__udivmoddi4+0xa0>

0001d22e <strcmp>:
   1d22e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d232:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d236:	2a01      	cmp	r2, #1
   1d238:	bf28      	it	cs
   1d23a:	429a      	cmpcs	r2, r3
   1d23c:	d0f7      	beq.n	1d22e <strcmp>
   1d23e:	1ad0      	subs	r0, r2, r3
   1d240:	4770      	bx	lr

0001d242 <strlen>:
   1d242:	4603      	mov	r3, r0
   1d244:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d248:	2a00      	cmp	r2, #0
   1d24a:	d1fb      	bne.n	1d244 <strlen+0x2>
   1d24c:	1a18      	subs	r0, r3, r0
   1d24e:	3801      	subs	r0, #1
   1d250:	4770      	bx	lr
   1d252:	0000      	movs	r0, r0
   1d254:	0000      	movs	r0, r0
	...

0001d258 <getNitrogenDioxide>:

    return false;
}

float getNitrogenDioxide(dfr_data *dfr_data)
{
   1d258:	b538      	push	{r3, r4, r5, lr}
    if (dfr_data->RS_R0_OX_data < 1.1)
   1d25a:	6980      	ldr	r0, [r0, #24]
{
   1d25c:	ed2d 8b02 	vpush	{d8}
    if (dfr_data->RS_R0_OX_data < 1.1)
   1d260:	f7ff fa52 	bl	1c708 <__aeabi_f2d>
   1d264:	a319      	add	r3, pc, #100	; (adr r3, 1d2cc <getNitrogenDioxide+0x74>)
   1d266:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d26a:	4604      	mov	r4, r0
   1d26c:	460d      	mov	r5, r1
   1d26e:	f7ff fd15 	bl	1cc9c <__aeabi_dcmplt>
   1d272:	bb20      	cbnz	r0, 1d2be <getNitrogenDioxide+0x66>
        return 0;
    float nitrogendioxide = (dfr_data->RS_R0_OX_data - 0.045) / 6.13;
   1d274:	a317      	add	r3, pc, #92	; (adr r3, 1d2d4 <getNitrogenDioxide+0x7c>)
   1d276:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d27a:	4620      	mov	r0, r4
   1d27c:	4629      	mov	r1, r5
   1d27e:	f7ff f8e3 	bl	1c448 <__aeabi_dsub>
   1d282:	a316      	add	r3, pc, #88	; (adr r3, 1d2dc <getNitrogenDioxide+0x84>)
   1d284:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d288:	f7ff fbc0 	bl	1ca0c <__aeabi_ddiv>
   1d28c:	f7ff fd8c 	bl	1cda8 <__aeabi_d2f>
   1d290:	ee08 0a10 	vmov	s16, r0
    if (nitrogendioxide < 0.1)
   1d294:	f7ff fa38 	bl	1c708 <__aeabi_f2d>
   1d298:	a312      	add	r3, pc, #72	; (adr r3, 1d2e4 <getNitrogenDioxide+0x8c>)
   1d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d29e:	f7ff fcfd 	bl	1cc9c <__aeabi_dcmplt>
   1d2a2:	b960      	cbnz	r0, 1d2be <getNitrogenDioxide+0x66>
        return 0.0;
    if (nitrogendioxide > 10.0)
   1d2a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
        return 10.0;
   1d2a8:	eeb4 8a67 	vcmp.f32	s16, s15
   1d2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d2b0:	fe37 8a88 	vselgt.f32	s16, s15, s16
    return nitrogendioxide;
}
   1d2b4:	ee18 0a10 	vmov	r0, s16
   1d2b8:	ecbd 8b02 	vpop	{d8}
   1d2bc:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   1d2be:	ed9f 8a02 	vldr	s16, [pc, #8]	; 1d2c8 <getNitrogenDioxide+0x70>
   1d2c2:	e7f7      	b.n	1d2b4 <getNitrogenDioxide+0x5c>
   1d2c4:	f3af 8000 	nop.w
   1d2c8:	00000000 	.word	0x00000000
   1d2cc:	9999999a 	.word	0x9999999a
   1d2d0:	3ff19999 	.word	0x3ff19999
   1d2d4:	70a3d70a 	.word	0x70a3d70a
   1d2d8:	3fa70a3d 	.word	0x3fa70a3d
   1d2dc:	b851eb85 	.word	0xb851eb85
   1d2e0:	4018851e 	.word	0x4018851e
   1d2e4:	9999999a 	.word	0x9999999a
   1d2e8:	3fb99999 	.word	0x3fb99999
   1d2ec:	00000000 	.word	0x00000000

0001d2f0 <getCarbonMonoxide>:

float getCarbonMonoxide(dfr_data *dfr_data)
{
   1d2f0:	b538      	push	{r3, r4, r5, lr}
    if (dfr_data->RS_R0_RED_data > 0.425)
   1d2f2:	6940      	ldr	r0, [r0, #20]
   1d2f4:	f7ff fa08 	bl	1c708 <__aeabi_f2d>
   1d2f8:	a31b      	add	r3, pc, #108	; (adr r3, 1d368 <getCarbonMonoxide+0x78>)
   1d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2fe:	4604      	mov	r4, r0
   1d300:	460d      	mov	r5, r1
   1d302:	f7ff fce9 	bl	1ccd8 <__aeabi_dcmpgt>
   1d306:	bb20      	cbnz	r0, 1d352 <getCarbonMonoxide+0x62>
        return 0.0;
    float co = (0.425 - dfr_data->RS_R0_RED_data) / 0.000405;
   1d308:	a117      	add	r1, pc, #92	; (adr r1, 1d368 <getCarbonMonoxide+0x78>)
   1d30a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d30e:	4622      	mov	r2, r4
   1d310:	462b      	mov	r3, r5
   1d312:	f7ff f899 	bl	1c448 <__aeabi_dsub>
   1d316:	a316      	add	r3, pc, #88	; (adr r3, 1d370 <getCarbonMonoxide+0x80>)
   1d318:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d31c:	f7ff fb76 	bl	1ca0c <__aeabi_ddiv>
   1d320:	f7ff fd42 	bl	1cda8 <__aeabi_d2f>
    if (co > 1000.0)
   1d324:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 1d360 <getCarbonMonoxide+0x70>
    float co = (0.425 - dfr_data->RS_R0_RED_data) / 0.000405;
   1d328:	ee07 0a90 	vmov	s15, r0
    if (co > 1000.0)
   1d32c:	eef4 7ac7 	vcmpe.f32	s15, s14
   1d330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d334:	dc10      	bgt.n	1d358 <getCarbonMonoxide+0x68>
        return 1000.0;
    if (co < 1.0)
        return 0.0;
   1d336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1d33a:	eef4 7a47 	vcmp.f32	s15, s14
   1d33e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1d364 <getCarbonMonoxide+0x74>
   1d342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d346:	bf48      	it	mi
   1d348:	eef0 7a47 	vmovmi.f32	s15, s14
    return co;
}
   1d34c:	ee17 0a90 	vmov	r0, s15
   1d350:	bd38      	pop	{r3, r4, r5, pc}
        return 0.0;
   1d352:	eddf 7a04 	vldr	s15, [pc, #16]	; 1d364 <getCarbonMonoxide+0x74>
   1d356:	e7f9      	b.n	1d34c <getCarbonMonoxide+0x5c>
        return 1000.0;
   1d358:	eef0 7a47 	vmov.f32	s15, s14
   1d35c:	e7f6      	b.n	1d34c <getCarbonMonoxide+0x5c>
   1d35e:	bf00      	nop
   1d360:	447a0000 	.word	0x447a0000
   1d364:	00000000 	.word	0x00000000
   1d368:	33333333 	.word	0x33333333
   1d36c:	3fdb3333 	.word	0x3fdb3333
   1d370:	c13fd0d0 	.word	0xc13fd0d0
   1d374:	3f3a8ac5 	.word	0x3f3a8ac5

0001d378 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d37c:	ed2d 8b02 	vpush	{d8}
   1d380:	4680      	mov	r8, r0
   1d382:	4689      	mov	r9, r1
   1d384:	4617      	mov	r7, r2
   1d386:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1d388:	2600      	movs	r6, #0
	uint64_t round = BIT64(59); /* 0.5 */
   1d38a:	ed9f 8ba7 	vldr	d8, [pc, #668]	; 1d628 <cbvprintf+0x2b0>
{
   1d38e:	b09d      	sub	sp, #116	; 0x74
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1d390:	7838      	ldrb	r0, [r7, #0]
   1d392:	b910      	cbnz	r0, 1d39a <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1d394:	4630      	mov	r0, r6
   1d396:	f000 beaa 	b.w	1e0ee <cbvprintf+0xd76>
			OUTC(*fp++);
   1d39a:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1d39c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1d39e:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   1d3a0:	d006      	beq.n	1d3b0 <cbvprintf+0x38>
			OUTC(*fp++);
   1d3a2:	4649      	mov	r1, r9
			OUTC('%');
   1d3a4:	47c0      	blx	r8
   1d3a6:	2800      	cmp	r0, #0
   1d3a8:	f2c0 86a1 	blt.w	1e0ee <cbvprintf+0xd76>
   1d3ac:	3601      	adds	r6, #1
		if (bps == NULL) {
   1d3ae:	e225      	b.n	1d7fc <cbvprintf+0x484>
		} state = {
   1d3b0:	2218      	movs	r2, #24
   1d3b2:	2100      	movs	r1, #0
   1d3b4:	a80e      	add	r0, sp, #56	; 0x38
   1d3b6:	f024 fbd3 	bl	41b60 <memset>
	if (*sp == '%') {
   1d3ba:	787b      	ldrb	r3, [r7, #1]
   1d3bc:	2b25      	cmp	r3, #37	; 0x25
   1d3be:	d059      	beq.n	1d474 <cbvprintf+0xfc>
   1d3c0:	1c7a      	adds	r2, r7, #1
   1d3c2:	4615      	mov	r5, r2
		switch (*sp) {
   1d3c4:	f812 3b01 	ldrb.w	r3, [r2], #1
   1d3c8:	2b2b      	cmp	r3, #43	; 0x2b
   1d3ca:	f000 808b 	beq.w	1d4e4 <cbvprintf+0x16c>
   1d3ce:	d879      	bhi.n	1d4c4 <cbvprintf+0x14c>
   1d3d0:	2b20      	cmp	r3, #32
   1d3d2:	f000 808c 	beq.w	1d4ee <cbvprintf+0x176>
   1d3d6:	2b23      	cmp	r3, #35	; 0x23
   1d3d8:	f000 808e 	beq.w	1d4f8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   1d3dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d3e0:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1d3e4:	2a44      	cmp	r2, #68	; 0x44
   1d3e6:	d103      	bne.n	1d3f0 <cbvprintf+0x78>
		conv->flag_zero = false;
   1d3e8:	f36f 1386 	bfc	r3, #6, #1
   1d3ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   1d3f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d3f4:	950a      	str	r5, [sp, #40]	; 0x28
   1d3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d3fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   1d3fe:	782b      	ldrb	r3, [r5, #0]
   1d400:	2b2a      	cmp	r3, #42	; 0x2a
   1d402:	d17e      	bne.n	1d502 <cbvprintf+0x18a>
		conv->width_star = true;
   1d404:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d408:	f043 0301 	orr.w	r3, r3, #1
   1d40c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		return ++sp;
   1d410:	1c6b      	adds	r3, r5, #1
	sp = extract_prec(conv, sp);
   1d412:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
   1d414:	781a      	ldrb	r2, [r3, #0]
   1d416:	2a2e      	cmp	r2, #46	; 0x2e
   1d418:	bf0c      	ite	eq
   1d41a:	2101      	moveq	r1, #1
   1d41c:	2100      	movne	r1, #0
   1d41e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d422:	f361 0241 	bfi	r2, r1, #1, #1
   1d426:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   1d42a:	d10b      	bne.n	1d444 <cbvprintf+0xcc>
	++sp;
   1d42c:	1c5a      	adds	r2, r3, #1
   1d42e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
   1d430:	785a      	ldrb	r2, [r3, #1]
   1d432:	2a2a      	cmp	r2, #42	; 0x2a
   1d434:	d17b      	bne.n	1d52e <cbvprintf+0x1b6>
		conv->prec_star = true;
   1d436:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   1d43a:	3302      	adds	r3, #2
		conv->prec_star = true;
   1d43c:	f042 0204 	orr.w	r2, r2, #4
   1d440:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
   1d444:	4619      	mov	r1, r3
   1d446:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d44a:	286c      	cmp	r0, #108	; 0x6c
   1d44c:	f000 80cc 	beq.w	1d5e8 <cbvprintf+0x270>
   1d450:	d87d      	bhi.n	1d54e <cbvprintf+0x1d6>
   1d452:	2868      	cmp	r0, #104	; 0x68
   1d454:	f000 8084 	beq.w	1d560 <cbvprintf+0x1e8>
   1d458:	286a      	cmp	r0, #106	; 0x6a
   1d45a:	f000 80cf 	beq.w	1d5fc <cbvprintf+0x284>
   1d45e:	284c      	cmp	r0, #76	; 0x4c
   1d460:	f000 80d3 	beq.w	1d60a <cbvprintf+0x292>
		conv->length_mod = LENGTH_NONE;
   1d464:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		break;
   1d468:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1d46a:	f36f 02c6 	bfc	r2, #3, #4
   1d46e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		break;
   1d472:	e080      	b.n	1d576 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   1d474:	1cba      	adds	r2, r7, #2
   1d476:	9203      	str	r2, [sp, #12]
   1d478:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1d47c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d480:	07dd      	lsls	r5, r3, #31
   1d482:	f140 8172 	bpl.w	1d76a <cbvprintf+0x3f2>
			width = va_arg(ap, int);
   1d486:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
   1d48a:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   1d48c:	9202      	str	r2, [sp, #8]
			if (width < 0) {
   1d48e:	da08      	bge.n	1d4a2 <cbvprintf+0x12a>
				conv->flag_dash = true;
   1d490:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1d494:	f042 0204 	orr.w	r2, r2, #4
   1d498:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   1d49c:	9a02      	ldr	r2, [sp, #8]
   1d49e:	4252      	negs	r2, r2
		int width = -1;
   1d4a0:	9202      	str	r2, [sp, #8]
		if (conv->prec_star) {
   1d4a2:	0758      	lsls	r0, r3, #29
   1d4a4:	f140 8169 	bpl.w	1d77a <cbvprintf+0x402>
			int arg = va_arg(ap, int);
   1d4a8:	f854 5b04 	ldr.w	r5, [r4], #4
			if (arg < 0) {
   1d4ac:	2d00      	cmp	r5, #0
   1d4ae:	f280 8168 	bge.w	1d782 <cbvprintf+0x40a>
				conv->prec_present = false;
   1d4b2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d4b6:	f36f 0341 	bfc	r3, #1, #1
   1d4ba:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   1d4be:	f04f 35ff 	mov.w	r5, #4294967295
   1d4c2:	e15e      	b.n	1d782 <cbvprintf+0x40a>
		switch (*sp) {
   1d4c4:	2b2d      	cmp	r3, #45	; 0x2d
   1d4c6:	d006      	beq.n	1d4d6 <cbvprintf+0x15e>
   1d4c8:	2b30      	cmp	r3, #48	; 0x30
   1d4ca:	d187      	bne.n	1d3dc <cbvprintf+0x64>
			conv->flag_zero = true;
   1d4cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d4d4:	e003      	b.n	1d4de <cbvprintf+0x166>
			conv->flag_dash = true;
   1d4d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d4da:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1d4de:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
			break;
   1d4e2:	e76e      	b.n	1d3c2 <cbvprintf+0x4a>
			conv->flag_plus = true;
   1d4e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d4e8:	f043 0308 	orr.w	r3, r3, #8
   1d4ec:	e7f7      	b.n	1d4de <cbvprintf+0x166>
			conv->flag_space = true;
   1d4ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d4f2:	f043 0310 	orr.w	r3, r3, #16
   1d4f6:	e7f2      	b.n	1d4de <cbvprintf+0x166>
			conv->flag_hash = true;
   1d4f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d4fc:	f043 0320 	orr.w	r3, r3, #32
   1d500:	e7ed      	b.n	1d4de <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   1d502:	a80a      	add	r0, sp, #40	; 0x28
   1d504:	f004 fa30 	bl	21968 <extract_decimal>
	if (sp != wp) {
   1d508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d50a:	42ab      	cmp	r3, r5
   1d50c:	d081      	beq.n	1d412 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   1d50e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
		conv->width_value = width;
   1d512:	9011      	str	r0, [sp, #68]	; 0x44
		conv->unsupported |= ((conv->width_value < 0)
   1d514:	f3c5 0140 	ubfx	r1, r5, #1, #1
   1d518:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
   1d51c:	0052      	lsls	r2, r2, #1
   1d51e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d522:	f005 017d 	and.w	r1, r5, #125	; 0x7d
   1d526:	430a      	orrs	r2, r1
   1d528:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   1d52c:	e771      	b.n	1d412 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   1d52e:	a80a      	add	r0, sp, #40	; 0x28
   1d530:	f004 fa1a 	bl	21968 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1d534:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	conv->prec_value = prec;
   1d538:	9012      	str	r0, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1d53a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1d53e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1d542:	f360 0341 	bfi	r3, r0, #1, #1
   1d546:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	return sp;
   1d54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d54c:	e77a      	b.n	1d444 <cbvprintf+0xcc>
	switch (*sp) {
   1d54e:	2874      	cmp	r0, #116	; 0x74
   1d550:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d554:	d056      	beq.n	1d604 <cbvprintf+0x28c>
   1d556:	287a      	cmp	r0, #122	; 0x7a
   1d558:	d184      	bne.n	1d464 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   1d55a:	4613      	mov	r3, r2
   1d55c:	2206      	movs	r2, #6
   1d55e:	e03e      	b.n	1d5de <cbvprintf+0x266>
		if (*++sp == 'h') {
   1d560:	785a      	ldrb	r2, [r3, #1]
   1d562:	2a68      	cmp	r2, #104	; 0x68
   1d564:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d568:	d137      	bne.n	1d5da <cbvprintf+0x262>
			conv->length_mod = LENGTH_HH;
   1d56a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1d56c:	f361 02c6 	bfi	r2, r1, #3, #4
   1d570:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   1d574:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1d576:	460b      	mov	r3, r1
   1d578:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   1d57c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1d57e:	9303      	str	r3, [sp, #12]
   1d580:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
	switch (conv->specifier) {
   1d584:	f200 80c9 	bhi.w	1d71a <cbvprintf+0x3a2>
   1d588:	2a57      	cmp	r2, #87	; 0x57
   1d58a:	d851      	bhi.n	1d630 <cbvprintf+0x2b8>
   1d58c:	2a41      	cmp	r2, #65	; 0x41
   1d58e:	d004      	beq.n	1d59a <cbvprintf+0x222>
   1d590:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d594:	2b02      	cmp	r3, #2
   1d596:	f200 80c0 	bhi.w	1d71a <cbvprintf+0x3a2>
		conv->specifier_cat = SPECIFIER_FP;
   1d59a:	2104      	movs	r1, #4
   1d59c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d5a0:	f361 0302 	bfi	r3, r1, #0, #3
   1d5a4:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			|| (conv->specifier == 'A');
   1d5a8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1d5ac:	f1a3 0a41 	sub.w	sl, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
   1d5b0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
			|| (conv->specifier == 'A');
   1d5b4:	f1da 0300 	rsbs	r3, sl, #0
   1d5b8:	eb43 030a 	adc.w	r3, r3, sl
		conv->specifier_a = (conv->specifier == 'a')
   1d5bc:	f363 12c7 	bfi	r2, r3, #7, #1
   1d5c0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (conv->length_mod == LENGTH_L) {
   1d5c4:	b2d3      	uxtb	r3, r2
   1d5c6:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1d5ca:	2a18      	cmp	r2, #24
   1d5cc:	f040 80a2 	bne.w	1d714 <cbvprintf+0x39c>
			conv->length_mod = LENGTH_NONE;
   1d5d0:	f36f 03c6 	bfc	r3, #3, #4
   1d5d4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   1d5d8:	e089      	b.n	1d6ee <cbvprintf+0x376>
			conv->length_mod = LENGTH_H;
   1d5da:	4613      	mov	r3, r2
   1d5dc:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1d5de:	f362 03c6 	bfi	r3, r2, #3, #4
   1d5e2:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   1d5e6:	e7c6      	b.n	1d576 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   1d5e8:	785a      	ldrb	r2, [r3, #1]
   1d5ea:	2a6c      	cmp	r2, #108	; 0x6c
   1d5ec:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d5f0:	d101      	bne.n	1d5f6 <cbvprintf+0x27e>
			conv->length_mod = LENGTH_LL;
   1d5f2:	2104      	movs	r1, #4
   1d5f4:	e7ba      	b.n	1d56c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   1d5f6:	4613      	mov	r3, r2
   1d5f8:	2203      	movs	r2, #3
   1d5fa:	e7f0      	b.n	1d5de <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
   1d5fc:	2205      	movs	r2, #5
   1d5fe:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d602:	e7ec      	b.n	1d5de <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
   1d604:	4613      	mov	r3, r2
   1d606:	2207      	movs	r2, #7
   1d608:	e7e9      	b.n	1d5de <cbvprintf+0x266>
		conv->unsupported = true;
   1d60a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1d60e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1d612:	f023 0302 	bic.w	r3, r3, #2
   1d616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1d61a:	f043 0302 	orr.w	r3, r3, #2
   1d61e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		break;
   1d622:	e7a8      	b.n	1d576 <cbvprintf+0x1fe>
   1d624:	f3af 8000 	nop.w
   1d628:	00000000 	.word	0x00000000
   1d62c:	08000000 	.word	0x08000000
	switch (conv->specifier) {
   1d630:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d634:	2b20      	cmp	r3, #32
   1d636:	d870      	bhi.n	1d71a <cbvprintf+0x3a2>
   1d638:	a101      	add	r1, pc, #4	; (adr r1, 1d640 <cbvprintf+0x2c8>)
   1d63a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d63e:	bf00      	nop
   1d640:	0001d6f3 	.word	0x0001d6f3
   1d644:	0001d71b 	.word	0x0001d71b
   1d648:	0001d71b 	.word	0x0001d71b
   1d64c:	0001d71b 	.word	0x0001d71b
   1d650:	0001d71b 	.word	0x0001d71b
   1d654:	0001d71b 	.word	0x0001d71b
   1d658:	0001d71b 	.word	0x0001d71b
   1d65c:	0001d71b 	.word	0x0001d71b
   1d660:	0001d71b 	.word	0x0001d71b
   1d664:	0001d59b 	.word	0x0001d59b
   1d668:	0001d71b 	.word	0x0001d71b
   1d66c:	0001d6f3 	.word	0x0001d6f3
   1d670:	0001d6c5 	.word	0x0001d6c5
   1d674:	0001d59b 	.word	0x0001d59b
   1d678:	0001d59b 	.word	0x0001d59b
   1d67c:	0001d59b 	.word	0x0001d59b
   1d680:	0001d71b 	.word	0x0001d71b
   1d684:	0001d6c5 	.word	0x0001d6c5
   1d688:	0001d71b 	.word	0x0001d71b
   1d68c:	0001d71b 	.word	0x0001d71b
   1d690:	0001d71b 	.word	0x0001d71b
   1d694:	0001d71b 	.word	0x0001d71b
   1d698:	0001d729 	.word	0x0001d729
   1d69c:	0001d6f3 	.word	0x0001d6f3
   1d6a0:	0001d74d 	.word	0x0001d74d
   1d6a4:	0001d71b 	.word	0x0001d71b
   1d6a8:	0001d71b 	.word	0x0001d71b
   1d6ac:	0001d74d 	.word	0x0001d74d
   1d6b0:	0001d71b 	.word	0x0001d71b
   1d6b4:	0001d6f3 	.word	0x0001d6f3
   1d6b8:	0001d71b 	.word	0x0001d71b
   1d6bc:	0001d71b 	.word	0x0001d71b
   1d6c0:	0001d6f3 	.word	0x0001d6f3
		conv->specifier_cat = SPECIFIER_SINT;
   1d6c4:	2101      	movs	r1, #1
   1d6c6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		conv->specifier_cat = SPECIFIER_UINT;
   1d6ca:	f361 0302 	bfi	r3, r1, #0, #3
   1d6ce:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d6d2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d6d6:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d6da:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   1d6dc:	bf02      	ittt	eq
   1d6de:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   1d6e2:	f041 0101 	orreq.w	r1, r1, #1
   1d6e6:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   1d6ea:	2a63      	cmp	r2, #99	; 0x63
   1d6ec:	d005      	beq.n	1d6fa <cbvprintf+0x382>
	bool unsupported = false;
   1d6ee:	2300      	movs	r3, #0
		break;
   1d6f0:	e006      	b.n	1d700 <cbvprintf+0x388>
		conv->specifier_cat = SPECIFIER_UINT;
   1d6f2:	2102      	movs	r1, #2
   1d6f4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d6f8:	e7e7      	b.n	1d6ca <cbvprintf+0x352>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1d6fa:	3b00      	subs	r3, #0
   1d6fc:	bf18      	it	ne
   1d6fe:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1d700:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1d704:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1d708:	430b      	orrs	r3, r1
   1d70a:	f363 0241 	bfi	r2, r3, #1, #1
   1d70e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   1d712:	e6b3      	b.n	1d47c <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
   1d714:	f013 0f38 	tst.w	r3, #56	; 0x38
   1d718:	d0e9      	beq.n	1d6ee <cbvprintf+0x376>
		conv->invalid = true;
   1d71a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d71e:	f043 0301 	orr.w	r3, r3, #1
   1d722:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1d726:	e7e2      	b.n	1d6ee <cbvprintf+0x376>
		conv->specifier_cat = SPECIFIER_PTR;
   1d728:	2203      	movs	r2, #3
   1d72a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d72e:	f362 0302 	bfi	r3, r2, #0, #3
   1d732:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d736:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d73a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d73e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1d742:	f1dc 0300 	rsbs	r3, ip, #0
   1d746:	eb43 030c 	adc.w	r3, r3, ip
   1d74a:	e7d9      	b.n	1d700 <cbvprintf+0x388>
		conv->specifier_cat = SPECIFIER_PTR;
   1d74c:	2203      	movs	r2, #3
   1d74e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d752:	f362 0302 	bfi	r3, r2, #0, #3
   1d756:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   1d75a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d75e:	f013 0f78 	tst.w	r3, #120	; 0x78
   1d762:	bf14      	ite	ne
   1d764:	2301      	movne	r3, #1
   1d766:	2300      	moveq	r3, #0
   1d768:	e7ca      	b.n	1d700 <cbvprintf+0x388>
		} else if (conv->width_present) {
   1d76a:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   1d76e:	2a00      	cmp	r2, #0
		int width = -1;
   1d770:	bfac      	ite	ge
   1d772:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
   1d776:	9a11      	ldrlt	r2, [sp, #68]	; 0x44
   1d778:	e692      	b.n	1d4a0 <cbvprintf+0x128>
		} else if (conv->prec_present) {
   1d77a:	0799      	lsls	r1, r3, #30
   1d77c:	f57f ae9f 	bpl.w	1d4be <cbvprintf+0x146>
			precision = conv->prec_value;
   1d780:	9d12      	ldr	r5, [sp, #72]	; 0x48
		conv->pad0_value = 0;
   1d782:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1d784:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
		    && (conv->specifier_cat == SPECIFIER_FP)
   1d788:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d78c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1d790:	f003 0207 	and.w	r2, r3, #7
   1d794:	2a04      	cmp	r2, #4
   1d796:	d107      	bne.n	1d7a8 <cbvprintf+0x430>
		    && !conv->prec_present) {
   1d798:	078a      	lsls	r2, r1, #30
   1d79a:	d405      	bmi.n	1d7a8 <cbvprintf+0x430>
			if (conv->specifier_a) {
   1d79c:	f99d 2041 	ldrsb.w	r2, [sp, #65]	; 0x41
				precision = 6;
   1d7a0:	2a00      	cmp	r2, #0
   1d7a2:	bfb4      	ite	lt
   1d7a4:	250d      	movlt	r5, #13
   1d7a6:	2506      	movge	r5, #6
		enum specifier_cat_enum specifier_cat
   1d7a8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1d7ac:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1d7ae:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1d7b2:	d138      	bne.n	1d826 <cbvprintf+0x4ae>
			switch (length_mod) {
   1d7b4:	1ecb      	subs	r3, r1, #3
   1d7b6:	2b04      	cmp	r3, #4
   1d7b8:	d822      	bhi.n	1d800 <cbvprintf+0x488>
   1d7ba:	e8df f003 	tbb	[pc, r3]
   1d7be:	0903      	.short	0x0903
   1d7c0:	2109      	.short	0x2109
   1d7c2:	21          	.byte	0x21
   1d7c3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1d7c4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1d7c8:	17da      	asrs	r2, r3, #31
   1d7ca:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   1d7ce:	e006      	b.n	1d7de <cbvprintf+0x466>
					(sint_value_type)va_arg(ap, intmax_t);
   1d7d0:	3407      	adds	r4, #7
   1d7d2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1d7d6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1d7da:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
		if (conv->invalid || conv->unsupported) {
   1d7de:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
   1d7e2:	f01a 0f03 	tst.w	sl, #3
   1d7e6:	d056      	beq.n	1d896 <cbvprintf+0x51e>
			OUTS(sp, fp);
   1d7e8:	463a      	mov	r2, r7
   1d7ea:	4649      	mov	r1, r9
   1d7ec:	4640      	mov	r0, r8
   1d7ee:	9b03      	ldr	r3, [sp, #12]
   1d7f0:	f01f fca9 	bl	3d146 <outs>
   1d7f4:	2800      	cmp	r0, #0
   1d7f6:	f2c0 847a 	blt.w	1e0ee <cbvprintf+0xd76>
   1d7fa:	4406      	add	r6, r0
			continue;
   1d7fc:	9f03      	ldr	r7, [sp, #12]
   1d7fe:	e5c7      	b.n	1d390 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d800:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d804:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d806:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1d80a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   1d80e:	d105      	bne.n	1d81c <cbvprintf+0x4a4>
				value->uint = (unsigned char)value->uint;
   1d810:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
				value->uint = (unsigned short)value->uint;
   1d814:	930e      	str	r3, [sp, #56]	; 0x38
   1d816:	2300      	movs	r3, #0
   1d818:	930f      	str	r3, [sp, #60]	; 0x3c
   1d81a:	e7e0      	b.n	1d7de <cbvprintf+0x466>
			} else if (length_mod == LENGTH_H) {
   1d81c:	2902      	cmp	r1, #2
   1d81e:	d1de      	bne.n	1d7de <cbvprintf+0x466>
				value->sint = (short)value->sint;
   1d820:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   1d824:	e7d0      	b.n	1d7c8 <cbvprintf+0x450>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1d826:	2b02      	cmp	r3, #2
   1d828:	d123      	bne.n	1d872 <cbvprintf+0x4fa>
			switch (length_mod) {
   1d82a:	1ecb      	subs	r3, r1, #3
   1d82c:	2b04      	cmp	r3, #4
   1d82e:	d813      	bhi.n	1d858 <cbvprintf+0x4e0>
   1d830:	e8df f003 	tbb	[pc, r3]
   1d834:	120a0a03 	.word	0x120a0a03
   1d838:	12          	.byte	0x12
   1d839:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1d83a:	2200      	movs	r2, #0
					value->uint = (wchar_t)va_arg(ap,
   1d83c:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
   1d83e:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1d840:	900e      	str	r0, [sp, #56]	; 0x38
   1d842:	920f      	str	r2, [sp, #60]	; 0x3c
					(uint_value_type)va_arg(ap, size_t);
   1d844:	461c      	mov	r4, r3
   1d846:	e7ca      	b.n	1d7de <cbvprintf+0x466>
					(uint_value_type)va_arg(ap,
   1d848:	1de3      	adds	r3, r4, #7
   1d84a:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
   1d84e:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
   1d852:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
				break;
   1d856:	e7f5      	b.n	1d844 <cbvprintf+0x4cc>
					(uint_value_type)va_arg(ap, size_t);
   1d858:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d85c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1d85e:	930e      	str	r3, [sp, #56]	; 0x38
   1d860:	f04f 0300 	mov.w	r3, #0
   1d864:	930f      	str	r3, [sp, #60]	; 0x3c
			if (length_mod == LENGTH_HH) {
   1d866:	d0d3      	beq.n	1d810 <cbvprintf+0x498>
			} else if (length_mod == LENGTH_H) {
   1d868:	2902      	cmp	r1, #2
   1d86a:	d1b8      	bne.n	1d7de <cbvprintf+0x466>
				value->uint = (unsigned short)value->uint;
   1d86c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1d870:	e7d0      	b.n	1d814 <cbvprintf+0x49c>
		} else if (specifier_cat == SPECIFIER_FP) {
   1d872:	2b04      	cmp	r3, #4
   1d874:	d109      	bne.n	1d88a <cbvprintf+0x512>
					(sint_value_type)va_arg(ap, long long);
   1d876:	1de3      	adds	r3, r4, #7
   1d878:	f023 0307 	bic.w	r3, r3, #7
   1d87c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1d880:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d884:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1d888:	e7a9      	b.n	1d7de <cbvprintf+0x466>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1d88a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1d88c:	bf04      	itt	eq
   1d88e:	f854 3b04 	ldreq.w	r3, [r4], #4
   1d892:	930e      	streq	r3, [sp, #56]	; 0x38
   1d894:	e7a3      	b.n	1d7de <cbvprintf+0x466>
		switch (conv->specifier) {
   1d896:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1d89a:	2a78      	cmp	r2, #120	; 0x78
   1d89c:	d8ae      	bhi.n	1d7fc <cbvprintf+0x484>
   1d89e:	2a57      	cmp	r2, #87	; 0x57
   1d8a0:	f200 8090 	bhi.w	1d9c4 <cbvprintf+0x64c>
   1d8a4:	2a25      	cmp	r2, #37	; 0x25
   1d8a6:	f000 80d7 	beq.w	1da58 <cbvprintf+0x6e0>
   1d8aa:	2a24      	cmp	r2, #36	; 0x24
   1d8ac:	d9a6      	bls.n	1d7fc <cbvprintf+0x484>
   1d8ae:	2a41      	cmp	r2, #65	; 0x41
   1d8b0:	d003      	beq.n	1d8ba <cbvprintf+0x542>
   1d8b2:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d8b6:	2b02      	cmp	r3, #2
   1d8b8:	d8a0      	bhi.n	1d7fc <cbvprintf+0x484>
	} u = {
   1d8ba:	e9dd 130e 	ldrd	r1, r3, [sp, #56]	; 0x38
	if ((u.u64 & SIGN_MASK) != 0U) {
   1d8be:	2b00      	cmp	r3, #0
   1d8c0:	f2c0 81bb 	blt.w	1dc3a <cbvprintf+0x8c2>
	} else if (conv->flag_plus) {
   1d8c4:	f01a 0f08 	tst.w	sl, #8
   1d8c8:	f040 81b9 	bne.w	1dc3e <cbvprintf+0x8c6>
		*sign = ' ';
   1d8cc:	f01a 0710 	ands.w	r7, sl, #16
   1d8d0:	bf18      	it	ne
   1d8d2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1d8d4:	f3c3 500a 	ubfx	r0, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1d8d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d8dc:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
   1d8e0:	2800      	cmp	r0, #0
   1d8e2:	f040 81ae 	bne.w	1dc42 <cbvprintf+0x8ca>
   1d8e6:	ea51 0c03 	orrs.w	ip, r1, r3
   1d8ea:	bf14      	ite	ne
   1d8ec:	f04f 0e01 	movne.w	lr, #1
   1d8f0:	f04f 0e00 	moveq.w	lr, #0
	if (IS_ENABLED(CONFIG_CBPRINTF_FP_A_SUPPORT)
   1d8f4:	f99d c041 	ldrsb.w	ip, [sp, #65]	; 0x41
		c = 'f';
   1d8f8:	2a46      	cmp	r2, #70	; 0x46
   1d8fa:	bf08      	it	eq
   1d8fc:	2266      	moveq	r2, #102	; 0x66
	if (IS_ENABLED(CONFIG_CBPRINTF_FP_A_SUPPORT)
   1d8fe:	f1bc 0f00 	cmp.w	ip, #0
   1d902:	f280 825a 	bge.w	1ddba <cbvprintf+0xa42>
		*buf++ = '0';
   1d906:	f04f 0c30 	mov.w	ip, #48	; 0x30
		*buf++ = 'x';
   1d90a:	f04f 0b78 	mov.w	fp, #120	; 0x78
		*buf++ = '0';
   1d90e:	f88d c054 	strb.w	ip, [sp, #84]	; 0x54
		*buf++ = 'x';
   1d912:	f88d b055 	strb.w	fp, [sp, #85]	; 0x55
		if (is_subnormal) {
   1d916:	f1be 0f00 	cmp.w	lr, #0
   1d91a:	f040 81cb 	bne.w	1dcb4 <cbvprintf+0x93c>
			*buf++ = '1';
   1d91e:	f04f 0c31 	mov.w	ip, #49	; 0x31
		expo -= 1023;
   1d922:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   1d926:	9004      	str	r0, [sp, #16]
		if (!(conv->specifier_a && conv->prec_present)) {
   1d928:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
   1d92c:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
   1d930:	ea5f 1bd0 	movs.w	fp, r0, lsr #7
   1d934:	f000 81e9 	beq.w	1dd0a <cbvprintf+0x992>
   1d938:	0780      	lsls	r0, r0, #30
   1d93a:	d50c      	bpl.n	1d956 <cbvprintf+0x5de>
		} else if (precision > FRACTION_HEX) {
   1d93c:	2d0d      	cmp	r5, #13
   1d93e:	f340 81bd 	ble.w	1dcbc <cbvprintf+0x944>
	bool prune_zero = false;
   1d942:	f04f 0b00 	mov.w	fp, #0
			conv->pad_fp = true;
   1d946:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			conv->pad0_pre_exp = precision - FRACTION_HEX;
   1d94a:	3d0d      	subs	r5, #13
			conv->pad_fp = true;
   1d94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			conv->pad0_pre_exp = precision - FRACTION_HEX;
   1d950:	9512      	str	r5, [sp, #72]	; 0x48
			conv->pad_fp = true;
   1d952:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			precision = FRACTION_HEX;
   1d956:	250d      	movs	r5, #13
		bool require_dp = ((fract != 0) || conv->flag_hash);
   1d958:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d95c:	ea50 0301 	orrs.w	r3, r0, r1
   1d960:	f040 81d6 	bne.w	1dd10 <cbvprintf+0x998>
		if (require_dp || (precision != 0)) {
   1d964:	f01a 0a20 	ands.w	sl, sl, #32
   1d968:	f040 81d2 	bne.w	1dd10 <cbvprintf+0x998>
   1d96c:	2d00      	cmp	r5, #0
   1d96e:	f000 81d2 	beq.w	1dd16 <cbvprintf+0x99e>
			*buf++ = '.';
   1d972:	232e      	movs	r3, #46	; 0x2e
   1d974:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1d978:	ab16      	add	r3, sp, #88	; 0x58
		struct conversion aconv = {
   1d97a:	f04f 0c00 	mov.w	ip, #0
			.specifier = isupper((int)c) ? 'X' : 'x',
   1d97e:	3201      	adds	r2, #1
		struct conversion aconv = {
   1d980:	e9cd cc0a 	strd	ip, ip, [sp, #40]	; 0x28
   1d984:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
			.specifier = isupper((int)c) ? 'X' : 'x',
   1d988:	f8df c5ac 	ldr.w	ip, [pc, #1452]	; 1df38 <cbvprintf+0xbc0>
   1d98c:	b2d2      	uxtb	r2, r2
		struct conversion aconv = {
   1d98e:	f812 200c 	ldrb.w	r2, [r2, ip]
   1d992:	f002 0203 	and.w	r2, r2, #3
   1d996:	2a01      	cmp	r2, #1
   1d998:	bf0c      	ite	eq
   1d99a:	2258      	moveq	r2, #88	; 0x58
   1d99c:	2278      	movne	r2, #120	; 0x78
   1d99e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
		if (fract != 0) {
   1d9a2:	ea50 0201 	orrs.w	r2, r0, r1
   1d9a6:	f10d 026d 	add.w	r2, sp, #109	; 0x6d
   1d9aa:	f000 81f8 	beq.w	1dd9e <cbvprintf+0xa26>
			sp = encode_uint(fract, &aconv, buf, spe);
   1d9ae:	9200      	str	r2, [sp, #0]
   1d9b0:	aa0a      	add	r2, sp, #40	; 0x28
   1d9b2:	9305      	str	r3, [sp, #20]
   1d9b4:	f003 ffee 	bl	21994 <encode_uint>
   1d9b8:	9b05      	ldr	r3, [sp, #20]
			*--sp = '0';
   1d9ba:	f04f 0c30 	mov.w	ip, #48	; 0x30
		while ((spe - sp) < FRACTION_HEX) {
   1d9be:	f10d 026d 	add.w	r2, sp, #109	; 0x6d
   1d9c2:	e1ae      	b.n	1dd22 <cbvprintf+0x9aa>
		switch (conv->specifier) {
   1d9c4:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d9c8:	2b20      	cmp	r3, #32
   1d9ca:	f63f af17 	bhi.w	1d7fc <cbvprintf+0x484>
   1d9ce:	a001      	add	r0, pc, #4	; (adr r0, 1d9d4 <cbvprintf+0x65c>)
   1d9d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d9d4:	0001dbdd 	.word	0x0001dbdd
   1d9d8:	0001d7fd 	.word	0x0001d7fd
   1d9dc:	0001d7fd 	.word	0x0001d7fd
   1d9e0:	0001d7fd 	.word	0x0001d7fd
   1d9e4:	0001d7fd 	.word	0x0001d7fd
   1d9e8:	0001d7fd 	.word	0x0001d7fd
   1d9ec:	0001d7fd 	.word	0x0001d7fd
   1d9f0:	0001d7fd 	.word	0x0001d7fd
   1d9f4:	0001d7fd 	.word	0x0001d7fd
   1d9f8:	0001d8bb 	.word	0x0001d8bb
   1d9fc:	0001d7fd 	.word	0x0001d7fd
   1da00:	0001da85 	.word	0x0001da85
   1da04:	0001db7d 	.word	0x0001db7d
   1da08:	0001d8bb 	.word	0x0001d8bb
   1da0c:	0001d8bb 	.word	0x0001d8bb
   1da10:	0001d8bb 	.word	0x0001d8bb
   1da14:	0001d7fd 	.word	0x0001d7fd
   1da18:	0001db7d 	.word	0x0001db7d
   1da1c:	0001d7fd 	.word	0x0001d7fd
   1da20:	0001d7fd 	.word	0x0001d7fd
   1da24:	0001d7fd 	.word	0x0001d7fd
   1da28:	0001d7fd 	.word	0x0001d7fd
   1da2c:	0001dc13 	.word	0x0001dc13
   1da30:	0001dbdd 	.word	0x0001dbdd
   1da34:	0001dbe1 	.word	0x0001dbe1
   1da38:	0001d7fd 	.word	0x0001d7fd
   1da3c:	0001d7fd 	.word	0x0001d7fd
   1da40:	0001da5f 	.word	0x0001da5f
   1da44:	0001d7fd 	.word	0x0001d7fd
   1da48:	0001dbdd 	.word	0x0001dbdd
   1da4c:	0001d7fd 	.word	0x0001d7fd
   1da50:	0001d7fd 	.word	0x0001d7fd
   1da54:	0001dbdd 	.word	0x0001dbdd
			OUTC('%');
   1da58:	4649      	mov	r1, r9
   1da5a:	4610      	mov	r0, r2
   1da5c:	e4a2      	b.n	1d3a4 <cbvprintf+0x2c>
			if (precision >= 0) {
   1da5e:	2d00      	cmp	r5, #0
			bps = (const char *)value->ptr;
   1da60:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
			if (precision >= 0) {
   1da64:	db0a      	blt.n	1da7c <cbvprintf+0x704>
				len = strnlen(bps, precision);
   1da66:	4629      	mov	r1, r5
   1da68:	4658      	mov	r0, fp
   1da6a:	f024 fa73 	bl	41f54 <strnlen>
		char sign = 0;
   1da6e:	2700      	movs	r7, #0
			bpe = bps + len;
   1da70:	eb0b 0a00 	add.w	sl, fp, r0
		if (bps == NULL) {
   1da74:	f1bb 0f00 	cmp.w	fp, #0
   1da78:	d10c      	bne.n	1da94 <cbvprintf+0x71c>
   1da7a:	e6bf      	b.n	1d7fc <cbvprintf+0x484>
				len = strlen(bps);
   1da7c:	4658      	mov	r0, fp
   1da7e:	f7ff fbe0 	bl	1d242 <strlen>
   1da82:	e7f4      	b.n	1da6e <cbvprintf+0x6f6>
		char sign = 0;
   1da84:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1da86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			bpe = buf + 1;
   1da88:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1da8c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				bps = encode_float(value->dbl, conv, precision,
   1da90:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
		size_t nj_len = (bpe - bps);
   1da94:	ebaa 030b 	sub.w	r3, sl, fp
		if (sign != 0) {
   1da98:	b107      	cbz	r7, 1da9c <cbvprintf+0x724>
			nj_len += 1U;
   1da9a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1da9c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   1daa0:	06ca      	lsls	r2, r1, #27
   1daa2:	f140 831a 	bpl.w	1e0da <cbvprintf+0xd62>
			nj_len += 2U;
   1daa6:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   1daa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
		if (conv->pad_fp) {
   1daaa:	0648      	lsls	r0, r1, #25
		nj_len += conv->pad0_value;
   1daac:	4413      	add	r3, r2
			nj_len += conv->pad0_pre_exp;
   1daae:	bf44      	itt	mi
   1dab0:	9a12      	ldrmi	r2, [sp, #72]	; 0x48
   1dab2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1dab4:	9a02      	ldr	r2, [sp, #8]
   1dab6:	2a00      	cmp	r2, #0
   1dab8:	dd23      	ble.n	1db02 <cbvprintf+0x78a>
			width -= (int)nj_len;
   1daba:	1ad3      	subs	r3, r2, r3
			if (!conv->flag_dash) {
   1dabc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1dac0:	0751      	lsls	r1, r2, #29
   1dac2:	f3c2 0580 	ubfx	r5, r2, #2, #1
   1dac6:	f100 831b 	bmi.w	1e100 <cbvprintf+0xd88>
				if (conv->flag_zero) {
   1daca:	0650      	lsls	r0, r2, #25
   1dacc:	f140 8314 	bpl.w	1e0f8 <cbvprintf+0xd80>
					if (sign != 0) {
   1dad0:	2f00      	cmp	r7, #0
   1dad2:	f000 8313 	beq.w	1e0fc <cbvprintf+0xd84>
						OUTC(sign);
   1dad6:	4649      	mov	r1, r9
   1dad8:	4638      	mov	r0, r7
   1dada:	9302      	str	r3, [sp, #8]
   1dadc:	47c0      	blx	r8
   1dade:	2800      	cmp	r0, #0
   1dae0:	f2c0 8305 	blt.w	1e0ee <cbvprintf+0xd76>
						sign = 0;
   1dae4:	462f      	mov	r7, r5
					pad = '0';
   1dae6:	2530      	movs	r5, #48	; 0x30
   1dae8:	9b02      	ldr	r3, [sp, #8]
						OUTC(sign);
   1daea:	3601      	adds	r6, #1
					pad = '0';
   1daec:	9302      	str	r3, [sp, #8]
   1daee:	441e      	add	r6, r3
   1daf0:	9b02      	ldr	r3, [sp, #8]
   1daf2:	1af0      	subs	r0, r6, r3
				while (width-- > 0) {
   1daf4:	2b00      	cmp	r3, #0
   1daf6:	f103 33ff 	add.w	r3, r3, #4294967295
   1dafa:	9302      	str	r3, [sp, #8]
   1dafc:	f300 82f1 	bgt.w	1e0e2 <cbvprintf+0xd6a>
   1db00:	4606      	mov	r6, r0
		if (sign != 0) {
   1db02:	b137      	cbz	r7, 1db12 <cbvprintf+0x79a>
			OUTC(sign);
   1db04:	4649      	mov	r1, r9
   1db06:	4638      	mov	r0, r7
   1db08:	47c0      	blx	r8
   1db0a:	2800      	cmp	r0, #0
   1db0c:	f2c0 82ef 	blt.w	1e0ee <cbvprintf+0xd76>
   1db10:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1db12:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1db16:	0659      	lsls	r1, r3, #25
   1db18:	f140 8348 	bpl.w	1e1ac <cbvprintf+0xe34>
			if (conv->specifier_a) {
   1db1c:	f99d 3041 	ldrsb.w	r3, [sp, #65]	; 0x41
   1db20:	eba6 060b 	sub.w	r6, r6, fp
   1db24:	2b00      	cmp	r3, #0
   1db26:	f280 82f7 	bge.w	1e118 <cbvprintf+0xda0>
   1db2a:	465f      	mov	r7, fp
   1db2c:	eb06 030b 	add.w	r3, r6, fp
				while (*cp != 'p') {
   1db30:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1db34:	2870      	cmp	r0, #112	; 0x70
   1db36:	f040 82e5 	bne.w	1e104 <cbvprintf+0xd8c>
			while (pad_len-- > 0) {
   1db3a:	461e      	mov	r6, r3
   1db3c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1db3e:	441d      	add	r5, r3
   1db40:	1bab      	subs	r3, r5, r6
   1db42:	2b00      	cmp	r3, #0
   1db44:	f300 832b 	bgt.w	1e19e <cbvprintf+0xe26>
			OUTS(cp, bpe);
   1db48:	4653      	mov	r3, sl
   1db4a:	463a      	mov	r2, r7
			OUTS(bps, bpe);
   1db4c:	4649      	mov	r1, r9
   1db4e:	4640      	mov	r0, r8
   1db50:	f01f faf9 	bl	3d146 <outs>
   1db54:	2800      	cmp	r0, #0
   1db56:	f2c0 82ca 	blt.w	1e0ee <cbvprintf+0xd76>
   1db5a:	9b02      	ldr	r3, [sp, #8]
   1db5c:	4430      	add	r0, r6
   1db5e:	4403      	add	r3, r0
			while (pad_len-- > 0) {
   1db60:	4606      	mov	r6, r0
   1db62:	461d      	mov	r5, r3
		while (width > 0) {
   1db64:	1bab      	subs	r3, r5, r6
   1db66:	2b00      	cmp	r3, #0
   1db68:	f77f ae48 	ble.w	1d7fc <cbvprintf+0x484>
			OUTC(' ');
   1db6c:	4649      	mov	r1, r9
   1db6e:	2020      	movs	r0, #32
   1db70:	47c0      	blx	r8
   1db72:	2800      	cmp	r0, #0
   1db74:	f2c0 82bb 	blt.w	1e0ee <cbvprintf+0xd76>
   1db78:	3601      	adds	r6, #1
			--width;
   1db7a:	e7f3      	b.n	1db64 <cbvprintf+0x7ec>
			if (conv->flag_plus) {
   1db7c:	f01a 0f08 	tst.w	sl, #8
   1db80:	d12a      	bne.n	1dbd8 <cbvprintf+0x860>
				sign = ' ';
   1db82:	f01a 0710 	ands.w	r7, sl, #16
   1db86:	bf18      	it	ne
   1db88:	2720      	movne	r7, #32
			sint = value->sint;
   1db8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
   1db8e:	2b00      	cmp	r3, #0
   1db90:	da05      	bge.n	1db9e <cbvprintf+0x826>
				sign = '-';
   1db92:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1db94:	4252      	negs	r2, r2
   1db96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1db9a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			bps = encode_uint(value->uint, conv, buf, bpe);
   1db9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1dba2:	f10d 036d 	add.w	r3, sp, #109	; 0x6d
   1dba6:	9300      	str	r3, [sp, #0]
   1dba8:	aa10      	add	r2, sp, #64	; 0x40
   1dbaa:	ab15      	add	r3, sp, #84	; 0x54
   1dbac:	f003 fef2 	bl	21994 <encode_uint>
   1dbb0:	4683      	mov	fp, r0
			if (precision >= 0) {
   1dbb2:	2d00      	cmp	r5, #0
   1dbb4:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
   1dbb8:	f6ff af5c 	blt.w	1da74 <cbvprintf+0x6fc>
				conv->flag_zero = false;
   1dbbc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   1dbc0:	ebaa 020b 	sub.w	r2, sl, fp
				conv->flag_zero = false;
   1dbc4:	f36f 1386 	bfc	r3, #6, #1
				if (len < (size_t)precision) {
   1dbc8:	4295      	cmp	r5, r2
				conv->flag_zero = false;
   1dbca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   1dbce:	f67f af51 	bls.w	1da74 <cbvprintf+0x6fc>
					conv->pad0_value = precision - (int)len;
   1dbd2:	1aaa      	subs	r2, r5, r2
   1dbd4:	9211      	str	r2, [sp, #68]	; 0x44
   1dbd6:	e74d      	b.n	1da74 <cbvprintf+0x6fc>
				sign = '+';
   1dbd8:	272b      	movs	r7, #43	; 0x2b
   1dbda:	e7d6      	b.n	1db8a <cbvprintf+0x812>
		switch (conv->specifier) {
   1dbdc:	2700      	movs	r7, #0
   1dbde:	e7de      	b.n	1db9e <cbvprintf+0x826>
			if (value->ptr != NULL) {
   1dbe0:	980e      	ldr	r0, [sp, #56]	; 0x38
   1dbe2:	2800      	cmp	r0, #0
   1dbe4:	f000 8273 	beq.w	1e0ce <cbvprintf+0xd56>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dbe8:	f10d 036d 	add.w	r3, sp, #109	; 0x6d
   1dbec:	9300      	str	r3, [sp, #0]
   1dbee:	2100      	movs	r1, #0
   1dbf0:	ab15      	add	r3, sp, #84	; 0x54
   1dbf2:	aa10      	add	r2, sp, #64	; 0x40
   1dbf4:	f003 fece 	bl	21994 <encode_uint>
				conv->altform_0c = true;
   1dbf8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dbfc:	4683      	mov	fp, r0
				conv->altform_0c = true;
   1dbfe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1dc02:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1dc06:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1dc0a:	2700      	movs	r7, #0
				conv->altform_0c = true;
   1dc0c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
				goto prec_int_pad0;
   1dc10:	e7cf      	b.n	1dbb2 <cbvprintf+0x83a>
				store_count(conv, value->ptr, count);
   1dc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   1dc14:	2907      	cmp	r1, #7
   1dc16:	f63f adf1 	bhi.w	1d7fc <cbvprintf+0x484>
   1dc1a:	e8df f001 	tbb	[pc, r1]
   1dc1e:	040c      	.short	0x040c
   1dc20:	08080c06 	.word	0x08080c06
   1dc24:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1dc26:	701e      	strb	r6, [r3, #0]
		break;
   1dc28:	e5e8      	b.n	1d7fc <cbvprintf+0x484>
		*(short *)dp = (short)count;
   1dc2a:	801e      	strh	r6, [r3, #0]
		break;
   1dc2c:	e5e6      	b.n	1d7fc <cbvprintf+0x484>
		*(intmax_t *)dp = (intmax_t)count;
   1dc2e:	17f2      	asrs	r2, r6, #31
   1dc30:	e9c3 6200 	strd	r6, r2, [r3]
		break;
   1dc34:	e5e2      	b.n	1d7fc <cbvprintf+0x484>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1dc36:	601e      	str	r6, [r3, #0]
		break;
   1dc38:	e5e0      	b.n	1d7fc <cbvprintf+0x484>
		*sign = '-';
   1dc3a:	272d      	movs	r7, #45	; 0x2d
   1dc3c:	e64a      	b.n	1d8d4 <cbvprintf+0x55c>
		*sign = '+';
   1dc3e:	272b      	movs	r7, #43	; 0x2b
   1dc40:	e648      	b.n	1d8d4 <cbvprintf+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1dc42:	f240 7cff 	movw	ip, #2047	; 0x7ff
   1dc46:	4560      	cmp	r0, ip
   1dc48:	d131      	bne.n	1dcae <cbvprintf+0x936>
			if (isupper((int)c)) {
   1dc4a:	48bb      	ldr	r0, [pc, #748]	; (1df38 <cbvprintf+0xbc0>)
   1dc4c:	3201      	adds	r2, #1
   1dc4e:	b2d2      	uxtb	r2, r2
   1dc50:	5c12      	ldrb	r2, [r2, r0]
		if (fract == 0) {
   1dc52:	430b      	orrs	r3, r1
   1dc54:	f002 0203 	and.w	r2, r2, #3
   1dc58:	d11b      	bne.n	1dc92 <cbvprintf+0x91a>
			if (isupper((int)c)) {
   1dc5a:	2a01      	cmp	r2, #1
   1dc5c:	d111      	bne.n	1dc82 <cbvprintf+0x90a>
				*buf++ = 'I';
   1dc5e:	2349      	movs	r3, #73	; 0x49
   1dc60:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				*buf++ = 'N';
   1dc64:	234e      	movs	r3, #78	; 0x4e
   1dc66:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				*buf++ = 'F';
   1dc6a:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
   1dc6c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
		conv->flag_zero = false;
   1dc70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		*bpe = buf;
   1dc74:	f10d 0a57 	add.w	sl, sp, #87	; 0x57
		conv->flag_zero = false;
   1dc78:	f36f 1386 	bfc	r3, #6, #1
   1dc7c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		return bps;
   1dc80:	e706      	b.n	1da90 <cbvprintf+0x718>
				*buf++ = 'i';
   1dc82:	2369      	movs	r3, #105	; 0x69
   1dc84:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				*buf++ = 'n';
   1dc88:	236e      	movs	r3, #110	; 0x6e
   1dc8a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				*buf++ = 'f';
   1dc8e:	2366      	movs	r3, #102	; 0x66
   1dc90:	e7ec      	b.n	1dc6c <cbvprintf+0x8f4>
			if (isupper((int)c)) {
   1dc92:	2a01      	cmp	r2, #1
				*buf++ = 'N';
   1dc94:	bf07      	ittee	eq
   1dc96:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
   1dc98:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
   1dc9a:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
   1dc9c:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
   1dc9e:	bf0c      	ite	eq
   1dca0:	f88d 3054 	strbeq.w	r3, [sp, #84]	; 0x54
				*buf++ = 'n';
   1dca4:	f88d 3054 	strbne.w	r3, [sp, #84]	; 0x54
				*buf++ = 'a';
   1dca8:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
   1dcac:	e7de      	b.n	1dc6c <cbvprintf+0x8f4>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1dcae:	f04f 0e00 	mov.w	lr, #0
   1dcb2:	e61f      	b.n	1d8f4 <cbvprintf+0x57c>
			++expo;
   1dcb4:	f2a0 30fe 	subw	r0, r0, #1022	; 0x3fe
   1dcb8:	9004      	str	r0, [sp, #16]
   1dcba:	e635      	b.n	1d928 <cbvprintf+0x5b0>
		} else if ((fract != 0)
   1dcbc:	ea51 0003 	orrs.w	r0, r1, r3
   1dcc0:	d020      	beq.n	1dd04 <cbvprintf+0x98c>
			   && (precision < FRACTION_HEX)) {
   1dcc2:	2d0d      	cmp	r5, #13
   1dcc4:	d01e      	beq.n	1dd04 <cbvprintf+0x98c>
			uint64_t mask = BIT64(pos);
   1dcc6:	2001      	movs	r0, #1
			size_t pos = 4 * (FRACTION_HEX - precision) - 1;
   1dcc8:	f1c5 0c0d 	rsb	ip, r5, #13
   1dccc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1dcd0:	f10c 3bff 	add.w	fp, ip, #4294967295
			uint64_t mask = BIT64(pos);
   1dcd4:	f1ac 0e21 	sub.w	lr, ip, #33	; 0x21
   1dcd8:	f1cc 0c21 	rsb	ip, ip, #33	; 0x21
   1dcdc:	fa00 fe0e 	lsl.w	lr, r0, lr
   1dce0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1dce4:	ea4e 0c0c 	orr.w	ip, lr, ip
   1dce8:	fa00 f00b 	lsl.w	r0, r0, fp
			if (fract & mask) {
   1dcec:	ea01 0b00 	and.w	fp, r1, r0
   1dcf0:	ea03 0e0c 	and.w	lr, r3, ip
   1dcf4:	ea5b 0e0e 	orrs.w	lr, fp, lr
   1dcf8:	d004      	beq.n	1dd04 <cbvprintf+0x98c>
				fract += mask;
   1dcfa:	1809      	adds	r1, r1, r0
   1dcfc:	eb43 030c 	adc.w	r3, r3, ip
   1dd00:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool prune_zero = false;
   1dd04:	f04f 0b00 	mov.w	fp, #0
   1dd08:	e626      	b.n	1d958 <cbvprintf+0x5e0>
			prune_zero = true;
   1dd0a:	f04f 0b01 	mov.w	fp, #1
   1dd0e:	e622      	b.n	1d956 <cbvprintf+0x5de>
		bool require_dp = ((fract != 0) || conv->flag_hash);
   1dd10:	f04f 0a01 	mov.w	sl, #1
   1dd14:	e62d      	b.n	1d972 <cbvprintf+0x5fa>
   1dd16:	46aa      	mov	sl, r5
   1dd18:	f10d 0357 	add.w	r3, sp, #87	; 0x57
   1dd1c:	e62d      	b.n	1d97a <cbvprintf+0x602>
			*--sp = '0';
   1dd1e:	f800 cd01 	strb.w	ip, [r0, #-1]!
		while ((spe - sp) < FRACTION_HEX) {
   1dd22:	1a11      	subs	r1, r2, r0
   1dd24:	290c      	cmp	r1, #12
   1dd26:	ddfa      	ble.n	1dd1e <cbvprintf+0x9a6>
		while ((sp < spe) && (precision > 0)) {
   1dd28:	f10d 0c6d 	add.w	ip, sp, #109	; 0x6d
   1dd2c:	eb00 0e05 	add.w	lr, r0, r5
   1dd30:	4560      	cmp	r0, ip
   1dd32:	461d      	mov	r5, r3
   1dd34:	d203      	bcs.n	1dd3e <cbvprintf+0x9c6>
   1dd36:	ebae 0100 	sub.w	r1, lr, r0
   1dd3a:	2900      	cmp	r1, #0
   1dd3c:	dc31      	bgt.n	1dda2 <cbvprintf+0xa2a>
		if (prune_zero) {
   1dd3e:	f1bb 0f00 	cmp.w	fp, #0
   1dd42:	d00a      	beq.n	1dd5a <cbvprintf+0x9e2>
			while (*--buf == '0') {
   1dd44:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1dd48:	1e6b      	subs	r3, r5, #1
   1dd4a:	2930      	cmp	r1, #48	; 0x30
   1dd4c:	d02e      	beq.n	1ddac <cbvprintf+0xa34>
			if ((*buf != '.') || require_dp) {
   1dd4e:	292e      	cmp	r1, #46	; 0x2e
   1dd50:	d103      	bne.n	1dd5a <cbvprintf+0x9e2>
			while (*--buf == '0') {
   1dd52:	f1ba 0f00 	cmp.w	sl, #0
   1dd56:	bf08      	it	eq
   1dd58:	461d      	moveq	r5, r3
		*buf++ = 'p';
   1dd5a:	46aa      	mov	sl, r5
   1dd5c:	2370      	movs	r3, #112	; 0x70
   1dd5e:	f80a 3b02 	strb.w	r3, [sl], #2
		if (expo >= 0) {
   1dd62:	9b04      	ldr	r3, [sp, #16]
   1dd64:	2b00      	cmp	r3, #0
			expo = -expo;
   1dd66:	bfbb      	ittet	lt
   1dd68:	425b      	neglt	r3, r3
   1dd6a:	9304      	strlt	r3, [sp, #16]
			*buf++ = '+';
   1dd6c:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
   1dd6e:	232d      	movlt	r3, #45	; 0x2d
   1dd70:	f805 3f01 	strb.w	r3, [r5, #1]!
		aconv.specifier = 'i';
   1dd74:	2369      	movs	r3, #105	; 0x69
		sp = encode_uint(expo, &aconv, buf, spe);
   1dd76:	9804      	ldr	r0, [sp, #16]
		aconv.specifier = 'i';
   1dd78:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
		sp = encode_uint(expo, &aconv, buf, spe);
   1dd7c:	9200      	str	r2, [sp, #0]
   1dd7e:	4653      	mov	r3, sl
   1dd80:	aa0a      	add	r2, sp, #40	; 0x28
   1dd82:	17c1      	asrs	r1, r0, #31
   1dd84:	f003 fe06 	bl	21994 <encode_uint>
   1dd88:	4603      	mov	r3, r0
		while (sp < spe) {
   1dd8a:	f10d 026d 	add.w	r2, sp, #109	; 0x6d
   1dd8e:	4293      	cmp	r3, r2
   1dd90:	d30e      	bcc.n	1ddb0 <cbvprintf+0xa38>
   1dd92:	1a13      	subs	r3, r2, r0
   1dd94:	4290      	cmp	r0, r2
   1dd96:	bf88      	it	hi
   1dd98:	2300      	movhi	r3, #0
   1dd9a:	449a      	add	sl, r3
		return bps;
   1dd9c:	e678      	b.n	1da90 <cbvprintf+0x718>
		char *sp = bps + (spe - bps);
   1dd9e:	4610      	mov	r0, r2
   1dda0:	e60b      	b.n	1d9ba <cbvprintf+0x642>
			*buf++ = *sp++;
   1dda2:	f810 1b01 	ldrb.w	r1, [r0], #1
   1dda6:	f803 1b01 	strb.w	r1, [r3], #1
			--precision;
   1ddaa:	e7c1      	b.n	1dd30 <cbvprintf+0x9b8>
   1ddac:	461d      	mov	r5, r3
   1ddae:	e7c9      	b.n	1dd44 <cbvprintf+0x9cc>
			*buf++ = *sp++;
   1ddb0:	f813 1b01 	ldrb.w	r1, [r3], #1
   1ddb4:	f805 1f01 	strb.w	r1, [r5, #1]!
   1ddb8:	e7e9      	b.n	1dd8e <cbvprintf+0xa16>
	fract <<= EXPONENT_BITS;
   1ddba:	02db      	lsls	r3, r3, #11
   1ddbc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   1ddc0:	02c9      	lsls	r1, r1, #11
	if ((expo | fract) != 0) {
   1ddc2:	ea40 0a01 	orr.w	sl, r0, r1
   1ddc6:	ea43 7ce0 	orr.w	ip, r3, r0, asr #31
   1ddca:	ea5a 0c0c 	orrs.w	ip, sl, ip
	fract &= ~SIGN_MASK;
   1ddce:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
   1ddd2:	f000 8082 	beq.w	1deda <cbvprintf+0xb62>
		if (is_subnormal) {
   1ddd6:	f1be 0f00 	cmp.w	lr, #0
   1ddda:	d149      	bne.n	1de70 <cbvprintf+0xaf8>
		fract |= BIT_63;
   1dddc:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1dde0:	f2a0 3afe 	subw	sl, r0, #1022	; 0x3fe
		fract |= BIT_63;
   1dde4:	2000      	movs	r0, #0
		fract *= 5U;
   1dde6:	f04f 0c05 	mov.w	ip, #5
		fract |= BIT_63;
   1ddea:	4683      	mov	fp, r0
   1ddec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ddf0:	9309      	str	r3, [sp, #36]	; 0x24
	while (expo < -2) {
   1ddf2:	f11a 0f02 	cmn.w	sl, #2
   1ddf6:	db42      	blt.n	1de7e <cbvprintf+0xb06>
   1ddf8:	b108      	cbz	r0, 1ddfe <cbvprintf+0xa86>
   1ddfa:	e9cd 1308 	strd	r1, r3, [sp, #32]
		fract += 2;
   1ddfe:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
	while (expo > 0) {
   1de02:	f1ba 0f00 	cmp.w	sl, #0
   1de06:	dc4f      	bgt.n	1dea8 <cbvprintf+0xb30>
	fract >>= (4 - expo);
   1de08:	9909      	ldr	r1, [sp, #36]	; 0x24
   1de0a:	9b08      	ldr	r3, [sp, #32]
   1de0c:	f1ca 0c04 	rsb	ip, sl, #4
   1de10:	f10a 001c 	add.w	r0, sl, #28
   1de14:	fa01 f000 	lsl.w	r0, r1, r0
   1de18:	f1ac 0e20 	sub.w	lr, ip, #32
   1de1c:	fa23 f30c 	lsr.w	r3, r3, ip
   1de20:	fa21 fe0e 	lsr.w	lr, r1, lr
   1de24:	4303      	orrs	r3, r0
   1de26:	ea43 030e 	orr.w	r3, r3, lr
   1de2a:	fa21 f10c 	lsr.w	r1, r1, ip
   1de2e:	e9cd 3108 	strd	r3, r1, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   1de32:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1de36:	2b47      	cmp	r3, #71	; 0x47
   1de38:	d157      	bne.n	1deea <cbvprintf+0xb72>
		if (decexp < (-4 + 1) || decexp > precision) {
   1de3a:	f11b 0f03 	cmn.w	fp, #3
   1de3e:	db01      	blt.n	1de44 <cbvprintf+0xacc>
   1de40:	455d      	cmp	r5, fp
   1de42:	da4e      	bge.n	1dee2 <cbvprintf+0xb6a>
			c += 'e' - 'g';  /* e or E */
   1de44:	3a02      	subs	r2, #2
			if (precision > 0) {
   1de46:	2d00      	cmp	r5, #0
			c += 'e' - 'g';  /* e or E */
   1de48:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
   1de4a:	dd00      	ble.n	1de4e <cbvprintf+0xad6>
				precision--;
   1de4c:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   1de4e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1de52:	0699      	lsls	r1, r3, #26
   1de54:	d449      	bmi.n	1deea <cbvprintf+0xb72>
   1de56:	2d00      	cmp	r5, #0
   1de58:	bfd4      	ite	le
   1de5a:	2300      	movle	r3, #0
   1de5c:	2301      	movgt	r3, #1
	if (c == 'f') {
   1de5e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
   1de60:	9304      	str	r3, [sp, #16]
	if (c == 'f') {
   1de62:	d144      	bne.n	1deee <cbvprintf+0xb76>
		if (decimals < 0) {
   1de64:	eb15 030b 	adds.w	r3, r5, fp
   1de68:	d542      	bpl.n	1def0 <cbvprintf+0xb78>
			decimals = 0;
   1de6a:	2300      	movs	r3, #0
   1de6c:	e043      	b.n	1def6 <cbvprintf+0xb7e>
				expo--;
   1de6e:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1de70:	1849      	adds	r1, r1, r1
   1de72:	415b      	adcs	r3, r3
   1de74:	2b00      	cmp	r3, #0
   1de76:	dafa      	bge.n	1de6e <cbvprintf+0xaf6>
   1de78:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1de7c:	e7ae      	b.n	1dddc <cbvprintf+0xa64>
			fract >>= 1;
   1de7e:	0849      	lsrs	r1, r1, #1
   1de80:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
   1de84:	085b      	lsrs	r3, r3, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1de86:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
   1de8a:	4650      	mov	r0, sl
			expo++;
   1de8c:	f10a 0a01 	add.w	sl, sl, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1de90:	d2f5      	bcs.n	1de7e <cbvprintf+0xb06>
		fract *= 5U;
   1de92:	fb0c fe03 	mul.w	lr, ip, r3
   1de96:	fba1 130c 	umull	r1, r3, r1, ip
		expo++;
   1de9a:	f100 0a02 	add.w	sl, r0, #2
		fract *= 5U;
   1de9e:	4473      	add	r3, lr
		decexp--;
   1dea0:	2001      	movs	r0, #1
   1dea2:	f10b 3bff 	add.w	fp, fp, #4294967295
   1dea6:	e7a4      	b.n	1ddf2 <cbvprintf+0xa7a>
		fract += 2;
   1dea8:	3102      	adds	r1, #2
   1deaa:	f143 0300 	adc.w	r3, r3, #0
		_ldiv5(&fract);
   1deae:	a808      	add	r0, sp, #32
		fract += 2;
   1deb0:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1deb4:	9204      	str	r2, [sp, #16]
		_ldiv5(&fract);
   1deb6:	f01f f917 	bl	3d0e8 <_ldiv5>
		expo--;
   1deba:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
   1debe:	9a04      	ldr	r2, [sp, #16]
   1dec0:	f10a 3aff 	add.w	sl, sl, #4294967295
		decexp++;
   1dec4:	f10b 0b01 	add.w	fp, fp, #1
			fract <<= 1;
   1dec8:	18db      	adds	r3, r3, r3
   1deca:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   1decc:	2900      	cmp	r1, #0
			expo--;
   1dece:	f10a 3aff 	add.w	sl, sl, #4294967295
		} while (!(fract & BIT_63));
   1ded2:	daf9      	bge.n	1dec8 <cbvprintf+0xb50>
   1ded4:	e9cd 3108 	strd	r3, r1, [sp, #32]
   1ded8:	e791      	b.n	1ddfe <cbvprintf+0xa86>
   1deda:	f04f 0b00 	mov.w	fp, #0
   1dede:	46da      	mov	sl, fp
   1dee0:	e792      	b.n	1de08 <cbvprintf+0xa90>
			c = 'f';
   1dee2:	2266      	movs	r2, #102	; 0x66
			precision -= decexp;
   1dee4:	eba5 050b 	sub.w	r5, r5, fp
   1dee8:	e7b1      	b.n	1de4e <cbvprintf+0xad6>
	bool prune_zero = false;
   1deea:	2300      	movs	r3, #0
   1deec:	e7b7      	b.n	1de5e <cbvprintf+0xae6>
		decimals = precision + 1;
   1deee:	1c6b      	adds	r3, r5, #1
	if (decimals > 16) {
   1def0:	2b10      	cmp	r3, #16
   1def2:	bfa8      	it	ge
   1def4:	2310      	movge	r3, #16
   1def6:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
   1def8:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
   1defc:	469a      	mov	sl, r3
   1defe:	9107      	str	r1, [sp, #28]
	*v >>= 1;
   1df00:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
	while (decimals--) {
   1df04:	f1ba 0f00 	cmp.w	sl, #0
   1df08:	d118      	bne.n	1df3c <cbvprintf+0xbc4>
	fract += round;
   1df0a:	9808      	ldr	r0, [sp, #32]
   1df0c:	1809      	adds	r1, r1, r0
   1df0e:	9809      	ldr	r0, [sp, #36]	; 0x24
   1df10:	eb43 0300 	adc.w	r3, r3, r0
	if (fract >= BIT64(60)) {
   1df14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1df18:	d21e      	bcs.n	1df58 <cbvprintf+0xbe0>
	fract += round;
   1df1a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if (c == 'f') {
   1df1e:	2a66      	cmp	r2, #102	; 0x66
   1df20:	f040 80a3 	bne.w	1e06a <cbvprintf+0xcf2>
		if (decexp > 0) {
   1df24:	f1bb 0f00 	cmp.w	fp, #0
   1df28:	dc24      	bgt.n	1df74 <cbvprintf+0xbfc>
			*buf++ = '0';
   1df2a:	2330      	movs	r3, #48	; 0x30
   1df2c:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
   1df30:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   1df34:	e032      	b.n	1df9c <cbvprintf+0xc24>
   1df36:	bf00      	nop
   1df38:	0004c62e 	.word	0x0004c62e
	*v >>= 1;
   1df3c:	0849      	lsrs	r1, r1, #1
   1df3e:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
	_ldiv5(v);
   1df42:	a80a      	add	r0, sp, #40	; 0x28
	*v >>= 1;
   1df44:	085b      	lsrs	r3, r3, #1
   1df46:	9205      	str	r2, [sp, #20]
   1df48:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
	_ldiv5(v);
   1df4c:	f10a 3aff 	add.w	sl, sl, #4294967295
   1df50:	f01f f8ca 	bl	3d0e8 <_ldiv5>
   1df54:	9a05      	ldr	r2, [sp, #20]
}
   1df56:	e7d3      	b.n	1df00 <cbvprintf+0xb88>
	*v >>= 1;
   1df58:	0849      	lsrs	r1, r1, #1
   1df5a:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
	_ldiv5(v);
   1df5e:	a808      	add	r0, sp, #32
	*v >>= 1;
   1df60:	085b      	lsrs	r3, r3, #1
   1df62:	9205      	str	r2, [sp, #20]
   1df64:	e9cd 1308 	strd	r1, r3, [sp, #32]
		decexp++;
   1df68:	f10b 0b01 	add.w	fp, fp, #1
	_ldiv5(v);
   1df6c:	f01f f8bc 	bl	3d0e8 <_ldiv5>
		decexp++;
   1df70:	9a05      	ldr	r2, [sp, #20]
   1df72:	e7d4      	b.n	1df1e <cbvprintf+0xba6>
	char *buf = bps;
   1df74:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
			while (decexp > 0 && digit_count > 0) {
   1df78:	9b07      	ldr	r3, [sp, #28]
   1df7a:	2b00      	cmp	r3, #0
   1df7c:	dd0a      	ble.n	1df94 <cbvprintf+0xc1c>
				*buf++ = _get_digit(&fract, &digit_count);
   1df7e:	a907      	add	r1, sp, #28
   1df80:	a808      	add	r0, sp, #32
   1df82:	9205      	str	r2, [sp, #20]
   1df84:	f01f f8c8 	bl	3d118 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1df88:	f1bb 0b01 	subs.w	fp, fp, #1
   1df8c:	9a05      	ldr	r2, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
   1df8e:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
   1df92:	d1f1      	bne.n	1df78 <cbvprintf+0xc00>
			conv->pad0_value = decexp;
   1df94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
			decexp = 0;
   1df98:	f04f 0b00 	mov.w	fp, #0
		if (conv->flag_hash || (precision > 0)) {
   1df9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1dfa0:	0698      	lsls	r0, r3, #26
   1dfa2:	d401      	bmi.n	1dfa8 <cbvprintf+0xc30>
   1dfa4:	2d00      	cmp	r5, #0
   1dfa6:	dd1e      	ble.n	1dfe6 <cbvprintf+0xc6e>
			*buf++ = '.';
   1dfa8:	232e      	movs	r3, #46	; 0x2e
   1dfaa:	f80a 3b01 	strb.w	r3, [sl], #1
		if (decexp < 0 && precision > 0) {
   1dfae:	f1bb 0f00 	cmp.w	fp, #0
   1dfb2:	d013      	beq.n	1dfdc <cbvprintf+0xc64>
   1dfb4:	2d00      	cmp	r5, #0
   1dfb6:	dd16      	ble.n	1dfe6 <cbvprintf+0xc6e>
			conv->pad0_value = -decexp;
   1dfb8:	f1cb 0100 	rsb	r1, fp, #0
   1dfbc:	42a9      	cmp	r1, r5
   1dfbe:	bfa8      	it	ge
   1dfc0:	4629      	movge	r1, r5
			conv->pad_postdp = (conv->pad0_value > 0);
   1dfc2:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   1dfc4:	9111      	str	r1, [sp, #68]	; 0x44
			precision -= conv->pad0_value;
   1dfc6:	eba5 0501 	sub.w	r5, r5, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   1dfca:	bfd4      	ite	le
   1dfcc:	2100      	movle	r1, #0
   1dfce:	2101      	movgt	r1, #1
   1dfd0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1dfd4:	f361 1345 	bfi	r3, r1, #5, #1
   1dfd8:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
	while (precision > 0 && digit_count > 0) {
   1dfdc:	2d00      	cmp	r5, #0
   1dfde:	dd02      	ble.n	1dfe6 <cbvprintf+0xc6e>
   1dfe0:	9b07      	ldr	r3, [sp, #28]
   1dfe2:	2b00      	cmp	r3, #0
   1dfe4:	dc59      	bgt.n	1e09a <cbvprintf+0xd22>
	if (prune_zero) {
   1dfe6:	9b04      	ldr	r3, [sp, #16]
   1dfe8:	2b00      	cmp	r3, #0
   1dfea:	d163      	bne.n	1e0b4 <cbvprintf+0xd3c>
	conv->pad0_pre_exp = precision;
   1dfec:	9512      	str	r5, [sp, #72]	; 0x48
	if ((c == 'e') || (c == 'E')) {
   1dfee:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1dff2:	2b45      	cmp	r3, #69	; 0x45
   1dff4:	d127      	bne.n	1e046 <cbvprintf+0xcce>
		*buf++ = c;
   1dff6:	4653      	mov	r3, sl
		if (decexp < 0) {
   1dff8:	f1bb 0f00 	cmp.w	fp, #0
		*buf++ = c;
   1dffc:	f803 2b02 	strb.w	r2, [r3], #2
			*buf++ = '-';
   1e000:	bfb6      	itet	lt
   1e002:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   1e004:	222b      	movge	r2, #43	; 0x2b
			decexp = -decexp;
   1e006:	f1cb 0b00 	rsblt	fp, fp, #0
		if (decexp >= 100) {
   1e00a:	f1bb 0f63 	cmp.w	fp, #99	; 0x63
   1e00e:	f88a 2001 	strb.w	r2, [sl, #1]
   1e012:	dd0a      	ble.n	1e02a <cbvprintf+0xcb2>
			*buf++ = (decexp / 100) + '0';
   1e014:	2164      	movs	r1, #100	; 0x64
   1e016:	fbbb f2f1 	udiv	r2, fp, r1
			decexp %= 100;
   1e01a:	fb01 bb12 	mls	fp, r1, r2, fp
			*buf++ = (decexp / 100) + '0';
   1e01e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1e022:	f10a 0303 	add.w	r3, sl, #3
   1e026:	f88a 0002 	strb.w	r0, [sl, #2]
		*buf++ = (decexp / 10) + '0';
   1e02a:	210a      	movs	r1, #10
   1e02c:	fbbb f2f1 	udiv	r2, fp, r1
   1e030:	469a      	mov	sl, r3
		*buf++ = (decexp % 10) + '0';
   1e032:	fb01 bb12 	mls	fp, r1, r2, fp
		*buf++ = (decexp / 10) + '0';
   1e036:	f102 0030 	add.w	r0, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1e03a:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1e03e:	f80a 0b02 	strb.w	r0, [sl], #2
		*buf++ = (decexp % 10) + '0';
   1e042:	f883 b001 	strb.w	fp, [r3, #1]
		|| (conv->pad0_pre_exp > 0);
   1e046:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e048:	2b00      	cmp	r3, #0
   1e04a:	dc3e      	bgt.n	1e0ca <cbvprintf+0xd52>
   1e04c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e04e:	2b00      	cmp	r3, #0
   1e050:	bfd4      	ite	le
   1e052:	2300      	movle	r3, #0
   1e054:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1e056:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
   1e05a:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   1e05e:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1e060:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
	*buf = 0;
   1e064:	f88a 3000 	strb.w	r3, [sl]
	return bps;
   1e068:	e512      	b.n	1da90 <cbvprintf+0x718>
		*buf = _get_digit(&fract, &digit_count);
   1e06a:	a907      	add	r1, sp, #28
   1e06c:	a808      	add	r0, sp, #32
   1e06e:	9205      	str	r2, [sp, #20]
   1e070:	f01f f852 	bl	3d118 <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
   1e074:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		if (*buf++ != '0') {
   1e078:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   1e07a:	bf18      	it	ne
   1e07c:	f10b 3bff 	addne.w	fp, fp, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   1e080:	0699      	lsls	r1, r3, #26
		if (*buf++ != '0') {
   1e082:	9a05      	ldr	r2, [sp, #20]
		*buf = _get_digit(&fract, &digit_count);
   1e084:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
		if (conv->flag_hash || (precision > 0)) {
   1e088:	d401      	bmi.n	1e08e <cbvprintf+0xd16>
   1e08a:	2d00      	cmp	r5, #0
   1e08c:	dd0f      	ble.n	1e0ae <cbvprintf+0xd36>
			*buf++ = '.';
   1e08e:	232e      	movs	r3, #46	; 0x2e
   1e090:	f10d 0a56 	add.w	sl, sp, #86	; 0x56
   1e094:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
   1e098:	e7a0      	b.n	1dfdc <cbvprintf+0xc64>
		*buf++ = _get_digit(&fract, &digit_count);
   1e09a:	a907      	add	r1, sp, #28
   1e09c:	a808      	add	r0, sp, #32
   1e09e:	9205      	str	r2, [sp, #20]
   1e0a0:	f01f f83a 	bl	3d118 <_get_digit>
		precision--;
   1e0a4:	3d01      	subs	r5, #1
   1e0a6:	9a05      	ldr	r2, [sp, #20]
		*buf++ = _get_digit(&fract, &digit_count);
   1e0a8:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
   1e0ac:	e796      	b.n	1dfdc <cbvprintf+0xc64>
		if (*buf++ != '0') {
   1e0ae:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
   1e0b2:	e798      	b.n	1dfe6 <cbvprintf+0xc6e>
		conv->pad0_pre_exp = 0;
   1e0b4:	2300      	movs	r3, #0
   1e0b6:	9312      	str	r3, [sp, #72]	; 0x48
		while (*--buf == '0') {
   1e0b8:	4651      	mov	r1, sl
   1e0ba:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
   1e0be:	2b30      	cmp	r3, #48	; 0x30
   1e0c0:	d0fa      	beq.n	1e0b8 <cbvprintf+0xd40>
		if (*buf != '.') {
   1e0c2:	2b2e      	cmp	r3, #46	; 0x2e
   1e0c4:	bf18      	it	ne
   1e0c6:	468a      	movne	sl, r1
   1e0c8:	e791      	b.n	1dfee <cbvprintf+0xc76>
		|| (conv->pad0_pre_exp > 0);
   1e0ca:	2301      	movs	r3, #1
   1e0cc:	e7c3      	b.n	1e056 <cbvprintf+0xcde>
			bpe = bps + 5;
   1e0ce:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1e1fc <cbvprintf+0xe84>
		char sign = 0;
   1e0d2:	4607      	mov	r7, r0
			bps = "(nil)";
   1e0d4:	f1aa 0b05 	sub.w	fp, sl, #5
   1e0d8:	e4dc      	b.n	1da94 <cbvprintf+0x71c>
		} else if (conv->altform_0) {
   1e0da:	070d      	lsls	r5, r1, #28
			nj_len += 1U;
   1e0dc:	bf48      	it	mi
   1e0de:	3301      	addmi	r3, #1
   1e0e0:	e4e2      	b.n	1daa8 <cbvprintf+0x730>
					OUTC(pad);
   1e0e2:	4649      	mov	r1, r9
   1e0e4:	4628      	mov	r0, r5
   1e0e6:	47c0      	blx	r8
   1e0e8:	2800      	cmp	r0, #0
   1e0ea:	f6bf ad01 	bge.w	1daf0 <cbvprintf+0x778>
#undef OUTS
#undef OUTC
}
   1e0ee:	b01d      	add	sp, #116	; 0x74
   1e0f0:	ecbd 8b02 	vpop	{d8}
   1e0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1e0f8:	2520      	movs	r5, #32
   1e0fa:	e4f7      	b.n	1daec <cbvprintf+0x774>
					pad = '0';
   1e0fc:	2530      	movs	r5, #48	; 0x30
   1e0fe:	e4f5      	b.n	1daec <cbvprintf+0x774>
			width -= (int)nj_len;
   1e100:	9302      	str	r3, [sp, #8]
   1e102:	e4fe      	b.n	1db02 <cbvprintf+0x78a>
					OUTC(*cp++);
   1e104:	4649      	mov	r1, r9
   1e106:	47c0      	blx	r8
   1e108:	2800      	cmp	r0, #0
   1e10a:	f6bf ad0e 	bge.w	1db2a <cbvprintf+0x7b2>
   1e10e:	e7ee      	b.n	1e0ee <cbvprintf+0xd76>
					OUTC(*cp++);
   1e110:	4649      	mov	r1, r9
   1e112:	47c0      	blx	r8
   1e114:	2800      	cmp	r0, #0
   1e116:	dbea      	blt.n	1e0ee <cbvprintf+0xd76>
   1e118:	465d      	mov	r5, fp
				while (isdigit((int)*cp)) {
   1e11a:	f89b 0000 	ldrb.w	r0, [fp]
   1e11e:	4b36      	ldr	r3, [pc, #216]	; (1e1f8 <cbvprintf+0xe80>)
   1e120:	1977      	adds	r7, r6, r5
   1e122:	5cc3      	ldrb	r3, [r0, r3]
   1e124:	f10b 0b01 	add.w	fp, fp, #1
   1e128:	075a      	lsls	r2, r3, #29
   1e12a:	d4f1      	bmi.n	1e110 <cbvprintf+0xd98>
				if (!conv->pad_postdp) {
   1e12c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
				pad_len = conv->pad0_value;
   1e130:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
				if (!conv->pad_postdp) {
   1e134:	069b      	lsls	r3, r3, #26
   1e136:	d408      	bmi.n	1e14a <cbvprintf+0xdd2>
   1e138:	eb0b 0607 	add.w	r6, fp, r7
   1e13c:	465b      	mov	r3, fp
					while (pad_len-- > 0) {
   1e13e:	2b00      	cmp	r3, #0
   1e140:	eba6 070b 	sub.w	r7, r6, fp
   1e144:	f10b 3bff 	add.w	fp, fp, #4294967295
   1e148:	dc0f      	bgt.n	1e16a <cbvprintf+0xdf2>
				if (*cp == '.') {
   1e14a:	7828      	ldrb	r0, [r5, #0]
   1e14c:	282e      	cmp	r0, #46	; 0x2e
   1e14e:	d109      	bne.n	1e164 <cbvprintf+0xdec>
					OUTC(*cp++);
   1e150:	4649      	mov	r1, r9
   1e152:	47c0      	blx	r8
						OUTC('0');
   1e154:	2800      	cmp	r0, #0
   1e156:	dbca      	blt.n	1e0ee <cbvprintf+0xd76>
					while (pad_len-- > 0) {
   1e158:	f1bb 0f00 	cmp.w	fp, #0
						OUTC('0');
   1e15c:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
   1e160:	dc09      	bgt.n	1e176 <cbvprintf+0xdfe>
					OUTC(*cp++);
   1e162:	3501      	adds	r5, #1
   1e164:	eba7 0b05 	sub.w	fp, r7, r5
   1e168:	e00f      	b.n	1e18a <cbvprintf+0xe12>
						OUTC('0');
   1e16a:	4649      	mov	r1, r9
   1e16c:	2030      	movs	r0, #48	; 0x30
   1e16e:	47c0      	blx	r8
   1e170:	2800      	cmp	r0, #0
   1e172:	dae3      	bge.n	1e13c <cbvprintf+0xdc4>
   1e174:	e7bb      	b.n	1e0ee <cbvprintf+0xd76>
						OUTC('0');
   1e176:	4649      	mov	r1, r9
   1e178:	2030      	movs	r0, #48	; 0x30
   1e17a:	47c0      	blx	r8
   1e17c:	f10b 3bff 	add.w	fp, fp, #4294967295
   1e180:	e7e8      	b.n	1e154 <cbvprintf+0xddc>
					OUTC(*cp++);
   1e182:	4649      	mov	r1, r9
   1e184:	47c0      	blx	r8
   1e186:	2800      	cmp	r0, #0
   1e188:	dbb1      	blt.n	1e0ee <cbvprintf+0xd76>
   1e18a:	462f      	mov	r7, r5
				while (isdigit((int)*cp)) {
   1e18c:	4a1a      	ldr	r2, [pc, #104]	; (1e1f8 <cbvprintf+0xe80>)
   1e18e:	eb0b 0305 	add.w	r3, fp, r5
   1e192:	f815 0b01 	ldrb.w	r0, [r5], #1
   1e196:	5c12      	ldrb	r2, [r2, r0]
   1e198:	0756      	lsls	r6, r2, #29
   1e19a:	d4f2      	bmi.n	1e182 <cbvprintf+0xe0a>
   1e19c:	e4cd      	b.n	1db3a <cbvprintf+0x7c2>
				OUTC('0');
   1e19e:	4649      	mov	r1, r9
   1e1a0:	2030      	movs	r0, #48	; 0x30
   1e1a2:	47c0      	blx	r8
   1e1a4:	2800      	cmp	r0, #0
   1e1a6:	dba2      	blt.n	1e0ee <cbvprintf+0xd76>
   1e1a8:	3601      	adds	r6, #1
   1e1aa:	e4c9      	b.n	1db40 <cbvprintf+0x7c8>
			if (conv->altform_0c | conv->altform_0) {
   1e1ac:	06d9      	lsls	r1, r3, #27
   1e1ae:	d401      	bmi.n	1e1b4 <cbvprintf+0xe3c>
   1e1b0:	071a      	lsls	r2, r3, #28
   1e1b2:	d505      	bpl.n	1e1c0 <cbvprintf+0xe48>
				OUTC('0');
   1e1b4:	4649      	mov	r1, r9
   1e1b6:	2030      	movs	r0, #48	; 0x30
   1e1b8:	47c0      	blx	r8
   1e1ba:	2800      	cmp	r0, #0
   1e1bc:	db97      	blt.n	1e0ee <cbvprintf+0xd76>
   1e1be:	3601      	adds	r6, #1
			if (conv->altform_0c) {
   1e1c0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1e1c4:	06db      	lsls	r3, r3, #27
   1e1c6:	d506      	bpl.n	1e1d6 <cbvprintf+0xe5e>
				OUTC(conv->specifier);
   1e1c8:	4649      	mov	r1, r9
   1e1ca:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   1e1ce:	47c0      	blx	r8
   1e1d0:	2800      	cmp	r0, #0
   1e1d2:	db8c      	blt.n	1e0ee <cbvprintf+0xd76>
   1e1d4:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
   1e1d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1e1d8:	4435      	add	r5, r6
   1e1da:	1bab      	subs	r3, r5, r6
   1e1dc:	2b00      	cmp	r3, #0
   1e1de:	dc02      	bgt.n	1e1e6 <cbvprintf+0xe6e>
			OUTS(bps, bpe);
   1e1e0:	4653      	mov	r3, sl
   1e1e2:	465a      	mov	r2, fp
   1e1e4:	e4b2      	b.n	1db4c <cbvprintf+0x7d4>
				OUTC('0');
   1e1e6:	4649      	mov	r1, r9
   1e1e8:	2030      	movs	r0, #48	; 0x30
   1e1ea:	47c0      	blx	r8
   1e1ec:	2800      	cmp	r0, #0
   1e1ee:	f6ff af7e 	blt.w	1e0ee <cbvprintf+0xd76>
   1e1f2:	3601      	adds	r6, #1
   1e1f4:	e7f1      	b.n	1e1da <cbvprintf+0xe62>
   1e1f6:	bf00      	nop
   1e1f8:	0004c62f 	.word	0x0004c62f
   1e1fc:	000449dc 	.word	0x000449dc

0001e200 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   1e200:	2801      	cmp	r0, #1
{
   1e202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e204:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
   1e206:	d006      	beq.n	1e216 <clock_settime+0x16>
		errno = EINVAL;
   1e208:	f01f fe4f 	bl	3deaa <__errno>
   1e20c:	2316      	movs	r3, #22
   1e20e:	6003      	str	r3, [r0, #0]
		return -1;
   1e210:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   1e214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1e216:	f023 fb13 	bl	41840 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   1e21a:	4a33      	ldr	r2, [pc, #204]	; (1e2e8 <clock_settime+0xe8>)
   1e21c:	6833      	ldr	r3, [r6, #0]
   1e21e:	6874      	ldr	r4, [r6, #4]
   1e220:	fba3 3502 	umull	r3, r5, r3, r2
   1e224:	68b6      	ldr	r6, [r6, #8]
   1e226:	fb02 5504 	mla	r5, r2, r4, r5
   1e22a:	199c      	adds	r4, r3, r6
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   1e22c:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1e230:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1e234:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
   1e238:	fba3 3602 	umull	r3, r6, r3, r2
   1e23c:	0bc9      	lsrs	r1, r1, #15
   1e23e:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1e242:	fb02 6101 	mla	r1, r2, r1, r6
   1e246:	fba0 0202 	umull	r0, r2, r0, r2
		- elapsed_nsecs;
   1e24a:	1ae4      	subs	r4, r4, r3
   1e24c:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1e250:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   1e254:	eb65 0501 	sbc.w	r5, r5, r1
   1e258:	1ae4      	subs	r4, r4, r3
   1e25a:	f165 0500 	sbc.w	r5, r5, #0
	base.tv_sec = delta / NSEC_PER_SEC;
   1e25e:	4620      	mov	r0, r4
   1e260:	a31f      	add	r3, pc, #124	; (adr r3, 1e2e0 <clock_settime+0xe0>)
   1e262:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e266:	4629      	mov	r1, r5
   1e268:	f7fe fdee 	bl	1ce48 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   1e26c:	a31c      	add	r3, pc, #112	; (adr r3, 1e2e0 <clock_settime+0xe0>)
   1e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
   1e272:	4607      	mov	r7, r0
   1e274:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
   1e276:	4620      	mov	r0, r4
   1e278:	4629      	mov	r1, r5
   1e27a:	f7fe fde5 	bl	1ce48 <__aeabi_ldivmod>
   1e27e:	4614      	mov	r4, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1e280:	f04f 0320 	mov.w	r3, #32
   1e284:	f3ef 8511 	mrs	r5, BASEPRI
   1e288:	f383 8812 	msr	BASEPRI_MAX, r3
   1e28c:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e290:	4816      	ldr	r0, [pc, #88]	; (1e2ec <clock_settime+0xec>)
   1e292:	f018 fcb1 	bl	36bf8 <z_spin_lock_valid>
   1e296:	b940      	cbnz	r0, 1e2aa <clock_settime+0xaa>
   1e298:	4915      	ldr	r1, [pc, #84]	; (1e2f0 <clock_settime+0xf0>)
   1e29a:	4816      	ldr	r0, [pc, #88]	; (1e2f4 <clock_settime+0xf4>)
   1e29c:	228e      	movs	r2, #142	; 0x8e
   1e29e:	f01e ff72 	bl	3d186 <assert_print>
   1e2a2:	218e      	movs	r1, #142	; 0x8e
   1e2a4:	4812      	ldr	r0, [pc, #72]	; (1e2f0 <clock_settime+0xf0>)
   1e2a6:	f01e ff67 	bl	3d178 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1e2aa:	4810      	ldr	r0, [pc, #64]	; (1e2ec <clock_settime+0xec>)
   1e2ac:	f018 fcc2 	bl	36c34 <z_spin_lock_set_owner>
	rt_clock_base = base;
   1e2b0:	4b11      	ldr	r3, [pc, #68]	; (1e2f8 <clock_settime+0xf8>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e2b2:	480e      	ldr	r0, [pc, #56]	; (1e2ec <clock_settime+0xec>)
   1e2b4:	e9c3 7600 	strd	r7, r6, [r3]
   1e2b8:	609c      	str	r4, [r3, #8]
   1e2ba:	f018 fcab 	bl	36c14 <z_spin_unlock_valid>
   1e2be:	b940      	cbnz	r0, 1e2d2 <clock_settime+0xd2>
   1e2c0:	490b      	ldr	r1, [pc, #44]	; (1e2f0 <clock_settime+0xf0>)
   1e2c2:	480c      	ldr	r0, [pc, #48]	; (1e2f4 <clock_settime+0xf4>)
   1e2c4:	22b9      	movs	r2, #185	; 0xb9
   1e2c6:	f01e ff5e 	bl	3d186 <assert_print>
   1e2ca:	21b9      	movs	r1, #185	; 0xb9
   1e2cc:	4808      	ldr	r0, [pc, #32]	; (1e2f0 <clock_settime+0xf0>)
   1e2ce:	f01e ff53 	bl	3d178 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1e2d2:	f385 8811 	msr	BASEPRI, r5
   1e2d6:	f3bf 8f6f 	isb	sy
	return 0;
   1e2da:	2000      	movs	r0, #0
   1e2dc:	e79a      	b.n	1e214 <clock_settime+0x14>
   1e2de:	bf00      	nop
   1e2e0:	3b9aca00 	.word	0x3b9aca00
   1e2e4:	00000000 	.word	0x00000000
   1e2e8:	3b9aca00 	.word	0x3b9aca00
   1e2ec:	200191f8 	.word	0x200191f8
   1e2f0:	00044989 	.word	0x00044989
   1e2f4:	0004494f 	.word	0x0004494f
   1e2f8:	200153d0 	.word	0x200153d0
   1e2fc:	00000000 	.word	0x00000000

0001e300 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   1e300:	b570      	push	{r4, r5, r6, lr}
   1e302:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   1e306:	2300      	movs	r3, #0
{
   1e308:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
   1e30a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1e30e:	2304      	movs	r3, #4
{
   1e310:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   1e312:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   1e314:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1e316:	2800      	cmp	r0, #0
   1e318:	f000 80a4 	beq.w	1e464 <parse_edrx+0x164>
   1e31c:	2900      	cmp	r1, #0
   1e31e:	f000 80a1 	beq.w	1e464 <parse_edrx+0x164>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1e322:	2106      	movs	r1, #6
   1e324:	a804      	add	r0, sp, #16
   1e326:	f021 fac2 	bl	3f8ae <at_params_list_init>
	if (err) {
   1e32a:	4604      	mov	r4, r0
   1e32c:	b148      	cbz	r0, 1e342 <parse_edrx+0x42>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1e32e:	4602      	mov	r2, r0
   1e330:	2145      	movs	r1, #69	; 0x45
   1e332:	4851      	ldr	r0, [pc, #324]	; (1e478 <parse_edrx+0x178>)
   1e334:	f01e ff61 	bl	3d1fa <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1e338:	4620      	mov	r0, r4
   1e33a:	b006      	add	sp, #24
   1e33c:	ecbd 8b02 	vpop	{d8}
   1e340:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response,
   1e342:	4601      	mov	r1, r0
   1e344:	aa04      	add	r2, sp, #16
   1e346:	4630      	mov	r0, r6
   1e348:	f021 faae 	bl	3f8a8 <at_parser_params_from_str>
	if (err) {
   1e34c:	4604      	mov	r4, r0
   1e34e:	b140      	cbz	r0, 1e362 <parse_edrx+0x62>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1e350:	2145      	movs	r1, #69	; 0x45
   1e352:	4602      	mov	r2, r0
   1e354:	4849      	ldr	r0, [pc, #292]	; (1e47c <parse_edrx+0x17c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e356:	f01e ff50 	bl	3d1fa <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   1e35a:	a804      	add	r0, sp, #16
   1e35c:	f021 faba 	bl	3f8d4 <at_params_list_free>
	return err;
   1e360:	e7ea      	b.n	1e338 <parse_edrx+0x38>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1e362:	2103      	movs	r1, #3
   1e364:	ab01      	add	r3, sp, #4
   1e366:	aa02      	add	r2, sp, #8
   1e368:	a804      	add	r0, sp, #16
   1e36a:	f021 fbac 	bl	3fac6 <at_params_string_get>
	if (err) {
   1e36e:	4604      	mov	r4, r0
   1e370:	b118      	cbz	r0, 1e37a <parse_edrx+0x7a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e372:	4602      	mov	r2, r0
   1e374:	2145      	movs	r1, #69	; 0x45
   1e376:	4842      	ldr	r0, [pc, #264]	; (1e480 <parse_edrx+0x180>)
   1e378:	e7ed      	b.n	1e356 <parse_edrx+0x56>
	tmp_buf[len] = '\0';
   1e37a:	9b01      	ldr	r3, [sp, #4]
   1e37c:	aa06      	add	r2, sp, #24
   1e37e:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e380:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1e382:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e386:	2202      	movs	r2, #2
   1e388:	a802      	add	r0, sp, #8
   1e38a:	f01c fea1 	bl	3b0d0 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e38e:	466a      	mov	r2, sp
   1e390:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   1e392:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e394:	a804      	add	r0, sp, #16
   1e396:	f021 fb61 	bl	3fa5c <at_params_int_get>
	if (err) {
   1e39a:	4604      	mov	r4, r0
   1e39c:	b118      	cbz	r0, 1e3a6 <parse_edrx+0xa6>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1e39e:	4602      	mov	r2, r0
   1e3a0:	2145      	movs	r1, #69	; 0x45
   1e3a2:	4838      	ldr	r0, [pc, #224]	; (1e484 <parse_edrx+0x184>)
   1e3a4:	e7d7      	b.n	1e356 <parse_edrx+0x56>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e3a6:	9b00      	ldr	r3, [sp, #0]
   1e3a8:	2b04      	cmp	r3, #4
   1e3aa:	d016      	beq.n	1e3da <parse_edrx+0xda>
   1e3ac:	2b05      	cmp	r3, #5
   1e3ae:	d007      	beq.n	1e3c0 <parse_edrx+0xc0>
   1e3b0:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   1e3b2:	2157      	movs	r1, #87	; 0x57
   1e3b4:	4834      	ldr	r0, [pc, #208]	; (1e488 <parse_edrx+0x188>)
   1e3b6:	f01e ff20 	bl	3d1fa <z_log_minimal_printk>
		return -ENOTCONN;
   1e3ba:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   1e3be:	e7cc      	b.n	1e35a <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e3c0:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e3c2:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e3c4:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e3c6:	d92a      	bls.n	1e41e <parse_edrx+0x11e>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1e3c8:	f06f 0215 	mvn.w	r2, #21
   1e3cc:	2145      	movs	r1, #69	; 0x45
   1e3ce:	482f      	ldr	r0, [pc, #188]	; (1e48c <parse_edrx+0x18c>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e3d0:	f01e ff13 	bl	3d1fa <z_log_minimal_printk>
		err = -EINVAL;
   1e3d4:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1e3d8:	e7bf      	b.n	1e35a <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e3da:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e3dc:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e3de:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e3e0:	d8f2      	bhi.n	1e3c8 <parse_edrx+0xc8>
		*ptw_multiplier = 1.28;
   1e3e2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 1e490 <parse_edrx+0x190>
		multiplier = edrx_lookup_ltem[idx];
   1e3e6:	4b2b      	ldr	r3, [pc, #172]	; (1e494 <parse_edrx+0x194>)
   1e3e8:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e3ec:	b1e8      	cbz	r0, 1e42a <parse_edrx+0x12a>
   1e3ee:	f7fe f979 	bl	1c6e4 <__aeabi_i2d>
   1e3f2:	a31f      	add	r3, pc, #124	; (adr r3, 1e470 <parse_edrx+0x170>)
   1e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3f8:	f7fe f9de 	bl	1c7b8 <__aeabi_dmul>
   1e3fc:	f7fe fcd4 	bl	1cda8 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1e400:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e402:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e404:	eb0d 0301 	add.w	r3, sp, r1
   1e408:	aa02      	add	r2, sp, #8
   1e40a:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   1e40c:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e40e:	f021 fb5a 	bl	3fac6 <at_params_string_get>
	if (err) {
   1e412:	4604      	mov	r4, r0
   1e414:	b158      	cbz	r0, 1e42e <parse_edrx+0x12e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e416:	4602      	mov	r2, r0
   1e418:	2145      	movs	r1, #69	; 0x45
   1e41a:	481f      	ldr	r0, [pc, #124]	; (1e498 <parse_edrx+0x198>)
   1e41c:	e79b      	b.n	1e356 <parse_edrx+0x56>
		multiplier = edrx_lookup_nbiot[idx];
   1e41e:	4b1f      	ldr	r3, [pc, #124]	; (1e49c <parse_edrx+0x19c>)
		*ptw_multiplier = 2.56;
   1e420:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1e4a0 <parse_edrx+0x1a0>
		multiplier = edrx_lookup_nbiot[idx];
   1e424:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		break;
   1e428:	e7e0      	b.n	1e3ec <parse_edrx+0xec>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e42a:	481e      	ldr	r0, [pc, #120]	; (1e4a4 <parse_edrx+0x1a4>)
   1e42c:	e7e8      	b.n	1e400 <parse_edrx+0x100>
	tmp_buf[len] = '\0';
   1e42e:	9b01      	ldr	r3, [sp, #4]
   1e430:	aa06      	add	r2, sp, #24
   1e432:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e434:	4601      	mov	r1, r0
   1e436:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   1e438:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e43c:	a802      	add	r0, sp, #8
   1e43e:	f01c fe47 	bl	3b0d0 <strtoul>
   1e442:	b2c2      	uxtb	r2, r0
	if (idx > 15) {
   1e444:	2a0f      	cmp	r2, #15
   1e446:	d902      	bls.n	1e44e <parse_edrx+0x14e>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e448:	2145      	movs	r1, #69	; 0x45
   1e44a:	4817      	ldr	r0, [pc, #92]	; (1e4a8 <parse_edrx+0x1a8>)
   1e44c:	e7c0      	b.n	1e3d0 <parse_edrx+0xd0>
	idx += 1;
   1e44e:	3201      	adds	r2, #1
	cfg->ptw = idx * ptw_multiplier;
   1e450:	b2d2      	uxtb	r2, r2
   1e452:	ee07 2a90 	vmov	s15, r2
   1e456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1e45a:	ee67 7a88 	vmul.f32	s15, s15, s16
   1e45e:	edc5 7a02 	vstr	s15, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   1e462:	e77a      	b.n	1e35a <parse_edrx+0x5a>
		return -EINVAL;
   1e464:	f06f 0415 	mvn.w	r4, #21
   1e468:	e766      	b.n	1e338 <parse_edrx+0x38>
   1e46a:	bf00      	nop
   1e46c:	f3af 8000 	nop.w
   1e470:	47ae147b 	.word	0x47ae147b
   1e474:	40247ae1 	.word	0x40247ae1
   1e478:	0004643e 	.word	0x0004643e
   1e47c:	0004646c 	.word	0x0004646c
   1e480:	0004649d 	.word	0x0004649d
   1e484:	000464ce 	.word	0x000464ce
   1e488:	000464f5 	.word	0x000464f5
   1e48c:	00046522 	.word	0x00046522
   1e490:	3fa3d70a 	.word	0x3fa3d70a
   1e494:	00043bd4 	.word	0x00043bd4
   1e498:	0004654b 	.word	0x0004654b
   1e49c:	00043bf4 	.word	0x00043bf4
   1e4a0:	4023d70a 	.word	0x4023d70a
   1e4a4:	40a3d70a 	.word	0x40a3d70a
   1e4a8:	0004657b 	.word	0x0004657b
   1e4ac:	00000000 	.word	0x00000000

0001e4b0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1e4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e4b4:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e4b6:	460c      	mov	r4, r1
{
   1e4b8:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e4ba:	b909      	cbnz	r1, 1e4c0 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1e4bc:	2000      	movs	r0, #0
   1e4be:	e024      	b.n	1e50a <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e4c0:	6808      	ldr	r0, [r1, #0]
   1e4c2:	2800      	cmp	r0, #0
   1e4c4:	d0fa      	beq.n	1e4bc <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1e4c6:	688b      	ldr	r3, [r1, #8]
   1e4c8:	6862      	ldr	r2, [r4, #4]
   1e4ca:	1d19      	adds	r1, r3, #4
   1e4cc:	4291      	cmp	r1, r2
   1e4ce:	d80b      	bhi.n	1e4e8 <parse_value+0x38>
   1e4d0:	2204      	movs	r2, #4
   1e4d2:	4995      	ldr	r1, [pc, #596]	; (1e728 <parse_value+0x278>)
   1e4d4:	4418      	add	r0, r3
   1e4d6:	f023 fd16 	bl	41f06 <strncmp>
   1e4da:	b928      	cbnz	r0, 1e4e8 <parse_value+0x38>
        item->type = cJSON_NULL;
   1e4dc:	2304      	movs	r3, #4
   1e4de:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   1e4e0:	68a3      	ldr	r3, [r4, #8]
   1e4e2:	3304      	adds	r3, #4
    input_buffer->offset++;
   1e4e4:	60a3      	str	r3, [r4, #8]
   1e4e6:	e087      	b.n	1e5f8 <parse_value+0x148>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1e4e8:	68a3      	ldr	r3, [r4, #8]
   1e4ea:	6862      	ldr	r2, [r4, #4]
   1e4ec:	1d59      	adds	r1, r3, #5
   1e4ee:	4291      	cmp	r1, r2
   1e4f0:	d80e      	bhi.n	1e510 <parse_value+0x60>
   1e4f2:	6820      	ldr	r0, [r4, #0]
   1e4f4:	2205      	movs	r2, #5
   1e4f6:	498d      	ldr	r1, [pc, #564]	; (1e72c <parse_value+0x27c>)
   1e4f8:	4418      	add	r0, r3
   1e4fa:	f023 fd04 	bl	41f06 <strncmp>
   1e4fe:	b938      	cbnz	r0, 1e510 <parse_value+0x60>
        item->type = cJSON_False;
   1e500:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1e502:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1e504:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   1e506:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1e508:	60a2      	str	r2, [r4, #8]
}
   1e50a:	b013      	add	sp, #76	; 0x4c
   1e50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1e510:	68a3      	ldr	r3, [r4, #8]
   1e512:	6862      	ldr	r2, [r4, #4]
   1e514:	1d19      	adds	r1, r3, #4
   1e516:	4291      	cmp	r1, r2
   1e518:	d80d      	bhi.n	1e536 <parse_value+0x86>
   1e51a:	6820      	ldr	r0, [r4, #0]
   1e51c:	2204      	movs	r2, #4
   1e51e:	4984      	ldr	r1, [pc, #528]	; (1e730 <parse_value+0x280>)
   1e520:	4418      	add	r0, r3
   1e522:	f023 fcf0 	bl	41f06 <strncmp>
   1e526:	b930      	cbnz	r0, 1e536 <parse_value+0x86>
        item->type = cJSON_True;
   1e528:	2302      	movs	r3, #2
        item->valueint = 1;
   1e52a:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1e52c:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1e52e:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   1e530:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   1e532:	3204      	adds	r2, #4
   1e534:	e7e8      	b.n	1e508 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1e536:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1e53a:	4283      	cmp	r3, r0
   1e53c:	d2be      	bcs.n	1e4bc <parse_value+0xc>
   1e53e:	6821      	ldr	r1, [r4, #0]
   1e540:	5cca      	ldrb	r2, [r1, r3]
   1e542:	18cf      	adds	r7, r1, r3
   1e544:	2a22      	cmp	r2, #34	; 0x22
   1e546:	d106      	bne.n	1e556 <parse_value+0xa6>
        return parse_string(item, input_buffer);
   1e548:	4621      	mov	r1, r4
   1e54a:	4630      	mov	r0, r6
}
   1e54c:	b013      	add	sp, #76	; 0x4c
   1e54e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return parse_string(item, input_buffer);
   1e552:	f013 bb6d 	b.w	31c30 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1e556:	2a2d      	cmp	r2, #45	; 0x2d
   1e558:	d003      	beq.n	1e562 <parse_value+0xb2>
   1e55a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   1e55e:	2d09      	cmp	r5, #9
   1e560:	d85f      	bhi.n	1e622 <parse_value+0x172>
    unsigned char *after_end = NULL;
   1e562:	2200      	movs	r2, #0
   1e564:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e566:	2900      	cmp	r1, #0
   1e568:	d0a8      	beq.n	1e4bc <parse_value+0xc>
   1e56a:	a902      	add	r1, sp, #8
   1e56c:	460d      	mov	r5, r1
                number_c_string[i] = decimal_point;
   1e56e:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
   1e572:	1ac3      	subs	r3, r0, r3
        switch (buffer_at_offset(input_buffer)[i])
   1e574:	f817 0b01 	ldrb.w	r0, [r7], #1
   1e578:	2839      	cmp	r0, #57	; 0x39
   1e57a:	d810      	bhi.n	1e59e <parse_value+0xee>
   1e57c:	282a      	cmp	r0, #42	; 0x2a
   1e57e:	d91b      	bls.n	1e5b8 <parse_value+0x108>
   1e580:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
   1e584:	f1bc 0f0e 	cmp.w	ip, #14
   1e588:	d816      	bhi.n	1e5b8 <parse_value+0x108>
   1e58a:	e8df f00c 	tbb	[pc, ip]
   1e58e:	150d      	.short	0x150d
   1e590:	0d15370d 	.word	0x0d15370d
   1e594:	0d0d0d0d 	.word	0x0d0d0d0d
   1e598:	0d0d0d0d 	.word	0x0d0d0d0d
   1e59c:	0d          	.byte	0x0d
   1e59d:	00          	.byte	0x00
   1e59e:	f000 0cdf 	and.w	ip, r0, #223	; 0xdf
   1e5a2:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   1e5a6:	d107      	bne.n	1e5b8 <parse_value+0x108>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1e5a8:	7008      	strb	r0, [r1, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1e5aa:	3201      	adds	r2, #1
   1e5ac:	2a3f      	cmp	r2, #63	; 0x3f
   1e5ae:	f101 0101 	add.w	r1, r1, #1
   1e5b2:	d001      	beq.n	1e5b8 <parse_value+0x108>
   1e5b4:	429a      	cmp	r2, r3
   1e5b6:	d1dd      	bne.n	1e574 <parse_value+0xc4>
    number_c_string[i] = '\0';
   1e5b8:	ab12      	add	r3, sp, #72	; 0x48
   1e5ba:	441a      	add	r2, r3
   1e5bc:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e5be:	4628      	mov	r0, r5
    number_c_string[i] = '\0';
   1e5c0:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e5c4:	a901      	add	r1, sp, #4
   1e5c6:	f01c fbd9 	bl	3ad7c <strtod>
    if (number_c_string == after_end)
   1e5ca:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e5cc:	4680      	mov	r8, r0
    if (number_c_string == after_end)
   1e5ce:	42af      	cmp	r7, r5
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e5d0:	4689      	mov	r9, r1
    if (number_c_string == after_end)
   1e5d2:	f43f af73 	beq.w	1e4bc <parse_value+0xc>
    if (number >= INT_MAX)
   1e5d6:	a352      	add	r3, pc, #328	; (adr r3, 1e720 <parse_value+0x270>)
   1e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1e5dc:	e9c6 8906 	strd	r8, r9, [r6, #24]
    if (number >= INT_MAX)
   1e5e0:	f7fe fb70 	bl	1ccc4 <__aeabi_dcmpge>
   1e5e4:	b168      	cbz	r0, 1e602 <parse_value+0x152>
        item->valueint = INT_MAX;
   1e5e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1e5ea:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   1e5ec:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e5ee:	1b7d      	subs	r5, r7, r5
   1e5f0:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1e5f2:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e5f4:	443d      	add	r5, r7
   1e5f6:	60a5      	str	r5, [r4, #8]
    return true;
   1e5f8:	2001      	movs	r0, #1
   1e5fa:	e786      	b.n	1e50a <parse_value+0x5a>
                number_c_string[i] = decimal_point;
   1e5fc:	f881 e000 	strb.w	lr, [r1]
                break;
   1e600:	e7d3      	b.n	1e5aa <parse_value+0xfa>
    else if (number <= (double)INT_MIN)
   1e602:	2200      	movs	r2, #0
   1e604:	4640      	mov	r0, r8
   1e606:	4649      	mov	r1, r9
   1e608:	4b4a      	ldr	r3, [pc, #296]	; (1e734 <parse_value+0x284>)
   1e60a:	f7fe fb51 	bl	1ccb0 <__aeabi_dcmple>
   1e60e:	b110      	cbz	r0, 1e616 <parse_value+0x166>
        item->valueint = INT_MIN;
   1e610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e614:	e7e9      	b.n	1e5ea <parse_value+0x13a>
        item->valueint = (int)number;
   1e616:	4640      	mov	r0, r8
   1e618:	4649      	mov	r1, r9
   1e61a:	f7fe fb7d 	bl	1cd18 <__aeabi_d2iz>
   1e61e:	6170      	str	r0, [r6, #20]
   1e620:	e7e4      	b.n	1e5ec <parse_value+0x13c>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1e622:	2a5b      	cmp	r2, #91	; 0x5b
   1e624:	d153      	bne.n	1e6ce <parse_value+0x21e>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e626:	68e2      	ldr	r2, [r4, #12]
   1e628:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e62c:	f4bf af46 	bcs.w	1e4bc <parse_value+0xc>
    input_buffer->depth++;
   1e630:	3201      	adds	r2, #1
   1e632:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1e634:	5cca      	ldrb	r2, [r1, r3]
   1e636:	2a5b      	cmp	r2, #91	; 0x5b
   1e638:	f47f af40 	bne.w	1e4bc <parse_value+0xc>
    input_buffer->offset++;
   1e63c:	3301      	adds	r3, #1
   1e63e:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e640:	4620      	mov	r0, r4
   1e642:	f021 fd70 	bl	40126 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1e646:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e64a:	4293      	cmp	r3, r2
   1e64c:	d263      	bcs.n	1e716 <parse_value+0x266>
   1e64e:	6822      	ldr	r2, [r4, #0]
   1e650:	5cd2      	ldrb	r2, [r2, r3]
   1e652:	2a5d      	cmp	r2, #93	; 0x5d
   1e654:	d10c      	bne.n	1e670 <parse_value+0x1c0>
    cJSON *current_item = NULL;
   1e656:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e658:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e65a:	68e3      	ldr	r3, [r4, #12]
   1e65c:	3b01      	subs	r3, #1
   1e65e:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e660:	b107      	cbz	r7, 1e664 <parse_value+0x1b4>
        head->prev = current_item;
   1e662:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Array;
   1e664:	2320      	movs	r3, #32
    item->child = head;
   1e666:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   1e66a:	68a3      	ldr	r3, [r4, #8]
   1e66c:	3301      	adds	r3, #1
   1e66e:	e739      	b.n	1e4e4 <parse_value+0x34>
    cJSON *current_item = NULL;
   1e670:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e672:	462f      	mov	r7, r5
    input_buffer->offset--;
   1e674:	3b01      	subs	r3, #1
   1e676:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e678:	6920      	ldr	r0, [r4, #16]
   1e67a:	f021 fdd6 	bl	4022a <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e67e:	46a8      	mov	r8, r5
   1e680:	4605      	mov	r5, r0
   1e682:	2800      	cmp	r0, #0
   1e684:	f000 809d 	beq.w	1e7c2 <parse_value+0x312>
        if (head == NULL)
   1e688:	b1ff      	cbz	r7, 1e6ca <parse_value+0x21a>
            current_item->next = new_item;
   1e68a:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1e68e:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1e692:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e694:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e696:	3301      	adds	r3, #1
   1e698:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e69a:	f021 fd44 	bl	40126 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e69e:	4621      	mov	r1, r4
   1e6a0:	4628      	mov	r0, r5
   1e6a2:	f7ff ff05 	bl	1e4b0 <parse_value>
   1e6a6:	2800      	cmp	r0, #0
   1e6a8:	f000 808e 	beq.w	1e7c8 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e6ac:	4620      	mov	r0, r4
   1e6ae:	f021 fd3a 	bl	40126 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e6b2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e6b6:	4293      	cmp	r3, r2
   1e6b8:	f080 8086 	bcs.w	1e7c8 <parse_value+0x318>
   1e6bc:	6822      	ldr	r2, [r4, #0]
   1e6be:	5cd3      	ldrb	r3, [r2, r3]
   1e6c0:	2b2c      	cmp	r3, #44	; 0x2c
   1e6c2:	d0d9      	beq.n	1e678 <parse_value+0x1c8>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1e6c4:	2b5d      	cmp	r3, #93	; 0x5d
   1e6c6:	d17f      	bne.n	1e7c8 <parse_value+0x318>
   1e6c8:	e7c7      	b.n	1e65a <parse_value+0x1aa>
   1e6ca:	4607      	mov	r7, r0
   1e6cc:	e7e1      	b.n	1e692 <parse_value+0x1e2>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1e6ce:	2a7b      	cmp	r2, #123	; 0x7b
   1e6d0:	f47f aef4 	bne.w	1e4bc <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e6d4:	68e2      	ldr	r2, [r4, #12]
   1e6d6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e6da:	f4bf aeef 	bcs.w	1e4bc <parse_value+0xc>
    input_buffer->depth++;
   1e6de:	3201      	adds	r2, #1
   1e6e0:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1e6e2:	5cca      	ldrb	r2, [r1, r3]
   1e6e4:	2a7b      	cmp	r2, #123	; 0x7b
   1e6e6:	f47f aee9 	bne.w	1e4bc <parse_value+0xc>
    input_buffer->offset++;
   1e6ea:	3301      	adds	r3, #1
   1e6ec:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e6ee:	4620      	mov	r0, r4
   1e6f0:	f021 fd19 	bl	40126 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1e6f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e6f8:	4293      	cmp	r3, r2
   1e6fa:	d20c      	bcs.n	1e716 <parse_value+0x266>
   1e6fc:	6822      	ldr	r2, [r4, #0]
   1e6fe:	5cd2      	ldrb	r2, [r2, r3]
   1e700:	2a7d      	cmp	r2, #125	; 0x7d
   1e702:	d119      	bne.n	1e738 <parse_value+0x288>
    cJSON *current_item = NULL;
   1e704:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e706:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e708:	68e3      	ldr	r3, [r4, #12]
   1e70a:	3b01      	subs	r3, #1
   1e70c:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e70e:	b107      	cbz	r7, 1e712 <parse_value+0x262>
        head->prev = current_item;
   1e710:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
   1e712:	2340      	movs	r3, #64	; 0x40
   1e714:	e7a7      	b.n	1e666 <parse_value+0x1b6>
        input_buffer->offset--;
   1e716:	3b01      	subs	r3, #1
   1e718:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1e71a:	e6cf      	b.n	1e4bc <parse_value+0xc>
   1e71c:	f3af 8000 	nop.w
   1e720:	ffc00000 	.word	0xffc00000
   1e724:	41dfffff 	.word	0x41dfffff
   1e728:	0004c0e2 	.word	0x0004c0e2
   1e72c:	0004c0f9 	.word	0x0004c0f9
   1e730:	0004c0ff 	.word	0x0004c0ff
   1e734:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1e738:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e73a:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   1e73c:	46a8      	mov	r8, r5
    input_buffer->offset--;
   1e73e:	3b01      	subs	r3, #1
   1e740:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e742:	6920      	ldr	r0, [r4, #16]
   1e744:	f021 fd71 	bl	4022a <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e748:	46a9      	mov	r9, r5
   1e74a:	4605      	mov	r5, r0
   1e74c:	2800      	cmp	r0, #0
   1e74e:	d038      	beq.n	1e7c2 <parse_value+0x312>
        if (head == NULL)
   1e750:	b3af      	cbz	r7, 1e7be <parse_value+0x30e>
            current_item->next = new_item;
   1e752:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1e756:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1e75a:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e75c:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e75e:	3301      	adds	r3, #1
   1e760:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e762:	f021 fce0 	bl	40126 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1e766:	4621      	mov	r1, r4
   1e768:	4628      	mov	r0, r5
   1e76a:	f013 fa61 	bl	31c30 <parse_string>
   1e76e:	b358      	cbz	r0, 1e7c8 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e770:	4620      	mov	r0, r4
   1e772:	f021 fcd8 	bl	40126 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1e776:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
   1e778:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
   1e77c:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1e77e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e782:	4293      	cmp	r3, r2
   1e784:	d220      	bcs.n	1e7c8 <parse_value+0x318>
   1e786:	6822      	ldr	r2, [r4, #0]
   1e788:	5cd2      	ldrb	r2, [r2, r3]
   1e78a:	2a3a      	cmp	r2, #58	; 0x3a
   1e78c:	d11c      	bne.n	1e7c8 <parse_value+0x318>
        input_buffer->offset++;
   1e78e:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1e790:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e792:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e794:	f021 fcc7 	bl	40126 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e798:	4621      	mov	r1, r4
   1e79a:	4628      	mov	r0, r5
   1e79c:	f7ff fe88 	bl	1e4b0 <parse_value>
   1e7a0:	b190      	cbz	r0, 1e7c8 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e7a2:	4620      	mov	r0, r4
   1e7a4:	f021 fcbf 	bl	40126 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e7a8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e7ac:	4293      	cmp	r3, r2
   1e7ae:	d20b      	bcs.n	1e7c8 <parse_value+0x318>
   1e7b0:	6822      	ldr	r2, [r4, #0]
   1e7b2:	5cd3      	ldrb	r3, [r2, r3]
   1e7b4:	2b2c      	cmp	r3, #44	; 0x2c
   1e7b6:	d0c4      	beq.n	1e742 <parse_value+0x292>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1e7b8:	2b7d      	cmp	r3, #125	; 0x7d
   1e7ba:	d105      	bne.n	1e7c8 <parse_value+0x318>
   1e7bc:	e7a4      	b.n	1e708 <parse_value+0x258>
   1e7be:	4607      	mov	r7, r0
   1e7c0:	e7cb      	b.n	1e75a <parse_value+0x2aa>
    if (head != NULL)
   1e7c2:	2f00      	cmp	r7, #0
   1e7c4:	f43f ae7a 	beq.w	1e4bc <parse_value+0xc>
        cJSON_Delete(head);
   1e7c8:	4638      	mov	r0, r7
   1e7ca:	f013 fecb 	bl	32564 <cJSON_Delete>
   1e7ce:	e675      	b.n	1e4bc <parse_value+0xc>

0001e7d0 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e7d0:	4b17      	ldr	r3, [pc, #92]	; (1e830 <cJSON_CreateNumber+0x60>)
{
   1e7d2:	b5d0      	push	{r4, r6, r7, lr}
   1e7d4:	4606      	mov	r6, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e7d6:	6818      	ldr	r0, [r3, #0]
{
   1e7d8:	460f      	mov	r7, r1
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e7da:	f021 fd26 	bl	4022a <cJSON_New_Item.isra.0>
    if(item)
   1e7de:	4604      	mov	r4, r0
   1e7e0:	b170      	cbz	r0, 1e800 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1e7e2:	2308      	movs	r3, #8
        item->valuedouble = num;
   1e7e4:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1e7e8:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1e7ea:	4639      	mov	r1, r7
   1e7ec:	a30e      	add	r3, pc, #56	; (adr r3, 1e828 <cJSON_CreateNumber+0x58>)
   1e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7f2:	4630      	mov	r0, r6
   1e7f4:	f7fe fa66 	bl	1ccc4 <__aeabi_dcmpge>
   1e7f8:	b120      	cbz	r0, 1e804 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1e7fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1e7fe:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1e800:	4620      	mov	r0, r4
   1e802:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1e804:	2200      	movs	r2, #0
   1e806:	4630      	mov	r0, r6
   1e808:	4639      	mov	r1, r7
   1e80a:	4b0a      	ldr	r3, [pc, #40]	; (1e834 <cJSON_CreateNumber+0x64>)
   1e80c:	f7fe fa50 	bl	1ccb0 <__aeabi_dcmple>
   1e810:	b110      	cbz	r0, 1e818 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1e812:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e816:	e7f2      	b.n	1e7fe <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1e818:	4630      	mov	r0, r6
   1e81a:	4639      	mov	r1, r7
   1e81c:	f7fe fa7c 	bl	1cd18 <__aeabi_d2iz>
   1e820:	6160      	str	r0, [r4, #20]
    return item;
   1e822:	e7ed      	b.n	1e800 <cJSON_CreateNumber+0x30>
   1e824:	f3af 8000 	nop.w
   1e828:	ffc00000 	.word	0xffc00000
   1e82c:	41dfffff 	.word	0x41dfffff
   1e830:	200146f0 	.word	0x200146f0
   1e834:	c1e00000 	.word	0xc1e00000

0001e838 <floor>:
   1e838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e83c:	f3c1 570a 	ubfx	r7, r1, #20, #11
   1e840:	4602      	mov	r2, r0
   1e842:	460b      	mov	r3, r1
   1e844:	460c      	mov	r4, r1
   1e846:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   1e84a:	4605      	mov	r5, r0
   1e84c:	4680      	mov	r8, r0
   1e84e:	2e13      	cmp	r6, #19
   1e850:	dc34      	bgt.n	1e8bc <floor+0x84>
   1e852:	2e00      	cmp	r6, #0
   1e854:	da14      	bge.n	1e880 <floor+0x48>
   1e856:	a334      	add	r3, pc, #208	; (adr r3, 1e928 <floor+0xf0>)
   1e858:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e85c:	f7fd fdf6 	bl	1c44c <__adddf3>
   1e860:	2200      	movs	r2, #0
   1e862:	2300      	movs	r3, #0
   1e864:	f7fe fa38 	bl	1ccd8 <__aeabi_dcmpgt>
   1e868:	b138      	cbz	r0, 1e87a <floor+0x42>
   1e86a:	2c00      	cmp	r4, #0
   1e86c:	da58      	bge.n	1e920 <floor+0xe8>
   1e86e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1e872:	431d      	orrs	r5, r3
   1e874:	d001      	beq.n	1e87a <floor+0x42>
   1e876:	2500      	movs	r5, #0
   1e878:	4c2d      	ldr	r4, [pc, #180]	; (1e930 <floor+0xf8>)
   1e87a:	4623      	mov	r3, r4
   1e87c:	462a      	mov	r2, r5
   1e87e:	e026      	b.n	1e8ce <floor+0x96>
   1e880:	4f2c      	ldr	r7, [pc, #176]	; (1e934 <floor+0xfc>)
   1e882:	4137      	asrs	r7, r6
   1e884:	ea01 0c07 	and.w	ip, r1, r7
   1e888:	ea5c 0c00 	orrs.w	ip, ip, r0
   1e88c:	d01f      	beq.n	1e8ce <floor+0x96>
   1e88e:	a326      	add	r3, pc, #152	; (adr r3, 1e928 <floor+0xf0>)
   1e890:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e894:	f7fd fdda 	bl	1c44c <__adddf3>
   1e898:	2200      	movs	r2, #0
   1e89a:	2300      	movs	r3, #0
   1e89c:	f7fe fa1c 	bl	1ccd8 <__aeabi_dcmpgt>
   1e8a0:	2800      	cmp	r0, #0
   1e8a2:	d0ea      	beq.n	1e87a <floor+0x42>
   1e8a4:	2c00      	cmp	r4, #0
   1e8a6:	f04f 0500 	mov.w	r5, #0
   1e8aa:	bfbe      	ittt	lt
   1e8ac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
   1e8b0:	fa43 f606 	asrlt.w	r6, r3, r6
   1e8b4:	19a4      	addlt	r4, r4, r6
   1e8b6:	ea24 0407 	bic.w	r4, r4, r7
   1e8ba:	e7de      	b.n	1e87a <floor+0x42>
   1e8bc:	2e33      	cmp	r6, #51	; 0x33
   1e8be:	dd0a      	ble.n	1e8d6 <floor+0x9e>
   1e8c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1e8c4:	d103      	bne.n	1e8ce <floor+0x96>
   1e8c6:	f7fd fdc1 	bl	1c44c <__adddf3>
   1e8ca:	4602      	mov	r2, r0
   1e8cc:	460b      	mov	r3, r1
   1e8ce:	4610      	mov	r0, r2
   1e8d0:	4619      	mov	r1, r3
   1e8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8d6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   1e8da:	f04f 3cff 	mov.w	ip, #4294967295
   1e8de:	fa2c f707 	lsr.w	r7, ip, r7
   1e8e2:	4207      	tst	r7, r0
   1e8e4:	d0f3      	beq.n	1e8ce <floor+0x96>
   1e8e6:	a310      	add	r3, pc, #64	; (adr r3, 1e928 <floor+0xf0>)
   1e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8ec:	f7fd fdae 	bl	1c44c <__adddf3>
   1e8f0:	2200      	movs	r2, #0
   1e8f2:	2300      	movs	r3, #0
   1e8f4:	f7fe f9f0 	bl	1ccd8 <__aeabi_dcmpgt>
   1e8f8:	2800      	cmp	r0, #0
   1e8fa:	d0be      	beq.n	1e87a <floor+0x42>
   1e8fc:	2c00      	cmp	r4, #0
   1e8fe:	da02      	bge.n	1e906 <floor+0xce>
   1e900:	2e14      	cmp	r6, #20
   1e902:	d103      	bne.n	1e90c <floor+0xd4>
   1e904:	3401      	adds	r4, #1
   1e906:	ea25 0507 	bic.w	r5, r5, r7
   1e90a:	e7b6      	b.n	1e87a <floor+0x42>
   1e90c:	2301      	movs	r3, #1
   1e90e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   1e912:	fa03 f606 	lsl.w	r6, r3, r6
   1e916:	4435      	add	r5, r6
   1e918:	4545      	cmp	r5, r8
   1e91a:	bf38      	it	cc
   1e91c:	18e4      	addcc	r4, r4, r3
   1e91e:	e7f2      	b.n	1e906 <floor+0xce>
   1e920:	2500      	movs	r5, #0
   1e922:	462c      	mov	r4, r5
   1e924:	e7a9      	b.n	1e87a <floor+0x42>
   1e926:	bf00      	nop
   1e928:	8800759c 	.word	0x8800759c
   1e92c:	7e37e43c 	.word	0x7e37e43c
   1e930:	bff00000 	.word	0xbff00000
   1e934:	000fffff 	.word	0x000fffff

0001e938 <_strtod_l>:
   1e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e93c:	461f      	mov	r7, r3
   1e93e:	2300      	movs	r3, #0
   1e940:	4604      	mov	r4, r0
   1e942:	4688      	mov	r8, r1
   1e944:	f04f 0a00 	mov.w	sl, #0
   1e948:	f04f 0b00 	mov.w	fp, #0
   1e94c:	ed2d 8b04 	vpush	{d8-d9}
   1e950:	b09d      	sub	sp, #116	; 0x74
   1e952:	9318      	str	r3, [sp, #96]	; 0x60
   1e954:	4b9e      	ldr	r3, [pc, #632]	; (1ebd0 <_strtod_l+0x298>)
   1e956:	9213      	str	r2, [sp, #76]	; 0x4c
   1e958:	681b      	ldr	r3, [r3, #0]
   1e95a:	4618      	mov	r0, r3
   1e95c:	9305      	str	r3, [sp, #20]
   1e95e:	f7fe fc70 	bl	1d242 <strlen>
   1e962:	4605      	mov	r5, r0
   1e964:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e96a:	781a      	ldrb	r2, [r3, #0]
   1e96c:	2a2b      	cmp	r2, #43	; 0x2b
   1e96e:	d04c      	beq.n	1ea0a <_strtod_l+0xd2>
   1e970:	d839      	bhi.n	1e9e6 <_strtod_l+0xae>
   1e972:	2a0d      	cmp	r2, #13
   1e974:	d832      	bhi.n	1e9dc <_strtod_l+0xa4>
   1e976:	2a08      	cmp	r2, #8
   1e978:	d832      	bhi.n	1e9e0 <_strtod_l+0xa8>
   1e97a:	2a00      	cmp	r2, #0
   1e97c:	d03c      	beq.n	1e9f8 <_strtod_l+0xc0>
   1e97e:	2300      	movs	r3, #0
   1e980:	930a      	str	r3, [sp, #40]	; 0x28
   1e982:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1e984:	7833      	ldrb	r3, [r6, #0]
   1e986:	2b30      	cmp	r3, #48	; 0x30
   1e988:	f040 80ae 	bne.w	1eae8 <_strtod_l+0x1b0>
   1e98c:	7873      	ldrb	r3, [r6, #1]
   1e98e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e992:	2b58      	cmp	r3, #88	; 0x58
   1e994:	d166      	bne.n	1ea64 <_strtod_l+0x12c>
   1e996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e998:	a917      	add	r1, sp, #92	; 0x5c
   1e99a:	9702      	str	r7, [sp, #8]
   1e99c:	4620      	mov	r0, r4
   1e99e:	9301      	str	r3, [sp, #4]
   1e9a0:	ab18      	add	r3, sp, #96	; 0x60
   1e9a2:	4a8c      	ldr	r2, [pc, #560]	; (1ebd4 <_strtod_l+0x29c>)
   1e9a4:	9300      	str	r3, [sp, #0]
   1e9a6:	ab19      	add	r3, sp, #100	; 0x64
   1e9a8:	f01c fe5a 	bl	3b660 <__gethex>
   1e9ac:	f010 0707 	ands.w	r7, r0, #7
   1e9b0:	4605      	mov	r5, r0
   1e9b2:	d005      	beq.n	1e9c0 <_strtod_l+0x88>
   1e9b4:	2f06      	cmp	r7, #6
   1e9b6:	d12a      	bne.n	1ea0e <_strtod_l+0xd6>
   1e9b8:	3601      	adds	r6, #1
   1e9ba:	2300      	movs	r3, #0
   1e9bc:	9617      	str	r6, [sp, #92]	; 0x5c
   1e9be:	930a      	str	r3, [sp, #40]	; 0x28
   1e9c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e9c2:	2b00      	cmp	r3, #0
   1e9c4:	f040 8584 	bne.w	1f4d0 <_strtod_l+0xb98>
   1e9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e9ca:	b1db      	cbz	r3, 1ea04 <_strtod_l+0xcc>
   1e9cc:	4650      	mov	r0, sl
   1e9ce:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
   1e9d2:	b01d      	add	sp, #116	; 0x74
   1e9d4:	ecbd 8b04 	vpop	{d8-d9}
   1e9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9dc:	2a20      	cmp	r2, #32
   1e9de:	d1ce      	bne.n	1e97e <_strtod_l+0x46>
   1e9e0:	3301      	adds	r3, #1
   1e9e2:	9317      	str	r3, [sp, #92]	; 0x5c
   1e9e4:	e7c0      	b.n	1e968 <_strtod_l+0x30>
   1e9e6:	2a2d      	cmp	r2, #45	; 0x2d
   1e9e8:	d1c9      	bne.n	1e97e <_strtod_l+0x46>
   1e9ea:	2201      	movs	r2, #1
   1e9ec:	920a      	str	r2, [sp, #40]	; 0x28
   1e9ee:	1c5a      	adds	r2, r3, #1
   1e9f0:	9217      	str	r2, [sp, #92]	; 0x5c
   1e9f2:	785b      	ldrb	r3, [r3, #1]
   1e9f4:	2b00      	cmp	r3, #0
   1e9f6:	d1c4      	bne.n	1e982 <_strtod_l+0x4a>
   1e9f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e9fa:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e9fe:	2b00      	cmp	r3, #0
   1ea00:	f040 8564 	bne.w	1f4cc <_strtod_l+0xb94>
   1ea04:	4650      	mov	r0, sl
   1ea06:	4659      	mov	r1, fp
   1ea08:	e7e3      	b.n	1e9d2 <_strtod_l+0x9a>
   1ea0a:	2200      	movs	r2, #0
   1ea0c:	e7ee      	b.n	1e9ec <_strtod_l+0xb4>
   1ea0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1ea10:	b13a      	cbz	r2, 1ea22 <_strtod_l+0xea>
   1ea12:	2135      	movs	r1, #53	; 0x35
   1ea14:	a81a      	add	r0, sp, #104	; 0x68
   1ea16:	f023 fe00 	bl	4261a <__copybits>
   1ea1a:	9918      	ldr	r1, [sp, #96]	; 0x60
   1ea1c:	4620      	mov	r0, r4
   1ea1e:	f01d f907 	bl	3bc30 <_Bfree>
   1ea22:	3f01      	subs	r7, #1
   1ea24:	2f04      	cmp	r7, #4
   1ea26:	d806      	bhi.n	1ea36 <_strtod_l+0xfe>
   1ea28:	e8df f007 	tbb	[pc, r7]
   1ea2c:	1714030a 	.word	0x1714030a
   1ea30:	0a          	.byte	0x0a
   1ea31:	00          	.byte	0x00
   1ea32:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   1ea36:	0728      	lsls	r0, r5, #28
   1ea38:	d5c2      	bpl.n	1e9c0 <_strtod_l+0x88>
   1ea3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1ea3e:	e7bf      	b.n	1e9c0 <_strtod_l+0x88>
   1ea40:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   1ea44:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1ea46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ea4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1ea4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1ea52:	e7f0      	b.n	1ea36 <_strtod_l+0xfe>
   1ea54:	f8df b180 	ldr.w	fp, [pc, #384]	; 1ebd8 <_strtod_l+0x2a0>
   1ea58:	e7ed      	b.n	1ea36 <_strtod_l+0xfe>
   1ea5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1ea5e:	f04f 3aff 	mov.w	sl, #4294967295
   1ea62:	e7e8      	b.n	1ea36 <_strtod_l+0xfe>
   1ea64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ea66:	1c5a      	adds	r2, r3, #1
   1ea68:	9217      	str	r2, [sp, #92]	; 0x5c
   1ea6a:	785b      	ldrb	r3, [r3, #1]
   1ea6c:	2b30      	cmp	r3, #48	; 0x30
   1ea6e:	d0f9      	beq.n	1ea64 <_strtod_l+0x12c>
   1ea70:	2b00      	cmp	r3, #0
   1ea72:	d0a5      	beq.n	1e9c0 <_strtod_l+0x88>
   1ea74:	2301      	movs	r3, #1
   1ea76:	f04f 0900 	mov.w	r9, #0
   1ea7a:	9304      	str	r3, [sp, #16]
   1ea7c:	220a      	movs	r2, #10
   1ea7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ea80:	464f      	mov	r7, r9
   1ea82:	f8cd 901c 	str.w	r9, [sp, #28]
   1ea86:	9308      	str	r3, [sp, #32]
   1ea88:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1ea8a:	7806      	ldrb	r6, [r0, #0]
   1ea8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1ea90:	b2d9      	uxtb	r1, r3
   1ea92:	2909      	cmp	r1, #9
   1ea94:	d92a      	bls.n	1eaec <_strtod_l+0x1b4>
   1ea96:	462a      	mov	r2, r5
   1ea98:	9905      	ldr	r1, [sp, #20]
   1ea9a:	f023 fa34 	bl	41f06 <strncmp>
   1ea9e:	b3a0      	cbz	r0, 1eb0a <_strtod_l+0x1d2>
   1eaa0:	2000      	movs	r0, #0
   1eaa2:	4632      	mov	r2, r6
   1eaa4:	463d      	mov	r5, r7
   1eaa6:	4603      	mov	r3, r0
   1eaa8:	9005      	str	r0, [sp, #20]
   1eaaa:	2a65      	cmp	r2, #101	; 0x65
   1eaac:	d001      	beq.n	1eab2 <_strtod_l+0x17a>
   1eaae:	2a45      	cmp	r2, #69	; 0x45
   1eab0:	d118      	bne.n	1eae4 <_strtod_l+0x1ac>
   1eab2:	b91d      	cbnz	r5, 1eabc <_strtod_l+0x184>
   1eab4:	9a04      	ldr	r2, [sp, #16]
   1eab6:	4302      	orrs	r2, r0
   1eab8:	d09e      	beq.n	1e9f8 <_strtod_l+0xc0>
   1eaba:	2500      	movs	r5, #0
   1eabc:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   1eac0:	f108 0201 	add.w	r2, r8, #1
   1eac4:	9217      	str	r2, [sp, #92]	; 0x5c
   1eac6:	f898 2001 	ldrb.w	r2, [r8, #1]
   1eaca:	2a2b      	cmp	r2, #43	; 0x2b
   1eacc:	d075      	beq.n	1ebba <_strtod_l+0x282>
   1eace:	2a2d      	cmp	r2, #45	; 0x2d
   1ead0:	d07b      	beq.n	1ebca <_strtod_l+0x292>
   1ead2:	f04f 0c00 	mov.w	ip, #0
   1ead6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1eada:	2909      	cmp	r1, #9
   1eadc:	f240 8082 	bls.w	1ebe4 <_strtod_l+0x2ac>
   1eae0:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1eae4:	2600      	movs	r6, #0
   1eae6:	e09d      	b.n	1ec24 <_strtod_l+0x2ec>
   1eae8:	2300      	movs	r3, #0
   1eaea:	e7c4      	b.n	1ea76 <_strtod_l+0x13e>
   1eaec:	2f08      	cmp	r7, #8
   1eaee:	f100 0001 	add.w	r0, r0, #1
   1eaf2:	f107 0701 	add.w	r7, r7, #1
   1eaf6:	bfd4      	ite	le
   1eaf8:	9907      	ldrle	r1, [sp, #28]
   1eafa:	fb02 3909 	mlagt	r9, r2, r9, r3
   1eafe:	9017      	str	r0, [sp, #92]	; 0x5c
   1eb00:	bfdc      	itt	le
   1eb02:	fb02 3301 	mlale	r3, r2, r1, r3
   1eb06:	9307      	strle	r3, [sp, #28]
   1eb08:	e7be      	b.n	1ea88 <_strtod_l+0x150>
   1eb0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1eb0c:	195a      	adds	r2, r3, r5
   1eb0e:	9217      	str	r2, [sp, #92]	; 0x5c
   1eb10:	5d5a      	ldrb	r2, [r3, r5]
   1eb12:	2f00      	cmp	r7, #0
   1eb14:	d036      	beq.n	1eb84 <_strtod_l+0x24c>
   1eb16:	463d      	mov	r5, r7
   1eb18:	9005      	str	r0, [sp, #20]
   1eb1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1eb1e:	2b09      	cmp	r3, #9
   1eb20:	d912      	bls.n	1eb48 <_strtod_l+0x210>
   1eb22:	2301      	movs	r3, #1
   1eb24:	e7c1      	b.n	1eaaa <_strtod_l+0x172>
   1eb26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1eb28:	3001      	adds	r0, #1
   1eb2a:	1c5a      	adds	r2, r3, #1
   1eb2c:	9217      	str	r2, [sp, #92]	; 0x5c
   1eb2e:	785a      	ldrb	r2, [r3, #1]
   1eb30:	2a30      	cmp	r2, #48	; 0x30
   1eb32:	d0f8      	beq.n	1eb26 <_strtod_l+0x1ee>
   1eb34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   1eb38:	2b08      	cmp	r3, #8
   1eb3a:	f200 84ce 	bhi.w	1f4da <_strtod_l+0xba2>
   1eb3e:	9005      	str	r0, [sp, #20]
   1eb40:	2000      	movs	r0, #0
   1eb42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1eb44:	4605      	mov	r5, r0
   1eb46:	9308      	str	r3, [sp, #32]
   1eb48:	3a30      	subs	r2, #48	; 0x30
   1eb4a:	f100 0301 	add.w	r3, r0, #1
   1eb4e:	d013      	beq.n	1eb78 <_strtod_l+0x240>
   1eb50:	9905      	ldr	r1, [sp, #20]
   1eb52:	eb00 0e05 	add.w	lr, r0, r5
   1eb56:	4419      	add	r1, r3
   1eb58:	462b      	mov	r3, r5
   1eb5a:	9105      	str	r1, [sp, #20]
   1eb5c:	210a      	movs	r1, #10
   1eb5e:	4573      	cmp	r3, lr
   1eb60:	d112      	bne.n	1eb88 <_strtod_l+0x250>
   1eb62:	182b      	adds	r3, r5, r0
   1eb64:	3501      	adds	r5, #1
   1eb66:	2b08      	cmp	r3, #8
   1eb68:	4405      	add	r5, r0
   1eb6a:	dc1c      	bgt.n	1eba6 <_strtod_l+0x26e>
   1eb6c:	9907      	ldr	r1, [sp, #28]
   1eb6e:	230a      	movs	r3, #10
   1eb70:	fb03 2301 	mla	r3, r3, r1, r2
   1eb74:	9307      	str	r3, [sp, #28]
   1eb76:	2300      	movs	r3, #0
   1eb78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1eb7a:	4618      	mov	r0, r3
   1eb7c:	1c51      	adds	r1, r2, #1
   1eb7e:	9117      	str	r1, [sp, #92]	; 0x5c
   1eb80:	7852      	ldrb	r2, [r2, #1]
   1eb82:	e7ca      	b.n	1eb1a <_strtod_l+0x1e2>
   1eb84:	4638      	mov	r0, r7
   1eb86:	e7d3      	b.n	1eb30 <_strtod_l+0x1f8>
   1eb88:	2b08      	cmp	r3, #8
   1eb8a:	dc04      	bgt.n	1eb96 <_strtod_l+0x25e>
   1eb8c:	9e07      	ldr	r6, [sp, #28]
   1eb8e:	434e      	muls	r6, r1
   1eb90:	9607      	str	r6, [sp, #28]
   1eb92:	3301      	adds	r3, #1
   1eb94:	e7e3      	b.n	1eb5e <_strtod_l+0x226>
   1eb96:	f103 0c01 	add.w	ip, r3, #1
   1eb9a:	f1bc 0f10 	cmp.w	ip, #16
   1eb9e:	bfd8      	it	le
   1eba0:	fb01 f909 	mulle.w	r9, r1, r9
   1eba4:	e7f5      	b.n	1eb92 <_strtod_l+0x25a>
   1eba6:	2d10      	cmp	r5, #16
   1eba8:	bfdc      	itt	le
   1ebaa:	230a      	movle	r3, #10
   1ebac:	fb03 2909 	mlale	r9, r3, r9, r2
   1ebb0:	e7e1      	b.n	1eb76 <_strtod_l+0x23e>
   1ebb2:	2300      	movs	r3, #0
   1ebb4:	9305      	str	r3, [sp, #20]
   1ebb6:	2301      	movs	r3, #1
   1ebb8:	e77c      	b.n	1eab4 <_strtod_l+0x17c>
   1ebba:	f04f 0c00 	mov.w	ip, #0
   1ebbe:	f108 0202 	add.w	r2, r8, #2
   1ebc2:	9217      	str	r2, [sp, #92]	; 0x5c
   1ebc4:	f898 2002 	ldrb.w	r2, [r8, #2]
   1ebc8:	e785      	b.n	1ead6 <_strtod_l+0x19e>
   1ebca:	f04f 0c01 	mov.w	ip, #1
   1ebce:	e7f6      	b.n	1ebbe <_strtod_l+0x286>
   1ebd0:	00043bbc 	.word	0x00043bbc
   1ebd4:	00043b34 	.word	0x00043b34
   1ebd8:	7ff00000 	.word	0x7ff00000
   1ebdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ebde:	1c51      	adds	r1, r2, #1
   1ebe0:	9117      	str	r1, [sp, #92]	; 0x5c
   1ebe2:	7852      	ldrb	r2, [r2, #1]
   1ebe4:	2a30      	cmp	r2, #48	; 0x30
   1ebe6:	d0f9      	beq.n	1ebdc <_strtod_l+0x2a4>
   1ebe8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   1ebec:	2908      	cmp	r1, #8
   1ebee:	f63f af79 	bhi.w	1eae4 <_strtod_l+0x1ac>
   1ebf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   1ebf6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ebf8:	9206      	str	r2, [sp, #24]
   1ebfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ebfc:	1c51      	adds	r1, r2, #1
   1ebfe:	9117      	str	r1, [sp, #92]	; 0x5c
   1ec00:	7852      	ldrb	r2, [r2, #1]
   1ec02:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   1ec06:	2e09      	cmp	r6, #9
   1ec08:	d937      	bls.n	1ec7a <_strtod_l+0x342>
   1ec0a:	9e06      	ldr	r6, [sp, #24]
   1ec0c:	1b89      	subs	r1, r1, r6
   1ec0e:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1ec12:	2908      	cmp	r1, #8
   1ec14:	dc02      	bgt.n	1ec1c <_strtod_l+0x2e4>
   1ec16:	4576      	cmp	r6, lr
   1ec18:	bfa8      	it	ge
   1ec1a:	4676      	movge	r6, lr
   1ec1c:	f1bc 0f00 	cmp.w	ip, #0
   1ec20:	d000      	beq.n	1ec24 <_strtod_l+0x2ec>
   1ec22:	4276      	negs	r6, r6
   1ec24:	2d00      	cmp	r5, #0
   1ec26:	d14d      	bne.n	1ecc4 <_strtod_l+0x38c>
   1ec28:	9904      	ldr	r1, [sp, #16]
   1ec2a:	4301      	orrs	r1, r0
   1ec2c:	f47f aec8 	bne.w	1e9c0 <_strtod_l+0x88>
   1ec30:	2b00      	cmp	r3, #0
   1ec32:	f47f aee1 	bne.w	1e9f8 <_strtod_l+0xc0>
   1ec36:	2a69      	cmp	r2, #105	; 0x69
   1ec38:	d027      	beq.n	1ec8a <_strtod_l+0x352>
   1ec3a:	dc24      	bgt.n	1ec86 <_strtod_l+0x34e>
   1ec3c:	2a49      	cmp	r2, #73	; 0x49
   1ec3e:	d024      	beq.n	1ec8a <_strtod_l+0x352>
   1ec40:	2a4e      	cmp	r2, #78	; 0x4e
   1ec42:	f47f aed9 	bne.w	1e9f8 <_strtod_l+0xc0>
   1ec46:	499f      	ldr	r1, [pc, #636]	; (1eec4 <_strtod_l+0x58c>)
   1ec48:	a817      	add	r0, sp, #92	; 0x5c
   1ec4a:	f023 fb4c 	bl	422e6 <__match>
   1ec4e:	2800      	cmp	r0, #0
   1ec50:	f43f aed2 	beq.w	1e9f8 <_strtod_l+0xc0>
   1ec54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ec56:	781b      	ldrb	r3, [r3, #0]
   1ec58:	2b28      	cmp	r3, #40	; 0x28
   1ec5a:	d12d      	bne.n	1ecb8 <_strtod_l+0x380>
   1ec5c:	aa1a      	add	r2, sp, #104	; 0x68
   1ec5e:	499a      	ldr	r1, [pc, #616]	; (1eec8 <_strtod_l+0x590>)
   1ec60:	a817      	add	r0, sp, #92	; 0x5c
   1ec62:	f023 fb54 	bl	4230e <__hexnan>
   1ec66:	2805      	cmp	r0, #5
   1ec68:	d126      	bne.n	1ecb8 <_strtod_l+0x380>
   1ec6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ec6c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   1ec70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1ec74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1ec78:	e6a2      	b.n	1e9c0 <_strtod_l+0x88>
   1ec7a:	210a      	movs	r1, #10
   1ec7c:	fb01 2e0e 	mla	lr, r1, lr, r2
   1ec80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1ec84:	e7b9      	b.n	1ebfa <_strtod_l+0x2c2>
   1ec86:	2a6e      	cmp	r2, #110	; 0x6e
   1ec88:	e7db      	b.n	1ec42 <_strtod_l+0x30a>
   1ec8a:	4990      	ldr	r1, [pc, #576]	; (1eecc <_strtod_l+0x594>)
   1ec8c:	a817      	add	r0, sp, #92	; 0x5c
   1ec8e:	f023 fb2a 	bl	422e6 <__match>
   1ec92:	2800      	cmp	r0, #0
   1ec94:	f43f aeb0 	beq.w	1e9f8 <_strtod_l+0xc0>
   1ec98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ec9a:	a817      	add	r0, sp, #92	; 0x5c
   1ec9c:	498c      	ldr	r1, [pc, #560]	; (1eed0 <_strtod_l+0x598>)
   1ec9e:	3b01      	subs	r3, #1
   1eca0:	9317      	str	r3, [sp, #92]	; 0x5c
   1eca2:	f023 fb20 	bl	422e6 <__match>
   1eca6:	b910      	cbnz	r0, 1ecae <_strtod_l+0x376>
   1eca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ecaa:	3301      	adds	r3, #1
   1ecac:	9317      	str	r3, [sp, #92]	; 0x5c
   1ecae:	f8df b230 	ldr.w	fp, [pc, #560]	; 1eee0 <_strtod_l+0x5a8>
   1ecb2:	f04f 0a00 	mov.w	sl, #0
   1ecb6:	e683      	b.n	1e9c0 <_strtod_l+0x88>
   1ecb8:	4886      	ldr	r0, [pc, #536]	; (1eed4 <_strtod_l+0x59c>)
   1ecba:	f01d ff35 	bl	3cb28 <nan>
   1ecbe:	4682      	mov	sl, r0
   1ecc0:	468b      	mov	fp, r1
   1ecc2:	e67d      	b.n	1e9c0 <_strtod_l+0x88>
   1ecc4:	9b05      	ldr	r3, [sp, #20]
   1ecc6:	2f00      	cmp	r7, #0
   1ecc8:	bf08      	it	eq
   1ecca:	462f      	moveq	r7, r5
   1eccc:	2d10      	cmp	r5, #16
   1ecce:	9807      	ldr	r0, [sp, #28]
   1ecd0:	eba6 0303 	sub.w	r3, r6, r3
   1ecd4:	46a8      	mov	r8, r5
   1ecd6:	bfa8      	it	ge
   1ecd8:	f04f 0810 	movge.w	r8, #16
   1ecdc:	9306      	str	r3, [sp, #24]
   1ecde:	f7fd fcf1 	bl	1c6c4 <__aeabi_ui2d>
   1ece2:	2d09      	cmp	r5, #9
   1ece4:	4682      	mov	sl, r0
   1ece6:	468b      	mov	fp, r1
   1ece8:	dd13      	ble.n	1ed12 <_strtod_l+0x3da>
   1ecea:	4b7b      	ldr	r3, [pc, #492]	; (1eed8 <_strtod_l+0x5a0>)
   1ecec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1ecf0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1ecf4:	f7fd fd60 	bl	1c7b8 <__aeabi_dmul>
   1ecf8:	4682      	mov	sl, r0
   1ecfa:	468b      	mov	fp, r1
   1ecfc:	4648      	mov	r0, r9
   1ecfe:	f7fd fce1 	bl	1c6c4 <__aeabi_ui2d>
   1ed02:	4602      	mov	r2, r0
   1ed04:	460b      	mov	r3, r1
   1ed06:	4650      	mov	r0, sl
   1ed08:	4659      	mov	r1, fp
   1ed0a:	f7fd fb9f 	bl	1c44c <__adddf3>
   1ed0e:	4682      	mov	sl, r0
   1ed10:	468b      	mov	fp, r1
   1ed12:	2d0f      	cmp	r5, #15
   1ed14:	dc36      	bgt.n	1ed84 <_strtod_l+0x44c>
   1ed16:	9b06      	ldr	r3, [sp, #24]
   1ed18:	2b00      	cmp	r3, #0
   1ed1a:	f43f ae51 	beq.w	1e9c0 <_strtod_l+0x88>
   1ed1e:	dd22      	ble.n	1ed66 <_strtod_l+0x42e>
   1ed20:	2b16      	cmp	r3, #22
   1ed22:	dc09      	bgt.n	1ed38 <_strtod_l+0x400>
   1ed24:	496c      	ldr	r1, [pc, #432]	; (1eed8 <_strtod_l+0x5a0>)
   1ed26:	4652      	mov	r2, sl
   1ed28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ed2c:	465b      	mov	r3, fp
   1ed2e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ed32:	f7fd fd41 	bl	1c7b8 <__aeabi_dmul>
   1ed36:	e7c2      	b.n	1ecbe <_strtod_l+0x386>
   1ed38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1ed3c:	9a06      	ldr	r2, [sp, #24]
   1ed3e:	4293      	cmp	r3, r2
   1ed40:	db20      	blt.n	1ed84 <_strtod_l+0x44c>
   1ed42:	f1c5 050f 	rsb	r5, r5, #15
   1ed46:	4c64      	ldr	r4, [pc, #400]	; (1eed8 <_strtod_l+0x5a0>)
   1ed48:	4652      	mov	r2, sl
   1ed4a:	465b      	mov	r3, fp
   1ed4c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1ed50:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ed54:	f7fd fd30 	bl	1c7b8 <__aeabi_dmul>
   1ed58:	9b06      	ldr	r3, [sp, #24]
   1ed5a:	1b5d      	subs	r5, r3, r5
   1ed5c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1ed60:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ed64:	e7e5      	b.n	1ed32 <_strtod_l+0x3fa>
   1ed66:	9b06      	ldr	r3, [sp, #24]
   1ed68:	3316      	adds	r3, #22
   1ed6a:	db0b      	blt.n	1ed84 <_strtod_l+0x44c>
   1ed6c:	9b05      	ldr	r3, [sp, #20]
   1ed6e:	4650      	mov	r0, sl
   1ed70:	4659      	mov	r1, fp
   1ed72:	1b9e      	subs	r6, r3, r6
   1ed74:	4b58      	ldr	r3, [pc, #352]	; (1eed8 <_strtod_l+0x5a0>)
   1ed76:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1ed7a:	e9d6 2300 	ldrd	r2, r3, [r6]
   1ed7e:	f7fd fe45 	bl	1ca0c <__aeabi_ddiv>
   1ed82:	e79c      	b.n	1ecbe <_strtod_l+0x386>
   1ed84:	eba5 0308 	sub.w	r3, r5, r8
   1ed88:	9a06      	ldr	r2, [sp, #24]
   1ed8a:	eb03 0802 	add.w	r8, r3, r2
   1ed8e:	f1b8 0f00 	cmp.w	r8, #0
   1ed92:	dd74      	ble.n	1ee7e <_strtod_l+0x546>
   1ed94:	f018 030f 	ands.w	r3, r8, #15
   1ed98:	d00a      	beq.n	1edb0 <_strtod_l+0x478>
   1ed9a:	494f      	ldr	r1, [pc, #316]	; (1eed8 <_strtod_l+0x5a0>)
   1ed9c:	4652      	mov	r2, sl
   1ed9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1eda2:	465b      	mov	r3, fp
   1eda4:	e9d1 0100 	ldrd	r0, r1, [r1]
   1eda8:	f7fd fd06 	bl	1c7b8 <__aeabi_dmul>
   1edac:	4682      	mov	sl, r0
   1edae:	468b      	mov	fp, r1
   1edb0:	f038 080f 	bics.w	r8, r8, #15
   1edb4:	d04f      	beq.n	1ee56 <_strtod_l+0x51e>
   1edb6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1edba:	dd22      	ble.n	1ee02 <_strtod_l+0x4ca>
   1edbc:	2500      	movs	r5, #0
   1edbe:	46a9      	mov	r9, r5
   1edc0:	9507      	str	r5, [sp, #28]
   1edc2:	9505      	str	r5, [sp, #20]
   1edc4:	2322      	movs	r3, #34	; 0x22
   1edc6:	f8df b118 	ldr.w	fp, [pc, #280]	; 1eee0 <_strtod_l+0x5a8>
   1edca:	f04f 0a00 	mov.w	sl, #0
   1edce:	6023      	str	r3, [r4, #0]
   1edd0:	9b07      	ldr	r3, [sp, #28]
   1edd2:	2b00      	cmp	r3, #0
   1edd4:	f43f adf4 	beq.w	1e9c0 <_strtod_l+0x88>
   1edd8:	9918      	ldr	r1, [sp, #96]	; 0x60
   1edda:	4620      	mov	r0, r4
   1eddc:	f01c ff28 	bl	3bc30 <_Bfree>
   1ede0:	9905      	ldr	r1, [sp, #20]
   1ede2:	4620      	mov	r0, r4
   1ede4:	f01c ff24 	bl	3bc30 <_Bfree>
   1ede8:	4649      	mov	r1, r9
   1edea:	4620      	mov	r0, r4
   1edec:	f01c ff20 	bl	3bc30 <_Bfree>
   1edf0:	9907      	ldr	r1, [sp, #28]
   1edf2:	4620      	mov	r0, r4
   1edf4:	f01c ff1c 	bl	3bc30 <_Bfree>
   1edf8:	4629      	mov	r1, r5
   1edfa:	4620      	mov	r0, r4
   1edfc:	f01c ff18 	bl	3bc30 <_Bfree>
   1ee00:	e5de      	b.n	1e9c0 <_strtod_l+0x88>
   1ee02:	4b36      	ldr	r3, [pc, #216]	; (1eedc <_strtod_l+0x5a4>)
   1ee04:	ea4f 1828 	mov.w	r8, r8, asr #4
   1ee08:	4650      	mov	r0, sl
   1ee0a:	4659      	mov	r1, fp
   1ee0c:	9304      	str	r3, [sp, #16]
   1ee0e:	2300      	movs	r3, #0
   1ee10:	4699      	mov	r9, r3
   1ee12:	f1b8 0f01 	cmp.w	r8, #1
   1ee16:	dc21      	bgt.n	1ee5c <_strtod_l+0x524>
   1ee18:	b10b      	cbz	r3, 1ee1e <_strtod_l+0x4e6>
   1ee1a:	4682      	mov	sl, r0
   1ee1c:	468b      	mov	fp, r1
   1ee1e:	4b2f      	ldr	r3, [pc, #188]	; (1eedc <_strtod_l+0x5a4>)
   1ee20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1ee24:	4652      	mov	r2, sl
   1ee26:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1ee2a:	465b      	mov	r3, fp
   1ee2c:	e9d9 0100 	ldrd	r0, r1, [r9]
   1ee30:	f7fd fcc2 	bl	1c7b8 <__aeabi_dmul>
   1ee34:	4b2a      	ldr	r3, [pc, #168]	; (1eee0 <_strtod_l+0x5a8>)
   1ee36:	460a      	mov	r2, r1
   1ee38:	4682      	mov	sl, r0
   1ee3a:	400b      	ands	r3, r1
   1ee3c:	4929      	ldr	r1, [pc, #164]	; (1eee4 <_strtod_l+0x5ac>)
   1ee3e:	428b      	cmp	r3, r1
   1ee40:	d8bc      	bhi.n	1edbc <_strtod_l+0x484>
   1ee42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1ee46:	428b      	cmp	r3, r1
   1ee48:	bf86      	itte	hi
   1ee4a:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 1eee8 <_strtod_l+0x5b0>
   1ee4e:	f04f 3aff 	movhi.w	sl, #4294967295
   1ee52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1ee56:	2300      	movs	r3, #0
   1ee58:	9304      	str	r3, [sp, #16]
   1ee5a:	e084      	b.n	1ef66 <_strtod_l+0x62e>
   1ee5c:	f018 0f01 	tst.w	r8, #1
   1ee60:	d005      	beq.n	1ee6e <_strtod_l+0x536>
   1ee62:	9b04      	ldr	r3, [sp, #16]
   1ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee68:	f7fd fca6 	bl	1c7b8 <__aeabi_dmul>
   1ee6c:	2301      	movs	r3, #1
   1ee6e:	9a04      	ldr	r2, [sp, #16]
   1ee70:	f109 0901 	add.w	r9, r9, #1
   1ee74:	ea4f 0868 	mov.w	r8, r8, asr #1
   1ee78:	3208      	adds	r2, #8
   1ee7a:	9204      	str	r2, [sp, #16]
   1ee7c:	e7c9      	b.n	1ee12 <_strtod_l+0x4da>
   1ee7e:	d0ea      	beq.n	1ee56 <_strtod_l+0x51e>
   1ee80:	f1c8 0800 	rsb	r8, r8, #0
   1ee84:	f018 020f 	ands.w	r2, r8, #15
   1ee88:	d00a      	beq.n	1eea0 <_strtod_l+0x568>
   1ee8a:	4b13      	ldr	r3, [pc, #76]	; (1eed8 <_strtod_l+0x5a0>)
   1ee8c:	4650      	mov	r0, sl
   1ee8e:	4659      	mov	r1, fp
   1ee90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ee94:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee98:	f7fd fdb8 	bl	1ca0c <__aeabi_ddiv>
   1ee9c:	4682      	mov	sl, r0
   1ee9e:	468b      	mov	fp, r1
   1eea0:	ea5f 1828 	movs.w	r8, r8, asr #4
   1eea4:	d0d7      	beq.n	1ee56 <_strtod_l+0x51e>
   1eea6:	f1b8 0f1f 	cmp.w	r8, #31
   1eeaa:	dd1f      	ble.n	1eeec <_strtod_l+0x5b4>
   1eeac:	2500      	movs	r5, #0
   1eeae:	46a9      	mov	r9, r5
   1eeb0:	9507      	str	r5, [sp, #28]
   1eeb2:	9505      	str	r5, [sp, #20]
   1eeb4:	2322      	movs	r3, #34	; 0x22
   1eeb6:	f04f 0a00 	mov.w	sl, #0
   1eeba:	f04f 0b00 	mov.w	fp, #0
   1eebe:	6023      	str	r3, [r4, #0]
   1eec0:	e786      	b.n	1edd0 <_strtod_l+0x498>
   1eec2:	bf00      	nop
   1eec4:	0004c74d 	.word	0x0004c74d
   1eec8:	00043b48 	.word	0x00043b48
   1eecc:	0004c745 	.word	0x0004c745
   1eed0:	0004c775 	.word	0x0004c775
   1eed4:	00045b14 	.word	0x00045b14
   1eed8:	00042ff8 	.word	0x00042ff8
   1eedc:	00042fd0 	.word	0x00042fd0
   1eee0:	7ff00000 	.word	0x7ff00000
   1eee4:	7ca00000 	.word	0x7ca00000
   1eee8:	7fefffff 	.word	0x7fefffff
   1eeec:	f018 0310 	ands.w	r3, r8, #16
   1eef0:	4650      	mov	r0, sl
   1eef2:	4659      	mov	r1, fp
   1eef4:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 1f2a0 <_strtod_l+0x968>
   1eef8:	bf18      	it	ne
   1eefa:	236a      	movne	r3, #106	; 0x6a
   1eefc:	9304      	str	r3, [sp, #16]
   1eefe:	2300      	movs	r3, #0
   1ef00:	f018 0f01 	tst.w	r8, #1
   1ef04:	d004      	beq.n	1ef10 <_strtod_l+0x5d8>
   1ef06:	e9d9 2300 	ldrd	r2, r3, [r9]
   1ef0a:	f7fd fc55 	bl	1c7b8 <__aeabi_dmul>
   1ef0e:	2301      	movs	r3, #1
   1ef10:	ea5f 0868 	movs.w	r8, r8, asr #1
   1ef14:	f109 0908 	add.w	r9, r9, #8
   1ef18:	d1f2      	bne.n	1ef00 <_strtod_l+0x5c8>
   1ef1a:	b10b      	cbz	r3, 1ef20 <_strtod_l+0x5e8>
   1ef1c:	4682      	mov	sl, r0
   1ef1e:	468b      	mov	fp, r1
   1ef20:	9b04      	ldr	r3, [sp, #16]
   1ef22:	b1c3      	cbz	r3, 1ef56 <_strtod_l+0x61e>
   1ef24:	f3cb 520a 	ubfx	r2, fp, #20, #11
   1ef28:	4659      	mov	r1, fp
   1ef2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ef2e:	2b00      	cmp	r3, #0
   1ef30:	dd11      	ble.n	1ef56 <_strtod_l+0x61e>
   1ef32:	2b1f      	cmp	r3, #31
   1ef34:	f340 8120 	ble.w	1f178 <_strtod_l+0x840>
   1ef38:	2b34      	cmp	r3, #52	; 0x34
   1ef3a:	f04f 0a00 	mov.w	sl, #0
   1ef3e:	bfdb      	ittet	le
   1ef40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   1ef44:	f04f 33ff 	movle.w	r3, #4294967295
   1ef48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1ef4c:	fa03 f202 	lslle.w	r2, r3, r2
   1ef50:	bfd8      	it	le
   1ef52:	ea02 0b01 	andle.w	fp, r2, r1
   1ef56:	2200      	movs	r2, #0
   1ef58:	2300      	movs	r3, #0
   1ef5a:	4650      	mov	r0, sl
   1ef5c:	4659      	mov	r1, fp
   1ef5e:	f7fd fe93 	bl	1cc88 <__aeabi_dcmpeq>
   1ef62:	2800      	cmp	r0, #0
   1ef64:	d1a2      	bne.n	1eeac <_strtod_l+0x574>
   1ef66:	9b07      	ldr	r3, [sp, #28]
   1ef68:	463a      	mov	r2, r7
   1ef6a:	9908      	ldr	r1, [sp, #32]
   1ef6c:	4620      	mov	r0, r4
   1ef6e:	9300      	str	r3, [sp, #0]
   1ef70:	462b      	mov	r3, r5
   1ef72:	f01c fec7 	bl	3bd04 <__s2b>
   1ef76:	9007      	str	r0, [sp, #28]
   1ef78:	2800      	cmp	r0, #0
   1ef7a:	f43f af1f 	beq.w	1edbc <_strtod_l+0x484>
   1ef7e:	9b05      	ldr	r3, [sp, #20]
   1ef80:	2500      	movs	r5, #0
   1ef82:	1b9e      	subs	r6, r3, r6
   1ef84:	9b06      	ldr	r3, [sp, #24]
   1ef86:	46a9      	mov	r9, r5
   1ef88:	2b00      	cmp	r3, #0
   1ef8a:	bfb4      	ite	lt
   1ef8c:	4633      	movlt	r3, r6
   1ef8e:	2300      	movge	r3, #0
   1ef90:	930c      	str	r3, [sp, #48]	; 0x30
   1ef92:	9b06      	ldr	r3, [sp, #24]
   1ef94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ef98:	9312      	str	r3, [sp, #72]	; 0x48
   1ef9a:	9b07      	ldr	r3, [sp, #28]
   1ef9c:	4620      	mov	r0, r4
   1ef9e:	6859      	ldr	r1, [r3, #4]
   1efa0:	f01c fe06 	bl	3bbb0 <_Balloc>
   1efa4:	9005      	str	r0, [sp, #20]
   1efa6:	2800      	cmp	r0, #0
   1efa8:	f43f af0c 	beq.w	1edc4 <_strtod_l+0x48c>
   1efac:	9b07      	ldr	r3, [sp, #28]
   1efae:	300c      	adds	r0, #12
   1efb0:	691a      	ldr	r2, [r3, #16]
   1efb2:	f103 010c 	add.w	r1, r3, #12
   1efb6:	3202      	adds	r2, #2
   1efb8:	0092      	lsls	r2, r2, #2
   1efba:	f022 fdb1 	bl	41b20 <memcpy>
   1efbe:	ab1a      	add	r3, sp, #104	; 0x68
   1efc0:	4652      	mov	r2, sl
   1efc2:	4620      	mov	r0, r4
   1efc4:	9301      	str	r3, [sp, #4]
   1efc6:	ab19      	add	r3, sp, #100	; 0x64
   1efc8:	9300      	str	r3, [sp, #0]
   1efca:	465b      	mov	r3, fp
   1efcc:	f01d f972 	bl	3c2b4 <__d2b>
   1efd0:	9018      	str	r0, [sp, #96]	; 0x60
   1efd2:	ec4b ab18 	vmov	d8, sl, fp
   1efd6:	2800      	cmp	r0, #0
   1efd8:	f43f aef4 	beq.w	1edc4 <_strtod_l+0x48c>
   1efdc:	2101      	movs	r1, #1
   1efde:	4620      	mov	r0, r4
   1efe0:	f01c feda 	bl	3bd98 <__i2b>
   1efe4:	4681      	mov	r9, r0
   1efe6:	2800      	cmp	r0, #0
   1efe8:	f43f aeec 	beq.w	1edc4 <_strtod_l+0x48c>
   1efec:	9e19      	ldr	r6, [sp, #100]	; 0x64
   1efee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1eff0:	2e00      	cmp	r6, #0
   1eff2:	bfa9      	itett	ge
   1eff4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
   1eff6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   1eff8:	eb06 0803 	addge.w	r8, r6, r3
   1effc:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   1effe:	bfb8      	it	lt
   1f000:	1b9f      	sublt	r7, r3, r6
   1f002:	9b04      	ldr	r3, [sp, #16]
   1f004:	bfb8      	it	lt
   1f006:	f8dd 8030 	ldrlt.w	r8, [sp, #48]	; 0x30
   1f00a:	1af6      	subs	r6, r6, r3
   1f00c:	4b9f      	ldr	r3, [pc, #636]	; (1f28c <_strtod_l+0x954>)
   1f00e:	4416      	add	r6, r2
   1f010:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1f014:	3e01      	subs	r6, #1
   1f016:	429e      	cmp	r6, r3
   1f018:	f280 80c1 	bge.w	1f19e <_strtod_l+0x866>
   1f01c:	1b9b      	subs	r3, r3, r6
   1f01e:	2101      	movs	r1, #1
   1f020:	2b1f      	cmp	r3, #31
   1f022:	eba2 0203 	sub.w	r2, r2, r3
   1f026:	f300 80ae 	bgt.w	1f186 <_strtod_l+0x84e>
   1f02a:	fa01 f303 	lsl.w	r3, r1, r3
   1f02e:	930d      	str	r3, [sp, #52]	; 0x34
   1f030:	2300      	movs	r3, #0
   1f032:	9308      	str	r3, [sp, #32]
   1f034:	eb08 0602 	add.w	r6, r8, r2
   1f038:	9b04      	ldr	r3, [sp, #16]
   1f03a:	4417      	add	r7, r2
   1f03c:	45b0      	cmp	r8, r6
   1f03e:	441f      	add	r7, r3
   1f040:	4643      	mov	r3, r8
   1f042:	bfa8      	it	ge
   1f044:	4633      	movge	r3, r6
   1f046:	42bb      	cmp	r3, r7
   1f048:	bfa8      	it	ge
   1f04a:	463b      	movge	r3, r7
   1f04c:	2b00      	cmp	r3, #0
   1f04e:	bfc2      	ittt	gt
   1f050:	1af6      	subgt	r6, r6, r3
   1f052:	1aff      	subgt	r7, r7, r3
   1f054:	eba8 0803 	subgt.w	r8, r8, r3
   1f058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f05a:	2b00      	cmp	r3, #0
   1f05c:	dd17      	ble.n	1f08e <_strtod_l+0x756>
   1f05e:	4649      	mov	r1, r9
   1f060:	461a      	mov	r2, r3
   1f062:	4620      	mov	r0, r4
   1f064:	f01c ff56 	bl	3bf14 <__pow5mult>
   1f068:	4681      	mov	r9, r0
   1f06a:	2800      	cmp	r0, #0
   1f06c:	f43f aeaa 	beq.w	1edc4 <_strtod_l+0x48c>
   1f070:	4601      	mov	r1, r0
   1f072:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1f074:	4620      	mov	r0, r4
   1f076:	f01c fea5 	bl	3bdc4 <__multiply>
   1f07a:	900b      	str	r0, [sp, #44]	; 0x2c
   1f07c:	2800      	cmp	r0, #0
   1f07e:	f43f aea1 	beq.w	1edc4 <_strtod_l+0x48c>
   1f082:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f084:	4620      	mov	r0, r4
   1f086:	f01c fdd3 	bl	3bc30 <_Bfree>
   1f08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f08c:	9318      	str	r3, [sp, #96]	; 0x60
   1f08e:	2e00      	cmp	r6, #0
   1f090:	f300 808a 	bgt.w	1f1a8 <_strtod_l+0x870>
   1f094:	9b06      	ldr	r3, [sp, #24]
   1f096:	2b00      	cmp	r3, #0
   1f098:	dd08      	ble.n	1f0ac <_strtod_l+0x774>
   1f09a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1f09c:	4620      	mov	r0, r4
   1f09e:	9905      	ldr	r1, [sp, #20]
   1f0a0:	f01c ff38 	bl	3bf14 <__pow5mult>
   1f0a4:	9005      	str	r0, [sp, #20]
   1f0a6:	2800      	cmp	r0, #0
   1f0a8:	f43f ae8c 	beq.w	1edc4 <_strtod_l+0x48c>
   1f0ac:	2f00      	cmp	r7, #0
   1f0ae:	dd08      	ble.n	1f0c2 <_strtod_l+0x78a>
   1f0b0:	463a      	mov	r2, r7
   1f0b2:	9905      	ldr	r1, [sp, #20]
   1f0b4:	4620      	mov	r0, r4
   1f0b6:	f01c ff87 	bl	3bfc8 <__lshift>
   1f0ba:	9005      	str	r0, [sp, #20]
   1f0bc:	2800      	cmp	r0, #0
   1f0be:	f43f ae81 	beq.w	1edc4 <_strtod_l+0x48c>
   1f0c2:	f1b8 0f00 	cmp.w	r8, #0
   1f0c6:	dd08      	ble.n	1f0da <_strtod_l+0x7a2>
   1f0c8:	4649      	mov	r1, r9
   1f0ca:	4642      	mov	r2, r8
   1f0cc:	4620      	mov	r0, r4
   1f0ce:	f01c ff7b 	bl	3bfc8 <__lshift>
   1f0d2:	4681      	mov	r9, r0
   1f0d4:	2800      	cmp	r0, #0
   1f0d6:	f43f ae75 	beq.w	1edc4 <_strtod_l+0x48c>
   1f0da:	9a05      	ldr	r2, [sp, #20]
   1f0dc:	4620      	mov	r0, r4
   1f0de:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f0e0:	f01c ffe2 	bl	3c0a8 <__mdiff>
   1f0e4:	4605      	mov	r5, r0
   1f0e6:	2800      	cmp	r0, #0
   1f0e8:	f43f ae6c 	beq.w	1edc4 <_strtod_l+0x48c>
   1f0ec:	68c3      	ldr	r3, [r0, #12]
   1f0ee:	4649      	mov	r1, r9
   1f0f0:	930b      	str	r3, [sp, #44]	; 0x2c
   1f0f2:	2300      	movs	r3, #0
   1f0f4:	60c3      	str	r3, [r0, #12]
   1f0f6:	f023 fa46 	bl	42586 <__mcmp>
   1f0fa:	2800      	cmp	r0, #0
   1f0fc:	da5e      	bge.n	1f1bc <_strtod_l+0x884>
   1f0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f100:	ea53 030a 	orrs.w	r3, r3, sl
   1f104:	f040 8082 	bne.w	1f20c <_strtod_l+0x8d4>
   1f108:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f10c:	2b00      	cmp	r3, #0
   1f10e:	d17d      	bne.n	1f20c <_strtod_l+0x8d4>
   1f110:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f114:	0d1b      	lsrs	r3, r3, #20
   1f116:	051b      	lsls	r3, r3, #20
   1f118:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1f11c:	d976      	bls.n	1f20c <_strtod_l+0x8d4>
   1f11e:	696b      	ldr	r3, [r5, #20]
   1f120:	b913      	cbnz	r3, 1f128 <_strtod_l+0x7f0>
   1f122:	692b      	ldr	r3, [r5, #16]
   1f124:	2b01      	cmp	r3, #1
   1f126:	dd71      	ble.n	1f20c <_strtod_l+0x8d4>
   1f128:	4629      	mov	r1, r5
   1f12a:	2201      	movs	r2, #1
   1f12c:	4620      	mov	r0, r4
   1f12e:	f01c ff4b 	bl	3bfc8 <__lshift>
   1f132:	4649      	mov	r1, r9
   1f134:	4605      	mov	r5, r0
   1f136:	f023 fa26 	bl	42586 <__mcmp>
   1f13a:	2800      	cmp	r0, #0
   1f13c:	dd66      	ble.n	1f20c <_strtod_l+0x8d4>
   1f13e:	9904      	ldr	r1, [sp, #16]
   1f140:	465b      	mov	r3, fp
   1f142:	4a53      	ldr	r2, [pc, #332]	; (1f290 <_strtod_l+0x958>)
   1f144:	2900      	cmp	r1, #0
   1f146:	f000 8082 	beq.w	1f24e <_strtod_l+0x916>
   1f14a:	ea02 010b 	and.w	r1, r2, fp
   1f14e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1f152:	dc7c      	bgt.n	1f24e <_strtod_l+0x916>
   1f154:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1f158:	f77f aeac 	ble.w	1eeb4 <_strtod_l+0x57c>
   1f15c:	4b4d      	ldr	r3, [pc, #308]	; (1f294 <_strtod_l+0x95c>)
   1f15e:	4650      	mov	r0, sl
   1f160:	4659      	mov	r1, fp
   1f162:	2200      	movs	r2, #0
   1f164:	f7fd fb28 	bl	1c7b8 <__aeabi_dmul>
   1f168:	460b      	mov	r3, r1
   1f16a:	4682      	mov	sl, r0
   1f16c:	468b      	mov	fp, r1
   1f16e:	4303      	orrs	r3, r0
   1f170:	bf04      	itt	eq
   1f172:	2322      	moveq	r3, #34	; 0x22
   1f174:	6023      	streq	r3, [r4, #0]
   1f176:	e62f      	b.n	1edd8 <_strtod_l+0x4a0>
   1f178:	f04f 32ff 	mov.w	r2, #4294967295
   1f17c:	fa02 f303 	lsl.w	r3, r2, r3
   1f180:	ea03 0a0a 	and.w	sl, r3, sl
   1f184:	e6e7      	b.n	1ef56 <_strtod_l+0x61e>
   1f186:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
   1f18a:	910d      	str	r1, [sp, #52]	; 0x34
   1f18c:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
   1f190:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
   1f194:	36e2      	adds	r6, #226	; 0xe2
   1f196:	fa01 f306 	lsl.w	r3, r1, r6
   1f19a:	9308      	str	r3, [sp, #32]
   1f19c:	e74a      	b.n	1f034 <_strtod_l+0x6fc>
   1f19e:	2300      	movs	r3, #0
   1f1a0:	9308      	str	r3, [sp, #32]
   1f1a2:	2301      	movs	r3, #1
   1f1a4:	930d      	str	r3, [sp, #52]	; 0x34
   1f1a6:	e745      	b.n	1f034 <_strtod_l+0x6fc>
   1f1a8:	4632      	mov	r2, r6
   1f1aa:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f1ac:	4620      	mov	r0, r4
   1f1ae:	f01c ff0b 	bl	3bfc8 <__lshift>
   1f1b2:	9018      	str	r0, [sp, #96]	; 0x60
   1f1b4:	2800      	cmp	r0, #0
   1f1b6:	f47f af6d 	bne.w	1f094 <_strtod_l+0x75c>
   1f1ba:	e603      	b.n	1edc4 <_strtod_l+0x48c>
   1f1bc:	46d8      	mov	r8, fp
   1f1be:	d171      	bne.n	1f2a4 <_strtod_l+0x96c>
   1f1c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f1c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f1c6:	b352      	cbz	r2, 1f21e <_strtod_l+0x8e6>
   1f1c8:	4a33      	ldr	r2, [pc, #204]	; (1f298 <_strtod_l+0x960>)
   1f1ca:	4293      	cmp	r3, r2
   1f1cc:	d12a      	bne.n	1f224 <_strtod_l+0x8ec>
   1f1ce:	9b04      	ldr	r3, [sp, #16]
   1f1d0:	4651      	mov	r1, sl
   1f1d2:	b1fb      	cbz	r3, 1f214 <_strtod_l+0x8dc>
   1f1d4:	4b2e      	ldr	r3, [pc, #184]	; (1f290 <_strtod_l+0x958>)
   1f1d6:	f04f 32ff 	mov.w	r2, #4294967295
   1f1da:	ea0b 0303 	and.w	r3, fp, r3
   1f1de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f1e2:	d81a      	bhi.n	1f21a <_strtod_l+0x8e2>
   1f1e4:	0d1b      	lsrs	r3, r3, #20
   1f1e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1f1ea:	fa02 f303 	lsl.w	r3, r2, r3
   1f1ee:	4299      	cmp	r1, r3
   1f1f0:	d118      	bne.n	1f224 <_strtod_l+0x8ec>
   1f1f2:	4b2a      	ldr	r3, [pc, #168]	; (1f29c <_strtod_l+0x964>)
   1f1f4:	4598      	cmp	r8, r3
   1f1f6:	d102      	bne.n	1f1fe <_strtod_l+0x8c6>
   1f1f8:	3101      	adds	r1, #1
   1f1fa:	f43f ade3 	beq.w	1edc4 <_strtod_l+0x48c>
   1f1fe:	4b24      	ldr	r3, [pc, #144]	; (1f290 <_strtod_l+0x958>)
   1f200:	f04f 0a00 	mov.w	sl, #0
   1f204:	ea08 0303 	and.w	r3, r8, r3
   1f208:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1f20c:	9b04      	ldr	r3, [sp, #16]
   1f20e:	2b00      	cmp	r3, #0
   1f210:	d1a4      	bne.n	1f15c <_strtod_l+0x824>
   1f212:	e5e1      	b.n	1edd8 <_strtod_l+0x4a0>
   1f214:	f04f 33ff 	mov.w	r3, #4294967295
   1f218:	e7e9      	b.n	1f1ee <_strtod_l+0x8b6>
   1f21a:	4613      	mov	r3, r2
   1f21c:	e7e7      	b.n	1f1ee <_strtod_l+0x8b6>
   1f21e:	ea53 030a 	orrs.w	r3, r3, sl
   1f222:	d08c      	beq.n	1f13e <_strtod_l+0x806>
   1f224:	9b08      	ldr	r3, [sp, #32]
   1f226:	b1e3      	cbz	r3, 1f262 <_strtod_l+0x92a>
   1f228:	ea13 0f08 	tst.w	r3, r8
   1f22c:	d0ee      	beq.n	1f20c <_strtod_l+0x8d4>
   1f22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f230:	4650      	mov	r0, sl
   1f232:	9a04      	ldr	r2, [sp, #16]
   1f234:	4659      	mov	r1, fp
   1f236:	b1c3      	cbz	r3, 1f26a <_strtod_l+0x932>
   1f238:	f022 fec2 	bl	41fc0 <sulp>
   1f23c:	4602      	mov	r2, r0
   1f23e:	460b      	mov	r3, r1
   1f240:	ec51 0b18 	vmov	r0, r1, d8
   1f244:	f7fd f902 	bl	1c44c <__adddf3>
   1f248:	4682      	mov	sl, r0
   1f24a:	468b      	mov	fp, r1
   1f24c:	e7de      	b.n	1f20c <_strtod_l+0x8d4>
   1f24e:	4013      	ands	r3, r2
   1f250:	f04f 3aff 	mov.w	sl, #4294967295
   1f254:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1f258:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1f25c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1f260:	e7d4      	b.n	1f20c <_strtod_l+0x8d4>
   1f262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f264:	ea13 0f0a 	tst.w	r3, sl
   1f268:	e7e0      	b.n	1f22c <_strtod_l+0x8f4>
   1f26a:	f022 fea9 	bl	41fc0 <sulp>
   1f26e:	4602      	mov	r2, r0
   1f270:	460b      	mov	r3, r1
   1f272:	ec51 0b18 	vmov	r0, r1, d8
   1f276:	f7fd f8e7 	bl	1c448 <__aeabi_dsub>
   1f27a:	2200      	movs	r2, #0
   1f27c:	2300      	movs	r3, #0
   1f27e:	4682      	mov	sl, r0
   1f280:	468b      	mov	fp, r1
   1f282:	f7fd fd01 	bl	1cc88 <__aeabi_dcmpeq>
   1f286:	2800      	cmp	r0, #0
   1f288:	d0c0      	beq.n	1f20c <_strtod_l+0x8d4>
   1f28a:	e613      	b.n	1eeb4 <_strtod_l+0x57c>
   1f28c:	fffffc02 	.word	0xfffffc02
   1f290:	7ff00000 	.word	0x7ff00000
   1f294:	39500000 	.word	0x39500000
   1f298:	000fffff 	.word	0x000fffff
   1f29c:	7fefffff 	.word	0x7fefffff
   1f2a0:	00042fa8 	.word	0x00042fa8
   1f2a4:	4649      	mov	r1, r9
   1f2a6:	4628      	mov	r0, r5
   1f2a8:	f023 f989 	bl	425be <__ratio>
   1f2ac:	2200      	movs	r2, #0
   1f2ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f2b2:	4606      	mov	r6, r0
   1f2b4:	460f      	mov	r7, r1
   1f2b6:	f7fd fcfb 	bl	1ccb0 <__aeabi_dcmple>
   1f2ba:	2800      	cmp	r0, #0
   1f2bc:	d079      	beq.n	1f3b2 <_strtod_l+0xa7a>
   1f2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f2c0:	2b00      	cmp	r3, #0
   1f2c2:	d04b      	beq.n	1f35c <_strtod_l+0xa24>
   1f2c4:	2200      	movs	r2, #0
   1f2c6:	4b92      	ldr	r3, [pc, #584]	; (1f510 <_strtod_l+0xbd8>)
   1f2c8:	2600      	movs	r6, #0
   1f2ca:	4f91      	ldr	r7, [pc, #580]	; (1f510 <_strtod_l+0xbd8>)
   1f2cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f2d0:	4b90      	ldr	r3, [pc, #576]	; (1f514 <_strtod_l+0xbdc>)
   1f2d2:	ea08 0303 	and.w	r3, r8, r3
   1f2d6:	930d      	str	r3, [sp, #52]	; 0x34
   1f2d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f2da:	4b8f      	ldr	r3, [pc, #572]	; (1f518 <_strtod_l+0xbe0>)
   1f2dc:	429a      	cmp	r2, r3
   1f2de:	f040 80b0 	bne.w	1f442 <_strtod_l+0xb0a>
   1f2e2:	f1a8 7b54 	sub.w	fp, r8, #55574528	; 0x3500000
   1f2e6:	4650      	mov	r0, sl
   1f2e8:	ed9d 7b08 	vldr	d7, [sp, #32]
   1f2ec:	4659      	mov	r1, fp
   1f2ee:	eeb0 9a47 	vmov.f32	s18, s14
   1f2f2:	eef0 9a67 	vmov.f32	s19, s15
   1f2f6:	f01c ff67 	bl	3c1c8 <__ulp>
   1f2fa:	4602      	mov	r2, r0
   1f2fc:	460b      	mov	r3, r1
   1f2fe:	ec51 0b19 	vmov	r0, r1, d9
   1f302:	f7fd fa59 	bl	1c7b8 <__aeabi_dmul>
   1f306:	4652      	mov	r2, sl
   1f308:	465b      	mov	r3, fp
   1f30a:	f7fd f89f 	bl	1c44c <__adddf3>
   1f30e:	460b      	mov	r3, r1
   1f310:	4980      	ldr	r1, [pc, #512]	; (1f514 <_strtod_l+0xbdc>)
   1f312:	4682      	mov	sl, r0
   1f314:	4a81      	ldr	r2, [pc, #516]	; (1f51c <_strtod_l+0xbe4>)
   1f316:	4019      	ands	r1, r3
   1f318:	4291      	cmp	r1, r2
   1f31a:	d95e      	bls.n	1f3da <_strtod_l+0xaa2>
   1f31c:	ee18 3a90 	vmov	r3, s17
   1f320:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1f324:	4293      	cmp	r3, r2
   1f326:	d104      	bne.n	1f332 <_strtod_l+0x9fa>
   1f328:	ee18 3a10 	vmov	r3, s16
   1f32c:	3301      	adds	r3, #1
   1f32e:	f43f ad49 	beq.w	1edc4 <_strtod_l+0x48c>
   1f332:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 1f528 <_strtod_l+0xbf0>
   1f336:	f04f 3aff 	mov.w	sl, #4294967295
   1f33a:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f33c:	4620      	mov	r0, r4
   1f33e:	f01c fc77 	bl	3bc30 <_Bfree>
   1f342:	9905      	ldr	r1, [sp, #20]
   1f344:	4620      	mov	r0, r4
   1f346:	f01c fc73 	bl	3bc30 <_Bfree>
   1f34a:	4649      	mov	r1, r9
   1f34c:	4620      	mov	r0, r4
   1f34e:	f01c fc6f 	bl	3bc30 <_Bfree>
   1f352:	4629      	mov	r1, r5
   1f354:	4620      	mov	r0, r4
   1f356:	f01c fc6b 	bl	3bc30 <_Bfree>
   1f35a:	e61e      	b.n	1ef9a <_strtod_l+0x662>
   1f35c:	f1ba 0f00 	cmp.w	sl, #0
   1f360:	d11a      	bne.n	1f398 <_strtod_l+0xa60>
   1f362:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f366:	b9f3      	cbnz	r3, 1f3a6 <_strtod_l+0xa6e>
   1f368:	2200      	movs	r2, #0
   1f36a:	4b69      	ldr	r3, [pc, #420]	; (1f510 <_strtod_l+0xbd8>)
   1f36c:	4630      	mov	r0, r6
   1f36e:	4639      	mov	r1, r7
   1f370:	f7fd fc94 	bl	1cc9c <__aeabi_dcmplt>
   1f374:	b9d0      	cbnz	r0, 1f3ac <_strtod_l+0xa74>
   1f376:	4630      	mov	r0, r6
   1f378:	4639      	mov	r1, r7
   1f37a:	2200      	movs	r2, #0
   1f37c:	4b68      	ldr	r3, [pc, #416]	; (1f520 <_strtod_l+0xbe8>)
   1f37e:	f7fd fa1b 	bl	1c7b8 <__aeabi_dmul>
   1f382:	4606      	mov	r6, r0
   1f384:	460f      	mov	r7, r1
   1f386:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1f38a:	9614      	str	r6, [sp, #80]	; 0x50
   1f38c:	9315      	str	r3, [sp, #84]	; 0x54
   1f38e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1f392:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f396:	e79b      	b.n	1f2d0 <_strtod_l+0x998>
   1f398:	f1ba 0f01 	cmp.w	sl, #1
   1f39c:	d103      	bne.n	1f3a6 <_strtod_l+0xa6e>
   1f39e:	f1bb 0f00 	cmp.w	fp, #0
   1f3a2:	f43f ad87 	beq.w	1eeb4 <_strtod_l+0x57c>
   1f3a6:	2200      	movs	r2, #0
   1f3a8:	4b5e      	ldr	r3, [pc, #376]	; (1f524 <_strtod_l+0xbec>)
   1f3aa:	e78d      	b.n	1f2c8 <_strtod_l+0x990>
   1f3ac:	2600      	movs	r6, #0
   1f3ae:	4f5c      	ldr	r7, [pc, #368]	; (1f520 <_strtod_l+0xbe8>)
   1f3b0:	e7e9      	b.n	1f386 <_strtod_l+0xa4e>
   1f3b2:	4b5b      	ldr	r3, [pc, #364]	; (1f520 <_strtod_l+0xbe8>)
   1f3b4:	4630      	mov	r0, r6
   1f3b6:	4639      	mov	r1, r7
   1f3b8:	2200      	movs	r2, #0
   1f3ba:	f7fd f9fd 	bl	1c7b8 <__aeabi_dmul>
   1f3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f3c0:	4606      	mov	r6, r0
   1f3c2:	460f      	mov	r7, r1
   1f3c4:	b933      	cbnz	r3, 1f3d4 <_strtod_l+0xa9c>
   1f3c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f3ca:	900e      	str	r0, [sp, #56]	; 0x38
   1f3cc:	930f      	str	r3, [sp, #60]	; 0x3c
   1f3ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1f3d2:	e7de      	b.n	1f392 <_strtod_l+0xa5a>
   1f3d4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1f3d8:	e7f9      	b.n	1f3ce <_strtod_l+0xa96>
   1f3da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1f3de:	9b04      	ldr	r3, [sp, #16]
   1f3e0:	2b00      	cmp	r3, #0
   1f3e2:	d1aa      	bne.n	1f33a <_strtod_l+0xa02>
   1f3e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f3e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f3ea:	0d1b      	lsrs	r3, r3, #20
   1f3ec:	051b      	lsls	r3, r3, #20
   1f3ee:	429a      	cmp	r2, r3
   1f3f0:	d1a3      	bne.n	1f33a <_strtod_l+0xa02>
   1f3f2:	4630      	mov	r0, r6
   1f3f4:	4639      	mov	r1, r7
   1f3f6:	f7fd fdaf 	bl	1cf58 <__aeabi_d2lz>
   1f3fa:	f7fd f9af 	bl	1c75c <__aeabi_l2d>
   1f3fe:	4602      	mov	r2, r0
   1f400:	460b      	mov	r3, r1
   1f402:	4630      	mov	r0, r6
   1f404:	4639      	mov	r1, r7
   1f406:	f7fd f81f 	bl	1c448 <__aeabi_dsub>
   1f40a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f40e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f410:	4606      	mov	r6, r0
   1f412:	ea43 030a 	orr.w	r3, r3, sl
   1f416:	460f      	mov	r7, r1
   1f418:	4313      	orrs	r3, r2
   1f41a:	d051      	beq.n	1f4c0 <_strtod_l+0xb88>
   1f41c:	a334      	add	r3, pc, #208	; (adr r3, 1f4f0 <_strtod_l+0xbb8>)
   1f41e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f422:	f7fd fc3b 	bl	1cc9c <__aeabi_dcmplt>
   1f426:	2800      	cmp	r0, #0
   1f428:	f47f acd6 	bne.w	1edd8 <_strtod_l+0x4a0>
   1f42c:	4630      	mov	r0, r6
   1f42e:	4639      	mov	r1, r7
   1f430:	a331      	add	r3, pc, #196	; (adr r3, 1f4f8 <_strtod_l+0xbc0>)
   1f432:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f436:	f7fd fc4f 	bl	1ccd8 <__aeabi_dcmpgt>
   1f43a:	2800      	cmp	r0, #0
   1f43c:	f43f af7d 	beq.w	1f33a <_strtod_l+0xa02>
   1f440:	e4ca      	b.n	1edd8 <_strtod_l+0x4a0>
   1f442:	9b04      	ldr	r3, [sp, #16]
   1f444:	b333      	cbz	r3, 1f494 <_strtod_l+0xb5c>
   1f446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f448:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f44c:	d822      	bhi.n	1f494 <_strtod_l+0xb5c>
   1f44e:	4630      	mov	r0, r6
   1f450:	4639      	mov	r1, r7
   1f452:	a32b      	add	r3, pc, #172	; (adr r3, 1f500 <_strtod_l+0xbc8>)
   1f454:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f458:	f7fd fc2a 	bl	1ccb0 <__aeabi_dcmple>
   1f45c:	b1a0      	cbz	r0, 1f488 <_strtod_l+0xb50>
   1f45e:	4639      	mov	r1, r7
   1f460:	4630      	mov	r0, r6
   1f462:	f7fd fc81 	bl	1cd68 <__aeabi_d2uiz>
   1f466:	2801      	cmp	r0, #1
   1f468:	bf38      	it	cc
   1f46a:	2001      	movcc	r0, #1
   1f46c:	f7fd f92a 	bl	1c6c4 <__aeabi_ui2d>
   1f470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f472:	4606      	mov	r6, r0
   1f474:	460f      	mov	r7, r1
   1f476:	bb03      	cbnz	r3, 1f4ba <_strtod_l+0xb82>
   1f478:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f47c:	9010      	str	r0, [sp, #64]	; 0x40
   1f47e:	9311      	str	r3, [sp, #68]	; 0x44
   1f480:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1f484:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f488:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f48a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f48c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1f490:	1a9b      	subs	r3, r3, r2
   1f492:	9309      	str	r3, [sp, #36]	; 0x24
   1f494:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   1f498:	ec51 0b18 	vmov	r0, r1, d8
   1f49c:	f01c fe94 	bl	3c1c8 <__ulp>
   1f4a0:	4602      	mov	r2, r0
   1f4a2:	460b      	mov	r3, r1
   1f4a4:	4650      	mov	r0, sl
   1f4a6:	4659      	mov	r1, fp
   1f4a8:	f7fd f986 	bl	1c7b8 <__aeabi_dmul>
   1f4ac:	ec53 2b18 	vmov	r2, r3, d8
   1f4b0:	f7fc ffcc 	bl	1c44c <__adddf3>
   1f4b4:	4682      	mov	sl, r0
   1f4b6:	468b      	mov	fp, r1
   1f4b8:	e791      	b.n	1f3de <_strtod_l+0xaa6>
   1f4ba:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1f4be:	e7df      	b.n	1f480 <_strtod_l+0xb48>
   1f4c0:	a311      	add	r3, pc, #68	; (adr r3, 1f508 <_strtod_l+0xbd0>)
   1f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4c6:	f7fd fbe9 	bl	1cc9c <__aeabi_dcmplt>
   1f4ca:	e7b6      	b.n	1f43a <_strtod_l+0xb02>
   1f4cc:	2300      	movs	r3, #0
   1f4ce:	930a      	str	r3, [sp, #40]	; 0x28
   1f4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f4d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f4d4:	6013      	str	r3, [r2, #0]
   1f4d6:	f7ff ba77 	b.w	1e9c8 <_strtod_l+0x90>
   1f4da:	2a65      	cmp	r2, #101	; 0x65
   1f4dc:	f43f ab69 	beq.w	1ebb2 <_strtod_l+0x27a>
   1f4e0:	2a45      	cmp	r2, #69	; 0x45
   1f4e2:	f43f ab66 	beq.w	1ebb2 <_strtod_l+0x27a>
   1f4e6:	2301      	movs	r3, #1
   1f4e8:	f7ff bb9e 	b.w	1ec28 <_strtod_l+0x2f0>
   1f4ec:	f3af 8000 	nop.w
   1f4f0:	94a03595 	.word	0x94a03595
   1f4f4:	3fdfffff 	.word	0x3fdfffff
   1f4f8:	35afe535 	.word	0x35afe535
   1f4fc:	3fe00000 	.word	0x3fe00000
   1f500:	ffc00000 	.word	0xffc00000
   1f504:	41dfffff 	.word	0x41dfffff
   1f508:	94a03595 	.word	0x94a03595
   1f50c:	3fcfffff 	.word	0x3fcfffff
   1f510:	3ff00000 	.word	0x3ff00000
   1f514:	7ff00000 	.word	0x7ff00000
   1f518:	7fe00000 	.word	0x7fe00000
   1f51c:	7c9fffff 	.word	0x7c9fffff
   1f520:	3fe00000 	.word	0x3fe00000
   1f524:	bff00000 	.word	0xbff00000
   1f528:	7fefffff 	.word	0x7fefffff
   1f52c:	00000000 	.word	0x00000000

0001f530 <_dtoa_r>:
   1f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f534:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1f536:	4604      	mov	r4, r0
   1f538:	4616      	mov	r6, r2
   1f53a:	461f      	mov	r7, r3
   1f53c:	4692      	mov	sl, r2
   1f53e:	469b      	mov	fp, r3
   1f540:	ed2d 8b04 	vpush	{d8-d9}
   1f544:	b093      	sub	sp, #76	; 0x4c
   1f546:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1f54a:	b975      	cbnz	r5, 1f56a <_dtoa_r+0x3a>
   1f54c:	2010      	movs	r0, #16
   1f54e:	f01a fe41 	bl	3a1d4 <malloc>
   1f552:	4602      	mov	r2, r0
   1f554:	6260      	str	r0, [r4, #36]	; 0x24
   1f556:	b920      	cbnz	r0, 1f562 <_dtoa_r+0x32>
   1f558:	4ba7      	ldr	r3, [pc, #668]	; (1f7f8 <_dtoa_r+0x2c8>)
   1f55a:	21ea      	movs	r1, #234	; 0xea
   1f55c:	48a7      	ldr	r0, [pc, #668]	; (1f7fc <_dtoa_r+0x2cc>)
   1f55e:	f01a fd5d 	bl	3a01c <__assert_func>
   1f562:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1f566:	6005      	str	r5, [r0, #0]
   1f568:	60c5      	str	r5, [r0, #12]
   1f56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f56c:	6819      	ldr	r1, [r3, #0]
   1f56e:	b151      	cbz	r1, 1f586 <_dtoa_r+0x56>
   1f570:	685a      	ldr	r2, [r3, #4]
   1f572:	2301      	movs	r3, #1
   1f574:	4620      	mov	r0, r4
   1f576:	4093      	lsls	r3, r2
   1f578:	604a      	str	r2, [r1, #4]
   1f57a:	608b      	str	r3, [r1, #8]
   1f57c:	f01c fb58 	bl	3bc30 <_Bfree>
   1f580:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f582:	2200      	movs	r2, #0
   1f584:	601a      	str	r2, [r3, #0]
   1f586:	1e3b      	subs	r3, r7, #0
   1f588:	bfad      	iteet	ge
   1f58a:	2300      	movge	r3, #0
   1f58c:	2201      	movlt	r2, #1
   1f58e:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
   1f592:	f8c8 3000 	strge.w	r3, [r8]
   1f596:	4b9a      	ldr	r3, [pc, #616]	; (1f800 <_dtoa_r+0x2d0>)
   1f598:	bfb8      	it	lt
   1f59a:	f8c8 2000 	strlt.w	r2, [r8]
   1f59e:	ea33 030b 	bics.w	r3, r3, fp
   1f5a2:	d11b      	bne.n	1f5dc <_dtoa_r+0xac>
   1f5a4:	f242 730f 	movw	r3, #9999	; 0x270f
   1f5a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f5aa:	6013      	str	r3, [r2, #0]
   1f5ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f5b0:	4333      	orrs	r3, r6
   1f5b2:	f000 858f 	beq.w	200d4 <_dtoa_r+0xba4>
   1f5b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f5b8:	b963      	cbnz	r3, 1f5d4 <_dtoa_r+0xa4>
   1f5ba:	4b92      	ldr	r3, [pc, #584]	; (1f804 <_dtoa_r+0x2d4>)
   1f5bc:	e022      	b.n	1f604 <_dtoa_r+0xd4>
   1f5be:	4b92      	ldr	r3, [pc, #584]	; (1f808 <_dtoa_r+0x2d8>)
   1f5c0:	9304      	str	r3, [sp, #16]
   1f5c2:	3308      	adds	r3, #8
   1f5c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f5c6:	6013      	str	r3, [r2, #0]
   1f5c8:	9804      	ldr	r0, [sp, #16]
   1f5ca:	b013      	add	sp, #76	; 0x4c
   1f5cc:	ecbd 8b04 	vpop	{d8-d9}
   1f5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5d4:	4b8b      	ldr	r3, [pc, #556]	; (1f804 <_dtoa_r+0x2d4>)
   1f5d6:	9304      	str	r3, [sp, #16]
   1f5d8:	3303      	adds	r3, #3
   1f5da:	e7f3      	b.n	1f5c4 <_dtoa_r+0x94>
   1f5dc:	2200      	movs	r2, #0
   1f5de:	2300      	movs	r3, #0
   1f5e0:	4650      	mov	r0, sl
   1f5e2:	4659      	mov	r1, fp
   1f5e4:	f7fd fb50 	bl	1cc88 <__aeabi_dcmpeq>
   1f5e8:	4680      	mov	r8, r0
   1f5ea:	ec4b ab19 	vmov	d9, sl, fp
   1f5ee:	b158      	cbz	r0, 1f608 <_dtoa_r+0xd8>
   1f5f0:	2301      	movs	r3, #1
   1f5f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f5f4:	6013      	str	r3, [r2, #0]
   1f5f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f5f8:	2b00      	cmp	r3, #0
   1f5fa:	f000 8568 	beq.w	200ce <_dtoa_r+0xb9e>
   1f5fe:	4883      	ldr	r0, [pc, #524]	; (1f80c <_dtoa_r+0x2dc>)
   1f600:	6018      	str	r0, [r3, #0]
   1f602:	1e43      	subs	r3, r0, #1
   1f604:	9304      	str	r3, [sp, #16]
   1f606:	e7df      	b.n	1f5c8 <_dtoa_r+0x98>
   1f608:	ab10      	add	r3, sp, #64	; 0x40
   1f60a:	f3cb 550a 	ubfx	r5, fp, #20, #11
   1f60e:	4652      	mov	r2, sl
   1f610:	4620      	mov	r0, r4
   1f612:	9301      	str	r3, [sp, #4]
   1f614:	ab11      	add	r3, sp, #68	; 0x44
   1f616:	9300      	str	r3, [sp, #0]
   1f618:	465b      	mov	r3, fp
   1f61a:	f01c fe4b 	bl	3c2b4 <__d2b>
   1f61e:	ee08 0a10 	vmov	s16, r0
   1f622:	2d00      	cmp	r5, #0
   1f624:	f000 8082 	beq.w	1f72c <_dtoa_r+0x1fc>
   1f628:	ee19 3a90 	vmov	r3, s19
   1f62c:	4656      	mov	r6, sl
   1f62e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1f632:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1f636:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f63a:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1f63e:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1f642:	2200      	movs	r2, #0
   1f644:	4b72      	ldr	r3, [pc, #456]	; (1f810 <_dtoa_r+0x2e0>)
   1f646:	4630      	mov	r0, r6
   1f648:	4639      	mov	r1, r7
   1f64a:	f7fc fefd 	bl	1c448 <__aeabi_dsub>
   1f64e:	a364      	add	r3, pc, #400	; (adr r3, 1f7e0 <_dtoa_r+0x2b0>)
   1f650:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f654:	f7fd f8b0 	bl	1c7b8 <__aeabi_dmul>
   1f658:	a363      	add	r3, pc, #396	; (adr r3, 1f7e8 <_dtoa_r+0x2b8>)
   1f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f65e:	f7fc fef5 	bl	1c44c <__adddf3>
   1f662:	4606      	mov	r6, r0
   1f664:	460f      	mov	r7, r1
   1f666:	4628      	mov	r0, r5
   1f668:	f7fd f83c 	bl	1c6e4 <__aeabi_i2d>
   1f66c:	a360      	add	r3, pc, #384	; (adr r3, 1f7f0 <_dtoa_r+0x2c0>)
   1f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f672:	f7fd f8a1 	bl	1c7b8 <__aeabi_dmul>
   1f676:	4602      	mov	r2, r0
   1f678:	460b      	mov	r3, r1
   1f67a:	4630      	mov	r0, r6
   1f67c:	4639      	mov	r1, r7
   1f67e:	f7fc fee5 	bl	1c44c <__adddf3>
   1f682:	4606      	mov	r6, r0
   1f684:	460f      	mov	r7, r1
   1f686:	f7fd fb47 	bl	1cd18 <__aeabi_d2iz>
   1f68a:	2200      	movs	r2, #0
   1f68c:	9003      	str	r0, [sp, #12]
   1f68e:	2300      	movs	r3, #0
   1f690:	4630      	mov	r0, r6
   1f692:	4639      	mov	r1, r7
   1f694:	f7fd fb02 	bl	1cc9c <__aeabi_dcmplt>
   1f698:	b150      	cbz	r0, 1f6b0 <_dtoa_r+0x180>
   1f69a:	9803      	ldr	r0, [sp, #12]
   1f69c:	f7fd f822 	bl	1c6e4 <__aeabi_i2d>
   1f6a0:	4632      	mov	r2, r6
   1f6a2:	463b      	mov	r3, r7
   1f6a4:	f7fd faf0 	bl	1cc88 <__aeabi_dcmpeq>
   1f6a8:	b910      	cbnz	r0, 1f6b0 <_dtoa_r+0x180>
   1f6aa:	9b03      	ldr	r3, [sp, #12]
   1f6ac:	3b01      	subs	r3, #1
   1f6ae:	9303      	str	r3, [sp, #12]
   1f6b0:	9b03      	ldr	r3, [sp, #12]
   1f6b2:	2b16      	cmp	r3, #22
   1f6b4:	d859      	bhi.n	1f76a <_dtoa_r+0x23a>
   1f6b6:	9a03      	ldr	r2, [sp, #12]
   1f6b8:	4b56      	ldr	r3, [pc, #344]	; (1f814 <_dtoa_r+0x2e4>)
   1f6ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f6be:	ec51 0b19 	vmov	r0, r1, d9
   1f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f6c6:	f7fd fae9 	bl	1cc9c <__aeabi_dcmplt>
   1f6ca:	2800      	cmp	r0, #0
   1f6cc:	d04f      	beq.n	1f76e <_dtoa_r+0x23e>
   1f6ce:	9b03      	ldr	r3, [sp, #12]
   1f6d0:	3b01      	subs	r3, #1
   1f6d2:	9303      	str	r3, [sp, #12]
   1f6d4:	2300      	movs	r3, #0
   1f6d6:	930c      	str	r3, [sp, #48]	; 0x30
   1f6d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f6da:	1b5d      	subs	r5, r3, r5
   1f6dc:	1e6b      	subs	r3, r5, #1
   1f6de:	9308      	str	r3, [sp, #32]
   1f6e0:	bf49      	itett	mi
   1f6e2:	f1c5 0301 	rsbmi	r3, r5, #1
   1f6e6:	2300      	movpl	r3, #0
   1f6e8:	9307      	strmi	r3, [sp, #28]
   1f6ea:	2300      	movmi	r3, #0
   1f6ec:	bf54      	ite	pl
   1f6ee:	9307      	strpl	r3, [sp, #28]
   1f6f0:	9308      	strmi	r3, [sp, #32]
   1f6f2:	9b03      	ldr	r3, [sp, #12]
   1f6f4:	2b00      	cmp	r3, #0
   1f6f6:	db3c      	blt.n	1f772 <_dtoa_r+0x242>
   1f6f8:	9b08      	ldr	r3, [sp, #32]
   1f6fa:	9a03      	ldr	r2, [sp, #12]
   1f6fc:	4413      	add	r3, r2
   1f6fe:	920b      	str	r2, [sp, #44]	; 0x2c
   1f700:	9308      	str	r3, [sp, #32]
   1f702:	2300      	movs	r3, #0
   1f704:	9309      	str	r3, [sp, #36]	; 0x24
   1f706:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f708:	2b09      	cmp	r3, #9
   1f70a:	f200 8087 	bhi.w	1f81c <_dtoa_r+0x2ec>
   1f70e:	2b05      	cmp	r3, #5
   1f710:	bfc5      	ittet	gt
   1f712:	3b04      	subgt	r3, #4
   1f714:	2500      	movgt	r5, #0
   1f716:	2501      	movle	r5, #1
   1f718:	9320      	strgt	r3, [sp, #128]	; 0x80
   1f71a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f71c:	3b02      	subs	r3, #2
   1f71e:	2b03      	cmp	r3, #3
   1f720:	f200 8087 	bhi.w	1f832 <_dtoa_r+0x302>
   1f724:	e8df f003 	tbb	[pc, r3]
   1f728:	5a393b2e 	.word	0x5a393b2e
   1f72c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
   1f730:	441d      	add	r5, r3
   1f732:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1f736:	2b20      	cmp	r3, #32
   1f738:	bfc6      	itte	gt
   1f73a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1f73e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1f742:	f1c3 0320 	rsble	r3, r3, #32
   1f746:	f105 35ff 	add.w	r5, r5, #4294967295
   1f74a:	bfc5      	ittet	gt
   1f74c:	fa0b f303 	lslgt.w	r3, fp, r3
   1f750:	fa26 f000 	lsrgt.w	r0, r6, r0
   1f754:	fa06 f003 	lslle.w	r0, r6, r3
   1f758:	4318      	orrgt	r0, r3
   1f75a:	f7fc ffb3 	bl	1c6c4 <__aeabi_ui2d>
   1f75e:	2301      	movs	r3, #1
   1f760:	4606      	mov	r6, r0
   1f762:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1f766:	930e      	str	r3, [sp, #56]	; 0x38
   1f768:	e76b      	b.n	1f642 <_dtoa_r+0x112>
   1f76a:	2301      	movs	r3, #1
   1f76c:	e7b3      	b.n	1f6d6 <_dtoa_r+0x1a6>
   1f76e:	900c      	str	r0, [sp, #48]	; 0x30
   1f770:	e7b2      	b.n	1f6d8 <_dtoa_r+0x1a8>
   1f772:	9b07      	ldr	r3, [sp, #28]
   1f774:	9a03      	ldr	r2, [sp, #12]
   1f776:	1a9b      	subs	r3, r3, r2
   1f778:	9307      	str	r3, [sp, #28]
   1f77a:	4253      	negs	r3, r2
   1f77c:	9309      	str	r3, [sp, #36]	; 0x24
   1f77e:	2300      	movs	r3, #0
   1f780:	930b      	str	r3, [sp, #44]	; 0x2c
   1f782:	e7c0      	b.n	1f706 <_dtoa_r+0x1d6>
   1f784:	2300      	movs	r3, #0
   1f786:	930a      	str	r3, [sp, #40]	; 0x28
   1f788:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f78a:	2b00      	cmp	r3, #0
   1f78c:	dc54      	bgt.n	1f838 <_dtoa_r+0x308>
   1f78e:	2301      	movs	r3, #1
   1f790:	461a      	mov	r2, r3
   1f792:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f796:	9221      	str	r2, [sp, #132]	; 0x84
   1f798:	e00c      	b.n	1f7b4 <_dtoa_r+0x284>
   1f79a:	2301      	movs	r3, #1
   1f79c:	e7f3      	b.n	1f786 <_dtoa_r+0x256>
   1f79e:	2300      	movs	r3, #0
   1f7a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1f7a2:	930a      	str	r3, [sp, #40]	; 0x28
   1f7a4:	9b03      	ldr	r3, [sp, #12]
   1f7a6:	4413      	add	r3, r2
   1f7a8:	9305      	str	r3, [sp, #20]
   1f7aa:	3301      	adds	r3, #1
   1f7ac:	2b01      	cmp	r3, #1
   1f7ae:	9306      	str	r3, [sp, #24]
   1f7b0:	bfb8      	it	lt
   1f7b2:	2301      	movlt	r3, #1
   1f7b4:	2200      	movs	r2, #0
   1f7b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1f7b8:	6042      	str	r2, [r0, #4]
   1f7ba:	2204      	movs	r2, #4
   1f7bc:	f102 0614 	add.w	r6, r2, #20
   1f7c0:	6841      	ldr	r1, [r0, #4]
   1f7c2:	429e      	cmp	r6, r3
   1f7c4:	d93c      	bls.n	1f840 <_dtoa_r+0x310>
   1f7c6:	4620      	mov	r0, r4
   1f7c8:	f01c f9f2 	bl	3bbb0 <_Balloc>
   1f7cc:	9004      	str	r0, [sp, #16]
   1f7ce:	2800      	cmp	r0, #0
   1f7d0:	d13a      	bne.n	1f848 <_dtoa_r+0x318>
   1f7d2:	4b11      	ldr	r3, [pc, #68]	; (1f818 <_dtoa_r+0x2e8>)
   1f7d4:	4602      	mov	r2, r0
   1f7d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1f7da:	e6bf      	b.n	1f55c <_dtoa_r+0x2c>
   1f7dc:	2301      	movs	r3, #1
   1f7de:	e7df      	b.n	1f7a0 <_dtoa_r+0x270>
   1f7e0:	636f4361 	.word	0x636f4361
   1f7e4:	3fd287a7 	.word	0x3fd287a7
   1f7e8:	8b60c8b3 	.word	0x8b60c8b3
   1f7ec:	3fc68a28 	.word	0x3fc68a28
   1f7f0:	509f79fb 	.word	0x509f79fb
   1f7f4:	3fd34413 	.word	0x3fd34413
   1f7f8:	0004c77f 	.word	0x0004c77f
   1f7fc:	0004c796 	.word	0x0004c796
   1f800:	7ff00000 	.word	0x7ff00000
   1f804:	0004c77b 	.word	0x0004c77b
   1f808:	0004c772 	.word	0x0004c772
   1f80c:	000463de 	.word	0x000463de
   1f810:	3ff80000 	.word	0x3ff80000
   1f814:	00042ff8 	.word	0x00042ff8
   1f818:	0004c80a 	.word	0x0004c80a
   1f81c:	2501      	movs	r5, #1
   1f81e:	2300      	movs	r3, #0
   1f820:	950a      	str	r5, [sp, #40]	; 0x28
   1f822:	9320      	str	r3, [sp, #128]	; 0x80
   1f824:	f04f 33ff 	mov.w	r3, #4294967295
   1f828:	2200      	movs	r2, #0
   1f82a:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f82e:	2312      	movs	r3, #18
   1f830:	e7b1      	b.n	1f796 <_dtoa_r+0x266>
   1f832:	2301      	movs	r3, #1
   1f834:	930a      	str	r3, [sp, #40]	; 0x28
   1f836:	e7f5      	b.n	1f824 <_dtoa_r+0x2f4>
   1f838:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f83a:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f83e:	e7b9      	b.n	1f7b4 <_dtoa_r+0x284>
   1f840:	3101      	adds	r1, #1
   1f842:	0052      	lsls	r2, r2, #1
   1f844:	6041      	str	r1, [r0, #4]
   1f846:	e7b9      	b.n	1f7bc <_dtoa_r+0x28c>
   1f848:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f84a:	9a04      	ldr	r2, [sp, #16]
   1f84c:	601a      	str	r2, [r3, #0]
   1f84e:	9b06      	ldr	r3, [sp, #24]
   1f850:	2b0e      	cmp	r3, #14
   1f852:	f200 809d 	bhi.w	1f990 <_dtoa_r+0x460>
   1f856:	2d00      	cmp	r5, #0
   1f858:	f000 809a 	beq.w	1f990 <_dtoa_r+0x460>
   1f85c:	9b03      	ldr	r3, [sp, #12]
   1f85e:	2b00      	cmp	r3, #0
   1f860:	dd32      	ble.n	1f8c8 <_dtoa_r+0x398>
   1f862:	f003 030f 	and.w	r3, r3, #15
   1f866:	4ab6      	ldr	r2, [pc, #728]	; (1fb40 <_dtoa_r+0x610>)
   1f868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f86c:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f870:	9b03      	ldr	r3, [sp, #12]
   1f872:	05d8      	lsls	r0, r3, #23
   1f874:	ea4f 1723 	mov.w	r7, r3, asr #4
   1f878:	d516      	bpl.n	1f8a8 <_dtoa_r+0x378>
   1f87a:	4bb2      	ldr	r3, [pc, #712]	; (1fb44 <_dtoa_r+0x614>)
   1f87c:	f007 070f 	and.w	r7, r7, #15
   1f880:	2503      	movs	r5, #3
   1f882:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1f886:	ec51 0b19 	vmov	r0, r1, d9
   1f88a:	f7fd f8bf 	bl	1ca0c <__aeabi_ddiv>
   1f88e:	4682      	mov	sl, r0
   1f890:	468b      	mov	fp, r1
   1f892:	4eac      	ldr	r6, [pc, #688]	; (1fb44 <_dtoa_r+0x614>)
   1f894:	b957      	cbnz	r7, 1f8ac <_dtoa_r+0x37c>
   1f896:	4642      	mov	r2, r8
   1f898:	464b      	mov	r3, r9
   1f89a:	4650      	mov	r0, sl
   1f89c:	4659      	mov	r1, fp
   1f89e:	f7fd f8b5 	bl	1ca0c <__aeabi_ddiv>
   1f8a2:	4682      	mov	sl, r0
   1f8a4:	468b      	mov	fp, r1
   1f8a6:	e028      	b.n	1f8fa <_dtoa_r+0x3ca>
   1f8a8:	2502      	movs	r5, #2
   1f8aa:	e7f2      	b.n	1f892 <_dtoa_r+0x362>
   1f8ac:	07f9      	lsls	r1, r7, #31
   1f8ae:	d508      	bpl.n	1f8c2 <_dtoa_r+0x392>
   1f8b0:	4640      	mov	r0, r8
   1f8b2:	4649      	mov	r1, r9
   1f8b4:	3501      	adds	r5, #1
   1f8b6:	e9d6 2300 	ldrd	r2, r3, [r6]
   1f8ba:	f7fc ff7d 	bl	1c7b8 <__aeabi_dmul>
   1f8be:	4680      	mov	r8, r0
   1f8c0:	4689      	mov	r9, r1
   1f8c2:	107f      	asrs	r7, r7, #1
   1f8c4:	3608      	adds	r6, #8
   1f8c6:	e7e5      	b.n	1f894 <_dtoa_r+0x364>
   1f8c8:	f000 809b 	beq.w	1fa02 <_dtoa_r+0x4d2>
   1f8cc:	9b03      	ldr	r3, [sp, #12]
   1f8ce:	2502      	movs	r5, #2
   1f8d0:	4f9c      	ldr	r7, [pc, #624]	; (1fb44 <_dtoa_r+0x614>)
   1f8d2:	425e      	negs	r6, r3
   1f8d4:	4b9a      	ldr	r3, [pc, #616]	; (1fb40 <_dtoa_r+0x610>)
   1f8d6:	f006 020f 	and.w	r2, r6, #15
   1f8da:	1136      	asrs	r6, r6, #4
   1f8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f8e0:	ec51 0b19 	vmov	r0, r1, d9
   1f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f8e8:	f7fc ff66 	bl	1c7b8 <__aeabi_dmul>
   1f8ec:	2300      	movs	r3, #0
   1f8ee:	4682      	mov	sl, r0
   1f8f0:	468b      	mov	fp, r1
   1f8f2:	2e00      	cmp	r6, #0
   1f8f4:	d17a      	bne.n	1f9ec <_dtoa_r+0x4bc>
   1f8f6:	2b00      	cmp	r3, #0
   1f8f8:	d1d3      	bne.n	1f8a2 <_dtoa_r+0x372>
   1f8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f8fc:	2b00      	cmp	r3, #0
   1f8fe:	f000 8082 	beq.w	1fa06 <_dtoa_r+0x4d6>
   1f902:	2200      	movs	r2, #0
   1f904:	4b90      	ldr	r3, [pc, #576]	; (1fb48 <_dtoa_r+0x618>)
   1f906:	4650      	mov	r0, sl
   1f908:	4659      	mov	r1, fp
   1f90a:	f7fd f9c7 	bl	1cc9c <__aeabi_dcmplt>
   1f90e:	2800      	cmp	r0, #0
   1f910:	d079      	beq.n	1fa06 <_dtoa_r+0x4d6>
   1f912:	9b06      	ldr	r3, [sp, #24]
   1f914:	2b00      	cmp	r3, #0
   1f916:	d076      	beq.n	1fa06 <_dtoa_r+0x4d6>
   1f918:	9b05      	ldr	r3, [sp, #20]
   1f91a:	2b00      	cmp	r3, #0
   1f91c:	dd36      	ble.n	1f98c <_dtoa_r+0x45c>
   1f91e:	9b03      	ldr	r3, [sp, #12]
   1f920:	4650      	mov	r0, sl
   1f922:	4659      	mov	r1, fp
   1f924:	2200      	movs	r2, #0
   1f926:	1e5f      	subs	r7, r3, #1
   1f928:	4b88      	ldr	r3, [pc, #544]	; (1fb4c <_dtoa_r+0x61c>)
   1f92a:	f7fc ff45 	bl	1c7b8 <__aeabi_dmul>
   1f92e:	3501      	adds	r5, #1
   1f930:	4682      	mov	sl, r0
   1f932:	468b      	mov	fp, r1
   1f934:	9e05      	ldr	r6, [sp, #20]
   1f936:	4628      	mov	r0, r5
   1f938:	46d0      	mov	r8, sl
   1f93a:	f7fc fed3 	bl	1c6e4 <__aeabi_i2d>
   1f93e:	4652      	mov	r2, sl
   1f940:	465b      	mov	r3, fp
   1f942:	46d9      	mov	r9, fp
   1f944:	f7fc ff38 	bl	1c7b8 <__aeabi_dmul>
   1f948:	2200      	movs	r2, #0
   1f94a:	4b81      	ldr	r3, [pc, #516]	; (1fb50 <_dtoa_r+0x620>)
   1f94c:	f7fc fd7e 	bl	1c44c <__adddf3>
   1f950:	4682      	mov	sl, r0
   1f952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1f956:	2e00      	cmp	r6, #0
   1f958:	d158      	bne.n	1fa0c <_dtoa_r+0x4dc>
   1f95a:	2200      	movs	r2, #0
   1f95c:	4b7d      	ldr	r3, [pc, #500]	; (1fb54 <_dtoa_r+0x624>)
   1f95e:	4640      	mov	r0, r8
   1f960:	4649      	mov	r1, r9
   1f962:	f7fc fd71 	bl	1c448 <__aeabi_dsub>
   1f966:	4652      	mov	r2, sl
   1f968:	465b      	mov	r3, fp
   1f96a:	4680      	mov	r8, r0
   1f96c:	4689      	mov	r9, r1
   1f96e:	f7fd f9b3 	bl	1ccd8 <__aeabi_dcmpgt>
   1f972:	2800      	cmp	r0, #0
   1f974:	f040 8293 	bne.w	1fe9e <_dtoa_r+0x96e>
   1f978:	4652      	mov	r2, sl
   1f97a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1f97e:	4640      	mov	r0, r8
   1f980:	4649      	mov	r1, r9
   1f982:	f7fd f98b 	bl	1cc9c <__aeabi_dcmplt>
   1f986:	2800      	cmp	r0, #0
   1f988:	f040 8287 	bne.w	1fe9a <_dtoa_r+0x96a>
   1f98c:	ec5b ab19 	vmov	sl, fp, d9
   1f990:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f992:	2b00      	cmp	r3, #0
   1f994:	f2c0 8148 	blt.w	1fc28 <_dtoa_r+0x6f8>
   1f998:	9a03      	ldr	r2, [sp, #12]
   1f99a:	2a0e      	cmp	r2, #14
   1f99c:	f300 8144 	bgt.w	1fc28 <_dtoa_r+0x6f8>
   1f9a0:	4b67      	ldr	r3, [pc, #412]	; (1fb40 <_dtoa_r+0x610>)
   1f9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f9a6:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f9ac:	2b00      	cmp	r3, #0
   1f9ae:	f280 80d5 	bge.w	1fb5c <_dtoa_r+0x62c>
   1f9b2:	9b06      	ldr	r3, [sp, #24]
   1f9b4:	2b00      	cmp	r3, #0
   1f9b6:	f300 80d1 	bgt.w	1fb5c <_dtoa_r+0x62c>
   1f9ba:	f040 826d 	bne.w	1fe98 <_dtoa_r+0x968>
   1f9be:	2200      	movs	r2, #0
   1f9c0:	4b64      	ldr	r3, [pc, #400]	; (1fb54 <_dtoa_r+0x624>)
   1f9c2:	4640      	mov	r0, r8
   1f9c4:	4649      	mov	r1, r9
   1f9c6:	f7fc fef7 	bl	1c7b8 <__aeabi_dmul>
   1f9ca:	4652      	mov	r2, sl
   1f9cc:	465b      	mov	r3, fp
   1f9ce:	f7fd f979 	bl	1ccc4 <__aeabi_dcmpge>
   1f9d2:	9e06      	ldr	r6, [sp, #24]
   1f9d4:	4637      	mov	r7, r6
   1f9d6:	2800      	cmp	r0, #0
   1f9d8:	f040 8243 	bne.w	1fe62 <_dtoa_r+0x932>
   1f9dc:	2331      	movs	r3, #49	; 0x31
   1f9de:	9d04      	ldr	r5, [sp, #16]
   1f9e0:	f805 3b01 	strb.w	r3, [r5], #1
   1f9e4:	9b03      	ldr	r3, [sp, #12]
   1f9e6:	3301      	adds	r3, #1
   1f9e8:	9303      	str	r3, [sp, #12]
   1f9ea:	e23e      	b.n	1fe6a <_dtoa_r+0x93a>
   1f9ec:	07f2      	lsls	r2, r6, #31
   1f9ee:	d505      	bpl.n	1f9fc <_dtoa_r+0x4cc>
   1f9f0:	3501      	adds	r5, #1
   1f9f2:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f9f6:	f7fc fedf 	bl	1c7b8 <__aeabi_dmul>
   1f9fa:	2301      	movs	r3, #1
   1f9fc:	1076      	asrs	r6, r6, #1
   1f9fe:	3708      	adds	r7, #8
   1fa00:	e777      	b.n	1f8f2 <_dtoa_r+0x3c2>
   1fa02:	2502      	movs	r5, #2
   1fa04:	e779      	b.n	1f8fa <_dtoa_r+0x3ca>
   1fa06:	9f03      	ldr	r7, [sp, #12]
   1fa08:	9e06      	ldr	r6, [sp, #24]
   1fa0a:	e794      	b.n	1f936 <_dtoa_r+0x406>
   1fa0c:	9904      	ldr	r1, [sp, #16]
   1fa0e:	4b4c      	ldr	r3, [pc, #304]	; (1fb40 <_dtoa_r+0x610>)
   1fa10:	4431      	add	r1, r6
   1fa12:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1fa16:	910d      	str	r1, [sp, #52]	; 0x34
   1fa18:	990a      	ldr	r1, [sp, #40]	; 0x28
   1fa1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1fa1e:	2900      	cmp	r1, #0
   1fa20:	d043      	beq.n	1faaa <_dtoa_r+0x57a>
   1fa22:	2000      	movs	r0, #0
   1fa24:	494c      	ldr	r1, [pc, #304]	; (1fb58 <_dtoa_r+0x628>)
   1fa26:	f7fc fff1 	bl	1ca0c <__aeabi_ddiv>
   1fa2a:	4652      	mov	r2, sl
   1fa2c:	465b      	mov	r3, fp
   1fa2e:	f7fc fd0b 	bl	1c448 <__aeabi_dsub>
   1fa32:	9d04      	ldr	r5, [sp, #16]
   1fa34:	4682      	mov	sl, r0
   1fa36:	468b      	mov	fp, r1
   1fa38:	4649      	mov	r1, r9
   1fa3a:	4640      	mov	r0, r8
   1fa3c:	f7fd f96c 	bl	1cd18 <__aeabi_d2iz>
   1fa40:	4606      	mov	r6, r0
   1fa42:	f7fc fe4f 	bl	1c6e4 <__aeabi_i2d>
   1fa46:	4602      	mov	r2, r0
   1fa48:	3630      	adds	r6, #48	; 0x30
   1fa4a:	460b      	mov	r3, r1
   1fa4c:	4640      	mov	r0, r8
   1fa4e:	4649      	mov	r1, r9
   1fa50:	f7fc fcfa 	bl	1c448 <__aeabi_dsub>
   1fa54:	4652      	mov	r2, sl
   1fa56:	465b      	mov	r3, fp
   1fa58:	f805 6b01 	strb.w	r6, [r5], #1
   1fa5c:	4680      	mov	r8, r0
   1fa5e:	4689      	mov	r9, r1
   1fa60:	f7fd f91c 	bl	1cc9c <__aeabi_dcmplt>
   1fa64:	2800      	cmp	r0, #0
   1fa66:	d163      	bne.n	1fb30 <_dtoa_r+0x600>
   1fa68:	4642      	mov	r2, r8
   1fa6a:	464b      	mov	r3, r9
   1fa6c:	2000      	movs	r0, #0
   1fa6e:	4936      	ldr	r1, [pc, #216]	; (1fb48 <_dtoa_r+0x618>)
   1fa70:	f7fc fcea 	bl	1c448 <__aeabi_dsub>
   1fa74:	4652      	mov	r2, sl
   1fa76:	465b      	mov	r3, fp
   1fa78:	f7fd f910 	bl	1cc9c <__aeabi_dcmplt>
   1fa7c:	2800      	cmp	r0, #0
   1fa7e:	f040 80b5 	bne.w	1fbec <_dtoa_r+0x6bc>
   1fa82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fa84:	429d      	cmp	r5, r3
   1fa86:	d081      	beq.n	1f98c <_dtoa_r+0x45c>
   1fa88:	2200      	movs	r2, #0
   1fa8a:	4b30      	ldr	r3, [pc, #192]	; (1fb4c <_dtoa_r+0x61c>)
   1fa8c:	4650      	mov	r0, sl
   1fa8e:	4659      	mov	r1, fp
   1fa90:	f7fc fe92 	bl	1c7b8 <__aeabi_dmul>
   1fa94:	2200      	movs	r2, #0
   1fa96:	4682      	mov	sl, r0
   1fa98:	468b      	mov	fp, r1
   1fa9a:	4640      	mov	r0, r8
   1fa9c:	4649      	mov	r1, r9
   1fa9e:	4b2b      	ldr	r3, [pc, #172]	; (1fb4c <_dtoa_r+0x61c>)
   1faa0:	f7fc fe8a 	bl	1c7b8 <__aeabi_dmul>
   1faa4:	4680      	mov	r8, r0
   1faa6:	4689      	mov	r9, r1
   1faa8:	e7c6      	b.n	1fa38 <_dtoa_r+0x508>
   1faaa:	4650      	mov	r0, sl
   1faac:	4659      	mov	r1, fp
   1faae:	f7fc fe83 	bl	1c7b8 <__aeabi_dmul>
   1fab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fab4:	4682      	mov	sl, r0
   1fab6:	468b      	mov	fp, r1
   1fab8:	9d04      	ldr	r5, [sp, #16]
   1faba:	930f      	str	r3, [sp, #60]	; 0x3c
   1fabc:	4649      	mov	r1, r9
   1fabe:	4640      	mov	r0, r8
   1fac0:	f7fd f92a 	bl	1cd18 <__aeabi_d2iz>
   1fac4:	4606      	mov	r6, r0
   1fac6:	f7fc fe0d 	bl	1c6e4 <__aeabi_i2d>
   1faca:	4602      	mov	r2, r0
   1facc:	460b      	mov	r3, r1
   1face:	4640      	mov	r0, r8
   1fad0:	4649      	mov	r1, r9
   1fad2:	3630      	adds	r6, #48	; 0x30
   1fad4:	f7fc fcb8 	bl	1c448 <__aeabi_dsub>
   1fad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fada:	f805 6b01 	strb.w	r6, [r5], #1
   1fade:	4680      	mov	r8, r0
   1fae0:	429d      	cmp	r5, r3
   1fae2:	4689      	mov	r9, r1
   1fae4:	f04f 0200 	mov.w	r2, #0
   1fae8:	d124      	bne.n	1fb34 <_dtoa_r+0x604>
   1faea:	4b1b      	ldr	r3, [pc, #108]	; (1fb58 <_dtoa_r+0x628>)
   1faec:	4650      	mov	r0, sl
   1faee:	4659      	mov	r1, fp
   1faf0:	f7fc fcac 	bl	1c44c <__adddf3>
   1faf4:	4602      	mov	r2, r0
   1faf6:	460b      	mov	r3, r1
   1faf8:	4640      	mov	r0, r8
   1fafa:	4649      	mov	r1, r9
   1fafc:	f7fd f8ec 	bl	1ccd8 <__aeabi_dcmpgt>
   1fb00:	2800      	cmp	r0, #0
   1fb02:	d173      	bne.n	1fbec <_dtoa_r+0x6bc>
   1fb04:	4652      	mov	r2, sl
   1fb06:	465b      	mov	r3, fp
   1fb08:	2000      	movs	r0, #0
   1fb0a:	4913      	ldr	r1, [pc, #76]	; (1fb58 <_dtoa_r+0x628>)
   1fb0c:	f7fc fc9c 	bl	1c448 <__aeabi_dsub>
   1fb10:	4602      	mov	r2, r0
   1fb12:	460b      	mov	r3, r1
   1fb14:	4640      	mov	r0, r8
   1fb16:	4649      	mov	r1, r9
   1fb18:	f7fd f8c0 	bl	1cc9c <__aeabi_dcmplt>
   1fb1c:	2800      	cmp	r0, #0
   1fb1e:	f43f af35 	beq.w	1f98c <_dtoa_r+0x45c>
   1fb22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1fb24:	1e6b      	subs	r3, r5, #1
   1fb26:	930f      	str	r3, [sp, #60]	; 0x3c
   1fb28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1fb2c:	2b30      	cmp	r3, #48	; 0x30
   1fb2e:	d0f8      	beq.n	1fb22 <_dtoa_r+0x5f2>
   1fb30:	9703      	str	r7, [sp, #12]
   1fb32:	e049      	b.n	1fbc8 <_dtoa_r+0x698>
   1fb34:	4b05      	ldr	r3, [pc, #20]	; (1fb4c <_dtoa_r+0x61c>)
   1fb36:	f7fc fe3f 	bl	1c7b8 <__aeabi_dmul>
   1fb3a:	4680      	mov	r8, r0
   1fb3c:	4689      	mov	r9, r1
   1fb3e:	e7bd      	b.n	1fabc <_dtoa_r+0x58c>
   1fb40:	00042ff8 	.word	0x00042ff8
   1fb44:	00042fd0 	.word	0x00042fd0
   1fb48:	3ff00000 	.word	0x3ff00000
   1fb4c:	40240000 	.word	0x40240000
   1fb50:	401c0000 	.word	0x401c0000
   1fb54:	40140000 	.word	0x40140000
   1fb58:	3fe00000 	.word	0x3fe00000
   1fb5c:	4656      	mov	r6, sl
   1fb5e:	465f      	mov	r7, fp
   1fb60:	9d04      	ldr	r5, [sp, #16]
   1fb62:	4642      	mov	r2, r8
   1fb64:	464b      	mov	r3, r9
   1fb66:	4630      	mov	r0, r6
   1fb68:	4639      	mov	r1, r7
   1fb6a:	f7fc ff4f 	bl	1ca0c <__aeabi_ddiv>
   1fb6e:	f7fd f8d3 	bl	1cd18 <__aeabi_d2iz>
   1fb72:	4682      	mov	sl, r0
   1fb74:	f7fc fdb6 	bl	1c6e4 <__aeabi_i2d>
   1fb78:	4642      	mov	r2, r8
   1fb7a:	464b      	mov	r3, r9
   1fb7c:	f7fc fe1c 	bl	1c7b8 <__aeabi_dmul>
   1fb80:	4602      	mov	r2, r0
   1fb82:	4630      	mov	r0, r6
   1fb84:	f10a 0630 	add.w	r6, sl, #48	; 0x30
   1fb88:	460b      	mov	r3, r1
   1fb8a:	4639      	mov	r1, r7
   1fb8c:	f7fc fc5c 	bl	1c448 <__aeabi_dsub>
   1fb90:	f805 6b01 	strb.w	r6, [r5], #1
   1fb94:	9e04      	ldr	r6, [sp, #16]
   1fb96:	4602      	mov	r2, r0
   1fb98:	9f06      	ldr	r7, [sp, #24]
   1fb9a:	460b      	mov	r3, r1
   1fb9c:	1bae      	subs	r6, r5, r6
   1fb9e:	42b7      	cmp	r7, r6
   1fba0:	d135      	bne.n	1fc0e <_dtoa_r+0x6de>
   1fba2:	f7fc fc53 	bl	1c44c <__adddf3>
   1fba6:	4642      	mov	r2, r8
   1fba8:	464b      	mov	r3, r9
   1fbaa:	4606      	mov	r6, r0
   1fbac:	460f      	mov	r7, r1
   1fbae:	f7fd f893 	bl	1ccd8 <__aeabi_dcmpgt>
   1fbb2:	b9d0      	cbnz	r0, 1fbea <_dtoa_r+0x6ba>
   1fbb4:	4642      	mov	r2, r8
   1fbb6:	464b      	mov	r3, r9
   1fbb8:	4630      	mov	r0, r6
   1fbba:	4639      	mov	r1, r7
   1fbbc:	f7fd f864 	bl	1cc88 <__aeabi_dcmpeq>
   1fbc0:	b110      	cbz	r0, 1fbc8 <_dtoa_r+0x698>
   1fbc2:	f01a 0f01 	tst.w	sl, #1
   1fbc6:	d110      	bne.n	1fbea <_dtoa_r+0x6ba>
   1fbc8:	4620      	mov	r0, r4
   1fbca:	ee18 1a10 	vmov	r1, s16
   1fbce:	f01c f82f 	bl	3bc30 <_Bfree>
   1fbd2:	2300      	movs	r3, #0
   1fbd4:	9803      	ldr	r0, [sp, #12]
   1fbd6:	702b      	strb	r3, [r5, #0]
   1fbd8:	3001      	adds	r0, #1
   1fbda:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1fbdc:	6018      	str	r0, [r3, #0]
   1fbde:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbe0:	2b00      	cmp	r3, #0
   1fbe2:	f43f acf1 	beq.w	1f5c8 <_dtoa_r+0x98>
   1fbe6:	601d      	str	r5, [r3, #0]
   1fbe8:	e4ee      	b.n	1f5c8 <_dtoa_r+0x98>
   1fbea:	9f03      	ldr	r7, [sp, #12]
   1fbec:	462b      	mov	r3, r5
   1fbee:	461d      	mov	r5, r3
   1fbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fbf4:	2a39      	cmp	r2, #57	; 0x39
   1fbf6:	d106      	bne.n	1fc06 <_dtoa_r+0x6d6>
   1fbf8:	9a04      	ldr	r2, [sp, #16]
   1fbfa:	429a      	cmp	r2, r3
   1fbfc:	d1f7      	bne.n	1fbee <_dtoa_r+0x6be>
   1fbfe:	2230      	movs	r2, #48	; 0x30
   1fc00:	9904      	ldr	r1, [sp, #16]
   1fc02:	3701      	adds	r7, #1
   1fc04:	700a      	strb	r2, [r1, #0]
   1fc06:	781a      	ldrb	r2, [r3, #0]
   1fc08:	3201      	adds	r2, #1
   1fc0a:	701a      	strb	r2, [r3, #0]
   1fc0c:	e790      	b.n	1fb30 <_dtoa_r+0x600>
   1fc0e:	2200      	movs	r2, #0
   1fc10:	4ba4      	ldr	r3, [pc, #656]	; (1fea4 <_dtoa_r+0x974>)
   1fc12:	f7fc fdd1 	bl	1c7b8 <__aeabi_dmul>
   1fc16:	2200      	movs	r2, #0
   1fc18:	2300      	movs	r3, #0
   1fc1a:	4606      	mov	r6, r0
   1fc1c:	460f      	mov	r7, r1
   1fc1e:	f7fd f833 	bl	1cc88 <__aeabi_dcmpeq>
   1fc22:	2800      	cmp	r0, #0
   1fc24:	d09d      	beq.n	1fb62 <_dtoa_r+0x632>
   1fc26:	e7cf      	b.n	1fbc8 <_dtoa_r+0x698>
   1fc28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fc2a:	2a00      	cmp	r2, #0
   1fc2c:	f000 80d5 	beq.w	1fdda <_dtoa_r+0x8aa>
   1fc30:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1fc32:	2a01      	cmp	r2, #1
   1fc34:	f300 80b9 	bgt.w	1fdaa <_dtoa_r+0x87a>
   1fc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fc3a:	2a00      	cmp	r2, #0
   1fc3c:	f000 80b1 	beq.w	1fda2 <_dtoa_r+0x872>
   1fc40:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1fc44:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1fc46:	9d07      	ldr	r5, [sp, #28]
   1fc48:	9a07      	ldr	r2, [sp, #28]
   1fc4a:	2101      	movs	r1, #1
   1fc4c:	4620      	mov	r0, r4
   1fc4e:	441a      	add	r2, r3
   1fc50:	9207      	str	r2, [sp, #28]
   1fc52:	9a08      	ldr	r2, [sp, #32]
   1fc54:	441a      	add	r2, r3
   1fc56:	9208      	str	r2, [sp, #32]
   1fc58:	f01c f89e 	bl	3bd98 <__i2b>
   1fc5c:	4607      	mov	r7, r0
   1fc5e:	2d00      	cmp	r5, #0
   1fc60:	dd0c      	ble.n	1fc7c <_dtoa_r+0x74c>
   1fc62:	9b08      	ldr	r3, [sp, #32]
   1fc64:	2b00      	cmp	r3, #0
   1fc66:	dd09      	ble.n	1fc7c <_dtoa_r+0x74c>
   1fc68:	42ab      	cmp	r3, r5
   1fc6a:	9a07      	ldr	r2, [sp, #28]
   1fc6c:	bfa8      	it	ge
   1fc6e:	462b      	movge	r3, r5
   1fc70:	1ad2      	subs	r2, r2, r3
   1fc72:	1aed      	subs	r5, r5, r3
   1fc74:	9207      	str	r2, [sp, #28]
   1fc76:	9a08      	ldr	r2, [sp, #32]
   1fc78:	1ad3      	subs	r3, r2, r3
   1fc7a:	9308      	str	r3, [sp, #32]
   1fc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc7e:	b31b      	cbz	r3, 1fcc8 <_dtoa_r+0x798>
   1fc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fc82:	2b00      	cmp	r3, #0
   1fc84:	f000 80ad 	beq.w	1fde2 <_dtoa_r+0x8b2>
   1fc88:	2e00      	cmp	r6, #0
   1fc8a:	dd13      	ble.n	1fcb4 <_dtoa_r+0x784>
   1fc8c:	4639      	mov	r1, r7
   1fc8e:	4632      	mov	r2, r6
   1fc90:	4620      	mov	r0, r4
   1fc92:	f01c f93f 	bl	3bf14 <__pow5mult>
   1fc96:	ee18 2a10 	vmov	r2, s16
   1fc9a:	4601      	mov	r1, r0
   1fc9c:	4607      	mov	r7, r0
   1fc9e:	4620      	mov	r0, r4
   1fca0:	f01c f890 	bl	3bdc4 <__multiply>
   1fca4:	4680      	mov	r8, r0
   1fca6:	ee18 1a10 	vmov	r1, s16
   1fcaa:	4620      	mov	r0, r4
   1fcac:	ee08 8a10 	vmov	s16, r8
   1fcb0:	f01b ffbe 	bl	3bc30 <_Bfree>
   1fcb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcb6:	1b9a      	subs	r2, r3, r6
   1fcb8:	d006      	beq.n	1fcc8 <_dtoa_r+0x798>
   1fcba:	ee18 1a10 	vmov	r1, s16
   1fcbe:	4620      	mov	r0, r4
   1fcc0:	f01c f928 	bl	3bf14 <__pow5mult>
   1fcc4:	ee08 0a10 	vmov	s16, r0
   1fcc8:	2101      	movs	r1, #1
   1fcca:	4620      	mov	r0, r4
   1fccc:	f01c f864 	bl	3bd98 <__i2b>
   1fcd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fcd2:	4606      	mov	r6, r0
   1fcd4:	2b00      	cmp	r3, #0
   1fcd6:	f340 8086 	ble.w	1fde6 <_dtoa_r+0x8b6>
   1fcda:	461a      	mov	r2, r3
   1fcdc:	4601      	mov	r1, r0
   1fcde:	4620      	mov	r0, r4
   1fce0:	f01c f918 	bl	3bf14 <__pow5mult>
   1fce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fce6:	4606      	mov	r6, r0
   1fce8:	2b01      	cmp	r3, #1
   1fcea:	dd7f      	ble.n	1fdec <_dtoa_r+0x8bc>
   1fcec:	f04f 0800 	mov.w	r8, #0
   1fcf0:	6933      	ldr	r3, [r6, #16]
   1fcf2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1fcf6:	6918      	ldr	r0, [r3, #16]
   1fcf8:	f022 fbf6 	bl	424e8 <__hi0bits>
   1fcfc:	f1c0 0020 	rsb	r0, r0, #32
   1fd00:	9b08      	ldr	r3, [sp, #32]
   1fd02:	4418      	add	r0, r3
   1fd04:	f010 001f 	ands.w	r0, r0, #31
   1fd08:	f000 8091 	beq.w	1fe2e <_dtoa_r+0x8fe>
   1fd0c:	f1c0 0320 	rsb	r3, r0, #32
   1fd10:	2b04      	cmp	r3, #4
   1fd12:	f340 8089 	ble.w	1fe28 <_dtoa_r+0x8f8>
   1fd16:	f1c0 001c 	rsb	r0, r0, #28
   1fd1a:	9b07      	ldr	r3, [sp, #28]
   1fd1c:	4405      	add	r5, r0
   1fd1e:	4403      	add	r3, r0
   1fd20:	9307      	str	r3, [sp, #28]
   1fd22:	9b08      	ldr	r3, [sp, #32]
   1fd24:	4403      	add	r3, r0
   1fd26:	9308      	str	r3, [sp, #32]
   1fd28:	9b07      	ldr	r3, [sp, #28]
   1fd2a:	2b00      	cmp	r3, #0
   1fd2c:	dd07      	ble.n	1fd3e <_dtoa_r+0x80e>
   1fd2e:	ee18 1a10 	vmov	r1, s16
   1fd32:	461a      	mov	r2, r3
   1fd34:	4620      	mov	r0, r4
   1fd36:	f01c f947 	bl	3bfc8 <__lshift>
   1fd3a:	ee08 0a10 	vmov	s16, r0
   1fd3e:	9b08      	ldr	r3, [sp, #32]
   1fd40:	2b00      	cmp	r3, #0
   1fd42:	dd05      	ble.n	1fd50 <_dtoa_r+0x820>
   1fd44:	4631      	mov	r1, r6
   1fd46:	461a      	mov	r2, r3
   1fd48:	4620      	mov	r0, r4
   1fd4a:	f01c f93d 	bl	3bfc8 <__lshift>
   1fd4e:	4606      	mov	r6, r0
   1fd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fd52:	2b00      	cmp	r3, #0
   1fd54:	d06d      	beq.n	1fe32 <_dtoa_r+0x902>
   1fd56:	4631      	mov	r1, r6
   1fd58:	ee18 0a10 	vmov	r0, s16
   1fd5c:	f022 fc13 	bl	42586 <__mcmp>
   1fd60:	2800      	cmp	r0, #0
   1fd62:	da66      	bge.n	1fe32 <_dtoa_r+0x902>
   1fd64:	9b03      	ldr	r3, [sp, #12]
   1fd66:	ee18 1a10 	vmov	r1, s16
   1fd6a:	220a      	movs	r2, #10
   1fd6c:	4620      	mov	r0, r4
   1fd6e:	3b01      	subs	r3, #1
   1fd70:	9303      	str	r3, [sp, #12]
   1fd72:	2300      	movs	r3, #0
   1fd74:	f01b ff7e 	bl	3bc74 <__multadd>
   1fd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fd7a:	ee08 0a10 	vmov	s16, r0
   1fd7e:	2b00      	cmp	r3, #0
   1fd80:	f000 81af 	beq.w	200e2 <_dtoa_r+0xbb2>
   1fd84:	2300      	movs	r3, #0
   1fd86:	4639      	mov	r1, r7
   1fd88:	220a      	movs	r2, #10
   1fd8a:	4620      	mov	r0, r4
   1fd8c:	f01b ff72 	bl	3bc74 <__multadd>
   1fd90:	9b05      	ldr	r3, [sp, #20]
   1fd92:	4607      	mov	r7, r0
   1fd94:	2b00      	cmp	r3, #0
   1fd96:	f300 808d 	bgt.w	1feb4 <_dtoa_r+0x984>
   1fd9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fd9c:	2b02      	cmp	r3, #2
   1fd9e:	dc50      	bgt.n	1fe42 <_dtoa_r+0x912>
   1fda0:	e088      	b.n	1feb4 <_dtoa_r+0x984>
   1fda2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1fda4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1fda8:	e74c      	b.n	1fc44 <_dtoa_r+0x714>
   1fdaa:	9b06      	ldr	r3, [sp, #24]
   1fdac:	1e5e      	subs	r6, r3, #1
   1fdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fdb0:	42b3      	cmp	r3, r6
   1fdb2:	bfb7      	itett	lt
   1fdb4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1fdb6:	1b9e      	subge	r6, r3, r6
   1fdb8:	9609      	strlt	r6, [sp, #36]	; 0x24
   1fdba:	1af2      	sublt	r2, r6, r3
   1fdbc:	bfbf      	itttt	lt
   1fdbe:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
   1fdc0:	2600      	movlt	r6, #0
   1fdc2:	189b      	addlt	r3, r3, r2
   1fdc4:	930b      	strlt	r3, [sp, #44]	; 0x2c
   1fdc6:	9b06      	ldr	r3, [sp, #24]
   1fdc8:	2b00      	cmp	r3, #0
   1fdca:	bfb7      	itett	lt
   1fdcc:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
   1fdd0:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
   1fdd4:	1a9d      	sublt	r5, r3, r2
   1fdd6:	2300      	movlt	r3, #0
   1fdd8:	e736      	b.n	1fc48 <_dtoa_r+0x718>
   1fdda:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1fddc:	9d07      	ldr	r5, [sp, #28]
   1fdde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1fde0:	e73d      	b.n	1fc5e <_dtoa_r+0x72e>
   1fde2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fde4:	e769      	b.n	1fcba <_dtoa_r+0x78a>
   1fde6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fde8:	2b01      	cmp	r3, #1
   1fdea:	dc18      	bgt.n	1fe1e <_dtoa_r+0x8ee>
   1fdec:	f1ba 0f00 	cmp.w	sl, #0
   1fdf0:	d115      	bne.n	1fe1e <_dtoa_r+0x8ee>
   1fdf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fdf6:	b993      	cbnz	r3, 1fe1e <_dtoa_r+0x8ee>
   1fdf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fdfc:	0d1b      	lsrs	r3, r3, #20
   1fdfe:	051b      	lsls	r3, r3, #20
   1fe00:	b183      	cbz	r3, 1fe24 <_dtoa_r+0x8f4>
   1fe02:	9b07      	ldr	r3, [sp, #28]
   1fe04:	f04f 0801 	mov.w	r8, #1
   1fe08:	3301      	adds	r3, #1
   1fe0a:	9307      	str	r3, [sp, #28]
   1fe0c:	9b08      	ldr	r3, [sp, #32]
   1fe0e:	3301      	adds	r3, #1
   1fe10:	9308      	str	r3, [sp, #32]
   1fe12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fe14:	2b00      	cmp	r3, #0
   1fe16:	f47f af6b 	bne.w	1fcf0 <_dtoa_r+0x7c0>
   1fe1a:	2001      	movs	r0, #1
   1fe1c:	e770      	b.n	1fd00 <_dtoa_r+0x7d0>
   1fe1e:	f04f 0800 	mov.w	r8, #0
   1fe22:	e7f6      	b.n	1fe12 <_dtoa_r+0x8e2>
   1fe24:	4698      	mov	r8, r3
   1fe26:	e7f4      	b.n	1fe12 <_dtoa_r+0x8e2>
   1fe28:	f43f af7e 	beq.w	1fd28 <_dtoa_r+0x7f8>
   1fe2c:	4618      	mov	r0, r3
   1fe2e:	301c      	adds	r0, #28
   1fe30:	e773      	b.n	1fd1a <_dtoa_r+0x7ea>
   1fe32:	9b06      	ldr	r3, [sp, #24]
   1fe34:	2b00      	cmp	r3, #0
   1fe36:	dc37      	bgt.n	1fea8 <_dtoa_r+0x978>
   1fe38:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fe3a:	2b02      	cmp	r3, #2
   1fe3c:	dd34      	ble.n	1fea8 <_dtoa_r+0x978>
   1fe3e:	9b06      	ldr	r3, [sp, #24]
   1fe40:	9305      	str	r3, [sp, #20]
   1fe42:	9b05      	ldr	r3, [sp, #20]
   1fe44:	b96b      	cbnz	r3, 1fe62 <_dtoa_r+0x932>
   1fe46:	4631      	mov	r1, r6
   1fe48:	2205      	movs	r2, #5
   1fe4a:	4620      	mov	r0, r4
   1fe4c:	f01b ff12 	bl	3bc74 <__multadd>
   1fe50:	4601      	mov	r1, r0
   1fe52:	4606      	mov	r6, r0
   1fe54:	ee18 0a10 	vmov	r0, s16
   1fe58:	f022 fb95 	bl	42586 <__mcmp>
   1fe5c:	2800      	cmp	r0, #0
   1fe5e:	f73f adbd 	bgt.w	1f9dc <_dtoa_r+0x4ac>
   1fe62:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fe64:	9d04      	ldr	r5, [sp, #16]
   1fe66:	43db      	mvns	r3, r3
   1fe68:	9303      	str	r3, [sp, #12]
   1fe6a:	f04f 0800 	mov.w	r8, #0
   1fe6e:	4631      	mov	r1, r6
   1fe70:	4620      	mov	r0, r4
   1fe72:	f01b fedd 	bl	3bc30 <_Bfree>
   1fe76:	2f00      	cmp	r7, #0
   1fe78:	f43f aea6 	beq.w	1fbc8 <_dtoa_r+0x698>
   1fe7c:	f1b8 0f00 	cmp.w	r8, #0
   1fe80:	d005      	beq.n	1fe8e <_dtoa_r+0x95e>
   1fe82:	45b8      	cmp	r8, r7
   1fe84:	d003      	beq.n	1fe8e <_dtoa_r+0x95e>
   1fe86:	4641      	mov	r1, r8
   1fe88:	4620      	mov	r0, r4
   1fe8a:	f01b fed1 	bl	3bc30 <_Bfree>
   1fe8e:	4639      	mov	r1, r7
   1fe90:	4620      	mov	r0, r4
   1fe92:	f01b fecd 	bl	3bc30 <_Bfree>
   1fe96:	e697      	b.n	1fbc8 <_dtoa_r+0x698>
   1fe98:	2600      	movs	r6, #0
   1fe9a:	4637      	mov	r7, r6
   1fe9c:	e7e1      	b.n	1fe62 <_dtoa_r+0x932>
   1fe9e:	9703      	str	r7, [sp, #12]
   1fea0:	4637      	mov	r7, r6
   1fea2:	e59b      	b.n	1f9dc <_dtoa_r+0x4ac>
   1fea4:	40240000 	.word	0x40240000
   1fea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1feaa:	2b00      	cmp	r3, #0
   1feac:	f000 80ca 	beq.w	20044 <_dtoa_r+0xb14>
   1feb0:	9b06      	ldr	r3, [sp, #24]
   1feb2:	9305      	str	r3, [sp, #20]
   1feb4:	2d00      	cmp	r5, #0
   1feb6:	dd05      	ble.n	1fec4 <_dtoa_r+0x994>
   1feb8:	4639      	mov	r1, r7
   1feba:	462a      	mov	r2, r5
   1febc:	4620      	mov	r0, r4
   1febe:	f01c f883 	bl	3bfc8 <__lshift>
   1fec2:	4607      	mov	r7, r0
   1fec4:	f1b8 0f00 	cmp.w	r8, #0
   1fec8:	d05b      	beq.n	1ff82 <_dtoa_r+0xa52>
   1feca:	6879      	ldr	r1, [r7, #4]
   1fecc:	4620      	mov	r0, r4
   1fece:	f01b fe6f 	bl	3bbb0 <_Balloc>
   1fed2:	4605      	mov	r5, r0
   1fed4:	b928      	cbnz	r0, 1fee2 <_dtoa_r+0x9b2>
   1fed6:	4b87      	ldr	r3, [pc, #540]	; (200f4 <_dtoa_r+0xbc4>)
   1fed8:	4602      	mov	r2, r0
   1feda:	f240 21ea 	movw	r1, #746	; 0x2ea
   1fede:	f7ff bb3d 	b.w	1f55c <_dtoa_r+0x2c>
   1fee2:	693a      	ldr	r2, [r7, #16]
   1fee4:	f107 010c 	add.w	r1, r7, #12
   1fee8:	300c      	adds	r0, #12
   1feea:	3202      	adds	r2, #2
   1feec:	0092      	lsls	r2, r2, #2
   1feee:	f021 fe17 	bl	41b20 <memcpy>
   1fef2:	2201      	movs	r2, #1
   1fef4:	4629      	mov	r1, r5
   1fef6:	4620      	mov	r0, r4
   1fef8:	f01c f866 	bl	3bfc8 <__lshift>
   1fefc:	9b04      	ldr	r3, [sp, #16]
   1fefe:	46b8      	mov	r8, r7
   1ff00:	4607      	mov	r7, r0
   1ff02:	f103 0901 	add.w	r9, r3, #1
   1ff06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ff0a:	4413      	add	r3, r2
   1ff0c:	9308      	str	r3, [sp, #32]
   1ff0e:	f00a 0301 	and.w	r3, sl, #1
   1ff12:	9307      	str	r3, [sp, #28]
   1ff14:	4631      	mov	r1, r6
   1ff16:	ee18 0a10 	vmov	r0, s16
   1ff1a:	f022 f8a8 	bl	4206e <quorem>
   1ff1e:	4641      	mov	r1, r8
   1ff20:	9005      	str	r0, [sp, #20]
   1ff22:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1ff26:	ee18 0a10 	vmov	r0, s16
   1ff2a:	f109 3bff 	add.w	fp, r9, #4294967295
   1ff2e:	f022 fb2a 	bl	42586 <__mcmp>
   1ff32:	463a      	mov	r2, r7
   1ff34:	9006      	str	r0, [sp, #24]
   1ff36:	4631      	mov	r1, r6
   1ff38:	4620      	mov	r0, r4
   1ff3a:	f01c f8b5 	bl	3c0a8 <__mdiff>
   1ff3e:	68c2      	ldr	r2, [r0, #12]
   1ff40:	4605      	mov	r5, r0
   1ff42:	bb02      	cbnz	r2, 1ff86 <_dtoa_r+0xa56>
   1ff44:	4601      	mov	r1, r0
   1ff46:	ee18 0a10 	vmov	r0, s16
   1ff4a:	f022 fb1c 	bl	42586 <__mcmp>
   1ff4e:	4602      	mov	r2, r0
   1ff50:	4629      	mov	r1, r5
   1ff52:	4620      	mov	r0, r4
   1ff54:	9209      	str	r2, [sp, #36]	; 0x24
   1ff56:	f01b fe6b 	bl	3bc30 <_Bfree>
   1ff5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1ff5c:	464d      	mov	r5, r9
   1ff5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ff60:	ea43 0102 	orr.w	r1, r3, r2
   1ff64:	9b07      	ldr	r3, [sp, #28]
   1ff66:	430b      	orrs	r3, r1
   1ff68:	d10f      	bne.n	1ff8a <_dtoa_r+0xa5a>
   1ff6a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1ff6e:	d02a      	beq.n	1ffc6 <_dtoa_r+0xa96>
   1ff70:	9b06      	ldr	r3, [sp, #24]
   1ff72:	2b00      	cmp	r3, #0
   1ff74:	dd02      	ble.n	1ff7c <_dtoa_r+0xa4c>
   1ff76:	9b05      	ldr	r3, [sp, #20]
   1ff78:	f103 0a31 	add.w	sl, r3, #49	; 0x31
   1ff7c:	f88b a000 	strb.w	sl, [fp]
   1ff80:	e775      	b.n	1fe6e <_dtoa_r+0x93e>
   1ff82:	4638      	mov	r0, r7
   1ff84:	e7ba      	b.n	1fefc <_dtoa_r+0x9cc>
   1ff86:	2201      	movs	r2, #1
   1ff88:	e7e2      	b.n	1ff50 <_dtoa_r+0xa20>
   1ff8a:	9b06      	ldr	r3, [sp, #24]
   1ff8c:	2b00      	cmp	r3, #0
   1ff8e:	db04      	blt.n	1ff9a <_dtoa_r+0xa6a>
   1ff90:	9920      	ldr	r1, [sp, #128]	; 0x80
   1ff92:	430b      	orrs	r3, r1
   1ff94:	9907      	ldr	r1, [sp, #28]
   1ff96:	430b      	orrs	r3, r1
   1ff98:	d122      	bne.n	1ffe0 <_dtoa_r+0xab0>
   1ff9a:	2a00      	cmp	r2, #0
   1ff9c:	ddee      	ble.n	1ff7c <_dtoa_r+0xa4c>
   1ff9e:	ee18 1a10 	vmov	r1, s16
   1ffa2:	2201      	movs	r2, #1
   1ffa4:	4620      	mov	r0, r4
   1ffa6:	f01c f80f 	bl	3bfc8 <__lshift>
   1ffaa:	4631      	mov	r1, r6
   1ffac:	ee08 0a10 	vmov	s16, r0
   1ffb0:	f022 fae9 	bl	42586 <__mcmp>
   1ffb4:	2800      	cmp	r0, #0
   1ffb6:	dc03      	bgt.n	1ffc0 <_dtoa_r+0xa90>
   1ffb8:	d1e0      	bne.n	1ff7c <_dtoa_r+0xa4c>
   1ffba:	f01a 0f01 	tst.w	sl, #1
   1ffbe:	d0dd      	beq.n	1ff7c <_dtoa_r+0xa4c>
   1ffc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1ffc4:	d1d7      	bne.n	1ff76 <_dtoa_r+0xa46>
   1ffc6:	2339      	movs	r3, #57	; 0x39
   1ffc8:	f88b 3000 	strb.w	r3, [fp]
   1ffcc:	462b      	mov	r3, r5
   1ffce:	461d      	mov	r5, r3
   1ffd0:	3b01      	subs	r3, #1
   1ffd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1ffd6:	2a39      	cmp	r2, #57	; 0x39
   1ffd8:	d070      	beq.n	200bc <_dtoa_r+0xb8c>
   1ffda:	3201      	adds	r2, #1
   1ffdc:	701a      	strb	r2, [r3, #0]
   1ffde:	e746      	b.n	1fe6e <_dtoa_r+0x93e>
   1ffe0:	2a00      	cmp	r2, #0
   1ffe2:	dd07      	ble.n	1fff4 <_dtoa_r+0xac4>
   1ffe4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1ffe8:	d0ed      	beq.n	1ffc6 <_dtoa_r+0xa96>
   1ffea:	f10a 0301 	add.w	r3, sl, #1
   1ffee:	f88b 3000 	strb.w	r3, [fp]
   1fff2:	e73c      	b.n	1fe6e <_dtoa_r+0x93e>
   1fff4:	9b08      	ldr	r3, [sp, #32]
   1fff6:	f809 ac01 	strb.w	sl, [r9, #-1]
   1fffa:	4599      	cmp	r9, r3
   1fffc:	d046      	beq.n	2008c <_dtoa_r+0xb5c>
   1fffe:	ee18 1a10 	vmov	r1, s16
   20002:	2300      	movs	r3, #0
   20004:	220a      	movs	r2, #10
   20006:	4620      	mov	r0, r4
   20008:	f01b fe34 	bl	3bc74 <__multadd>
   2000c:	45b8      	cmp	r8, r7
   2000e:	ee08 0a10 	vmov	s16, r0
   20012:	f04f 0300 	mov.w	r3, #0
   20016:	f04f 020a 	mov.w	r2, #10
   2001a:	4641      	mov	r1, r8
   2001c:	4620      	mov	r0, r4
   2001e:	d106      	bne.n	2002e <_dtoa_r+0xafe>
   20020:	f01b fe28 	bl	3bc74 <__multadd>
   20024:	4680      	mov	r8, r0
   20026:	4607      	mov	r7, r0
   20028:	f109 0901 	add.w	r9, r9, #1
   2002c:	e772      	b.n	1ff14 <_dtoa_r+0x9e4>
   2002e:	f01b fe21 	bl	3bc74 <__multadd>
   20032:	4639      	mov	r1, r7
   20034:	4680      	mov	r8, r0
   20036:	2300      	movs	r3, #0
   20038:	220a      	movs	r2, #10
   2003a:	4620      	mov	r0, r4
   2003c:	f01b fe1a 	bl	3bc74 <__multadd>
   20040:	4607      	mov	r7, r0
   20042:	e7f1      	b.n	20028 <_dtoa_r+0xaf8>
   20044:	9b06      	ldr	r3, [sp, #24]
   20046:	9305      	str	r3, [sp, #20]
   20048:	9d04      	ldr	r5, [sp, #16]
   2004a:	4631      	mov	r1, r6
   2004c:	ee18 0a10 	vmov	r0, s16
   20050:	f022 f80d 	bl	4206e <quorem>
   20054:	9b04      	ldr	r3, [sp, #16]
   20056:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2005a:	f805 ab01 	strb.w	sl, [r5], #1
   2005e:	1aea      	subs	r2, r5, r3
   20060:	9b05      	ldr	r3, [sp, #20]
   20062:	4293      	cmp	r3, r2
   20064:	dd09      	ble.n	2007a <_dtoa_r+0xb4a>
   20066:	ee18 1a10 	vmov	r1, s16
   2006a:	2300      	movs	r3, #0
   2006c:	220a      	movs	r2, #10
   2006e:	4620      	mov	r0, r4
   20070:	f01b fe00 	bl	3bc74 <__multadd>
   20074:	ee08 0a10 	vmov	s16, r0
   20078:	e7e7      	b.n	2004a <_dtoa_r+0xb1a>
   2007a:	9b05      	ldr	r3, [sp, #20]
   2007c:	f04f 0800 	mov.w	r8, #0
   20080:	2b00      	cmp	r3, #0
   20082:	bfcc      	ite	gt
   20084:	461d      	movgt	r5, r3
   20086:	2501      	movle	r5, #1
   20088:	9b04      	ldr	r3, [sp, #16]
   2008a:	441d      	add	r5, r3
   2008c:	ee18 1a10 	vmov	r1, s16
   20090:	2201      	movs	r2, #1
   20092:	4620      	mov	r0, r4
   20094:	f01b ff98 	bl	3bfc8 <__lshift>
   20098:	4631      	mov	r1, r6
   2009a:	ee08 0a10 	vmov	s16, r0
   2009e:	f022 fa72 	bl	42586 <__mcmp>
   200a2:	2800      	cmp	r0, #0
   200a4:	dc92      	bgt.n	1ffcc <_dtoa_r+0xa9c>
   200a6:	d102      	bne.n	200ae <_dtoa_r+0xb7e>
   200a8:	f01a 0f01 	tst.w	sl, #1
   200ac:	d18e      	bne.n	1ffcc <_dtoa_r+0xa9c>
   200ae:	462b      	mov	r3, r5
   200b0:	461d      	mov	r5, r3
   200b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   200b6:	2a30      	cmp	r2, #48	; 0x30
   200b8:	d0fa      	beq.n	200b0 <_dtoa_r+0xb80>
   200ba:	e6d8      	b.n	1fe6e <_dtoa_r+0x93e>
   200bc:	9a04      	ldr	r2, [sp, #16]
   200be:	429a      	cmp	r2, r3
   200c0:	d185      	bne.n	1ffce <_dtoa_r+0xa9e>
   200c2:	9b03      	ldr	r3, [sp, #12]
   200c4:	3301      	adds	r3, #1
   200c6:	9303      	str	r3, [sp, #12]
   200c8:	2331      	movs	r3, #49	; 0x31
   200ca:	7013      	strb	r3, [r2, #0]
   200cc:	e6cf      	b.n	1fe6e <_dtoa_r+0x93e>
   200ce:	4b0a      	ldr	r3, [pc, #40]	; (200f8 <_dtoa_r+0xbc8>)
   200d0:	f7ff ba98 	b.w	1f604 <_dtoa_r+0xd4>
   200d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   200d6:	2b00      	cmp	r3, #0
   200d8:	f47f aa71 	bne.w	1f5be <_dtoa_r+0x8e>
   200dc:	4b07      	ldr	r3, [pc, #28]	; (200fc <_dtoa_r+0xbcc>)
   200de:	f7ff ba91 	b.w	1f604 <_dtoa_r+0xd4>
   200e2:	9b05      	ldr	r3, [sp, #20]
   200e4:	2b00      	cmp	r3, #0
   200e6:	dcaf      	bgt.n	20048 <_dtoa_r+0xb18>
   200e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   200ea:	2b02      	cmp	r3, #2
   200ec:	f73f aea9 	bgt.w	1fe42 <_dtoa_r+0x912>
   200f0:	e7aa      	b.n	20048 <_dtoa_r+0xb18>
   200f2:	bf00      	nop
   200f4:	0004c80a 	.word	0x0004c80a
   200f8:	000463dd 	.word	0x000463dd
   200fc:	0004c772 	.word	0x0004c772

00020100 <main>:
		NULL, NULL, NULL, -1, 0, 0);


void main(void)
{
	LOG_INF("nRF Cloud MQTT multi-service sample has started.");
   20100:	2149      	movs	r1, #73	; 0x49
   20102:	4801      	ldr	r0, [pc, #4]	; (20108 <main+0x8>)
   20104:	f01d b879 	b.w	3d1fa <z_log_minimal_printk>
   20108:	00043c24 	.word	0x00043c24

0002010c <create_timestamped_data_message_object>:
 *
 * @param appid
 * @return cJSON* - the timestamped data device message object if successful, NULL otherwise.
 */
static cJSON *create_timestamped_data_message_object(const char *const appid)
{
   2010c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2010e:	4605      	mov	r5, r0
	cJSON *msg_obj = NULL;
	int64_t timestamp;

	if (date_time_now(&timestamp))
   20110:	4668      	mov	r0, sp
   20112:	f009 f82b 	bl	2916c <date_time_now>
   20116:	b130      	cbz	r0, 20126 <create_timestamped_data_message_object+0x1a>
	{
		LOG_ERR("Failed to create timestamp for data message "
   20118:	462a      	mov	r2, r5
   2011a:	2145      	movs	r1, #69	; 0x45
   2011c:	4818      	ldr	r0, [pc, #96]	; (20180 <create_timestamped_data_message_object+0x74>)
   2011e:	f01d f86c 	bl	3d1fa <z_log_minimal_printk>
	{
		LOG_ERR("Failed to populate timestamped data message object "
				"with appid %s",
				log_strdup(appid));
		cJSON_Delete(msg_obj);
		return NULL;
   20122:	2400      	movs	r4, #0
   20124:	e008      	b.n	20138 <create_timestamped_data_message_object+0x2c>
	msg_obj = cJSON_CreateObject();
   20126:	f012 fadf 	bl	326e8 <cJSON_CreateObject>
		LOG_ERR("Failed to create container object for timestamped data message "
   2012a:	462a      	mov	r2, r5
	if (msg_obj == NULL)
   2012c:	4604      	mov	r4, r0
   2012e:	b930      	cbnz	r0, 2013e <create_timestamped_data_message_object+0x32>
		LOG_ERR("Failed to create container object for timestamped data message "
   20130:	2145      	movs	r1, #69	; 0x45
   20132:	4814      	ldr	r0, [pc, #80]	; (20184 <create_timestamped_data_message_object+0x78>)
   20134:	f01d f861 	bl	3d1fa <z_log_minimal_printk>
	}

	return msg_obj;
}
   20138:	4620      	mov	r0, r4
   2013a:	b003      	add	sp, #12
   2013c:	bd30      	pop	{r4, r5, pc}
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   2013e:	4912      	ldr	r1, [pc, #72]	; (20188 <create_timestamped_data_message_object+0x7c>)
   20140:	f020 f93c 	bl	403bc <cJSON_AddStringToObject>
   20144:	b940      	cbnz	r0, 20158 <create_timestamped_data_message_object+0x4c>
		LOG_ERR("Failed to populate timestamped data message object "
   20146:	462a      	mov	r2, r5
   20148:	2145      	movs	r1, #69	; 0x45
   2014a:	4810      	ldr	r0, [pc, #64]	; (2018c <create_timestamped_data_message_object+0x80>)
   2014c:	f01d f855 	bl	3d1fa <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   20150:	4620      	mov	r0, r4
   20152:	f012 fa07 	bl	32564 <cJSON_Delete>
   20156:	e7e4      	b.n	20122 <create_timestamped_data_message_object+0x16>
		(cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   20158:	4620      	mov	r0, r4
   2015a:	4a0d      	ldr	r2, [pc, #52]	; (20190 <create_timestamped_data_message_object+0x84>)
   2015c:	490d      	ldr	r1, [pc, #52]	; (20194 <create_timestamped_data_message_object+0x88>)
   2015e:	f020 f92d 	bl	403bc <cJSON_AddStringToObject>
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   20162:	2800      	cmp	r0, #0
   20164:	d0ef      	beq.n	20146 <create_timestamped_data_message_object+0x3a>
		(cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_MSG_TIMESTAMP_KEY,
   20166:	e9dd 0100 	ldrd	r0, r1, [sp]
   2016a:	f7fc faf7 	bl	1c75c <__aeabi_l2d>
   2016e:	4602      	mov	r2, r0
   20170:	460b      	mov	r3, r1
   20172:	4620      	mov	r0, r4
   20174:	4908      	ldr	r1, [pc, #32]	; (20198 <create_timestamped_data_message_object+0x8c>)
   20176:	f020 f8f5 	bl	40364 <cJSON_AddNumberToObject>
								 NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) == NULL) ||
   2017a:	2800      	cmp	r0, #0
   2017c:	d1dc      	bne.n	20138 <create_timestamped_data_message_object+0x2c>
   2017e:	e7e2      	b.n	20146 <create_timestamped_data_message_object+0x3a>
   20180:	00043c81 	.word	0x00043c81
   20184:	00043cc0 	.word	0x00043cc0
   20188:	00043d12 	.word	0x00043d12
   2018c:	00043d18 	.word	0x00043d18
   20190:	00043d5e 	.word	0x00043d5e
   20194:	00043d63 	.word	0x00043d63
   20198:	00043d6f 	.word	0x00043d6f

0002019c <on_location_update>:
 *
 * @param location_data - The received location update.
 *
 */
static void on_location_update(const struct location_data location_data)
{
   2019c:	b084      	sub	sp, #16
   2019e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201a2:	ed2d 8b02 	vpush	{d8}
   201a6:	b099      	sub	sp, #100	; 0x64
   201a8:	ac24      	add	r4, sp, #144	; 0x90
   201aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   201ae:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
   201b2:	f89d 8090 	ldrb.w	r8, [sp, #144]	; 0x90
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   201b6:	982a      	ldr	r0, [sp, #168]	; 0xa8
   201b8:	f7fc faa6 	bl	1c708 <__aeabi_f2d>
   201bc:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
   201c0:	f1b8 0f01 	cmp.w	r8, #1
   201c4:	f000 80ab 	beq.w	2031e <on_location_update+0x182>
   201c8:	f1b8 0f02 	cmp.w	r8, #2
   201cc:	f000 80a9 	beq.w	20322 <on_location_update+0x186>
   201d0:	4b59      	ldr	r3, [pc, #356]	; (20338 <on_location_update+0x19c>)
   201d2:	4a5a      	ldr	r2, [pc, #360]	; (2033c <on_location_update+0x1a0>)
   201d4:	f1b8 0f03 	cmp.w	r8, #3
   201d8:	bf18      	it	ne
   201da:	4613      	movne	r3, r2
   201dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   201e0:	9304      	str	r3, [sp, #16]
   201e2:	4632      	mov	r2, r6
   201e4:	463b      	mov	r3, r7
   201e6:	2149      	movs	r1, #73	; 0x49
   201e8:	e9cd 4500 	strd	r4, r5, [sp]
   201ec:	4854      	ldr	r0, [pc, #336]	; (20340 <on_location_update+0x1a4>)
   201ee:	f01d f804 	bl	3d1fa <z_log_minimal_printk>
			location_data.method == LOCATION_METHOD_CELLULAR ? "Cellular" : location_data.method == LOCATION_METHOD_GNSS ? "GNSS"
																		: location_data.method == LOCATION_METHOD_WIFI	 ? "WIFI"
																														 : "Invalid");

	/* If the position update was derived using GNSS, send it onward to nRF Cloud. */
	if (location_data.method == LOCATION_METHOD_GNSS)
   201f2:	f1b8 0f02 	cmp.w	r8, #2
   201f6:	f040 808b 	bne.w	20310 <on_location_update+0x174>
	{
		LOG_INF("GNSS Position Update! Sending to nRF Cloud...");
   201fa:	2149      	movs	r1, #73	; 0x49
   201fc:	4851      	ldr	r0, [pc, #324]	; (20344 <on_location_update+0x1a8>)
   201fe:	f01c fffc 	bl	3d1fa <z_log_minimal_printk>
		/* Synthesize an NMEA message from the provided lat/long/timestamp.
		 * This is necessary, because the nRF Cloud MQTT API only supports NMEA messages.
		 */

		char nmea_buf[50];
		int lat_deg = floor(fabs(location_data.latitude));
   20202:	4630      	mov	r0, r6
   20204:	4639      	mov	r1, r7
   20206:	f021 fc62 	bl	41ace <fabs>
   2020a:	f7fe fb15 	bl	1e838 <floor>
   2020e:	f7fc fd83 	bl	1cd18 <__aeabi_d2iz>
		int lon_deg = floor(fabs(location_data.longitude));
   20212:	4629      	mov	r1, r5
		int lat_deg = floor(fabs(location_data.latitude));
   20214:	4682      	mov	sl, r0
		int lon_deg = floor(fabs(location_data.longitude));
   20216:	4620      	mov	r0, r4
   20218:	f021 fc59 	bl	41ace <fabs>
   2021c:	f7fe fb0c 	bl	1e838 <floor>
   20220:	f7fc fd7a 	bl	1cd18 <__aeabi_d2iz>
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   20224:	4639      	mov	r1, r7
		int lon_deg = floor(fabs(location_data.longitude));
   20226:	4683      	mov	fp, r0
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   20228:	4630      	mov	r0, r6
   2022a:	f021 fc50 	bl	41ace <fabs>
   2022e:	4680      	mov	r8, r0
   20230:	4650      	mov	r0, sl
   20232:	4689      	mov	r9, r1
   20234:	f7fc fa56 	bl	1c6e4 <__aeabi_i2d>
   20238:	4602      	mov	r2, r0
   2023a:	460b      	mov	r3, r1
   2023c:	4640      	mov	r0, r8
   2023e:	4649      	mov	r1, r9
   20240:	f7fc f902 	bl	1c448 <__aeabi_dsub>
   20244:	2200      	movs	r2, #0
   20246:	4b40      	ldr	r3, [pc, #256]	; (20348 <on_location_update+0x1ac>)
   20248:	f7fc fab6 	bl	1c7b8 <__aeabi_dmul>
   2024c:	ec41 0b18 	vmov	d8, r0, r1
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   20250:	4620      	mov	r0, r4
   20252:	4629      	mov	r1, r5
   20254:	f021 fc3b 	bl	41ace <fabs>
   20258:	4680      	mov	r8, r0
   2025a:	4658      	mov	r0, fp
   2025c:	4689      	mov	r9, r1
   2025e:	f7fc fa41 	bl	1c6e4 <__aeabi_i2d>
   20262:	4602      	mov	r2, r0
   20264:	460b      	mov	r3, r1
   20266:	4640      	mov	r0, r8
   20268:	4649      	mov	r1, r9
   2026a:	f7fc f8ed 	bl	1c448 <__aeabi_dsub>
   2026e:	2200      	movs	r2, #0
   20270:	4b35      	ldr	r3, [pc, #212]	; (20348 <on_location_update+0x1ac>)
   20272:	f7fc faa1 	bl	1c7b8 <__aeabi_dmul>

		/* Not actually a valid NMEA,
		 * but close enough that nRF Cloud can't tell the difference.
		 */
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   20276:	2200      	movs	r2, #0
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   20278:	4680      	mov	r8, r0
   2027a:	4689      	mov	r9, r1
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   2027c:	4630      	mov	r0, r6
   2027e:	2300      	movs	r3, #0
   20280:	4639      	mov	r1, r7
   20282:	f7fc fd29 	bl	1ccd8 <__aeabi_dcmpgt>
   20286:	2300      	movs	r3, #0
   20288:	2800      	cmp	r0, #0
   2028a:	4629      	mov	r1, r5
   2028c:	f04f 0200 	mov.w	r2, #0
   20290:	4620      	mov	r0, r4
   20292:	bf14      	ite	ne
   20294:	264e      	movne	r6, #78	; 0x4e
   20296:	2653      	moveq	r6, #83	; 0x53
   20298:	f7fc fd1e 	bl	1ccd8 <__aeabi_dcmpgt>
   2029c:	2800      	cmp	r0, #0
   2029e:	bf14      	ite	ne
   202a0:	2345      	movne	r3, #69	; 0x45
   202a2:	2357      	moveq	r3, #87	; 0x57
   202a4:	4a29      	ldr	r2, [pc, #164]	; (2034c <on_location_update+0x1b0>)
   202a6:	2132      	movs	r1, #50	; 0x32
   202a8:	9306      	str	r3, [sp, #24]
   202aa:	ed8d 8b00 	vstr	d8, [sp]
   202ae:	4653      	mov	r3, sl
   202b0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   202b4:	e9cd 6b02 	strd	r6, fp, [sp, #8]
   202b8:	a80b      	add	r0, sp, #44	; 0x2c
   202ba:	f01a fcff 	bl	3acbc <sniprintf>
				 lat_deg, lat_min, location_data.latitude > 0 ? 'N' : 'S',
				 lon_deg, lon_min, location_data.longitude > 0 ? 'E' : 'W');

		int payload_length = strlen(nmea_buf);
   202be:	a80b      	add	r0, sp, #44	; 0x2c
   202c0:	f7fc ffbf 	bl	1d242 <strlen>

		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   202c4:	ab0b      	add	r3, sp, #44	; 0x2c
   202c6:	f1c0 0132 	rsb	r1, r0, #50	; 0x32
   202ca:	181d      	adds	r5, r3, r0
	int len = strlen(datastring);
   202cc:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   202d0:	9109      	str	r1, [sp, #36]	; 0x24
	int len = strlen(datastring);
   202d2:	f7fc ffb6 	bl	1d242 <strlen>
	for (int i = 0; i < len; i++)
   202d6:	2200      	movs	r2, #0
	uint8_t checksum = 0;
   202d8:	4613      	mov	r3, r2
	for (int i = 0; i < len; i++)
   202da:	9909      	ldr	r1, [sp, #36]	; 0x24
   202dc:	ac0b      	add	r4, sp, #44	; 0x2c
   202de:	4290      	cmp	r0, r2
   202e0:	f104 0401 	add.w	r4, r4, #1
   202e4:	dc1f      	bgt.n	20326 <on_location_update+0x18a>
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   202e6:	4a1a      	ldr	r2, [pc, #104]	; (20350 <on_location_update+0x1b4>)
   202e8:	4628      	mov	r0, r5
   202ea:	f01a fce7 	bl	3acbc <sniprintf>
	cJSON *msg_obj = create_timestamped_data_message_object(NRF_CLOUD_JSON_APPID_VAL_GPS);
   202ee:	4819      	ldr	r0, [pc, #100]	; (20354 <on_location_update+0x1b8>)
   202f0:	f7ff ff0c 	bl	2010c <create_timestamped_data_message_object>
	if (!msg_obj)
   202f4:	4604      	mov	r4, r0
   202f6:	b158      	cbz	r0, 20310 <on_location_update+0x174>
	if (cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, nmea) == NULL)
   202f8:	4917      	ldr	r1, [pc, #92]	; (20358 <on_location_update+0x1bc>)
   202fa:	aa0b      	add	r2, sp, #44	; 0x2c
   202fc:	f020 f85e 	bl	403bc <cJSON_AddStringToObject>
   20300:	b9a8      	cbnz	r0, 2032e <on_location_update+0x192>
		LOG_ERR("Failed to append NMEA data to GNSS message object");
   20302:	2145      	movs	r1, #69	; 0x45
   20304:	4815      	ldr	r0, [pc, #84]	; (2035c <on_location_update+0x1c0>)
   20306:	f01c ff78 	bl	3d1fa <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   2030a:	4620      	mov	r0, r4
   2030c:	f012 f92a 	bl	32564 <cJSON_Delete>
		LOG_DBG("NMEA: %s", log_strdup(nmea_buf));

		/* Send the NMEA string. */
		send_gnss_nmea(nmea_buf);
	}
}
   20310:	b019      	add	sp, #100	; 0x64
   20312:	ecbd 8b02 	vpop	{d8}
   20316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2031a:	b004      	add	sp, #16
   2031c:	4770      	bx	lr
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   2031e:	4b10      	ldr	r3, [pc, #64]	; (20360 <on_location_update+0x1c4>)
   20320:	e75c      	b.n	201dc <on_location_update+0x40>
   20322:	4b10      	ldr	r3, [pc, #64]	; (20364 <on_location_update+0x1c8>)
   20324:	e75a      	b.n	201dc <on_location_update+0x40>
		checksum ^= datastring[i];
   20326:	7826      	ldrb	r6, [r4, #0]
	for (int i = 0; i < len; i++)
   20328:	3201      	adds	r2, #1
		checksum ^= datastring[i];
   2032a:	4073      	eors	r3, r6
	for (int i = 0; i < len; i++)
   2032c:	e7d7      	b.n	202de <on_location_update+0x142>
	ret = send_device_message_cJSON(msg_obj);
   2032e:	4620      	mov	r0, r4
   20330:	f000 faac 	bl	2088c <send_device_message_cJSON>
   20334:	e7e9      	b.n	2030a <on_location_update+0x16e>
   20336:	bf00      	nop
   20338:	00043d80 	.word	0x00043d80
   2033c:	00043d85 	.word	0x00043d85
   20340:	00043d8d 	.word	0x00043d8d
   20344:	00043dd3 	.word	0x00043dd3
   20348:	404e0000 	.word	0x404e0000
   2034c:	00043e06 	.word	0x00043e06
   20350:	00043e33 	.word	0x00043e33
   20354:	00049319 	.word	0x00049319
   20358:	00043e3a 	.word	0x00043e3a
   2035c:	00043e3f 	.word	0x00043e3f
   20360:	00043d72 	.word	0x00043d72
   20364:	00043d7b 	.word	0x00043d7b

00020368 <send_sensor_sample.isra.0>:
static int send_sensor_sample(const char *const sensor, double value)
   20368:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2036a:	4605      	mov	r5, r0
   2036c:	e9cd 2300 	strd	r2, r3, [sp]
	cJSON *msg_obj = create_timestamped_data_message_object(sensor);
   20370:	f7ff fecc 	bl	2010c <create_timestamped_data_message_object>
	if (msg_obj == NULL)
   20374:	4604      	mov	r4, r0
   20376:	b1a0      	cbz	r0, 203a2 <send_sensor_sample.isra.0+0x3a>
	if (cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, value) == NULL)
   20378:	e9dd 2300 	ldrd	r2, r3, [sp]
   2037c:	490a      	ldr	r1, [pc, #40]	; (203a8 <send_sensor_sample.isra.0+0x40>)
   2037e:	f01f fff1 	bl	40364 <cJSON_AddNumberToObject>
   20382:	b950      	cbnz	r0, 2039a <send_sensor_sample.isra.0+0x32>
		LOG_ERR("Failed to append value to %s sample container object ",
   20384:	462a      	mov	r2, r5
   20386:	2145      	movs	r1, #69	; 0x45
   20388:	4808      	ldr	r0, [pc, #32]	; (203ac <send_sensor_sample.isra.0+0x44>)
   2038a:	f01c ff36 	bl	3d1fa <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   2038e:	4620      	mov	r0, r4
}
   20390:	b003      	add	sp, #12
   20392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		cJSON_Delete(msg_obj);
   20396:	f012 b8e5 	b.w	32564 <cJSON_Delete>
	ret = send_device_message_cJSON(msg_obj);
   2039a:	4620      	mov	r0, r4
   2039c:	f000 fa76 	bl	2088c <send_device_message_cJSON>
   203a0:	e7f5      	b.n	2038e <send_sensor_sample.isra.0+0x26>
}
   203a2:	b003      	add	sp, #12
   203a4:	bd30      	pop	{r4, r5, pc}
   203a6:	bf00      	nop
   203a8:	00043e3a 	.word	0x00043e3a
   203ac:	00043e76 	.word	0x00043e76

000203b0 <main_application>:

void main_application(void)
{
   203b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   203b4:	b095      	sub	sp, #84	; 0x54
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   203b6:	4857      	ldr	r0, [pc, #348]	; (20514 <main_application+0x164>)
   203b8:	f016 f894 	bl	364e4 <z_impl_device_get_binding>
   203bc:	4606      	mov	r6, r0
   203be:	4856      	ldr	r0, [pc, #344]	; (20518 <main_application+0x168>)
   203c0:	f016 f890 	bl	364e4 <z_impl_device_get_binding>

	dfr_data sensorReading;
	pm_data pmReading;
	sht40_data sht40Reading;

	if (init == 0)
   203c4:	4f55      	ldr	r7, [pc, #340]	; (2051c <main_application+0x16c>)
   203c6:	4605      	mov	r5, r0
   203c8:	683c      	ldr	r4, [r7, #0]
   203ca:	b9d4      	cbnz	r4, 20402 <main_application+0x52>
	{

		ret = dfrWakeUp(dev_i2c2);
   203cc:	f000 fc7e 	bl	20ccc <dfrWakeUp>
		if (ret != 0)
   203d0:	b110      	cbz	r0, 203d8 <main_application+0x28>
		{
			printf("Device could not be woken up\n");
   203d2:	4853      	ldr	r0, [pc, #332]	; (20520 <main_application+0x170>)
   203d4:	f01a fc42 	bl	3ac5c <iprintf>
		}

		printf("Warming up sensor for 3 minutes...\n");
   203d8:	4852      	ldr	r0, [pc, #328]	; (20524 <main_application+0x174>)
   203da:	f01a fc3f 	bl	3ac5c <iprintf>
		{
			while (!dfrWarmUpTime(dev_i2c2, &sensorReading))
			{
			}
			// flag = 0;
			printf("%d minute(s) has passed...\n", i + 1);
   203de:	f8df 8188 	ldr.w	r8, [pc, #392]	; 20568 <main_application+0x1b8>
			while (!dfrWarmUpTime(dev_i2c2, &sensorReading))
   203e2:	4628      	mov	r0, r5
   203e4:	a90d      	add	r1, sp, #52	; 0x34
   203e6:	f000 fd2f 	bl	20e48 <dfrWarmUpTime>
   203ea:	2800      	cmp	r0, #0
   203ec:	d0f9      	beq.n	203e2 <main_application+0x32>
			printf("%d minute(s) has passed...\n", i + 1);
   203ee:	3401      	adds	r4, #1
   203f0:	4621      	mov	r1, r4
   203f2:	4640      	mov	r0, r8
   203f4:	f01a fc32 	bl	3ac5c <iprintf>
		for (int i = 0; i < 3; i++)
   203f8:	2c03      	cmp	r4, #3
   203fa:	d1f2      	bne.n	203e2 <main_application+0x32>
		}

		printf("Warm-up time is over!\n");
   203fc:	484a      	ldr	r0, [pc, #296]	; (20528 <main_application+0x178>)
   203fe:	f01a fc2d 	bl	3ac5c <iprintf>
	}

	init = 1;
   20402:	2301      	movs	r3, #1

	/* Wait for the date and time to become known.
	 * This is needed both for location services and for sensor sample timestamping.
	 */
	LOG_INF("Waiting for modem to determine current date and time");
   20404:	2149      	movs	r1, #73	; 0x49
   20406:	4849      	ldr	r0, [pc, #292]	; (2052c <main_application+0x17c>)
	init = 1;
   20408:	603b      	str	r3, [r7, #0]
	LOG_INF("Waiting for modem to determine current date and time");
   2040a:	f01c fef6 	bl	3d1fa <z_log_minimal_printk>
	if (!await_date_time_known(K_SECONDS(CONFIG_DATE_TIME_ESTABLISHMENT_TIMEOUT_SECONDS)))
   2040e:	f44f 0016 	mov.w	r0, #9830400	; 0x960000
   20412:	2100      	movs	r1, #0
   20414:	f000 f8f6 	bl	20604 <await_date_time_known>
   20418:	2800      	cmp	r0, #0
   2041a:	d178      	bne.n	2050e <main_application+0x15e>
	{
		LOG_WRN("Failed to determine valid date time. Proceeding anyways");
   2041c:	2157      	movs	r1, #87	; 0x57
   2041e:	4844      	ldr	r0, [pc, #272]	; (20530 <main_application+0x180>)
	}
	else
	{
		LOG_INF("Current date and time determined");
   20420:	f01c feeb 	bl	3d1fa <z_log_minimal_printk>
	}

	/* Begin tracking location at the configured interval. */
	(void)start_location_tracking(on_location_update,
   20424:	213c      	movs	r1, #60	; 0x3c
   20426:	4843      	ldr	r0, [pc, #268]	; (20534 <main_application+0x184>)
   20428:	f000 fb8e 	bl	20b48 <start_location_tracking>
								  CONFIG_LOCATION_TRACKING_SAMPLE_INTERVAL_SECONDS);

	int counter = 0;
   2042c:	f04f 38ff 	mov.w	r8, #4294967295
   20430:	f04f 39ff 	mov.w	r9, #4294967295
	z_impl_k_timer_start(timer, duration, period);
   20434:	4c40      	ldr	r4, [pc, #256]	; (20538 <main_application+0x188>)
		// 	}
		// }

		if (pm_read(dev_i2c3, &pmReading) == 0)
		{
			printf("PM 2.5: %d\n", pmReading.pm25_env);
   20436:	4f41      	ldr	r7, [pc, #260]	; (2053c <main_application+0x18c>)
   20438:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   2043c:	4620      	mov	r0, r4
   2043e:	2300      	movs	r3, #0
   20440:	e9cd 8900 	strd	r8, r9, [sp]
   20444:	f019 f8a8 	bl	39598 <z_impl_k_timer_start>
		if (pm_read(dev_i2c3, &pmReading) == 0)
   20448:	4630      	mov	r0, r6
   2044a:	a907      	add	r1, sp, #28
   2044c:	f01c fbbf 	bl	3cbce <pm_read>
   20450:	b968      	cbnz	r0, 2046e <main_application+0xbe>
			printf("PM 2.5: %d\n", pmReading.pm25_env);
   20452:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   20456:	4638      	mov	r0, r7
   20458:	f01a fc00 	bl	3ac5c <iprintf>
			(void)send_sensor_sample("pm2.5", pmReading.pm25_env);
   2045c:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   20460:	f7fc f930 	bl	1c6c4 <__aeabi_ui2d>
   20464:	4602      	mov	r2, r0
   20466:	460b      	mov	r3, r1
   20468:	4835      	ldr	r0, [pc, #212]	; (20540 <main_application+0x190>)
   2046a:	f7ff ff7d 	bl	20368 <send_sensor_sample.isra.0>
		}

		if (sht40_read(dev_i2c3, &sht40Reading) == 0)
   2046e:	4630      	mov	r0, r6
   20470:	a902      	add	r1, sp, #8
   20472:	f000 fbab 	bl	20bcc <sht40_read>
   20476:	b990      	cbnz	r0, 2049e <main_application+0xee>
		{
			printf("T: %lf, H: %lf\n", sht40Reading.temperature, sht40Reading.humidity);
   20478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2047c:	4831      	ldr	r0, [pc, #196]	; (20544 <main_application+0x194>)
   2047e:	e9cd 2300 	strd	r2, r3, [sp]
   20482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20486:	f01a fbe9 	bl	3ac5c <iprintf>
			(void)send_sensor_sample("Temp", sht40Reading.temperature);
   2048a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2048e:	482e      	ldr	r0, [pc, #184]	; (20548 <main_application+0x198>)
   20490:	f7ff ff6a 	bl	20368 <send_sensor_sample.isra.0>
			(void)send_sensor_sample("Humidity", sht40Reading.humidity);
   20494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20498:	482c      	ldr	r0, [pc, #176]	; (2054c <main_application+0x19c>)
   2049a:	f7ff ff65 	bl	20368 <send_sensor_sample.isra.0>
		}

		if (getGasData(dev_i2c2, &sensorReading) == 0)
   2049e:	4628      	mov	r0, r5
   204a0:	a90d      	add	r1, sp, #52	; 0x34
   204a2:	f01c fbf7 	bl	3cc94 <getGasData>
   204a6:	bb70      	cbnz	r0, 20506 <main_application+0x156>
		{
			printf("__r0_ox = %d, __r0_red = %d, powerData = %d, oxData = %d, redData = %d\n",
   204a8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   204ac:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
   204b0:	9301      	str	r3, [sp, #4]
   204b2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   204b6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
   204ba:	9300      	str	r3, [sp, #0]
   204bc:	4824      	ldr	r0, [pc, #144]	; (20550 <main_application+0x1a0>)
   204be:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   204c2:	f01a fbcb 	bl	3ac5c <iprintf>
				   sensorReading.r0_ox, sensorReading.r0_red, sensorReading.powerData, sensorReading.oxData, sensorReading.redData);
			printf("NO2: %f", sensorReading.no2);
   204c6:	980d      	ldr	r0, [sp, #52]	; 0x34
   204c8:	f7fc f91e 	bl	1c708 <__aeabi_f2d>
   204cc:	4602      	mov	r2, r0
   204ce:	460b      	mov	r3, r1
   204d0:	4820      	ldr	r0, [pc, #128]	; (20554 <main_application+0x1a4>)
   204d2:	f01a fbc3 	bl	3ac5c <iprintf>
			printf("\tCO: %f\n", sensorReading.co);
   204d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   204d8:	f7fc f916 	bl	1c708 <__aeabi_f2d>
   204dc:	4602      	mov	r2, r0
   204de:	460b      	mov	r3, r1
   204e0:	481d      	ldr	r0, [pc, #116]	; (20558 <main_application+0x1a8>)
   204e2:	f01a fbbb 	bl	3ac5c <iprintf>
			(void)send_sensor_sample("NO2", sensorReading.no2);
   204e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   204e8:	f7fc f90e 	bl	1c708 <__aeabi_f2d>
   204ec:	4602      	mov	r2, r0
   204ee:	460b      	mov	r3, r1
   204f0:	481a      	ldr	r0, [pc, #104]	; (2055c <main_application+0x1ac>)
   204f2:	f7ff ff39 	bl	20368 <send_sensor_sample.isra.0>
			(void)send_sensor_sample("CO", sensorReading.co);
   204f6:	980e      	ldr	r0, [sp, #56]	; 0x38
   204f8:	f7fc f906 	bl	1c708 <__aeabi_f2d>
   204fc:	4602      	mov	r2, r0
   204fe:	460b      	mov	r3, r1
   20500:	4817      	ldr	r0, [pc, #92]	; (20560 <main_application+0x1b0>)
   20502:	f7ff ff31 	bl	20368 <send_sensor_sample.isra.0>
	return z_impl_k_timer_status_sync(timer);
   20506:	4620      	mov	r0, r4
   20508:	f019 f898 	bl	3963c <z_impl_k_timer_status_sync>
	{
   2050c:	e794      	b.n	20438 <main_application+0x88>
		LOG_INF("Current date and time determined");
   2050e:	2149      	movs	r1, #73	; 0x49
   20510:	4814      	ldr	r0, [pc, #80]	; (20564 <main_application+0x1b4>)
   20512:	e785      	b.n	20420 <main_application+0x70>
   20514:	00045b14 	.word	0x00045b14
   20518:	00043eb1 	.word	0x00043eb1
   2051c:	200190a8 	.word	0x200190a8
   20520:	00043eb7 	.word	0x00043eb7
   20524:	00043ed5 	.word	0x00043ed5
   20528:	00043f15 	.word	0x00043f15
   2052c:	00043f2c 	.word	0x00043f2c
   20530:	00043f66 	.word	0x00043f66
   20534:	0002019d 	.word	0x0002019d
   20538:	20014e30 	.word	0x20014e30
   2053c:	00043fc9 	.word	0x00043fc9
   20540:	00043fd5 	.word	0x00043fd5
   20544:	00043fdb 	.word	0x00043fdb
   20548:	00043feb 	.word	0x00043feb
   2054c:	00043ff0 	.word	0x00043ff0
   20550:	00043ff9 	.word	0x00043ff9
   20554:	00044041 	.word	0x00044041
   20558:	00044049 	.word	0x00044049
   2055c:	00044052 	.word	0x00044052
   20560:	00044056 	.word	0x00044056
   20564:	00043fa3 	.word	0x00043fa3
   20568:	00043ef9 	.word	0x00043ef9

0002056c <reset_cloud>:
static void reset_cloud(void)
{
	int err;

	/* Wait for a few seconds to help residual events settle. */
	LOG_INF("Resetting nRF Cloud transport");
   2056c:	2149      	movs	r1, #73	; 0x49
{
   2056e:	b508      	push	{r3, lr}
	LOG_INF("Resetting nRF Cloud transport");
   20570:	4810      	ldr	r0, [pc, #64]	; (205b4 <reset_cloud+0x48>)
   20572:	f01c fe42 	bl	3d1fa <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   20576:	2100      	movs	r1, #0
   20578:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
   2057c:	f018 fb54 	bl	38c28 <z_impl_k_sleep>
	k_sleep(K_SECONDS(20));

	/* Disconnect from nRF Cloud and uninit the cloud library. */
	err = nrf_cloud_uninit();
   20580:	f00b fb6e 	bl	2bc60 <nrf_cloud_uninit>

	/* nrf_cloud_uninit returns -EBUSY if reset is blocked by a FOTA job. */
	if (err == -EBUSY) {
   20584:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_uninit();
   20588:	4602      	mov	r2, r0
	if (err == -EBUSY) {
   2058a:	d104      	bne.n	20596 <reset_cloud+0x2a>
		LOG_ERR("Could not reset nRF Cloud transport due to ongoing FOTA job. "
   2058c:	2145      	movs	r1, #69	; 0x45
   2058e:	480a      	ldr	r0, [pc, #40]	; (205b8 <reset_cloud+0x4c>)
			"Continuing without resetting");
	} else if (err) {
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
			"Continuing without resetting", err);
	} else {
		LOG_INF("nRF Cloud transport has been reset");
   20590:	f01c fe33 	bl	3d1fa <z_log_minimal_printk>
   20594:	e004      	b.n	205a0 <reset_cloud+0x34>
	} else if (err) {
   20596:	b148      	cbz	r0, 205ac <reset_cloud+0x40>
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
   20598:	2145      	movs	r1, #69	; 0x45
   2059a:	4808      	ldr	r0, [pc, #32]	; (205bc <reset_cloud+0x50>)
   2059c:	f01c fe2d 	bl	3d1fa <z_log_minimal_printk>
	}

	/* Clear cloud connection event state (reset to initial state). */
	clear_cloud_connection_events();
}
   205a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_EVENT_SET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_event_set(event, events);
   205a4:	2100      	movs	r1, #0
   205a6:	4806      	ldr	r0, [pc, #24]	; (205c0 <reset_cloud+0x54>)
   205a8:	f021 ba1a 	b.w	419e0 <z_impl_k_event_set>
		LOG_INF("nRF Cloud transport has been reset");
   205ac:	2149      	movs	r1, #73	; 0x49
   205ae:	4805      	ldr	r0, [pc, #20]	; (205c4 <reset_cloud+0x58>)
   205b0:	e7ee      	b.n	20590 <reset_cloud+0x24>
   205b2:	bf00      	nop
   205b4:	00044065 	.word	0x00044065
   205b8:	00044088 	.word	0x00044088
   205bc:	000440e7 	.word	0x000440e7
   205c0:	200150f0 	.word	0x200150f0
   205c4:	00044138 	.word	0x00044138

000205c8 <date_time_evt_handler>:
{
   205c8:	b508      	push	{r3, lr}
	if (date_time_is_valid()) {
   205ca:	f01f fb80 	bl	3fcce <date_time_is_valid>
   205ce:	b128      	cbz	r0, 205dc <date_time_evt_handler+0x14>
}
   205d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_event_post(event, events);
   205d4:	2102      	movs	r1, #2
   205d6:	4802      	ldr	r0, [pc, #8]	; (205e0 <date_time_evt_handler+0x18>)
   205d8:	f021 b9ff 	b.w	419da <z_impl_k_event_post>
   205dc:	bd08      	pop	{r3, pc}
   205de:	bf00      	nop
   205e0:	200150f0 	.word	0x200150f0

000205e4 <await_lte_connection>:
{
   205e4:	b507      	push	{r0, r1, r2, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm3 = { .val = timeout };
		return (uint32_t) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.split.lo, parm3.split.hi, K_SYSCALL_K_EVENT_WAIT_ALL);
	}
#endif
	compiler_barrier();
	return z_impl_k_event_wait_all(event, events, reset, timeout);
   205e6:	2200      	movs	r2, #0
   205e8:	e9cd 0100 	strd	r0, r1, [sp]
   205ec:	2102      	movs	r1, #2
   205ee:	4804      	ldr	r0, [pc, #16]	; (20600 <await_lte_connection+0x1c>)
   205f0:	f021 f9ff 	bl	419f2 <z_impl_k_event_wait_all>
}
   205f4:	3800      	subs	r0, #0
   205f6:	bf18      	it	ne
   205f8:	2001      	movne	r0, #1
   205fa:	b003      	add	sp, #12
   205fc:	f85d fb04 	ldr.w	pc, [sp], #4
   20600:	20015100 	.word	0x20015100

00020604 <await_date_time_known>:
{
   20604:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   20606:	2200      	movs	r2, #0
   20608:	e9cd 0100 	strd	r0, r1, [sp]
   2060c:	2102      	movs	r1, #2
   2060e:	4804      	ldr	r0, [pc, #16]	; (20620 <await_date_time_known+0x1c>)
   20610:	f021 f9e9 	bl	419e6 <z_impl_k_event_wait>
}
   20614:	3800      	subs	r0, #0
   20616:	bf18      	it	ne
   20618:	2001      	movne	r0, #1
   2061a:	b003      	add	sp, #12
   2061c:	f85d fb04 	ldr.w	pc, [sp], #4
   20620:	200150f0 	.word	0x200150f0

00020624 <await_connection>:
{
   20624:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20626:	4605      	mov	r5, r0
   20628:	460c      	mov	r4, r1
	return await_lte_connection(timeout) && await_cloud_ready(timeout, false);
   2062a:	f7ff ffdb 	bl	205e4 <await_lte_connection>
   2062e:	b148      	cbz	r0, 20644 <await_connection+0x20>
   20630:	2200      	movs	r2, #0
   20632:	2104      	movs	r1, #4
   20634:	e9cd 5400 	strd	r5, r4, [sp]
   20638:	4803      	ldr	r0, [pc, #12]	; (20648 <await_connection+0x24>)
   2063a:	f021 f9d4 	bl	419e6 <z_impl_k_event_wait>
   2063e:	1f03      	subs	r3, r0, #4
   20640:	4258      	negs	r0, r3
   20642:	4158      	adcs	r0, r3
}
   20644:	b003      	add	sp, #12
   20646:	bd30      	pop	{r4, r5, pc}
   20648:	200150f0 	.word	0x200150f0

0002064c <cloud_is_connected>:
{
   2064c:	b507      	push	{r0, r1, r2, lr}
   2064e:	2200      	movs	r2, #0
   20650:	2300      	movs	r3, #0
   20652:	2102      	movs	r1, #2
   20654:	e9cd 2300 	strd	r2, r3, [sp]
   20658:	4804      	ldr	r0, [pc, #16]	; (2066c <cloud_is_connected+0x20>)
   2065a:	f021 f9c4 	bl	419e6 <z_impl_k_event_wait>
}
   2065e:	3800      	subs	r0, #0
   20660:	bf18      	it	ne
   20662:	2001      	movne	r0, #1
   20664:	b003      	add	sp, #12
   20666:	f85d fb04 	ldr.w	pc, [sp], #4
   2066a:	bf00      	nop
   2066c:	200150f0 	.word	0x200150f0

00020670 <disconnect_cloud>:
	z_impl_k_event_post(event, events);
   20670:	2110      	movs	r1, #16
   20672:	4801      	ldr	r0, [pc, #4]	; (20678 <disconnect_cloud+0x8>)
   20674:	f021 b9b1 	b.w	419da <z_impl_k_event_post>
   20678:	200150f0 	.word	0x200150f0

0002067c <cloud_event_handler>:
{
   2067c:	b507      	push	{r0, r1, r2, lr}
	switch (nrf_cloud_evt->type) {
   2067e:	7803      	ldrb	r3, [r0, #0]
   20680:	3b01      	subs	r3, #1
   20682:	2b0a      	cmp	r3, #10
   20684:	d834      	bhi.n	206f0 <cloud_event_handler+0x74>
   20686:	e8df f003 	tbb	[pc, r3]
   2068a:	3306      	.short	0x3306
   2068c:	2725130d 	.word	0x2725130d
   20690:	33203333 	.word	0x33203333
   20694:	2e          	.byte	0x2e
   20695:	00          	.byte	0x00
   20696:	2102      	movs	r1, #2
   20698:	4817      	ldr	r0, [pc, #92]	; (206f8 <cloud_event_handler+0x7c>)
}
   2069a:	b003      	add	sp, #12
   2069c:	f85d eb04 	ldr.w	lr, [sp], #4
   206a0:	f021 b99b 	b.w	419da <z_impl_k_event_post>
		LOG_INF("Please add this device to your cloud account in the nRF Cloud portal.");
   206a4:	2149      	movs	r1, #73	; 0x49
   206a6:	4815      	ldr	r0, [pc, #84]	; (206fc <cloud_event_handler+0x80>)
   206a8:	f01c fda7 	bl	3d1fa <z_log_minimal_printk>
   206ac:	2108      	movs	r1, #8
   206ae:	e7f3      	b.n	20698 <cloud_event_handler+0x1c>
	return z_impl_k_event_wait(event, events, reset, timeout);
   206b0:	2200      	movs	r2, #0
   206b2:	2300      	movs	r3, #0
   206b4:	2108      	movs	r1, #8
   206b6:	e9cd 2300 	strd	r2, r3, [sp]
   206ba:	480f      	ldr	r0, [pc, #60]	; (206f8 <cloud_event_handler+0x7c>)
   206bc:	f021 f993 	bl	419e6 <z_impl_k_event_wait>
		if (cloud_has_requested_association()) {
   206c0:	b1b0      	cbz	r0, 206f0 <cloud_event_handler+0x74>
			LOG_INF("Device successfully associated with cloud!");
   206c2:	2149      	movs	r1, #73	; 0x49
   206c4:	480e      	ldr	r0, [pc, #56]	; (20700 <cloud_event_handler+0x84>)
   206c6:	f01c fd98 	bl	3d1fa <z_log_minimal_printk>
}
   206ca:	b003      	add	sp, #12
   206cc:	f85d eb04 	ldr.w	lr, [sp], #4
		disconnect_cloud();
   206d0:	f7ff bfce 	b.w	20670 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   206d4:	2104      	movs	r1, #4
   206d6:	e7df      	b.n	20698 <cloud_event_handler+0x1c>
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   206d8:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
}
   206dc:	b003      	add	sp, #12
   206de:	f85d eb04 	ldr.w	lr, [sp], #4
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   206e2:	f000 ba0d 	b.w	20b00 <location_assistance_data_handler>
}
   206e6:	b003      	add	sp, #12
   206e8:	f85d eb04 	ldr.w	lr, [sp], #4
		on_fota_downloaded();
   206ec:	f000 b9bc 	b.w	20a68 <on_fota_downloaded>
}
   206f0:	b003      	add	sp, #12
   206f2:	f85d fb04 	ldr.w	pc, [sp], #4
   206f6:	bf00      	nop
   206f8:	200150f0 	.word	0x200150f0
   206fc:	00044160 	.word	0x00044160
   20700:	000441ab 	.word	0x000441ab

00020704 <await_cloud_disconnection>:
{
   20704:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   20706:	2200      	movs	r2, #0
   20708:	e9cd 0100 	strd	r0, r1, [sp]
   2070c:	2110      	movs	r1, #16
   2070e:	4804      	ldr	r0, [pc, #16]	; (20720 <await_cloud_disconnection+0x1c>)
   20710:	f021 f969 	bl	419e6 <z_impl_k_event_wait>
}
   20714:	3800      	subs	r0, #0
   20716:	bf18      	it	ne
   20718:	2001      	movne	r0, #1
   2071a:	b003      	add	sp, #12
   2071c:	f85d fb04 	ldr.w	pc, [sp], #4
   20720:	200150f0 	.word	0x200150f0

00020724 <cloud_is_disconnecting>:
{
   20724:	b507      	push	{r0, r1, r2, lr}
   20726:	2200      	movs	r2, #0
   20728:	2300      	movs	r3, #0
   2072a:	2110      	movs	r1, #16
   2072c:	e9cd 2300 	strd	r2, r3, [sp]
   20730:	4804      	ldr	r0, [pc, #16]	; (20744 <cloud_is_disconnecting+0x20>)
   20732:	f021 f958 	bl	419e6 <z_impl_k_event_wait>
}
   20736:	3800      	subs	r0, #0
   20738:	bf18      	it	ne
   2073a:	2001      	movne	r0, #1
   2073c:	b003      	add	sp, #12
   2073e:	f85d fb04 	ldr.w	pc, [sp], #4
   20742:	bf00      	nop
   20744:	200150f0 	.word	0x200150f0

00020748 <lte_event_handler>:
{
   20748:	b508      	push	{r3, lr}
	switch (evt->type) {
   2074a:	7801      	ldrb	r1, [r0, #0]
   2074c:	b9d9      	cbnz	r1, 20786 <lte_event_handler+0x3e>
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   2074e:	7a03      	ldrb	r3, [r0, #8]
   20750:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   20754:	2b01      	cmp	r3, #1
   20756:	d010      	beq.n	2077a <lte_event_handler+0x32>
	z_impl_k_event_set(event, events);
   20758:	480b      	ldr	r0, [pc, #44]	; (20788 <lte_event_handler+0x40>)
   2075a:	f021 f941 	bl	419e0 <z_impl_k_event_set>
			if (cloud_is_connected() && !cloud_is_disconnecting()) {
   2075e:	f7ff ff75 	bl	2064c <cloud_is_connected>
   20762:	b180      	cbz	r0, 20786 <lte_event_handler+0x3e>
   20764:	f7ff ffde 	bl	20724 <cloud_is_disconnecting>
   20768:	b968      	cbnz	r0, 20786 <lte_event_handler+0x3e>
				LOG_INF("LTE connection lost. Disconnecting from nRF Cloud too...");
   2076a:	2149      	movs	r1, #73	; 0x49
   2076c:	4807      	ldr	r0, [pc, #28]	; (2078c <lte_event_handler+0x44>)
   2076e:	f01c fd44 	bl	3d1fa <z_log_minimal_printk>
}
   20772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				disconnect_cloud();
   20776:	f7ff bf7b 	b.w	20670 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   2077a:	2102      	movs	r1, #2
}
   2077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20780:	4801      	ldr	r0, [pc, #4]	; (20788 <lte_event_handler+0x40>)
   20782:	f021 b92a 	b.w	419da <z_impl_k_event_post>
   20786:	bd08      	pop	{r3, pc}
   20788:	20015100 	.word	0x20015100
   2078c:	000441db 	.word	0x000441db

00020790 <send_device_message>:
{
   20790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   20792:	9001      	str	r0, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   20794:	f7fc fd55 	bl	1d242 <strlen>
   20798:	3001      	adds	r0, #1
   2079a:	f021 f937 	bl	41a0c <k_malloc>
	if (!msg_buf) {
   2079e:	9901      	ldr	r1, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   207a0:	9003      	str	r0, [sp, #12]
	if (!msg_buf) {
   207a2:	b940      	cbnz	r0, 207b6 <send_device_message+0x26>
		LOG_ERR("Could not alloc memory for new device message");
   207a4:	2145      	movs	r1, #69	; 0x45
   207a6:	480d      	ldr	r0, [pc, #52]	; (207dc <send_device_message+0x4c>)
   207a8:	f01c fd27 	bl	3d1fa <z_log_minimal_printk>
		return -ENOMEM;
   207ac:	f06f 000b 	mvn.w	r0, #11
}
   207b0:	b005      	add	sp, #20
   207b2:	f85d fb04 	ldr.w	pc, [sp], #4
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   207b6:	f021 fb9e 	bl	41ef6 <strcpy>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   207ba:	2200      	movs	r2, #0
   207bc:	2300      	movs	r3, #0
   207be:	4808      	ldr	r0, [pc, #32]	; (207e0 <send_device_message+0x50>)
   207c0:	a903      	add	r1, sp, #12
   207c2:	f016 fa6d 	bl	36ca0 <z_impl_k_msgq_put>
	if (k_msgq_put(&device_message_queue, &msg_buf, K_NO_WAIT)) {
   207c6:	2800      	cmp	r0, #0
   207c8:	d0f2      	beq.n	207b0 <send_device_message+0x20>
		LOG_ERR("Device message rejected, outgoing message queue is full");
   207ca:	2145      	movs	r1, #69	; 0x45
   207cc:	4805      	ldr	r0, [pc, #20]	; (207e4 <send_device_message+0x54>)
   207ce:	f01c fd14 	bl	3d1fa <z_log_minimal_printk>
		k_free(msg_buf);
   207d2:	9803      	ldr	r0, [sp, #12]
   207d4:	f021 f913 	bl	419fe <k_free>
   207d8:	e7e8      	b.n	207ac <send_device_message+0x1c>
   207da:	bf00      	nop
   207dc:	00044219 	.word	0x00044219
   207e0:	20014fcc 	.word	0x20014fcc
   207e4:	0004424c 	.word	0x0004424c

000207e8 <consume_device_message>:
{
   207e8:	b530      	push	{r4, r5, lr}
   207ea:	b087      	sub	sp, #28
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   207ec:	f04f 32ff 	mov.w	r2, #4294967295
   207f0:	f04f 33ff 	mov.w	r3, #4294967295
   207f4:	4821      	ldr	r0, [pc, #132]	; (2087c <consume_device_message+0x94>)
   207f6:	a901      	add	r1, sp, #4
   207f8:	f016 fae2 	bl	36dc0 <z_impl_k_msgq_get>
	if (ret) {
   207fc:	4604      	mov	r4, r0
   207fe:	b140      	cbz	r0, 20812 <consume_device_message+0x2a>
		LOG_ERR("Failed to retrieve item from outgoing message queue, error: %d", ret);
   20800:	4602      	mov	r2, r0
   20802:	2145      	movs	r1, #69	; 0x45
   20804:	481e      	ldr	r0, [pc, #120]	; (20880 <consume_device_message+0x98>)
   20806:	f01c fcf8 	bl	3d1fa <z_log_minimal_printk>
		return -ret;
   2080a:	4264      	negs	r4, r4
}
   2080c:	4620      	mov	r0, r4
   2080e:	b007      	add	sp, #28
   20810:	bd30      	pop	{r4, r5, pc}
	(void)await_connection(K_FOREVER);
   20812:	f04f 31ff 	mov.w	r1, #4294967295
   20816:	f04f 30ff 	mov.w	r0, #4294967295
   2081a:	f7ff ff03 	bl	20624 <await_connection>
	struct nrf_cloud_tx_data mqtt_msg = {
   2081e:	4621      	mov	r1, r4
   20820:	2210      	movs	r2, #16
   20822:	a802      	add	r0, sp, #8
   20824:	f021 f99c 	bl	41b60 <memset>
		.data.len = strlen(msg),
   20828:	9801      	ldr	r0, [sp, #4]
   2082a:	f7fc fd0a 	bl	1d242 <strlen>
	struct nrf_cloud_tx_data mqtt_msg = {
   2082e:	9b01      	ldr	r3, [sp, #4]
   20830:	9002      	str	r0, [sp, #8]
   20832:	9303      	str	r3, [sp, #12]
   20834:	f44f 7381 	mov.w	r3, #258	; 0x102
	ret = nrf_cloud_send(&mqtt_msg);
   20838:	a802      	add	r0, sp, #8
	struct nrf_cloud_tx_data mqtt_msg = {
   2083a:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = nrf_cloud_send(&mqtt_msg);
   2083e:	f00b fb39 	bl	2beb4 <nrf_cloud_send>
	if (ret) {
   20842:	4d10      	ldr	r5, [pc, #64]	; (20884 <consume_device_message+0x9c>)
   20844:	4604      	mov	r4, r0
   20846:	b1b8      	cbz	r0, 20878 <consume_device_message+0x90>
		LOG_ERR("Transmission of enqueued device message failed, nrf_cloud_send "
   20848:	4602      	mov	r2, r0
   2084a:	2145      	movs	r1, #69	; 0x45
   2084c:	480e      	ldr	r0, [pc, #56]	; (20888 <consume_device_message+0xa0>)
   2084e:	f01c fcd4 	bl	3d1fa <z_log_minimal_printk>
		send_device_message(msg);
   20852:	9801      	ldr	r0, [sp, #4]
   20854:	f7ff ff9c 	bl	20790 <send_device_message>
		send_failure_count += 1;
   20858:	682b      	ldr	r3, [r5, #0]
   2085a:	3301      	adds	r3, #1
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   2085c:	2b05      	cmp	r3, #5
		send_failure_count += 1;
   2085e:	602b      	str	r3, [r5, #0]
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   20860:	dd06      	ble.n	20870 <consume_device_message+0x88>
			disconnect_cloud();
   20862:	f7ff ff05 	bl	20670 <disconnect_cloud>
	return z_impl_k_sleep(timeout);
   20866:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   2086a:	2100      	movs	r1, #0
   2086c:	f018 f9dc 	bl	38c28 <z_impl_k_sleep>
	k_free(msg);
   20870:	9801      	ldr	r0, [sp, #4]
   20872:	f021 f8c4 	bl	419fe <k_free>
	return ret;
   20876:	e7c9      	b.n	2080c <consume_device_message+0x24>
		send_failure_count = 0;
   20878:	6028      	str	r0, [r5, #0]
   2087a:	e7f9      	b.n	20870 <consume_device_message+0x88>
   2087c:	20014fcc 	.word	0x20014fcc
   20880:	00044289 	.word	0x00044289
   20884:	200190ac 	.word	0x200190ac
   20888:	000442cd 	.word	0x000442cd

0002088c <send_device_message_cJSON>:
{
   2088c:	b538      	push	{r3, r4, r5, lr}
	if (!msg_obj) {
   2088e:	b938      	cbnz	r0, 208a0 <send_device_message_cJSON+0x14>
		LOG_ERR("Cannot send NULL device message object");
   20890:	2145      	movs	r1, #69	; 0x45
   20892:	480c      	ldr	r0, [pc, #48]	; (208c4 <send_device_message_cJSON+0x38>)
   20894:	f01c fcb1 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   20898:	f06f 0415 	mvn.w	r4, #21
}
   2089c:	4620      	mov	r0, r4
   2089e:	bd38      	pop	{r3, r4, r5, pc}
	msg = cJSON_PrintUnformatted(msg_obj);
   208a0:	f01f fce5 	bl	4026e <cJSON_PrintUnformatted>
	if (msg == NULL) {
   208a4:	4605      	mov	r5, r0
   208a6:	b930      	cbnz	r0, 208b6 <send_device_message_cJSON+0x2a>
		LOG_ERR("Failed to convert cJSON device message object to string");
   208a8:	2145      	movs	r1, #69	; 0x45
   208aa:	4807      	ldr	r0, [pc, #28]	; (208c8 <send_device_message_cJSON+0x3c>)
   208ac:	f01c fca5 	bl	3d1fa <z_log_minimal_printk>
		return -ENOMEM;
   208b0:	f06f 040b 	mvn.w	r4, #11
   208b4:	e7f2      	b.n	2089c <send_device_message_cJSON+0x10>
	ret = send_device_message(msg);
   208b6:	f7ff ff6b 	bl	20790 <send_device_message>
   208ba:	4604      	mov	r4, r0
	k_free(msg);
   208bc:	4628      	mov	r0, r5
   208be:	f021 f89e 	bl	419fe <k_free>
	return ret;
   208c2:	e7eb      	b.n	2089c <send_device_message_cJSON+0x10>
   208c4:	00044358 	.word	0x00044358
   208c8:	00044384 	.word	0x00044384

000208cc <manage_connection>:

	return 0;
}

void manage_connection(void)
{
   208cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	 *
	 * (Once we request connection, the modem will automatically try to reconnect whenever
	 *  connection is lost).
	 */

	LOG_INF("Connecting to LTE network. This may take several minutes...");
   208ce:	2149      	movs	r1, #73	; 0x49
{
   208d0:	b089      	sub	sp, #36	; 0x24
	LOG_INF("Connecting to LTE network. This may take several minutes...");
   208d2:	4850      	ldr	r0, [pc, #320]	; (20a14 <manage_connection+0x148>)
   208d4:	f01c fc91 	bl	3d1fa <z_log_minimal_printk>
	LOG_INF("Setting up LTE");
   208d8:	2149      	movs	r1, #73	; 0x49
   208da:	484f      	ldr	r0, [pc, #316]	; (20a18 <manage_connection+0x14c>)
   208dc:	f01c fc8d 	bl	3d1fa <z_log_minimal_printk>
	date_time_register_handler(date_time_evt_handler);
   208e0:	484e      	ldr	r0, [pc, #312]	; (20a1c <manage_connection+0x150>)
   208e2:	f01f f9f6 	bl	3fcd2 <date_time_register_handler>
	err = lte_lc_modem_events_enable();
   208e6:	f007 faab 	bl	27e40 <lte_lc_modem_events_enable>
	if (err) {
   208ea:	4602      	mov	r2, r0
   208ec:	b150      	cbz	r0, 20904 <manage_connection+0x38>
		LOG_ERR("lte_lc_modem_events_enable failed, error: %d", err);
   208ee:	2145      	movs	r1, #69	; 0x45
   208f0:	484b      	ldr	r0, [pc, #300]	; (20a20 <manage_connection+0x154>)
		LOG_ERR("Modem could not be configured, error: %d", err);
   208f2:	f01c fc82 	bl	3d1fa <z_log_minimal_printk>
	if (setup_lte()) {
		LOG_ERR("LTE initialization failed. Continuing anyway. This may fail.");
   208f6:	2145      	movs	r1, #69	; 0x45
   208f8:	484a      	ldr	r0, [pc, #296]	; (20a24 <manage_connection+0x158>)
   208fa:	f01c fc7e 	bl	3d1fa <z_log_minimal_printk>
	}

	while (true) {
		/* Wait for LTE to become connected (or re-connected if connection was lost). */
		LOG_INF("Waiting for connection to LTE network...");
   208fe:	4d4a      	ldr	r5, [pc, #296]	; (20a28 <manage_connection+0x15c>)

		(void)await_lte_connection(K_FOREVER);
		LOG_INF("Connected to LTE network");
   20900:	4c4a      	ldr	r4, [pc, #296]	; (20a2c <manage_connection+0x160>)
   20902:	e040      	b.n	20986 <manage_connection+0xba>
	LOG_INF("Starting connection to LTE network...");
   20904:	2149      	movs	r1, #73	; 0x49
   20906:	484a      	ldr	r0, [pc, #296]	; (20a30 <manage_connection+0x164>)
   20908:	f01c fc77 	bl	3d1fa <z_log_minimal_printk>
	err = lte_lc_init_and_connect_async(lte_event_handler);
   2090c:	4849      	ldr	r0, [pc, #292]	; (20a34 <manage_connection+0x168>)
   2090e:	f01f f918 	bl	3fb42 <lte_lc_init_and_connect_async>
	if (err) {
   20912:	4602      	mov	r2, r0
   20914:	2800      	cmp	r0, #0
   20916:	d0f2      	beq.n	208fe <manage_connection+0x32>
		LOG_ERR("Modem could not be configured, error: %d", err);
   20918:	2145      	movs	r1, #69	; 0x45
   2091a:	4847      	ldr	r0, [pc, #284]	; (20a38 <manage_connection+0x16c>)
   2091c:	e7e9      	b.n	208f2 <manage_connection+0x26>
		LOG_ERR("Cloud lib could not be initialized, error: %d", err);
   2091e:	2145      	movs	r1, #69	; 0x45
   20920:	4846      	ldr	r0, [pc, #280]	; (20a3c <manage_connection+0x170>)
   20922:	f01c fc6a 	bl	3d1fa <z_log_minimal_printk>
			/* and then wait patiently for a connection problem. */
			(void)await_cloud_disconnection(K_FOREVER);

			LOG_INF("Disconnected from nRF Cloud");
		} else {
			LOG_INF("Failed to connect to nRF Cloud");
   20926:	2149      	movs	r1, #73	; 0x49
   20928:	4845      	ldr	r0, [pc, #276]	; (20a40 <manage_connection+0x174>)
   2092a:	e023      	b.n	20974 <manage_connection+0xa8>
	LOG_INF("Connected to nRF Cloud");
   2092c:	4845      	ldr	r0, [pc, #276]	; (20a44 <manage_connection+0x178>)
   2092e:	f01c fc64 	bl	3d1fa <z_log_minimal_printk>
	struct nrf_cloud_svc_info_fota fota_info = {
   20932:	2306      	movs	r3, #6
   20934:	f88d 3008 	strb.w	r3, [sp, #8]
	struct nrf_cloud_svc_info_ui ui_info = {
   20938:	2303      	movs	r3, #3
   2093a:	f88d 300c 	strb.w	r3, [sp, #12]
   2093e:	2300      	movs	r3, #0
	struct nrf_cloud_svc_info service_info = {
   20940:	aa02      	add	r2, sp, #8
   20942:	9204      	str	r2, [sp, #16]
   20944:	aa03      	add	r2, sp, #12
	struct nrf_cloud_device_status device_status = {
   20946:	e9cd 2305 	strd	r2, r3, [sp, #20]
	struct nrf_cloud_svc_info_ui ui_info = {
   2094a:	f88d 300d 	strb.w	r3, [sp, #13]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   2094e:	a806      	add	r0, sp, #24
	struct nrf_cloud_device_status device_status = {
   20950:	ab04      	add	r3, sp, #16
   20952:	9307      	str	r3, [sp, #28]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   20954:	f00b fb28 	bl	2bfa8 <nrf_cloud_shadow_device_status_update>
	if (err) {
   20958:	4602      	mov	r2, r0
   2095a:	b118      	cbz	r0, 20964 <manage_connection+0x98>
		LOG_ERR("Failed to update device shadow, error: %d", err);
   2095c:	2145      	movs	r1, #69	; 0x45
   2095e:	483a      	ldr	r0, [pc, #232]	; (20a48 <manage_connection+0x17c>)
   20960:	f01c fc4b 	bl	3d1fa <z_log_minimal_printk>
			(void)await_cloud_disconnection(K_FOREVER);
   20964:	f04f 31ff 	mov.w	r1, #4294967295
   20968:	f04f 30ff 	mov.w	r0, #4294967295
   2096c:	f7ff feca 	bl	20704 <await_cloud_disconnection>
			LOG_INF("Disconnected from nRF Cloud");
   20970:	2149      	movs	r1, #73	; 0x49
   20972:	4836      	ldr	r0, [pc, #216]	; (20a4c <manage_connection+0x180>)
			LOG_INF("Failed to connect to nRF Cloud");
   20974:	f01c fc41 	bl	3d1fa <z_log_minimal_printk>
		}

		/* Reset cloud connection state before trying again. */
		reset_cloud();
   20978:	f7ff fdf8 	bl	2056c <reset_cloud>
   2097c:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   20980:	2100      	movs	r1, #0
   20982:	f018 f951 	bl	38c28 <z_impl_k_sleep>
		LOG_INF("Waiting for connection to LTE network...");
   20986:	2149      	movs	r1, #73	; 0x49
   20988:	4628      	mov	r0, r5
   2098a:	f01c fc36 	bl	3d1fa <z_log_minimal_printk>
		(void)await_lte_connection(K_FOREVER);
   2098e:	f04f 31ff 	mov.w	r1, #4294967295
   20992:	f04f 30ff 	mov.w	r0, #4294967295
   20996:	f7ff fe25 	bl	205e4 <await_lte_connection>
		LOG_INF("Connected to LTE network");
   2099a:	2149      	movs	r1, #73	; 0x49
   2099c:	4620      	mov	r0, r4
   2099e:	f01c fc2c 	bl	3d1fa <z_log_minimal_printk>
	LOG_INF("Connecting to nRF Cloud");
   209a2:	2149      	movs	r1, #73	; 0x49
   209a4:	482a      	ldr	r0, [pc, #168]	; (20a50 <manage_connection+0x184>)
   209a6:	f01c fc28 	bl	3d1fa <z_log_minimal_printk>
	struct nrf_cloud_init_param params = {
   209aa:	2300      	movs	r3, #0
   209ac:	9307      	str	r3, [sp, #28]
   209ae:	4b29      	ldr	r3, [pc, #164]	; (20a54 <manage_connection+0x188>)
	err = nrf_cloud_init(&params);
   209b0:	a806      	add	r0, sp, #24
	struct nrf_cloud_init_param params = {
   209b2:	9306      	str	r3, [sp, #24]
	err = nrf_cloud_init(&params);
   209b4:	f00b f922 	bl	2bbfc <nrf_cloud_init>
	if (err) {
   209b8:	4602      	mov	r2, r0
   209ba:	2800      	cmp	r0, #0
   209bc:	d1af      	bne.n	2091e <manage_connection+0x52>
		LOG_INF("Next connection retry in %d seconds",
   209be:	4e26      	ldr	r6, [pc, #152]	; (20a58 <manage_connection+0x18c>)
			LOG_ERR("cloud_connect, error: %d", err);
   209c0:	4f26      	ldr	r7, [pc, #152]	; (20a5c <manage_connection+0x190>)
		LOG_INF("Next connection retry in %d seconds",
   209c2:	221e      	movs	r2, #30
   209c4:	2149      	movs	r1, #73	; 0x49
   209c6:	4630      	mov	r0, r6
   209c8:	f01c fc17 	bl	3d1fa <z_log_minimal_printk>
		err = nrf_cloud_connect(NULL);
   209cc:	2000      	movs	r0, #0
   209ce:	f00b f99d 	bl	2bd0c <nrf_cloud_connect>
		if (err) {
   209d2:	4602      	mov	r2, r0
   209d4:	b118      	cbz	r0, 209de <manage_connection+0x112>
			LOG_ERR("cloud_connect, error: %d", err);
   209d6:	2145      	movs	r1, #69	; 0x45
   209d8:	4638      	mov	r0, r7
   209da:	f01c fc0e 	bl	3d1fa <z_log_minimal_printk>
		if (await_cloud_connected(
   209de:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   209e2:	2100      	movs	r1, #0
   209e4:	f7ff fe0e 	bl	20604 <await_date_time_known>
   209e8:	2800      	cmp	r0, #0
   209ea:	d0ea      	beq.n	209c2 <manage_connection+0xf6>
	return z_impl_k_event_wait(event, events, reset, timeout);
   209ec:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   209f0:	2300      	movs	r3, #0
   209f2:	2114      	movs	r1, #20
   209f4:	e9cd 2300 	strd	r2, r3, [sp]
   209f8:	4819      	ldr	r0, [pc, #100]	; (20a60 <manage_connection+0x194>)
   209fa:	2200      	movs	r2, #0
   209fc:	f020 fff3 	bl	419e6 <z_impl_k_event_wait>
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   20a00:	2804      	cmp	r0, #4
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   20a02:	f04f 0149 	mov.w	r1, #73	; 0x49
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   20a06:	d091      	beq.n	2092c <manage_connection+0x60>
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   20a08:	4816      	ldr	r0, [pc, #88]	; (20a64 <manage_connection+0x198>)
   20a0a:	f01c fbf6 	bl	3d1fa <z_log_minimal_printk>
		reset_cloud();
   20a0e:	f7ff fdad 	bl	2056c <reset_cloud>
		return -ETIMEDOUT;
   20a12:	e788      	b.n	20926 <manage_connection+0x5a>
   20a14:	000443c1 	.word	0x000443c1
   20a18:	00044402 	.word	0x00044402
   20a1c:	000205c9 	.word	0x000205c9
   20a20:	00044416 	.word	0x00044416
   20a24:	00044651 	.word	0x00044651
   20a28:	000444a1 	.word	0x000444a1
   20a2c:	000444cf 	.word	0x000444cf
   20a30:	00044448 	.word	0x00044448
   20a34:	00020749 	.word	0x00020749
   20a38:	00044473 	.word	0x00044473
   20a3c:	0004450a 	.word	0x0004450a
   20a40:	0004462d 	.word	0x0004462d
   20a44:	000445c1 	.word	0x000445c1
   20a48:	000445dd 	.word	0x000445dd
   20a4c:	0004460c 	.word	0x0004460c
   20a50:	000444ed 	.word	0x000444ed
   20a54:	0002067d 	.word	0x0002067d
   20a58:	0004453d 	.word	0x0004453d
   20a5c:	00044566 	.word	0x00044566
   20a60:	200150f0 	.word	0x200150f0
   20a64:	00044584 	.word	0x00044584

00020a68 <on_fota_downloaded>:

/* Called from nRF Cloud event handler in connection.c */
void on_fota_downloaded(void)
{
	/* Reboot on successful FOTA download. (Thus, enabling the new firmware!) */
	LOG_WRN("Rebooting...");
   20a68:	4803      	ldr	r0, [pc, #12]	; (20a78 <on_fota_downloaded+0x10>)
   20a6a:	2157      	movs	r1, #87	; 0x57
{
   20a6c:	b508      	push	{r3, lr}
	LOG_WRN("Rebooting...");
   20a6e:	f01c fbc4 	bl	3d1fa <z_log_minimal_printk>
	LOG_PANIC();
	sys_reboot(SYS_REBOOT_COLD);
   20a72:	2001      	movs	r0, #1
   20a74:	f000 ffda 	bl	21a2c <sys_reboot>
   20a78:	000446aa 	.word	0x000446aa

00020a7c <location_event_handler>:
		}
	}
}

static void location_event_handler(const struct location_event_data *event_data)
{
   20a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (event_data->id) {
   20a7e:	7803      	ldrb	r3, [r0, #0]
{
   20a80:	4604      	mov	r4, r0
	switch (event_data->id) {
   20a82:	2b01      	cmp	r3, #1
{
   20a84:	b087      	sub	sp, #28
	switch (event_data->id) {
   20a86:	d10f      	bne.n	20aa8 <location_event_handler+0x2c>
	case LOCATION_EVT_LOCATION:
		LOG_DBG("Location Event: Got location");
		if (location_update_handler) {
   20a88:	4b08      	ldr	r3, [pc, #32]	; (20aac <location_event_handler+0x30>)
   20a8a:	681f      	ldr	r7, [r3, #0]
   20a8c:	b167      	cbz	r7, 20aa8 <location_event_handler+0x2c>
			/* Pass received location data along to our handler. */
			location_update_handler(event_data->location);
   20a8e:	466d      	mov	r5, sp
   20a90:	f100 0618 	add.w	r6, r0, #24
   20a94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20a98:	e896 0003 	ldmia.w	r6, {r0, r1}
   20a9c:	e885 0003 	stmia.w	r5, {r0, r1}
   20aa0:	f104 0008 	add.w	r0, r4, #8
   20aa4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   20aa6:	47b8      	blx	r7

	default:
		LOG_DBG("Location Event: Unknown event");
		break;
	}
}
   20aa8:	b007      	add	sp, #28
   20aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20aac:	200190b0 	.word	0x200190b0

00020ab0 <gnss_antenna_configure>:
{
   20ab0:	b508      	push	{r3, lr}
	if (ret != 0) {
   20ab2:	b9c8      	cbnz	r0, 20ae8 <gnss_antenna_configure+0x38>
	if (strlen(CONFIG_GNSS_AT_MAGPIO) > 0) {
   20ab4:	480d      	ldr	r0, [pc, #52]	; (20aec <gnss_antenna_configure+0x3c>)
   20ab6:	f7fc fbc4 	bl	1d242 <strlen>
   20aba:	b138      	cbz	r0, 20acc <gnss_antenna_configure+0x1c>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_MAGPIO);
   20abc:	490b      	ldr	r1, [pc, #44]	; (20aec <gnss_antenna_configure+0x3c>)
   20abe:	480c      	ldr	r0, [pc, #48]	; (20af0 <gnss_antenna_configure+0x40>)
   20ac0:	f014 fdbe 	bl	35640 <nrf_modem_at_printf>
		if (err) {
   20ac4:	b110      	cbz	r0, 20acc <gnss_antenna_configure+0x1c>
			printk("Failed to set MAGPIO configuration\n");
   20ac6:	480b      	ldr	r0, [pc, #44]	; (20af4 <gnss_antenna_configure+0x44>)
   20ac8:	f01c f97a 	bl	3cdc0 <printk>
	if (strlen(CONFIG_GNSS_AT_COEX0) > 0) {
   20acc:	480a      	ldr	r0, [pc, #40]	; (20af8 <gnss_antenna_configure+0x48>)
   20ace:	f7fc fbb8 	bl	1d242 <strlen>
   20ad2:	b148      	cbz	r0, 20ae8 <gnss_antenna_configure+0x38>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_COEX0);
   20ad4:	4908      	ldr	r1, [pc, #32]	; (20af8 <gnss_antenna_configure+0x48>)
   20ad6:	4806      	ldr	r0, [pc, #24]	; (20af0 <gnss_antenna_configure+0x40>)
   20ad8:	f014 fdb2 	bl	35640 <nrf_modem_at_printf>
		if (err) {
   20adc:	b120      	cbz	r0, 20ae8 <gnss_antenna_configure+0x38>
}
   20ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			printk("Failed to set COEX0 configuration\n");
   20ae2:	4806      	ldr	r0, [pc, #24]	; (20afc <gnss_antenna_configure+0x4c>)
   20ae4:	f01c b96c 	b.w	3cdc0 <printk>
}
   20ae8:	bd08      	pop	{r3, pc}
   20aea:	bf00      	nop
   20aec:	000446c9 	.word	0x000446c9
   20af0:	0004abfc 	.word	0x0004abfc
   20af4:	000483bf 	.word	0x000483bf
   20af8:	000446e8 	.word	0x000446e8
   20afc:	000483e7 	.word	0x000483e7

00020b00 <location_assistance_data_handler>:
{
   20b00:	b538      	push	{r3, r4, r5, lr}
   20b02:	4604      	mov	r4, r0
   20b04:	460d      	mov	r5, r1
		err = nrf_cloud_agps_process(buf, len);
   20b06:	f00c fb37 	bl	2d178 <nrf_cloud_agps_process>
		if (err) {
   20b0a:	4602      	mov	r2, r0
   20b0c:	b1b0      	cbz	r0, 20b3c <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG) {
   20b0e:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   20b12:	d003      	beq.n	20b1c <location_assistance_data_handler+0x1c>
				LOG_WRN("Unable to process A-GPS data, error: %d", err);
   20b14:	2157      	movs	r1, #87	; 0x57
   20b16:	480a      	ldr	r0, [pc, #40]	; (20b40 <location_assistance_data_handler+0x40>)
   20b18:	f01c fb6f 	bl	3d1fa <z_log_minimal_printk>
		err = nrf_cloud_pgps_process(buf, len);
   20b1c:	4629      	mov	r1, r5
   20b1e:	4620      	mov	r0, r4
   20b20:	f00d ffa6 	bl	2ea70 <nrf_cloud_pgps_process>
		if (err) {
   20b24:	4602      	mov	r2, r0
   20b26:	b148      	cbz	r0, 20b3c <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG && err != -EFTYPE) {
   20b28:	f020 0302 	bic.w	r3, r0, #2
   20b2c:	334f      	adds	r3, #79	; 0x4f
   20b2e:	d005      	beq.n	20b3c <location_assistance_data_handler+0x3c>
}
   20b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				LOG_WRN("Unable to process P-GPS data, error: %d", err);
   20b34:	2157      	movs	r1, #87	; 0x57
   20b36:	4803      	ldr	r0, [pc, #12]	; (20b44 <location_assistance_data_handler+0x44>)
   20b38:	f01c bb5f 	b.w	3d1fa <z_log_minimal_printk>
}
   20b3c:	bd38      	pop	{r3, r4, r5, pc}
   20b3e:	bf00      	nop
   20b40:	00044700 	.word	0x00044700
   20b44:	0004472d 	.word	0x0004472d

00020b48 <start_location_tracking>:

int start_location_tracking(location_update_cb_t handler_cb, int interval)
{
   20b48:	b530      	push	{r4, r5, lr}
   20b4a:	b08b      	sub	sp, #44	; 0x2c
   20b4c:	4604      	mov	r4, r0
   20b4e:	460d      	mov	r5, r1
	int err;

	if (!date_time_is_valid()) {
   20b50:	f01f f8bd 	bl	3fcce <date_time_is_valid>
   20b54:	b918      	cbnz	r0, 20b5e <start_location_tracking+0x16>
		LOG_WRN("Date and time unknown. Location Services results may suffer");
   20b56:	2157      	movs	r1, #87	; 0x57
   20b58:	4816      	ldr	r0, [pc, #88]	; (20bb4 <start_location_tracking+0x6c>)
   20b5a:	f01c fb4e 	bl	3d1fa <z_log_minimal_printk>
	}

	/* Update the location update handler. */
	location_update_handler = handler_cb;
   20b5e:	4b16      	ldr	r3, [pc, #88]	; (20bb8 <start_location_tracking+0x70>)

	/* Initialize the Location Services Library. */
	err = location_init(location_event_handler);
   20b60:	4816      	ldr	r0, [pc, #88]	; (20bbc <start_location_tracking+0x74>)
	location_update_handler = handler_cb;
   20b62:	601c      	str	r4, [r3, #0]
	err = location_init(location_event_handler);
   20b64:	f008 fede 	bl	29924 <location_init>
	if (err) {
   20b68:	4604      	mov	r4, r0
   20b6a:	b138      	cbz	r0, 20b7c <start_location_tracking+0x34>
		LOG_ERR("Initializing the Location library failed, error: %d", err);
   20b6c:	2145      	movs	r1, #69	; 0x45
   20b6e:	4602      	mov	r2, r0
   20b70:	4813      	ldr	r0, [pc, #76]	; (20bc0 <start_location_tracking+0x78>)
	 * This will cause the configured location_event_handler to start being called with
	 * location data.
	 */
	err = location_request(&config);
	if (err) {
		LOG_ERR("Requesting location failed, error: %d\n", err);
   20b72:	f01c fb42 	bl	3d1fa <z_log_minimal_printk>
		return err;
	}
	return 0;
}
   20b76:	4620      	mov	r0, r4
   20b78:	b00b      	add	sp, #44	; 0x2c
   20b7a:	bd30      	pop	{r4, r5, pc}
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   20b7c:	4b11      	ldr	r3, [pc, #68]	; (20bc4 <start_location_tracking+0x7c>)
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   20b7e:	2102      	movs	r1, #2
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   20b80:	881b      	ldrh	r3, [r3, #0]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   20b82:	aa01      	add	r2, sp, #4
   20b84:	a802      	add	r0, sp, #8
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   20b86:	f8ad 3004 	strh.w	r3, [sp, #4]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   20b8a:	f008 fedb 	bl	29944 <location_config_defaults_set>
		config.methods[0].gnss.timeout = CONFIG_GNSS_FIX_TIMEOUT_SECONDS;
   20b8e:	2328      	movs	r3, #40	; 0x28
   20b90:	f8ad 300c 	strh.w	r3, [sp, #12]
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   20b94:	2301      	movs	r3, #1
	err = location_request(&config);
   20b96:	a802      	add	r0, sp, #8
	config.interval = interval;
   20b98:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   20b9c:	f88d 300e 	strb.w	r3, [sp, #14]
	err = location_request(&config);
   20ba0:	f008 ff04 	bl	299ac <location_request>
	if (err) {
   20ba4:	4604      	mov	r4, r0
   20ba6:	2800      	cmp	r0, #0
   20ba8:	d0e5      	beq.n	20b76 <start_location_tracking+0x2e>
		LOG_ERR("Requesting location failed, error: %d\n", err);
   20baa:	4602      	mov	r2, r0
   20bac:	2145      	movs	r1, #69	; 0x45
   20bae:	4806      	ldr	r0, [pc, #24]	; (20bc8 <start_location_tracking+0x80>)
   20bb0:	e7df      	b.n	20b72 <start_location_tracking+0x2a>
   20bb2:	bf00      	nop
   20bb4:	0004475a 	.word	0x0004475a
   20bb8:	200190b0 	.word	0x200190b0
   20bbc:	00020a7d 	.word	0x00020a7d
   20bc0:	0004479b 	.word	0x0004479b
   20bc4:	00042f90 	.word	0x00042f90
   20bc8:	000447d4 	.word	0x000447d4

00020bcc <sht40_read>:
#include <stdio.h>

#include "sht40.h"

bool sht40_read(const struct device *dev_i2c, sht40_data *data)
{
   20bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20bce:	ed2d 8b02 	vpush	{d8}
    int ret;
    uint8_t sht40_buffer[6] = {0};
   20bd2:	2300      	movs	r3, #0
{
   20bd4:	b087      	sub	sp, #28
    uint8_t sht40_buffer[6] = {0};
   20bd6:	9301      	str	r3, [sp, #4]
   20bd8:	f8ad 3008 	strh.w	r3, [sp, #8]
	float t_ticks, rh_ticks = 0;
    uint8_t test[1] = {0xFD};
   20bdc:	23fd      	movs	r3, #253	; 0xfd
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
   20bde:	2501      	movs	r5, #1
   20be0:	f88d 3000 	strb.w	r3, [sp]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20be4:	2302      	movs	r3, #2
{
   20be6:	4604      	mov	r4, r0
   20be8:	460e      	mov	r6, r1
	msg.buf = (uint8_t *)buf;
   20bea:	f8cd d00c 	str.w	sp, [sp, #12]
	msg.len = num_bytes;
   20bee:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20bf0:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   20bf4:	6883      	ldr	r3, [r0, #8]
   20bf6:	a903      	add	r1, sp, #12
   20bf8:	689f      	ldr	r7, [r3, #8]
   20bfa:	462a      	mov	r2, r5
   20bfc:	2344      	movs	r3, #68	; 0x44
   20bfe:	47b8      	blx	r7

    ret = i2c_write(dev_i2c, test, 1, SHT40_ADDR);
    if (ret != 0)
   20c00:	4601      	mov	r1, r0
   20c02:	b138      	cbz	r0, 20c14 <sht40_read+0x48>
    {
    	printf("Failed to write I2C device address (err %i)\n", ret);
   20c04:	482b      	ldr	r0, [pc, #172]	; (20cb4 <sht40_read+0xe8>)
    k_msleep(10);

    ret = i2c_read(dev_i2c, sht40_buffer, 6, SHT40_ADDR);
    if (ret != 0)
    {
    	printf("Failed to read I2C device address (err %i)\n", ret);
   20c06:	f01a f829 	bl	3ac5c <iprintf>
    	return true;
   20c0a:	4628      	mov	r0, r5

    data->temperature = -45 + 175 * t_ticks / 65535;
    data->humidity = -6 + 125 * rh_ticks / 65535;

    return false;
}
   20c0c:	b007      	add	sp, #28
   20c0e:	ecbd 8b02 	vpop	{d8}
   20c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sleep(timeout);
   20c14:	2100      	movs	r1, #0
   20c16:	f44f 70a4 	mov.w	r0, #328	; 0x148
   20c1a:	f018 f805 	bl	38c28 <z_impl_k_sleep>
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
   20c1e:	ab01      	add	r3, sp, #4
   20c20:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   20c22:	2306      	movs	r3, #6
   20c24:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   20c26:	2303      	movs	r3, #3
   20c28:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   20c2c:	68a3      	ldr	r3, [r4, #8]
   20c2e:	4620      	mov	r0, r4
   20c30:	689f      	ldr	r7, [r3, #8]
   20c32:	462a      	mov	r2, r5
   20c34:	2344      	movs	r3, #68	; 0x44
   20c36:	a903      	add	r1, sp, #12
   20c38:	47b8      	blx	r7
    if (ret != 0)
   20c3a:	4604      	mov	r4, r0
   20c3c:	b110      	cbz	r0, 20c44 <sht40_read+0x78>
    	printf("Failed to read I2C device address (err %i)\n", ret);
   20c3e:	4601      	mov	r1, r0
   20c40:	481d      	ldr	r0, [pc, #116]	; (20cb8 <sht40_read+0xec>)
   20c42:	e7e0      	b.n	20c06 <sht40_read+0x3a>
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20c44:	f89d 2007 	ldrb.w	r2, [sp, #7]
   20c48:	f89d 3008 	ldrb.w	r3, [sp, #8]
    data->temperature = -45 + 175 * t_ticks / 65535;
   20c4c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 20cbc <sht40_read+0xf0>
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20c50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   20c54:	ee07 3a90 	vmov	s15, r3
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   20c58:	f89d 2004 	ldrb.w	r2, [sp, #4]
   20c5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20c60:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   20c64:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   20c68:	ee07 3a90 	vmov	s15, r3
   20c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   20c70:	eddf 8a13 	vldr	s17, [pc, #76]	; 20cc0 <sht40_read+0xf4>
   20c74:	ee67 7a87 	vmul.f32	s15, s15, s14
   20c78:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   20c7c:	eddf 7a11 	vldr	s15, [pc, #68]	; 20cc4 <sht40_read+0xf8>
   20c80:	ee77 7a67 	vsub.f32	s15, s14, s15
   20c84:	ee17 0a90 	vmov	r0, s15
   20c88:	f7fb fd3e 	bl	1c708 <__aeabi_f2d>
    data->humidity = -6 + 125 * rh_ticks / 65535;
   20c8c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 20cc8 <sht40_read+0xfc>
   20c90:	ee68 7a27 	vmul.f32	s15, s16, s15
   20c94:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   20c98:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   20c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   20ca0:	e9c6 0100 	strd	r0, r1, [r6]
    data->humidity = -6 + 125 * rh_ticks / 65535;
   20ca4:	ee17 0a90 	vmov	r0, s15
   20ca8:	f7fb fd2e 	bl	1c708 <__aeabi_f2d>
   20cac:	e9c6 0102 	strd	r0, r1, [r6, #8]
    return false;
   20cb0:	4620      	mov	r0, r4
   20cb2:	e7ab      	b.n	20c0c <sht40_read+0x40>
   20cb4:	00044812 	.word	0x00044812
   20cb8:	0004483f 	.word	0x0004483f
   20cbc:	432f0000 	.word	0x432f0000
   20cc0:	477fff00 	.word	0x477fff00
   20cc4:	42340000 	.word	0x42340000
   20cc8:	42fa0000 	.word	0x42fa0000

00020ccc <dfrWakeUp>:

bool dfrWakeUp(const struct device *dev_i2c)
{
    int ret = 0;
    uint8_t mode[1] = {0x00};
   20ccc:	2300      	movs	r3, #0
{
   20cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20cd2:	b086      	sub	sp, #24
   20cd4:	4607      	mov	r7, r0
	msg.len = num_bytes;
   20cd6:	2501      	movs	r5, #1
    uint8_t mode[1] = {0x00};
   20cd8:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t regData[2] = {POWER_MODE_REGISTER, WAKE_UP_MODE};
   20cdc:	f44f 7385 	mov.w	r3, #266	; 0x10a
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20ce0:	f04f 0802 	mov.w	r8, #2

    printf("Checking sleep mode\n");
   20ce4:	4822      	ldr	r0, [pc, #136]	; (20d70 <dfrWakeUp+0xa4>)
    uint8_t regData[2] = {POWER_MODE_REGISTER, WAKE_UP_MODE};
   20ce6:	f8ad 3008 	strh.w	r3, [sp, #8]
	msg.buf = (uint8_t *)buf;
   20cea:	ae02      	add	r6, sp, #8
    printf("Checking sleep mode\n");
   20cec:	f019 ffb6 	bl	3ac5c <iprintf>
	return i2c_transfer(dev, &msg, 1, addr);
   20cf0:	a903      	add	r1, sp, #12
   20cf2:	462a      	mov	r2, r5
   20cf4:	4638      	mov	r0, r7
	msg.buf = (uint8_t *)buf;
   20cf6:	9603      	str	r6, [sp, #12]
	msg.len = num_bytes;
   20cf8:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20cfa:	f88d 8014 	strb.w	r8, [sp, #20]
	return i2c_transfer(dev, &msg, 1, addr);
   20cfe:	f01b ffc1 	bl	3cc84 <i2c_transfer.constprop.0>

    ret = i2c_write(dev_i2c, regData, 1, MICS_ADDRESS_3);
    if (ret != 0)
   20d02:	4601      	mov	r1, r0
   20d04:	b130      	cbz	r0, 20d14 <dfrWakeUp+0x48>
    }

    ret = i2c_read(dev_i2c, mode, 1, MICS_ADDRESS_3);
    if (ret != 0)
    {
        printf("Failed to write I2C device address (err %i)\n", ret);
   20d06:	481b      	ldr	r0, [pc, #108]	; (20d74 <dfrWakeUp+0xa8>)
    if (mode[0] == 0)
    {
        ret = i2c_write(dev_i2c, regData, 2, MICS_ADDRESS_3);
        if (ret != 0)
        {
            printf("Failed to write I2C device address SLEEP (err %i)\n", ret);
   20d08:	f019 ffa8 	bl	3ac5c <iprintf>
    else
    {
        printf("Device is woken up\n");
    }
    return 0;
}
   20d0c:	4628      	mov	r0, r5
   20d0e:	b006      	add	sp, #24
   20d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	msg.buf = buf;
   20d14:	ab01      	add	r3, sp, #4
	msg.len = num_bytes;
   20d16:	e9cd 3503 	strd	r3, r5, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   20d1a:	2303      	movs	r3, #3

	return i2c_transfer(dev, &msg, 1, addr);
   20d1c:	462a      	mov	r2, r5
   20d1e:	4638      	mov	r0, r7
   20d20:	a903      	add	r1, sp, #12
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   20d22:	f88d 3014 	strb.w	r3, [sp, #20]
	return i2c_transfer(dev, &msg, 1, addr);
   20d26:	f01b ffad 	bl	3cc84 <i2c_transfer.constprop.0>
    if (ret != 0)
   20d2a:	4604      	mov	r4, r0
   20d2c:	b108      	cbz	r0, 20d32 <dfrWakeUp+0x66>
        printf("Failed to write I2C device address (err %i)\n", ret);
   20d2e:	4601      	mov	r1, r0
   20d30:	e7e9      	b.n	20d06 <dfrWakeUp+0x3a>
    if (mode[0] == 0)
   20d32:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20d36:	b9bb      	cbnz	r3, 20d68 <dfrWakeUp+0x9c>
	return i2c_transfer(dev, &msg, 1, addr);
   20d38:	462a      	mov	r2, r5
   20d3a:	4638      	mov	r0, r7
   20d3c:	a903      	add	r1, sp, #12
	msg.len = num_bytes;
   20d3e:	e9cd 6803 	strd	r6, r8, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20d42:	f88d 8014 	strb.w	r8, [sp, #20]
	return i2c_transfer(dev, &msg, 1, addr);
   20d46:	f01b ff9d 	bl	3cc84 <i2c_transfer.constprop.0>
        if (ret != 0)
   20d4a:	4604      	mov	r4, r0
   20d4c:	b110      	cbz	r0, 20d54 <dfrWakeUp+0x88>
            printf("Failed to write I2C device address SLEEP (err %i)\n", ret);
   20d4e:	4601      	mov	r1, r0
   20d50:	4809      	ldr	r0, [pc, #36]	; (20d78 <dfrWakeUp+0xac>)
   20d52:	e7d9      	b.n	20d08 <dfrWakeUp+0x3c>
        printf("Wake sensor up\n");
   20d54:	4809      	ldr	r0, [pc, #36]	; (20d7c <dfrWakeUp+0xb0>)
   20d56:	f019 ff81 	bl	3ac5c <iprintf>
   20d5a:	f640 40cd 	movw	r0, #3277	; 0xccd
   20d5e:	2100      	movs	r1, #0
   20d60:	f017 ff62 	bl	38c28 <z_impl_k_sleep>
    return 0;
   20d64:	4625      	mov	r5, r4
   20d66:	e7d1      	b.n	20d0c <dfrWakeUp+0x40>
        printf("Device is woken up\n");
   20d68:	4805      	ldr	r0, [pc, #20]	; (20d80 <dfrWakeUp+0xb4>)
   20d6a:	f019 ff77 	bl	3ac5c <iprintf>
   20d6e:	e7f9      	b.n	20d64 <dfrWakeUp+0x98>
   20d70:	0004486b 	.word	0x0004486b
   20d74:	00044812 	.word	0x00044812
   20d78:	00044880 	.word	0x00044880
   20d7c:	000448b3 	.word	0x000448b3
   20d80:	000448c3 	.word	0x000448c3

00020d84 <getSensorData>:

int16_t getSensorData(const struct device *dev_i2c, dfr_data *dfr_data)
{
   20d84:	b570      	push	{r4, r5, r6, lr}
    int ret = 0;
    int wb[1] = {OX_REGISTER_HIGH};
    uint8_t recv_data[20] = {0x00};
   20d86:	2600      	movs	r6, #0
   20d88:	2304      	movs	r3, #4
{
   20d8a:	b08c      	sub	sp, #48	; 0x30
   20d8c:	4605      	mov	r5, r0
    uint8_t recv_data[20] = {0x00};
   20d8e:	2210      	movs	r2, #16
{
   20d90:	460c      	mov	r4, r1
    uint8_t recv_data[20] = {0x00};
   20d92:	a802      	add	r0, sp, #8
   20d94:	4631      	mov	r1, r6
   20d96:	e9cd 3600 	strd	r3, r6, [sp]
   20d9a:	f020 fee1 	bl	41b60 <memset>
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
   20d9e:	2301      	movs	r3, #1
   20da0:	9307      	str	r3, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
   20da2:	ab01      	add	r3, sp, #4
   20da4:	9309      	str	r3, [sp, #36]	; 0x24
	msg[1].len = num_read;
   20da6:	2306      	movs	r3, #6
   20da8:	930a      	str	r3, [sp, #40]	; 0x28
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20daa:	2307      	movs	r3, #7

	return i2c_transfer(dev, msg, 2, addr);
   20dac:	2202      	movs	r2, #2
   20dae:	4628      	mov	r0, r5
   20db0:	a906      	add	r1, sp, #24
	msg[0].buf = (uint8_t *)write_buf;
   20db2:	f8cd d018 	str.w	sp, [sp, #24]
	msg[0].flags = I2C_MSG_WRITE;
   20db6:	f88d 6020 	strb.w	r6, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20dba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	return i2c_transfer(dev, msg, 2, addr);
   20dbe:	f01b ff61 	bl	3cc84 <i2c_transfer.constprop.0>

    ret = i2c_write_read(dev_i2c, MICS_ADDRESS_3, wb, 1, recv_data, 6);
    if (ret != 0)
   20dc2:	b138      	cbz	r0, 20dd4 <getSensorData+0x50>
    {
        printf("Failed to write I2C device address for getting sensor data (err %i)\n", ret);
   20dc4:	4601      	mov	r1, r0
   20dc6:	481f      	ldr	r0, [pc, #124]	; (20e44 <getSensorData+0xc0>)
   20dc8:	f019 ff48 	bl	3ac5c <iprintf>
        return ERROR;
   20dcc:	f04f 30ff 	mov.w	r0, #4294967295

    dfr_data->RS_R0_RED_data = (float)(dfr_data->powerData - dfr_data->redData) / (float)dfr_data->r0_red;
    dfr_data->RS_R0_OX_data = (float)(dfr_data->powerData - dfr_data->oxData) / (float)dfr_data->r0_ox;

    return 0;
}
   20dd0:	b00c      	add	sp, #48	; 0x30
   20dd2:	bd70      	pop	{r4, r5, r6, pc}
    dfr_data->oxData = (((uint16_t)recv_data[0] << 8) + (uint16_t)recv_data[1]);
   20dd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20dd8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    dfr_data->redData = (((uint16_t)recv_data[2] << 8) + (uint16_t)recv_data[3]);
   20ddc:	f89d 1006 	ldrb.w	r1, [sp, #6]
    dfr_data->oxData = (((uint16_t)recv_data[0] << 8) + (uint16_t)recv_data[1]);
   20de0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    dfr_data->redData = (((uint16_t)recv_data[2] << 8) + (uint16_t)recv_data[3]);
   20de4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfr_data->powerData = (((uint16_t)recv_data[4] << 8) + (uint16_t)recv_data[5]);
   20de8:	f89d 5008 	ldrb.w	r5, [sp, #8]
    dfr_data->redData = (((uint16_t)recv_data[2] << 8) + (uint16_t)recv_data[3]);
   20dec:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   20df0:	b299      	uxth	r1, r3
    dfr_data->powerData = (((uint16_t)recv_data[4] << 8) + (uint16_t)recv_data[5]);
   20df2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    dfr_data->oxData = (((uint16_t)recv_data[0] << 8) + (uint16_t)recv_data[1]);
   20df6:	b292      	uxth	r2, r2
    dfr_data->powerData = (((uint16_t)recv_data[4] << 8) + (uint16_t)recv_data[5]);
   20df8:	eb03 2305 	add.w	r3, r3, r5, lsl #8
   20dfc:	b29b      	uxth	r3, r3
    dfr_data->oxData = (((uint16_t)recv_data[0] << 8) + (uint16_t)recv_data[1]);
   20dfe:	81a2      	strh	r2, [r4, #12]
    dfr_data->powerData = (((uint16_t)recv_data[4] << 8) + (uint16_t)recv_data[5]);
   20e00:	8223      	strh	r3, [r4, #16]
    dfr_data->r0_ox = dfr_data->powerData - dfr_data->oxData;
   20e02:	1a9a      	subs	r2, r3, r2
    dfr_data->r0_red = dfr_data->powerData - dfr_data->redData;
   20e04:	1a5b      	subs	r3, r3, r1
    dfr_data->redData = (((uint16_t)recv_data[2] << 8) + (uint16_t)recv_data[3]);
   20e06:	81e1      	strh	r1, [r4, #14]
    dfr_data->r0_red = dfr_data->powerData - dfr_data->redData;
   20e08:	b219      	sxth	r1, r3
    dfr_data->RS_R0_RED_data = (float)(dfr_data->powerData - dfr_data->redData) / (float)dfr_data->r0_red;
   20e0a:	ee07 3a90 	vmov	s15, r3
   20e0e:	ee07 1a10 	vmov	s14, r1
   20e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   20e16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    dfr_data->r0_ox = dfr_data->powerData - dfr_data->oxData;
   20e1a:	b215      	sxth	r5, r2
    dfr_data->RS_R0_RED_data = (float)(dfr_data->powerData - dfr_data->redData) / (float)dfr_data->r0_red;
   20e1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
    dfr_data->RS_R0_OX_data = (float)(dfr_data->powerData - dfr_data->oxData) / (float)dfr_data->r0_ox;
   20e20:	ee07 2a90 	vmov	s15, r2
   20e24:	ee07 5a10 	vmov	s14, r5
   20e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   20e2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    dfr_data->RS_R0_RED_data = (float)(dfr_data->powerData - dfr_data->redData) / (float)dfr_data->r0_red;
   20e30:	edc4 6a05 	vstr	s13, [r4, #20]
    dfr_data->RS_R0_OX_data = (float)(dfr_data->powerData - dfr_data->oxData) / (float)dfr_data->r0_ox;
   20e34:	eec7 6a87 	vdiv.f32	s13, s15, s14
    dfr_data->r0_ox = dfr_data->powerData - dfr_data->oxData;
   20e38:	8125      	strh	r5, [r4, #8]
    dfr_data->RS_R0_OX_data = (float)(dfr_data->powerData - dfr_data->oxData) / (float)dfr_data->r0_ox;
   20e3a:	edc4 6a06 	vstr	s13, [r4, #24]
    dfr_data->r0_red = dfr_data->powerData - dfr_data->redData;
   20e3e:	8161      	strh	r1, [r4, #10]
    return 0;
   20e40:	e7c6      	b.n	20dd0 <getSensorData+0x4c>
   20e42:	bf00      	nop
   20e44:	000448d7 	.word	0x000448d7

00020e48 <dfrWarmUpTime>:

bool dfrWarmUpTime(const struct device *dev_i2c, dfr_data *dfr_data)
{
   20e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint64_t delayTime = 60000000000;
    uint64_t total_cycles;
    uint64_t total_ns;
    static uint8_t flag = 0;

    if (flag == 0)
   20e4a:	4e1a      	ldr	r6, [pc, #104]	; (20eb4 <dfrWarmUpTime+0x6c>)
{
   20e4c:	4604      	mov	r4, r0
    if (flag == 0)
   20e4e:	7833      	ldrb	r3, [r6, #0]
{
   20e50:	460d      	mov	r5, r1
   20e52:	4f19      	ldr	r7, [pc, #100]	; (20eb8 <dfrWarmUpTime+0x70>)
    if (flag == 0)
   20e54:	b973      	cbnz	r3, 20e74 <dfrWarmUpTime+0x2c>
    {
        flag = 1;
   20e56:	2301      	movs	r3, #1
        current_time = 0;
   20e58:	2200      	movs	r2, #0
        flag = 1;
   20e5a:	7033      	strb	r3, [r6, #0]
        current_time = 0;
   20e5c:	2300      	movs	r3, #0
   20e5e:	e9c7 2300 	strd	r2, r3, [r7]
        timing_init();
   20e62:	f003 fc45 	bl	246f0 <timing_init>
        timing_start();
   20e66:	f003 fc4f 	bl	24708 <timing_start>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_counter_get();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_counter_get();
#else
	return arch_timing_counter_get();
   20e6a:	f002 fd99 	bl	239a0 <arch_timing_counter_get>
        start_time = timing_counter_get();
   20e6e:	4b13      	ldr	r3, [pc, #76]	; (20ebc <dfrWarmUpTime+0x74>)
   20e70:	e9c3 0100 	strd	r0, r1, [r3]
   20e74:	f002 fd94 	bl	239a0 <arch_timing_counter_get>
    }

    current_time = timing_counter_get();
   20e78:	e9c7 0100 	strd	r0, r1, [r7]
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_cycles_get(start, end);
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_cycles_get(start, end);
#else
	return arch_timing_cycles_get(start, end);
   20e7c:	490e      	ldr	r1, [pc, #56]	; (20eb8 <dfrWarmUpTime+0x70>)
   20e7e:	480f      	ldr	r0, [pc, #60]	; (20ebc <dfrWarmUpTime+0x74>)
   20e80:	f01c ffd0 	bl	3de24 <arch_timing_cycles_get>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_cycles_to_ns(cycles);
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_cycles_to_ns(cycles);
#else
	return arch_timing_cycles_to_ns(cycles);
   20e84:	f01c ffd7 	bl	3de36 <arch_timing_cycles_to_ns>

    total_cycles = timing_cycles_get(&start_time, &current_time);
    total_ns = timing_cycles_to_ns(total_cycles);
    // printf("Elapsed Time = %llu\n", total_ns);
    if (total_ns < delayTime)
   20e88:	4b0d      	ldr	r3, [pc, #52]	; (20ec0 <dfrWarmUpTime+0x78>)
   20e8a:	4283      	cmp	r3, r0
   20e8c:	f04f 030d 	mov.w	r3, #13
   20e90:	418b      	sbcs	r3, r1
   20e92:	f04f 0300 	mov.w	r3, #0
   20e96:	d20a      	bcs.n	20eae <dfrWarmUpTime+0x66>
    {
        return false;
    }

    flag = 0;
   20e98:	7033      	strb	r3, [r6, #0]
    timing_stop();
   20e9a:	f003 fc43 	bl	24724 <timing_stop>

    if (getSensorData(dev_i2c, dfr_data) == ERROR)
   20e9e:	4629      	mov	r1, r5
   20ea0:	4620      	mov	r0, r4
   20ea2:	f7ff ff6f 	bl	20d84 <getSensorData>
   20ea6:	3001      	adds	r0, #1
   20ea8:	bf18      	it	ne
   20eaa:	2001      	movne	r0, #1
    {
        return false;
    }

    return true;
   20eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
   20eae:	4618      	mov	r0, r3
   20eb0:	e7fc      	b.n	20eac <dfrWarmUpTime+0x64>
   20eb2:	bf00      	nop
   20eb4:	2001a5ba 	.word	0x2001a5ba
   20eb8:	200153c0 	.word	0x200153c0
   20ebc:	200153c8 	.word	0x200153c8
   20ec0:	f84757ff 	.word	0xf84757ff

00020ec4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   20ec4:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   20ec6:	4c0a      	ldr	r4, [pc, #40]	; (20ef0 <crc8_ccitt+0x2c>)
   20ec8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   20eca:	4291      	cmp	r1, r2
   20ecc:	d100      	bne.n	20ed0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   20ece:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   20ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
   20ed4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   20ed6:	0903      	lsrs	r3, r0, #4
   20ed8:	5ce3      	ldrb	r3, [r4, r3]
   20eda:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   20ede:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   20ee0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   20ee4:	5ce0      	ldrb	r0, [r4, r3]
   20ee6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   20eea:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   20eec:	e7ed      	b.n	20eca <crc8_ccitt+0x6>
   20eee:	bf00      	nop
   20ef0:	0004491c 	.word	0x0004491c

00020ef4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   20ef4:	2803      	cmp	r0, #3
{
   20ef6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   20ef8:	d906      	bls.n	20f08 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   20efa:	f01c ffd6 	bl	3deaa <__errno>
   20efe:	2309      	movs	r3, #9
   20f00:	6003      	str	r3, [r0, #0]
   20f02:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   20f06:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20f08:	4b04      	ldr	r3, [pc, #16]	; (20f1c <_check_fd+0x28>)
   20f0a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   20f0e:	3008      	adds	r0, #8
   20f10:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   20f14:	2b00      	cmp	r3, #0
   20f16:	d0f0      	beq.n	20efa <_check_fd+0x6>
	return 0;
   20f18:	2000      	movs	r0, #0
   20f1a:	e7f4      	b.n	20f06 <_check_fd+0x12>
   20f1c:	200190b4 	.word	0x200190b4

00020f20 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   20f20:	b570      	push	{r4, r5, r6, lr}
   20f22:	4604      	mov	r4, r0
   20f24:	460d      	mov	r5, r1
   20f26:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20f28:	f7ff ffe4 	bl	20ef4 <_check_fd>
   20f2c:	2800      	cmp	r0, #0
   20f2e:	db09      	blt.n	20f44 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   20f30:	4b06      	ldr	r3, [pc, #24]	; (20f4c <z_get_fd_obj+0x2c>)
   20f32:	0160      	lsls	r0, r4, #5
   20f34:	b145      	cbz	r5, 20f48 <z_get_fd_obj+0x28>
   20f36:	181a      	adds	r2, r3, r0
   20f38:	6852      	ldr	r2, [r2, #4]
   20f3a:	42aa      	cmp	r2, r5
   20f3c:	d004      	beq.n	20f48 <z_get_fd_obj+0x28>
		errno = err;
   20f3e:	f01c ffb4 	bl	3deaa <__errno>
   20f42:	6006      	str	r6, [r0, #0]
		return NULL;
   20f44:	2000      	movs	r0, #0
   20f46:	e000      	b.n	20f4a <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   20f48:	5818      	ldr	r0, [r3, r0]
}
   20f4a:	bd70      	pop	{r4, r5, r6, pc}
   20f4c:	200190b4 	.word	0x200190b4

00020f50 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   20f50:	b570      	push	{r4, r5, r6, lr}
   20f52:	4604      	mov	r4, r0
   20f54:	460e      	mov	r6, r1
   20f56:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20f58:	f7ff ffcc 	bl	20ef4 <_check_fd>
   20f5c:	2800      	cmp	r0, #0
   20f5e:	db0c      	blt.n	20f7a <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   20f60:	4b07      	ldr	r3, [pc, #28]	; (20f80 <z_get_fd_obj_and_vtable+0x30>)
   20f62:	0161      	lsls	r1, r4, #5
   20f64:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20f68:	6862      	ldr	r2, [r4, #4]
   20f6a:	6032      	str	r2, [r6, #0]

	if (lock) {
   20f6c:	b11d      	cbz	r5, 20f76 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   20f6e:	f101 020c 	add.w	r2, r1, #12
   20f72:	441a      	add	r2, r3
   20f74:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   20f76:	5858      	ldr	r0, [r3, r1]
}
   20f78:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   20f7a:	2000      	movs	r0, #0
   20f7c:	e7fc      	b.n	20f78 <z_get_fd_obj_and_vtable+0x28>
   20f7e:	bf00      	nop
   20f80:	200190b4 	.word	0x200190b4

00020f84 <z_reserve_fd>:

int z_reserve_fd(void)
{
   20f84:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20f86:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   20f88:	f04f 32ff 	mov.w	r2, #4294967295
   20f8c:	f04f 33ff 	mov.w	r3, #4294967295
   20f90:	4814      	ldr	r0, [pc, #80]	; (20fe4 <z_reserve_fd+0x60>)
   20f92:	f015 ffab 	bl	36eec <z_impl_k_mutex_lock>
   20f96:	4a14      	ldr	r2, [pc, #80]	; (20fe8 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   20f98:	0163      	lsls	r3, r4, #5
   20f9a:	e8d2 1faf 	lda	r1, [r2]
   20f9e:	b179      	cbz	r1, 20fc0 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20fa0:	3401      	adds	r4, #1
   20fa2:	2c04      	cmp	r4, #4
   20fa4:	f102 0220 	add.w	r2, r2, #32
   20fa8:	d1f6      	bne.n	20f98 <z_reserve_fd+0x14>
	errno = ENFILE;
   20faa:	f01c ff7e 	bl	3deaa <__errno>
   20fae:	2317      	movs	r3, #23
	return -1;
   20fb0:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   20fb4:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   20fb6:	480b      	ldr	r0, [pc, #44]	; (20fe4 <z_reserve_fd+0x60>)
   20fb8:	f016 f86a 	bl	37090 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   20fbc:	4620      	mov	r0, r4
   20fbe:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20fc0:	e8d2 0fef 	ldaex	r0, [r2]
   20fc4:	3001      	adds	r0, #1
   20fc6:	e8c2 0fec 	stlex	ip, r0, [r2]
   20fca:	f1bc 0f00 	cmp.w	ip, #0
   20fce:	d1f7      	bne.n	20fc0 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   20fd0:	4806      	ldr	r0, [pc, #24]	; (20fec <z_reserve_fd+0x68>)
   20fd2:	18c2      	adds	r2, r0, r3
   20fd4:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   20fd6:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   20fd8:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   20fda:	4418      	add	r0, r3
   20fdc:	f020 fb76 	bl	416cc <z_impl_k_mutex_init>
   20fe0:	e7e9      	b.n	20fb6 <z_reserve_fd+0x32>
   20fe2:	bf00      	nop
   20fe4:	20014f18 	.word	0x20014f18
   20fe8:	200190bc 	.word	0x200190bc
   20fec:	200190b4 	.word	0x200190b4

00020ff0 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   20ff0:	b410      	push	{r4}
   20ff2:	4604      	mov	r4, r0
   20ff4:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   20ff6:	4b0a      	ldr	r3, [pc, #40]	; (21020 <z_finalize_fd+0x30>)
   20ff8:	0162      	lsls	r2, r4, #5
   20ffa:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20ffe:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   21000:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   21002:	b148      	cbz	r0, 21018 <z_finalize_fd+0x28>
   21004:	68c4      	ldr	r4, [r0, #12]
   21006:	b13c      	cbz	r4, 21018 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   21008:	320c      	adds	r2, #12
   2100a:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   2100c:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   21010:	f240 1205 	movw	r2, #261	; 0x105
   21014:	f01b be4c 	b.w	3ccb0 <z_fdtable_call_ioctl.constprop.0>
}
   21018:	f85d 4b04 	ldr.w	r4, [sp], #4
   2101c:	4770      	bx	lr
   2101e:	bf00      	nop
   21020:	200190b4 	.word	0x200190b4

00021024 <z_free_fd>:

void z_free_fd(int fd)
{
   21024:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   21026:	490d      	ldr	r1, [pc, #52]	; (2105c <z_free_fd+0x38>)
   21028:	0140      	lsls	r0, r0, #5
   2102a:	f100 0308 	add.w	r3, r0, #8
   2102e:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21030:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   21034:	b182      	cbz	r2, 21058 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   21036:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21038:	e8d3 5fef 	ldaex	r5, [r3]
   2103c:	4295      	cmp	r5, r2
   2103e:	d104      	bne.n	2104a <z_free_fd+0x26>
   21040:	e8c3 4fec 	stlex	ip, r4, [r3]
   21044:	f1bc 0f00 	cmp.w	ip, #0
   21048:	d1f6      	bne.n	21038 <z_free_fd+0x14>
   2104a:	d1f1      	bne.n	21030 <z_free_fd+0xc>
	if (old_rc != 1) {
   2104c:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   2104e:	bf01      	itttt	eq
   21050:	2300      	moveq	r3, #0
   21052:	180a      	addeq	r2, r1, r0
   21054:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   21056:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   21058:	bd30      	pop	{r4, r5, pc}
   2105a:	bf00      	nop
   2105c:	200190b4 	.word	0x200190b4

00021060 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21060:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   21062:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   21064:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   21068:	2b02      	cmp	r3, #2
{
   2106a:	4604      	mov	r4, r0
   2106c:	460e      	mov	r6, r1
	notify->result = res;
   2106e:	6081      	str	r1, [r0, #8]
	switch (method) {
   21070:	d010      	beq.n	21094 <sys_notify_finalize+0x34>
   21072:	2b03      	cmp	r3, #3
   21074:	d004      	beq.n	21080 <sys_notify_finalize+0x20>
   21076:	2b01      	cmp	r3, #1
   21078:	d10f      	bne.n	2109a <sys_notify_finalize+0x3a>
   2107a:	2500      	movs	r5, #0
   2107c:	4628      	mov	r0, r5
   2107e:	e001      	b.n	21084 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   21080:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   21082:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21084:	2300      	movs	r3, #0
   21086:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   21088:	b110      	cbz	r0, 21090 <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2108a:	4631      	mov	r1, r6
   2108c:	f018 fda0 	bl	39bd0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21090:	4628      	mov	r0, r5
   21092:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   21094:	2500      	movs	r5, #0
		sig = notify->method.signal;
   21096:	6800      	ldr	r0, [r0, #0]
		break;
   21098:	e7f4      	b.n	21084 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   2109a:	2245      	movs	r2, #69	; 0x45
   2109c:	4904      	ldr	r1, [pc, #16]	; (210b0 <sys_notify_finalize+0x50>)
   2109e:	4805      	ldr	r0, [pc, #20]	; (210b4 <sys_notify_finalize+0x54>)
   210a0:	f01c f871 	bl	3d186 <assert_print>
   210a4:	2145      	movs	r1, #69	; 0x45
   210a6:	4802      	ldr	r0, [pc, #8]	; (210b0 <sys_notify_finalize+0x50>)
   210a8:	f01c f866 	bl	3d178 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   210ac:	2500      	movs	r5, #0
   210ae:	e7e8      	b.n	21082 <sys_notify_finalize+0x22>
   210b0:	0004492c 	.word	0x0004492c
   210b4:	0004494f 	.word	0x0004494f

000210b8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   210b8:	680b      	ldr	r3, [r1, #0]
   210ba:	3301      	adds	r3, #1
   210bc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   210be:	4b01      	ldr	r3, [pc, #4]	; (210c4 <char_out+0xc>)
   210c0:	681b      	ldr	r3, [r3, #0]
   210c2:	4718      	bx	r3
   210c4:	200145c8 	.word	0x200145c8

000210c8 <__printk_hook_install>:
	_char_out = fn;
   210c8:	4b01      	ldr	r3, [pc, #4]	; (210d0 <__printk_hook_install+0x8>)
   210ca:	6018      	str	r0, [r3, #0]
}
   210cc:	4770      	bx	lr
   210ce:	bf00      	nop
   210d0:	200145c8 	.word	0x200145c8

000210d4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   210d4:	b507      	push	{r0, r1, r2, lr}
   210d6:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   210d8:	2100      	movs	r1, #0
{
   210da:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   210dc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   210de:	4803      	ldr	r0, [pc, #12]	; (210ec <vprintk+0x18>)
   210e0:	a901      	add	r1, sp, #4
   210e2:	f7fc f949 	bl	1d378 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   210e6:	b003      	add	sp, #12
   210e8:	f85d fb04 	ldr.w	pc, [sp], #4
   210ec:	000210b9 	.word	0x000210b9

000210f0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   210f0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   210f2:	2500      	movs	r5, #0
{
   210f4:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   210f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   210fa:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   210fc:	a901      	add	r1, sp, #4
   210fe:	4805      	ldr	r0, [pc, #20]	; (21114 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   21100:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   21102:	f7fc f939 	bl	1d378 <cbvprintf>

	if (ctx.count < ctx.max) {
   21106:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2110a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   2110c:	bfb8      	it	lt
   2110e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   21110:	b005      	add	sp, #20
   21112:	bd30      	pop	{r4, r5, pc}
   21114:	0003cd9b 	.word	0x0003cd9b

00021118 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   21118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2111c:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21120:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   21124:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   21126:	f019 0f08 	tst.w	r9, #8
{
   2112a:	4604      	mov	r4, r0
   2112c:	9201      	str	r2, [sp, #4]
	if (processing) {
   2112e:	d01f      	beq.n	21170 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
   21130:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   21132:	bf0c      	ite	eq
   21134:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   21138:	f049 0920 	orrne.w	r9, r9, #32
   2113c:	f8a0 901c 	strh.w	r9, [r0, #28]
   21140:	f104 0014 	add.w	r0, r4, #20
   21144:	f015 fd66 	bl	36c14 <z_spin_unlock_valid>
   21148:	b940      	cbnz	r0, 2115c <process_event+0x44>
   2114a:	499b      	ldr	r1, [pc, #620]	; (213b8 <process_event+0x2a0>)
   2114c:	489b      	ldr	r0, [pc, #620]	; (213bc <process_event+0x2a4>)
   2114e:	22b9      	movs	r2, #185	; 0xb9
   21150:	f01c f819 	bl	3d186 <assert_print>
   21154:	21b9      	movs	r1, #185	; 0xb9
   21156:	4898      	ldr	r0, [pc, #608]	; (213b8 <process_event+0x2a0>)
   21158:	f01c f80e 	bl	3d178 <assert_post_action>
   2115c:	9b01      	ldr	r3, [sp, #4]
   2115e:	f383 8811 	msr	BASEPRI, r3
   21162:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   21166:	b003      	add	sp, #12
   21168:	ecbd 8b02 	vpop	{d8}
   2116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   21170:	4f93      	ldr	r7, [pc, #588]	; (213c0 <process_event+0x2a8>)
   21172:	f8df 8248 	ldr.w	r8, [pc, #584]	; 213bc <process_event+0x2a4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21176:	f8df a240 	ldr.w	sl, [pc, #576]	; 213b8 <process_event+0x2a0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2117a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   2117e:	2902      	cmp	r1, #2
   21180:	d106      	bne.n	21190 <process_event+0x78>
			evt = process_recheck(mgr);
   21182:	4620      	mov	r0, r4
   21184:	f01b fe36 	bl	3cdf4 <process_recheck>
		if (evt == EVT_NOP) {
   21188:	2800      	cmp	r0, #0
   2118a:	d0d9      	beq.n	21140 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   2118c:	2801      	cmp	r0, #1
   2118e:	d167      	bne.n	21260 <process_event+0x148>
			res = mgr->last_res;
   21190:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21194:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   21196:	f1bb 0f00 	cmp.w	fp, #0
   2119a:	da1c      	bge.n	211d6 <process_event+0xbe>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   2119c:	2600      	movs	r6, #0
		*clients = mgr->clients;
   2119e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   211a0:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   211a4:	e9c4 6600 	strd	r6, r6, [r4]
   211a8:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   211ac:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   211ae:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   211b0:	8ba3      	ldrh	r3, [r4, #28]
   211b2:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   211b6:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   211b8:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   211bc:	d003      	beq.n	211c6 <process_event+0xae>
		if (do_monitors
   211be:	68a2      	ldr	r2, [r4, #8]
   211c0:	2a00      	cmp	r2, #0
   211c2:	f040 80ff 	bne.w	213c4 <process_event+0x2ac>
		    || !sys_slist_is_empty(&clients)
   211c6:	b91d      	cbnz	r5, 211d0 <process_event+0xb8>
		    || (transit != NULL)) {
   211c8:	9a00      	ldr	r2, [sp, #0]
   211ca:	2a00      	cmp	r2, #0
   211cc:	f000 813f 	beq.w	2144e <process_event+0x336>
   211d0:	f04f 0900 	mov.w	r9, #0
   211d4:	e0f8      	b.n	213c8 <process_event+0x2b0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   211d6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   211da:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   211dc:	2901      	cmp	r1, #1
   211de:	d821      	bhi.n	21224 <process_event+0x10c>
	list->head = NULL;
   211e0:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   211e2:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   211e6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   211e8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   211ea:	b29b      	uxth	r3, r3
	list->tail = NULL;
   211ec:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   211f0:	d10a      	bne.n	21208 <process_event+0xf0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   211f2:	b13d      	cbz	r5, 21204 <process_event+0xec>
   211f4:	4629      	mov	r1, r5
   211f6:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   211f8:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   211fa:	3201      	adds	r2, #1
   211fc:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   211fe:	2900      	cmp	r1, #0
   21200:	d1fa      	bne.n	211f8 <process_event+0xe0>
   21202:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   21204:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   21208:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   2120a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   2120c:	f01b fdf2 	bl	3cdf4 <process_recheck>
   21210:	2800      	cmp	r0, #0
   21212:	f000 80cc 	beq.w	213ae <process_event+0x296>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   21216:	8ba3      	ldrh	r3, [r4, #28]
   21218:	f043 0320 	orr.w	r3, r3, #32
   2121c:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   2121e:	2300      	movs	r3, #0
   21220:	9300      	str	r3, [sp, #0]
   21222:	e7c5      	b.n	211b0 <process_event+0x98>
	} else if (state == ONOFF_STATE_TO_OFF) {
   21224:	2a04      	cmp	r2, #4
   21226:	d10f      	bne.n	21248 <process_event+0x130>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   21228:	f023 0307 	bic.w	r3, r3, #7
   2122c:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   2122e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   21230:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   21232:	f01b fddf 	bl	3cdf4 <process_recheck>
   21236:	2800      	cmp	r0, #0
   21238:	f000 80bb 	beq.w	213b2 <process_event+0x29a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2123c:	f042 0220 	orr.w	r2, r2, #32
   21240:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   21242:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   21244:	9500      	str	r5, [sp, #0]
   21246:	e7b3      	b.n	211b0 <process_event+0x98>
		__ASSERT_NO_MSG(false);
   21248:	4639      	mov	r1, r7
   2124a:	4640      	mov	r0, r8
   2124c:	f240 121b 	movw	r2, #283	; 0x11b
   21250:	f01b ff99 	bl	3d186 <assert_print>
   21254:	f240 111b 	movw	r1, #283	; 0x11b
   21258:	4638      	mov	r0, r7
   2125a:	f01b ff8d 	bl	3d178 <assert_post_action>
   2125e:	e7f0      	b.n	21242 <process_event+0x12a>
		} else if (evt == EVT_START) {
   21260:	2803      	cmp	r0, #3
   21262:	d132      	bne.n	212ca <process_event+0x1b2>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   21264:	f1b9 0f00 	cmp.w	r9, #0
   21268:	d00a      	beq.n	21280 <process_event+0x168>
   2126a:	4639      	mov	r1, r7
   2126c:	4640      	mov	r0, r8
   2126e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   21272:	f01b ff88 	bl	3d186 <assert_print>
   21276:	f44f 71ab 	mov.w	r1, #342	; 0x156
   2127a:	4638      	mov	r0, r7
   2127c:	f01b ff7c 	bl	3d178 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   21280:	6823      	ldr	r3, [r4, #0]
   21282:	b953      	cbnz	r3, 2129a <process_event+0x182>
   21284:	4639      	mov	r1, r7
   21286:	4640      	mov	r0, r8
   21288:	f240 1257 	movw	r2, #343	; 0x157
   2128c:	f01b ff7b 	bl	3d186 <assert_print>
   21290:	f240 1157 	movw	r1, #343	; 0x157
   21294:	4638      	mov	r0, r7
   21296:	f01b ff6f 	bl	3d178 <assert_post_action>
			transit = mgr->transitions->start;
   2129a:	6923      	ldr	r3, [r4, #16]
   2129c:	681b      	ldr	r3, [r3, #0]
   2129e:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   212a0:	b953      	cbnz	r3, 212b8 <process_event+0x1a0>
   212a2:	4639      	mov	r1, r7
   212a4:	4640      	mov	r0, r8
   212a6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   212aa:	f01b ff6c 	bl	3d186 <assert_print>
   212ae:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   212b2:	4638      	mov	r0, r7
   212b4:	f01b ff60 	bl	3d178 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   212b8:	8ba3      	ldrh	r3, [r4, #28]
   212ba:	f023 0307 	bic.w	r3, r3, #7
   212be:	f043 0306 	orr.w	r3, r3, #6
}
   212c2:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   212c4:	83a3      	strh	r3, [r4, #28]
		res = 0;
   212c6:	46ab      	mov	fp, r5
}
   212c8:	e772      	b.n	211b0 <process_event+0x98>
		} else if (evt == EVT_STOP) {
   212ca:	2804      	cmp	r0, #4
   212cc:	d12f      	bne.n	2132e <process_event+0x216>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   212ce:	f1b9 0f02 	cmp.w	r9, #2
   212d2:	d00a      	beq.n	212ea <process_event+0x1d2>
   212d4:	4639      	mov	r1, r7
   212d6:	4640      	mov	r0, r8
   212d8:	f240 125d 	movw	r2, #349	; 0x15d
   212dc:	f01b ff53 	bl	3d186 <assert_print>
   212e0:	f240 115d 	movw	r1, #349	; 0x15d
   212e4:	4638      	mov	r0, r7
   212e6:	f01b ff47 	bl	3d178 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   212ea:	8be3      	ldrh	r3, [r4, #30]
   212ec:	b153      	cbz	r3, 21304 <process_event+0x1ec>
   212ee:	4639      	mov	r1, r7
   212f0:	4640      	mov	r0, r8
   212f2:	f44f 72af 	mov.w	r2, #350	; 0x15e
   212f6:	f01b ff46 	bl	3d186 <assert_print>
   212fa:	f44f 71af 	mov.w	r1, #350	; 0x15e
   212fe:	4638      	mov	r0, r7
   21300:	f01b ff3a 	bl	3d178 <assert_post_action>
			transit = mgr->transitions->stop;
   21304:	6923      	ldr	r3, [r4, #16]
   21306:	685b      	ldr	r3, [r3, #4]
   21308:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   2130a:	b953      	cbnz	r3, 21322 <process_event+0x20a>
   2130c:	4639      	mov	r1, r7
   2130e:	4640      	mov	r0, r8
   21310:	f240 1261 	movw	r2, #353	; 0x161
   21314:	f01b ff37 	bl	3d186 <assert_print>
   21318:	f240 1161 	movw	r1, #353	; 0x161
   2131c:	4638      	mov	r0, r7
   2131e:	f01b ff2b 	bl	3d178 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   21322:	8ba3      	ldrh	r3, [r4, #28]
   21324:	f023 0307 	bic.w	r3, r3, #7
   21328:	f043 0304 	orr.w	r3, r3, #4
   2132c:	e7c9      	b.n	212c2 <process_event+0x1aa>
		} else if (evt == EVT_RESET) {
   2132e:	2805      	cmp	r0, #5
   21330:	d12f      	bne.n	21392 <process_event+0x27a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   21332:	f1b9 0f01 	cmp.w	r9, #1
   21336:	d00a      	beq.n	2134e <process_event+0x236>
   21338:	4639      	mov	r1, r7
   2133a:	4640      	mov	r0, r8
   2133c:	f44f 72b2 	mov.w	r2, #356	; 0x164
   21340:	f01b ff21 	bl	3d186 <assert_print>
   21344:	f44f 71b2 	mov.w	r1, #356	; 0x164
   21348:	4638      	mov	r0, r7
   2134a:	f01b ff15 	bl	3d178 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   2134e:	6823      	ldr	r3, [r4, #0]
   21350:	b953      	cbnz	r3, 21368 <process_event+0x250>
   21352:	4639      	mov	r1, r7
   21354:	4640      	mov	r0, r8
   21356:	f240 1265 	movw	r2, #357	; 0x165
   2135a:	f01b ff14 	bl	3d186 <assert_print>
   2135e:	f240 1165 	movw	r1, #357	; 0x165
   21362:	4638      	mov	r0, r7
   21364:	f01b ff08 	bl	3d178 <assert_post_action>
			transit = mgr->transitions->reset;
   21368:	6923      	ldr	r3, [r4, #16]
   2136a:	689b      	ldr	r3, [r3, #8]
   2136c:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   2136e:	b953      	cbnz	r3, 21386 <process_event+0x26e>
   21370:	4639      	mov	r1, r7
   21372:	4640      	mov	r0, r8
   21374:	f44f 72b4 	mov.w	r2, #360	; 0x168
   21378:	f01b ff05 	bl	3d186 <assert_print>
   2137c:	f44f 71b4 	mov.w	r1, #360	; 0x168
   21380:	4638      	mov	r0, r7
   21382:	f01b fef9 	bl	3d178 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   21386:	8ba3      	ldrh	r3, [r4, #28]
   21388:	f023 0307 	bic.w	r3, r3, #7
   2138c:	f043 0305 	orr.w	r3, r3, #5
   21390:	e797      	b.n	212c2 <process_event+0x1aa>
			__ASSERT_NO_MSG(false);
   21392:	2500      	movs	r5, #0
   21394:	f240 126b 	movw	r2, #363	; 0x16b
   21398:	4639      	mov	r1, r7
   2139a:	4640      	mov	r0, r8
   2139c:	f01b fef3 	bl	3d186 <assert_print>
   213a0:	f240 116b 	movw	r1, #363	; 0x16b
   213a4:	4638      	mov	r0, r7
   213a6:	f01b fee7 	bl	3d178 <assert_post_action>
		onoff_transition_fn transit = NULL;
   213aa:	9500      	str	r5, [sp, #0]
   213ac:	e78b      	b.n	212c6 <process_event+0x1ae>
   213ae:	9000      	str	r0, [sp, #0]
   213b0:	e6fe      	b.n	211b0 <process_event+0x98>
   213b2:	4605      	mov	r5, r0
   213b4:	e746      	b.n	21244 <process_event+0x12c>
   213b6:	bf00      	nop
   213b8:	00044989 	.word	0x00044989
   213bc:	0004494f 	.word	0x0004494f
   213c0:	00044967 	.word	0x00044967
				   && !sys_slist_is_empty(&mgr->monitors);
   213c4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   213c8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   213cc:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   213ce:	f104 0314 	add.w	r3, r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213d2:	4618      	mov	r0, r3
   213d4:	ee08 3a90 	vmov	s17, r3
   213d8:	f015 fc1c 	bl	36c14 <z_spin_unlock_valid>
   213dc:	b940      	cbnz	r0, 213f0 <process_event+0x2d8>
   213de:	4651      	mov	r1, sl
   213e0:	4640      	mov	r0, r8
   213e2:	22b9      	movs	r2, #185	; 0xb9
   213e4:	f01b fecf 	bl	3d186 <assert_print>
   213e8:	21b9      	movs	r1, #185	; 0xb9
   213ea:	4650      	mov	r0, sl
   213ec:	f01b fec4 	bl	3d178 <assert_post_action>
   213f0:	9b01      	ldr	r3, [sp, #4]
   213f2:	f383 8811 	msr	BASEPRI, r3
   213f6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   213fa:	f1b9 0f00 	cmp.w	r9, #0
   213fe:	d135      	bne.n	2146c <process_event+0x354>
	while (!sys_slist_is_empty(list)) {
   21400:	2d00      	cmp	r5, #0
   21402:	d146      	bne.n	21492 <process_event+0x37a>
			if (transit != NULL) {
   21404:	9b00      	ldr	r3, [sp, #0]
   21406:	b113      	cbz	r3, 2140e <process_event+0x2f6>
				transit(mgr, transition_complete);
   21408:	4620      	mov	r0, r4
   2140a:	492a      	ldr	r1, [pc, #168]	; (214b4 <process_event+0x39c>)
   2140c:	4798      	blx	r3
	__asm__ volatile(
   2140e:	f04f 0320 	mov.w	r3, #32
   21412:	f3ef 8b11 	mrs	fp, BASEPRI
   21416:	f383 8812 	msr	BASEPRI_MAX, r3
   2141a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2141e:	ee18 0a90 	vmov	r0, s17
	k.key = arch_irq_lock();
   21422:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21426:	f015 fbe7 	bl	36bf8 <z_spin_lock_valid>
   2142a:	b940      	cbnz	r0, 2143e <process_event+0x326>
   2142c:	4651      	mov	r1, sl
   2142e:	4640      	mov	r0, r8
   21430:	228e      	movs	r2, #142	; 0x8e
   21432:	f01b fea8 	bl	3d186 <assert_print>
   21436:	218e      	movs	r1, #142	; 0x8e
   21438:	4650      	mov	r0, sl
   2143a:	f01b fe9d 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   2143e:	ee18 0a90 	vmov	r0, s17
   21442:	f015 fbf7 	bl	36c34 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   21446:	8ba3      	ldrh	r3, [r4, #28]
   21448:	f023 0308 	bic.w	r3, r3, #8
   2144c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2144e:	8ba3      	ldrh	r3, [r4, #28]
   21450:	06da      	lsls	r2, r3, #27
   21452:	d527      	bpl.n	214a4 <process_event+0x38c>
			evt = EVT_COMPLETE;
   21454:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   21456:	f023 0310 	bic.w	r3, r3, #16
   2145a:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   2145c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   21460:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   21464:	2900      	cmp	r1, #0
   21466:	f47f ae8a 	bne.w	2117e <process_event+0x66>
out:
   2146a:	e669      	b.n	21140 <process_event+0x28>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2146c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2146e:	2900      	cmp	r1, #0
   21470:	d0c6      	beq.n	21400 <process_event+0x2e8>
	return node->next;
   21472:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   21476:	684b      	ldr	r3, [r1, #4]
   21478:	ee18 2a10 	vmov	r2, s16
   2147c:	461e      	mov	r6, r3
   2147e:	4620      	mov	r0, r4
   21480:	465b      	mov	r3, fp
   21482:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   21484:	f1b9 0f00 	cmp.w	r9, #0
   21488:	d0ba      	beq.n	21400 <process_event+0x2e8>
   2148a:	4649      	mov	r1, r9
   2148c:	f8d9 9000 	ldr.w	r9, [r9]
   21490:	e7f1      	b.n	21476 <process_event+0x35e>
   21492:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   21494:	465b      	mov	r3, fp
   21496:	ee18 2a10 	vmov	r2, s16
   2149a:	4620      	mov	r0, r4
   2149c:	682d      	ldr	r5, [r5, #0]
   2149e:	f01b fcc5 	bl	3ce2c <notify_one>
   214a2:	e7ad      	b.n	21400 <process_event+0x2e8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   214a4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   214a8:	bf1e      	ittt	ne
   214aa:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   214ae:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   214b0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   214b2:	e7d3      	b.n	2145c <process_event+0x344>
   214b4:	000214b9 	.word	0x000214b9

000214b8 <transition_complete>:
{
   214b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   214ba:	4604      	mov	r4, r0
   214bc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   214be:	f100 0614 	add.w	r6, r0, #20
   214c2:	f04f 0320 	mov.w	r3, #32
   214c6:	f3ef 8711 	mrs	r7, BASEPRI
   214ca:	f383 8812 	msr	BASEPRI_MAX, r3
   214ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214d2:	4630      	mov	r0, r6
   214d4:	f015 fb90 	bl	36bf8 <z_spin_lock_valid>
   214d8:	b940      	cbnz	r0, 214ec <transition_complete+0x34>
   214da:	490a      	ldr	r1, [pc, #40]	; (21504 <transition_complete+0x4c>)
   214dc:	480a      	ldr	r0, [pc, #40]	; (21508 <transition_complete+0x50>)
   214de:	228e      	movs	r2, #142	; 0x8e
   214e0:	f01b fe51 	bl	3d186 <assert_print>
   214e4:	218e      	movs	r1, #142	; 0x8e
   214e6:	4807      	ldr	r0, [pc, #28]	; (21504 <transition_complete+0x4c>)
   214e8:	f01b fe46 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   214ec:	4630      	mov	r0, r6
   214ee:	f015 fba1 	bl	36c34 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   214f2:	463a      	mov	r2, r7
   214f4:	4620      	mov	r0, r4
	mgr->last_res = res;
   214f6:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   214f8:	2101      	movs	r1, #1
}
   214fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   214fe:	f7ff be0b 	b.w	21118 <process_event>
   21502:	bf00      	nop
   21504:	00044989 	.word	0x00044989
   21508:	0004494f 	.word	0x0004494f

0002150c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2150c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21510:	4604      	mov	r4, r0
   21512:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21514:	f01b fca0 	bl	3ce58 <validate_args>

	if (rv < 0) {
   21518:	1e05      	subs	r5, r0, #0
   2151a:	db54      	blt.n	215c6 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   2151c:	f104 0914 	add.w	r9, r4, #20
   21520:	f04f 0320 	mov.w	r3, #32
   21524:	f3ef 8a11 	mrs	sl, BASEPRI
   21528:	f383 8812 	msr	BASEPRI_MAX, r3
   2152c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21530:	4648      	mov	r0, r9
   21532:	f015 fb61 	bl	36bf8 <z_spin_lock_valid>
   21536:	b940      	cbnz	r0, 2154a <onoff_request+0x3e>
   21538:	4933      	ldr	r1, [pc, #204]	; (21608 <onoff_request+0xfc>)
   2153a:	4834      	ldr	r0, [pc, #208]	; (2160c <onoff_request+0x100>)
   2153c:	228e      	movs	r2, #142	; 0x8e
   2153e:	f01b fe22 	bl	3d186 <assert_print>
   21542:	218e      	movs	r1, #142	; 0x8e
   21544:	4830      	ldr	r0, [pc, #192]	; (21608 <onoff_request+0xfc>)
   21546:	f01b fe17 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   2154a:	4648      	mov	r0, r9
   2154c:	f015 fb72 	bl	36c34 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21550:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21554:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21556:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21558:	428b      	cmp	r3, r1
   2155a:	f002 0607 	and.w	r6, r2, #7
   2155e:	d04a      	beq.n	215f6 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21560:	2e02      	cmp	r6, #2
   21562:	d11f      	bne.n	215a4 <onoff_request+0x98>
	rv = state;
   21564:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   21566:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   2156a:	3301      	adds	r3, #1
   2156c:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2156e:	4648      	mov	r0, r9
   21570:	f015 fb50 	bl	36c14 <z_spin_unlock_valid>
   21574:	b940      	cbnz	r0, 21588 <onoff_request+0x7c>
   21576:	4924      	ldr	r1, [pc, #144]	; (21608 <onoff_request+0xfc>)
   21578:	4824      	ldr	r0, [pc, #144]	; (2160c <onoff_request+0x100>)
   2157a:	22b9      	movs	r2, #185	; 0xb9
   2157c:	f01b fe03 	bl	3d186 <assert_print>
   21580:	21b9      	movs	r1, #185	; 0xb9
   21582:	4821      	ldr	r0, [pc, #132]	; (21608 <onoff_request+0xfc>)
   21584:	f01b fdf8 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   21588:	f38a 8811 	msr	BASEPRI, sl
   2158c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21590:	f1b8 0f00 	cmp.w	r8, #0
   21594:	d017      	beq.n	215c6 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   21596:	2300      	movs	r3, #0
   21598:	4632      	mov	r2, r6
   2159a:	4639      	mov	r1, r7
   2159c:	4620      	mov	r0, r4
   2159e:	f01b fc45 	bl	3ce2c <notify_one>
   215a2:	e010      	b.n	215c6 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   215a4:	0793      	lsls	r3, r2, #30
   215a6:	d001      	beq.n	215ac <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   215a8:	2e06      	cmp	r6, #6
   215aa:	d10f      	bne.n	215cc <onoff_request+0xc0>
	parent->next = child;
   215ac:	2300      	movs	r3, #0
   215ae:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   215b0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   215b2:	b9eb      	cbnz	r3, 215f0 <onoff_request+0xe4>
	list->head = node;
   215b4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   215b8:	4635      	mov	r5, r6
   215ba:	b9f6      	cbnz	r6, 215fa <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   215bc:	4652      	mov	r2, sl
   215be:	2102      	movs	r1, #2
   215c0:	4620      	mov	r0, r4
   215c2:	f7ff fda9 	bl	21118 <process_event>
		}
	}

	return rv;
}
   215c6:	4628      	mov	r0, r5
   215c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   215cc:	2e05      	cmp	r6, #5
   215ce:	d017      	beq.n	21600 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   215d0:	2e01      	cmp	r6, #1
   215d2:	d00a      	beq.n	215ea <onoff_request+0xde>
   215d4:	490e      	ldr	r1, [pc, #56]	; (21610 <onoff_request+0x104>)
   215d6:	480d      	ldr	r0, [pc, #52]	; (2160c <onoff_request+0x100>)
   215d8:	f240 12c9 	movw	r2, #457	; 0x1c9
   215dc:	f01b fdd3 	bl	3d186 <assert_print>
   215e0:	f240 11c9 	movw	r1, #457	; 0x1c9
   215e4:	480a      	ldr	r0, [pc, #40]	; (21610 <onoff_request+0x104>)
   215e6:	f01b fdc7 	bl	3d178 <assert_post_action>
		rv = -EIO;
   215ea:	f06f 0504 	mvn.w	r5, #4
   215ee:	e004      	b.n	215fa <onoff_request+0xee>
	parent->next = child;
   215f0:	601f      	str	r7, [r3, #0]
	list->tail = node;
   215f2:	6067      	str	r7, [r4, #4]
}
   215f4:	e7e0      	b.n	215b8 <onoff_request+0xac>
		rv = -EAGAIN;
   215f6:	f06f 050a 	mvn.w	r5, #10
   215fa:	f04f 0800 	mov.w	r8, #0
   215fe:	e7b6      	b.n	2156e <onoff_request+0x62>
		rv = -ENOTSUP;
   21600:	f06f 0585 	mvn.w	r5, #133	; 0x85
   21604:	e7f9      	b.n	215fa <onoff_request+0xee>
   21606:	bf00      	nop
   21608:	00044989 	.word	0x00044989
   2160c:	0004494f 	.word	0x0004494f
   21610:	00044967 	.word	0x00044967

00021614 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   21614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
   21618:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2161a:	6944      	ldr	r4, [r0, #20]
	unsigned int d = tm->tm_mday - 1;
   2161c:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2161e:	f240 736c 	movw	r3, #1900	; 0x76c
	unsigned int m = tm->tm_mon + 1;
   21622:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21624:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
   21626:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21628:	18e4      	adds	r4, r4, r3
   2162a:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
   2162e:	2d02      	cmp	r5, #2
   21630:	bf8c      	ite	hi
   21632:	2300      	movhi	r3, #0
   21634:	2301      	movls	r3, #1
   21636:	1ae4      	subs	r4, r4, r3
   21638:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   2163c:	2900      	cmp	r1, #0
{
   2163e:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21640:	da55      	bge.n	216ee <timeutil_timegm64+0xda>
   21642:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   21646:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2164a:	2300      	movs	r3, #0
   2164c:	1820      	adds	r0, r4, r0
   2164e:	f161 0100 	sbc.w	r1, r1, #0
   21652:	f7fb fbf9 	bl	1ce48 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   21656:	4b28      	ldr	r3, [pc, #160]	; (216f8 <timeutil_timegm64+0xe4>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21658:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
   2165a:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2165e:	e9d8 9000 	ldrd	r9, r0, [r8]
   21662:	233c      	movs	r3, #60	; 0x3c
   21664:	f8d8 8008 	ldr.w	r8, [r8, #8]
   21668:	17c6      	asrs	r6, r0, #31
   2166a:	fbc8 0603 	smlal	r0, r6, r8, r3
   2166e:	46b4      	mov	ip, r6
   21670:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   21674:	2d02      	cmp	r5, #2
   21676:	bf8c      	ite	hi
   21678:	f06f 0e02 	mvnhi.w	lr, #2
   2167c:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   21680:	fb03 660c 	mla	r6, r3, ip, r6
   21684:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   21688:	f240 106d 	movw	r0, #365	; 0x16d
   2168c:	ea4f 0394 	mov.w	r3, r4, lsr #2
   21690:	fb00 3304 	mla	r3, r0, r4, r3
   21694:	f04f 0064 	mov.w	r0, #100	; 0x64
   21698:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2169c:	eb05 000e 	add.w	r0, r5, lr
   216a0:	f04f 0599 	mov.w	r5, #153	; 0x99
   216a4:	fb05 f000 	mul.w	r0, r5, r0
   216a8:	f04f 0505 	mov.w	r5, #5
   216ac:	f100 0002 	add.w	r0, r0, #2
   216b0:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   216b4:	443b      	add	r3, r7
   216b6:	eba3 0304 	sub.w	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
   216ba:	4c10      	ldr	r4, [pc, #64]	; (216fc <timeutil_timegm64+0xe8>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   216bc:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
   216be:	fba2 0204 	umull	r0, r2, r2, r4
   216c2:	fb04 2101 	mla	r1, r4, r1, r2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   216c6:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
   216ca:	181b      	adds	r3, r3, r0
   216cc:	480c      	ldr	r0, [pc, #48]	; (21700 <timeutil_timegm64+0xec>)
	time += 86400LL * ndays;
   216ce:	4a0d      	ldr	r2, [pc, #52]	; (21704 <timeutil_timegm64+0xf0>)
	return era * 146097 + (time_t)doe - 719468;
   216d0:	f141 0100 	adc.w	r1, r1, #0
   216d4:	181b      	adds	r3, r3, r0
	time += 86400LL * ndays;
   216d6:	fba3 0302 	umull	r0, r3, r3, r2
	return era * 146097 + (time_t)doe - 719468;
   216da:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
   216de:	fb02 3101 	mla	r1, r2, r1, r3
   216e2:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
   216e6:	eb41 0106 	adc.w	r1, r1, r6
   216ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   216ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
   216f2:	2300      	movs	r3, #0
   216f4:	4620      	mov	r0, r4
   216f6:	e7ac      	b.n	21652 <timeutil_timegm64+0x3e>
   216f8:	fffffe70 	.word	0xfffffe70
   216fc:	00023ab1 	.word	0x00023ab1
   21700:	fff50594 	.word	0xfff50594
   21704:	00015180 	.word	0x00015180

00021708 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   21708:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   2170a:	b379      	cbz	r1, 2176c <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   2170c:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2170e:	1f0c      	subs	r4, r1, #4
   21710:	1b64      	subs	r4, r4, r5
   21712:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   21714:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   21718:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2171a:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   2171c:	07db      	lsls	r3, r3, #31
   2171e:	d408      	bmi.n	21732 <sys_heap_free+0x2a>
   21720:	4913      	ldr	r1, [pc, #76]	; (21770 <sys_heap_free+0x68>)
   21722:	4814      	ldr	r0, [pc, #80]	; (21774 <sys_heap_free+0x6c>)
   21724:	22ac      	movs	r2, #172	; 0xac
   21726:	f01b fd2e 	bl	3d186 <assert_print>
   2172a:	21ac      	movs	r1, #172	; 0xac
   2172c:	4810      	ldr	r0, [pc, #64]	; (21770 <sys_heap_free+0x68>)
   2172e:	f01b fd23 	bl	3d178 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   21732:	4631      	mov	r1, r6
   21734:	4628      	mov	r0, r5
   21736:	f01b fbbb 	bl	3ceb0 <chunk_size>
   2173a:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   2173c:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21740:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   21742:	4286      	cmp	r6, r0
   21744:	d008      	beq.n	21758 <sys_heap_free+0x50>
   21746:	490a      	ldr	r1, [pc, #40]	; (21770 <sys_heap_free+0x68>)
   21748:	480a      	ldr	r0, [pc, #40]	; (21774 <sys_heap_free+0x6c>)
   2174a:	22b4      	movs	r2, #180	; 0xb4
   2174c:	f01b fd1b 	bl	3d186 <assert_print>
   21750:	21b4      	movs	r1, #180	; 0xb4
   21752:	4807      	ldr	r0, [pc, #28]	; (21770 <sys_heap_free+0x68>)
   21754:	f01b fd10 	bl	3d178 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21758:	8863      	ldrh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   2175a:	4631      	mov	r1, r6
   2175c:	f023 0301 	bic.w	r3, r3, #1
   21760:	4628      	mov	r0, r5
   21762:	8063      	strh	r3, [r4, #2]
}
   21764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   21768:	f01b bc61 	b.w	3d02e <free_chunk>
}
   2176c:	bd70      	pop	{r4, r5, r6, pc}
   2176e:	bf00      	nop
   21770:	000449b6 	.word	0x000449b6
   21774:	0004494f 	.word	0x0004494f

00021778 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21778:	424b      	negs	r3, r1
{
   2177a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   2177e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   21782:	ea31 0303 	bics.w	r3, r1, r3
{
   21786:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   21788:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   2178a:	d01b      	beq.n	217c4 <sys_heap_aligned_alloc+0x4c>
		return false;
   2178c:	2f04      	cmp	r7, #4
   2178e:	463d      	mov	r5, r7
   21790:	bf28      	it	cs
   21792:	2504      	movcs	r5, #4
   21794:	46b9      	mov	r9, r7
		align -= rew;
   21796:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   21798:	f107 3aff 	add.w	sl, r7, #4294967295
   2179c:	ea1a 0f07 	tst.w	sl, r7
   217a0:	d00a      	beq.n	217b8 <sys_heap_aligned_alloc+0x40>
   217a2:	4932      	ldr	r1, [pc, #200]	; (2186c <sys_heap_aligned_alloc+0xf4>)
   217a4:	4832      	ldr	r0, [pc, #200]	; (21870 <sys_heap_aligned_alloc+0xf8>)
   217a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   217aa:	f01b fcec 	bl	3d186 <assert_print>
   217ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
   217b2:	482e      	ldr	r0, [pc, #184]	; (2186c <sys_heap_aligned_alloc+0xf4>)
   217b4:	f01b fce0 	bl	3d178 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   217b8:	b97c      	cbnz	r4, 217da <sys_heap_aligned_alloc+0x62>
		return NULL;
   217ba:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   217be:	4648      	mov	r0, r9
   217c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   217c4:	2904      	cmp	r1, #4
   217c6:	d804      	bhi.n	217d2 <sys_heap_aligned_alloc+0x5a>
}
   217c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   217cc:	4611      	mov	r1, r2
   217ce:	f01b bc60 	b.w	3d092 <sys_heap_alloc>
		rew = 0;
   217d2:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   217d6:	2504      	movs	r5, #4
   217d8:	e7de      	b.n	21798 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   217da:	68b3      	ldr	r3, [r6, #8]
   217dc:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   217e0:	d9eb      	bls.n	217ba <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   217e2:	f104 010b 	add.w	r1, r4, #11
   217e6:	4439      	add	r1, r7
   217e8:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   217ea:	4630      	mov	r0, r6
   217ec:	08c9      	lsrs	r1, r1, #3
   217ee:	f01b fbb7 	bl	3cf60 <alloc_chunk>
	if (c0 == 0) {
   217f2:	4680      	mov	r8, r0
   217f4:	2800      	cmp	r0, #0
   217f6:	d0e0      	beq.n	217ba <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   217f8:	f109 0504 	add.w	r5, r9, #4
   217fc:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   21800:	4435      	add	r5, r6
   21802:	4455      	add	r5, sl
   21804:	427f      	negs	r7, r7
   21806:	402f      	ands	r7, r5
   21808:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2180c:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2180e:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21812:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21814:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21816:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2181a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2181c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21820:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   21824:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   21828:	d208      	bcs.n	2183c <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   2182a:	4601      	mov	r1, r0
   2182c:	463a      	mov	r2, r7
   2182e:	4630      	mov	r0, r6
   21830:	f01b fbe3 	bl	3cffa <split_chunks>
		free_list_add(h, c0);
   21834:	4641      	mov	r1, r8
   21836:	4630      	mov	r0, r6
   21838:	f01b fb3f 	bl	3ceba <free_list_add>
	return c + chunk_size(h, c);
   2183c:	4639      	mov	r1, r7
   2183e:	4630      	mov	r0, r6
   21840:	f01b fb36 	bl	3ceb0 <chunk_size>
   21844:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   21846:	4284      	cmp	r4, r0
   21848:	d208      	bcs.n	2185c <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
   2184a:	4639      	mov	r1, r7
   2184c:	4630      	mov	r0, r6
   2184e:	4622      	mov	r2, r4
   21850:	f01b fbd3 	bl	3cffa <split_chunks>
		free_list_add(h, c_end);
   21854:	4621      	mov	r1, r4
   21856:	4630      	mov	r0, r6
   21858:	f01b fb2f 	bl	3ceba <free_list_add>
	void *cmem = &buf[c];
   2185c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21860:	8873      	ldrh	r3, [r6, #2]
   21862:	f043 0301 	orr.w	r3, r3, #1
   21866:	8073      	strh	r3, [r6, #2]
   21868:	e7a9      	b.n	217be <sys_heap_aligned_alloc+0x46>
   2186a:	bf00      	nop
   2186c:	000449b6 	.word	0x000449b6
   21870:	0004494f 	.word	0x0004494f

00021874 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   21874:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   21878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2187c:	4680      	mov	r8, r0
   2187e:	460c      	mov	r4, r1
   21880:	4616      	mov	r6, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   21882:	d35f      	bcc.n	21944 <sys_heap_init+0xd0>
   21884:	4936      	ldr	r1, [pc, #216]	; (21960 <sys_heap_init+0xec>)
   21886:	f240 12e3 	movw	r2, #483	; 0x1e3
   2188a:	4836      	ldr	r0, [pc, #216]	; (21964 <sys_heap_init+0xf0>)
   2188c:	f01b fc7b 	bl	3d186 <assert_print>
   21890:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   21894:	4832      	ldr	r0, [pc, #200]	; (21960 <sys_heap_init+0xec>)
   21896:	f01b fc6f 	bl	3d178 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   2189a:	3e04      	subs	r6, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2189c:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2189e:	4426      	add	r6, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   218a0:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   218a4:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   218a8:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   218aa:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   218ac:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   218b0:	d80a      	bhi.n	218c8 <sys_heap_init+0x54>
   218b2:	492b      	ldr	r1, [pc, #172]	; (21960 <sys_heap_init+0xec>)
   218b4:	482b      	ldr	r0, [pc, #172]	; (21964 <sys_heap_init+0xf0>)
   218b6:	f240 12f3 	movw	r2, #499	; 0x1f3
   218ba:	f01b fc64 	bl	3d186 <assert_print>
   218be:	f240 11f3 	movw	r1, #499	; 0x1f3
   218c2:	4827      	ldr	r0, [pc, #156]	; (21960 <sys_heap_init+0xec>)
   218c4:	f01b fc58 	bl	3d178 <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   218c8:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   218cc:	2300      	movs	r3, #0
	heap->heap = h;
   218ce:	f8c8 5000 	str.w	r5, [r8]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   218d2:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   218d6:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   218da:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   218dc:	3407      	adds	r4, #7
   218de:	08e4      	lsrs	r4, r4, #3
	h->avail_buckets = 0;
   218e0:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   218e2:	1c63      	adds	r3, r4, #1
   218e4:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   218e6:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   218e8:	d90a      	bls.n	21900 <sys_heap_init+0x8c>
   218ea:	491d      	ldr	r1, [pc, #116]	; (21960 <sys_heap_init+0xec>)
   218ec:	481d      	ldr	r0, [pc, #116]	; (21964 <sys_heap_init+0xf0>)
   218ee:	f44f 7201 	mov.w	r2, #516	; 0x204
   218f2:	f01b fc48 	bl	3d186 <assert_print>
   218f6:	f44f 7101 	mov.w	r1, #516	; 0x204
   218fa:	4819      	ldr	r0, [pc, #100]	; (21960 <sys_heap_init+0xec>)
   218fc:	f01b fc3c 	bl	3d178 <assert_post_action>
   21900:	2200      	movs	r2, #0
   21902:	f105 0310 	add.w	r3, r5, #16
   21906:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
   2190a:	4598      	cmp	r8, r3
   2190c:	d125      	bne.n	2195a <sys_heap_init+0xe6>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2190e:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21910:	f043 0301 	orr.w	r3, r3, #1
   21914:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   21916:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
   21918:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2191c:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   2191e:	802a      	strh	r2, [r5, #0]
   21920:	8048      	strh	r0, [r1, #2]
   21922:	19a9      	adds	r1, r5, r6
   21924:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   21928:	804a      	strh	r2, [r1, #2]
   2192a:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   2192c:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21930:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   21932:	4621      	mov	r1, r4
   21934:	f042 0201 	orr.w	r2, r2, #1
   21938:	4628      	mov	r0, r5
}
   2193a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2193e:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   21940:	f01b babb 	b.w	3ceba <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   21944:	2a04      	cmp	r2, #4
   21946:	d8a8      	bhi.n	2189a <sys_heap_init+0x26>
   21948:	4905      	ldr	r1, [pc, #20]	; (21960 <sys_heap_init+0xec>)
   2194a:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   2194e:	4805      	ldr	r0, [pc, #20]	; (21964 <sys_heap_init+0xf0>)
   21950:	f01b fc19 	bl	3d186 <assert_print>
   21954:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   21958:	e79c      	b.n	21894 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   2195a:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   2195e:	e7d4      	b.n	2190a <sys_heap_init+0x96>
   21960:	000449b6 	.word	0x000449b6
   21964:	0004494f 	.word	0x0004494f

00021968 <extract_decimal>:
{
   21968:	b5f0      	push	{r4, r5, r6, r7, lr}
   2196a:	4602      	mov	r2, r0
   2196c:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
   2196e:	270a      	movs	r7, #10
	size_t val = 0;
   21970:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   21972:	4e07      	ldr	r6, [pc, #28]	; (21990 <extract_decimal+0x28>)
   21974:	460c      	mov	r4, r1
   21976:	7823      	ldrb	r3, [r4, #0]
   21978:	3101      	adds	r1, #1
   2197a:	5d9d      	ldrb	r5, [r3, r6]
   2197c:	076d      	lsls	r5, r5, #29
   2197e:	d401      	bmi.n	21984 <extract_decimal+0x1c>
	*str = sp;
   21980:	6014      	str	r4, [r2, #0]
}
   21982:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   21984:	fb07 3300 	mla	r3, r7, r0, r3
   21988:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2198c:	e7f2      	b.n	21974 <extract_decimal+0xc>
   2198e:	bf00      	nop
   21990:	0004c62f 	.word	0x0004c62f

00021994 <encode_uint>:
{
   21994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21998:	4615      	mov	r5, r2
   2199a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   2199c:	78d3      	ldrb	r3, [r2, #3]
   2199e:	4a22      	ldr	r2, [pc, #136]	; (21a28 <encode_uint+0x94>)
	switch (specifier) {
   219a0:	2b6f      	cmp	r3, #111	; 0x6f
   219a2:	f813 b002 	ldrb.w	fp, [r3, r2]
{
   219a6:	4680      	mov	r8, r0
   219a8:	460f      	mov	r7, r1
   219aa:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   219ae:	d029      	beq.n	21a04 <encode_uint+0x70>
   219b0:	d824      	bhi.n	219fc <encode_uint+0x68>
		return 16;
   219b2:	2b58      	cmp	r3, #88	; 0x58
   219b4:	bf14      	ite	ne
   219b6:	260a      	movne	r6, #10
   219b8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   219ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   219be:	4632      	mov	r2, r6
   219c0:	2300      	movs	r3, #0
   219c2:	4640      	mov	r0, r8
   219c4:	4639      	mov	r1, r7
   219c6:	f7fb fa8f 	bl	1cee8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   219ca:	2a09      	cmp	r2, #9
   219cc:	b2d4      	uxtb	r4, r2
   219ce:	d81e      	bhi.n	21a0e <encode_uint+0x7a>
   219d0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   219d2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   219d4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   219d6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   219da:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   219de:	d301      	bcc.n	219e4 <encode_uint+0x50>
   219e0:	45d1      	cmp	r9, sl
   219e2:	d811      	bhi.n	21a08 <encode_uint+0x74>
	if (conv->flag_hash) {
   219e4:	782b      	ldrb	r3, [r5, #0]
   219e6:	069b      	lsls	r3, r3, #26
   219e8:	d505      	bpl.n	219f6 <encode_uint+0x62>
		if (radix == 8) {
   219ea:	2e08      	cmp	r6, #8
   219ec:	d115      	bne.n	21a1a <encode_uint+0x86>
			conv->altform_0 = true;
   219ee:	78ab      	ldrb	r3, [r5, #2]
   219f0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   219f4:	70ab      	strb	r3, [r5, #2]
}
   219f6:	4648      	mov	r0, r9
   219f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   219fc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   21a00:	2b70      	cmp	r3, #112	; 0x70
   21a02:	e7d7      	b.n	219b4 <encode_uint+0x20>
	switch (specifier) {
   21a04:	2608      	movs	r6, #8
   21a06:	e7d8      	b.n	219ba <encode_uint+0x26>
		value /= radix;
   21a08:	4680      	mov	r8, r0
   21a0a:	460f      	mov	r7, r1
   21a0c:	e7d7      	b.n	219be <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21a0e:	f1bb 0f01 	cmp.w	fp, #1
   21a12:	bf0c      	ite	eq
   21a14:	3437      	addeq	r4, #55	; 0x37
   21a16:	3457      	addne	r4, #87	; 0x57
   21a18:	e7db      	b.n	219d2 <encode_uint+0x3e>
		} else if (radix == 16) {
   21a1a:	2e10      	cmp	r6, #16
   21a1c:	d1eb      	bne.n	219f6 <encode_uint+0x62>
			conv->altform_0c = true;
   21a1e:	78ab      	ldrb	r3, [r5, #2]
   21a20:	f043 0310 	orr.w	r3, r3, #16
   21a24:	e7e6      	b.n	219f4 <encode_uint+0x60>
   21a26:	bf00      	nop
   21a28:	0004c62f 	.word	0x0004c62f

00021a2c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   21a2c:	b508      	push	{r3, lr}
	__asm__ volatile(
   21a2e:	f04f 0220 	mov.w	r2, #32
   21a32:	f3ef 8311 	mrs	r3, BASEPRI
   21a36:	f382 8812 	msr	BASEPRI_MAX, r2
   21a3a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   21a3e:	f001 ff19 	bl	23874 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   21a42:	4803      	ldr	r0, [pc, #12]	; (21a50 <sys_reboot+0x24>)
   21a44:	f01b f9bc 	bl	3cdc0 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   21a48:	f001 fa8a 	bl	22f60 <arch_cpu_idle>
   21a4c:	e7fc      	b.n	21a48 <sys_reboot+0x1c>
   21a4e:	bf00      	nop
   21a50:	000449dd 	.word	0x000449dd

00021a54 <nordicsemi_nrf91_init>:
   21a54:	f04f 0220 	mov.w	r2, #32
   21a58:	f3ef 8311 	mrs	r3, BASEPRI
   21a5c:	f382 8812 	msr	BASEPRI_MAX, r2
   21a60:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   21a64:	2101      	movs	r1, #1
   21a66:	4a04      	ldr	r2, [pc, #16]	; (21a78 <nordicsemi_nrf91_init+0x24>)
   21a68:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   21a6c:	f383 8811 	msr	BASEPRI, r3
   21a70:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   21a74:	2000      	movs	r0, #0
   21a76:	4770      	bx	lr
   21a78:	40039000 	.word	0x40039000

00021a7c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   21a7c:	b120      	cbz	r0, 21a88 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   21a7e:	4b03      	ldr	r3, [pc, #12]	; (21a8c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   21a80:	0180      	lsls	r0, r0, #6
   21a82:	f043 0301 	orr.w	r3, r3, #1
   21a86:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   21a88:	4770      	bx	lr
   21a8a:	bf00      	nop
   21a8c:	00042fa0 	.word	0x00042fa0

00021a90 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   21a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a94:	4607      	mov	r7, r0
   21a96:	4688      	mov	r8, r1
   21a98:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   21a9a:	4614      	mov	r4, r2
   21a9c:	eb08 0506 	add.w	r5, r8, r6
   21aa0:	1b2d      	subs	r5, r5, r4
   21aa2:	b90c      	cbnz	r4, 21aa8 <z_log_minimal_hexdump_print+0x18>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   21aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   21aa8:	1e7b      	subs	r3, r7, #1
   21aaa:	2b03      	cmp	r3, #3
   21aac:	bf96      	itet	ls
   21aae:	4a21      	ldrls	r2, [pc, #132]	; (21b34 <z_log_minimal_hexdump_print+0xa4>)
   21ab0:	213f      	movhi	r1, #63	; 0x3f
   21ab2:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   21ab4:	4820      	ldr	r0, [pc, #128]	; (21b38 <z_log_minimal_hexdump_print+0xa8>)
   21ab6:	f01b f983 	bl	3cdc0 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21aba:	f04f 0900 	mov.w	r9, #0
			printk("   ");
   21abe:	f8df a088 	ldr.w	sl, [pc, #136]	; 21b48 <z_log_minimal_hexdump_print+0xb8>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   21ac2:	f8df b088 	ldr.w	fp, [pc, #136]	; 21b4c <z_log_minimal_hexdump_print+0xbc>
		if (i < length) {
   21ac6:	454c      	cmp	r4, r9
   21ac8:	d92b      	bls.n	21b22 <z_log_minimal_hexdump_print+0x92>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   21aca:	4658      	mov	r0, fp
   21acc:	f815 1009 	ldrb.w	r1, [r5, r9]
   21ad0:	f01b f976 	bl	3cdc0 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21ad4:	f109 0901 	add.w	r9, r9, #1
   21ad8:	f1b9 0f08 	cmp.w	r9, #8
   21adc:	d1f3      	bne.n	21ac6 <z_log_minimal_hexdump_print+0x36>
	printk("|");
   21ade:	4817      	ldr	r0, [pc, #92]	; (21b3c <z_log_minimal_hexdump_print+0xac>)
   21ae0:	f01b f96e 	bl	3cdc0 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21ae4:	f04f 0900 	mov.w	r9, #0
			printk(" ");
   21ae8:	f8df a064 	ldr.w	sl, [pc, #100]	; 21b50 <z_log_minimal_hexdump_print+0xc0>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   21aec:	f8df b064 	ldr.w	fp, [pc, #100]	; 21b54 <z_log_minimal_hexdump_print+0xc4>
		if (i < length) {
   21af0:	454c      	cmp	r4, r9
   21af2:	d91a      	bls.n	21b2a <z_log_minimal_hexdump_print+0x9a>
			unsigned char c = data[i];
   21af4:	f815 1009 	ldrb.w	r1, [r5, r9]
			printk("%c", isprint((int)c) != 0 ? c : '.');
   21af8:	4b11      	ldr	r3, [pc, #68]	; (21b40 <z_log_minimal_hexdump_print+0xb0>)
   21afa:	4658      	mov	r0, fp
   21afc:	5cca      	ldrb	r2, [r1, r3]
   21afe:	f012 0f97 	tst.w	r2, #151	; 0x97
   21b02:	bf08      	it	eq
   21b04:	212e      	moveq	r1, #46	; 0x2e
   21b06:	f01b f95b 	bl	3cdc0 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21b0a:	f109 0901 	add.w	r9, r9, #1
   21b0e:	f1b9 0f08 	cmp.w	r9, #8
   21b12:	d1ed      	bne.n	21af0 <z_log_minimal_hexdump_print+0x60>
	printk("\n");
   21b14:	480b      	ldr	r0, [pc, #44]	; (21b44 <z_log_minimal_hexdump_print+0xb4>)
   21b16:	f01b f953 	bl	3cdc0 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   21b1a:	2c07      	cmp	r4, #7
   21b1c:	d9c2      	bls.n	21aa4 <z_log_minimal_hexdump_print+0x14>
		size -= HEXDUMP_BYTES_IN_LINE;
   21b1e:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   21b20:	e7bc      	b.n	21a9c <z_log_minimal_hexdump_print+0xc>
			printk("   ");
   21b22:	4650      	mov	r0, sl
   21b24:	f01b f94c 	bl	3cdc0 <printk>
   21b28:	e7d4      	b.n	21ad4 <z_log_minimal_hexdump_print+0x44>
			printk(" ");
   21b2a:	4650      	mov	r0, sl
   21b2c:	f01b f948 	bl	3cdc0 <printk>
   21b30:	e7eb      	b.n	21b0a <z_log_minimal_hexdump_print+0x7a>
   21b32:	bf00      	nop
   21b34:	00044a1b 	.word	0x00044a1b
   21b38:	00044a0a 	.word	0x00044a0a
   21b3c:	00044a19 	.word	0x00044a19
   21b40:	0004c62f 	.word	0x0004c62f
   21b44:	00045b13 	.word	0x00045b13
   21b48:	00044a15 	.word	0x00044a15
   21b4c:	00044a0f 	.word	0x00044a0f
   21b50:	00044a17 	.word	0x00044a17
   21b54:	00046090 	.word	0x00046090

00021b58 <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   21b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b5c:	b085      	sub	sp, #20
   21b5e:	460e      	mov	r6, r1
   21b60:	4691      	mov	r9, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
   21b62:	460a      	mov	r2, r1
   21b64:	a902      	add	r1, sp, #8
{
   21b66:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
   21b68:	f01b fbf4 	bl	3d354 <fcb_put_len>
	if (cnt < 0) {
   21b6c:	1e05      	subs	r5, r0, #0
   21b6e:	db73      	blt.n	21c58 <fcb_append+0x100>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   21b70:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   21b74:	b2a9      	uxth	r1, r5
   21b76:	4610      	mov	r0, r2
   21b78:	f01b fb4c 	bl	3d214 <fcb_len_in_flash.isra.0>
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21b7c:	4631      	mov	r1, r6
	cnt = fcb_len_in_flash(fcb, cnt);
   21b7e:	4607      	mov	r7, r0
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21b80:	4610      	mov	r0, r2
   21b82:	f01b fb47 	bl	3d214 <fcb_len_in_flash.isra.0>
   21b86:	2101      	movs	r1, #1
   21b88:	4606      	mov	r6, r0
   21b8a:	4610      	mov	r0, r2
   21b8c:	f01b fb42 	bl	3d214 <fcb_len_in_flash.isra.0>

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   21b90:	2f08      	cmp	r7, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21b92:	4430      	add	r0, r6
   21b94:	b286      	uxth	r6, r0
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   21b96:	d908      	bls.n	21baa <fcb_append+0x52>
   21b98:	4937      	ldr	r1, [pc, #220]	; (21c78 <fcb_append+0x120>)
   21b9a:	4838      	ldr	r0, [pc, #224]	; (21c7c <fcb_append+0x124>)
   21b9c:	224b      	movs	r2, #75	; 0x4b
   21b9e:	f01b faf2 	bl	3d186 <assert_print>
   21ba2:	214b      	movs	r1, #75	; 0x4b
   21ba4:	4834      	ldr	r0, [pc, #208]	; (21c78 <fcb_append+0x120>)
   21ba6:	f01b fae7 	bl	3d178 <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   21baa:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   21bae:	f04f 32ff 	mov.w	r2, #4294967295
   21bb2:	f04f 33ff 	mov.w	r3, #4294967295
   21bb6:	4650      	mov	r0, sl
   21bb8:	f015 f998 	bl	36eec <z_impl_k_mutex_lock>
	if (rc) {
   21bbc:	4605      	mov	r5, r0
   21bbe:	2800      	cmp	r0, #0
   21bc0:	d156      	bne.n	21c70 <fcb_append+0x118>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   21bc2:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   21bc6:	684a      	ldr	r2, [r1, #4]
   21bc8:	443b      	add	r3, r7
   21bca:	4433      	add	r3, r6
   21bcc:	4293      	cmp	r3, r2
   21bce:	d92b      	bls.n	21c28 <fcb_append+0xd0>
	prev = NULL;
   21bd0:	4680      	mov	r8, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   21bd2:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   21bd6:	4620      	mov	r0, r4
   21bd8:	f01b fd6f 	bl	3d6ba <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   21bdc:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   21bde:	f1b8 0f00 	cmp.w	r8, #0
   21be2:	bf08      	it	eq
   21be4:	4680      	moveq	r8, r0
		if (cur == fcb->f_oldest) {
   21be6:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   21be8:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   21bea:	d03b      	beq.n	21c64 <fcb_append+0x10c>
	} while (i++ < cnt);
   21bec:	45ab      	cmp	fp, r5
   21bee:	f105 0301 	add.w	r3, r5, #1
   21bf2:	dc35      	bgt.n	21c60 <fcb_append+0x108>
		if (!sector || (sector->fs_size <
   21bf4:	f1b8 0f00 	cmp.w	r8, #0
   21bf8:	d034      	beq.n	21c64 <fcb_append+0x10c>
   21bfa:	f8d8 2004 	ldr.w	r2, [r8, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   21bfe:	f107 0308 	add.w	r3, r7, #8
   21c02:	4433      	add	r3, r6
		if (!sector || (sector->fs_size <
   21c04:	429a      	cmp	r2, r3
   21c06:	d32d      	bcc.n	21c64 <fcb_append+0x10c>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   21c08:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   21c0a:	4641      	mov	r1, r8
   21c0c:	3201      	adds	r2, #1
   21c0e:	4620      	mov	r0, r4
   21c10:	b292      	uxth	r2, r2
   21c12:	f01b fbe1 	bl	3d3d8 <fcb_sector_hdr_init>
		if (rc) {
   21c16:	4605      	mov	r5, r0
   21c18:	b9d8      	cbnz	r0, 21c52 <fcb_append+0xfa>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   21c1a:	2308      	movs	r3, #8
   21c1c:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   21c1e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   21c20:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		fcb->f_active_id++;
   21c24:	3301      	adds	r3, #1
   21c26:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   21c28:	4620      	mov	r0, r4
   21c2a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   21c2e:	9700      	str	r7, [sp, #0]
   21c30:	ab02      	add	r3, sp, #8
   21c32:	f01b fb5d 	bl	3d2f0 <fcb_flash_write>
	if (rc) {
   21c36:	4605      	mov	r5, r0
   21c38:	b9b8      	cbnz	r0, 21c6a <fcb_append+0x112>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   21c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21c3c:	f8c9 3000 	str.w	r3, [r9]
	append_loc->fe_elem_off = active->fe_elem_off;
   21c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21c42:	f8c9 3004 	str.w	r3, [r9, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   21c46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21c48:	4407      	add	r7, r0
   21c4a:	f8c9 7008 	str.w	r7, [r9, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   21c4e:	4437      	add	r7, r6
   21c50:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   21c52:	4650      	mov	r0, sl
   21c54:	f015 fa1c 	bl	37090 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   21c58:	4628      	mov	r0, r5
   21c5a:	b005      	add	sp, #20
   21c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   21c60:	461d      	mov	r5, r3
   21c62:	e7b8      	b.n	21bd6 <fcb_append+0x7e>
			rc = -ENOSPC;
   21c64:	f06f 051b 	mvn.w	r5, #27
   21c68:	e7f3      	b.n	21c52 <fcb_append+0xfa>
		rc = -EIO;
   21c6a:	f06f 0504 	mvn.w	r5, #4
   21c6e:	e7f0      	b.n	21c52 <fcb_append+0xfa>
		return -EINVAL;
   21c70:	f06f 0515 	mvn.w	r5, #21
   21c74:	e7f0      	b.n	21c58 <fcb_append+0x100>
   21c76:	bf00      	nop
   21c78:	00044a1f 	.word	0x00044a1f
   21c7c:	0004494f 	.word	0x0004494f

00021c80 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   21c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c82:	4605      	mov	r5, r0
   21c84:	b09b      	sub	sp, #108	; 0x6c
   21c86:	460f      	mov	r7, r1
   21c88:	4614      	mov	r4, r2
	struct sntp_pkt tx_pkt = { 0 };
   21c8a:	2100      	movs	r1, #0
   21c8c:	2230      	movs	r2, #48	; 0x30
   21c8e:	a802      	add	r0, sp, #8
   21c90:	f01f ff66 	bl	41b60 <memset>
	int ret = 0;

	if (!ctx || !time) {
   21c94:	2d00      	cmp	r5, #0
   21c96:	f000 8085 	beq.w	21da4 <sntp_query+0x124>
   21c9a:	2c00      	cmp	r4, #0
   21c9c:	f000 8082 	beq.w	21da4 <sntp_query+0x124>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   21ca0:	231b      	movs	r3, #27
   21ca2:	f88d 3008 	strb.w	r3, [sp, #8]
	return z_impl_k_uptime_ticks();
   21ca6:	f01f fdcb 	bl	41840 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   21caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21cae:	2600      	movs	r6, #0
   21cb0:	fba0 0302 	umull	r0, r3, r0, r2
   21cb4:	fb02 3101 	mla	r1, r2, r1, r3
   21cb8:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   21cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21cbe:	2300      	movs	r3, #0
   21cc0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   21cc4:	4631      	mov	r1, r6
   21cc6:	f7fb f90f 	bl	1cee8 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   21cca:	4a38      	ldr	r2, [pc, #224]	; (21dac <sntp_query+0x12c>)
   21ccc:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   21cce:	0a13      	lsrs	r3, r2, #8
   21cd0:	0211      	lsls	r1, r2, #8
   21cd2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   21cd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   21cda:	430b      	orrs	r3, r1
   21cdc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   21ce0:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   21ce4:	68e8      	ldr	r0, [r5, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   21ce6:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   21ce8:	930c      	str	r3, [sp, #48]	; 0x30
		union { uintptr_t x; socklen_t val; } parm5 = { .val = addrlen };
		return (ssize_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, parm5.x, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   21cea:	2230      	movs	r2, #48	; 0x30
   21cec:	4633      	mov	r3, r6
   21cee:	e9cd 6600 	strd	r6, r6, [sp]
   21cf2:	a902      	add	r1, sp, #8
   21cf4:	f01b fe15 	bl	3d922 <z_impl_zsock_sendto>
	if (ret < 0) {
   21cf8:	2800      	cmp	r0, #0
   21cfa:	db0f      	blt.n	21d1c <sntp_query+0x9c>
	struct sntp_pkt buf = { 0 };
   21cfc:	4631      	mov	r1, r6
   21cfe:	2230      	movs	r2, #48	; 0x30
   21d00:	a80e      	add	r0, sp, #56	; 0x38
   21d02:	f01f ff2d 	bl	41b60 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   21d06:	68a9      	ldr	r1, [r5, #8]
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   21d08:	463a      	mov	r2, r7
   21d0a:	4628      	mov	r0, r5
   21d0c:	f01b fe90 	bl	3da30 <z_impl_zsock_poll>
	if (status < 0) {
   21d10:	42b0      	cmp	r0, r6
   21d12:	da05      	bge.n	21d20 <sntp_query+0xa0>
		return -errno;
   21d14:	f01c f8c9 	bl	3deaa <__errno>
   21d18:	6800      	ldr	r0, [r0, #0]
   21d1a:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   21d1c:	b01b      	add	sp, #108	; 0x6c
   21d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == 0) {
   21d20:	d037      	beq.n	21d92 <sntp_query+0x112>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   21d22:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   21d24:	2230      	movs	r2, #48	; 0x30
   21d26:	4633      	mov	r3, r6
   21d28:	e9cd 6600 	strd	r6, r6, [sp]
   21d2c:	a90e      	add	r1, sp, #56	; 0x38
   21d2e:	f01b fe4f 	bl	3d9d0 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   21d32:	2800      	cmp	r0, #0
   21d34:	dbee      	blt.n	21d14 <sntp_query+0x94>
	if (rcvd != sizeof(struct sntp_pkt)) {
   21d36:	2830      	cmp	r0, #48	; 0x30
   21d38:	d12e      	bne.n	21d98 <sntp_query+0x118>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   21d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21d3c:	692a      	ldr	r2, [r5, #16]
   21d3e:	ba1b      	rev	r3, r3
   21d40:	429a      	cmp	r2, r3
   21d42:	d002      	beq.n	21d4a <sntp_query+0xca>
		return -EINVAL;
   21d44:	f06f 0015 	mvn.w	r0, #21
   21d48:	e7e8      	b.n	21d1c <sntp_query+0x9c>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   21d4a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   21d4e:	f003 0307 	and.w	r3, r3, #7
   21d52:	2b04      	cmp	r3, #4
   21d54:	d1f6      	bne.n	21d44 <sntp_query+0xc4>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   21d56:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   21d5a:	b303      	cbz	r3, 21d9e <sntp_query+0x11e>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   21d5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   21d5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   21d60:	ba1b      	rev	r3, r3
   21d62:	ba12      	rev	r2, r2
   21d64:	ea53 0102 	orrs.w	r1, r3, r2
   21d68:	d0ec      	beq.n	21d44 <sntp_query+0xc4>
	if (ts & 0x80000000) {
   21d6a:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   21d6c:	60a2      	str	r2, [r4, #8]
	if (ts & 0x80000000) {
   21d6e:	da0a      	bge.n	21d86 <sntp_query+0x106>
		if (ts >= OFFSET_1970_JAN_1) {
   21d70:	4a0f      	ldr	r2, [pc, #60]	; (21db0 <sntp_query+0x130>)
   21d72:	4293      	cmp	r3, r2
   21d74:	d9e6      	bls.n	21d44 <sntp_query+0xc4>
			time->seconds = ts - OFFSET_1970_JAN_1;
   21d76:	2000      	movs	r0, #0
   21d78:	4a0e      	ldr	r2, [pc, #56]	; (21db4 <sntp_query+0x134>)
   21d7a:	189b      	adds	r3, r3, r2
   21d7c:	f140 32ff 	adc.w	r2, r0, #4294967295
   21d80:	e9c4 3200 	strd	r3, r2, [r4]
   21d84:	e7ca      	b.n	21d1c <sntp_query+0x9c>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   21d86:	2000      	movs	r0, #0
   21d88:	4a0a      	ldr	r2, [pc, #40]	; (21db4 <sntp_query+0x134>)
   21d8a:	441a      	add	r2, r3
   21d8c:	e9c4 2000 	strd	r2, r0, [r4]
   21d90:	e7c4      	b.n	21d1c <sntp_query+0x9c>
		return -ETIMEDOUT;
   21d92:	f06f 0073 	mvn.w	r0, #115	; 0x73
   21d96:	e7c1      	b.n	21d1c <sntp_query+0x9c>
		return -EMSGSIZE;
   21d98:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21d9c:	e7be      	b.n	21d1c <sntp_query+0x9c>
		return -EBUSY;
   21d9e:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   21da2:	e7bb      	b.n	21d1c <sntp_query+0x9c>
		return -EFAULT;
   21da4:	f06f 000d 	mvn.w	r0, #13
   21da8:	e7b8      	b.n	21d1c <sntp_query+0x9c>
   21daa:	bf00      	nop
   21dac:	83aa7e80 	.word	0x83aa7e80
   21db0:	83aa7e7f 	.word	0x83aa7e7f
   21db4:	7c558180 	.word	0x7c558180

00021db8 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   21db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21dbc:	4605      	mov	r5, r0
   21dbe:	460e      	mov	r6, r1
   21dc0:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   21dc2:	4c1c      	ldr	r4, [pc, #112]	; (21e34 <z_impl_zsock_socket+0x7c>)
   21dc4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 21e3c <z_impl_zsock_socket+0x84>
   21dc8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 21e40 <z_impl_zsock_socket+0x88>
   21dcc:	454c      	cmp	r4, r9
   21dce:	d908      	bls.n	21de2 <z_impl_zsock_socket+0x2a>
   21dd0:	4641      	mov	r1, r8
   21dd2:	4819      	ldr	r0, [pc, #100]	; (21e38 <z_impl_zsock_socket+0x80>)
   21dd4:	22d6      	movs	r2, #214	; 0xd6
   21dd6:	f01b f9d6 	bl	3d186 <assert_print>
   21dda:	21d6      	movs	r1, #214	; 0xd6
   21ddc:	4640      	mov	r0, r8
   21dde:	f01b f9cb 	bl	3d178 <assert_post_action>
   21de2:	454c      	cmp	r4, r9
   21de4:	d307      	bcc.n	21df6 <z_impl_zsock_socket+0x3e>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   21de6:	f01c f860 	bl	3deaa <__errno>
   21dea:	236a      	movs	r3, #106	; 0x6a
   21dec:	6003      	str	r3, [r0, #0]
	return -1;
}
   21dee:	f04f 30ff 	mov.w	r0, #4294967295
   21df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   21df6:	6823      	ldr	r3, [r4, #0]
   21df8:	42ab      	cmp	r3, r5
   21dfa:	d000      	beq.n	21dfe <z_impl_zsock_socket+0x46>
   21dfc:	b9bb      	cbnz	r3, 21e2e <z_impl_zsock_socket+0x76>
		NET_ASSERT(sock_family->is_supported);
   21dfe:	6863      	ldr	r3, [r4, #4]
   21e00:	b943      	cbnz	r3, 21e14 <z_impl_zsock_socket+0x5c>
   21e02:	4641      	mov	r1, r8
   21e04:	480c      	ldr	r0, [pc, #48]	; (21e38 <z_impl_zsock_socket+0x80>)
   21e06:	22dc      	movs	r2, #220	; 0xdc
   21e08:	f01b f9bd 	bl	3d186 <assert_print>
   21e0c:	21dc      	movs	r1, #220	; 0xdc
   21e0e:	4640      	mov	r0, r8
   21e10:	f01b f9b2 	bl	3d178 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   21e14:	463a      	mov	r2, r7
   21e16:	4631      	mov	r1, r6
   21e18:	4628      	mov	r0, r5
   21e1a:	6863      	ldr	r3, [r4, #4]
   21e1c:	4798      	blx	r3
   21e1e:	b130      	cbz	r0, 21e2e <z_impl_zsock_socket+0x76>
		return sock_family->handler(family, type, proto);
   21e20:	463a      	mov	r2, r7
   21e22:	4631      	mov	r1, r6
   21e24:	4628      	mov	r0, r5
   21e26:	68a3      	ldr	r3, [r4, #8]
}
   21e28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   21e2c:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   21e2e:	340c      	adds	r4, #12
   21e30:	e7cc      	b.n	21dcc <z_impl_zsock_socket+0x14>
   21e32:	bf00      	nop
   21e34:	00042d20 	.word	0x00042d20
   21e38:	0004494f 	.word	0x0004494f
   21e3c:	00042d2c 	.word	0x00042d2c
   21e40:	00044a81 	.word	0x00044a81

00021e44 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   21e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e48:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   21e4a:	f04f 0800 	mov.w	r8, #0
{
   21e4e:	b09b      	sub	sp, #108	; 0x6c
   21e50:	9104      	str	r1, [sp, #16]
   21e52:	4610      	mov	r0, r2
   21e54:	4619      	mov	r1, r3
   21e56:	461d      	mov	r5, r3
   21e58:	4614      	mov	r4, r2

	end = sys_clock_timeout_end_calc(timeout);
   21e5a:	f01f fcf7 	bl	4184c <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   21e5e:	46b1      	mov	r9, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   21e60:	46c2      	mov	sl, r8
	bool offload = false;
   21e62:	4647      	mov	r7, r8
	pev = poll_events;
   21e64:	ab0b      	add	r3, sp, #44	; 0x2c
   21e66:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   21e68:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   21e6c:	9b04      	ldr	r3, [sp, #16]
   21e6e:	9303      	str	r3, [sp, #12]
   21e70:	9b03      	ldr	r3, [sp, #12]
   21e72:	bb03      	cbnz	r3, 21eb6 <zsock_poll_internal+0x72>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   21e74:	2f00      	cmp	r7, #0
   21e76:	d060      	beq.n	21f3a <zsock_poll_internal+0xf6>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21e78:	f1b5 3fff 	cmp.w	r5, #4294967295
   21e7c:	bf08      	it	eq
   21e7e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   21e82:	bf16      	itet	ne
   21e84:	f44f 707a 	movne.w	r0, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   21e88:	f04f 34ff 	moveq.w	r4, #4294967295
   21e8c:	fba4 4000 	umullne	r4, r0, r4, r0
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   21e90:	9b04      	ldr	r3, [sp, #16]
   21e92:	bf1c      	itt	ne
   21e94:	0be4      	lsrne	r4, r4, #15
   21e96:	ea44 4440 	orrne.w	r4, r4, r0, lsl #17
   21e9a:	9300      	str	r3, [sp, #0]
   21e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
   21ea0:	4633      	mov	r3, r6
   21ea2:	4641      	mov	r1, r8
   21ea4:	4650      	mov	r0, sl
   21ea6:	9401      	str	r4, [sp, #4]
   21ea8:	f01b fcdd 	bl	3d866 <z_fdtable_call_ioctl>
   21eac:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   21eae:	4638      	mov	r0, r7
   21eb0:	b01b      	add	sp, #108	; 0x6c
   21eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   21eb6:	f8d9 0000 	ldr.w	r0, [r9]
   21eba:	2800      	cmp	r0, #0
   21ebc:	db37      	blt.n	21f2e <zsock_poll_internal+0xea>
	ctx = z_get_fd_obj_and_vtable(sock,
   21ebe:	aa0a      	add	r2, sp, #40	; 0x28
   21ec0:	a909      	add	r1, sp, #36	; 0x24
   21ec2:	f7ff f845 	bl	20f50 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   21ec6:	9007      	str	r0, [sp, #28]
   21ec8:	b388      	cbz	r0, 21f2e <zsock_poll_internal+0xea>
		(void)k_mutex_lock(lock, K_FOREVER);
   21eca:	f04f 32ff 	mov.w	r2, #4294967295
   21ece:	f04f 33ff 	mov.w	r3, #4294967295
   21ed2:	980a      	ldr	r0, [sp, #40]	; 0x28
   21ed4:	f01b fcd6 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   21ed8:	ab1a      	add	r3, sp, #104	; 0x68
   21eda:	9301      	str	r3, [sp, #4]
   21edc:	ab08      	add	r3, sp, #32
   21ede:	9300      	str	r3, [sp, #0]
   21ee0:	f44f 7281 	mov.w	r2, #258	; 0x102
   21ee4:	464b      	mov	r3, r9
   21ee6:	9907      	ldr	r1, [sp, #28]
   21ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
   21eea:	f01b fcbc 	bl	3d866 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   21eee:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   21ef2:	4683      	mov	fp, r0
		if (result == -EALREADY) {
   21ef4:	d00d      	beq.n	21f12 <zsock_poll_internal+0xce>
		} else if (result == -EXDEV) {
   21ef6:	f110 0f12 	cmn.w	r0, #18
   21efa:	9907      	ldr	r1, [sp, #28]
   21efc:	d10c      	bne.n	21f18 <zsock_poll_internal+0xd4>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   21efe:	f1ba 0f00 	cmp.w	sl, #0
   21f02:	d102      	bne.n	21f0a <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   21f04:	4688      	mov	r8, r1
   21f06:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			result = 0;
   21f0a:	f04f 0b00 	mov.w	fp, #0
			offload = true;
   21f0e:	2701      	movs	r7, #1
   21f10:	e002      	b.n	21f18 <zsock_poll_internal+0xd4>
			timeout = K_NO_WAIT;
   21f12:	2400      	movs	r4, #0
   21f14:	4625      	mov	r5, r4
			result = 0;
   21f16:	46a3      	mov	fp, r4
		k_mutex_unlock(lock);
   21f18:	980a      	ldr	r0, [sp, #40]	; 0x28
   21f1a:	f01b fcb5 	bl	3d888 <k_mutex_unlock.isra.0>
		if (result < 0) {
   21f1e:	f1bb 0f00 	cmp.w	fp, #0
   21f22:	da04      	bge.n	21f2e <zsock_poll_internal+0xea>
				errno = -result;
   21f24:	f01b ffc1 	bl	3deaa <__errno>
   21f28:	f1cb 0300 	rsb	r3, fp, #0
   21f2c:	e036      	b.n	21f9c <zsock_poll_internal+0x158>
	for (pfd = fds, i = nfds; i--; pfd++) {
   21f2e:	9b03      	ldr	r3, [sp, #12]
   21f30:	f109 0908 	add.w	r9, r9, #8
   21f34:	3b01      	subs	r3, #1
   21f36:	9303      	str	r3, [sp, #12]
   21f38:	e79a      	b.n	21e70 <zsock_poll_internal+0x2c>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21f3a:	ea54 0305 	orrs.w	r3, r4, r5
   21f3e:	d010      	beq.n	21f62 <zsock_poll_internal+0x11e>
   21f40:	f1b5 3fff 	cmp.w	r5, #4294967295
   21f44:	bf08      	it	eq
   21f46:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21f4a:	d00a      	beq.n	21f62 <zsock_poll_internal+0x11e>
		int64_t remaining = end - sys_clock_tick_get();
   21f4c:	f017 fa50 	bl	393f0 <sys_clock_tick_get>
   21f50:	9b05      	ldr	r3, [sp, #20]
   21f52:	1a1c      	subs	r4, r3, r0
   21f54:	9b06      	ldr	r3, [sp, #24]
   21f56:	eb63 0501 	sbc.w	r5, r3, r1
   21f5a:	2d00      	cmp	r5, #0
   21f5c:	bfbc      	itt	lt
   21f5e:	463c      	movlt	r4, r7
   21f60:	4625      	movlt	r5, r4
		ret = k_poll(poll_events, pev - poll_events, timeout);
   21f62:	9908      	ldr	r1, [sp, #32]
   21f64:	af0b      	add	r7, sp, #44	; 0x2c
   21f66:	4b3f      	ldr	r3, [pc, #252]	; (22064 <zsock_poll_internal+0x220>)
   21f68:	1bc9      	subs	r1, r1, r7
   21f6a:	1089      	asrs	r1, r1, #2
   21f6c:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   21f6e:	462b      	mov	r3, r5
   21f70:	4622      	mov	r2, r4
   21f72:	4638      	mov	r0, r7
   21f74:	f017 fd56 	bl	39a24 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   21f78:	f100 030b 	add.w	r3, r0, #11
   21f7c:	2b0b      	cmp	r3, #11
   21f7e:	4681      	mov	r9, r0
   21f80:	d808      	bhi.n	21f94 <zsock_poll_internal+0x150>
   21f82:	f640 0881 	movw	r8, #2177	; 0x881
   21f86:	fa28 f803 	lsr.w	r8, r8, r3
   21f8a:	ea6f 0808 	mvn.w	r8, r8
   21f8e:	f018 0801 	ands.w	r8, r8, #1
   21f92:	d007      	beq.n	21fa4 <zsock_poll_internal+0x160>
			errno = -ret;
   21f94:	f01b ff89 	bl	3deaa <__errno>
   21f98:	f1c9 0300 	rsb	r3, r9, #0
			return -1;
   21f9c:	f04f 37ff 	mov.w	r7, #4294967295
			errno = -ret;
   21fa0:	6003      	str	r3, [r0, #0]
			return -1;
   21fa2:	e784      	b.n	21eae <zsock_poll_internal+0x6a>
		pev = poll_events;
   21fa4:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   21fa6:	46b1      	mov	r9, r6
		ret = 0;
   21fa8:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   21faa:	f8dd a010 	ldr.w	sl, [sp, #16]
   21fae:	f1ba 0f00 	cmp.w	sl, #0
   21fb2:	d11c      	bne.n	21fee <zsock_poll_internal+0x1aa>
		if (retry) {
   21fb4:	f1b8 0f00 	cmp.w	r8, #0
   21fb8:	f43f af79 	beq.w	21eae <zsock_poll_internal+0x6a>
			if (ret > 0) {
   21fbc:	2f00      	cmp	r7, #0
   21fbe:	f47f af76 	bne.w	21eae <zsock_poll_internal+0x6a>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21fc2:	ea54 0305 	orrs.w	r3, r4, r5
   21fc6:	f43f af72 	beq.w	21eae <zsock_poll_internal+0x6a>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21fca:	f1b5 3fff 	cmp.w	r5, #4294967295
   21fce:	bf08      	it	eq
   21fd0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21fd4:	d0c5      	beq.n	21f62 <zsock_poll_internal+0x11e>
				int64_t remaining = end - sys_clock_tick_get();
   21fd6:	f017 fa0b 	bl	393f0 <sys_clock_tick_get>
   21fda:	9b05      	ldr	r3, [sp, #20]
   21fdc:	1a1c      	subs	r4, r3, r0
   21fde:	9b06      	ldr	r3, [sp, #24]
   21fe0:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   21fe4:	2c01      	cmp	r4, #1
   21fe6:	f175 0300 	sbcs.w	r3, r5, #0
   21fea:	daba      	bge.n	21f62 <zsock_poll_internal+0x11e>
   21fec:	e75f      	b.n	21eae <zsock_poll_internal+0x6a>
			pfd->revents = 0;
   21fee:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   21ff2:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   21ff6:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   21ffa:	2800      	cmp	r0, #0
   21ffc:	db29      	blt.n	22052 <zsock_poll_internal+0x20e>
	ctx = z_get_fd_obj_and_vtable(sock,
   21ffe:	aa0a      	add	r2, sp, #40	; 0x28
   22000:	a909      	add	r1, sp, #36	; 0x24
   22002:	f7fe ffa5 	bl	20f50 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   22006:	4683      	mov	fp, r0
   22008:	b920      	cbnz	r0, 22014 <zsock_poll_internal+0x1d0>
				pfd->revents = ZSOCK_POLLNVAL;
   2200a:	2320      	movs	r3, #32
   2200c:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   22010:	3701      	adds	r7, #1
   22012:	e01e      	b.n	22052 <zsock_poll_internal+0x20e>
			(void)k_mutex_lock(lock, K_FOREVER);
   22014:	f04f 32ff 	mov.w	r2, #4294967295
   22018:	f04f 33ff 	mov.w	r3, #4294967295
   2201c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2201e:	f01b fc31 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   22022:	ab08      	add	r3, sp, #32
   22024:	4659      	mov	r1, fp
   22026:	f240 1203 	movw	r2, #259	; 0x103
   2202a:	9300      	str	r3, [sp, #0]
   2202c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2202e:	464b      	mov	r3, r9
   22030:	f01b fc19 	bl	3d866 <z_fdtable_call_ioctl>
   22034:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   22036:	980a      	ldr	r0, [sp, #40]	; 0x28
   22038:	f01b fc26 	bl	3d888 <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   2203c:	f11b 0f0b 	cmn.w	fp, #11
   22040:	d00c      	beq.n	2205c <zsock_poll_internal+0x218>
			} else if (result != 0) {
   22042:	f1bb 0f00 	cmp.w	fp, #0
   22046:	f47f af6d 	bne.w	21f24 <zsock_poll_internal+0xe0>
			if (pfd->revents != 0) {
   2204a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   2204e:	2b00      	cmp	r3, #0
   22050:	d1de      	bne.n	22010 <zsock_poll_internal+0x1cc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   22052:	f109 0908 	add.w	r9, r9, #8
   22056:	f10a 3aff 	add.w	sl, sl, #4294967295
   2205a:	e7a8      	b.n	21fae <zsock_poll_internal+0x16a>
				retry = true;
   2205c:	f04f 0801 	mov.w	r8, #1
   22060:	e7f7      	b.n	22052 <zsock_poll_internal+0x20e>
   22062:	bf00      	nop
   22064:	cccccccd 	.word	0xcccccccd

00022068 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   22068:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   2206a:	4604      	mov	r4, r0
   2206c:	b940      	cbnz	r0, 22080 <socket_offload_dns_register+0x18>
   2206e:	490b      	ldr	r1, [pc, #44]	; (2209c <socket_offload_dns_register+0x34>)
   22070:	480b      	ldr	r0, [pc, #44]	; (220a0 <socket_offload_dns_register+0x38>)
   22072:	2213      	movs	r2, #19
   22074:	f01b f887 	bl	3d186 <assert_print>
   22078:	2113      	movs	r1, #19
   2207a:	4808      	ldr	r0, [pc, #32]	; (2209c <socket_offload_dns_register+0x34>)
   2207c:	f01b f87c 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   22080:	4d08      	ldr	r5, [pc, #32]	; (220a4 <socket_offload_dns_register+0x3c>)
   22082:	682b      	ldr	r3, [r5, #0]
   22084:	b143      	cbz	r3, 22098 <socket_offload_dns_register+0x30>
   22086:	4905      	ldr	r1, [pc, #20]	; (2209c <socket_offload_dns_register+0x34>)
   22088:	4805      	ldr	r0, [pc, #20]	; (220a0 <socket_offload_dns_register+0x38>)
   2208a:	2214      	movs	r2, #20
   2208c:	f01b f87b 	bl	3d186 <assert_print>
   22090:	2114      	movs	r1, #20
   22092:	4802      	ldr	r0, [pc, #8]	; (2209c <socket_offload_dns_register+0x34>)
   22094:	f01b f870 	bl	3d178 <assert_post_action>

	dns_offload = ops;
   22098:	602c      	str	r4, [r5, #0]
}
   2209a:	bd38      	pop	{r3, r4, r5, pc}
   2209c:	00044ab5 	.word	0x00044ab5
   220a0:	0004494f 	.word	0x0004494f
   220a4:	20019134 	.word	0x20019134

000220a8 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   220a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   220ac:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2210c <socket_offload_getaddrinfo+0x64>
{
   220b0:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dns_offload);
   220b2:	f8d8 3000 	ldr.w	r3, [r8]
{
   220b6:	4604      	mov	r4, r0
   220b8:	460d      	mov	r5, r1
   220ba:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dns_offload);
   220bc:	b943      	cbnz	r3, 220d0 <socket_offload_getaddrinfo+0x28>
   220be:	4911      	ldr	r1, [pc, #68]	; (22104 <socket_offload_getaddrinfo+0x5c>)
   220c0:	4811      	ldr	r0, [pc, #68]	; (22108 <socket_offload_getaddrinfo+0x60>)
   220c2:	221d      	movs	r2, #29
   220c4:	f01b f85f 	bl	3d186 <assert_print>
   220c8:	211d      	movs	r1, #29
   220ca:	480e      	ldr	r0, [pc, #56]	; (22104 <socket_offload_getaddrinfo+0x5c>)
   220cc:	f01b f854 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   220d0:	f8d8 3000 	ldr.w	r3, [r8]
   220d4:	681b      	ldr	r3, [r3, #0]
   220d6:	b943      	cbnz	r3, 220ea <socket_offload_getaddrinfo+0x42>
   220d8:	490a      	ldr	r1, [pc, #40]	; (22104 <socket_offload_getaddrinfo+0x5c>)
   220da:	480b      	ldr	r0, [pc, #44]	; (22108 <socket_offload_getaddrinfo+0x60>)
   220dc:	221e      	movs	r2, #30
   220de:	f01b f852 	bl	3d186 <assert_print>
   220e2:	211e      	movs	r1, #30
   220e4:	4807      	ldr	r0, [pc, #28]	; (22104 <socket_offload_getaddrinfo+0x5c>)
   220e6:	f01b f847 	bl	3d178 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   220ea:	f8d8 3000 	ldr.w	r3, [r8]
   220ee:	4632      	mov	r2, r6
   220f0:	f8d3 e000 	ldr.w	lr, [r3]
   220f4:	4629      	mov	r1, r5
   220f6:	463b      	mov	r3, r7
   220f8:	4620      	mov	r0, r4
   220fa:	46f4      	mov	ip, lr
}
   220fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   22100:	4760      	bx	ip
   22102:	bf00      	nop
   22104:	00044ab5 	.word	0x00044ab5
   22108:	0004494f 	.word	0x0004494f
   2210c:	20019134 	.word	0x20019134

00022110 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   22110:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   22112:	4d0f      	ldr	r5, [pc, #60]	; (22150 <socket_offload_freeaddrinfo+0x40>)
{
   22114:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(dns_offload);
   22116:	682b      	ldr	r3, [r5, #0]
   22118:	b943      	cbnz	r3, 2212c <socket_offload_freeaddrinfo+0x1c>
   2211a:	490e      	ldr	r1, [pc, #56]	; (22154 <socket_offload_freeaddrinfo+0x44>)
   2211c:	480e      	ldr	r0, [pc, #56]	; (22158 <socket_offload_freeaddrinfo+0x48>)
   2211e:	2225      	movs	r2, #37	; 0x25
   22120:	f01b f831 	bl	3d186 <assert_print>
   22124:	2125      	movs	r1, #37	; 0x25
   22126:	480b      	ldr	r0, [pc, #44]	; (22154 <socket_offload_freeaddrinfo+0x44>)
   22128:	f01b f826 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   2212c:	682b      	ldr	r3, [r5, #0]
   2212e:	685b      	ldr	r3, [r3, #4]
   22130:	b943      	cbnz	r3, 22144 <socket_offload_freeaddrinfo+0x34>
   22132:	4908      	ldr	r1, [pc, #32]	; (22154 <socket_offload_freeaddrinfo+0x44>)
   22134:	4808      	ldr	r0, [pc, #32]	; (22158 <socket_offload_freeaddrinfo+0x48>)
   22136:	2226      	movs	r2, #38	; 0x26
   22138:	f01b f825 	bl	3d186 <assert_print>
   2213c:	2126      	movs	r1, #38	; 0x26
   2213e:	4805      	ldr	r0, [pc, #20]	; (22154 <socket_offload_freeaddrinfo+0x44>)
   22140:	f01b f81a 	bl	3d178 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   22144:	682b      	ldr	r3, [r5, #0]
   22146:	4620      	mov	r0, r4
}
   22148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   2214c:	685b      	ldr	r3, [r3, #4]
   2214e:	4718      	bx	r3
   22150:	20019134 	.word	0x20019134
   22154:	00044ab5 	.word	0x00044ab5
   22158:	0004494f 	.word	0x0004494f

0002215c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2215c:	4b0c      	ldr	r3, [pc, #48]	; (22190 <flash_area_open+0x34>)
{
   2215e:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   22160:	681b      	ldr	r3, [r3, #0]
   22162:	b173      	cbz	r3, 22182 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   22164:	4a0b      	ldr	r2, [pc, #44]	; (22194 <flash_area_open+0x38>)
   22166:	6815      	ldr	r5, [r2, #0]
   22168:	2200      	movs	r2, #0
   2216a:	42aa      	cmp	r2, r5
   2216c:	db02      	blt.n	22174 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   2216e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   22172:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   22174:	461c      	mov	r4, r3
   22176:	f813 6b10 	ldrb.w	r6, [r3], #16
   2217a:	4286      	cmp	r6, r0
   2217c:	d004      	beq.n	22188 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   2217e:	3201      	adds	r2, #1
   22180:	e7f3      	b.n	2216a <flash_area_open+0xe>
		return -EACCES;
   22182:	f06f 000c 	mvn.w	r0, #12
   22186:	e7f4      	b.n	22172 <flash_area_open+0x16>
	return 0;
   22188:	2000      	movs	r0, #0
	*fap = area;
   2218a:	600c      	str	r4, [r1, #0]
	return 0;
   2218c:	e7f1      	b.n	22172 <flash_area_open+0x16>
   2218e:	bf00      	nop
   22190:	20014618 	.word	0x20014618
   22194:	000431c0 	.word	0x000431c0

00022198 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   22198:	b570      	push	{r4, r5, r6, lr}
   2219a:	b088      	sub	sp, #32
   2219c:	4605      	mov	r5, r0
   2219e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   221a0:	b2c0      	uxtb	r0, r0
   221a2:	4669      	mov	r1, sp
{
   221a4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   221a6:	f7ff ffd9 	bl	2215c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   221aa:	2800      	cmp	r0, #0
   221ac:	db1f      	blt.n	221ee <flash_area_get_sectors+0x56>
   221ae:	9b00      	ldr	r3, [sp, #0]
   221b0:	b1eb      	cbz	r3, 221ee <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   221b2:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
   221b4:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
   221b6:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   221b8:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   221ba:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
   221bc:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   221c0:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
   221c2:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
   221c4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   221c8:	9205      	str	r2, [sp, #20]
   221ca:	f014 f98b 	bl	364e4 <z_impl_device_get_binding>
   221ce:	4605      	mov	r5, r0
	flash_area_close(fa);
   221d0:	9800      	ldr	r0, [sp, #0]
   221d2:	f01b fc80 	bl	3dad6 <flash_area_close>
	if (flash_dev == NULL) {
   221d6:	b16d      	cbz	r5, 221f4 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   221d8:	4628      	mov	r0, r5
   221da:	4908      	ldr	r1, [pc, #32]	; (221fc <flash_area_get_sectors+0x64>)
   221dc:	aa01      	add	r2, sp, #4
   221de:	f01c feb5 	bl	3ef4c <flash_page_foreach>
	if (cb_data->status == 0) {
   221e2:	9807      	ldr	r0, [sp, #28]
   221e4:	b908      	cbnz	r0, 221ea <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   221e6:	9b05      	ldr	r3, [sp, #20]
   221e8:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   221ea:	b008      	add	sp, #32
   221ec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   221ee:	f06f 0015 	mvn.w	r0, #21
   221f2:	e7fa      	b.n	221ea <flash_area_get_sectors+0x52>
		return -ENODEV;
   221f4:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   221f8:	e7f7      	b.n	221ea <flash_area_get_sectors+0x52>
   221fa:	bf00      	nop
   221fc:	0003db9b 	.word	0x0003db9b

00022200 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   22200:	6842      	ldr	r2, [r0, #4]
   22202:	680b      	ldr	r3, [r1, #0]
{
   22204:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   22206:	4293      	cmp	r3, r2
{
   22208:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   2220a:	d906      	bls.n	2221a <find_flash_total_size+0x1a>
		LOG_ERR("Buffer size is bigger than page");
   2220c:	4805      	ldr	r0, [pc, #20]	; (22224 <find_flash_total_size+0x24>)
   2220e:	2145      	movs	r1, #69	; 0x45
   22210:	f01a fff3 	bl	3d1fa <z_log_minimal_printk>
		ctx->total_size = 0;
   22214:	2000      	movs	r0, #0
   22216:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   22218:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   2221a:	684b      	ldr	r3, [r1, #4]
	return true;
   2221c:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   2221e:	4413      	add	r3, r2
   22220:	604b      	str	r3, [r1, #4]
	return true;
   22222:	e7f9      	b.n	22218 <find_flash_total_size+0x18>
   22224:	00044af0 	.word	0x00044af0

00022228 <stream_flash_erase_page>:
{
   22228:	b530      	push	{r4, r5, lr}
   2222a:	4605      	mov	r5, r0
   2222c:	b085      	sub	sp, #20
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   2222e:	68c0      	ldr	r0, [r0, #12]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   22230:	aa01      	add	r2, sp, #4
   22232:	f01c fe87 	bl	3ef44 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   22236:	4604      	mov	r4, r0
   22238:	b138      	cbz	r0, 2224a <stream_flash_erase_page+0x22>
		LOG_ERR("Error %d while getting page info", rc);
   2223a:	2145      	movs	r1, #69	; 0x45
   2223c:	4602      	mov	r2, r0
   2223e:	480c      	ldr	r0, [pc, #48]	; (22270 <stream_flash_erase_page+0x48>)
		LOG_ERR("Error %d while erasing page", rc);
   22240:	f01a ffdb 	bl	3d1fa <z_log_minimal_printk>
}
   22244:	4620      	mov	r0, r4
   22246:	b005      	add	sp, #20
   22248:	bd30      	pop	{r4, r5, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   2224a:	9901      	ldr	r1, [sp, #4]
   2224c:	6a2b      	ldr	r3, [r5, #32]
   2224e:	428b      	cmp	r3, r1
   22250:	d0f8      	beq.n	22244 <stream_flash_erase_page+0x1c>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   22252:	68e8      	ldr	r0, [r5, #12]
   22254:	9a02      	ldr	r2, [sp, #8]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
   22256:	6883      	ldr	r3, [r0, #8]
   22258:	689b      	ldr	r3, [r3, #8]
   2225a:	4798      	blx	r3
	if (rc != 0) {
   2225c:	4604      	mov	r4, r0
   2225e:	b118      	cbz	r0, 22268 <stream_flash_erase_page+0x40>
		LOG_ERR("Error %d while erasing page", rc);
   22260:	4602      	mov	r2, r0
   22262:	2145      	movs	r1, #69	; 0x45
   22264:	4803      	ldr	r0, [pc, #12]	; (22274 <stream_flash_erase_page+0x4c>)
   22266:	e7eb      	b.n	22240 <stream_flash_erase_page+0x18>
		ctx->last_erased_page_start_offset = page.start_offset;
   22268:	9b01      	ldr	r3, [sp, #4]
   2226a:	622b      	str	r3, [r5, #32]
   2226c:	e7ea      	b.n	22244 <stream_flash_erase_page+0x1c>
   2226e:	bf00      	nop
   22270:	00044b15 	.word	0x00044b15
   22274:	00044b3b 	.word	0x00044b3b

00022278 <flash_sync>:
{
   22278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ctx->buf_bytes == 0) {
   2227a:	6885      	ldr	r5, [r0, #8]
{
   2227c:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   2227e:	b175      	cbz	r5, 2229e <flash_sync+0x26>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   22280:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   22284:	3d01      	subs	r5, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   22286:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   22288:	19a9      	adds	r1, r5, r6
   2228a:	f7ff ffcd 	bl	22228 <stream_flash_erase_page>
		if (rc < 0) {
   2228e:	1e05      	subs	r5, r0, #0
   22290:	da07      	bge.n	222a2 <flash_sync+0x2a>
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   22292:	4633      	mov	r3, r6
   22294:	462a      	mov	r2, r5
   22296:	2145      	movs	r1, #69	; 0x45
   22298:	482c      	ldr	r0, [pc, #176]	; (2234c <flash_sync+0xd4>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   2229a:	f01a ffae 	bl	3d1fa <z_log_minimal_printk>
}
   2229e:	4628      	mov	r0, r5
   222a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
   222a2:	68e0      	ldr	r0, [r4, #12]
   222a4:	f01b fc97 	bl	3dbd6 <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   222a8:	68a5      	ldr	r5, [r4, #8]
   222aa:	fbb5 f3f0 	udiv	r3, r5, r0
   222ae:	fb00 5513 	mls	r5, r0, r3, r5
   222b2:	b15d      	cbz	r5, 222cc <flash_sync+0x54>
		fill_length -= ctx->buf_bytes % fill_length;
   222b4:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   222b6:	68e0      	ldr	r0, [r4, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   222b8:	6883      	ldr	r3, [r0, #8]
   222ba:	68db      	ldr	r3, [r3, #12]
   222bc:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   222be:	6827      	ldr	r7, [r4, #0]
   222c0:	68a3      	ldr	r3, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
   222c2:	7901      	ldrb	r1, [r0, #4]
   222c4:	462a      	mov	r2, r5
   222c6:	18f8      	adds	r0, r7, r3
   222c8:	f01f fc4a 	bl	41b60 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   222cc:	68a3      	ldr	r3, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   222ce:	68e0      	ldr	r0, [r4, #12]
   222d0:	6822      	ldr	r2, [r4, #0]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   222d2:	442b      	add	r3, r5
	rc = api->write(dev, offset, data, len);
   222d4:	6881      	ldr	r1, [r0, #8]
   222d6:	684d      	ldr	r5, [r1, #4]
   222d8:	4631      	mov	r1, r6
   222da:	47a8      	blx	r5
	if (rc != 0) {
   222dc:	4605      	mov	r5, r0
   222de:	b120      	cbz	r0, 222ea <flash_sync+0x72>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   222e0:	4602      	mov	r2, r0
   222e2:	4633      	mov	r3, r6
   222e4:	2145      	movs	r1, #69	; 0x45
   222e6:	481a      	ldr	r0, [pc, #104]	; (22350 <flash_sync+0xd8>)
   222e8:	e7d7      	b.n	2229a <flash_sync+0x22>
	if (ctx->callback) {
   222ea:	69e3      	ldr	r3, [r4, #28]
   222ec:	b9e3      	cbnz	r3, 22328 <flash_sync+0xb0>
	ctx->bytes_written += ctx->buf_bytes;
   222ee:	6923      	ldr	r3, [r4, #16]
   222f0:	68a2      	ldr	r2, [r4, #8]
   222f2:	4413      	add	r3, r2
   222f4:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   222f6:	2300      	movs	r3, #0
   222f8:	60a3      	str	r3, [r4, #8]
	return rc;
   222fa:	e7d0      	b.n	2229e <flash_sync+0x26>
			ctx->buf[i] = ~ctx->buf[i];
   222fc:	5c53      	ldrb	r3, [r2, r1]
   222fe:	43db      	mvns	r3, r3
   22300:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   22302:	3101      	adds	r1, #1
   22304:	68a3      	ldr	r3, [r4, #8]
			ctx->buf[i] = ~ctx->buf[i];
   22306:	6822      	ldr	r2, [r4, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   22308:	4299      	cmp	r1, r3
   2230a:	d3f7      	bcc.n	222fc <flash_sync+0x84>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   2230c:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   2230e:	6881      	ldr	r1, [r0, #8]
   22310:	680f      	ldr	r7, [r1, #0]
   22312:	4631      	mov	r1, r6
   22314:	47b8      	blx	r7
		if (rc != 0) {
   22316:	4607      	mov	r7, r0
   22318:	b140      	cbz	r0, 2232c <flash_sync+0xb4>
			LOG_ERR("flash read failed: %d", rc);
   2231a:	4602      	mov	r2, r0
   2231c:	2145      	movs	r1, #69	; 0x45
   2231e:	480d      	ldr	r0, [pc, #52]	; (22354 <flash_sync+0xdc>)
   22320:	f01a ff6b 	bl	3d1fa <z_log_minimal_printk>
			return rc;
   22324:	463d      	mov	r5, r7
   22326:	e7ba      	b.n	2229e <flash_sync+0x26>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   22328:	4601      	mov	r1, r0
   2232a:	e7eb      	b.n	22304 <flash_sync+0x8c>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   2232c:	4632      	mov	r2, r6
   2232e:	69e3      	ldr	r3, [r4, #28]
   22330:	68a1      	ldr	r1, [r4, #8]
   22332:	6820      	ldr	r0, [r4, #0]
   22334:	4798      	blx	r3
		if (rc != 0) {
   22336:	4606      	mov	r6, r0
   22338:	2800      	cmp	r0, #0
   2233a:	d0d8      	beq.n	222ee <flash_sync+0x76>
			LOG_ERR("callback failed: %d", rc);
   2233c:	4602      	mov	r2, r0
   2233e:	2145      	movs	r1, #69	; 0x45
   22340:	4805      	ldr	r0, [pc, #20]	; (22358 <flash_sync+0xe0>)
   22342:	f01a ff5a 	bl	3d1fa <z_log_minimal_printk>
			return rc;
   22346:	4635      	mov	r5, r6
   22348:	e7a9      	b.n	2229e <flash_sync+0x26>
   2234a:	bf00      	nop
   2234c:	00044b5c 	.word	0x00044b5c
   22350:	00044b8f 	.word	0x00044b8f
   22354:	00044bb8 	.word	0x00044bb8
   22358:	00044bd3 	.word	0x00044bd3

0002235c <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   2235c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22360:	460d      	mov	r5, r1
   22362:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   22366:	4691      	mov	r9, r2
   22368:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   2236a:	4604      	mov	r4, r0
   2236c:	b920      	cbnz	r0, 22378 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   2236e:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   22372:	b003      	add	sp, #12
   22374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   22378:	2900      	cmp	r1, #0
   2237a:	d0f8      	beq.n	2236e <stream_flash_init+0x12>
   2237c:	2a00      	cmp	r2, #0
   2237e:	d0f6      	beq.n	2236e <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   22380:	9300      	str	r3, [sp, #0]
   22382:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   22384:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   22386:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   22388:	f01b fc25 	bl	3dbd6 <flash_get_write_block_size>
   2238c:	fbb7 f3f0 	udiv	r3, r7, r0
   22390:	fb03 7010 	mls	r0, r3, r0, r7
   22394:	b120      	cbz	r0, 223a0 <stream_flash_init+0x44>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   22396:	2145      	movs	r1, #69	; 0x45
   22398:	4817      	ldr	r0, [pc, #92]	; (223f8 <stream_flash_init+0x9c>)
		LOG_ERR("Incorrect parameter");
   2239a:	f01a ff2e 	bl	3d1fa <z_log_minimal_printk>
   2239e:	e7e6      	b.n	2236e <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   223a0:	466a      	mov	r2, sp
   223a2:	4628      	mov	r0, r5
   223a4:	4915      	ldr	r1, [pc, #84]	; (223fc <stream_flash_init+0xa0>)
   223a6:	f01c fdd1 	bl	3ef4c <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   223aa:	9b01      	ldr	r3, [sp, #4]
   223ac:	2b00      	cmp	r3, #0
   223ae:	d0de      	beq.n	2236e <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   223b0:	eb06 0208 	add.w	r2, r6, r8
   223b4:	4293      	cmp	r3, r2
   223b6:	d202      	bcs.n	223be <stream_flash_init+0x62>
		LOG_ERR("Incorrect parameter");
   223b8:	2145      	movs	r1, #69	; 0x45
   223ba:	4811      	ldr	r0, [pc, #68]	; (22400 <stream_flash_init+0xa4>)
   223bc:	e7ed      	b.n	2239a <stream_flash_init+0x3e>
	    offset % flash_get_write_block_size(fdev)) {
   223be:	4628      	mov	r0, r5
   223c0:	f01b fc09 	bl	3dbd6 <flash_get_write_block_size>
   223c4:	fbb8 f3f0 	udiv	r3, r8, r0
   223c8:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   223cc:	2800      	cmp	r0, #0
   223ce:	d1f3      	bne.n	223b8 <stream_flash_init+0x5c>
	ctx->buf_len = buf_len;
   223d0:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   223d4:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   223d6:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   223d8:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   223da:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   223de:	b916      	cbnz	r6, 223e6 <stream_flash_init+0x8a>
   223e0:	9e01      	ldr	r6, [sp, #4]
   223e2:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   223e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   223e8:	2000      	movs	r0, #0
	ctx->callback = cb;
   223ea:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   223ec:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   223f0:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   223f2:	6223      	str	r3, [r4, #32]
	return 0;
   223f4:	e7bd      	b.n	22372 <stream_flash_init+0x16>
   223f6:	bf00      	nop
   223f8:	00044bec 	.word	0x00044bec
   223fc:	00022201 	.word	0x00022201
   22400:	00044c28 	.word	0x00044c28

00022404 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   22404:	4b10      	ldr	r3, [pc, #64]	; (22448 <settings_save_one+0x44>)
{
   22406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2240a:	681c      	ldr	r4, [r3, #0]
{
   2240c:	4605      	mov	r5, r0
   2240e:	460e      	mov	r6, r1
   22410:	4617      	mov	r7, r2
	if (!cs) {
   22412:	b1ac      	cbz	r4, 22440 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   22414:	f04f 32ff 	mov.w	r2, #4294967295
   22418:	f04f 33ff 	mov.w	r3, #4294967295
   2241c:	480b      	ldr	r0, [pc, #44]	; (2244c <settings_save_one+0x48>)
   2241e:	f014 fd65 	bl	36eec <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   22422:	6863      	ldr	r3, [r4, #4]
   22424:	4632      	mov	r2, r6
   22426:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2242a:	4629      	mov	r1, r5
   2242c:	463b      	mov	r3, r7
   2242e:	4620      	mov	r0, r4
   22430:	47c0      	blx	r8
   22432:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   22434:	4805      	ldr	r0, [pc, #20]	; (2244c <settings_save_one+0x48>)
   22436:	f014 fe2b 	bl	37090 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2243a:	4620      	mov	r0, r4
   2243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   22440:	f06f 0401 	mvn.w	r4, #1
   22444:	e7f9      	b.n	2243a <settings_save_one+0x36>
   22446:	bf00      	nop
   22448:	20019140 	.word	0x20019140
   2244c:	20014f90 	.word	0x20014f90

00022450 <settings_src_register>:
	parent->next = child;
   22450:	2300      	movs	r3, #0
   22452:	6003      	str	r3, [r0, #0]
	return list->tail;
   22454:	4b04      	ldr	r3, [pc, #16]	; (22468 <settings_src_register+0x18>)
   22456:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22458:	b912      	cbnz	r2, 22460 <settings_src_register+0x10>
	list->head = node;
   2245a:	e9c3 0000 	strd	r0, r0, [r3]
}
   2245e:	4770      	bx	lr
	parent->next = child;
   22460:	6010      	str	r0, [r2, #0]
	list->tail = node;
   22462:	6058      	str	r0, [r3, #4]
}
   22464:	4770      	bx	lr
   22466:	bf00      	nop
   22468:	20019138 	.word	0x20019138

0002246c <settings_dst_register>:
	settings_save_dst = cs;
   2246c:	4b01      	ldr	r3, [pc, #4]	; (22474 <settings_dst_register+0x8>)
   2246e:	6018      	str	r0, [r3, #0]
}
   22470:	4770      	bx	lr
   22472:	bf00      	nop
   22474:	20019140 	.word	0x20019140

00022478 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   22478:	2300      	movs	r3, #0
{
   2247a:	b530      	push	{r4, r5, lr}
   2247c:	b085      	sub	sp, #20
   2247e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   22480:	e9cd 3302 	strd	r3, r3, [sp, #8]
   22484:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   22486:	f04f 33ff 	mov.w	r3, #4294967295
   2248a:	f04f 32ff 	mov.w	r2, #4294967295
   2248e:	480b      	ldr	r0, [pc, #44]	; (224bc <settings_load_subtree+0x44>)
   22490:	f014 fd2c 	bl	36eec <z_impl_k_mutex_lock>
	return list->head;
   22494:	4b0a      	ldr	r3, [pc, #40]	; (224c0 <settings_load_subtree+0x48>)
   22496:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   22498:	b134      	cbz	r4, 224a8 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   2249a:	6863      	ldr	r3, [r4, #4]
   2249c:	4620      	mov	r0, r4
   2249e:	681b      	ldr	r3, [r3, #0]
   224a0:	a901      	add	r1, sp, #4
   224a2:	4798      	blx	r3
	return node->next;
   224a4:	6824      	ldr	r4, [r4, #0]
   224a6:	e7f7      	b.n	22498 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   224a8:	4628      	mov	r0, r5
   224aa:	f000 f8ad 	bl	22608 <settings_commit_subtree>
   224ae:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   224b0:	4802      	ldr	r0, [pc, #8]	; (224bc <settings_load_subtree+0x44>)
   224b2:	f014 fded 	bl	37090 <z_impl_k_mutex_unlock>
}
   224b6:	4620      	mov	r0, r4
   224b8:	b005      	add	sp, #20
   224ba:	bd30      	pop	{r4, r5, pc}
   224bc:	20014f90 	.word	0x20014f90
   224c0:	20019138 	.word	0x20019138

000224c4 <settings_store_init>:
	list->head = NULL;
   224c4:	2200      	movs	r2, #0
   224c6:	4b02      	ldr	r3, [pc, #8]	; (224d0 <settings_store_init+0xc>)
	list->tail = NULL;
   224c8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   224cc:	4770      	bx	lr
   224ce:	bf00      	nop
   224d0:	20019138 	.word	0x20019138

000224d4 <settings_init>:
	list->head = NULL;
   224d4:	2200      	movs	r2, #0
   224d6:	4b02      	ldr	r3, [pc, #8]	; (224e0 <settings_init+0xc>)
	list->tail = NULL;
   224d8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   224dc:	f7ff bff2 	b.w	224c4 <settings_store_init>
   224e0:	20019144 	.word	0x20019144

000224e4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   224e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   224e8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   224ea:	460e      	mov	r6, r1
   224ec:	b109      	cbz	r1, 224f2 <settings_parse_and_lookup+0xe>
		*next = NULL;
   224ee:	2300      	movs	r3, #0
   224f0:	600b      	str	r3, [r1, #0]
   224f2:	2500      	movs	r5, #0
   224f4:	4c22      	ldr	r4, [pc, #136]	; (22580 <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   224f6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2258c <settings_parse_and_lookup+0xa8>
   224fa:	f8df 9094 	ldr.w	r9, [pc, #148]	; 22590 <settings_parse_and_lookup+0xac>
   224fe:	4544      	cmp	r4, r8
   22500:	d908      	bls.n	22514 <settings_parse_and_lookup+0x30>
   22502:	4649      	mov	r1, r9
   22504:	481f      	ldr	r0, [pc, #124]	; (22584 <settings_parse_and_lookup+0xa0>)
   22506:	2294      	movs	r2, #148	; 0x94
   22508:	f01a fe3d 	bl	3d186 <assert_print>
   2250c:	2194      	movs	r1, #148	; 0x94
   2250e:	4648      	mov	r0, r9
   22510:	f01a fe32 	bl	3d178 <assert_post_action>
   22514:	4544      	cmp	r4, r8
   22516:	d310      	bcc.n	2253a <settings_parse_and_lookup+0x56>
	return list->head;
   22518:	4b1b      	ldr	r3, [pc, #108]	; (22588 <settings_parse_and_lookup+0xa4>)
   2251a:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2251c:	b35c      	cbz	r4, 22576 <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2251e:	4638      	mov	r0, r7
   22520:	aa01      	add	r2, sp, #4
   22522:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   22526:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   22528:	f01b fba1 	bl	3dc6e <settings_name_steq>
   2252c:	b308      	cbz	r0, 22572 <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   2252e:	b9cd      	cbnz	r5, 22564 <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   22530:	b10e      	cbz	r6, 22536 <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   22532:	9b01      	ldr	r3, [sp, #4]
   22534:	6033      	str	r3, [r6, #0]
   22536:	4625      	mov	r5, r4
   22538:	e01b      	b.n	22572 <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2253a:	4638      	mov	r0, r7
   2253c:	6821      	ldr	r1, [r4, #0]
   2253e:	aa01      	add	r2, sp, #4
   22540:	f01b fb95 	bl	3dc6e <settings_name_steq>
   22544:	b160      	cbz	r0, 22560 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   22546:	b925      	cbnz	r5, 22552 <settings_parse_and_lookup+0x6e>
			if (next) {
   22548:	b10e      	cbz	r6, 2254e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   2254a:	9b01      	ldr	r3, [sp, #4]
   2254c:	6033      	str	r3, [r6, #0]
   2254e:	4625      	mov	r5, r4
   22550:	e006      	b.n	22560 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   22552:	2200      	movs	r2, #0
   22554:	6829      	ldr	r1, [r5, #0]
   22556:	6820      	ldr	r0, [r4, #0]
   22558:	f01b fb89 	bl	3dc6e <settings_name_steq>
   2255c:	2800      	cmp	r0, #0
   2255e:	d1f3      	bne.n	22548 <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22560:	3414      	adds	r4, #20
   22562:	e7cc      	b.n	224fe <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   22564:	2200      	movs	r2, #0
   22566:	6829      	ldr	r1, [r5, #0]
   22568:	6820      	ldr	r0, [r4, #0]
   2256a:	f01b fb80 	bl	3dc6e <settings_name_steq>
   2256e:	2800      	cmp	r0, #0
   22570:	d1de      	bne.n	22530 <settings_parse_and_lookup+0x4c>
	return node->next;
   22572:	6964      	ldr	r4, [r4, #20]
   22574:	e7d2      	b.n	2251c <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   22576:	4628      	mov	r0, r5
   22578:	b003      	add	sp, #12
   2257a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2257e:	bf00      	nop
   22580:	00042d2c 	.word	0x00042d2c
   22584:	0004494f 	.word	0x0004494f
   22588:	20019144 	.word	0x20019144
   2258c:	00042d68 	.word	0x00042d68
   22590:	00044c4e 	.word	0x00044c4e

00022594 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   22594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22598:	b086      	sub	sp, #24
   2259a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2259c:	4604      	mov	r4, r0
   2259e:	460d      	mov	r5, r1
   225a0:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   225a2:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   225a4:	b1bf      	cbz	r7, 225d6 <settings_call_set_handler+0x42>
   225a6:	6839      	ldr	r1, [r7, #0]
   225a8:	b181      	cbz	r1, 225cc <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   225aa:	aa05      	add	r2, sp, #20
   225ac:	9303      	str	r3, [sp, #12]
   225ae:	f01b fb5e 	bl	3dc6e <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   225b2:	9b03      	ldr	r3, [sp, #12]
   225b4:	b950      	cbnz	r0, 225cc <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   225b6:	2000      	movs	r0, #0
   225b8:	e005      	b.n	225c6 <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   225ba:	68ba      	ldr	r2, [r7, #8]
   225bc:	4629      	mov	r1, r5
   225be:	9200      	str	r2, [sp, #0]
   225c0:	9805      	ldr	r0, [sp, #20]
   225c2:	4632      	mov	r2, r6
   225c4:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   225c6:	b006      	add	sp, #24
   225c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   225cc:	f8d7 8004 	ldr.w	r8, [r7, #4]
   225d0:	f1b8 0f00 	cmp.w	r8, #0
   225d4:	d1f1      	bne.n	225ba <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   225d6:	4620      	mov	r0, r4
   225d8:	a905      	add	r1, sp, #20
   225da:	9303      	str	r3, [sp, #12]
   225dc:	f7ff ff82 	bl	224e4 <settings_parse_and_lookup>
		if (!ch) {
   225e0:	2800      	cmp	r0, #0
   225e2:	d0e8      	beq.n	225b6 <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   225e4:	6887      	ldr	r7, [r0, #8]
   225e6:	9b03      	ldr	r3, [sp, #12]
   225e8:	4632      	mov	r2, r6
   225ea:	4629      	mov	r1, r5
   225ec:	9805      	ldr	r0, [sp, #20]
   225ee:	47b8      	blx	r7
		if (rc != 0) {
   225f0:	4603      	mov	r3, r0
   225f2:	2800      	cmp	r0, #0
   225f4:	d0df      	beq.n	225b6 <settings_call_set_handler+0x22>
			LOG_ERR("set-value failure. key: %s error(%d)",
   225f6:	4622      	mov	r2, r4
   225f8:	2145      	movs	r1, #69	; 0x45
   225fa:	4802      	ldr	r0, [pc, #8]	; (22604 <settings_call_set_handler+0x70>)
   225fc:	f01a fdfd 	bl	3d1fa <z_log_minimal_printk>
   22600:	e7d9      	b.n	225b6 <settings_call_set_handler+0x22>
   22602:	bf00      	nop
   22604:	00044c80 	.word	0x00044c80

00022608 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   22608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2260c:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   2260e:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22610:	4c1d      	ldr	r4, [pc, #116]	; (22688 <settings_commit_subtree+0x80>)
   22612:	4f1e      	ldr	r7, [pc, #120]	; (2268c <settings_commit_subtree+0x84>)
   22614:	f8df 8080 	ldr.w	r8, [pc, #128]	; 22698 <settings_commit_subtree+0x90>
   22618:	42bc      	cmp	r4, r7
   2261a:	d908      	bls.n	2262e <settings_commit_subtree+0x26>
   2261c:	4641      	mov	r1, r8
   2261e:	481c      	ldr	r0, [pc, #112]	; (22690 <settings_commit_subtree+0x88>)
   22620:	22f4      	movs	r2, #244	; 0xf4
   22622:	f01a fdb0 	bl	3d186 <assert_print>
   22626:	21f4      	movs	r1, #244	; 0xf4
   22628:	4640      	mov	r0, r8
   2262a:	f01a fda5 	bl	3d178 <assert_post_action>
   2262e:	42bc      	cmp	r4, r7
   22630:	d308      	bcc.n	22644 <settings_commit_subtree+0x3c>
	return list->head;
   22632:	4b18      	ldr	r3, [pc, #96]	; (22694 <settings_commit_subtree+0x8c>)
   22634:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   22636:	b324      	cbz	r4, 22682 <settings_commit_subtree+0x7a>
   22638:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2263a:	b9ae      	cbnz	r6, 22668 <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   2263c:	68e3      	ldr	r3, [r4, #12]
   2263e:	b9db      	cbnz	r3, 22678 <settings_commit_subtree+0x70>
	return node->next;
   22640:	6964      	ldr	r4, [r4, #20]
   22642:	e7f8      	b.n	22636 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22644:	b91e      	cbnz	r6, 2264e <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   22646:	68e3      	ldr	r3, [r4, #12]
   22648:	b94b      	cbnz	r3, 2265e <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2264a:	3414      	adds	r4, #20
   2264c:	e7e4      	b.n	22618 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2264e:	2200      	movs	r2, #0
   22650:	4631      	mov	r1, r6
   22652:	6820      	ldr	r0, [r4, #0]
   22654:	f01b fb0b 	bl	3dc6e <settings_name_steq>
   22658:	2800      	cmp	r0, #0
   2265a:	d1f4      	bne.n	22646 <settings_commit_subtree+0x3e>
   2265c:	e7f5      	b.n	2264a <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   2265e:	4798      	blx	r3
				rc = rc2;
   22660:	2d00      	cmp	r5, #0
   22662:	bf08      	it	eq
   22664:	4605      	moveq	r5, r0
   22666:	e7f0      	b.n	2264a <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22668:	2200      	movs	r2, #0
   2266a:	4631      	mov	r1, r6
   2266c:	6820      	ldr	r0, [r4, #0]
   2266e:	f01b fafe 	bl	3dc6e <settings_name_steq>
   22672:	2800      	cmp	r0, #0
   22674:	d1e2      	bne.n	2263c <settings_commit_subtree+0x34>
   22676:	e7e3      	b.n	22640 <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   22678:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   2267a:	2d00      	cmp	r5, #0
   2267c:	bf08      	it	eq
   2267e:	4605      	moveq	r5, r0
   22680:	e7de      	b.n	22640 <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   22682:	4628      	mov	r0, r5
   22684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22688:	00042d2c 	.word	0x00042d2c
   2268c:	00042d68 	.word	0x00042d68
   22690:	0004494f 	.word	0x0004494f
   22694:	20019144 	.word	0x20019144
   22698:	00044c4e 	.word	0x00044c4e

0002269c <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   2269c:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2269e:	4c06      	ldr	r4, [pc, #24]	; (226b8 <settings_subsys_init+0x1c>)
   226a0:	7823      	ldrb	r3, [r4, #0]
   226a2:	b93b      	cbnz	r3, 226b4 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   226a4:	f7ff ff16 	bl	224d4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   226a8:	f000 fa94 	bl	22bd4 <settings_backend_init>

	if (!err) {
   226ac:	b908      	cbnz	r0, 226b2 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   226ae:	2301      	movs	r3, #1
   226b0:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   226b2:	bd10      	pop	{r4, pc}
		return 0;
   226b4:	2000      	movs	r0, #0
   226b6:	e7fc      	b.n	226b2 <settings_subsys_init+0x16>
   226b8:	2001a5bb 	.word	0x2001a5bb

000226bc <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   226bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   226c0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 22774 <settings_line_raw_read_until+0xb8>
{
   226c4:	b08b      	sub	sp, #44	; 0x2c
   226c6:	9302      	str	r3, [sp, #8]
	uint8_t rbs = settings_io_cb.rwbs;
   226c8:	f89a 300c 	ldrb.w	r3, [sl, #12]
{
   226cc:	4606      	mov	r6, r0
   226ce:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   226d0:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   226d2:	9301      	str	r3, [sp, #4]
	if (len_req == 0) {
   226d4:	2a00      	cmp	r2, #0
   226d6:	d046      	beq.n	22766 <settings_line_raw_read_until+0xaa>
   226d8:	4617      	mov	r7, r2
	rem_size = len_req;

	while (rem_size) {
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
   226da:	2310      	movs	r3, #16
   226dc:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   226de:	9b01      	ldr	r3, [sp, #4]
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   226e0:	f8da 4000 	ldr.w	r4, [sl]
		off = seek / rbs * rbs;
   226e4:	fb96 fbf3 	sdiv	fp, r6, r3
   226e8:	fb03 fb0b 	mul.w	fp, r3, fp
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   226ec:	9815      	ldr	r0, [sp, #84]	; 0x54
   226ee:	4659      	mov	r1, fp
   226f0:	ab05      	add	r3, sp, #20
   226f2:	aa06      	add	r2, sp, #24
   226f4:	47a0      	blx	r4
		if (rc) {
   226f6:	4604      	mov	r4, r0
   226f8:	2800      	cmp	r0, #0
   226fa:	d137      	bne.n	2276c <settings_line_raw_read_until+0xb0>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   226fc:	9a05      	ldr	r2, [sp, #20]
   226fe:	eba6 0b0b 	sub.w	fp, r6, fp
   22702:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   22706:	42ba      	cmp	r2, r7
   22708:	bf28      	it	cs
   2270a:	463a      	movcs	r2, r7

		if (until_char != NULL) {
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   2270c:	ab06      	add	r3, sp, #24
   2270e:	449b      	add	fp, r3
		if (until_char != NULL) {
   22710:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   22712:	4691      	mov	r9, r2
		if (until_char != NULL) {
   22714:	b31b      	cbz	r3, 2275e <settings_line_raw_read_until+0xa2>
			pend = memchr(&temp_buf[off], *until_char, len);
   22716:	4658      	mov	r0, fp
   22718:	7819      	ldrb	r1, [r3, #0]
   2271a:	f01f f9e3 	bl	41ae4 <memchr>
			if (pend != NULL) {
   2271e:	b300      	cbz	r0, 22762 <settings_line_raw_read_until+0xa6>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   22720:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   22722:	eba0 090b 	sub.w	r9, r0, fp
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22726:	4659      	mov	r1, fp
   22728:	464a      	mov	r2, r9
   2272a:	4640      	mov	r0, r8
   2272c:	9303      	str	r3, [sp, #12]
   2272e:	f01f f9f7 	bl	41b20 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   22732:	9905      	ldr	r1, [sp, #20]
   22734:	9b03      	ldr	r3, [sp, #12]
   22736:	290f      	cmp	r1, #15
		rem_size -= len;
   22738:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   2273c:	d904      	bls.n	22748 <settings_line_raw_read_until+0x8c>
   2273e:	b91b      	cbnz	r3, 22748 <settings_line_raw_read_until+0x8c>
			break;
		}

		out += len;
   22740:	44c8      	add	r8, r9
		seek += len;
   22742:	444e      	add	r6, r9
	while (rem_size) {
   22744:	2f00      	cmp	r7, #0
   22746:	d1c8      	bne.n	226da <settings_line_raw_read_until+0x1e>
	}

	*len_read = len_req - rem_size;
   22748:	9a02      	ldr	r2, [sp, #8]
   2274a:	1bed      	subs	r5, r5, r7
   2274c:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   2274e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   22750:	b10a      	cbz	r2, 22756 <settings_line_raw_read_until+0x9a>
		return (rc) ? 0 : 1;
   22752:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   22756:	4620      	mov	r0, r4
   22758:	b00b      	add	sp, #44	; 0x2c
   2275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   2275e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22760:	e7e1      	b.n	22726 <settings_line_raw_read_until+0x6a>
   22762:	4623      	mov	r3, r4
   22764:	e7df      	b.n	22726 <settings_line_raw_read_until+0x6a>
		return -EINVAL;
   22766:	f06f 0415 	mvn.w	r4, #21
   2276a:	e7f4      	b.n	22756 <settings_line_raw_read_until+0x9a>
			return -EIO;
   2276c:	f06f 0404 	mvn.w	r4, #4
   22770:	e7f1      	b.n	22756 <settings_line_raw_read_until+0x9a>
   22772:	bf00      	nop
   22774:	2001914c 	.word	0x2001914c

00022778 <settings_line_write>:
{
   22778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   2277c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2283c <settings_line_write+0xc4>
{
   22780:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   22782:	f899 800c 	ldrb.w	r8, [r9, #12]
{
   22786:	4682      	mov	sl, r0
   22788:	468b      	mov	fp, r1
   2278a:	4617      	mov	r7, r2
   2278c:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   2278e:	f7fa fd58 	bl	1d242 <strlen>
	w_size = rem - rem % wbs;
   22792:	fbb0 f4f8 	udiv	r4, r0, r8
   22796:	fb08 0414 	mls	r4, r8, r4, r0
   2279a:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   2279c:	462b      	mov	r3, r5
   2279e:	f8d9 6004 	ldr.w	r6, [r9, #4]
   227a2:	4652      	mov	r2, sl
   227a4:	9901      	ldr	r1, [sp, #4]
   227a6:	9810      	ldr	r0, [sp, #64]	; 0x40
   227a8:	47b0      	blx	r6
	w_loc += w_size;
   227aa:	9b01      	ldr	r3, [sp, #4]
   227ac:	442b      	add	r3, r5
   227ae:	461e      	mov	r6, r3
	if (rem) {
   227b0:	b134      	cbz	r4, 227c0 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   227b2:	2310      	movs	r3, #16
   227b4:	4622      	mov	r2, r4
   227b6:	eb0a 0105 	add.w	r1, sl, r5
   227ba:	a802      	add	r0, sp, #8
   227bc:	f01f f9bd 	bl	41b3a <__memcpy_chk>
	w_buf[rem] = '=';
   227c0:	223d      	movs	r2, #61	; 0x3d
   227c2:	ab06      	add	r3, sp, #24
   227c4:	4423      	add	r3, r4
   227c6:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   227ca:	f104 0a01 	add.w	sl, r4, #1
		while (w_size < sizeof(w_buf)) {
   227ce:	f1ba 0f0f 	cmp.w	sl, #15
   227d2:	d90b      	bls.n	227ec <settings_line_write+0x74>
   227d4:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   227d6:	4653      	mov	r3, sl
   227d8:	4631      	mov	r1, r6
   227da:	f8d9 5004 	ldr.w	r5, [r9, #4]
   227de:	9810      	ldr	r0, [sp, #64]	; 0x40
   227e0:	aa02      	add	r2, sp, #8
   227e2:	47a8      	blx	r5
		if (rc) {
   227e4:	bb20      	cbnz	r0, 22830 <settings_line_write+0xb8>
		if (done) {
   227e6:	bb2c      	cbnz	r4, 22834 <settings_line_write+0xbc>
		w_loc += w_size;
   227e8:	4456      	add	r6, sl
		w_size = 0;
   227ea:	46a2      	mov	sl, r4
			if (rem) {
   227ec:	b17f      	cbz	r7, 2280e <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   227ee:	f1ca 0410 	rsb	r4, sl, #16
   227f2:	42bc      	cmp	r4, r7
   227f4:	bf28      	it	cs
   227f6:	463c      	movcs	r4, r7
   227f8:	ab02      	add	r3, sp, #8
   227fa:	4659      	mov	r1, fp
   227fc:	eb03 000a 	add.w	r0, r3, sl
   22800:	4622      	mov	r2, r4
   22802:	f01f f98d 	bl	41b20 <memcpy>
				value += add;
   22806:	44a3      	add	fp, r4
				rem -= add;
   22808:	1b3f      	subs	r7, r7, r4
				w_size += add;
   2280a:	44a2      	add	sl, r4
   2280c:	e7df      	b.n	227ce <settings_line_write+0x56>
				add = (w_size) % wbs;
   2280e:	fbba f4f8 	udiv	r4, sl, r8
   22812:	fb08 a414 	mls	r4, r8, r4, sl
				if (add) {
   22816:	b14c      	cbz	r4, 2282c <settings_line_write+0xb4>
					add = wbs - add;
   22818:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memset, void *, int)
   2281c:	ab02      	add	r3, sp, #8
   2281e:	eb03 000a 	add.w	r0, r3, sl
   22822:	4622      	mov	r2, r4
   22824:	4639      	mov	r1, r7
   22826:	f01f f99b 	bl	41b60 <memset>
					w_size += add;
   2282a:	44a2      	add	sl, r4
				done = true;
   2282c:	2401      	movs	r4, #1
   2282e:	e7d2      	b.n	227d6 <settings_line_write+0x5e>
			return -EIO;
   22830:	f06f 0004 	mvn.w	r0, #4
}
   22834:	b007      	add	sp, #28
   22836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2283a:	bf00      	nop
   2283c:	2001914c 	.word	0x2001914c

00022840 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22840:	4b03      	ldr	r3, [pc, #12]	; (22850 <settings_line_val_get_len+0x10>)
{
   22842:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22844:	689b      	ldr	r3, [r3, #8]
{
   22846:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22848:	4608      	mov	r0, r1
   2284a:	4798      	blx	r3

	return len - val_off;
}
   2284c:	1b00      	subs	r0, r0, r4
   2284e:	bd10      	pop	{r4, pc}
   22850:	2001914c 	.word	0x2001914c

00022854 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   22854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22858:	4680      	mov	r8, r0
   2285a:	468a      	mov	sl, r1
   2285c:	4691      	mov	r9, r2
   2285e:	461d      	mov	r5, r3
	int rc = -EINVAL;
   22860:	f06f 0015 	mvn.w	r0, #21
{
   22864:	b086      	sub	sp, #24
   22866:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22868:	4f13      	ldr	r7, [pc, #76]	; (228b8 <settings_line_entry_copy+0x64>)
	while (len) {
   2286a:	b916      	cbnz	r6, 22872 <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   2286c:	b006      	add	sp, #24
   2286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   22872:	2e10      	cmp	r6, #16
   22874:	4633      	mov	r3, r6
   22876:	bf28      	it	cs
   22878:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2287a:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   2287c:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2287e:	4648      	mov	r0, r9
   22880:	683c      	ldr	r4, [r7, #0]
   22882:	ab01      	add	r3, sp, #4
   22884:	aa02      	add	r2, sp, #8
   22886:	47a0      	blx	r4
		if (rc) {
   22888:	2800      	cmp	r0, #0
   2288a:	d1ef      	bne.n	2286c <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   2288c:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   2288e:	7b39      	ldrb	r1, [r7, #12]
   22890:	fbb3 f2f1 	udiv	r2, r3, r1
   22894:	fb01 3212 	mls	r2, r1, r2, r3
   22898:	b10a      	cbz	r2, 2289e <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   2289a:	440b      	add	r3, r1
   2289c:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   2289e:	4651      	mov	r1, sl
   228a0:	4640      	mov	r0, r8
   228a2:	687c      	ldr	r4, [r7, #4]
   228a4:	aa02      	add	r2, sp, #8
   228a6:	47a0      	blx	r4
		if (rc) {
   228a8:	2800      	cmp	r0, #0
   228aa:	d1df      	bne.n	2286c <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   228ac:	9b01      	ldr	r3, [sp, #4]
   228ae:	441d      	add	r5, r3
		dst_off += chunk_size;
   228b0:	449a      	add	sl, r3
		len -= chunk_size;
   228b2:	1af6      	subs	r6, r6, r3
   228b4:	e7d9      	b.n	2286a <settings_line_entry_copy+0x16>
   228b6:	bf00      	nop
   228b8:	2001914c 	.word	0x2001914c

000228bc <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   228bc:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   228be:	4c03      	ldr	r4, [pc, #12]	; (228cc <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   228c0:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   228c4:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   228c6:	7323      	strb	r3, [r4, #12]
}
   228c8:	bd10      	pop	{r4, pc}
   228ca:	bf00      	nop
   228cc:	2001914c 	.word	0x2001914c

000228d0 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   228d0:	b530      	push	{r4, r5, lr}
   228d2:	4604      	mov	r4, r0
   228d4:	b085      	sub	sp, #20
   228d6:	4610      	mov	r0, r2
   228d8:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   228da:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   228de:	f7ff ffaf 	bl	22840 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   228e2:	4a04      	ldr	r2, [pc, #16]	; (228f4 <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   228e4:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   228e6:	9500      	str	r5, [sp, #0]
   228e8:	4620      	mov	r0, r4
   228ea:	ab02      	add	r3, sp, #8
   228ec:	f7ff fe52 	bl	22594 <settings_call_set_handler>
					 &value_ctx, arg);
}
   228f0:	b005      	add	sp, #20
   228f2:	bd30      	pop	{r4, r5, pc}
   228f4:	0003dccf 	.word	0x0003dccf

000228f8 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   228f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228fc:	4606      	mov	r6, r0
   228fe:	b0b3      	sub	sp, #204	; 0xcc
   22900:	460f      	mov	r7, r1
   22902:	4690      	mov	r8, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   22904:	2100      	movs	r1, #0
   22906:	2210      	movs	r2, #16
   22908:	a802      	add	r0, sp, #8
{
   2290a:	4699      	mov	r9, r3
	struct fcb_entry_ctx entry_ctx = {
   2290c:	f01f f928 	bl	41b60 <memset>
   22910:	6c33      	ldr	r3, [r6, #64]	; 0x40
			LOG_ERR("failed to load line");
   22912:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 229bc <settings_fcb_load_priv+0xc4>
	struct fcb_entry_ctx entry_ctx = {
   22916:	9306      	str	r3, [sp, #24]
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   22918:	f106 0a08 	add.w	sl, r6, #8
   2291c:	4650      	mov	r0, sl
   2291e:	a902      	add	r1, sp, #8
   22920:	f01a ff15 	bl	3d74e <fcb_getnext>
   22924:	b118      	cbz	r0, 2292e <settings_fcb_load_priv+0x36>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   22926:	2000      	movs	r0, #0
   22928:	b033      	add	sp, #204	; 0xcc
   2292a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   2292e:	466a      	mov	r2, sp
   22930:	214a      	movs	r1, #74	; 0x4a
   22932:	ab02      	add	r3, sp, #8
   22934:	a80c      	add	r0, sp, #48	; 0x30
   22936:	f01b f9d9 	bl	3dcec <settings_line_name_read>
		if (rc) {
   2293a:	b128      	cbz	r0, 22948 <settings_fcb_load_priv+0x50>
			LOG_ERR("Failed to load line name: %d", rc);
   2293c:	4602      	mov	r2, r0
   2293e:	2145      	movs	r1, #69	; 0x45
   22940:	481d      	ldr	r0, [pc, #116]	; (229b8 <settings_fcb_load_priv+0xc0>)
   22942:	f01a fc5a 	bl	3d1fa <z_log_minimal_printk>
			continue;
   22946:	e7e7      	b.n	22918 <settings_fcb_load_priv+0x20>
		name[name_len] = '\0';
   22948:	9b00      	ldr	r3, [sp, #0]
   2294a:	aa32      	add	r2, sp, #200	; 0xc8
   2294c:	441a      	add	r2, r3
   2294e:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   22952:	f1b9 0f00 	cmp.w	r9, #0
   22956:	d00f      	beq.n	22978 <settings_fcb_load_priv+0x80>
	if (off >= entry_ctx->loc.fe_data_len) {
   22958:	f8bd 2014 	ldrh.w	r2, [sp, #20]
		    (!read_entry_len(&entry_ctx, name_len+1) ||
   2295c:	3301      	adds	r3, #1
	if (off >= entry_ctx->loc.fe_data_len) {
   2295e:	429a      	cmp	r2, r3
   22960:	ddda      	ble.n	22918 <settings_fcb_load_priv+0x20>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   22962:	ac07      	add	r4, sp, #28
   22964:	ad02      	add	r5, sp, #8
   22966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   22968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2296a:	682b      	ldr	r3, [r5, #0]
   2296c:	6023      	str	r3, [r4, #0]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   2296e:	4650      	mov	r0, sl
   22970:	a907      	add	r1, sp, #28
   22972:	f01a feec 	bl	3d74e <fcb_getnext>
   22976:	b130      	cbz	r0, 22986 <settings_fcb_load_priv+0x8e>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   22978:	9a00      	ldr	r2, [sp, #0]
   2297a:	4643      	mov	r3, r8
   2297c:	3201      	adds	r2, #1
   2297e:	a902      	add	r1, sp, #8
   22980:	a80c      	add	r0, sp, #48	; 0x30
   22982:	47b8      	blx	r7
   22984:	e7c8      	b.n	22918 <settings_fcb_load_priv+0x20>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   22986:	214a      	movs	r1, #74	; 0x4a
   22988:	ab07      	add	r3, sp, #28
   2298a:	aa01      	add	r2, sp, #4
   2298c:	a81f      	add	r0, sp, #124	; 0x7c
   2298e:	f01b f9ad 	bl	3dcec <settings_line_name_read>
   22992:	b120      	cbz	r0, 2299e <settings_fcb_load_priv+0xa6>
			LOG_ERR("failed to load line");
   22994:	2145      	movs	r1, #69	; 0x45
   22996:	4658      	mov	r0, fp
   22998:	f01a fc2f 	bl	3d1fa <z_log_minimal_printk>
			continue;
   2299c:	e7e7      	b.n	2296e <settings_fcb_load_priv+0x76>
		name2[name2_len] = '\0';
   2299e:	9b01      	ldr	r3, [sp, #4]
   229a0:	aa32      	add	r2, sp, #200	; 0xc8
   229a2:	4413      	add	r3, r2
   229a4:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   229a8:	a91f      	add	r1, sp, #124	; 0x7c
   229aa:	a80c      	add	r0, sp, #48	; 0x30
   229ac:	f7fa fc3f 	bl	1d22e <strcmp>
   229b0:	2800      	cmp	r0, #0
   229b2:	d1dc      	bne.n	2296e <settings_fcb_load_priv+0x76>
   229b4:	e7b0      	b.n	22918 <settings_fcb_load_priv+0x20>
   229b6:	bf00      	nop
   229b8:	00044cb3 	.word	0x00044cb3
   229bc:	00044cd5 	.word	0x00044cd5

000229c0 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   229c0:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   229c2:	2301      	movs	r3, #1
   229c4:	4901      	ldr	r1, [pc, #4]	; (229cc <settings_fcb_load+0xc>)
   229c6:	f7ff bf97 	b.w	228f8 <settings_fcb_load_priv>
   229ca:	bf00      	nop
   229cc:	000228d1 	.word	0x000228d1

000229d0 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   229d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229d4:	4605      	mov	r5, r0
   229d6:	460f      	mov	r7, r1
   229d8:	4691      	mov	r9, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   229da:	4698      	mov	r8, r3
{
   229dc:	b0bf      	sub	sp, #252	; 0xfc
	if (val_len > 0 && value == NULL) {
   229de:	b103      	cbz	r3, 229e2 <settings_fcb_save+0x12>
   229e0:	b17a      	cbz	r2, 22a02 <settings_fcb_save+0x32>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   229e2:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   229e4:	4628      	mov	r0, r5
   229e6:	4623      	mov	r3, r4
   229e8:	495b      	ldr	r1, [pc, #364]	; (22b58 <settings_fcb_save+0x188>)
   229ea:	aa05      	add	r2, sp, #20
	cdca.val = (char *)value;
   229ec:	e9cd 7905 	strd	r7, r9, [sp, #20]
	cdca.val_len = val_len;
   229f0:	e9cd 8407 	strd	r8, r4, [sp, #28]
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   229f4:	f7ff ff80 	bl	228f8 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   229f8:	9b08      	ldr	r3, [sp, #32]
   229fa:	2b01      	cmp	r3, #1
   229fc:	f000 80a7 	beq.w	22b4e <settings_fcb_save+0x17e>
	if (!name) {
   22a00:	b917      	cbnz	r7, 22a08 <settings_fcb_save+0x38>
		return -EINVAL;
   22a02:	f06f 0415 	mvn.w	r4, #21
   22a06:	e0a2      	b.n	22b4e <settings_fcb_save+0x17e>
	len = settings_line_len_calc(name, val_len);
   22a08:	4641      	mov	r1, r8
   22a0a:	4638      	mov	r0, r7
   22a0c:	f01b f94f 	bl	3dcae <settings_line_len_calc>
   22a10:	4683      	mov	fp, r0
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   22a12:	7b6b      	ldrb	r3, [r5, #13]
   22a14:	429c      	cmp	r4, r3
   22a16:	daf4      	bge.n	22a02 <settings_fcb_save+0x32>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   22a18:	f105 0608 	add.w	r6, r5, #8
   22a1c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
   22a20:	4652      	mov	r2, sl
   22a22:	4630      	mov	r0, r6
   22a24:	fa1f f18b 	uxth.w	r1, fp
   22a28:	f7ff f896 	bl	21b58 <fcb_append>
		if (rc != -ENOSPC) {
   22a2c:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   22a30:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   22a32:	d176      	bne.n	22b22 <settings_fcb_save+0x152>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   22a34:	7b6b      	ldrb	r3, [r5, #13]
   22a36:	3b01      	subs	r3, #1
   22a38:	42a3      	cmp	r3, r4
   22a3a:	dd1b      	ble.n	22a74 <settings_fcb_save+0xa4>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   22a3c:	4630      	mov	r0, r6
   22a3e:	f01a fbf3 	bl	3d228 <fcb_append_to_scratch>
	if (rc) {
   22a42:	4682      	mov	sl, r0
   22a44:	b9b0      	cbnz	r0, 22a74 <settings_fcb_save+0xa4>
	rbs = flash_area_align(cf->cf_fcb.fap);
   22a46:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22a48:	f01b f895 	bl	3db76 <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   22a4c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   22a4e:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   22a52:	f8df a10c 	ldr.w	sl, [pc, #268]	; 22b60 <settings_fcb_save+0x190>
	loc1.fap = cf->cf_fcb.fap;
   22a56:	9312      	str	r3, [sp, #72]	; 0x48
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   22a58:	4630      	mov	r0, r6
   22a5a:	a90e      	add	r1, sp, #56	; 0x38
   22a5c:	f01a fe77 	bl	3d74e <fcb_getnext>
   22a60:	b150      	cbz	r0, 22a78 <settings_fcb_save+0xa8>
	rc = fcb_rotate(&cf->cf_fcb);
   22a62:	4630      	mov	r0, r6
   22a64:	f01a fe8e 	bl	3d784 <fcb_rotate>
	if (rc != 0) {
   22a68:	4602      	mov	r2, r0
   22a6a:	b118      	cbz	r0, 22a74 <settings_fcb_save+0xa4>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   22a6c:	2145      	movs	r1, #69	; 0x45
   22a6e:	483b      	ldr	r0, [pc, #236]	; (22b5c <settings_fcb_save+0x18c>)
   22a70:	f01a fbc3 	bl	3d1fa <z_log_minimal_printk>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   22a74:	3401      	adds	r4, #1
   22a76:	e7cc      	b.n	22a12 <settings_fcb_save+0x42>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   22a78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22a7c:	429a      	cmp	r2, r3
   22a7e:	d1f0      	bne.n	22a62 <settings_fcb_save+0x92>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   22a80:	2149      	movs	r1, #73	; 0x49
   22a82:	ab0e      	add	r3, sp, #56	; 0x38
   22a84:	aa03      	add	r2, sp, #12
   22a86:	a818      	add	r0, sp, #96	; 0x60
   22a88:	f01b f930 	bl	3dcec <settings_line_name_read>
		if (rc) {
   22a8c:	2800      	cmp	r0, #0
   22a8e:	d1e3      	bne.n	22a58 <settings_fcb_save+0x88>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   22a90:	9b03      	ldr	r3, [sp, #12]
   22a92:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   22a96:	3301      	adds	r3, #1
   22a98:	4293      	cmp	r3, r2
   22a9a:	d0dd      	beq.n	22a58 <settings_fcb_save+0x88>
		loc2 = loc1;
   22a9c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   22aa0:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   22aa4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22aa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22aac:	f8de 3000 	ldr.w	r3, [lr]
   22ab0:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   22ab4:	4630      	mov	r0, r6
   22ab6:	a913      	add	r1, sp, #76	; 0x4c
   22ab8:	f01a fe49 	bl	3d74e <fcb_getnext>
   22abc:	b1f0      	cbz	r0, 22afc <settings_fcb_save+0x12c>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   22abe:	4630      	mov	r0, r6
   22ac0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   22ac4:	aa13      	add	r2, sp, #76	; 0x4c
   22ac6:	f7ff f847 	bl	21b58 <fcb_append>
		if (rc) {
   22aca:	2800      	cmp	r0, #0
   22acc:	d1c4      	bne.n	22a58 <settings_fcb_save+0x88>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   22ace:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   22ad2:	4601      	mov	r1, r0
   22ad4:	9300      	str	r3, [sp, #0]
   22ad6:	aa0e      	add	r2, sp, #56	; 0x38
   22ad8:	4603      	mov	r3, r0
   22ada:	a813      	add	r0, sp, #76	; 0x4c
   22adc:	f7ff feba 	bl	22854 <settings_line_entry_copy>
		if (rc) {
   22ae0:	2800      	cmp	r0, #0
   22ae2:	d1b9      	bne.n	22a58 <settings_fcb_save+0x88>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   22ae4:	4630      	mov	r0, r6
   22ae6:	a913      	add	r1, sp, #76	; 0x4c
   22ae8:	f01a fbba 	bl	3d260 <fcb_append_finish>
		if (rc != 0) {
   22aec:	4602      	mov	r2, r0
   22aee:	2800      	cmp	r0, #0
   22af0:	d0b2      	beq.n	22a58 <settings_fcb_save+0x88>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   22af2:	2145      	movs	r1, #69	; 0x45
   22af4:	4650      	mov	r0, sl
   22af6:	f01a fb80 	bl	3d1fa <z_log_minimal_printk>
   22afa:	e7ad      	b.n	22a58 <settings_fcb_save+0x88>
			rc = settings_line_name_read(name2, sizeof(name2),
   22afc:	2149      	movs	r1, #73	; 0x49
   22afe:	ab13      	add	r3, sp, #76	; 0x4c
   22b00:	aa04      	add	r2, sp, #16
   22b02:	a82b      	add	r0, sp, #172	; 0xac
   22b04:	f01b f8f2 	bl	3dcec <settings_line_name_read>
			if (rc) {
   22b08:	2800      	cmp	r0, #0
   22b0a:	d1d3      	bne.n	22ab4 <settings_fcb_save+0xe4>
			if ((val1_off == val2_off) &&
   22b0c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   22b10:	429a      	cmp	r2, r3
   22b12:	d1cf      	bne.n	22ab4 <settings_fcb_save+0xe4>
			    !memcmp(name1, name2, val1_off)) {
   22b14:	a92b      	add	r1, sp, #172	; 0xac
   22b16:	a818      	add	r0, sp, #96	; 0x60
   22b18:	f01e fff2 	bl	41b00 <memcmp>
			if ((val1_off == val2_off) &&
   22b1c:	2800      	cmp	r0, #0
   22b1e:	d1c9      	bne.n	22ab4 <settings_fcb_save+0xe4>
   22b20:	e79a      	b.n	22a58 <settings_fcb_save+0x88>
	if (rc) {
   22b22:	2800      	cmp	r0, #0
   22b24:	f47f af6d 	bne.w	22a02 <settings_fcb_save+0x32>
	loc.fap = cf->cf_fcb.fap;
   22b28:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22b2a:	4649      	mov	r1, r9
	loc.fap = cf->cf_fcb.fap;
   22b2c:	920d      	str	r2, [sp, #52]	; 0x34
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22b2e:	4638      	mov	r0, r7
   22b30:	4642      	mov	r2, r8
   22b32:	f8cd a000 	str.w	sl, [sp]
   22b36:	f7ff fe1f 	bl	22778 <settings_line_write>
	if (rc != -EIO) {
   22b3a:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22b3c:	4604      	mov	r4, r0
	if (rc != -EIO) {
   22b3e:	d006      	beq.n	22b4e <settings_fcb_save+0x17e>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   22b40:	4651      	mov	r1, sl
   22b42:	4630      	mov	r0, r6
   22b44:	f01a fb8c 	bl	3d260 <fcb_append_finish>
			rc = i;
   22b48:	2c00      	cmp	r4, #0
   22b4a:	bf08      	it	eq
   22b4c:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   22b4e:	4620      	mov	r0, r4
   22b50:	b03f      	add	sp, #252	; 0xfc
   22b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b56:	bf00      	nop
   22b58:	0003dd0d 	.word	0x0003dd0d
   22b5c:	00044d14 	.word	0x00044d14
   22b60:	00044cee 	.word	0x00044cee

00022b64 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   22b64:	2301      	movs	r3, #1
{
   22b66:	b570      	push	{r4, r5, r6, lr}
   22b68:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   22b6a:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   22b6c:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(SETTINGS_PARTITION, &cf->cf_fcb);
   22b6e:	f100 0608 	add.w	r6, r0, #8
   22b72:	4631      	mov	r1, r6
   22b74:	200c      	movs	r0, #12
   22b76:	f01a fc75 	bl	3d464 <fcb_init>
		if (rc) {
   22b7a:	4605      	mov	r5, r0
   22b7c:	b9b0      	cbnz	r0, 22bac <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   22b7e:	4630      	mov	r0, r6
   22b80:	f01a fbd6 	bl	3d330 <fcb_free_sector_cnt>
   22b84:	2800      	cmp	r0, #0
   22b86:	dc0a      	bgt.n	22b9e <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   22b88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   22b8a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   22b8c:	e9d3 1200 	ldrd	r1, r2, [r3]
   22b90:	f01a ffda 	bl	3db48 <flash_area_erase>
			if (rc) {
   22b94:	2800      	cmp	r0, #0
   22b96:	d0ec      	beq.n	22b72 <settings_fcb_src+0xe>
				return -EIO;
   22b98:	f06f 0504 	mvn.w	r5, #4
   22b9c:	e004      	b.n	22ba8 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22b9e:	4b05      	ldr	r3, [pc, #20]	; (22bb4 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   22ba0:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22ba2:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   22ba4:	f7ff fc54 	bl	22450 <settings_src_register>
}
   22ba8:	4628      	mov	r0, r5
   22baa:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   22bac:	f06f 0515 	mvn.w	r5, #21
   22bb0:	e7fa      	b.n	22ba8 <settings_fcb_src+0x44>
   22bb2:	bf00      	nop
   22bb4:	000430c0 	.word	0x000430c0

00022bb8 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   22bb8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   22bbc:	4a02      	ldr	r2, [pc, #8]	; (22bc8 <settings_mount_fcb_backend+0x10>)
   22bbe:	4903      	ldr	r1, [pc, #12]	; (22bcc <settings_mount_fcb_backend+0x14>)
   22bc0:	4803      	ldr	r0, [pc, #12]	; (22bd0 <settings_mount_fcb_backend+0x18>)
   22bc2:	f7ff be7b 	b.w	228bc <settings_line_io_init>
   22bc6:	bf00      	nop
   22bc8:	0003dd8b 	.word	0x0003dd8b
   22bcc:	0003dd8f 	.word	0x0003dd8f
   22bd0:	0003dda3 	.word	0x0003dda3

00022bd4 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   22bd4:	2309      	movs	r3, #9
{
   22bd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   22bd8:	200c      	movs	r0, #12
   22bda:	4669      	mov	r1, sp
   22bdc:	4a21      	ldr	r2, [pc, #132]	; (22c64 <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   22bde:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   22be0:	f7ff fada 	bl	22198 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   22be4:	f110 0f13 	cmn.w	r0, #19
   22be8:	d03a      	beq.n	22c60 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   22bea:	b138      	cbz	r0, 22bfc <settings_backend_init+0x28>
   22bec:	300c      	adds	r0, #12
   22bee:	d005      	beq.n	22bfc <settings_backend_init+0x28>
		k_panic();
   22bf0:	4040      	eors	r0, r0
   22bf2:	f380 8811 	msr	BASEPRI, r0
   22bf6:	f04f 0004 	mov.w	r0, #4
   22bfa:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   22bfc:	4c1a      	ldr	r4, [pc, #104]	; (22c68 <settings_backend_init+0x94>)
   22bfe:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   22c00:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   22c02:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   22c04:	f7ff ffae 	bl	22b64 <settings_fcb_src>

	if (rc != 0) {
   22c08:	b308      	cbz	r0, 22c4e <settings_backend_init+0x7a>
		rc = flash_area_open(SETTINGS_PARTITION, &fap);
   22c0a:	a901      	add	r1, sp, #4
   22c0c:	200c      	movs	r0, #12
   22c0e:	f7ff faa5 	bl	2215c <flash_area_open>

		if (rc == 0) {
   22c12:	4601      	mov	r1, r0
   22c14:	b160      	cbz	r0, 22c30 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   22c16:	4040      	eors	r0, r0
   22c18:	f380 8811 	msr	BASEPRI, r0
   22c1c:	f04f 0004 	mov.w	r0, #4
   22c20:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   22c22:	4040      	eors	r0, r0
   22c24:	f380 8811 	msr	BASEPRI, r0
   22c28:	f04f 0004 	mov.w	r0, #4
   22c2c:	df02      	svc	2
   22c2e:	e00e      	b.n	22c4e <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   22c30:	9801      	ldr	r0, [sp, #4]
   22c32:	6882      	ldr	r2, [r0, #8]
   22c34:	f01a ff88 	bl	3db48 <flash_area_erase>
   22c38:	4605      	mov	r5, r0
			flash_area_close(fap);
   22c3a:	9801      	ldr	r0, [sp, #4]
   22c3c:	f01a ff4b 	bl	3dad6 <flash_area_close>
		if (rc != 0) {
   22c40:	2d00      	cmp	r5, #0
   22c42:	d1e8      	bne.n	22c16 <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   22c44:	4620      	mov	r0, r4
   22c46:	f7ff ff8d 	bl	22b64 <settings_fcb_src>
	if (rc != 0) {
   22c4a:	2800      	cmp	r0, #0
   22c4c:	d1e9      	bne.n	22c22 <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22c4e:	4b07      	ldr	r3, [pc, #28]	; (22c6c <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   22c50:	4805      	ldr	r0, [pc, #20]	; (22c68 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22c52:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   22c54:	f7ff fc0a 	bl	2246c <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   22c58:	4803      	ldr	r0, [pc, #12]	; (22c68 <settings_backend_init+0x94>)
   22c5a:	f7ff ffad 	bl	22bb8 <settings_mount_fcb_backend>

	return rc;
   22c5e:	2000      	movs	r0, #0
}
   22c60:	b003      	add	sp, #12
   22c62:	bd30      	pop	{r4, r5, pc}
   22c64:	2001915c 	.word	0x2001915c
   22c68:	200145cc 	.word	0x200145cc
   22c6c:	000430c0 	.word	0x000430c0

00022c70 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   22c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c74:	4605      	mov	r5, r0
	__asm__ volatile(
   22c76:	f04f 0320 	mov.w	r3, #32
   22c7a:	f3ef 8611 	mrs	r6, BASEPRI
   22c7e:	f383 8812 	msr	BASEPRI_MAX, r3
   22c82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c86:	481d      	ldr	r0, [pc, #116]	; (22cfc <pm_state_notify+0x8c>)
   22c88:	f013 ffb6 	bl	36bf8 <z_spin_lock_valid>
   22c8c:	b940      	cbnz	r0, 22ca0 <pm_state_notify+0x30>
   22c8e:	491c      	ldr	r1, [pc, #112]	; (22d00 <pm_state_notify+0x90>)
   22c90:	481c      	ldr	r0, [pc, #112]	; (22d04 <pm_state_notify+0x94>)
   22c92:	228e      	movs	r2, #142	; 0x8e
   22c94:	f01a fa77 	bl	3d186 <assert_print>
   22c98:	218e      	movs	r1, #142	; 0x8e
   22c9a:	4819      	ldr	r0, [pc, #100]	; (22d00 <pm_state_notify+0x90>)
   22c9c:	f01a fa6c 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ca0:	4816      	ldr	r0, [pc, #88]	; (22cfc <pm_state_notify+0x8c>)
   22ca2:	f013 ffc7 	bl	36c34 <z_spin_lock_set_owner>
	return list->head;
   22ca6:	4b18      	ldr	r3, [pc, #96]	; (22d08 <pm_state_notify+0x98>)
   22ca8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   22caa:	b19c      	cbz	r4, 22cd4 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   22cac:	f04f 090c 	mov.w	r9, #12
   22cb0:	4f16      	ldr	r7, [pc, #88]	; (22d0c <pm_state_notify+0x9c>)
   22cb2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 22d10 <pm_state_notify+0xa0>
			callback = notifier->state_exit;
   22cb6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   22cba:	2d00      	cmp	r5, #0
   22cbc:	bf08      	it	eq
   22cbe:	4613      	moveq	r3, r2
		if (callback) {
   22cc0:	b12b      	cbz	r3, 22cce <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   22cc2:	f898 2014 	ldrb.w	r2, [r8, #20]
   22cc6:	fb09 f202 	mul.w	r2, r9, r2
   22cca:	5cb8      	ldrb	r0, [r7, r2]
   22ccc:	4798      	blx	r3
	return node->next;
   22cce:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   22cd0:	2c00      	cmp	r4, #0
   22cd2:	d1f0      	bne.n	22cb6 <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cd4:	4809      	ldr	r0, [pc, #36]	; (22cfc <pm_state_notify+0x8c>)
   22cd6:	f013 ff9d 	bl	36c14 <z_spin_unlock_valid>
   22cda:	b940      	cbnz	r0, 22cee <pm_state_notify+0x7e>
   22cdc:	4908      	ldr	r1, [pc, #32]	; (22d00 <pm_state_notify+0x90>)
   22cde:	4809      	ldr	r0, [pc, #36]	; (22d04 <pm_state_notify+0x94>)
   22ce0:	22b9      	movs	r2, #185	; 0xb9
   22ce2:	f01a fa50 	bl	3d186 <assert_print>
   22ce6:	21b9      	movs	r1, #185	; 0xb9
   22ce8:	4805      	ldr	r0, [pc, #20]	; (22d00 <pm_state_notify+0x90>)
   22cea:	f01a fa45 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   22cee:	f386 8811 	msr	BASEPRI, r6
   22cf2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   22cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22cfa:	bf00      	nop
   22cfc:	200191a4 	.word	0x200191a4
   22d00:	00044989 	.word	0x00044989
   22d04:	0004494f 	.word	0x0004494f
   22d08:	200191a8 	.word	0x200191a8
   22d0c:	200191b0 	.word	0x200191b0
   22d10:	2001a518 	.word	0x2001a518

00022d14 <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   22d14:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22d16:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   22d18:	f000 001f 	and.w	r0, r0, #31
   22d1c:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22d20:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22d22:	4b05      	ldr	r3, [pc, #20]	; (22d38 <atomic_clear_bit.constprop.0+0x24>)
   22d24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   22d28:	e8d3 2fef 	ldaex	r2, [r3]
   22d2c:	4002      	ands	r2, r0
   22d2e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   22d32:	2900      	cmp	r1, #0
   22d34:	d1f8      	bne.n	22d28 <atomic_clear_bit.constprop.0+0x14>
}
   22d36:	4770      	bx	lr
   22d38:	200191bc 	.word	0x200191bc

00022d3c <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22d3c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   22d3e:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   22d40:	4b17      	ldr	r3, [pc, #92]	; (22da0 <pm_system_resume+0x64>)
   22d42:	7d1c      	ldrb	r4, [r3, #20]
   22d44:	f004 031f 	and.w	r3, r4, #31
   22d48:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22d4a:	43d0      	mvns	r0, r2
   22d4c:	4b15      	ldr	r3, [pc, #84]	; (22da4 <pm_system_resume+0x68>)
   22d4e:	0961      	lsrs	r1, r4, #5
   22d50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   22d54:	e8d3 1fef 	ldaex	r1, [r3]
   22d58:	ea01 0500 	and.w	r5, r1, r0
   22d5c:	e8c3 5fec 	stlex	ip, r5, [r3]
   22d60:	f1bc 0f00 	cmp.w	ip, #0
   22d64:	d1f6      	bne.n	22d54 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   22d66:	4211      	tst	r1, r2
   22d68:	d013      	beq.n	22d92 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   22d6a:	4b0f      	ldr	r3, [pc, #60]	; (22da8 <pm_system_resume+0x6c>)
   22d6c:	4d0f      	ldr	r5, [pc, #60]	; (22dac <pm_system_resume+0x70>)
   22d6e:	b18b      	cbz	r3, 22d94 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   22d70:	230c      	movs	r3, #12
   22d72:	4363      	muls	r3, r4
   22d74:	18ea      	adds	r2, r5, r3
   22d76:	7851      	ldrb	r1, [r2, #1]
   22d78:	5ce8      	ldrb	r0, [r5, r3]
   22d7a:	f01a fa1e 	bl	3d1ba <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   22d7e:	2000      	movs	r0, #0
   22d80:	f7ff ff76 	bl	22c70 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   22d84:	230c      	movs	r3, #12
   22d86:	435c      	muls	r4, r3
   22d88:	2300      	movs	r3, #0
   22d8a:	192a      	adds	r2, r5, r4
   22d8c:	512b      	str	r3, [r5, r4]
   22d8e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   22d92:	bd38      	pop	{r3, r4, r5, pc}
   22d94:	f383 8811 	msr	BASEPRI, r3
   22d98:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   22d9c:	e7ef      	b.n	22d7e <pm_system_resume+0x42>
   22d9e:	bf00      	nop
   22da0:	2001a518 	.word	0x2001a518
   22da4:	200191c0 	.word	0x200191c0
   22da8:	0003d1bb 	.word	0x0003d1bb
   22dac:	200191b0 	.word	0x200191b0

00022db0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   22db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   22db4:	4b2f      	ldr	r3, [pc, #188]	; (22e74 <pm_system_suspend+0xc4>)
{
   22db6:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   22db8:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   22dba:	ea4f 1854 	mov.w	r8, r4, lsr #5
   22dbe:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22dc2:	4b2d      	ldr	r3, [pc, #180]	; (22e78 <pm_system_suspend+0xc8>)
   22dc4:	4443      	add	r3, r8
   22dc6:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22dca:	f004 091f 	and.w	r9, r4, #31
   22dce:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   22dd2:	f013 0f01 	tst.w	r3, #1
   22dd6:	4e29      	ldr	r6, [pc, #164]	; (22e7c <pm_system_suspend+0xcc>)
   22dd8:	d10a      	bne.n	22df0 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   22dda:	4601      	mov	r1, r0
   22ddc:	4620      	mov	r0, r4
   22dde:	f000 f863 	bl	22ea8 <pm_policy_next_state>
		if (info != NULL) {
   22de2:	b128      	cbz	r0, 22df0 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
   22de4:	c807      	ldmia	r0, {r0, r1, r2}
   22de6:	230c      	movs	r3, #12
   22de8:	fb03 6304 	mla	r3, r3, r4, r6
   22dec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   22df0:	230c      	movs	r3, #12
   22df2:	4363      	muls	r3, r4
   22df4:	5cf5      	ldrb	r5, [r6, r3]
   22df6:	18f2      	adds	r2, r6, r3
   22df8:	b92d      	cbnz	r5, 22e06 <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   22dfa:	4620      	mov	r0, r4
   22dfc:	f7ff ff8a 	bl	22d14 <atomic_clear_bit.constprop.0>
		ret = false;
   22e00:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   22e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   22e06:	1c7b      	adds	r3, r7, #1
   22e08:	d00f      	beq.n	22e2a <pm_system_suspend+0x7a>
   22e0a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   22e0e:	2100      	movs	r1, #0
   22e10:	f8d2 c008 	ldr.w	ip, [r2, #8]
   22e14:	481a      	ldr	r0, [pc, #104]	; (22e80 <pm_system_suspend+0xd0>)
   22e16:	2300      	movs	r3, #0
   22e18:	fbec 0105 	umlal	r0, r1, ip, r5
   22e1c:	4a19      	ldr	r2, [pc, #100]	; (22e84 <pm_system_suspend+0xd4>)
   22e1e:	f7fa f863 	bl	1cee8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   22e22:	2101      	movs	r1, #1
   22e24:	1a38      	subs	r0, r7, r0
   22e26:	f016 fa07 	bl	39238 <z_set_timeout_expiry>
	k_sched_lock();
   22e2a:	f015 f8a7 	bl	37f7c <k_sched_lock>
	pm_state_notify(true);
   22e2e:	2001      	movs	r0, #1
   22e30:	f7ff ff1e 	bl	22c70 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   22e34:	2301      	movs	r3, #1
   22e36:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22e3a:	4b13      	ldr	r3, [pc, #76]	; (22e88 <pm_system_suspend+0xd8>)
   22e3c:	4498      	add	r8, r3
   22e3e:	e8d8 3fef 	ldaex	r3, [r8]
   22e42:	ea43 0309 	orr.w	r3, r3, r9
   22e46:	e8c8 3fe2 	stlex	r2, r3, [r8]
   22e4a:	2a00      	cmp	r2, #0
   22e4c:	d1f7      	bne.n	22e3e <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
   22e4e:	4b0f      	ldr	r3, [pc, #60]	; (22e8c <pm_system_suspend+0xdc>)
   22e50:	b133      	cbz	r3, 22e60 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   22e52:	230c      	movs	r3, #12
   22e54:	4363      	muls	r3, r4
   22e56:	18f2      	adds	r2, r6, r3
   22e58:	7851      	ldrb	r1, [r2, #1]
   22e5a:	5cf0      	ldrb	r0, [r6, r3]
   22e5c:	f01a f9a1 	bl	3d1a2 <pm_state_set>
	pm_system_resume();
   22e60:	f7ff ff6c 	bl	22d3c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   22e64:	4620      	mov	r0, r4
   22e66:	f7ff ff55 	bl	22d14 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   22e6a:	f015 fd29 	bl	388c0 <k_sched_unlock>
	bool ret = true;
   22e6e:	2001      	movs	r0, #1
   22e70:	e7c7      	b.n	22e02 <pm_system_suspend+0x52>
   22e72:	bf00      	nop
   22e74:	2001a518 	.word	0x2001a518
   22e78:	200191bc 	.word	0x200191bc
   22e7c:	200191b0 	.word	0x200191b0
   22e80:	000f423f 	.word	0x000f423f
   22e84:	000f4240 	.word	0x000f4240
   22e88:	200191c0 	.word	0x200191c0
   22e8c:	0003d1a3 	.word	0x0003d1a3

00022e90 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22e90:	4b04      	ldr	r3, [pc, #16]	; (22ea4 <pm_policy_state_lock_is_active+0x14>)
   22e92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22e96:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   22e9a:	3800      	subs	r0, #0
   22e9c:	bf18      	it	ne
   22e9e:	2001      	movne	r0, #1
   22ea0:	4770      	bx	lr
   22ea2:	bf00      	nop
   22ea4:	200191c4 	.word	0x200191c4

00022ea8 <pm_policy_next_state>:
{
   22ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22eac:	b085      	sub	sp, #20
   22eae:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   22eb0:	a903      	add	r1, sp, #12
   22eb2:	f000 f847 	bl	22f44 <pm_state_cpu_get_all>
   22eb6:	f04f 0b00 	mov.w	fp, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   22eba:	3801      	subs	r0, #1
   22ebc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 22f3c <pm_policy_next_state+0x94>
   22ec0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 22f40 <pm_policy_next_state+0x98>
   22ec4:	b204      	sxth	r4, r0
   22ec6:	1c63      	adds	r3, r4, #1
   22ec8:	d104      	bne.n	22ed4 <pm_policy_next_state+0x2c>
	return NULL;
   22eca:	2600      	movs	r6, #0
}
   22ecc:	4630      	mov	r0, r6
   22ece:	b005      	add	sp, #20
   22ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   22ed4:	9a03      	ldr	r2, [sp, #12]
   22ed6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
   22eda:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   22ede:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   22ee2:	f7ff ffd5 	bl	22e90 <pm_policy_state_lock_is_active>
   22ee6:	4605      	mov	r5, r0
   22ee8:	bb10      	cbnz	r0, 22f30 <pm_policy_next_state+0x88>
   22eea:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   22eee:	46c4      	mov	ip, r8
   22ef0:	4629      	mov	r1, r5
   22ef2:	6870      	ldr	r0, [r6, #4]
   22ef4:	4652      	mov	r2, sl
   22ef6:	fbe0 c109 	umlal	ip, r1, r0, r9
   22efa:	465b      	mov	r3, fp
   22efc:	4660      	mov	r0, ip
   22efe:	f7f9 fff3 	bl	1cee8 <__aeabi_uldivmod>
   22f02:	46c4      	mov	ip, r8
   22f04:	4629      	mov	r1, r5
   22f06:	9001      	str	r0, [sp, #4]
   22f08:	68b0      	ldr	r0, [r6, #8]
   22f0a:	465b      	mov	r3, fp
   22f0c:	fbe0 c109 	umlal	ip, r1, r0, r9
   22f10:	4652      	mov	r2, sl
   22f12:	4660      	mov	r0, ip
   22f14:	f7f9 ffe8 	bl	1cee8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   22f18:	4b07      	ldr	r3, [pc, #28]	; (22f38 <pm_policy_next_state+0x90>)
   22f1a:	681b      	ldr	r3, [r3, #0]
   22f1c:	1c59      	adds	r1, r3, #1
   22f1e:	d001      	beq.n	22f24 <pm_policy_next_state+0x7c>
   22f20:	4283      	cmp	r3, r0
   22f22:	d905      	bls.n	22f30 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   22f24:	1c7a      	adds	r2, r7, #1
   22f26:	d0d1      	beq.n	22ecc <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   22f28:	9b01      	ldr	r3, [sp, #4]
   22f2a:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   22f2c:	42b8      	cmp	r0, r7
   22f2e:	d9cd      	bls.n	22ecc <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   22f30:	3c01      	subs	r4, #1
   22f32:	b224      	sxth	r4, r4
   22f34:	e7c7      	b.n	22ec6 <pm_policy_next_state+0x1e>
   22f36:	bf00      	nop
   22f38:	20014614 	.word	0x20014614
   22f3c:	000f423f 	.word	0x000f423f
   22f40:	000f4240 	.word	0x000f4240

00022f44 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   22f44:	b908      	cbnz	r0, 22f4a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   22f46:	4b02      	ldr	r3, [pc, #8]	; (22f50 <pm_state_cpu_get_all+0xc>)
   22f48:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   22f4a:	2000      	movs	r0, #0
   22f4c:	4770      	bx	lr
   22f4e:	bf00      	nop
   22f50:	000430d0 	.word	0x000430d0

00022f54 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   22f54:	4901      	ldr	r1, [pc, #4]	; (22f5c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   22f56:	2210      	movs	r2, #16
	str	r2, [r1]
   22f58:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   22f5a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   22f5c:	e000ed10 	.word	0xe000ed10

00022f60 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   22f60:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   22f62:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   22f64:	f380 8811 	msr	BASEPRI, r0
	isb
   22f68:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   22f6c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   22f70:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   22f72:	b662      	cpsie	i
	isb
   22f74:	f3bf 8f6f 	isb	sy

	bx	lr
   22f78:	4770      	bx	lr
   22f7a:	bf00      	nop

00022f7c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   22f7c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   22f7e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   22f80:	f381 8811 	msr	BASEPRI, r1

	wfe
   22f84:	bf20      	wfe

	msr	BASEPRI, r0
   22f86:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   22f8a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   22f8c:	4770      	bx	lr
   22f8e:	bf00      	nop

00022f90 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f94:	4607      	mov	r7, r0

	if (esf != NULL) {
   22f96:	460c      	mov	r4, r1
{
   22f98:	b086      	sub	sp, #24
	if (esf != NULL) {
   22f9a:	2900      	cmp	r1, #0
   22f9c:	d04a      	beq.n	23034 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   22f9e:	688b      	ldr	r3, [r1, #8]
   22fa0:	4828      	ldr	r0, [pc, #160]	; (23044 <z_arm_fatal_error+0xb4>)
   22fa2:	9300      	str	r3, [sp, #0]
   22fa4:	e9d1 2300 	ldrd	r2, r3, [r1]
   22fa8:	2145      	movs	r1, #69	; 0x45
   22faa:	f01a f926 	bl	3d1fa <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   22fae:	6963      	ldr	r3, [r4, #20]
   22fb0:	2145      	movs	r1, #69	; 0x45
   22fb2:	9300      	str	r3, [sp, #0]
   22fb4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   22fb8:	4823      	ldr	r0, [pc, #140]	; (23048 <z_arm_fatal_error+0xb8>)
   22fba:	f01a f91e 	bl	3d1fa <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   22fbe:	2145      	movs	r1, #69	; 0x45
   22fc0:	69e2      	ldr	r2, [r4, #28]
   22fc2:	4822      	ldr	r0, [pc, #136]	; (2304c <z_arm_fatal_error+0xbc>)
   22fc4:	f01a f919 	bl	3d1fa <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22fc8:	4626      	mov	r6, r4
   22fca:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   22fcc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 23058 <z_arm_fatal_error+0xc8>
   22fd0:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   22fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22fd8:	ed96 7a08 	vldr	s14, [r6, #32]
   22fdc:	edcd 7a05 	vstr	s15, [sp, #20]
   22fe0:	1ceb      	adds	r3, r5, #3
   22fe2:	9304      	str	r3, [sp, #16]
   22fe4:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   22fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22fec:	edcd 7a03 	vstr	s15, [sp, #12]
   22ff0:	1cab      	adds	r3, r5, #2
   22ff2:	9302      	str	r3, [sp, #8]
   22ff4:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   22ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22ffc:	edcd 7a01 	vstr	s15, [sp, #4]
   23000:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   23004:	1c6b      	adds	r3, r5, #1
   23006:	462a      	mov	r2, r5
   23008:	9300      	str	r3, [sp, #0]
   2300a:	2145      	movs	r1, #69	; 0x45
   2300c:	ee17 3a90 	vmov	r3, s15
   23010:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   23012:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   23014:	f01a f8f1 	bl	3d1fa <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   23018:	2d10      	cmp	r5, #16
   2301a:	f106 0610 	add.w	r6, r6, #16
   2301e:	d1d7      	bne.n	22fd0 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   23020:	2145      	movs	r1, #69	; 0x45
   23022:	6e22      	ldr	r2, [r4, #96]	; 0x60
   23024:	480a      	ldr	r0, [pc, #40]	; (23050 <z_arm_fatal_error+0xc0>)
   23026:	f01a f8e8 	bl	3d1fa <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   2302a:	2145      	movs	r1, #69	; 0x45
   2302c:	69a2      	ldr	r2, [r4, #24]
   2302e:	4809      	ldr	r0, [pc, #36]	; (23054 <z_arm_fatal_error+0xc4>)
   23030:	f01a f8e3 	bl	3d1fa <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   23034:	4621      	mov	r1, r4
   23036:	4638      	mov	r0, r7
}
   23038:	b006      	add	sp, #24
   2303a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
   2303e:	f013 ba81 	b.w	36544 <z_fatal_error>
   23042:	bf00      	nop
   23044:	00044d49 	.word	0x00044d49
   23048:	00044d7d 	.word	0x00044d7d
   2304c:	00044db1 	.word	0x00044db1
   23050:	00044e0d 	.word	0x00044e0d
   23054:	00044e21 	.word	0x00044e21
   23058:	00044dc5 	.word	0x00044dc5

0002305c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2305c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2305e:	2b00      	cmp	r3, #0
   23060:	db08      	blt.n	23074 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23062:	2201      	movs	r2, #1
   23064:	f000 001f 	and.w	r0, r0, #31
   23068:	fa02 f000 	lsl.w	r0, r2, r0
   2306c:	4a02      	ldr	r2, [pc, #8]	; (23078 <arch_irq_enable+0x1c>)
   2306e:	095b      	lsrs	r3, r3, #5
   23070:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   23074:	4770      	bx	lr
   23076:	bf00      	nop
   23078:	e000e100 	.word	0xe000e100

0002307c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2307c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2307e:	2b00      	cmp	r3, #0
   23080:	db0d      	blt.n	2309e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23082:	2201      	movs	r2, #1
   23084:	f000 001f 	and.w	r0, r0, #31
   23088:	fa02 f000 	lsl.w	r0, r2, r0
   2308c:	095b      	lsrs	r3, r3, #5
   2308e:	4a04      	ldr	r2, [pc, #16]	; (230a0 <arch_irq_disable+0x24>)
   23090:	3320      	adds	r3, #32
   23092:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   23096:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2309a:	f3bf 8f6f 	isb	sy
}
   2309e:	4770      	bx	lr
   230a0:	e000e100 	.word	0xe000e100

000230a4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   230a4:	4b05      	ldr	r3, [pc, #20]	; (230bc <arch_irq_is_enabled+0x18>)
   230a6:	0942      	lsrs	r2, r0, #5
   230a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   230ac:	2301      	movs	r3, #1
   230ae:	f000 001f 	and.w	r0, r0, #31
   230b2:	fa03 f000 	lsl.w	r0, r3, r0
}
   230b6:	4010      	ands	r0, r2
   230b8:	4770      	bx	lr
   230ba:	bf00      	nop
   230bc:	e000e100 	.word	0xe000e100

000230c0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   230c0:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   230c2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   230c4:	2c07      	cmp	r4, #7
{
   230c6:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   230c8:	d908      	bls.n	230dc <z_arm_irq_priority_set+0x1c>
   230ca:	490d      	ldr	r1, [pc, #52]	; (23100 <z_arm_irq_priority_set+0x40>)
   230cc:	480d      	ldr	r0, [pc, #52]	; (23104 <z_arm_irq_priority_set+0x44>)
   230ce:	2257      	movs	r2, #87	; 0x57
   230d0:	f01a f859 	bl	3d186 <assert_print>
   230d4:	2157      	movs	r1, #87	; 0x57
   230d6:	480a      	ldr	r0, [pc, #40]	; (23100 <z_arm_irq_priority_set+0x40>)
   230d8:	f01a f84e 	bl	3d178 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   230dc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   230de:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   230e0:	bfac      	ite	ge
   230e2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   230e6:	4b08      	ldrlt	r3, [pc, #32]	; (23108 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   230e8:	ea4f 1444 	mov.w	r4, r4, lsl #5
   230ec:	b2e4      	uxtb	r4, r4
   230ee:	bfab      	itete	ge
   230f0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   230f4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   230f8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   230fc:	555c      	strblt	r4, [r3, r5]
}
   230fe:	bd38      	pop	{r3, r4, r5, pc}
   23100:	00044e54 	.word	0x00044e54
   23104:	0004494f 	.word	0x0004494f
   23108:	e000ed14 	.word	0xe000ed14

0002310c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2310c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2310e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   23110:	4b04      	ldr	r3, [pc, #16]	; (23124 <_arch_isr_direct_pm+0x18>)
   23112:	699a      	ldr	r2, [r3, #24]
   23114:	b11a      	cbz	r2, 2311e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   23116:	2200      	movs	r2, #0
   23118:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2311a:	f01e fac8 	bl	416ae <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2311e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   23120:	bd08      	pop	{r3, pc}
   23122:	bf00      	nop
   23124:	2001a518 	.word	0x2001a518

00023128 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   23128:	bf30      	wfi
    b z_SysNmiOnReset
   2312a:	f7ff bffd 	b.w	23128 <z_SysNmiOnReset>
   2312e:	bf00      	nop

00023130 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   23130:	4a14      	ldr	r2, [pc, #80]	; (23184 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   23132:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   23134:	4b14      	ldr	r3, [pc, #80]	; (23188 <z_arm_prep_c+0x58>)
   23136:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2313a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2313c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23140:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   23144:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   23148:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2314c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   23150:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   23154:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   23158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   2315c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   23160:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   23164:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23168:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   2316c:	2300      	movs	r3, #0
   2316e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   23172:	f013 fa5d 	bl	36630 <z_bss_zero>
	z_data_copy();
   23176:	f015 fe7b 	bl	38e70 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2317a:	f000 fb3f 	bl	237fc <z_arm_interrupt_init>
	z_cstart();
   2317e:	f013 fa97 	bl	366b0 <z_cstart>
   23182:	bf00      	nop
   23184:	0001c200 	.word	0x0001c200
   23188:	e000ed00 	.word	0xe000ed00

0002318c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2318c:	4a0a      	ldr	r2, [pc, #40]	; (231b8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2318e:	490b      	ldr	r1, [pc, #44]	; (231bc <arch_swap+0x30>)
	_current->arch.basepri = key;
   23190:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   23192:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   23194:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
   23198:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2319c:	4908      	ldr	r1, [pc, #32]	; (231c0 <arch_swap+0x34>)
   2319e:	684b      	ldr	r3, [r1, #4]
   231a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   231a4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   231a6:	2300      	movs	r3, #0
   231a8:	f383 8811 	msr	BASEPRI, r3
   231ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   231b0:	6893      	ldr	r3, [r2, #8]
}
   231b2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   231b6:	4770      	bx	lr
   231b8:	2001a518 	.word	0x2001a518
   231bc:	00043b18 	.word	0x00043b18
   231c0:	e000ed00 	.word	0xe000ed00

000231c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   231c4:	4923      	ldr	r1, [pc, #140]	; (23254 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   231c6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   231c8:	f882 e0cd 	strb.w	lr, [r2, #205]	; 0xcd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   231cc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   231d0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   231d2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   231d6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   231da:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   231de:	d103      	bne.n	231e8 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   231e0:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vstmia r0, {s16-s31}
   231e4:	ec80 8a10 	vstmia	r0, {s16-s31}

000231e8 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   231e8:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   231ea:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   231ee:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   231f2:	4f19      	ldr	r7, [pc, #100]	; (23258 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   231f4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   231f8:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   231fa:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   231fc:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   231fe:	f992 e0cd 	ldrsb.w	lr, [r2, #205]	; 0xcd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   23202:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
   23206:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   23208:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2320c:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   23210:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   23214:	d003      	beq.n	2321e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   23216:	2300      	movs	r3, #0
    vmsr fpscr, r3
   23218:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   2321c:	e003      	b.n	23226 <in_fp_endif>

0002321e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   2321e:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vldmia r0, {s16-s31}
   23222:	ec90 8a10 	vldmia	r0, {s16-s31}

00023226 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   23226:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   2322a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   2322e:	f383 8814 	msr	CONTROL, r3
    isb
   23232:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   23236:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2323a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2323e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   23242:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   23246:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   23248:	f01a fdd2 	bl	3ddf0 <configure_builtin_stack_guard>
    pop {r2, lr}
   2324c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   23250:	4770      	bx	lr
   23252:	0000      	.short	0x0000
    ldr r1, =_kernel
   23254:	2001a518 	.word	0x2001a518
    ldr v4, =_SCS_ICSR
   23258:	e000ed04 	.word	0xe000ed04

0002325c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2325c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   23260:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   23262:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   23266:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2326a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2326c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   23270:	2902      	cmp	r1, #2
    beq _oops
   23272:	d0ff      	beq.n	23274 <_oops>

00023274 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   23274:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   23276:	f01a fdac 	bl	3ddd2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2327a:	bd01      	pop	{r0, pc}

0002327c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2327c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   23280:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   23282:	490d      	ldr	r1, [pc, #52]	; (232b8 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   23284:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   23288:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   2328a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   2328e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   23292:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   23294:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   23298:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   232a0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   232a4:	2300      	movs	r3, #0
   232a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   232aa:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   232ae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   232b0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   232b2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   232b6:	4770      	bx	lr
   232b8:	0003ce9d 	.word	0x0003ce9d

000232bc <arch_switch_to_main_thread>:
   232bc:	2300      	movs	r3, #0
   232be:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   232c2:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   232c6:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   232ca:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   232ce:	f3bf 8f6f 	isb	sy
   232d2:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   232d6:	4b09      	ldr	r3, [pc, #36]	; (232fc <arch_switch_to_main_thread+0x40>)
   232d8:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   232da:	6f43      	ldr	r3, [r0, #116]	; 0x74
   232dc:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   232e0:	4610      	mov	r0, r2
   232e2:	f381 8809 	msr	PSP, r1
   232e6:	2100      	movs	r1, #0
   232e8:	b663      	cpsie	if
   232ea:	f381 8811 	msr	BASEPRI, r1
   232ee:	f3bf 8f6f 	isb	sy
   232f2:	2200      	movs	r2, #0
   232f4:	2300      	movs	r3, #0
   232f6:	f019 fdd1 	bl	3ce9c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   232fa:	bf00      	nop
   232fc:	2001a518 	.word	0x2001a518

00023300 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   23300:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   23302:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   23304:	4a0b      	ldr	r2, [pc, #44]	; (23334 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   23306:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   23308:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2330a:	bf1e      	ittt	ne
	movne	r1, #0
   2330c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2330e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   23310:	f01e f9cd 	blne	416ae <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   23314:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   23316:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2331a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2331e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   23322:	4905      	ldr	r1, [pc, #20]	; (23338 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   23324:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   23326:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   23328:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2332a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2332e:	4903      	ldr	r1, [pc, #12]	; (2333c <_isr_wrapper+0x3c>)
	bx r1
   23330:	4708      	bx	r1
   23332:	0000      	.short	0x0000
	ldr r2, =_kernel
   23334:	2001a518 	.word	0x2001a518
	ldr r1, =_sw_isr_table
   23338:	00042b18 	.word	0x00042b18
	ldr r1, =z_arm_int_exit
   2333c:	00023341 	.word	0x00023341

00023340 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   23340:	4b04      	ldr	r3, [pc, #16]	; (23354 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   23342:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   23344:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   23346:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   23348:	d003      	beq.n	23352 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2334a:	4903      	ldr	r1, [pc, #12]	; (23358 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   23350:	600a      	str	r2, [r1, #0]

00023352 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   23352:	4770      	bx	lr
	ldr r3, =_kernel
   23354:	2001a518 	.word	0x2001a518
	ldr r1, =_SCS_ICSR
   23358:	e000ed04 	.word	0xe000ed04

0002335c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   2335c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2335e:	4c21      	ldr	r4, [pc, #132]	; (233e4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   23360:	2145      	movs	r1, #69	; 0x45
   23362:	4821      	ldr	r0, [pc, #132]	; (233e8 <usage_fault.constprop.0+0x8c>)
   23364:	f019 ff49 	bl	3d1fa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   23368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2336a:	019d      	lsls	r5, r3, #6
   2336c:	d503      	bpl.n	23376 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   2336e:	2145      	movs	r1, #69	; 0x45
   23370:	481e      	ldr	r0, [pc, #120]	; (233ec <usage_fault.constprop.0+0x90>)
   23372:	f019 ff42 	bl	3d1fa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   23376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23378:	01dc      	lsls	r4, r3, #7
   2337a:	d503      	bpl.n	23384 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   2337c:	2145      	movs	r1, #69	; 0x45
   2337e:	481c      	ldr	r0, [pc, #112]	; (233f0 <usage_fault.constprop.0+0x94>)
   23380:	f019 ff3b 	bl	3d1fa <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   23384:	4d17      	ldr	r5, [pc, #92]	; (233e4 <usage_fault.constprop.0+0x88>)
   23386:	6aac      	ldr	r4, [r5, #40]	; 0x28
   23388:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   2338c:	d004      	beq.n	23398 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   2338e:	2145      	movs	r1, #69	; 0x45
   23390:	4818      	ldr	r0, [pc, #96]	; (233f4 <usage_fault.constprop.0+0x98>)
   23392:	f019 ff32 	bl	3d1fa <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   23396:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   23398:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2339a:	0318      	lsls	r0, r3, #12
   2339c:	d503      	bpl.n	233a6 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   2339e:	2145      	movs	r1, #69	; 0x45
   233a0:	4815      	ldr	r0, [pc, #84]	; (233f8 <usage_fault.constprop.0+0x9c>)
   233a2:	f019 ff2a 	bl	3d1fa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   233a6:	4d0f      	ldr	r5, [pc, #60]	; (233e4 <usage_fault.constprop.0+0x88>)
   233a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   233aa:	0359      	lsls	r1, r3, #13
   233ac:	d503      	bpl.n	233b6 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   233ae:	2145      	movs	r1, #69	; 0x45
   233b0:	4812      	ldr	r0, [pc, #72]	; (233fc <usage_fault.constprop.0+0xa0>)
   233b2:	f019 ff22 	bl	3d1fa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   233b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   233b8:	039a      	lsls	r2, r3, #14
   233ba:	d503      	bpl.n	233c4 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   233bc:	2145      	movs	r1, #69	; 0x45
   233be:	4810      	ldr	r0, [pc, #64]	; (23400 <usage_fault.constprop.0+0xa4>)
   233c0:	f019 ff1b 	bl	3d1fa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   233c4:	4d07      	ldr	r5, [pc, #28]	; (233e4 <usage_fault.constprop.0+0x88>)
   233c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   233c8:	03db      	lsls	r3, r3, #15
   233ca:	d503      	bpl.n	233d4 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   233cc:	2145      	movs	r1, #69	; 0x45
   233ce:	480d      	ldr	r0, [pc, #52]	; (23404 <usage_fault.constprop.0+0xa8>)
   233d0:	f019 ff13 	bl	3d1fa <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   233d4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   233d6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   233d8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   233dc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   233e0:	62ab      	str	r3, [r5, #40]	; 0x28
}
   233e2:	bd38      	pop	{r3, r4, r5, pc}
   233e4:	e000ed00 	.word	0xe000ed00
   233e8:	00044e8a 	.word	0x00044e8a
   233ec:	00044ea7 	.word	0x00044ea7
   233f0:	00044ebf 	.word	0x00044ebf
   233f4:	00044ede 	.word	0x00044ede
   233f8:	00044f0d 	.word	0x00044f0d
   233fc:	00044f30 	.word	0x00044f30
   23400:	00044f5a 	.word	0x00044f5a
   23404:	00044f79 	.word	0x00044f79

00023408 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   23408:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2340a:	4c23      	ldr	r4, [pc, #140]	; (23498 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2340c:	4606      	mov	r6, r0
   2340e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   23410:	4822      	ldr	r0, [pc, #136]	; (2349c <bus_fault.constprop.0+0x94>)
   23412:	2145      	movs	r1, #69	; 0x45
   23414:	f019 fef1 	bl	3d1fa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   23418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2341a:	04d9      	lsls	r1, r3, #19
   2341c:	d503      	bpl.n	23426 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   2341e:	2145      	movs	r1, #69	; 0x45
   23420:	481f      	ldr	r0, [pc, #124]	; (234a0 <bus_fault.constprop.0+0x98>)
   23422:	f019 feea 	bl	3d1fa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   23426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23428:	051a      	lsls	r2, r3, #20
   2342a:	d503      	bpl.n	23434 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   2342c:	2145      	movs	r1, #69	; 0x45
   2342e:	481d      	ldr	r0, [pc, #116]	; (234a4 <bus_fault.constprop.0+0x9c>)
   23430:	f019 fee3 	bl	3d1fa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   23434:	4c18      	ldr	r4, [pc, #96]	; (23498 <bus_fault.constprop.0+0x90>)
   23436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23438:	059b      	lsls	r3, r3, #22
   2343a:	d510      	bpl.n	2345e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   2343c:	481a      	ldr	r0, [pc, #104]	; (234a8 <bus_fault.constprop.0+0xa0>)
   2343e:	2145      	movs	r1, #69	; 0x45
   23440:	f019 fedb 	bl	3d1fa <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   23444:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   23446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23448:	0418      	lsls	r0, r3, #16
   2344a:	d508      	bpl.n	2345e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   2344c:	2145      	movs	r1, #69	; 0x45
   2344e:	4817      	ldr	r0, [pc, #92]	; (234ac <bus_fault.constprop.0+0xa4>)
   23450:	f019 fed3 	bl	3d1fa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   23454:	b11e      	cbz	r6, 2345e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   23456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   2345c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2345e:	4c0e      	ldr	r4, [pc, #56]	; (23498 <bus_fault.constprop.0+0x90>)
   23460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23462:	0559      	lsls	r1, r3, #21
   23464:	d503      	bpl.n	2346e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   23466:	2145      	movs	r1, #69	; 0x45
   23468:	4811      	ldr	r0, [pc, #68]	; (234b0 <bus_fault.constprop.0+0xa8>)
   2346a:	f019 fec6 	bl	3d1fa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2346e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23470:	05da      	lsls	r2, r3, #23
   23472:	d50b      	bpl.n	2348c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   23474:	2145      	movs	r1, #69	; 0x45
   23476:	480f      	ldr	r0, [pc, #60]	; (234b4 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   23478:	f019 febf 	bl	3d1fa <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
   2347c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2347e:	4a06      	ldr	r2, [pc, #24]	; (23498 <bus_fault.constprop.0+0x90>)
   23480:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23482:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   23486:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   23488:	7028      	strb	r0, [r5, #0]
}
   2348a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2348c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2348e:	049b      	lsls	r3, r3, #18
   23490:	d5f4      	bpl.n	2347c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   23492:	2145      	movs	r1, #69	; 0x45
   23494:	4808      	ldr	r0, [pc, #32]	; (234b8 <bus_fault.constprop.0+0xb0>)
   23496:	e7ef      	b.n	23478 <bus_fault.constprop.0+0x70>
   23498:	e000ed00 	.word	0xe000ed00
   2349c:	00044fa9 	.word	0x00044fa9
   234a0:	00044fc4 	.word	0x00044fc4
   234a4:	00044fda 	.word	0x00044fda
   234a8:	00044ff2 	.word	0x00044ff2
   234ac:	00045010 	.word	0x00045010
   234b0:	0004502a 	.word	0x0004502a
   234b4:	0004504a 	.word	0x0004504a
   234b8:	00045067 	.word	0x00045067

000234bc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   234bc:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   234be:	4c2e      	ldr	r4, [pc, #184]	; (23578 <mem_manage_fault.constprop.0+0xbc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   234c0:	4606      	mov	r6, r0
   234c2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   234c4:	482d      	ldr	r0, [pc, #180]	; (2357c <mem_manage_fault.constprop.0+0xc0>)
   234c6:	2145      	movs	r1, #69	; 0x45
   234c8:	f019 fe97 	bl	3d1fa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   234cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   234ce:	06db      	lsls	r3, r3, #27
   234d0:	d503      	bpl.n	234da <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   234d2:	2145      	movs	r1, #69	; 0x45
   234d4:	482a      	ldr	r0, [pc, #168]	; (23580 <mem_manage_fault.constprop.0+0xc4>)
   234d6:	f019 fe90 	bl	3d1fa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   234da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   234dc:	071c      	lsls	r4, r3, #28
   234de:	d503      	bpl.n	234e8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   234e0:	2145      	movs	r1, #69	; 0x45
   234e2:	4828      	ldr	r0, [pc, #160]	; (23584 <mem_manage_fault.constprop.0+0xc8>)
   234e4:	f019 fe89 	bl	3d1fa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   234e8:	4c23      	ldr	r4, [pc, #140]	; (23578 <mem_manage_fault.constprop.0+0xbc>)
   234ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   234ec:	0798      	lsls	r0, r3, #30
   234ee:	d510      	bpl.n	23512 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   234f0:	2145      	movs	r1, #69	; 0x45
   234f2:	4825      	ldr	r0, [pc, #148]	; (23588 <mem_manage_fault.constprop.0+0xcc>)
   234f4:	f019 fe81 	bl	3d1fa <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   234f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   234fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   234fc:	0619      	lsls	r1, r3, #24
   234fe:	d508      	bpl.n	23512 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   23500:	2145      	movs	r1, #69	; 0x45
   23502:	4822      	ldr	r0, [pc, #136]	; (2358c <mem_manage_fault.constprop.0+0xd0>)
   23504:	f019 fe79 	bl	3d1fa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   23508:	b11e      	cbz	r6, 23512 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2350a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2350c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   23510:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   23512:	4c19      	ldr	r4, [pc, #100]	; (23578 <mem_manage_fault.constprop.0+0xbc>)
   23514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23516:	07db      	lsls	r3, r3, #31
   23518:	d503      	bpl.n	23522 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   2351a:	2145      	movs	r1, #69	; 0x45
   2351c:	481c      	ldr	r0, [pc, #112]	; (23590 <mem_manage_fault.constprop.0+0xd4>)
   2351e:	f019 fe6c 	bl	3d1fa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   23522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23524:	069e      	lsls	r6, r3, #26
   23526:	d503      	bpl.n	23530 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
   23528:	2145      	movs	r1, #69	; 0x45
   2352a:	481a      	ldr	r0, [pc, #104]	; (23594 <mem_manage_fault.constprop.0+0xd8>)
   2352c:	f019 fe65 	bl	3d1fa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   23530:	4b11      	ldr	r3, [pc, #68]	; (23578 <mem_manage_fault.constprop.0+0xbc>)
   23532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23534:	06d4      	lsls	r4, r2, #27
   23536:	d402      	bmi.n	2353e <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   23538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2353a:	0790      	lsls	r0, r2, #30
   2353c:	d50d      	bpl.n	2355a <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   2353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23540:	06d9      	lsls	r1, r3, #27
   23542:	d50a      	bpl.n	2355a <mem_manage_fault.constprop.0+0x9e>
   23544:	4914      	ldr	r1, [pc, #80]	; (23598 <mem_manage_fault.constprop.0+0xdc>)
   23546:	4815      	ldr	r0, [pc, #84]	; (2359c <mem_manage_fault.constprop.0+0xe0>)
   23548:	f240 124f 	movw	r2, #335	; 0x14f
   2354c:	f019 fe1b 	bl	3d186 <assert_print>
   23550:	f240 114f 	movw	r1, #335	; 0x14f
   23554:	4810      	ldr	r0, [pc, #64]	; (23598 <mem_manage_fault.constprop.0+0xdc>)
   23556:	f019 fe0f 	bl	3d178 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   2355a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2355c:	4b06      	ldr	r3, [pc, #24]	; (23578 <mem_manage_fault.constprop.0+0xbc>)
   2355e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23560:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   23562:	bf42      	ittt	mi
   23564:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   23566:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   2356a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2356c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2356e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   23572:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   23574:	7028      	strb	r0, [r5, #0]
}
   23576:	bd70      	pop	{r4, r5, r6, pc}
   23578:	e000ed00 	.word	0xe000ed00
   2357c:	0004509b 	.word	0x0004509b
   23580:	000450b6 	.word	0x000450b6
   23584:	00044fda 	.word	0x00044fda
   23588:	000450ee 	.word	0x000450ee
   2358c:	0004510b 	.word	0x0004510b
   23590:	00045126 	.word	0x00045126
   23594:	00045067 	.word	0x00045067
   23598:	0004514a 	.word	0x0004514a
   2359c:	0004494f 	.word	0x0004494f

000235a0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   235a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   235a4:	4b69      	ldr	r3, [pc, #420]	; (2374c <z_arm_fault+0x1ac>)
{
   235a6:	4607      	mov	r7, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   235a8:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   235ac:	460d      	mov	r5, r1
   235ae:	4614      	mov	r4, r2
   235b0:	2600      	movs	r6, #0
   235b2:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   235b4:	f3c9 0808 	ubfx	r8, r9, #0, #9
   235b8:	f386 8811 	msr	BASEPRI, r6
   235bc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   235c0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   235c4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   235c8:	d111      	bne.n	235ee <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   235ca:	07d0      	lsls	r0, r2, #31
   235cc:	d40f      	bmi.n	235ee <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   235ce:	0651      	lsls	r1, r2, #25
   235d0:	d404      	bmi.n	235dc <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   235d2:	0722      	lsls	r2, r4, #28
   235d4:	d409      	bmi.n	235ea <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)msp;
   235d6:	463d      	mov	r5, r7
			*nested_exc = true;
   235d8:	2601      	movs	r6, #1
   235da:	e007      	b.n	235ec <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   235dc:	2145      	movs	r1, #69	; 0x45
   235de:	485c      	ldr	r0, [pc, #368]	; (23750 <z_arm_fault+0x1b0>)
   235e0:	f019 fe0b 	bl	3d1fa <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   235e4:	f014 0404 	ands.w	r4, r4, #4
   235e8:	d01c      	beq.n	23624 <z_arm_fault+0x84>
	*nested_exc = false;
   235ea:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   235ec:	b95d      	cbnz	r5, 23606 <z_arm_fault+0x66>
   235ee:	f240 32fb 	movw	r2, #1019	; 0x3fb
   235f2:	4958      	ldr	r1, [pc, #352]	; (23754 <z_arm_fault+0x1b4>)
   235f4:	4858      	ldr	r0, [pc, #352]	; (23758 <z_arm_fault+0x1b8>)
   235f6:	f019 fdc6 	bl	3d186 <assert_print>
   235fa:	f240 31fb 	movw	r1, #1019	; 0x3fb
   235fe:	4855      	ldr	r0, [pc, #340]	; (23754 <z_arm_fault+0x1b4>)
   23600:	f019 fdba 	bl	3d178 <assert_post_action>
   23604:	2500      	movs	r5, #0
	*recoverable = false;
   23606:	2400      	movs	r4, #0
	switch (fault) {
   23608:	f1a8 0303 	sub.w	r3, r8, #3
	*recoverable = false;
   2360c:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   23610:	2b09      	cmp	r3, #9
   23612:	f200 8089 	bhi.w	23728 <z_arm_fault+0x188>
   23616:	e8df f003 	tbb	[pc, r3]
   2361a:	7c07      	.short	0x7c07
   2361c:	87876480 	.word	0x87876480
   23620:	84878787 	.word	0x84878787
			ptr_esf = (z_arch_esf_t *)msp;
   23624:	463d      	mov	r5, r7
	if (!alternative_state_exc) {
   23626:	e7e0      	b.n	235ea <z_arm_fault+0x4a>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   23628:	4f48      	ldr	r7, [pc, #288]	; (2374c <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   2362a:	2145      	movs	r1, #69	; 0x45
   2362c:	484b      	ldr	r0, [pc, #300]	; (2375c <z_arm_fault+0x1bc>)
   2362e:	f019 fde4 	bl	3d1fa <z_log_minimal_printk>
	*recoverable = false;
   23632:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   23636:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   23638:	f014 0402 	ands.w	r4, r4, #2
   2363c:	d005      	beq.n	2364a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   2363e:	2145      	movs	r1, #69	; 0x45
   23640:	4847      	ldr	r0, [pc, #284]	; (23760 <z_arm_fault+0x1c0>)
	PR_FAULT_INFO(
   23642:	f019 fdda 	bl	3d1fa <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   23646:	2400      	movs	r4, #0
}
   23648:	e006      	b.n	23658 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2364c:	2b00      	cmp	r3, #0
   2364e:	da1d      	bge.n	2368c <z_arm_fault+0xec>
		PR_EXC("  Debug event");
   23650:	2145      	movs	r1, #69	; 0x45
   23652:	4844      	ldr	r0, [pc, #272]	; (23764 <z_arm_fault+0x1c4>)
   23654:	f019 fdd1 	bl	3d1fa <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   23658:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2365c:	b99b      	cbnz	r3, 23686 <z_arm_fault+0xe6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2365e:	2268      	movs	r2, #104	; 0x68
   23660:	4629      	mov	r1, r5
   23662:	a802      	add	r0, sp, #8
   23664:	f01e fa5c 	bl	41b20 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   23668:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2366a:	2e00      	cmp	r6, #0
   2366c:	d069      	beq.n	23742 <z_arm_fault+0x1a2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2366e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   23672:	b922      	cbnz	r2, 2367e <z_arm_fault+0xde>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   23674:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   23678:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2367c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2367e:	4620      	mov	r0, r4
   23680:	a902      	add	r1, sp, #8
   23682:	f7ff fc85 	bl	22f90 <z_arm_fatal_error>
}
   23686:	b01d      	add	sp, #116	; 0x74
   23688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2368e:	005b      	lsls	r3, r3, #1
   23690:	d536      	bpl.n	23700 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   23692:	2145      	movs	r1, #69	; 0x45
   23694:	4834      	ldr	r0, [pc, #208]	; (23768 <z_arm_fault+0x1c8>)
   23696:	f019 fdb0 	bl	3d1fa <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   2369a:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2369c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   236a0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   236a4:	429a      	cmp	r2, r3
   236a6:	d106      	bne.n	236b6 <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   236a8:	2145      	movs	r1, #69	; 0x45
   236aa:	682a      	ldr	r2, [r5, #0]
   236ac:	482f      	ldr	r0, [pc, #188]	; (2376c <z_arm_fault+0x1cc>)
   236ae:	f019 fda4 	bl	3d1fa <z_log_minimal_printk>
			reason = esf->basic.r0;
   236b2:	682c      	ldr	r4, [r5, #0]
   236b4:	e7d0      	b.n	23658 <z_arm_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
   236b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   236ba:	b133      	cbz	r3, 236ca <z_arm_fault+0x12a>
			reason = mem_manage_fault(esf, 1, recoverable);
   236bc:	2001      	movs	r0, #1
   236be:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   236c2:	f7ff fefb 	bl	234bc <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   236c6:	4604      	mov	r4, r0
		break;
   236c8:	e7c6      	b.n	23658 <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
   236ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   236ce:	b12b      	cbz	r3, 236dc <z_arm_fault+0x13c>
			reason = bus_fault(esf, 1, recoverable);
   236d0:	2001      	movs	r0, #1
   236d2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   236d6:	f7ff fe97 	bl	23408 <bus_fault.constprop.0>
   236da:	e7f4      	b.n	236c6 <z_arm_fault+0x126>
		} else if (SCB_UFSR != 0) {
   236dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   236de:	b29b      	uxth	r3, r3
   236e0:	b113      	cbz	r3, 236e8 <z_arm_fault+0x148>
		reason = usage_fault(esf);
   236e2:	f7ff fe3b 	bl	2335c <usage_fault.constprop.0>
   236e6:	e7ee      	b.n	236c6 <z_arm_fault+0x126>
			__ASSERT(0,
   236e8:	491a      	ldr	r1, [pc, #104]	; (23754 <z_arm_fault+0x1b4>)
   236ea:	f240 22cd 	movw	r2, #717	; 0x2cd
   236ee:	481a      	ldr	r0, [pc, #104]	; (23758 <z_arm_fault+0x1b8>)
   236f0:	f019 fd49 	bl	3d186 <assert_print>
   236f4:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
   236f8:	4816      	ldr	r0, [pc, #88]	; (23754 <z_arm_fault+0x1b4>)
   236fa:	f019 fd3d 	bl	3d178 <assert_post_action>
   236fe:	e7ab      	b.n	23658 <z_arm_fault+0xb8>
   23700:	4914      	ldr	r1, [pc, #80]	; (23754 <z_arm_fault+0x1b4>)
   23702:	f240 22d1 	movw	r2, #721	; 0x2d1
   23706:	4814      	ldr	r0, [pc, #80]	; (23758 <z_arm_fault+0x1b8>)
   23708:	f019 fd3d 	bl	3d186 <assert_print>
   2370c:	f240 21d1 	movw	r1, #721	; 0x2d1
   23710:	e7f2      	b.n	236f8 <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   23712:	2000      	movs	r0, #0
   23714:	f10d 0107 	add.w	r1, sp, #7
   23718:	e7d3      	b.n	236c2 <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   2371a:	2000      	movs	r0, #0
   2371c:	f10d 0107 	add.w	r1, sp, #7
   23720:	e7d9      	b.n	236d6 <z_arm_fault+0x136>
	PR_FAULT_INFO(
   23722:	2145      	movs	r1, #69	; 0x45
   23724:	4812      	ldr	r0, [pc, #72]	; (23770 <z_arm_fault+0x1d0>)
   23726:	e78c      	b.n	23642 <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   23728:	4912      	ldr	r1, [pc, #72]	; (23774 <z_arm_fault+0x1d4>)
   2372a:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   2372e:	4a12      	ldr	r2, [pc, #72]	; (23778 <z_arm_fault+0x1d8>)
   23730:	4812      	ldr	r0, [pc, #72]	; (2377c <z_arm_fault+0x1dc>)
   23732:	bf08      	it	eq
   23734:	460a      	moveq	r2, r1
   23736:	f1a8 0310 	sub.w	r3, r8, #16
   2373a:	2145      	movs	r1, #69	; 0x45
   2373c:	f019 fd5d 	bl	3d1fa <z_log_minimal_printk>
   23740:	e781      	b.n	23646 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   23742:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   23746:	f023 0301 	bic.w	r3, r3, #1
   2374a:	e797      	b.n	2367c <z_arm_fault+0xdc>
   2374c:	e000ed00 	.word	0xe000ed00
   23750:	000451b2 	.word	0x000451b2
   23754:	0004514a 	.word	0x0004514a
   23758:	0004494f 	.word	0x0004494f
   2375c:	000451da 	.word	0x000451da
   23760:	000451f6 	.word	0x000451f6
   23764:	0004521c 	.word	0x0004521c
   23768:	0004522f 	.word	0x0004522f
   2376c:	00045253 	.word	0x00045253
   23770:	00045274 	.word	0x00045274
   23774:	00045184 	.word	0x00045184
   23778:	00045199 	.word	0x00045199
   2377c:	0004529d 	.word	0x0004529d

00023780 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   23780:	4b04      	ldr	r3, [pc, #16]	; (23794 <z_arm_fault_init+0x14>)
   23782:	695a      	ldr	r2, [r3, #20]
   23784:	f042 0210 	orr.w	r2, r2, #16
   23788:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   2378a:	695a      	ldr	r2, [r3, #20]
   2378c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   23790:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   23792:	4770      	bx	lr
   23794:	e000ed00 	.word	0xe000ed00

00023798 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   23798:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2379c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   237a0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   237a2:	4672      	mov	r2, lr
	bl z_arm_fault
   237a4:	f7ff fefc 	bl	235a0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   237a8:	bd01      	pop	{r0, pc}
   237aa:	bf00      	nop

000237ac <z_arm_save_fp_context>:
 * @file @brief Helper functions for saving and restoring the FP context.
 *
 */

void z_arm_save_fp_context(struct fpu_ctx_full *buffer)
{
   237ac:	b510      	push	{r4, lr}
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);
   237ae:	4604      	mov	r4, r0
   237b0:	b940      	cbnz	r0, 237c4 <z_arm_save_fp_context+0x18>
   237b2:	4910      	ldr	r1, [pc, #64]	; (237f4 <z_arm_save_fp_context+0x48>)
   237b4:	4810      	ldr	r0, [pc, #64]	; (237f8 <z_arm_save_fp_context+0x4c>)
   237b6:	2214      	movs	r2, #20
   237b8:	f019 fce5 	bl	3d186 <assert_print>
   237bc:	2114      	movs	r1, #20
   237be:	480d      	ldr	r0, [pc, #52]	; (237f4 <z_arm_save_fp_context+0x48>)
   237c0:	f019 fcda 	bl	3d178 <assert_post_action>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   237c4:	f3ef 8314 	mrs	r3, CONTROL

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   237c8:	075a      	lsls	r2, r3, #29
   237ca:	d512      	bpl.n	237f2 <z_arm_save_fp_context+0x46>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   237cc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   237d0:	ec84 0a10 	vstmia	r4, {s0-s15}
   237d4:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   237d8:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   237dc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		buffer->ctx_saved = true;
   237e0:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   237e2:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   237e6:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   237ea:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   237ee:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   237f2:	bd10      	pop	{r4, pc}
   237f4:	000452b5 	.word	0x000452b5
   237f8:	0004494f 	.word	0x0004494f

000237fc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   237fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   237fe:	2120      	movs	r1, #32
   23800:	4803      	ldr	r0, [pc, #12]	; (23810 <z_arm_interrupt_init+0x14>)
   23802:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   23804:	3301      	adds	r3, #1
   23806:	2b41      	cmp	r3, #65	; 0x41
   23808:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2380c:	d1f9      	bne.n	23802 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2380e:	4770      	bx	lr
   23810:	e000e100 	.word	0xe000e100

00023814 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   23814:	2000      	movs	r0, #0
    msr CONTROL, r0
   23816:	f380 8814 	msr	CONTROL, r0
    isb
   2381a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   2381e:	2000      	movs	r0, #0
    msr MSPLIM, r0
   23820:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   23824:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   23828:	f01f f8c4 	bl	429b4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   2382c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   2382e:	490e      	ldr	r1, [pc, #56]	; (23868 <__start+0x54>)
    str r0, [r1]
   23830:	6008      	str	r0, [r1, #0]
    dsb
   23832:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   23836:	480d      	ldr	r0, [pc, #52]	; (2386c <__start+0x58>)
    msr msp, r0
   23838:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   2383c:	f000 f83e 	bl	238bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   23840:	2020      	movs	r0, #32
    msr BASEPRI, r0
   23842:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   23846:	480a      	ldr	r0, [pc, #40]	; (23870 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   23848:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2384c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2384e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   23852:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   23856:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   23858:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2385a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2385e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   23862:	f7ff fc65 	bl	23130 <z_arm_prep_c>
   23866:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   23868:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2386c:	20021a18 	.word	0x20021a18
    ldr r0, =z_interrupt_stacks
   23870:	20021b58 	.word	0x20021b58

00023874 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   23874:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23878:	4905      	ldr	r1, [pc, #20]	; (23890 <sys_arch_reboot+0x1c>)
   2387a:	4b06      	ldr	r3, [pc, #24]	; (23894 <sys_arch_reboot+0x20>)
   2387c:	68ca      	ldr	r2, [r1, #12]
   2387e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23882:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23884:	60cb      	str	r3, [r1, #12]
   23886:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2388a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2388c:	e7fd      	b.n	2388a <sys_arch_reboot+0x16>
   2388e:	bf00      	nop
   23890:	e000ed00 	.word	0xe000ed00
   23894:	05fa0004 	.word	0x05fa0004

00023898 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   23898:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   2389a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   2389c:	4906      	ldr	r1, [pc, #24]	; (238b8 <z_arm_clear_arm_mpu_config+0x20>)
   2389e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   238a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   238a6:	4293      	cmp	r3, r2
   238a8:	d100      	bne.n	238ac <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   238aa:	4770      	bx	lr
  mpu->RNR = rnr;
   238ac:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   238b0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   238b4:	3301      	adds	r3, #1
   238b6:	e7f6      	b.n	238a6 <z_arm_clear_arm_mpu_config+0xe>
   238b8:	e000ed00 	.word	0xe000ed00

000238bc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   238bc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   238be:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   238c0:	2400      	movs	r4, #0
   238c2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   238c6:	f7ff ffe7 	bl	23898 <z_arm_clear_arm_mpu_config>
   238ca:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   238cc:	f04f 30ff 	mov.w	r0, #4294967295
   238d0:	4a0b      	ldr	r2, [pc, #44]	; (23900 <z_arm_init_arch_hw_at_boot+0x44>)
   238d2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   238d6:	3301      	adds	r3, #1
   238d8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   238da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   238de:	d1f8      	bne.n	238d2 <z_arm_init_arch_hw_at_boot+0x16>
   238e0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   238e2:	f04f 30ff 	mov.w	r0, #4294967295
   238e6:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   238ea:	3301      	adds	r3, #1
   238ec:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   238ee:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   238f2:	d1f8      	bne.n	238e6 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   238f4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   238f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   238fa:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   238fe:	bd10      	pop	{r4, pc}
   23900:	e000e100 	.word	0xe000e100

00023904 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   23904:	4b08      	ldr	r3, [pc, #32]	; (23928 <z_impl_k_thread_abort+0x24>)
   23906:	689b      	ldr	r3, [r3, #8]
   23908:	4283      	cmp	r3, r0
   2390a:	d10b      	bne.n	23924 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2390c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   23910:	b143      	cbz	r3, 23924 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   23912:	4b06      	ldr	r3, [pc, #24]	; (2392c <z_impl_k_thread_abort+0x28>)
   23914:	685a      	ldr	r2, [r3, #4]
   23916:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2391a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   2391c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2391e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   23922:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   23924:	f015 b9b6 	b.w	38c94 <z_thread_abort>
   23928:	2001a518 	.word	0x2001a518
   2392c:	e000ed00 	.word	0xe000ed00

00023930 <arch_timing_init>:
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   23930:	4a0e      	ldr	r2, [pc, #56]	; (2396c <arch_timing_init+0x3c>)
	return dwt_frequency;
#endif /* CONFIG_SOC_FAMILY_NRF */
}

void arch_timing_init(void)
{
   23932:	b508      	push	{r3, lr}
   23934:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   23938:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2393c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 * @return 0
 */
static inline int z_arm_dwt_init_cycle_counter(void)
{
	/* Clear and enable the cycle counter */
	DWT->CYCCNT = 0;
   23940:	2200      	movs	r2, #0
   23942:	4b0b      	ldr	r3, [pc, #44]	; (23970 <arch_timing_init+0x40>)
   23944:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   23946:	681a      	ldr	r2, [r3, #0]
   23948:	f042 0201 	orr.w	r2, r2, #1
   2394c:	601a      	str	r2, [r3, #0]

	/* Assert that the cycle counter is indeed implemented.
	 * The field is called NOCYCCNT. So 1 means there is no cycle counter.
	 */
	__ASSERT((DWT->CTRL & DWT_CTRL_NOCYCCNT_Msk) == 0,
   2394e:	681b      	ldr	r3, [r3, #0]
   23950:	019b      	lsls	r3, r3, #6
   23952:	d50a      	bpl.n	2396a <arch_timing_init+0x3a>
   23954:	4907      	ldr	r1, [pc, #28]	; (23974 <arch_timing_init+0x44>)
   23956:	4808      	ldr	r0, [pc, #32]	; (23978 <arch_timing_init+0x48>)
   23958:	2269      	movs	r2, #105	; 0x69
   2395a:	f019 fc14 	bl	3d186 <assert_print>
	z_arm_dwt_init();
	z_arm_dwt_init_cycle_counter();
}
   2395e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23962:	2169      	movs	r1, #105	; 0x69
   23964:	4803      	ldr	r0, [pc, #12]	; (23974 <arch_timing_init+0x44>)
   23966:	f019 bc07 	b.w	3d178 <assert_post_action>
   2396a:	bd08      	pop	{r3, pc}
   2396c:	e000ed00 	.word	0xe000ed00
   23970:	e0001000 	.word	0xe0001000
   23974:	000452ed 	.word	0x000452ed
   23978:	0004494f 	.word	0x0004494f

0002397c <arch_timing_start>:
 *
 * This routine starts the cycle counter and resets its value to zero.
 */
static inline void z_arm_dwt_cycle_count_start(void)
{
	DWT->CYCCNT = 0;
   2397c:	2200      	movs	r2, #0
   2397e:	4b03      	ldr	r3, [pc, #12]	; (2398c <arch_timing_start+0x10>)
   23980:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   23982:	681a      	ldr	r2, [r3, #0]
   23984:	f042 0201 	orr.w	r2, r2, #1
   23988:	601a      	str	r2, [r3, #0]

void arch_timing_start(void)
{
	z_arm_dwt_cycle_count_start();
}
   2398a:	4770      	bx	lr
   2398c:	e0001000 	.word	0xe0001000

00023990 <arch_timing_stop>:

void arch_timing_stop(void)
{
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
   23990:	4a02      	ldr	r2, [pc, #8]	; (2399c <arch_timing_stop+0xc>)
   23992:	6813      	ldr	r3, [r2, #0]
   23994:	f023 0301 	bic.w	r3, r3, #1
   23998:	6013      	str	r3, [r2, #0]
}
   2399a:	4770      	bx	lr
   2399c:	e0001000 	.word	0xe0001000

000239a0 <arch_timing_counter_get>:
	return DWT->CYCCNT;
   239a0:	4b01      	ldr	r3, [pc, #4]	; (239a8 <arch_timing_counter_get+0x8>)

timing_t arch_timing_counter_get(void)
{
	return (timing_t)z_arm_dwt_get_cycles();
}
   239a2:	2100      	movs	r1, #0
   239a4:	6858      	ldr	r0, [r3, #4]
   239a6:	4770      	bx	lr
   239a8:	e0001000 	.word	0xe0001000

000239ac <arch_timing_freq_get_mhz>:
{
	return arch_timing_cycles_to_ns(cycles) / count;
}

uint32_t arch_timing_freq_get_mhz(void)
{
   239ac:	b508      	push	{r3, lr}
	SystemCoreClockUpdate();
   239ae:	f00e fec9 	bl	32744 <SystemCoreClockUpdate>
	return (uint32_t)(arch_timing_freq_get() / 1000000U);
   239b2:	4904      	ldr	r1, [pc, #16]	; (239c4 <arch_timing_freq_get_mhz+0x18>)
   239b4:	2300      	movs	r3, #0
   239b6:	6808      	ldr	r0, [r1, #0]
   239b8:	4a03      	ldr	r2, [pc, #12]	; (239c8 <arch_timing_freq_get_mhz+0x1c>)
   239ba:	2100      	movs	r1, #0
   239bc:	f7f9 fa94 	bl	1cee8 <__aeabi_uldivmod>
}
   239c0:	bd08      	pop	{r3, pc}
   239c2:	bf00      	nop
   239c4:	200146fc 	.word	0x200146fc
   239c8:	000f4240 	.word	0x000f4240

000239cc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   239cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   239ce:	4c09      	ldr	r4, [pc, #36]	; (239f4 <z_arm_configure_static_mpu_regions+0x28>)
   239d0:	4a09      	ldr	r2, [pc, #36]	; (239f8 <z_arm_configure_static_mpu_regions+0x2c>)
   239d2:	4623      	mov	r3, r4
   239d4:	2101      	movs	r1, #1
   239d6:	4809      	ldr	r0, [pc, #36]	; (239fc <z_arm_configure_static_mpu_regions+0x30>)
   239d8:	f000 f92c 	bl	23c34 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   239dc:	2300      	movs	r3, #0
   239de:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   239e0:	4b07      	ldr	r3, [pc, #28]	; (23a00 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   239e2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   239e4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   239e6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   239e8:	9301      	str	r3, [sp, #4]
   239ea:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   239ec:	f000 f93e 	bl	23c6c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   239f0:	b004      	add	sp, #16
   239f2:	bd10      	pop	{r4, pc}
   239f4:	20040000 	.word	0x20040000
   239f8:	20014500 	.word	0x20014500
   239fc:	000431c4 	.word	0x000431c4
   23a00:	20015150 	.word	0x20015150

00023a04 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   23a04:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23a06:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   23a08:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23a0a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   23a0e:	f004 031f 	and.w	r3, r4, #31
   23a12:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23a14:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   23a16:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23a18:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   23a1c:	4905      	ldr	r1, [pc, #20]	; (23a34 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   23a1e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   23a22:	f043 0301 	orr.w	r3, r3, #1
   23a26:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   23a2a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   23a2e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   23a32:	bd10      	pop	{r4, pc}
   23a34:	e000ed00 	.word	0xe000ed00

00023a38 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   23a38:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   23a3a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   23a3c:	680c      	ldr	r4, [r1, #0]
{
   23a3e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   23a40:	890a      	ldrh	r2, [r1, #8]
   23a42:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   23a44:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   23a46:	3b01      	subs	r3, #1
   23a48:	f024 041f 	bic.w	r4, r4, #31
   23a4c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   23a4e:	f002 021f 	and.w	r2, r2, #31
   23a52:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   23a56:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   23a5a:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23a5c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   23a5e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   23a62:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
   23a64:	d909      	bls.n	23a7a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23a66:	4602      	mov	r2, r0
   23a68:	2145      	movs	r1, #69	; 0x45
   23a6a:	4806      	ldr	r0, [pc, #24]	; (23a84 <mpu_configure_region+0x4c>)
   23a6c:	f019 fbc5 	bl	3d1fa <z_log_minimal_printk>
   23a70:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   23a74:	4620      	mov	r0, r4
   23a76:	b005      	add	sp, #20
   23a78:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   23a7a:	4669      	mov	r1, sp
   23a7c:	f7ff ffc2 	bl	23a04 <region_init>
	return region_allocate_and_init(index,
   23a80:	e7f8      	b.n	23a74 <mpu_configure_region+0x3c>
   23a82:	bf00      	nop
   23a84:	0004532c 	.word	0x0004532c

00023a88 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   23a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a8c:	4689      	mov	r9, r1
   23a8e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   23a90:	4606      	mov	r6, r0
   23a92:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   23a96:	4d58      	ldr	r5, [pc, #352]	; (23bf8 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   23a98:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   23a9a:	45c8      	cmp	r8, r9
   23a9c:	da27      	bge.n	23aee <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
   23a9e:	f8d6 a004 	ldr.w	sl, [r6, #4]
   23aa2:	f1ba 0f00 	cmp.w	sl, #0
   23aa6:	d044      	beq.n	23b32 <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
   23aa8:	f1ba 0f1f 	cmp.w	sl, #31
   23aac:	d918      	bls.n	23ae0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
   23aae:	f01a 0f1f 	tst.w	sl, #31
   23ab2:	d115      	bne.n	23ae0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
   23ab4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   23ab8:	f01b 0f1f 	tst.w	fp, #31
   23abc:	d110      	bne.n	23ae0 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23abe:	4658      	mov	r0, fp
   23ac0:	f01a f9c9 	bl	3de56 <arm_cmse_mpu_region_get>
   23ac4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23ac6:	eb0a 000b 	add.w	r0, sl, fp
   23aca:	3801      	subs	r0, #1
   23acc:	f01a f9c3 	bl	3de56 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   23ad0:	4287      	cmp	r7, r0
   23ad2:	d010      	beq.n	23af6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
   23ad4:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   23ad8:	463a      	mov	r2, r7
   23ada:	2145      	movs	r1, #69	; 0x45
   23adc:	4847      	ldr	r0, [pc, #284]	; (23bfc <mpu_configure_regions_and_partition.constprop.0+0x174>)
   23ade:	e002      	b.n	23ae6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   23ae0:	4642      	mov	r2, r8
   23ae2:	2145      	movs	r1, #69	; 0x45
   23ae4:	4846      	ldr	r0, [pc, #280]	; (23c00 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23ae6:	f019 fb88 	bl	3d1fa <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   23aea:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   23aee:	4620      	mov	r0, r4
   23af0:	b005      	add	sp, #20
   23af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   23af6:	f117 0f16 	cmn.w	r7, #22
   23afa:	d0ed      	beq.n	23ad8 <mpu_configure_regions_and_partition.constprop.0+0x50>
   23afc:	42bc      	cmp	r4, r7
   23afe:	ddeb      	ble.n	23ad8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   23b00:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23b04:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   23b08:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23b0c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23b10:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23b14:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   23b18:	e9d6 3200 	ldrd	r3, r2, [r6]
   23b1c:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   23b1e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   23b20:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   23b24:	d11d      	bne.n	23b62 <mpu_configure_regions_and_partition.constprop.0+0xda>
   23b26:	45d3      	cmp	fp, sl
   23b28:	d107      	bne.n	23b3a <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
   23b2a:	4631      	mov	r1, r6
   23b2c:	b2f8      	uxtb	r0, r7
   23b2e:	f7ff ff83 	bl	23a38 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   23b32:	f108 0801 	add.w	r8, r8, #1
   23b36:	360c      	adds	r6, #12
   23b38:	e7af      	b.n	23a9a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   23b3a:	4631      	mov	r1, r6
	MPU->RNR = index;
   23b3c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   23b40:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   23b44:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   23b48:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   23b4c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   23b4e:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   23b52:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   23b54:	f7ff ff70 	bl	23a38 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   23b58:	f110 0f16 	cmn.w	r0, #22
   23b5c:	d0c5      	beq.n	23aea <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
   23b5e:	1c44      	adds	r4, r0, #1
   23b60:	e7e7      	b.n	23b32 <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
   23b62:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   23b64:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   23b66:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
   23b68:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   23b6c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   23b70:	d108      	bne.n	23b84 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23b72:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   23b76:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23b78:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   23b7c:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23b7e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   23b82:	e7e7      	b.n	23b54 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23b84:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
   23b88:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   23b8c:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23b8e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   23b92:	4631      	mov	r1, r6
   23b94:	f7ff ff50 	bl	23a38 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   23b98:	f110 0f16 	cmn.w	r0, #22
   23b9c:	d0a5      	beq.n	23aea <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
   23b9e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   23ba2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   23ba6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   23baa:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   23bae:	f362 0304 	bfi	r3, r2, #0, #5
   23bb2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23bb6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   23bba:	f89d 2008 	ldrb.w	r2, [sp, #8]
   23bbe:	085b      	lsrs	r3, r3, #1
   23bc0:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   23bc4:	e9d6 3100 	ldrd	r3, r1, [r6]
   23bc8:	440b      	add	r3, r1
   23bca:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   23bcc:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   23bd0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   23bd2:	445b      	add	r3, fp
   23bd4:	eba3 030a 	sub.w	r3, r3, sl
   23bd8:	b2c0      	uxtb	r0, r0
   23bda:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   23bde:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23be0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   23be4:	9303      	str	r3, [sp, #12]
   23be6:	d903      	bls.n	23bf0 <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23be8:	4602      	mov	r2, r0
   23bea:	2145      	movs	r1, #69	; 0x45
   23bec:	4805      	ldr	r0, [pc, #20]	; (23c04 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   23bee:	e77a      	b.n	23ae6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
   23bf0:	4669      	mov	r1, sp
   23bf2:	f7ff ff07 	bl	23a04 <region_init>
   23bf6:	e7b2      	b.n	23b5e <mpu_configure_regions_and_partition.constprop.0+0xd6>
   23bf8:	e000ed00 	.word	0xe000ed00
   23bfc:	0004537f 	.word	0x0004537f
   23c00:	00045357 	.word	0x00045357
   23c04:	0004532c 	.word	0x0004532c

00023c08 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   23c08:	2205      	movs	r2, #5
   23c0a:	4b04      	ldr	r3, [pc, #16]	; (23c1c <arm_core_mpu_enable+0x14>)
   23c0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   23c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23c14:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   23c18:	4770      	bx	lr
   23c1a:	bf00      	nop
   23c1c:	e000ed00 	.word	0xe000ed00

00023c20 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   23c20:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   23c24:	2200      	movs	r2, #0
   23c26:	4b02      	ldr	r3, [pc, #8]	; (23c30 <arm_core_mpu_disable+0x10>)
   23c28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   23c2c:	4770      	bx	lr
   23c2e:	bf00      	nop
   23c30:	e000ed00 	.word	0xe000ed00

00023c34 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   23c34:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   23c36:	4c0a      	ldr	r4, [pc, #40]	; (23c60 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   23c38:	7822      	ldrb	r2, [r4, #0]
   23c3a:	f7ff ff25 	bl	23a88 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   23c3e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   23c40:	3016      	adds	r0, #22
   23c42:	d10c      	bne.n	23c5e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   23c44:	4907      	ldr	r1, [pc, #28]	; (23c64 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   23c46:	4808      	ldr	r0, [pc, #32]	; (23c68 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   23c48:	f240 1211 	movw	r2, #273	; 0x111
   23c4c:	f019 fa9b 	bl	3d186 <assert_print>
			regions_num);
	}
}
   23c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   23c54:	f240 1111 	movw	r1, #273	; 0x111
   23c58:	4802      	ldr	r0, [pc, #8]	; (23c64 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   23c5a:	f019 ba8d 	b.w	3d178 <assert_post_action>
}
   23c5e:	bd10      	pop	{r4, pc}
   23c60:	2001a5bc 	.word	0x2001a5bc
   23c64:	000453a7 	.word	0x000453a7
   23c68:	0004494f 	.word	0x0004494f

00023c6c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   23c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c70:	4d30      	ldr	r5, [pc, #192]	; (23d34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   23c72:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23c74:	4606      	mov	r6, r0
   23c76:	f04f 0800 	mov.w	r8, #0
   23c7a:	46ab      	mov	fp, r5
	MPU->RNR = index;
   23c7c:	4f2e      	ldr	r7, [pc, #184]	; (23d38 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23c7e:	45d0      	cmp	r8, sl
   23c80:	db02      	blt.n	23c88 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   23c82:	b003      	add	sp, #12
   23c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   23c88:	f8d6 9004 	ldr.w	r9, [r6, #4]
   23c8c:	f1b9 0f00 	cmp.w	r9, #0
   23c90:	d04a      	beq.n	23d28 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   23c92:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23c94:	4608      	mov	r0, r1
   23c96:	9101      	str	r1, [sp, #4]
   23c98:	f01a f8dd 	bl	3de56 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23c9c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23c9e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23ca0:	eb09 0001 	add.w	r0, r9, r1
   23ca4:	3801      	subs	r0, #1
   23ca6:	f01a f8d6 	bl	3de56 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   23caa:	4284      	cmp	r4, r0
   23cac:	f04f 0214 	mov.w	r2, #20
   23cb0:	4b22      	ldr	r3, [pc, #136]	; (23d3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   23cb2:	d013      	beq.n	23cdc <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   23cb4:	f06f 0315 	mvn.w	r3, #21
   23cb8:	fb02 f808 	mul.w	r8, r2, r8
   23cbc:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   23cc0:	f240 1221 	movw	r2, #289	; 0x121
   23cc4:	491e      	ldr	r1, [pc, #120]	; (23d40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   23cc6:	481f      	ldr	r0, [pc, #124]	; (23d44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   23cc8:	f019 fa5d 	bl	3d186 <assert_print>
   23ccc:	f240 1121 	movw	r1, #289	; 0x121
   23cd0:	481b      	ldr	r0, [pc, #108]	; (23d40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
   23cd2:	b003      	add	sp, #12
   23cd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   23cd8:	f019 ba4e 	b.w	3d178 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   23cdc:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   23ce0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   23ce2:	d0ed      	beq.n	23cc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   23ce4:	7819      	ldrb	r1, [r3, #0]
   23ce6:	42a1      	cmp	r1, r4
   23ce8:	ddea      	ble.n	23cc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   23cea:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   23cee:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   23cf2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   23cf6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   23cfa:	f100 0108 	add.w	r1, r0, #8
   23cfe:	7b00      	ldrb	r0, [r0, #12]
   23d00:	f364 0004 	bfi	r0, r4, #0, #5
   23d04:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23d06:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   23d0a:	790c      	ldrb	r4, [r1, #4]
   23d0c:	0840      	lsrs	r0, r0, #1
   23d0e:	f360 1447 	bfi	r4, r0, #5, #3
   23d12:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   23d14:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   23d18:	f021 011f 	bic.w	r1, r1, #31
   23d1c:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   23d1e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   23d22:	f021 011f 	bic.w	r1, r1, #31
   23d26:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23d28:	f108 0801 	add.w	r8, r8, #1
   23d2c:	3514      	adds	r5, #20
   23d2e:	360c      	adds	r6, #12
   23d30:	e7a5      	b.n	23c7e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   23d32:	bf00      	nop
   23d34:	200191e0 	.word	0x200191e0
   23d38:	e000ed00 	.word	0xe000ed00
   23d3c:	2001a5bc 	.word	0x2001a5bc
   23d40:	000453a7 	.word	0x000453a7
   23d44:	0004494f 	.word	0x0004494f

00023d48 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   23d48:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   23d4a:	4d1d      	ldr	r5, [pc, #116]	; (23dc0 <z_arm_mpu_init+0x78>)
   23d4c:	682c      	ldr	r4, [r5, #0]
   23d4e:	2c10      	cmp	r4, #16
   23d50:	d90d      	bls.n	23d6e <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   23d52:	f44f 72a4 	mov.w	r2, #328	; 0x148
   23d56:	491b      	ldr	r1, [pc, #108]	; (23dc4 <z_arm_mpu_init+0x7c>)
   23d58:	481b      	ldr	r0, [pc, #108]	; (23dc8 <z_arm_mpu_init+0x80>)
   23d5a:	f019 fa14 	bl	3d186 <assert_print>
   23d5e:	4819      	ldr	r0, [pc, #100]	; (23dc4 <z_arm_mpu_init+0x7c>)
   23d60:	f44f 71a4 	mov.w	r1, #328	; 0x148
   23d64:	f019 fa08 	bl	3d178 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   23d68:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   23d6c:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   23d6e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   23d70:	f7ff ff56 	bl	23c20 <arm_core_mpu_disable>
	MPU->MAIR0 =
   23d74:	4b15      	ldr	r3, [pc, #84]	; (23dcc <z_arm_mpu_init+0x84>)
   23d76:	4a16      	ldr	r2, [pc, #88]	; (23dd0 <z_arm_mpu_init+0x88>)
   23d78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   23d7c:	4284      	cmp	r4, r0
   23d7e:	d117      	bne.n	23db0 <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
   23d80:	4b14      	ldr	r3, [pc, #80]	; (23dd4 <z_arm_mpu_init+0x8c>)
   23d82:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   23d84:	f7ff ff40 	bl	23c08 <arm_core_mpu_enable>
	__ASSERT(
   23d88:	4b10      	ldr	r3, [pc, #64]	; (23dcc <z_arm_mpu_init+0x84>)
   23d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   23d8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   23d92:	2b10      	cmp	r3, #16
   23d94:	d00a      	beq.n	23dac <z_arm_mpu_init+0x64>
   23d96:	490b      	ldr	r1, [pc, #44]	; (23dc4 <z_arm_mpu_init+0x7c>)
   23d98:	480b      	ldr	r0, [pc, #44]	; (23dc8 <z_arm_mpu_init+0x80>)
   23d9a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   23d9e:	f019 f9f2 	bl	3d186 <assert_print>
   23da2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   23da6:	4807      	ldr	r0, [pc, #28]	; (23dc4 <z_arm_mpu_init+0x7c>)
   23da8:	f019 f9e6 	bl	3d178 <assert_post_action>
	return 0;
   23dac:	2000      	movs	r0, #0
   23dae:	e7dd      	b.n	23d6c <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   23db0:	6869      	ldr	r1, [r5, #4]
   23db2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   23db6:	f7ff fe25 	bl	23a04 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   23dba:	3001      	adds	r0, #1
   23dbc:	e7de      	b.n	23d7c <z_arm_mpu_init+0x34>
   23dbe:	bf00      	nop
   23dc0:	000431d0 	.word	0x000431d0
   23dc4:	000453a7 	.word	0x000453a7
   23dc8:	0004494f 	.word	0x0004494f
   23dcc:	e000ed00 	.word	0xe000ed00
   23dd0:	0044ffaa 	.word	0x0044ffaa
   23dd4:	2001a5bc 	.word	0x2001a5bc

00023dd8 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   23dd8:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   23dda:	4b09      	ldr	r3, [pc, #36]	; (23e00 <malloc_prepare+0x28>)
   23ddc:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   23de0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   23de8:	d208      	bcs.n	23dfc <malloc_prepare+0x24>
   23dea:	4906      	ldr	r1, [pc, #24]	; (23e04 <malloc_prepare+0x2c>)
   23dec:	4806      	ldr	r0, [pc, #24]	; (23e08 <malloc_prepare+0x30>)
   23dee:	2281      	movs	r2, #129	; 0x81
   23df0:	f019 f9c9 	bl	3d186 <assert_print>
   23df4:	2181      	movs	r1, #129	; 0x81
   23df6:	4803      	ldr	r0, [pc, #12]	; (23e04 <malloc_prepare+0x2c>)
   23df8:	f019 f9be 	bl	3d178 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   23dfc:	2000      	movs	r0, #0
   23dfe:	bd08      	pop	{r3, pc}
   23e00:	20028c58 	.word	0x20028c58
   23e04:	000453de 	.word	0x000453de
   23e08:	0004494f 	.word	0x0004494f

00023e0c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   23e0c:	4b01      	ldr	r3, [pc, #4]	; (23e14 <__stdout_hook_install+0x8>)
   23e0e:	6018      	str	r0, [r3, #0]
}
   23e10:	4770      	bx	lr
   23e12:	bf00      	nop
   23e14:	20014620 	.word	0x20014620

00023e18 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   23e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e1a:	4606      	mov	r6, r0
   23e1c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   23e1e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   23e20:	4f06      	ldr	r7, [pc, #24]	; (23e3c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   23e22:	42ac      	cmp	r4, r5
   23e24:	da08      	bge.n	23e38 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   23e26:	683b      	ldr	r3, [r7, #0]
   23e28:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   23e2a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   23e2c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   23e2e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   23e32:	d001      	beq.n	23e38 <z_impl_zephyr_read_stdin+0x20>
   23e34:	280d      	cmp	r0, #13
   23e36:	d1f4      	bne.n	23e22 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   23e38:	4620      	mov	r0, r4
   23e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23e3c:	2001461c 	.word	0x2001461c

00023e40 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   23e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e42:	460d      	mov	r5, r1
   23e44:	4f09      	ldr	r7, [pc, #36]	; (23e6c <z_impl_zephyr_write_stdout+0x2c>)
   23e46:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   23e48:	f1c0 0401 	rsb	r4, r0, #1
   23e4c:	19a3      	adds	r3, r4, r6
   23e4e:	429d      	cmp	r5, r3
   23e50:	dc01      	bgt.n	23e56 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   23e52:	4628      	mov	r0, r5
   23e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   23e56:	7873      	ldrb	r3, [r6, #1]
   23e58:	2b0a      	cmp	r3, #10
   23e5a:	d102      	bne.n	23e62 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   23e5c:	200d      	movs	r0, #13
   23e5e:	683b      	ldr	r3, [r7, #0]
   23e60:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   23e62:	683b      	ldr	r3, [r7, #0]
   23e64:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   23e68:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   23e6a:	e7ef      	b.n	23e4c <z_impl_zephyr_write_stdout+0xc>
   23e6c:	20014620 	.word	0x20014620

00023e70 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   23e70:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   23e72:	2105      	movs	r1, #5
   23e74:	4801      	ldr	r0, [pc, #4]	; (23e7c <_exit+0xc>)
   23e76:	f7ff ffe3 	bl	23e40 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   23e7a:	e7fe      	b.n	23e7a <_exit+0xa>
   23e7c:	0004540e 	.word	0x0004540e

00023e80 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   23e80:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   23e82:	4c07      	ldr	r4, [pc, #28]	; (23ea0 <_sbrk+0x20>)
   23e84:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   23e86:	18c2      	adds	r2, r0, r3
   23e88:	4806      	ldr	r0, [pc, #24]	; (23ea4 <_sbrk+0x24>)
   23e8a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   23e8e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23e92:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   23e94:	bf2e      	itee	cs
   23e96:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   23e9a:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   23e9c:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   23e9e:	bd10      	pop	{r4, pc}
   23ea0:	200191f4 	.word	0x200191f4
   23ea4:	20028c58 	.word	0x20028c58

00023ea8 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   23ea8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23eaa:	4604      	mov	r4, r0
   23eac:	b950      	cbnz	r0, 23ec4 <__retarget_lock_init_recursive+0x1c>
   23eae:	4910      	ldr	r1, [pc, #64]	; (23ef0 <__retarget_lock_init_recursive+0x48>)
   23eb0:	4810      	ldr	r0, [pc, #64]	; (23ef4 <__retarget_lock_init_recursive+0x4c>)
   23eb2:	f240 1277 	movw	r2, #375	; 0x177
   23eb6:	f019 f966 	bl	3d186 <assert_print>
   23eba:	f240 1177 	movw	r1, #375	; 0x177
   23ebe:	480c      	ldr	r0, [pc, #48]	; (23ef0 <__retarget_lock_init_recursive+0x48>)
   23ec0:	f019 f95a 	bl	3d178 <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   23ec4:	2014      	movs	r0, #20
   23ec6:	f016 f985 	bl	3a1d4 <malloc>
   23eca:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   23ecc:	b950      	cbnz	r0, 23ee4 <__retarget_lock_init_recursive+0x3c>
   23ece:	4908      	ldr	r1, [pc, #32]	; (23ef0 <__retarget_lock_init_recursive+0x48>)
   23ed0:	4808      	ldr	r0, [pc, #32]	; (23ef4 <__retarget_lock_init_recursive+0x4c>)
   23ed2:	f240 127f 	movw	r2, #383	; 0x17f
   23ed6:	f019 f956 	bl	3d186 <assert_print>
   23eda:	f240 117f 	movw	r1, #383	; 0x17f
   23ede:	4804      	ldr	r0, [pc, #16]	; (23ef0 <__retarget_lock_init_recursive+0x48>)
   23ee0:	f019 f94a 	bl	3d178 <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
   23ee4:	6820      	ldr	r0, [r4, #0]
}
   23ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   23eea:	f01d bbef 	b.w	416cc <z_impl_k_mutex_init>
   23eee:	bf00      	nop
   23ef0:	000453de 	.word	0x000453de
   23ef4:	0004494f 	.word	0x0004494f

00023ef8 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   23ef8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23efa:	4604      	mov	r4, r0
   23efc:	b950      	cbnz	r0, 23f14 <__retarget_lock_acquire_recursive+0x1c>
   23efe:	490a      	ldr	r1, [pc, #40]	; (23f28 <__retarget_lock_acquire_recursive+0x30>)
   23f00:	480a      	ldr	r0, [pc, #40]	; (23f2c <__retarget_lock_acquire_recursive+0x34>)
   23f02:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   23f06:	f019 f93e 	bl	3d186 <assert_print>
   23f0a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   23f0e:	4806      	ldr	r0, [pc, #24]	; (23f28 <__retarget_lock_acquire_recursive+0x30>)
   23f10:	f019 f932 	bl	3d178 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   23f14:	f04f 32ff 	mov.w	r2, #4294967295
   23f18:	4620      	mov	r0, r4
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   23f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23f1e:	f04f 33ff 	mov.w	r3, #4294967295
   23f22:	f012 bfe3 	b.w	36eec <z_impl_k_mutex_lock>
   23f26:	bf00      	nop
   23f28:	000453de 	.word	0x000453de
   23f2c:	0004494f 	.word	0x0004494f

00023f30 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   23f30:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23f32:	4604      	mov	r4, r0
   23f34:	b950      	cbnz	r0, 23f4c <__retarget_lock_release_recursive+0x1c>
   23f36:	4908      	ldr	r1, [pc, #32]	; (23f58 <__retarget_lock_release_recursive+0x28>)
   23f38:	4808      	ldr	r0, [pc, #32]	; (23f5c <__retarget_lock_release_recursive+0x2c>)
   23f3a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   23f3e:	f019 f922 	bl	3d186 <assert_print>
   23f42:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   23f46:	4804      	ldr	r0, [pc, #16]	; (23f58 <__retarget_lock_release_recursive+0x28>)
   23f48:	f019 f916 	bl	3d178 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   23f4c:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   23f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23f52:	f013 b89d 	b.w	37090 <z_impl_k_mutex_unlock>
   23f56:	bf00      	nop
   23f58:	000453de 	.word	0x000453de
   23f5c:	0004494f 	.word	0x0004494f

00023f60 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   23f60:	b508      	push	{r3, lr}
   23f62:	211d      	movs	r1, #29
   23f64:	4804      	ldr	r0, [pc, #16]	; (23f78 <__chk_fail+0x18>)
   23f66:	f7ff ff6b 	bl	23e40 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   23f6a:	4040      	eors	r0, r0
   23f6c:	f380 8811 	msr	BASEPRI, r0
   23f70:	f04f 0003 	mov.w	r0, #3
   23f74:	df02      	svc	2
	CODE_UNREACHABLE;
   23f76:	bf00      	nop
   23f78:	00045414 	.word	0x00045414

00023f7c <z_impl_clock_gettime>:
	switch (clock_id) {
   23f7c:	2801      	cmp	r0, #1
{
   23f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f82:	460f      	mov	r7, r1
	switch (clock_id) {
   23f84:	d009      	beq.n	23f9a <z_impl_clock_gettime+0x1e>
   23f86:	2804      	cmp	r0, #4
   23f88:	d06b      	beq.n	24062 <z_impl_clock_gettime+0xe6>
		errno = EINVAL;
   23f8a:	f019 ff8e 	bl	3deaa <__errno>
   23f8e:	2316      	movs	r3, #22
   23f90:	6003      	str	r3, [r0, #0]
		return -1;
   23f92:	f04f 30ff 	mov.w	r0, #4294967295
}
   23f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   23f9a:	f04f 0320 	mov.w	r3, #32
   23f9e:	f3ef 8411 	mrs	r4, BASEPRI
   23fa2:	f383 8812 	msr	BASEPRI_MAX, r3
   23fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23faa:	4830      	ldr	r0, [pc, #192]	; (2406c <z_impl_clock_gettime+0xf0>)
   23fac:	f012 fe24 	bl	36bf8 <z_spin_lock_valid>
   23fb0:	b940      	cbnz	r0, 23fc4 <z_impl_clock_gettime+0x48>
   23fb2:	492f      	ldr	r1, [pc, #188]	; (24070 <z_impl_clock_gettime+0xf4>)
   23fb4:	482f      	ldr	r0, [pc, #188]	; (24074 <z_impl_clock_gettime+0xf8>)
   23fb6:	228e      	movs	r2, #142	; 0x8e
   23fb8:	f019 f8e5 	bl	3d186 <assert_print>
   23fbc:	218e      	movs	r1, #142	; 0x8e
   23fbe:	482c      	ldr	r0, [pc, #176]	; (24070 <z_impl_clock_gettime+0xf4>)
   23fc0:	f019 f8da 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   23fc4:	4829      	ldr	r0, [pc, #164]	; (2406c <z_impl_clock_gettime+0xf0>)
   23fc6:	f012 fe35 	bl	36c34 <z_spin_lock_set_owner>
		base = rt_clock_base;
   23fca:	4b2b      	ldr	r3, [pc, #172]	; (24078 <z_impl_clock_gettime+0xfc>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fcc:	4827      	ldr	r0, [pc, #156]	; (2406c <z_impl_clock_gettime+0xf0>)
   23fce:	689d      	ldr	r5, [r3, #8]
   23fd0:	e9d3 6800 	ldrd	r6, r8, [r3]
   23fd4:	f012 fe1e 	bl	36c14 <z_spin_unlock_valid>
   23fd8:	b940      	cbnz	r0, 23fec <z_impl_clock_gettime+0x70>
   23fda:	4925      	ldr	r1, [pc, #148]	; (24070 <z_impl_clock_gettime+0xf4>)
   23fdc:	4825      	ldr	r0, [pc, #148]	; (24074 <z_impl_clock_gettime+0xf8>)
   23fde:	22b9      	movs	r2, #185	; 0xb9
   23fe0:	f019 f8d1 	bl	3d186 <assert_print>
   23fe4:	21b9      	movs	r1, #185	; 0xb9
   23fe6:	4822      	ldr	r0, [pc, #136]	; (24070 <z_impl_clock_gettime+0xf4>)
   23fe8:	f019 f8c6 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   23fec:	f384 8811 	msr	BASEPRI, r4
   23ff0:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   23ff4:	f01d fc24 	bl	41840 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   23ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint64_t ticks = k_uptime_ticks();
   23ffc:	4604      	mov	r4, r0
   23ffe:	fba0 0302 	umull	r0, r3, r0, r2
   24002:	fb02 3101 	mla	r1, r2, r1, r3
   24006:	0bc0      	lsrs	r0, r0, #15
	uint64_t elapsed_secs = k_ticks_to_ms_floor64(ticks) / MSEC_PER_SEC;
   24008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2400c:	2300      	movs	r3, #0
   2400e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   24012:	0bc9      	lsrs	r1, r1, #15
   24014:	f7f8 ff68 	bl	1cee8 <__aeabi_uldivmod>
   24018:	f04f 7cfa 	mov.w	ip, #32768000	; 0x1f40000
	ts->tv_sec += base.tv_sec;
   2401c:	1986      	adds	r6, r0, r6
   2401e:	fba0 0e0c 	umull	r0, lr, r0, ip
   24022:	eb48 0801 	adc.w	r8, r8, r1
   24026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2402a:	2300      	movs	r3, #0
   2402c:	fb0c e101 	mla	r1, ip, r1, lr
   24030:	e9c7 6800 	strd	r6, r8, [r7]
   24034:	f7f8 ff58 	bl	1cee8 <__aeabi_uldivmod>
			return (uint32_t)((t * to_hz + off) / from_hz);
   24038:	4910      	ldr	r1, [pc, #64]	; (2407c <z_impl_clock_gettime+0x100>)
	uint64_t nremainder = ticks - k_ms_to_ticks_floor64(MSEC_PER_SEC * elapsed_secs);
   2403a:	1a20      	subs	r0, r4, r0
   2403c:	fba0 3001 	umull	r3, r0, r0, r1
   24040:	0bdb      	lsrs	r3, r3, #15
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   24042:	4a0f      	ldr	r2, [pc, #60]	; (24080 <z_impl_clock_gettime+0x104>)
   24044:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	ts->tv_nsec += base.tv_nsec;
   24048:	442b      	add	r3, r5
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   2404a:	4293      	cmp	r3, r2
	ts->tv_nsec += base.tv_nsec;
   2404c:	60bb      	str	r3, [r7, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   2404e:	d906      	bls.n	2405e <z_impl_clock_gettime+0xe2>
		ts->tv_sec++;
   24050:	3601      	adds	r6, #1
   24052:	f148 0200 	adc.w	r2, r8, #0
   24056:	e9c7 6200 	strd	r6, r2, [r7]
		ts->tv_nsec -= NSEC_PER_SEC;
   2405a:	1a5b      	subs	r3, r3, r1
   2405c:	60bb      	str	r3, [r7, #8]
	return 0;
   2405e:	2000      	movs	r0, #0
   24060:	e799      	b.n	23f96 <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   24062:	2500      	movs	r5, #0
   24064:	462e      	mov	r6, r5
   24066:	46a8      	mov	r8, r5
   24068:	e7c4      	b.n	23ff4 <z_impl_clock_gettime+0x78>
   2406a:	bf00      	nop
   2406c:	200191f8 	.word	0x200191f8
   24070:	00044989 	.word	0x00044989
   24074:	0004494f 	.word	0x0004494f
   24078:	200153d0 	.word	0x200153d0
   2407c:	3b9aca00 	.word	0x3b9aca00
   24080:	3b9ac9ff 	.word	0x3b9ac9ff

00024084 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   24084:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   24086:	4604      	mov	r4, r0
   24088:	b950      	cbnz	r0, 240a0 <net_if_flag_set.constprop.0+0x1c>
   2408a:	490b      	ldr	r1, [pc, #44]	; (240b8 <net_if_flag_set.constprop.0+0x34>)
   2408c:	480b      	ldr	r0, [pc, #44]	; (240bc <net_if_flag_set.constprop.0+0x38>)
   2408e:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   24092:	f019 f878 	bl	3d186 <assert_print>
   24096:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   2409a:	4807      	ldr	r0, [pc, #28]	; (240b8 <net_if_flag_set.constprop.0+0x34>)
   2409c:	f019 f86c 	bl	3d178 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   240a0:	6823      	ldr	r3, [r4, #0]
   240a2:	330c      	adds	r3, #12
   240a4:	e8d3 2fef 	ldaex	r2, [r3]
   240a8:	f042 0201 	orr.w	r2, r2, #1
   240ac:	e8c3 2fe1 	stlex	r1, r2, [r3]
   240b0:	2900      	cmp	r1, #0
   240b2:	d1f7      	bne.n	240a4 <net_if_flag_set.constprop.0+0x20>

	atomic_set_bit(iface->if_dev->flags, value);
}
   240b4:	bd10      	pop	{r4, pc}
   240b6:	bf00      	nop
   240b8:	00045449 	.word	0x00045449
   240bc:	0004494f 	.word	0x0004494f

000240c0 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   240c0:	4602      	mov	r2, r0
   240c2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   240c4:	4801      	ldr	r0, [pc, #4]	; (240cc <k_mutex_lock.constprop.0.isra.0+0xc>)
   240c6:	f012 bf11 	b.w	36eec <z_impl_k_mutex_lock>
   240ca:	bf00      	nop
   240cc:	20014f54 	.word	0x20014f54

000240d0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   240d0:	4801      	ldr	r0, [pc, #4]	; (240d8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   240d2:	f012 bfdd 	b.w	37090 <z_impl_k_mutex_unlock>
   240d6:	bf00      	nop
   240d8:	20014f54 	.word	0x20014f54

000240dc <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   240dc:	b538      	push	{r3, r4, r5, lr}
   240de:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   240e0:	f04f 31ff 	mov.w	r1, #4294967295
   240e4:	f04f 30ff 	mov.w	r0, #4294967295
   240e8:	f7ff ffea 	bl	240c0 <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   240ec:	2100      	movs	r1, #0
   240ee:	4628      	mov	r0, r5
   240f0:	f019 ff10 	bl	3df14 <net_if_flag_is_set>
   240f4:	4604      	mov	r4, r0
   240f6:	bb48      	cbnz	r0, 2414c <net_if_up+0x70>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   240f8:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   240fa:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   240fc:	7e9b      	ldrb	r3, [r3, #26]
   240fe:	b12b      	cbz	r3, 2410c <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   24100:	f7ff ffc0 	bl	24084 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   24104:	f7ff ffe4 	bl	240d0 <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
   24108:	4620      	mov	r0, r4
   2410a:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2410c:	f019 fefd 	bl	3df0a <net_if_l2>
   24110:	4604      	mov	r4, r0
   24112:	b130      	cbz	r0, 24122 <net_if_up+0x46>
   24114:	6884      	ldr	r4, [r0, #8]
   24116:	b124      	cbz	r4, 24122 <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   24118:	2101      	movs	r1, #1
   2411a:	4628      	mov	r0, r5
   2411c:	47a0      	blx	r4
	if (status < 0) {
   2411e:	1e04      	subs	r4, r0, #0
   24120:	dbf0      	blt.n	24104 <net_if_up+0x28>
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   24122:	682b      	ldr	r3, [r5, #0]
   24124:	691b      	ldr	r3, [r3, #16]
   24126:	b953      	cbnz	r3, 2413e <net_if_up+0x62>
   24128:	490a      	ldr	r1, [pc, #40]	; (24154 <net_if_up+0x78>)
   2412a:	480b      	ldr	r0, [pc, #44]	; (24158 <net_if_up+0x7c>)
   2412c:	f640 72d5 	movw	r2, #4053	; 0xfd5
   24130:	f019 f829 	bl	3d186 <assert_print>
   24134:	f640 71d5 	movw	r1, #4053	; 0xfd5
   24138:	4806      	ldr	r0, [pc, #24]	; (24154 <net_if_up+0x78>)
   2413a:	f019 f81d 	bl	3d178 <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   2413e:	4628      	mov	r0, r5
   24140:	f7ff ffa0 	bl	24084 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   24144:	4628      	mov	r0, r5
   24146:	f019 feef 	bl	3df28 <l2_flags_get.isra.0>
notify:
   2414a:	e7db      	b.n	24104 <net_if_up+0x28>
		status = -EALREADY;
   2414c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   24150:	e7d8      	b.n	24104 <net_if_up+0x28>
   24152:	bf00      	nop
   24154:	00045478 	.word	0x00045478
   24158:	0004494f 	.word	0x0004494f

0002415c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   2415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   2415e:	f04f 30ff 	mov.w	r0, #4294967295
   24162:	f04f 31ff 	mov.w	r1, #4294967295
   24166:	f7ff ffab 	bl	240c0 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   2416a:	4c11      	ldr	r4, [pc, #68]	; (241b0 <net_if_init+0x54>)
   2416c:	4d11      	ldr	r5, [pc, #68]	; (241b4 <net_if_init+0x58>)
   2416e:	4f12      	ldr	r7, [pc, #72]	; (241b8 <net_if_init+0x5c>)
   24170:	42ac      	cmp	r4, r5
   24172:	4626      	mov	r6, r4
   24174:	d90a      	bls.n	2418c <net_if_init+0x30>
   24176:	4639      	mov	r1, r7
   24178:	4810      	ldr	r0, [pc, #64]	; (241bc <net_if_init+0x60>)
   2417a:	f241 02f0 	movw	r2, #4336	; 0x10f0
   2417e:	f019 f802 	bl	3d186 <assert_print>
   24182:	f241 01f0 	movw	r1, #4336	; 0x10f0
   24186:	4638      	mov	r0, r7
   24188:	f018 fff6 	bl	3d178 <assert_post_action>
   2418c:	42ac      	cmp	r4, r5
   2418e:	d303      	bcc.n	24198 <net_if_init+0x3c>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   24190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   24194:	f7ff bf9c 	b.w	240d0 <k_mutex_unlock.constprop.0.isra.0>
	return iface->if_dev->dev;
   24198:	6833      	ldr	r3, [r6, #0]
   2419a:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   2419c:	681b      	ldr	r3, [r3, #0]
   2419e:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   241a0:	2b00      	cmp	r3, #0
   241a2:	d0e5      	beq.n	24170 <net_if_init+0x14>
   241a4:	681b      	ldr	r3, [r3, #0]
   241a6:	2b00      	cmp	r3, #0
   241a8:	d0e2      	beq.n	24170 <net_if_init+0x14>
	api->init(iface);
   241aa:	4630      	mov	r0, r6
   241ac:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   241ae:	e7df      	b.n	24170 <net_if_init+0x14>
   241b0:	2001512c 	.word	0x2001512c
   241b4:	20015130 	.word	0x20015130
   241b8:	00045478 	.word	0x00045478
   241bc:	0004494f 	.word	0x0004494f

000241c0 <net_if_post_init>:

void net_if_post_init(void)
{
   241c0:	b570      	push	{r4, r5, r6, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   241c2:	4c0e      	ldr	r4, [pc, #56]	; (241fc <net_if_post_init+0x3c>)
   241c4:	4d0e      	ldr	r5, [pc, #56]	; (24200 <net_if_post_init+0x40>)
   241c6:	4e0f      	ldr	r6, [pc, #60]	; (24204 <net_if_post_init+0x44>)
   241c8:	42ac      	cmp	r4, r5
   241ca:	d90a      	bls.n	241e2 <net_if_post_init+0x22>
   241cc:	4631      	mov	r1, r6
   241ce:	480e      	ldr	r0, [pc, #56]	; (24208 <net_if_post_init+0x48>)
   241d0:	f241 1222 	movw	r2, #4386	; 0x1122
   241d4:	f018 ffd7 	bl	3d186 <assert_print>
   241d8:	f241 1122 	movw	r1, #4386	; 0x1122
   241dc:	4630      	mov	r0, r6
   241de:	f018 ffcb 	bl	3d178 <assert_post_action>
   241e2:	42ac      	cmp	r4, r5
   241e4:	d300      	bcc.n	241e8 <net_if_post_init+0x28>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   241e6:	bd70      	pop	{r4, r5, r6, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   241e8:	2103      	movs	r1, #3
   241ea:	4620      	mov	r0, r4
   241ec:	f019 fe92 	bl	3df14 <net_if_flag_is_set>
   241f0:	b910      	cbnz	r0, 241f8 <net_if_post_init+0x38>
			net_if_up(iface);
   241f2:	4620      	mov	r0, r4
   241f4:	f7ff ff72 	bl	240dc <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   241f8:	3404      	adds	r4, #4
   241fa:	e7e5      	b.n	241c8 <net_if_post_init+0x8>
   241fc:	2001512c 	.word	0x2001512c
   24200:	20015130 	.word	0x20015130
   24204:	00045478 	.word	0x00045478
   24208:	0004494f 	.word	0x0004494f

0002420c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   2420c:	2300      	movs	r3, #0
{
   2420e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   24212:	2802      	cmp	r0, #2
{
   24214:	b089      	sub	sp, #36	; 0x24
   24216:	4607      	mov	r7, r0
   24218:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   2421a:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   2421e:	9103      	str	r1, [sp, #12]
	if (family == AF_INET6) {
   24220:	d13e      	bne.n	242a0 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   24222:	a806      	add	r0, sp, #24
   24224:	9105      	str	r1, [sp, #20]
   24226:	4601      	mov	r1, r0
{
   24228:	461a      	mov	r2, r3
   2422a:	e006      	b.n	2423a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   2422c:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   2422e:	3201      	adds	r2, #1
				zeros[i]++;
   24230:	3401      	adds	r4, #1
   24232:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   24234:	b2d4      	uxtb	r4, r2
   24236:	2c07      	cmp	r4, #7
   24238:	d804      	bhi.n	24244 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   2423a:	9c03      	ldr	r4, [sp, #12]
   2423c:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   24240:	2c00      	cmp	r4, #0
   24242:	d0f3      	beq.n	2422c <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   24244:	3301      	adds	r3, #1
   24246:	2b08      	cmp	r3, #8
   24248:	f101 0101 	add.w	r1, r1, #1
   2424c:	d1ec      	bne.n	24228 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   2424e:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   24252:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   24256:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   24258:	f810 2b01 	ldrb.w	r2, [r0], #1
   2425c:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   2425e:	bf88      	it	hi
   24260:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   24264:	f103 0301 	add.w	r3, r3, #1
   24268:	b2db      	uxtb	r3, r3
				pos = i;
   2426a:	bf88      	it	hi
   2426c:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   2426e:	2b08      	cmp	r3, #8
   24270:	d1f2      	bne.n	24258 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   24272:	469b      	mov	fp, r3
   24274:	f1b9 0f01 	cmp.w	r9, #1
   24278:	f04f 033a 	mov.w	r3, #58	; 0x3a
   2427c:	bf08      	it	eq
   2427e:	f04f 38ff 	moveq.w	r8, #4294967295
   24282:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   24284:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   24286:	4634      	mov	r4, r6
   24288:	460d      	mov	r5, r1
   2428a:	455d      	cmp	r5, fp
   2428c:	db17      	blt.n	242be <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   2428e:	42b4      	cmp	r4, r6
   24290:	d008      	beq.n	242a4 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   24292:	2300      	movs	r3, #0
   24294:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   24296:	bf0c      	ite	eq
   24298:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   2429c:	7023      	strbne	r3, [r4, #0]
   2429e:	e002      	b.n	242a6 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   242a0:	2801      	cmp	r0, #1
   242a2:	d004      	beq.n	242ae <z_impl_net_addr_ntop+0xa2>
		return NULL;
   242a4:	2600      	movs	r6, #0
	}

	return dst;
}
   242a6:	4630      	mov	r0, r6
   242a8:	b009      	add	sp, #36	; 0x24
   242aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   242ae:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   242b0:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   242b4:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   242b8:	4681      	mov	r9, r0
		delim = '.';
   242ba:	9302      	str	r3, [sp, #8]
   242bc:	e7e2      	b.n	24284 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   242be:	f1bb 0f04 	cmp.w	fp, #4
   242c2:	d135      	bne.n	24330 <z_impl_net_addr_ntop+0x124>
			value = (uint32_t)addr->s4_addr[i];
   242c4:	9b03      	ldr	r3, [sp, #12]
   242c6:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   242c8:	b94a      	cbnz	r2, 242de <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   242ca:	2330      	movs	r3, #48	; 0x30
   242cc:	4620      	mov	r0, r4
   242ce:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   242d2:	9b02      	ldr	r3, [sp, #8]
   242d4:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   242d6:	3501      	adds	r5, #1
   242d8:	4604      	mov	r4, r0
   242da:	b2ed      	uxtb	r5, r5
   242dc:	e7d5      	b.n	2428a <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   242de:	4623      	mov	r3, r4
   242e0:	2009      	movs	r0, #9
   242e2:	f04f 0a00 	mov.w	sl, #0
   242e6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 243c4 <z_impl_net_addr_ntop+0x1b8>
   242ea:	9201      	str	r2, [sp, #4]
		temp = value / divisor;
   242ec:	9a01      	ldr	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   242ee:	4582      	cmp	sl, r0
		temp = value / divisor;
   242f0:	fbb2 fefc 	udiv	lr, r2, ip
		value = value % divisor;
   242f4:	9204      	str	r2, [sp, #16]
   242f6:	fb0c 221e 	mls	r2, ip, lr, r2
   242fa:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   242fc:	dc02      	bgt.n	24304 <z_impl_net_addr_ntop+0xf8>
   242fe:	9a04      	ldr	r2, [sp, #16]
   24300:	4562      	cmp	r2, ip
   24302:	d304      	bcc.n	2430e <z_impl_net_addr_ntop+0x102>
			*buf++ = (char) (temp + '0');
   24304:	4682      	mov	sl, r0
   24306:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   2430a:	f803 eb01 	strb.w	lr, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   2430e:	220a      	movs	r2, #10
   24310:	3801      	subs	r0, #1
   24312:	fbbc fcf2 	udiv	ip, ip, r2
   24316:	1c42      	adds	r2, r0, #1
   24318:	d1e8      	bne.n	242ec <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   2431a:	f04f 0200 	mov.w	r2, #0
   2431e:	701a      	strb	r2, [r3, #0]
	return buf - start;
   24320:	1b1b      	subs	r3, r3, r4
			ptr += l;
   24322:	b2da      	uxtb	r2, r3
   24324:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   24328:	1c58      	adds	r0, r3, #1
   2432a:	9b02      	ldr	r3, [sp, #8]
   2432c:	54a3      	strb	r3, [r4, r2]
			continue;
   2432e:	e7d2      	b.n	242d6 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   24330:	45a8      	cmp	r8, r5
   24332:	d110      	bne.n	24356 <z_impl_net_addr_ntop+0x14a>
			if (needcolon || i == 0U) {
   24334:	b911      	cbnz	r1, 2433c <z_impl_net_addr_ntop+0x130>
   24336:	f1b8 0f00 	cmp.w	r8, #0
   2433a:	d102      	bne.n	24342 <z_impl_net_addr_ntop+0x136>
				*ptr++ = ':';
   2433c:	233a      	movs	r3, #58	; 0x3a
   2433e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   24342:	233a      	movs	r3, #58	; 0x3a
   24344:	4620      	mov	r0, r4
   24346:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   2434a:	f109 33ff 	add.w	r3, r9, #4294967295
   2434e:	441d      	add	r5, r3
			needcolon = false;
   24350:	2100      	movs	r1, #0
			i += longest - 1U;
   24352:	b2ed      	uxtb	r5, r5
			continue;
   24354:	e7bf      	b.n	242d6 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   24356:	b111      	cbz	r1, 2435e <z_impl_net_addr_ntop+0x152>
			*ptr++ = ':';
   24358:	233a      	movs	r3, #58	; 0x3a
   2435a:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   2435e:	9b05      	ldr	r3, [sp, #20]
   24360:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
   24364:	ba52      	rev16	r2, r2
		if (bh) {
   24366:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   2436a:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   2436e:	fa5f fa82 	uxtb.w	sl, r2
		if (bh) {
   24372:	d015      	beq.n	243a0 <z_impl_net_addr_ntop+0x194>
			if (bh > 0x0f) {
   24374:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   24376:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   24378:	d90b      	bls.n	24392 <z_impl_net_addr_ntop+0x186>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   2437a:	2300      	movs	r3, #0
   2437c:	2261      	movs	r2, #97	; 0x61
   2437e:	4620      	mov	r0, r4
   24380:	f019 fdde 	bl	3df40 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   24384:	2301      	movs	r3, #1
   24386:	2261      	movs	r2, #97	; 0x61
   24388:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   2438a:	f019 fdd9 	bl	3df40 <net_byte_to_hex>
		needcolon = true;
   2438e:	2101      	movs	r1, #1
   24390:	e7a1      	b.n	242d6 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   24392:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   24394:	bf94      	ite	ls
   24396:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   24398:	3157      	addhi	r1, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   2439a:	1c60      	adds	r0, r4, #1
					*ptr++ = (char) (bh - 10 + 'a');
   2439c:	7021      	strb	r1, [r4, #0]
   2439e:	e7f1      	b.n	24384 <z_impl_net_addr_ntop+0x178>
		} else if (bl > 0x0f) {
   243a0:	f1ba 0f0f 	cmp.w	sl, #15
   243a4:	d903      	bls.n	243ae <z_impl_net_addr_ntop+0x1a2>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   243a6:	2261      	movs	r2, #97	; 0x61
   243a8:	4651      	mov	r1, sl
   243aa:	4620      	mov	r0, r4
   243ac:	e7ed      	b.n	2438a <z_impl_net_addr_ntop+0x17e>
			if (bl < 10) {
   243ae:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   243b2:	bf94      	ite	ls
   243b4:	f10a 0a30 	addls.w	sl, sl, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   243b8:	f10a 0a57 	addhi.w	sl, sl, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   243bc:	1c60      	adds	r0, r4, #1
				*ptr++ = (char) (bl - 10 + 'a');
   243be:	f884 a000 	strb.w	sl, [r4]
   243c2:	e7e4      	b.n	2438e <z_impl_net_addr_ntop+0x182>
   243c4:	3b9aca00 	.word	0x3b9aca00

000243c8 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   243c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   243cc:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   243ce:	f890 5084 	ldrb.w	r5, [r0, #132]	; 0x84
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   243d2:	4b3b      	ldr	r3, [pc, #236]	; (244c0 <connect_request_encode+0xf8>)
   243d4:	4a3b      	ldr	r2, [pc, #236]	; (244c4 <connect_request_encode+0xfc>)
{
   243d6:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   243d8:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   243dc:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   243de:	2804      	cmp	r0, #4
   243e0:	bf0c      	ite	eq
   243e2:	4610      	moveq	r0, r2
   243e4:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   243e6:	600f      	str	r7, [r1, #0]
{
   243e8:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   243ea:	f019 ff4c 	bl	3e286 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   243ee:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   243f2:	4603      	mov	r3, r0
   243f4:	b938      	cbnz	r0, 24406 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   243f6:	e9d4 2000 	ldrd	r2, r0, [r4]
   243fa:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   243fc:	f896 1082 	ldrb.w	r1, [r6, #130]	; 0x82
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   24400:	d104      	bne.n	2440c <connect_request_encode+0x44>
		return -ENOMEM;
   24402:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   24406:	4618      	mov	r0, r3
   24408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   2440c:	1c50      	adds	r0, r2, #1
   2440e:	6020      	str	r0, [r4, #0]
   24410:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   24412:	e9d4 8200 	ldrd	r8, r2, [r4]
   24416:	4590      	cmp	r8, r2
   24418:	d0f3      	beq.n	24402 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   2441a:	f108 0201 	add.w	r2, r8, #1
   2441e:	6022      	str	r2, [r4, #0]
   24420:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   24424:	4621      	mov	r1, r4
   24426:	f8b6 0080 	ldrh.w	r0, [r6, #128]	; 0x80
   2442a:	f019 ff1a 	bl	3e262 <pack_uint16>
	if (err_code != 0) {
   2442e:	4603      	mov	r3, r0
   24430:	2800      	cmp	r0, #0
   24432:	d1e8      	bne.n	24406 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   24434:	f106 0050 	add.w	r0, r6, #80	; 0x50
   24438:	f019 ff25 	bl	3e286 <pack_utf8_str>
	if (err_code != 0) {
   2443c:	4603      	mov	r3, r0
   2443e:	2800      	cmp	r0, #0
   24440:	d1e1      	bne.n	24406 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   24442:	6e70      	ldr	r0, [r6, #100]	; 0x64
	uint8_t connect_flags = client->clean_session << 1;
   24444:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   24446:	b1d8      	cbz	r0, 24480 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   24448:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   2444c:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   24450:	f003 0301 	and.w	r3, r3, #1
   24454:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   24458:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   2445a:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   2445c:	00db      	lsls	r3, r3, #3
   2445e:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   24462:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   24464:	f019 ff0f 	bl	3e286 <pack_utf8_str>
		if (err_code != 0) {
   24468:	4603      	mov	r3, r0
   2446a:	2800      	cmp	r0, #0
   2446c:	d1cb      	bne.n	24406 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   2446e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
			err_code = pack_utf8_str(client->will_message, buf);
   24470:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   24472:	b313      	cbz	r3, 244ba <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   24474:	4618      	mov	r0, r3
   24476:	f019 ff06 	bl	3e286 <pack_utf8_str>
			if (err_code != 0) {
   2447a:	4603      	mov	r3, r0
   2447c:	2800      	cmp	r0, #0
   2447e:	d1c2      	bne.n	24406 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   24480:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   24482:	b138      	cbz	r0, 24494 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   24484:	4621      	mov	r1, r4
   24486:	f019 fefe 	bl	3e286 <pack_utf8_str>
		if (err_code != 0) {
   2448a:	4603      	mov	r3, r0
   2448c:	2800      	cmp	r0, #0
   2448e:	d1ba      	bne.n	24406 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   24490:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   24494:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24496:	b138      	cbz	r0, 244a8 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   24498:	4621      	mov	r1, r4
   2449a:	f019 fef4 	bl	3e286 <pack_utf8_str>
		if (err_code != 0) {
   2449e:	4603      	mov	r3, r0
   244a0:	2800      	cmp	r0, #0
   244a2:	d1b0      	bne.n	24406 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   244a4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   244a8:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   244ac:	4622      	mov	r2, r4
   244ae:	4639      	mov	r1, r7
}
   244b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   244b4:	2010      	movs	r0, #16
   244b6:	f019 bf01 	b.w	3e2bc <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   244ba:	f019 fed2 	bl	3e262 <pack_uint16>
   244be:	e7dc      	b.n	2447a <connect_request_encode+0xb2>
   244c0:	000431f8 	.word	0x000431f8
   244c4:	00043200 	.word	0x00043200

000244c8 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   244c8:	e9d0 2300 	ldrd	r2, r3, [r0]
   244cc:	1a9b      	subs	r3, r3, r2
   244ce:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   244d0:	bf81      	itttt	hi
   244d2:	4b05      	ldrhi	r3, [pc, #20]	; (244e8 <disconnect_encode+0x20>)
   244d4:	881b      	ldrhhi	r3, [r3, #0]
   244d6:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   244d8:	6803      	ldrhi	r3, [r0, #0]
   244da:	bf83      	ittte	hi
   244dc:	3302      	addhi	r3, #2
   244de:	6043      	strhi	r3, [r0, #4]

	return 0;
   244e0:	2000      	movhi	r0, #0
		return -ENOMEM;
   244e2:	f06f 000b 	mvnls.w	r0, #11
}
   244e6:	4770      	bx	lr
   244e8:	000454a2 	.word	0x000454a2

000244ec <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   244ec:	e9d0 2300 	ldrd	r2, r3, [r0]
   244f0:	1a9b      	subs	r3, r3, r2
   244f2:	2b01      	cmp	r3, #1
   244f4:	bf81      	itttt	hi
   244f6:	4b05      	ldrhi	r3, [pc, #20]	; (2450c <ping_request_encode+0x20>)
   244f8:	881b      	ldrhhi	r3, [r3, #0]
   244fa:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   244fc:	6803      	ldrhi	r3, [r0, #0]
   244fe:	bf83      	ittte	hi
   24500:	3302      	addhi	r3, #2
   24502:	6043      	strhi	r3, [r0, #4]

	return 0;
   24504:	2000      	movhi	r0, #0
		return -ENOMEM;
   24506:	f06f 000b 	mvnls.w	r0, #11
}
   2450a:	4770      	bx	lr
   2450c:	000454a4 	.word	0x000454a4

00024510 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   24510:	2214      	movs	r2, #20
   24512:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   24516:	4353      	muls	r3, r2
   24518:	4a01      	ldr	r2, [pc, #4]	; (24520 <mqtt_transport_connect+0x10>)
   2451a:	58d3      	ldr	r3, [r2, r3]
   2451c:	4718      	bx	r3
   2451e:	bf00      	nop
   24520:	00043208 	.word	0x00043208

00024524 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   24524:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   24526:	2514      	movs	r5, #20
   24528:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   2452c:	4b02      	ldr	r3, [pc, #8]	; (24538 <mqtt_transport_write+0x14>)
   2452e:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   24532:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   24534:	685b      	ldr	r3, [r3, #4]
   24536:	4718      	bx	r3
   24538:	00043208 	.word	0x00043208

0002453c <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   2453c:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   2453e:	2414      	movs	r4, #20
   24540:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   24544:	4b03      	ldr	r3, [pc, #12]	; (24554 <mqtt_transport_write_msg+0x18>)
   24546:	fb04 3302 	mla	r3, r4, r2, r3
}
   2454a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   2454e:	689b      	ldr	r3, [r3, #8]
   24550:	4718      	bx	r3
   24552:	bf00      	nop
   24554:	00043208 	.word	0x00043208

00024558 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   24558:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   2455a:	2614      	movs	r6, #20
   2455c:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   24560:	4c03      	ldr	r4, [pc, #12]	; (24570 <mqtt_transport_read+0x18>)
   24562:	fb06 4405 	mla	r4, r6, r5, r4
   24566:	68e4      	ldr	r4, [r4, #12]
   24568:	46a4      	mov	ip, r4
							 shall_block);
}
   2456a:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   2456c:	4760      	bx	ip
   2456e:	bf00      	nop
   24570:	00043208 	.word	0x00043208

00024574 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   24574:	2114      	movs	r1, #20
   24576:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   2457a:	4b02      	ldr	r3, [pc, #8]	; (24584 <mqtt_transport_disconnect+0x10>)
   2457c:	fb01 3302 	mla	r3, r1, r2, r3
   24580:	691b      	ldr	r3, [r3, #16]
   24582:	4718      	bx	r3
   24584:	00043208 	.word	0x00043208

00024588 <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   24588:	b508      	push	{r3, lr}
   2458a:	f012 fd81 	bl	37090 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   2458e:	b150      	cbz	r0, 245a6 <mqtt_mutex_unlock+0x1e>
   24590:	4905      	ldr	r1, [pc, #20]	; (245a8 <mqtt_mutex_unlock+0x20>)
   24592:	4806      	ldr	r0, [pc, #24]	; (245ac <mqtt_mutex_unlock+0x24>)
   24594:	223d      	movs	r2, #61	; 0x3d
   24596:	f018 fdf6 	bl	3d186 <assert_print>
	(void)ret;
}
   2459a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   2459e:	213d      	movs	r1, #61	; 0x3d
   245a0:	4801      	ldr	r0, [pc, #4]	; (245a8 <mqtt_mutex_unlock+0x20>)
   245a2:	f018 bde9 	b.w	3d178 <assert_post_action>
}
   245a6:	bd08      	pop	{r3, pc}
   245a8:	000454b2 	.word	0x000454b2
   245ac:	0004494f 	.word	0x0004494f

000245b0 <mqtt_mutex_lock>:
{
   245b0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   245b2:	f04f 32ff 	mov.w	r2, #4294967295
   245b6:	f04f 33ff 	mov.w	r3, #4294967295
   245ba:	f012 fc97 	bl	36eec <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   245be:	b150      	cbz	r0, 245d6 <mqtt_mutex_lock+0x26>
   245c0:	4905      	ldr	r1, [pc, #20]	; (245d8 <mqtt_mutex_lock+0x28>)
   245c2:	4806      	ldr	r0, [pc, #24]	; (245dc <mqtt_mutex_lock+0x2c>)
   245c4:	2233      	movs	r2, #51	; 0x33
   245c6:	f018 fdde 	bl	3d186 <assert_print>
}
   245ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   245ce:	2133      	movs	r1, #51	; 0x33
   245d0:	4801      	ldr	r0, [pc, #4]	; (245d8 <mqtt_mutex_lock+0x28>)
   245d2:	f018 bdd1 	b.w	3d178 <assert_post_action>
}
   245d6:	bd08      	pop	{r3, pc}
   245d8:	000454b2 	.word	0x000454b2
   245dc:	0004494f 	.word	0x0004494f

000245e0 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   245e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int type = SOCK_STREAM;
	int ret;

	if (tls_config->set_native_tls) {
   245e2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
	const struct sockaddr *broker = client->broker;
   245e6:	6d85      	ldr	r5, [r0, #88]	; 0x58
		type |= SOCK_NATIVE_TLS;
   245e8:	2b00      	cmp	r3, #0
{
   245ea:	4604      	mov	r4, r0
		type |= SOCK_NATIVE_TLS;
   245ec:	493f      	ldr	r1, [pc, #252]	; (246ec <mqtt_client_tls_connect+0x10c>)
	}

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   245ee:	8828      	ldrh	r0, [r5, #0]
		type |= SOCK_NATIVE_TLS;
   245f0:	bf08      	it	eq
   245f2:	2101      	moveq	r1, #1
	return z_impl_zsock_socket(family, type, proto);
   245f4:	f44f 7281 	mov.w	r2, #258	; 0x102
   245f8:	f7fd fbde 	bl	21db8 <z_impl_zsock_socket>
						  type, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   245fc:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   245fe:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   24600:	da05      	bge.n	2460e <mqtt_client_tls_connect+0x2e>
	NET_DBG("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   24602:	f019 fc52 	bl	3deaa <__errno>
   24606:	6800      	ldr	r0, [r0, #0]
   24608:	4240      	negs	r0, r0
}
   2460a:	b004      	add	sp, #16
   2460c:	bd70      	pop	{r4, r5, r6, pc}
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2460e:	2304      	movs	r3, #4
   24610:	2205      	movs	r2, #5
   24612:	9300      	str	r3, [sp, #0]
   24614:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24618:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   2461c:	f019 fa2d 	bl	3da7a <z_impl_zsock_setsockopt>
	if (ret < 0) {
   24620:	2800      	cmp	r0, #0
   24622:	da03      	bge.n	2462c <mqtt_client_tls_connect+0x4c>
	(void) zsock_close(client->transport.tls.sock);
   24624:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   24626:	f019 f931 	bl	3d88c <z_impl_zsock_close>
   2462a:	e7ea      	b.n	24602 <mqtt_client_tls_connect+0x22>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   2462c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2462e:	2b00      	cmp	r3, #0
   24630:	d12f      	bne.n	24692 <mqtt_client_tls_connect+0xb2>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   24632:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24634:	2b00      	cmp	r3, #0
   24636:	d13a      	bne.n	246ae <mqtt_client_tls_connect+0xce>
	if (tls_config->hostname) {
   24638:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2463a:	2b00      	cmp	r3, #0
   2463c:	d145      	bne.n	246ca <mqtt_client_tls_connect+0xea>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   2463e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   24640:	2b01      	cmp	r3, #1
   24642:	d10b      	bne.n	2465c <mqtt_client_tls_connect+0x7c>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24644:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   24646:	2304      	movs	r3, #4
   24648:	220a      	movs	r2, #10
   2464a:	9300      	str	r3, [sp, #0]
   2464c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24650:	f104 0340 	add.w	r3, r4, #64	; 0x40
   24654:	f019 fa11 	bl	3da7a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24658:	2800      	cmp	r0, #0
   2465a:	dbe3      	blt.n	24624 <mqtt_client_tls_connect+0x44>
	if (tls_config->cert_nocopy != TLS_CERT_NOCOPY_NONE) {
   2465c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2465e:	b15b      	cbz	r3, 24678 <mqtt_client_tls_connect+0x98>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24660:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   24662:	2304      	movs	r3, #4
   24664:	220a      	movs	r2, #10
   24666:	9300      	str	r3, [sp, #0]
   24668:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2466c:	f104 0348 	add.w	r3, r4, #72	; 0x48
   24670:	f019 fa03 	bl	3da7a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24674:	2800      	cmp	r0, #0
   24676:	dbd5      	blt.n	24624 <mqtt_client_tls_connect+0x44>
	if (broker->sa_family == AF_INET) {
   24678:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   2467a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   2467c:	2b01      	cmp	r3, #1
   2467e:	bf0c      	ite	eq
   24680:	2208      	moveq	r2, #8
   24682:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   24684:	6da1      	ldr	r1, [r4, #88]	; 0x58
	return z_impl_zsock_connect(sock, addr, addrlen);
   24686:	f019 f925 	bl	3d8d4 <z_impl_zsock_connect>
	if (ret < 0) {
   2468a:	2800      	cmp	r0, #0
   2468c:	dbca      	blt.n	24624 <mqtt_client_tls_connect+0x44>
	return 0;
   2468e:	2000      	movs	r0, #0
   24690:	e7bb      	b.n	2460a <mqtt_client_tls_connect+0x2a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   24692:	6b22      	ldr	r2, [r4, #48]	; 0x30
   24694:	2a00      	cmp	r2, #0
   24696:	d0cc      	beq.n	24632 <mqtt_client_tls_connect+0x52>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24698:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2469a:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2469c:	9200      	str	r2, [sp, #0]
   2469e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   246a2:	2203      	movs	r2, #3
   246a4:	f019 f9e9 	bl	3da7a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   246a8:	2800      	cmp	r0, #0
   246aa:	dac2      	bge.n	24632 <mqtt_client_tls_connect+0x52>
   246ac:	e7ba      	b.n	24624 <mqtt_client_tls_connect+0x44>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   246ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   246b0:	2a00      	cmp	r2, #0
   246b2:	d0c1      	beq.n	24638 <mqtt_client_tls_connect+0x58>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   246b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   246b6:	0092      	lsls	r2, r2, #2
   246b8:	9200      	str	r2, [sp, #0]
   246ba:	f44f 718d 	mov.w	r1, #282	; 0x11a
   246be:	2201      	movs	r2, #1
   246c0:	f019 f9db 	bl	3da7a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   246c4:	2800      	cmp	r0, #0
   246c6:	dab7      	bge.n	24638 <mqtt_client_tls_connect+0x58>
   246c8:	e7ac      	b.n	24624 <mqtt_client_tls_connect+0x44>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   246ca:	4618      	mov	r0, r3
   246cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   246ce:	9303      	str	r3, [sp, #12]
   246d0:	f7f8 fdb7 	bl	1d242 <strlen>
   246d4:	2202      	movs	r2, #2
   246d6:	9000      	str	r0, [sp, #0]
   246d8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   246dc:	4630      	mov	r0, r6
   246de:	9b03      	ldr	r3, [sp, #12]
   246e0:	f019 f9cb 	bl	3da7a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   246e4:	2800      	cmp	r0, #0
   246e6:	daaa      	bge.n	2463e <mqtt_client_tls_connect+0x5e>
   246e8:	e79c      	b.n	24624 <mqtt_client_tls_connect+0x44>
   246ea:	bf00      	nop
   246ec:	40000001 	.word	0x40000001

000246f0 <timing_init>:

static bool has_inited;
static atomic_val_t started_ref;

void timing_init(void)
{
   246f0:	b510      	push	{r4, lr}
	if (has_inited) {
   246f2:	4c04      	ldr	r4, [pc, #16]	; (24704 <timing_init+0x14>)
   246f4:	7823      	ldrb	r3, [r4, #0]
   246f6:	b91b      	cbnz	r3, 24700 <timing_init+0x10>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_init();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_init();
#else
	arch_timing_init();
   246f8:	f7ff f91a 	bl	23930 <arch_timing_init>
#endif

	has_inited = true;
   246fc:	2301      	movs	r3, #1
   246fe:	7023      	strb	r3, [r4, #0]
}
   24700:	bd10      	pop	{r4, pc}
   24702:	bf00      	nop
   24704:	2001a5bd 	.word	0x2001a5bd

00024708 <timing_start>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24708:	4b05      	ldr	r3, [pc, #20]	; (24720 <timing_start+0x18>)
   2470a:	e8d3 2fef 	ldaex	r2, [r3]
   2470e:	1c51      	adds	r1, r2, #1
   24710:	e8c3 1fe0 	stlex	r0, r1, [r3]
   24714:	2800      	cmp	r0, #0
   24716:	d1f8      	bne.n	2470a <timing_start+0x2>

void timing_start(void)
{
	if (atomic_inc(&started_ref) != 0) {
   24718:	b90a      	cbnz	r2, 2471e <timing_start+0x16>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_start();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_start();
#else
	arch_timing_start();
   2471a:	f7ff b92f 	b.w	2397c <arch_timing_start>
#endif
}
   2471e:	4770      	bx	lr
   24720:	200191fc 	.word	0x200191fc

00024724 <timing_stop>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24724:	4a0a      	ldr	r2, [pc, #40]	; (24750 <timing_stop+0x2c>)
   24726:	e8d2 3faf 	lda	r3, [r2]
	atomic_t old_value, new_value;

	/* Make sure this does decrement past zero. */
	do {
		old_value = atomic_get(&started_ref);
		if (old_value <= 0) {
   2472a:	2b00      	cmp	r3, #0
   2472c:	dc01      	bgt.n	24732 <timing_stop+0xe>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_stop();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_stop();
#else
	arch_timing_stop();
   2472e:	f7ff b92f 	b.w	23990 <arch_timing_stop>
		new_value = old_value - 1;
   24732:	1e59      	subs	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24734:	e8d2 0fef 	ldaex	r0, [r2]
   24738:	4298      	cmp	r0, r3
   2473a:	d104      	bne.n	24746 <timing_stop+0x22>
   2473c:	e8c2 1fec 	stlex	ip, r1, [r2]
   24740:	f1bc 0f00 	cmp.w	ip, #0
   24744:	d1f6      	bne.n	24734 <timing_stop+0x10>
	} while (atomic_cas(&started_ref, old_value, new_value) == 0);
   24746:	d1ee      	bne.n	24726 <timing_stop+0x2>
	if (old_value > 1) {
   24748:	2b01      	cmp	r3, #1
   2474a:	d0f0      	beq.n	2472e <timing_stop+0xa>
#endif
}
   2474c:	4770      	bx	lr
   2474e:	bf00      	nop
   24750:	200191fc 	.word	0x200191fc

00024754 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   24754:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24756:	2340      	movs	r3, #64	; 0x40
{
   24758:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2475a:	490a      	ldr	r1, [pc, #40]	; (24784 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2475c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   2475e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24760:	1149      	asrs	r1, r1, #5
{
   24762:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24764:	4623      	mov	r3, r4
   24766:	4a08      	ldr	r2, [pc, #32]	; (24788 <onoff_start+0x34>)
   24768:	4808      	ldr	r0, [pc, #32]	; (2478c <onoff_start+0x38>)
   2476a:	f01a fb1b 	bl	3eda4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2476e:	1e01      	subs	r1, r0, #0
   24770:	da05      	bge.n	2477e <onoff_start+0x2a>
		notify(mgr, err);
   24772:	4628      	mov	r0, r5
   24774:	4623      	mov	r3, r4
	}
}
   24776:	b003      	add	sp, #12
   24778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   2477c:	4718      	bx	r3
}
   2477e:	b003      	add	sp, #12
   24780:	bd30      	pop	{r4, r5, pc}
   24782:	bf00      	nop
   24784:	20019210 	.word	0x20019210
   24788:	0003ee11 	.word	0x0003ee11
   2478c:	00042a70 	.word	0x00042a70

00024790 <get_status>:
{
   24790:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   24792:	b2cc      	uxtb	r4, r1
   24794:	2c01      	cmp	r4, #1
{
   24796:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   24798:	d908      	bls.n	247ac <get_status+0x1c>
   2479a:	4908      	ldr	r1, [pc, #32]	; (247bc <get_status+0x2c>)
   2479c:	4808      	ldr	r0, [pc, #32]	; (247c0 <get_status+0x30>)
   2479e:	2279      	movs	r2, #121	; 0x79
   247a0:	f018 fcf1 	bl	3d186 <assert_print>
   247a4:	2179      	movs	r1, #121	; 0x79
   247a6:	4805      	ldr	r0, [pc, #20]	; (247bc <get_status+0x2c>)
   247a8:	f018 fce6 	bl	3d178 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   247ac:	230c      	movs	r3, #12
   247ae:	6929      	ldr	r1, [r5, #16]
   247b0:	fb04 1403 	mla	r4, r4, r3, r1
   247b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   247b6:	f000 0007 	and.w	r0, r0, #7
   247ba:	bd38      	pop	{r3, r4, r5, pc}
   247bc:	000454e3 	.word	0x000454e3
   247c0:	0004494f 	.word	0x0004494f

000247c4 <stop>:
{
   247c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   247c6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   247c8:	2c01      	cmp	r4, #1
{
   247ca:	4605      	mov	r5, r0
   247cc:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   247ce:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   247d0:	d90a      	bls.n	247e8 <stop+0x24>
   247d2:	4918      	ldr	r1, [pc, #96]	; (24834 <stop+0x70>)
   247d4:	4818      	ldr	r0, [pc, #96]	; (24838 <stop+0x74>)
   247d6:	f240 124d 	movw	r2, #333	; 0x14d
   247da:	f018 fcd4 	bl	3d186 <assert_print>
   247de:	f240 114d 	movw	r1, #333	; 0x14d
   247e2:	4814      	ldr	r0, [pc, #80]	; (24834 <stop+0x70>)
   247e4:	f018 fcc8 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   247e8:	f04f 0320 	mov.w	r3, #32
   247ec:	f3ef 8111 	mrs	r1, BASEPRI
   247f0:	f383 8812 	msr	BASEPRI_MAX, r3
   247f4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   247f8:	220c      	movs	r2, #12
   247fa:	fb02 6304 	mla	r3, r2, r4, r6
   247fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   24800:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   24804:	d001      	beq.n	2480a <stop+0x46>
   24806:	429f      	cmp	r7, r3
   24808:	d111      	bne.n	2482e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2480a:	2301      	movs	r3, #1
	int err = 0;
   2480c:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2480e:	fb02 6604 	mla	r6, r2, r4, r6
   24812:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
   24814:	f381 8811 	msr	BASEPRI, r1
   24818:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2481c:	b930      	cbnz	r0, 2482c <stop+0x68>
	get_sub_config(dev, type)->stop();
   2481e:	230c      	movs	r3, #12
   24820:	6869      	ldr	r1, [r5, #4]
   24822:	fb03 1404 	mla	r4, r3, r4, r1
   24826:	6863      	ldr	r3, [r4, #4]
   24828:	4798      	blx	r3
	return 0;
   2482a:	2000      	movs	r0, #0
}
   2482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   2482e:	f04f 30ff 	mov.w	r0, #4294967295
   24832:	e7ef      	b.n	24814 <stop+0x50>
   24834:	000454e3 	.word	0x000454e3
   24838:	0004494f 	.word	0x0004494f

0002483c <onoff_stop>:
{
   2483c:	b570      	push	{r4, r5, r6, lr}
   2483e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   24840:	4906      	ldr	r1, [pc, #24]	; (2485c <onoff_stop+0x20>)
{
   24842:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   24844:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   24846:	1149      	asrs	r1, r1, #5
   24848:	2240      	movs	r2, #64	; 0x40
   2484a:	4805      	ldr	r0, [pc, #20]	; (24860 <onoff_stop+0x24>)
   2484c:	f7ff ffba 	bl	247c4 <stop>
	notify(mgr, res);
   24850:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   24852:	4601      	mov	r1, r0
	notify(mgr, res);
   24854:	4620      	mov	r0, r4
}
   24856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2485a:	4718      	bx	r3
   2485c:	20019210 	.word	0x20019210
   24860:	00042a70 	.word	0x00042a70

00024864 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   24864:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   24866:	2200      	movs	r2, #0
   24868:	2101      	movs	r1, #1
{
   2486a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2486c:	2005      	movs	r0, #5
   2486e:	f7fe fc27 	bl	230c0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   24872:	480f      	ldr	r0, [pc, #60]	; (248b0 <clk_init+0x4c>)
   24874:	f00e f82a 	bl	328cc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   24878:	4b0e      	ldr	r3, [pc, #56]	; (248b4 <clk_init+0x50>)
   2487a:	4298      	cmp	r0, r3
   2487c:	d115      	bne.n	248aa <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2487e:	f00e f847 	bl	32910 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   24882:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   24884:	490c      	ldr	r1, [pc, #48]	; (248b8 <clk_init+0x54>)
   24886:	4630      	mov	r0, r6
   24888:	f018 faf5 	bl	3ce76 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2488c:	2800      	cmp	r0, #0
   2488e:	db0b      	blt.n	248a8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   24890:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   24892:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   24894:	4908      	ldr	r1, [pc, #32]	; (248b8 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   24896:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   24898:	f104 0020 	add.w	r0, r4, #32
   2489c:	f018 faeb 	bl	3ce76 <onoff_manager_init>
		if (err < 0) {
   248a0:	2800      	cmp	r0, #0
   248a2:	db01      	blt.n	248a8 <clk_init+0x44>
	}

	return 0;
   248a4:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   248a6:	6565      	str	r5, [r4, #84]	; 0x54
}
   248a8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   248aa:	f06f 0004 	mvn.w	r0, #4
   248ae:	e7fb      	b.n	248a8 <clk_init+0x44>
   248b0:	000248f9 	.word	0x000248f9
   248b4:	0bad0000 	.word	0x0bad0000
   248b8:	00043260 	.word	0x00043260

000248bc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   248bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   248be:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   248c0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   248c2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   248c4:	434b      	muls	r3, r1
   248c6:	480a      	ldr	r0, [pc, #40]	; (248f0 <clkstarted_handle.constprop.0+0x34>)
   248c8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   248ca:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   248cc:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   248d0:	4418      	add	r0, r3
	sub_data->cb = NULL;
   248d2:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   248d4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   248d6:	f01a fa52 	bl	3ed7e <set_on_state>
	if (callback) {
   248da:	b135      	cbz	r5, 248ea <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   248dc:	462b      	mov	r3, r5
   248de:	9a01      	ldr	r2, [sp, #4]
   248e0:	4804      	ldr	r0, [pc, #16]	; (248f4 <clkstarted_handle.constprop.0+0x38>)
}
   248e2:	b002      	add	sp, #8
   248e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   248e8:	4718      	bx	r3
}
   248ea:	b002      	add	sp, #8
   248ec:	bd70      	pop	{r4, r5, r6, pc}
   248ee:	bf00      	nop
   248f0:	20019210 	.word	0x20019210
   248f4:	00042a70 	.word	0x00042a70

000248f8 <clock_event_handler>:
	switch (event) {
   248f8:	2801      	cmp	r0, #1
{
   248fa:	b508      	push	{r3, lr}
	switch (event) {
   248fc:	d006      	beq.n	2490c <clock_event_handler+0x14>
   248fe:	2803      	cmp	r0, #3
   24900:	d008      	beq.n	24914 <clock_event_handler+0x1c>
   24902:	b9a0      	cbnz	r0, 2492e <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   24904:	4b0f      	ldr	r3, [pc, #60]	; (24944 <clock_event_handler+0x4c>)
   24906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   24908:	075b      	lsls	r3, r3, #29
   2490a:	d119      	bne.n	24940 <clock_event_handler+0x48>
}
   2490c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   24910:	f7ff bfd4 	b.w	248bc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   24914:	490c      	ldr	r1, [pc, #48]	; (24948 <clock_event_handler+0x50>)
   24916:	f240 225e 	movw	r2, #606	; 0x25e
   2491a:	480c      	ldr	r0, [pc, #48]	; (2494c <clock_event_handler+0x54>)
   2491c:	f018 fc33 	bl	3d186 <assert_print>
   24920:	f240 215e 	movw	r1, #606	; 0x25e
}
   24924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   24928:	4807      	ldr	r0, [pc, #28]	; (24948 <clock_event_handler+0x50>)
   2492a:	f018 bc25 	b.w	3d178 <assert_post_action>
   2492e:	4906      	ldr	r1, [pc, #24]	; (24948 <clock_event_handler+0x50>)
   24930:	f240 2262 	movw	r2, #610	; 0x262
   24934:	4805      	ldr	r0, [pc, #20]	; (2494c <clock_event_handler+0x54>)
   24936:	f018 fc26 	bl	3d186 <assert_print>
   2493a:	f240 2162 	movw	r1, #610	; 0x262
   2493e:	e7f1      	b.n	24924 <clock_event_handler+0x2c>
}
   24940:	bd08      	pop	{r3, pc}
   24942:	bf00      	nop
   24944:	20019210 	.word	0x20019210
   24948:	000454e3 	.word	0x000454e3
   2494c:	0004494f 	.word	0x0004494f

00024950 <generic_hfclk_start>:
{
   24950:	b508      	push	{r3, lr}
	__asm__ volatile(
   24952:	f04f 0320 	mov.w	r3, #32
   24956:	f3ef 8111 	mrs	r1, BASEPRI
   2495a:	f383 8812 	msr	BASEPRI_MAX, r3
   2495e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   24962:	4a11      	ldr	r2, [pc, #68]	; (249a8 <generic_hfclk_start+0x58>)
   24964:	6813      	ldr	r3, [r2, #0]
   24966:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   2496a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   2496e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   24970:	d00b      	beq.n	2498a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   24972:	4a0e      	ldr	r2, [pc, #56]	; (249ac <generic_hfclk_start+0x5c>)
   24974:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24978:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2497c:	f013 0301 	ands.w	r3, r3, #1
   24980:	d003      	beq.n	2498a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   24982:	480b      	ldr	r0, [pc, #44]	; (249b0 <generic_hfclk_start+0x60>)
   24984:	f01a f9fb 	bl	3ed7e <set_on_state>
			already_started = true;
   24988:	2301      	movs	r3, #1
	__asm__ volatile(
   2498a:	f381 8811 	msr	BASEPRI, r1
   2498e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   24992:	b123      	cbz	r3, 2499e <generic_hfclk_start+0x4e>
}
   24994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   24998:	2000      	movs	r0, #0
   2499a:	f7ff bf8f 	b.w	248bc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2499e:	2001      	movs	r0, #1
}
   249a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   249a4:	f00d bfd8 	b.w	32958 <nrfx_clock_start>
   249a8:	20019268 	.word	0x20019268
   249ac:	40005000 	.word	0x40005000
   249b0:	20019258 	.word	0x20019258

000249b4 <api_blocking_start>:
{
   249b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   249b6:	2200      	movs	r2, #0
   249b8:	2301      	movs	r3, #1
   249ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
   249be:	ab04      	add	r3, sp, #16
   249c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   249c4:	4a09      	ldr	r2, [pc, #36]	; (249ec <api_blocking_start+0x38>)
   249c6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   249c8:	f8cd d000 	str.w	sp, [sp]
   249cc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   249d0:	f01a fa17 	bl	3ee02 <api_start>
	if (err < 0) {
   249d4:	2800      	cmp	r0, #0
   249d6:	db05      	blt.n	249e4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   249d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   249dc:	2300      	movs	r3, #0
   249de:	4668      	mov	r0, sp
   249e0:	f012 fd12 	bl	37408 <z_impl_k_sem_take>
}
   249e4:	b007      	add	sp, #28
   249e6:	f85d fb04 	ldr.w	pc, [sp], #4
   249ea:	bf00      	nop
   249ec:	0003ee2f 	.word	0x0003ee2f

000249f0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   249f0:	4b07      	ldr	r3, [pc, #28]	; (24a10 <generic_hfclk_stop+0x20>)
   249f2:	e8d3 2fef 	ldaex	r2, [r3]
   249f6:	f022 0102 	bic.w	r1, r2, #2
   249fa:	e8c3 1fe0 	stlex	r0, r1, [r3]
   249fe:	2800      	cmp	r0, #0
   24a00:	d1f7      	bne.n	249f2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   24a02:	07d3      	lsls	r3, r2, #31
   24a04:	d402      	bmi.n	24a0c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   24a06:	2001      	movs	r0, #1
   24a08:	f00e b808 	b.w	32a1c <nrfx_clock_stop>
}
   24a0c:	4770      	bx	lr
   24a0e:	bf00      	nop
   24a10:	20019268 	.word	0x20019268

00024a14 <z_nrf_clock_control_lf_on>:
{
   24a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24a18:	2201      	movs	r2, #1
   24a1a:	4606      	mov	r6, r0
   24a1c:	4942      	ldr	r1, [pc, #264]	; (24b28 <z_nrf_clock_control_lf_on+0x114>)
   24a1e:	e8d1 3fef 	ldaex	r3, [r1]
   24a22:	e8c1 2fe0 	stlex	r0, r2, [r1]
   24a26:	2800      	cmp	r0, #0
   24a28:	d1f9      	bne.n	24a1e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   24a2a:	b99b      	cbnz	r3, 24a54 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   24a2c:	493f      	ldr	r1, [pc, #252]	; (24b2c <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   24a2e:	4840      	ldr	r0, [pc, #256]	; (24b30 <z_nrf_clock_control_lf_on+0x11c>)
   24a30:	604b      	str	r3, [r1, #4]
   24a32:	60cb      	str	r3, [r1, #12]
   24a34:	608a      	str	r2, [r1, #8]
   24a36:	f7fc fd69 	bl	2150c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   24a3a:	2800      	cmp	r0, #0
   24a3c:	da0a      	bge.n	24a54 <z_nrf_clock_control_lf_on+0x40>
   24a3e:	493d      	ldr	r1, [pc, #244]	; (24b34 <z_nrf_clock_control_lf_on+0x120>)
   24a40:	483d      	ldr	r0, [pc, #244]	; (24b38 <z_nrf_clock_control_lf_on+0x124>)
   24a42:	f44f 7208 	mov.w	r2, #544	; 0x220
   24a46:	f018 fb9e 	bl	3d186 <assert_print>
   24a4a:	f44f 7108 	mov.w	r1, #544	; 0x220
   24a4e:	4839      	ldr	r0, [pc, #228]	; (24b34 <z_nrf_clock_control_lf_on+0x120>)
   24a50:	f018 fb92 	bl	3d178 <assert_post_action>
	switch (start_mode) {
   24a54:	b386      	cbz	r6, 24ab8 <z_nrf_clock_control_lf_on+0xa4>
   24a56:	1e73      	subs	r3, r6, #1
   24a58:	2b01      	cmp	r3, #1
   24a5a:	d852      	bhi.n	24b02 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   24a5c:	2e01      	cmp	r6, #1
   24a5e:	d106      	bne.n	24a6e <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   24a60:	4b36      	ldr	r3, [pc, #216]	; (24b3c <z_nrf_clock_control_lf_on+0x128>)
   24a62:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   24a66:	f003 0303 	and.w	r3, r3, #3
   24a6a:	2b02      	cmp	r3, #2
   24a6c:	d024      	beq.n	24ab8 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24a6e:	f01c fe11 	bl	41694 <k_is_in_isr>
   24a72:	4604      	mov	r4, r0
   24a74:	b918      	cbnz	r0, 24a7e <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
   24a76:	4b32      	ldr	r3, [pc, #200]	; (24b40 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
   24a78:	781b      	ldrb	r3, [r3, #0]
   24a7a:	2b00      	cmp	r3, #0
   24a7c:	d14e      	bne.n	24b1c <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
   24a7e:	f04f 0320 	mov.w	r3, #32
   24a82:	f3ef 8711 	mrs	r7, BASEPRI
   24a86:	f383 8812 	msr	BASEPRI_MAX, r3
   24a8a:	f3bf 8f6f 	isb	sy
   24a8e:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24a90:	4d2a      	ldr	r5, [pc, #168]	; (24b3c <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24a92:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 24b44 <z_nrf_clock_control_lf_on+0x130>
   24a96:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24a9a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   24a9e:	03d2      	lsls	r2, r2, #15
   24aa0:	d50c      	bpl.n	24abc <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   24aa2:	f003 0303 	and.w	r3, r3, #3
   24aa6:	2b02      	cmp	r3, #2
   24aa8:	d001      	beq.n	24aae <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   24aaa:	2e01      	cmp	r6, #1
   24aac:	d106      	bne.n	24abc <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
   24aae:	b324      	cbz	r4, 24afa <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
   24ab0:	f387 8811 	msr	BASEPRI, r7
   24ab4:	f3bf 8f6f 	isb	sy
}
   24ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   24abc:	b1c4      	cbz	r4, 24af0 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   24abe:	4638      	mov	r0, r7
   24ac0:	f7fe fa5c 	bl	22f7c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   24ac4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   24ac8:	b2db      	uxtb	r3, r3
   24aca:	2b01      	cmp	r3, #1
   24acc:	d1e3      	bne.n	24a96 <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24ace:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   24ad2:	2a00      	cmp	r2, #0
   24ad4:	d0df      	beq.n	24a96 <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ad6:	2200      	movs	r2, #0
   24ad8:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   24adc:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   24ae0:	2202      	movs	r2, #2
   24ae2:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   24ae6:	2220      	movs	r2, #32
   24ae8:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24aec:	60ab      	str	r3, [r5, #8]
}
   24aee:	e7d2      	b.n	24a96 <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
   24af0:	2100      	movs	r1, #0
   24af2:	2021      	movs	r0, #33	; 0x21
   24af4:	f014 f898 	bl	38c28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   24af8:	e7e4      	b.n	24ac4 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
   24afa:	2302      	movs	r3, #2
   24afc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   24b00:	e7da      	b.n	24ab8 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
   24b02:	490c      	ldr	r1, [pc, #48]	; (24b34 <z_nrf_clock_control_lf_on+0x120>)
   24b04:	480c      	ldr	r0, [pc, #48]	; (24b38 <z_nrf_clock_control_lf_on+0x124>)
   24b06:	f240 2232 	movw	r2, #562	; 0x232
   24b0a:	f018 fb3c 	bl	3d186 <assert_print>
}
   24b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   24b12:	f240 2132 	movw	r1, #562	; 0x232
   24b16:	4807      	ldr	r0, [pc, #28]	; (24b34 <z_nrf_clock_control_lf_on+0x120>)
   24b18:	f018 bb2e 	b.w	3d178 <assert_post_action>
    p_reg->INTENCLR = mask;
   24b1c:	2202      	movs	r2, #2
   24b1e:	4b07      	ldr	r3, [pc, #28]	; (24b3c <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
   24b20:	4607      	mov	r7, r0
   24b22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24b26:	e7b3      	b.n	24a90 <z_nrf_clock_control_lf_on+0x7c>
   24b28:	2001926c 	.word	0x2001926c
   24b2c:	20019200 	.word	0x20019200
   24b30:	20019230 	.word	0x20019230
   24b34:	000454e3 	.word	0x000454e3
   24b38:	0004494f 	.word	0x0004494f
   24b3c:	40005000 	.word	0x40005000
   24b40:	2001d3e6 	.word	0x2001d3e6
   24b44:	e000e100 	.word	0xe000e100

00024b48 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   24b48:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   24b4a:	4808      	ldr	r0, [pc, #32]	; (24b6c <uart_console_init+0x24>)
   24b4c:	4b08      	ldr	r3, [pc, #32]	; (24b70 <uart_console_init+0x28>)
   24b4e:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   24b50:	f01c fd7f 	bl	41652 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   24b54:	b138      	cbz	r0, 24b66 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   24b56:	4807      	ldr	r0, [pc, #28]	; (24b74 <uart_console_init+0x2c>)
   24b58:	f7ff f958 	bl	23e0c <__stdout_hook_install>
	__printk_hook_install(console_out);
   24b5c:	4805      	ldr	r0, [pc, #20]	; (24b74 <uart_console_init+0x2c>)
   24b5e:	f7fc fab3 	bl	210c8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   24b62:	2000      	movs	r0, #0
}
   24b64:	bd08      	pop	{r3, pc}
		return -ENODEV;
   24b66:	f06f 0012 	mvn.w	r0, #18
   24b6a:	e7fb      	b.n	24b64 <uart_console_init+0x1c>
   24b6c:	00042ab8 	.word	0x00042ab8
   24b70:	20019270 	.word	0x20019270
   24b74:	00024b79 	.word	0x00024b79

00024b78 <console_out>:
	if ('\n' == c) {
   24b78:	280a      	cmp	r0, #10
{
   24b7a:	b538      	push	{r3, r4, r5, lr}
   24b7c:	4604      	mov	r4, r0
   24b7e:	4d07      	ldr	r5, [pc, #28]	; (24b9c <console_out+0x24>)
	if ('\n' == c) {
   24b80:	d104      	bne.n	24b8c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   24b82:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   24b84:	6883      	ldr	r3, [r0, #8]
   24b86:	210d      	movs	r1, #13
   24b88:	685b      	ldr	r3, [r3, #4]
   24b8a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   24b8c:	6828      	ldr	r0, [r5, #0]
   24b8e:	6883      	ldr	r3, [r0, #8]
   24b90:	b2e1      	uxtb	r1, r4
   24b92:	685b      	ldr	r3, [r3, #4]
   24b94:	4798      	blx	r3
}
   24b96:	4620      	mov	r0, r4
   24b98:	bd38      	pop	{r3, r4, r5, pc}
   24b9a:	bf00      	nop
   24b9c:	20019270 	.word	0x20019270

00024ba0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   24ba0:	b570      	push	{r4, r5, r6, lr}
   24ba2:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   24ba4:	460c      	mov	r4, r1
	return port->data;
   24ba6:	6905      	ldr	r5, [r0, #16]
   24ba8:	b941      	cbnz	r1, 24bbc <gpio_nrfx_manage_callback+0x1c>
   24baa:	491e      	ldr	r1, [pc, #120]	; (24c24 <gpio_nrfx_manage_callback+0x84>)
   24bac:	481e      	ldr	r0, [pc, #120]	; (24c28 <gpio_nrfx_manage_callback+0x88>)
   24bae:	2224      	movs	r2, #36	; 0x24
   24bb0:	f018 fae9 	bl	3d186 <assert_print>
   24bb4:	2124      	movs	r1, #36	; 0x24
   24bb6:	481b      	ldr	r0, [pc, #108]	; (24c24 <gpio_nrfx_manage_callback+0x84>)
   24bb8:	f018 fade 	bl	3d178 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   24bbc:	6863      	ldr	r3, [r4, #4]
   24bbe:	b943      	cbnz	r3, 24bd2 <gpio_nrfx_manage_callback+0x32>
   24bc0:	4918      	ldr	r1, [pc, #96]	; (24c24 <gpio_nrfx_manage_callback+0x84>)
   24bc2:	4819      	ldr	r0, [pc, #100]	; (24c28 <gpio_nrfx_manage_callback+0x88>)
   24bc4:	2225      	movs	r2, #37	; 0x25
   24bc6:	f018 fade 	bl	3d186 <assert_print>
   24bca:	2125      	movs	r1, #37	; 0x25
   24bcc:	4815      	ldr	r0, [pc, #84]	; (24c24 <gpio_nrfx_manage_callback+0x84>)
   24bce:	f018 fad3 	bl	3d178 <assert_post_action>
	return list->head;
   24bd2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   24bd4:	b15b      	cbz	r3, 24bee <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24bd6:	2200      	movs	r2, #0
   24bd8:	429c      	cmp	r4, r3
   24bda:	d112      	bne.n	24c02 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   24bdc:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   24bde:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   24be0:	b952      	cbnz	r2, 24bf8 <gpio_nrfx_manage_callback+0x58>
   24be2:	42a1      	cmp	r1, r4
	list->head = node;
   24be4:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   24be6:	d100      	bne.n	24bea <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   24be8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   24bea:	2300      	movs	r3, #0
   24bec:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   24bee:	b96e      	cbnz	r6, 24c0c <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   24bf0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   24bf2:	bd70      	pop	{r4, r5, r6, pc}
   24bf4:	460b      	mov	r3, r1
   24bf6:	e7ef      	b.n	24bd8 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   24bf8:	42a1      	cmp	r1, r4
	parent->next = child;
   24bfa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   24bfc:	bf08      	it	eq
   24bfe:	60aa      	streq	r2, [r5, #8]
}
   24c00:	e7f3      	b.n	24bea <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   24c02:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c04:	461a      	mov	r2, r3
   24c06:	2900      	cmp	r1, #0
   24c08:	d1f4      	bne.n	24bf4 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   24c0a:	b13e      	cbz	r6, 24c1c <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   24c0c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   24c0e:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   24c10:	6023      	str	r3, [r4, #0]
	list->head = node;
   24c12:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   24c14:	2800      	cmp	r0, #0
   24c16:	d1eb      	bne.n	24bf0 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   24c18:	60ac      	str	r4, [r5, #8]
}
   24c1a:	e7ea      	b.n	24bf2 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   24c1c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24c20:	e7e7      	b.n	24bf2 <gpio_nrfx_manage_callback+0x52>
   24c22:	bf00      	nop
   24c24:	00045540 	.word	0x00045540
   24c28:	0004494f 	.word	0x0004494f

00024c2c <gpio_nrfx_pin_interrupt_configure>:
{
   24c2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   24c2e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   24c30:	f001 041f 	and.w	r4, r1, #31
   24c34:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   24c36:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   24c3a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   24c3e:	f04f 0500 	mov.w	r5, #0
   24c42:	d104      	bne.n	24c4e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   24c44:	4620      	mov	r0, r4
   24c46:	f00e f9ff 	bl	33048 <nrfx_gpiote_trigger_disable>
	return 0;
   24c4a:	2000      	movs	r0, #0
   24c4c:	e04b      	b.n	24ce6 <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
   24c4e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   24c52:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   24c56:	d148      	bne.n	24cea <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   24c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   24c5c:	bf0c      	ite	eq
   24c5e:	2304      	moveq	r3, #4
   24c60:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   24c62:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   24c66:	6883      	ldr	r3, [r0, #8]
   24c68:	fa23 f101 	lsr.w	r1, r3, r1
   24c6c:	07c9      	lsls	r1, r1, #31
   24c6e:	d448      	bmi.n	24d02 <gpio_nrfx_pin_interrupt_configure+0xd6>
   24c70:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   24c74:	d145      	bne.n	24d02 <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   24c76:	0966      	lsrs	r6, r4, #5
   24c78:	bf0c      	ite	eq
   24c7a:	f04f 33ff 	moveq.w	r3, #4294967295
   24c7e:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   24c80:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   24c84:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24c86:	07da      	lsls	r2, r3, #31
   24c88:	d40a      	bmi.n	24ca0 <gpio_nrfx_pin_interrupt_configure+0x74>
   24c8a:	4926      	ldr	r1, [pc, #152]	; (24d24 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24c8c:	4826      	ldr	r0, [pc, #152]	; (24d28 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   24c8e:	f240 2229 	movw	r2, #553	; 0x229
   24c92:	f018 fa78 	bl	3d186 <assert_print>
   24c96:	f240 2129 	movw	r1, #553	; 0x229
   24c9a:	4822      	ldr	r0, [pc, #136]	; (24d24 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24c9c:	f018 fa6c 	bl	3d178 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24ca0:	b156      	cbz	r6, 24cb8 <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   24ca2:	4920      	ldr	r1, [pc, #128]	; (24d24 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24ca4:	4820      	ldr	r0, [pc, #128]	; (24d28 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   24ca6:	f240 222e 	movw	r2, #558	; 0x22e
   24caa:	f018 fa6c 	bl	3d186 <assert_print>
   24cae:	f240 212e 	movw	r1, #558	; 0x22e
   24cb2:	481c      	ldr	r0, [pc, #112]	; (24d24 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24cb4:	f018 fa60 	bl	3d178 <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   24cb8:	4b1c      	ldr	r3, [pc, #112]	; (24d2c <gpio_nrfx_pin_interrupt_configure+0x100>)
   24cba:	3580      	adds	r5, #128	; 0x80
   24cbc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   24cc0:	07db      	lsls	r3, r3, #31
   24cc2:	d41e      	bmi.n	24d02 <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   24cc4:	f10d 0507 	add.w	r5, sp, #7
   24cc8:	4629      	mov	r1, r5
   24cca:	4620      	mov	r0, r4
   24ccc:	f00e f8ea 	bl	32ea4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   24cd0:	4b17      	ldr	r3, [pc, #92]	; (24d30 <gpio_nrfx_pin_interrupt_configure+0x104>)
   24cd2:	4298      	cmp	r0, r3
   24cd4:	d114      	bne.n	24d00 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
   24cd6:	4628      	mov	r0, r5
   24cd8:	f00e f944 	bl	32f64 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   24cdc:	4b15      	ldr	r3, [pc, #84]	; (24d34 <gpio_nrfx_pin_interrupt_configure+0x108>)
   24cde:	4298      	cmp	r0, r3
   24ce0:	d00e      	beq.n	24d00 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
   24ce2:	f06f 000b 	mvn.w	r0, #11
}
   24ce6:	b004      	add	sp, #16
   24ce8:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   24cea:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   24cee:	d005      	beq.n	24cfc <gpio_nrfx_pin_interrupt_configure+0xd0>
   24cf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   24cf4:	bf0c      	ite	eq
   24cf6:	2302      	moveq	r3, #2
   24cf8:	2301      	movne	r3, #1
   24cfa:	e7b2      	b.n	24c62 <gpio_nrfx_pin_interrupt_configure+0x36>
   24cfc:	2303      	movs	r3, #3
   24cfe:	e7b0      	b.n	24c62 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   24d00:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24d02:	2300      	movs	r3, #0
   24d04:	4620      	mov	r0, r4
   24d06:	4619      	mov	r1, r3
   24d08:	aa02      	add	r2, sp, #8
   24d0a:	f00d ffa1 	bl	32c50 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   24d0e:	4b09      	ldr	r3, [pc, #36]	; (24d34 <gpio_nrfx_pin_interrupt_configure+0x108>)
   24d10:	4298      	cmp	r0, r3
   24d12:	d104      	bne.n	24d1e <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   24d14:	2101      	movs	r1, #1
   24d16:	4620      	mov	r0, r4
   24d18:	f00e f92a 	bl	32f70 <nrfx_gpiote_trigger_enable>
   24d1c:	e795      	b.n	24c4a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   24d1e:	f06f 0004 	mvn.w	r0, #4
   24d22:	e7e0      	b.n	24ce6 <gpio_nrfx_pin_interrupt_configure+0xba>
   24d24:	0004556d 	.word	0x0004556d
   24d28:	0004494f 	.word	0x0004494f
   24d2c:	40842500 	.word	0x40842500
   24d30:	0bad0004 	.word	0x0bad0004
   24d34:	0bad0000 	.word	0x0bad0000

00024d38 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   24d38:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   24d3a:	f00e f903 	bl	32f44 <nrfx_gpiote_is_init>
   24d3e:	4604      	mov	r4, r0
   24d40:	b968      	cbnz	r0, 24d5e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   24d42:	f00e f8d7 	bl	32ef4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   24d46:	4b08      	ldr	r3, [pc, #32]	; (24d68 <gpio_nrfx_init+0x30>)
   24d48:	4298      	cmp	r0, r3
   24d4a:	d10a      	bne.n	24d62 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   24d4c:	4621      	mov	r1, r4
   24d4e:	4807      	ldr	r0, [pc, #28]	; (24d6c <gpio_nrfx_init+0x34>)
   24d50:	f00e f8a2 	bl	32e98 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   24d54:	4622      	mov	r2, r4
   24d56:	2105      	movs	r1, #5
   24d58:	2031      	movs	r0, #49	; 0x31
   24d5a:	f7fe f9b1 	bl	230c0 <z_arm_irq_priority_set>
		return 0;
   24d5e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   24d60:	bd10      	pop	{r4, pc}
		return -EIO;
   24d62:	f06f 0004 	mvn.w	r0, #4
   24d66:	e7fb      	b.n	24d60 <gpio_nrfx_init+0x28>
   24d68:	0bad0000 	.word	0x0bad0000
   24d6c:	00024d71 	.word	0x00024d71

00024d70 <nrfx_gpio_handler>:
{
   24d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   24d74:	0943      	lsrs	r3, r0, #5
   24d76:	d122      	bne.n	24dbe <nrfx_gpio_handler+0x4e>
	return list->head;
   24d78:	4b12      	ldr	r3, [pc, #72]	; (24dc4 <nrfx_gpio_handler+0x54>)
   24d7a:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24d7c:	b1fc      	cbz	r4, 24dbe <nrfx_gpio_handler+0x4e>
	gpio_fire_callbacks(list, port, BIT(pin));
   24d7e:	2601      	movs	r6, #1
	return node->next;
   24d80:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   24d82:	f8df 8048 	ldr.w	r8, [pc, #72]	; 24dcc <nrfx_gpio_handler+0x5c>
			__ASSERT(cb->handler, "No callback handler!");
   24d86:	4f10      	ldr	r7, [pc, #64]	; (24dc8 <nrfx_gpio_handler+0x58>)
   24d88:	f8df 9044 	ldr.w	r9, [pc, #68]	; 24dd0 <nrfx_gpio_handler+0x60>
   24d8c:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   24d8e:	68a3      	ldr	r3, [r4, #8]
   24d90:	421e      	tst	r6, r3
   24d92:	d010      	beq.n	24db6 <nrfx_gpio_handler+0x46>
			__ASSERT(cb->handler, "No callback handler!");
   24d94:	6863      	ldr	r3, [r4, #4]
   24d96:	b943      	cbnz	r3, 24daa <nrfx_gpio_handler+0x3a>
   24d98:	4639      	mov	r1, r7
   24d9a:	4648      	mov	r0, r9
   24d9c:	2245      	movs	r2, #69	; 0x45
   24d9e:	f018 f9f2 	bl	3d186 <assert_print>
   24da2:	2145      	movs	r1, #69	; 0x45
   24da4:	4638      	mov	r0, r7
   24da6:	f018 f9e7 	bl	3d178 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   24daa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   24dae:	4621      	mov	r1, r4
   24db0:	4640      	mov	r0, r8
   24db2:	4032      	ands	r2, r6
   24db4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24db6:	b115      	cbz	r5, 24dbe <nrfx_gpio_handler+0x4e>
   24db8:	462c      	mov	r4, r5
   24dba:	682d      	ldr	r5, [r5, #0]
   24dbc:	e7e7      	b.n	24d8e <nrfx_gpio_handler+0x1e>
}
   24dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24dc2:	bf00      	nop
   24dc4:	20019274 	.word	0x20019274
   24dc8:	00045540 	.word	0x00045540
   24dcc:	00042a88 	.word	0x00042a88
   24dd0:	0004494f 	.word	0x0004494f

00024dd4 <gpio_nrfx_pin_configure>:
{
   24dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   24dd8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24dda:	f001 051f 	and.w	r5, r1, #31
   24dde:	7b3b      	ldrb	r3, [r7, #12]
{
   24de0:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   24de2:	4614      	mov	r4, r2
{
   24de4:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24de6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   24dea:	b9ca      	cbnz	r2, 24e20 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   24dec:	a902      	add	r1, sp, #8
   24dee:	4628      	mov	r0, r5
   24df0:	f00e f858 	bl	32ea4 <nrfx_gpiote_channel_get>
   24df4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   24df6:	4628      	mov	r0, r5
   24df8:	f00e f950 	bl	3309c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   24dfc:	4b49      	ldr	r3, [pc, #292]	; (24f24 <gpio_nrfx_pin_configure+0x150>)
   24dfe:	4298      	cmp	r0, r3
   24e00:	d004      	beq.n	24e0c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   24e02:	f06f 0004 	mvn.w	r0, #4
}
   24e06:	b005      	add	sp, #20
   24e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   24e0c:	4284      	cmp	r4, r0
   24e0e:	d105      	bne.n	24e1c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   24e10:	f89d 0008 	ldrb.w	r0, [sp, #8]
   24e14:	f00e f8a0 	bl	32f58 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   24e18:	42a0      	cmp	r0, r4
   24e1a:	d1f2      	bne.n	24e02 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24e1c:	2000      	movs	r0, #0
   24e1e:	e7f2      	b.n	24e06 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   24e20:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   24e24:	f10d 0103 	add.w	r1, sp, #3
   24e28:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   24e2a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   24e2e:	f00e f839 	bl	32ea4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24e32:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   24e34:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24e36:	4649      	mov	r1, r9
   24e38:	4628      	mov	r0, r5
   24e3a:	aa02      	add	r2, sp, #8
   24e3c:	f00d ff08 	bl	32c50 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   24e40:	4b38      	ldr	r3, [pc, #224]	; (24f24 <gpio_nrfx_pin_configure+0x150>)
   24e42:	4298      	cmp	r0, r3
   24e44:	d002      	beq.n	24e4c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   24e46:	f06f 0015 	mvn.w	r0, #21
   24e4a:	e7dc      	b.n	24e06 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   24e4c:	4580      	cmp	r8, r0
   24e4e:	d103      	bne.n	24e58 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   24e50:	f89d 0003 	ldrb.w	r0, [sp, #3]
   24e54:	f00e f880 	bl	32f58 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   24e58:	03a3      	lsls	r3, r4, #14
   24e5a:	d54f      	bpl.n	24efc <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   24e5c:	f240 6306 	movw	r3, #1542	; 0x606
   24e60:	f240 2206 	movw	r2, #518	; 0x206
   24e64:	4023      	ands	r3, r4
   24e66:	4293      	cmp	r3, r2
   24e68:	d03a      	beq.n	24ee0 <gpio_nrfx_pin_configure+0x10c>
   24e6a:	d80c      	bhi.n	24e86 <gpio_nrfx_pin_configure+0xb2>
   24e6c:	2b06      	cmp	r3, #6
   24e6e:	d015      	beq.n	24e9c <gpio_nrfx_pin_configure+0xc8>
   24e70:	d804      	bhi.n	24e7c <gpio_nrfx_pin_configure+0xa8>
   24e72:	b19b      	cbz	r3, 24e9c <gpio_nrfx_pin_configure+0xc8>
   24e74:	2b02      	cmp	r3, #2
   24e76:	d1e6      	bne.n	24e46 <gpio_nrfx_pin_configure+0x72>
   24e78:	2304      	movs	r3, #4
   24e7a:	e00f      	b.n	24e9c <gpio_nrfx_pin_configure+0xc8>
   24e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24e80:	d1e1      	bne.n	24e46 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   24e82:	2301      	movs	r3, #1
   24e84:	e00a      	b.n	24e9c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   24e86:	f240 4202 	movw	r2, #1026	; 0x402
   24e8a:	4293      	cmp	r3, r2
   24e8c:	d02a      	beq.n	24ee4 <gpio_nrfx_pin_configure+0x110>
   24e8e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   24e92:	d029      	beq.n	24ee8 <gpio_nrfx_pin_configure+0x114>
   24e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24e98:	d1d5      	bne.n	24e46 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   24e9a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   24e9c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   24ea0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   24ea4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   24ea8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   24eaa:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   24eae:	bf4c      	ite	mi
   24eb0:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   24eb2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   24eb6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   24eb8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   24ebc:	d516      	bpl.n	24eec <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   24ebe:	2101      	movs	r1, #1
   24ec0:	687b      	ldr	r3, [r7, #4]
   24ec2:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   24ec6:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   24ec8:	2200      	movs	r2, #0
   24eca:	4628      	mov	r0, r5
   24ecc:	a901      	add	r1, sp, #4
   24ece:	f00d ff6b 	bl	32da8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24ed2:	4b14      	ldr	r3, [pc, #80]	; (24f24 <gpio_nrfx_pin_configure+0x150>)
   24ed4:	4298      	cmp	r0, r3
   24ed6:	bf14      	ite	ne
   24ed8:	f06f 0015 	mvnne.w	r0, #21
   24edc:	2000      	moveq	r0, #0
   24ede:	e792      	b.n	24e06 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   24ee0:	2307      	movs	r3, #7
   24ee2:	e7db      	b.n	24e9c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   24ee4:	2305      	movs	r3, #5
   24ee6:	e7d9      	b.n	24e9c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   24ee8:	2303      	movs	r3, #3
   24eea:	e7d7      	b.n	24e9c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   24eec:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   24eee:	bf41      	itttt	mi
   24ef0:	2101      	movmi	r1, #1
   24ef2:	687b      	ldrmi	r3, [r7, #4]
   24ef4:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   24ef8:	60de      	strmi	r6, [r3, #12]
}
   24efa:	e7e5      	b.n	24ec8 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   24efc:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24efe:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   24f02:	bf4c      	ite	mi
   24f04:	2403      	movmi	r4, #3
   24f06:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24f0a:	461a      	mov	r2, r3
   24f0c:	4628      	mov	r0, r5
   24f0e:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   24f10:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24f14:	f00d fe9c 	bl	32c50 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24f18:	4b02      	ldr	r3, [pc, #8]	; (24f24 <gpio_nrfx_pin_configure+0x150>)
   24f1a:	4298      	cmp	r0, r3
   24f1c:	f43f af7e 	beq.w	24e1c <gpio_nrfx_pin_configure+0x48>
   24f20:	e791      	b.n	24e46 <gpio_nrfx_pin_configure+0x72>
   24f22:	bf00      	nop
   24f24:	0bad0000 	.word	0x0bad0000

00024f28 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   24f28:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24f2a:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   24f2c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   24f30:	f00e ff48 	bl	33dc4 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   24f34:	4b03      	ldr	r3, [pc, #12]	; (24f44 <i2c_nrfx_twim_recover_bus+0x1c>)
   24f36:	4298      	cmp	r0, r3
}
   24f38:	bf14      	ite	ne
   24f3a:	f06f 000f 	mvnne.w	r0, #15
   24f3e:	2000      	moveq	r0, #0
   24f40:	bd08      	pop	{r3, pc}
   24f42:	bf00      	nop
   24f44:	0bad0000 	.word	0x0bad0000

00024f48 <init_twim>:
{
   24f48:	b538      	push	{r3, r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24f4a:	6905      	ldr	r5, [r0, #16]
{
   24f4c:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   24f4e:	462b      	mov	r3, r5
   24f50:	4a0a      	ldr	r2, [pc, #40]	; (24f7c <init_twim+0x34>)
   24f52:	6840      	ldr	r0, [r0, #4]
   24f54:	f105 0130 	add.w	r1, r5, #48	; 0x30
   24f58:	f00e fb2c 	bl	335b4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   24f5c:	4b08      	ldr	r3, [pc, #32]	; (24f80 <init_twim+0x38>)
   24f5e:	4298      	cmp	r0, r3
   24f60:	d007      	beq.n	24f72 <init_twim+0x2a>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   24f62:	4808      	ldr	r0, [pc, #32]	; (24f84 <init_twim+0x3c>)
   24f64:	2145      	movs	r1, #69	; 0x45
   24f66:	6822      	ldr	r2, [r4, #0]
   24f68:	f018 f947 	bl	3d1fa <z_log_minimal_printk>
   24f6c:	f06f 0004 	mvn.w	r0, #4
}
   24f70:	bd38      	pop	{r3, r4, r5, pc}
	dev_data->twim_initialized = true;
   24f72:	2301      	movs	r3, #1
	return 0;
   24f74:	2000      	movs	r0, #0
	dev_data->twim_initialized = true;
   24f76:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return 0;
   24f7a:	e7f9      	b.n	24f70 <init_twim+0x28>
   24f7c:	00024fe5 	.word	0x00024fe5
   24f80:	0bad0000 	.word	0x0bad0000
   24f84:	000455ab 	.word	0x000455ab

00024f88 <i2c_nrfx_twim_configure>:
{
   24f88:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   24f8a:	07cb      	lsls	r3, r1, #31
{
   24f8c:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   24f8e:	d409      	bmi.n	24fa4 <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(i2c_config)) {
   24f90:	f3c1 0142 	ubfx	r1, r1, #1, #3
   24f94:	2901      	cmp	r1, #1
   24f96:	d008      	beq.n	24faa <i2c_nrfx_twim_configure+0x22>
   24f98:	2902      	cmp	r1, #2
   24f9a:	d01b      	beq.n	24fd4 <i2c_nrfx_twim_configure+0x4c>
		LOG_ERR("unsupported speed");
   24f9c:	2145      	movs	r1, #69	; 0x45
   24f9e:	4810      	ldr	r0, [pc, #64]	; (24fe0 <i2c_nrfx_twim_configure+0x58>)
   24fa0:	f018 f92b 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   24fa4:	f06f 0015 	mvn.w	r0, #21
}
   24fa8:	bd38      	pop	{r3, r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
   24faa:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24fae:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   24fb0:	6baa      	ldr	r2, [r5, #56]	; 0x38
   24fb2:	4293      	cmp	r3, r2
   24fb4:	d011      	beq.n	24fda <i2c_nrfx_twim_configure+0x52>
		dev_data->twim_config.frequency = frequency;
   24fb6:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   24fb8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   24fbc:	b12b      	cbz	r3, 24fca <i2c_nrfx_twim_configure+0x42>
		nrfx_twim_uninit(&dev_config->twim);
   24fbe:	6860      	ldr	r0, [r4, #4]
   24fc0:	f00e fbc4 	bl	3374c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   24fc4:	2300      	movs	r3, #0
   24fc6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   24fca:	4620      	mov	r0, r4
}
   24fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   24fd0:	f7ff bfba 	b.w	24f48 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
   24fd4:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
   24fd8:	e7e9      	b.n	24fae <i2c_nrfx_twim_configure+0x26>
	return 0;
   24fda:	2000      	movs	r0, #0
   24fdc:	e7e4      	b.n	24fa8 <i2c_nrfx_twim_configure+0x20>
   24fde:	bf00      	nop
   24fe0:	000455d0 	.word	0x000455d0

00024fe4 <event_handler>:
	switch (p_event->type) {
   24fe4:	7803      	ldrb	r3, [r0, #0]
   24fe6:	2b01      	cmp	r3, #1
   24fe8:	d008      	beq.n	24ffc <event_handler+0x18>
   24fea:	2b02      	cmp	r3, #2
   24fec:	d008      	beq.n	25000 <event_handler+0x1c>
   24fee:	b94b      	cbnz	r3, 25004 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   24ff0:	4b05      	ldr	r3, [pc, #20]	; (25008 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   24ff2:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   24ff4:	f101 0018 	add.w	r0, r1, #24
   24ff8:	f012 b9ca 	b.w	37390 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   24ffc:	4b03      	ldr	r3, [pc, #12]	; (2500c <event_handler+0x28>)
   24ffe:	e7f8      	b.n	24ff2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   25000:	4b03      	ldr	r3, [pc, #12]	; (25010 <event_handler+0x2c>)
   25002:	e7f6      	b.n	24ff2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   25004:	4b03      	ldr	r3, [pc, #12]	; (25014 <event_handler+0x30>)
   25006:	e7f4      	b.n	24ff2 <event_handler+0xe>
   25008:	0bad0000 	.word	0x0bad0000
   2500c:	0bae0001 	.word	0x0bae0001
   25010:	0bae0002 	.word	0x0bae0002
   25014:	0bad0001 	.word	0x0bad0001

00025018 <i2c_nrfx_twim_transfer>:
{
   25018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2501c:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2501e:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   25022:	b08d      	sub	sp, #52	; 0x34
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   25024:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   25026:	f8b8 3008 	ldrh.w	r3, [r8, #8]
{
   2502a:	9205      	str	r2, [sp, #20]
   2502c:	4607      	mov	r7, r0
   2502e:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   25030:	2214      	movs	r2, #20
   25032:	2100      	movs	r1, #0
   25034:	a807      	add	r0, sp, #28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   25036:	9304      	str	r3, [sp, #16]
	uint8_t *msg_buf = dev_data->msg_buf;
   25038:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   2503c:	f01c fd90 	bl	41b60 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   25040:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   25044:	f88d 501d 	strb.w	r5, [sp, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   25048:	b1c3      	cbz	r3, 2507c <i2c_nrfx_twim_transfer+0x64>
	return z_impl_k_sem_take(sem, timeout);
   2504a:	f04f 32ff 	mov.w	r2, #4294967295
   2504e:	f04f 33ff 	mov.w	r3, #4294967295
   25052:	4630      	mov	r0, r6
   25054:	f012 f9d8 	bl	37408 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   25058:	f106 0b18 	add.w	fp, r6, #24
	for (size_t i = 0; i < num_msgs; i++) {
   2505c:	f04f 0900 	mov.w	r9, #0
   25060:	2200      	movs	r2, #0
   25062:	2300      	movs	r3, #0
   25064:	4658      	mov	r0, fp
   25066:	f012 f9cf 	bl	37408 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   2506a:	4640      	mov	r0, r8
   2506c:	f00e fb12 	bl	33694 <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
   25070:	464d      	mov	r5, r9
	for (size_t i = 0; i < num_msgs; i++) {
   25072:	9b05      	ldr	r3, [sp, #20]
   25074:	4599      	cmp	r9, r3
   25076:	d309      	bcc.n	2508c <i2c_nrfx_twim_transfer+0x74>
   25078:	2400      	movs	r4, #0
   2507a:	e02e      	b.n	250da <i2c_nrfx_twim_transfer+0xc2>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   2507c:	4638      	mov	r0, r7
   2507e:	f7ff ff63 	bl	24f48 <init_twim>
   25082:	2800      	cmp	r0, #0
   25084:	dae1      	bge.n	2504a <i2c_nrfx_twim_transfer+0x32>
		return -EIO;
   25086:	f06f 0404 	mvn.w	r4, #4
   2508a:	e02c      	b.n	250e6 <i2c_nrfx_twim_transfer+0xce>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   2508c:	7a21      	ldrb	r1, [r4, #8]
   2508e:	070b      	lsls	r3, r1, #28
   25090:	f100 80b7 	bmi.w	25202 <i2c_nrfx_twim_transfer+0x1ea>
				&& ((msgs[i].flags & I2C_MSG_READ)
   25094:	9a05      	ldr	r2, [sp, #20]
		bool concat_next = ((i + 1) < num_msgs)
   25096:	f109 0301 	add.w	r3, r9, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   2509a:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   2509c:	9302      	str	r3, [sp, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   2509e:	d20a      	bcs.n	250b6 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   250a0:	0788      	lsls	r0, r1, #30
   250a2:	d408      	bmi.n	250b6 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   250a4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   250a6:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   250aa:	f002 0201 	and.w	r2, r2, #1
   250ae:	f003 0304 	and.w	r3, r3, #4
   250b2:	4313      	orrs	r3, r2
   250b4:	d01b      	beq.n	250ee <i2c_nrfx_twim_transfer+0xd6>
		if (concat_next || (msg_buf_used != 0)) {
   250b6:	b375      	cbz	r5, 25116 <i2c_nrfx_twim_transfer+0xfe>
				&& ((msgs[i].flags & I2C_MSG_READ)
   250b8:	2300      	movs	r3, #0
   250ba:	9303      	str	r3, [sp, #12]
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   250bc:	6863      	ldr	r3, [r4, #4]
   250be:	9804      	ldr	r0, [sp, #16]
   250c0:	18ea      	adds	r2, r5, r3
   250c2:	4282      	cmp	r2, r0
   250c4:	d915      	bls.n	250f2 <i2c_nrfx_twim_transfer+0xda>
				LOG_ERR("Need to use concatenation buffer and "
   250c6:	683a      	ldr	r2, [r7, #0]
   250c8:	9000      	str	r0, [sp, #0]
   250ca:	9201      	str	r2, [sp, #4]
   250cc:	2145      	movs	r1, #69	; 0x45
   250ce:	462a      	mov	r2, r5
   250d0:	484d      	ldr	r0, [pc, #308]	; (25208 <i2c_nrfx_twim_transfer+0x1f0>)
   250d2:	f018 f892 	bl	3d1fa <z_log_minimal_printk>
				ret = -ENOSPC;
   250d6:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   250da:	4640      	mov	r0, r8
   250dc:	f00e fb02 	bl	336e4 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   250e0:	4630      	mov	r0, r6
   250e2:	f012 f955 	bl	37390 <z_impl_k_sem_give>
}
   250e6:	4620      	mov	r0, r4
   250e8:	b00d      	add	sp, #52	; 0x34
   250ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   250ee:	2301      	movs	r3, #1
   250f0:	e7e3      	b.n	250ba <i2c_nrfx_twim_transfer+0xa2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   250f2:	07c9      	lsls	r1, r1, #31
   250f4:	d405      	bmi.n	25102 <i2c_nrfx_twim_transfer+0xea>
   250f6:	461a      	mov	r2, r3
   250f8:	6821      	ldr	r1, [r4, #0]
   250fa:	eb0a 0005 	add.w	r0, sl, r5
   250fe:	f01c fd0f 	bl	41b20 <memcpy>
			msg_buf_used += msgs[i].len;
   25102:	6863      	ldr	r3, [r4, #4]
   25104:	441d      	add	r5, r3
		if (concat_next) {
   25106:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
   25108:	b2ad      	uxth	r5, r5
		if (concat_next) {
   2510a:	2b00      	cmp	r3, #0
   2510c:	d03a      	beq.n	25184 <i2c_nrfx_twim_transfer+0x16c>
		bool concat_next = ((i + 1) < num_msgs)
   2510e:	f8dd 9008 	ldr.w	r9, [sp, #8]
   25112:	340c      	adds	r4, #12
   25114:	e7ad      	b.n	25072 <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   25116:	07ca      	lsls	r2, r1, #31
   25118:	d51d      	bpl.n	25156 <i2c_nrfx_twim_transfer+0x13e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   2511a:	2500      	movs	r5, #0
   2511c:	6823      	ldr	r3, [r4, #0]
   2511e:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   25120:	6863      	ldr	r3, [r4, #4]
   25122:	9308      	str	r3, [sp, #32]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   25124:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   25126:	4640      	mov	r0, r8
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   25128:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   2512c:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   25130:	f88d 201c 	strb.w	r2, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   25134:	a907      	add	r1, sp, #28
   25136:	bf0c      	ite	eq
   25138:	2220      	moveq	r2, #32
   2513a:	2200      	movne	r2, #0
   2513c:	f00e fb56 	bl	337ec <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   25140:	4b32      	ldr	r3, [pc, #200]	; (2520c <i2c_nrfx_twim_transfer+0x1f4>)
   25142:	4298      	cmp	r0, r3
   25144:	d024      	beq.n	25190 <i2c_nrfx_twim_transfer+0x178>
			if (res == NRFX_ERROR_BUSY) {
   25146:	330b      	adds	r3, #11
				ret = -EIO;
   25148:	4298      	cmp	r0, r3
   2514a:	bf0c      	ite	eq
   2514c:	f06f 040f 	mvneq.w	r4, #15
   25150:	f06f 0404 	mvnne.w	r4, #4
   25154:	e7c1      	b.n	250da <i2c_nrfx_twim_transfer+0xc2>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   25156:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   25158:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2515c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   25160:	d0db      	beq.n	2511a <i2c_nrfx_twim_transfer+0x102>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   25162:	6862      	ldr	r2, [r4, #4]
   25164:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   25168:	4293      	cmp	r3, r2
   2516a:	d207      	bcs.n	2517c <i2c_nrfx_twim_transfer+0x164>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   2516c:	2145      	movs	r1, #69	; 0x45
   2516e:	683b      	ldr	r3, [r7, #0]
   25170:	4827      	ldr	r0, [pc, #156]	; (25210 <i2c_nrfx_twim_transfer+0x1f8>)
   25172:	f018 f842 	bl	3d1fa <z_log_minimal_printk>
				ret = -EINVAL;
   25176:	f06f 0415 	mvn.w	r4, #21
				break;
   2517a:	e7ae      	b.n	250da <i2c_nrfx_twim_transfer+0xc2>
   2517c:	4650      	mov	r0, sl
   2517e:	f01c fccf 	bl	41b20 <memcpy>
			msg_buf_used = msgs[i].len;
   25182:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   25184:	2d00      	cmp	r5, #0
   25186:	d0c8      	beq.n	2511a <i2c_nrfx_twim_transfer+0x102>
			cur_xfer.p_primary_buf = msg_buf;
   25188:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   2518c:	9508      	str	r5, [sp, #32]
   2518e:	e7c9      	b.n	25124 <i2c_nrfx_twim_transfer+0x10c>
	return z_impl_k_sem_take(sem, timeout);
   25190:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   25194:	2300      	movs	r3, #0
   25196:	4658      	mov	r0, fp
   25198:	f012 f936 	bl	37408 <z_impl_k_sem_take>
		if (ret != 0) {
   2519c:	b170      	cbz	r0, 251bc <i2c_nrfx_twim_transfer+0x1a4>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   2519e:	2145      	movs	r1, #69	; 0x45
   251a0:	464a      	mov	r2, r9
   251a2:	481c      	ldr	r0, [pc, #112]	; (25214 <i2c_nrfx_twim_transfer+0x1fc>)
   251a4:	f018 f829 	bl	3d1fa <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
   251a8:	4640      	mov	r0, r8
   251aa:	f00e fa9b 	bl	336e4 <nrfx_twim_disable>
   251ae:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   251b2:	f00e fe07 	bl	33dc4 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   251b6:	f06f 0404 	mvn.w	r4, #4
			break;
   251ba:	e78e      	b.n	250da <i2c_nrfx_twim_transfer+0xc2>
		res = dev_data->res;
   251bc:	6c72      	ldr	r2, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   251be:	4b13      	ldr	r3, [pc, #76]	; (2520c <i2c_nrfx_twim_transfer+0x1f4>)
   251c0:	429a      	cmp	r2, r3
   251c2:	d005      	beq.n	251d0 <i2c_nrfx_twim_transfer+0x1b8>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   251c4:	464b      	mov	r3, r9
   251c6:	2145      	movs	r1, #69	; 0x45
   251c8:	4813      	ldr	r0, [pc, #76]	; (25218 <i2c_nrfx_twim_transfer+0x200>)
   251ca:	f018 f816 	bl	3d1fa <z_log_minimal_printk>
   251ce:	e7f2      	b.n	251b6 <i2c_nrfx_twim_transfer+0x19e>
		if ((msgs[i].flags & I2C_MSG_READ)
   251d0:	7a23      	ldrb	r3, [r4, #8]
   251d2:	07db      	lsls	r3, r3, #31
   251d4:	d401      	bmi.n	251da <i2c_nrfx_twim_transfer+0x1c2>
		msg_buf_used = 0;
   251d6:	2500      	movs	r5, #0
   251d8:	e799      	b.n	2510e <i2c_nrfx_twim_transfer+0xf6>
		    && cur_xfer.p_primary_buf == msg_buf) {
   251da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   251dc:	459a      	cmp	sl, r3
   251de:	d1fa      	bne.n	251d6 <i2c_nrfx_twim_transfer+0x1be>
   251e0:	46a1      	mov	r9, r4
   251e2:	e007      	b.n	251f4 <i2c_nrfx_twim_transfer+0x1dc>
				msg_buf_used -= msgs[j].len;
   251e4:	1aa9      	subs	r1, r5, r2
   251e6:	b28d      	uxth	r5, r1
   251e8:	f8d9 000c 	ldr.w	r0, [r9, #12]
   251ec:	fa1a f181 	uxtah	r1, sl, r1
   251f0:	f01c fc96 	bl	41b20 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   251f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   251f8:	f1a9 090c 	sub.w	r9, r9, #12
   251fc:	4295      	cmp	r5, r2
   251fe:	d2f1      	bcs.n	251e4 <i2c_nrfx_twim_transfer+0x1cc>
   25200:	e7e9      	b.n	251d6 <i2c_nrfx_twim_transfer+0x1be>
			ret = -ENOTSUP;
   25202:	f06f 0485 	mvn.w	r4, #133	; 0x85
   25206:	e768      	b.n	250da <i2c_nrfx_twim_transfer+0xc2>
   25208:	000455e7 	.word	0x000455e7
   2520c:	0bad0000 	.word	0x0bad0000
   25210:	0004567c 	.word	0x0004567c
   25214:	000456e7 	.word	0x000456e7
   25218:	00045716 	.word	0x00045716

0002521c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2521c:	4b02      	ldr	r3, [pc, #8]	; (25228 <flash_nrf_pages_layout+0xc>)
   2521e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   25220:	2301      	movs	r3, #1
   25222:	6013      	str	r3, [r2, #0]
}
   25224:	4770      	bx	lr
   25226:	bf00      	nop
   25228:	20019280 	.word	0x20019280

0002522c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2522c:	4800      	ldr	r0, [pc, #0]	; (25230 <flash_nrf_get_parameters+0x4>)
   2522e:	4770      	bx	lr
   25230:	000432f8 	.word	0x000432f8

00025234 <flash_nrf_read>:
{
   25234:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25236:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   25238:	4619      	mov	r1, r3
   2523a:	4620      	mov	r0, r4
{
   2523c:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   2523e:	9301      	str	r3, [sp, #4]
   25240:	f019 fe38 	bl	3eeb4 <is_regular_addr_valid>
   25244:	9a01      	ldr	r2, [sp, #4]
   25246:	b948      	cbnz	r0, 2525c <flash_nrf_read+0x28>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   25248:	4613      	mov	r3, r2
   2524a:	480d      	ldr	r0, [pc, #52]	; (25280 <flash_nrf_read+0x4c>)
   2524c:	4622      	mov	r2, r4
   2524e:	2145      	movs	r1, #69	; 0x45
   25250:	f017 ffd3 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   25254:	f06f 0015 	mvn.w	r0, #21
}
   25258:	b003      	add	sp, #12
   2525a:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   2525c:	b16a      	cbz	r2, 2527a <flash_nrf_read+0x46>
	if (addr < PM_APP_ADDRESS) {
   2525e:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return soc_secure_mem_read(data, (void *)addr, len);
   25262:	4621      	mov	r1, r4
   25264:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   25266:	da04      	bge.n	25272 <flash_nrf_read+0x3e>
}
   25268:	b003      	add	sp, #12
   2526a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   2526e:	f017 bfaa 	b.w	3d1c6 <soc_secure_mem_read>
   25272:	f01c fc55 	bl	41b20 <memcpy>
	return 0;
   25276:	2000      	movs	r0, #0
   25278:	e7ee      	b.n	25258 <flash_nrf_read+0x24>
		return 0;
   2527a:	4610      	mov	r0, r2
   2527c:	e7ec      	b.n	25258 <flash_nrf_read+0x24>
   2527e:	bf00      	nop
   25280:	0004574e 	.word	0x0004574e

00025284 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   25284:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   25286:	2201      	movs	r2, #1
   25288:	4806      	ldr	r0, [pc, #24]	; (252a4 <nrf_flash_init+0x20>)
   2528a:	4611      	mov	r1, r2
   2528c:	f01c fa3c 	bl	41708 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   25290:	f01b f9a4 	bl	405dc <nrfx_nvmc_flash_page_count_get>
   25294:	4c04      	ldr	r4, [pc, #16]	; (252a8 <nrf_flash_init+0x24>)
   25296:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   25298:	f01b f99d 	bl	405d6 <nrfx_nvmc_flash_page_size_get>
   2529c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   2529e:	2000      	movs	r0, #0
   252a0:	bd10      	pop	{r4, pc}
   252a2:	bf00      	nop
   252a4:	20019288 	.word	0x20019288
   252a8:	20019280 	.word	0x20019280

000252ac <flash_nrf_erase>:
{
   252ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252ae:	460e      	mov	r6, r1
   252b0:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   252b2:	f01b f990 	bl	405d6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   252b6:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   252b8:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   252ba:	4630      	mov	r0, r6
   252bc:	f019 fdfa 	bl	3eeb4 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   252c0:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   252c2:	b348      	cbz	r0, 25318 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   252c4:	fbb6 f3f5 	udiv	r3, r6, r5
   252c8:	fb05 6313 	mls	r3, r5, r3, r6
   252cc:	b923      	cbnz	r3, 252d8 <flash_nrf_erase+0x2c>
   252ce:	fbb4 f3f5 	udiv	r3, r4, r5
   252d2:	fb05 4013 	mls	r0, r5, r3, r4
   252d6:	b140      	cbz	r0, 252ea <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   252d8:	4623      	mov	r3, r4
   252da:	4632      	mov	r2, r6
   252dc:	2145      	movs	r1, #69	; 0x45
   252de:	4811      	ldr	r0, [pc, #68]	; (25324 <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   252e0:	f017 ff8b 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   252e4:	f06f 0015 	mvn.w	r0, #21
   252e8:	e015      	b.n	25316 <flash_nrf_erase+0x6a>
		if (!n_pages) {
   252ea:	42a5      	cmp	r5, r4
   252ec:	d813      	bhi.n	25316 <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   252ee:	f04f 32ff 	mov.w	r2, #4294967295
   252f2:	f04f 33ff 	mov.w	r3, #4294967295
   252f6:	480c      	ldr	r0, [pc, #48]	; (25328 <flash_nrf_erase+0x7c>)
   252f8:	f012 f886 	bl	37408 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   252fc:	f01b f96b 	bl	405d6 <nrfx_nvmc_flash_page_size_get>
   25300:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   25302:	4638      	mov	r0, r7
   25304:	f00e f8c4 	bl	33490 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   25308:	1b64      	subs	r4, r4, r5
   2530a:	442f      	add	r7, r5
   2530c:	d1f9      	bne.n	25302 <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
   2530e:	4806      	ldr	r0, [pc, #24]	; (25328 <flash_nrf_erase+0x7c>)
   25310:	f012 f83e 	bl	37390 <z_impl_k_sem_give>
	return ret;
   25314:	4620      	mov	r0, r4
}
   25316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   25318:	4623      	mov	r3, r4
   2531a:	4632      	mov	r2, r6
   2531c:	2145      	movs	r1, #69	; 0x45
   2531e:	4803      	ldr	r0, [pc, #12]	; (2532c <flash_nrf_erase+0x80>)
   25320:	e7de      	b.n	252e0 <flash_nrf_erase+0x34>
   25322:	bf00      	nop
   25324:	00045770 	.word	0x00045770
   25328:	20019288 	.word	0x20019288
   2532c:	0004574e 	.word	0x0004574e

00025330 <flash_nrf_write>:
{
   25330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25332:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   25334:	4619      	mov	r1, r3
   25336:	4630      	mov	r0, r6
{
   25338:	4617      	mov	r7, r2
   2533a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2533c:	f019 fdba 	bl	3eeb4 <is_regular_addr_valid>
   25340:	b940      	cbnz	r0, 25354 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   25342:	4623      	mov	r3, r4
   25344:	4632      	mov	r2, r6
   25346:	2145      	movs	r1, #69	; 0x45
   25348:	4817      	ldr	r0, [pc, #92]	; (253a8 <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2534a:	f017 ff56 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2534e:	f06f 0015 	mvn.w	r0, #21
}
   25352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   25354:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   25358:	f015 0503 	ands.w	r5, r5, #3
   2535c:	d004      	beq.n	25368 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2535e:	4623      	mov	r3, r4
   25360:	4632      	mov	r2, r6
   25362:	2145      	movs	r1, #69	; 0x45
   25364:	4811      	ldr	r0, [pc, #68]	; (253ac <flash_nrf_write+0x7c>)
   25366:	e7f0      	b.n	2534a <flash_nrf_write+0x1a>
	if (!len) {
   25368:	b1dc      	cbz	r4, 253a2 <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
   2536a:	f04f 32ff 	mov.w	r2, #4294967295
   2536e:	f04f 33ff 	mov.w	r3, #4294967295
   25372:	480f      	ldr	r0, [pc, #60]	; (253b0 <flash_nrf_write+0x80>)
   25374:	f012 f848 	bl	37408 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   25378:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   2537c:	42ac      	cmp	r4, r5
   2537e:	eb05 0006 	add.w	r0, r5, r6
   25382:	d109      	bne.n	25398 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   25384:	4a0b      	ldr	r2, [pc, #44]	; (253b4 <flash_nrf_write+0x84>)
   25386:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2538a:	07db      	lsls	r3, r3, #31
   2538c:	d5fb      	bpl.n	25386 <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
   2538e:	4808      	ldr	r0, [pc, #32]	; (253b0 <flash_nrf_write+0x80>)
   25390:	f011 fffe 	bl	37390 <z_impl_k_sem_give>
	return ret;
   25394:	2000      	movs	r0, #0
}
   25396:	e7dc      	b.n	25352 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   25398:	5979      	ldr	r1, [r7, r5]
   2539a:	f00e f8a9 	bl	334f0 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2539e:	3504      	adds	r5, #4
}
   253a0:	e7ec      	b.n	2537c <flash_nrf_write+0x4c>
		return 0;
   253a2:	4620      	mov	r0, r4
   253a4:	e7d5      	b.n	25352 <flash_nrf_write+0x22>
   253a6:	bf00      	nop
   253a8:	0004574e 	.word	0x0004574e
   253ac:	00045794 	.word	0x00045794
   253b0:	20019288 	.word	0x20019288
   253b4:	40039000 	.word	0x40039000

000253b8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   253b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   253ba:	794b      	ldrb	r3, [r1, #5]
   253bc:	2b01      	cmp	r3, #1
   253be:	d026      	beq.n	2540e <uarte_nrfx_configure+0x56>
   253c0:	2b03      	cmp	r3, #3
   253c2:	d121      	bne.n	25408 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   253c4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   253c6:	798b      	ldrb	r3, [r1, #6]
   253c8:	2b03      	cmp	r3, #3
   253ca:	d11d      	bne.n	25408 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   253cc:	79cc      	ldrb	r4, [r1, #7]
   253ce:	b10c      	cbz	r4, 253d4 <uarte_nrfx_configure+0x1c>
   253d0:	2c01      	cmp	r4, #1
   253d2:	d119      	bne.n	25408 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   253d4:	790a      	ldrb	r2, [r1, #4]
   253d6:	b112      	cbz	r2, 253de <uarte_nrfx_configure+0x26>
   253d8:	2a02      	cmp	r2, #2
   253da:	d115      	bne.n	25408 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   253dc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   253de:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   253e0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   253e2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   253e6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   253e8:	d065      	beq.n	254b6 <uarte_nrfx_configure+0xfe>
   253ea:	d82d      	bhi.n	25448 <uarte_nrfx_configure+0x90>
   253ec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   253f0:	d064      	beq.n	254bc <uarte_nrfx_configure+0x104>
   253f2:	d816      	bhi.n	25422 <uarte_nrfx_configure+0x6a>
   253f4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   253f8:	d062      	beq.n	254c0 <uarte_nrfx_configure+0x108>
   253fa:	d80a      	bhi.n	25412 <uarte_nrfx_configure+0x5a>
   253fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   25400:	d061      	beq.n	254c6 <uarte_nrfx_configure+0x10e>
   25402:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   25406:	d061      	beq.n	254cc <uarte_nrfx_configure+0x114>
   25408:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2540c:	e052      	b.n	254b4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   2540e:	2600      	movs	r6, #0
   25410:	e7d9      	b.n	253c6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   25412:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   25416:	d05c      	beq.n	254d2 <uarte_nrfx_configure+0x11a>
   25418:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2541c:	d1f4      	bne.n	25408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2541e:	4b37      	ldr	r3, [pc, #220]	; (254fc <uarte_nrfx_configure+0x144>)
   25420:	e03c      	b.n	2549c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   25422:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   25426:	d057      	beq.n	254d8 <uarte_nrfx_configure+0x120>
   25428:	d807      	bhi.n	2543a <uarte_nrfx_configure+0x82>
   2542a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2542e:	d055      	beq.n	254dc <uarte_nrfx_configure+0x124>
   25430:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   25434:	d1e8      	bne.n	25408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   25436:	4b32      	ldr	r3, [pc, #200]	; (25500 <uarte_nrfx_configure+0x148>)
   25438:	e030      	b.n	2549c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2543a:	f647 2712 	movw	r7, #31250	; 0x7a12
   2543e:	42bb      	cmp	r3, r7
   25440:	d1e2      	bne.n	25408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   25442:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   25446:	e029      	b.n	2549c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   25448:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2544c:	d048      	beq.n	254e0 <uarte_nrfx_configure+0x128>
   2544e:	d813      	bhi.n	25478 <uarte_nrfx_configure+0xc0>
   25450:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   25454:	d047      	beq.n	254e6 <uarte_nrfx_configure+0x12e>
   25456:	d809      	bhi.n	2546c <uarte_nrfx_configure+0xb4>
   25458:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   2545c:	42bb      	cmp	r3, r7
   2545e:	d044      	beq.n	254ea <uarte_nrfx_configure+0x132>
   25460:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   25464:	d1d0      	bne.n	25408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   25466:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2546a:	e017      	b.n	2549c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2546c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   25470:	d1ca      	bne.n	25408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   25472:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   25476:	e011      	b.n	2549c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   25478:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2547c:	d038      	beq.n	254f0 <uarte_nrfx_configure+0x138>
   2547e:	d808      	bhi.n	25492 <uarte_nrfx_configure+0xda>
   25480:	4f20      	ldr	r7, [pc, #128]	; (25504 <uarte_nrfx_configure+0x14c>)
   25482:	42bb      	cmp	r3, r7
   25484:	d037      	beq.n	254f6 <uarte_nrfx_configure+0x13e>
   25486:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2548a:	d1bd      	bne.n	25408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2548c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   25490:	e004      	b.n	2549c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   25492:	4f1d      	ldr	r7, [pc, #116]	; (25508 <uarte_nrfx_configure+0x150>)
   25494:	42bb      	cmp	r3, r7
   25496:	d1b7      	bne.n	25408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   25498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   2549c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   2549e:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   254a0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   254a4:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   254a6:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   254a8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   254ac:	c903      	ldmia	r1, {r0, r1}
   254ae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   254b2:	2000      	movs	r0, #0
}
   254b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   254b6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   254ba:	e7ef      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   254bc:	4b13      	ldr	r3, [pc, #76]	; (2550c <uarte_nrfx_configure+0x154>)
   254be:	e7ed      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   254c0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   254c4:	e7ea      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   254c6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   254ca:	e7e7      	b.n	2549c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   254cc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   254d0:	e7e4      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   254d2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   254d6:	e7e1      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   254d8:	4b0d      	ldr	r3, [pc, #52]	; (25510 <uarte_nrfx_configure+0x158>)
   254da:	e7df      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   254dc:	4b0d      	ldr	r3, [pc, #52]	; (25514 <uarte_nrfx_configure+0x15c>)
   254de:	e7dd      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   254e0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   254e4:	e7da      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   254e6:	4b0c      	ldr	r3, [pc, #48]	; (25518 <uarte_nrfx_configure+0x160>)
   254e8:	e7d8      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   254ea:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   254ee:	e7d5      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   254f0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   254f4:	e7d2      	b.n	2549c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   254f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   254fa:	e7cf      	b.n	2549c <uarte_nrfx_configure+0xe4>
   254fc:	0013b000 	.word	0x0013b000
   25500:	004ea000 	.word	0x004ea000
   25504:	0003d090 	.word	0x0003d090
   25508:	000f4240 	.word	0x000f4240
   2550c:	00275000 	.word	0x00275000
   25510:	0075c000 	.word	0x0075c000
   25514:	003af000 	.word	0x003af000
   25518:	013a9000 	.word	0x013a9000

0002551c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2551c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25520:	4607      	mov	r7, r0
   25522:	2200      	movs	r2, #0
   25524:	2101      	movs	r1, #1
   25526:	2008      	movs	r0, #8
   25528:	f7fd fdca 	bl	230c0 <z_arm_irq_priority_set>
   2552c:	2008      	movs	r0, #8
   2552e:	f7fd fd95 	bl	2305c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   25532:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   25534:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   25538:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   2553a:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2553e:	f8d8 900c 	ldr.w	r9, [r8, #12]
   25542:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   25546:	4648      	mov	r0, r9
	data->dev = dev;
   25548:	6037      	str	r7, [r6, #0]
   2554a:	aa01      	add	r2, sp, #4
   2554c:	f019 fea5 	bl	3f29a <pinctrl_lookup_state>
	if (ret < 0) {
   25550:	1e05      	subs	r5, r0, #0
   25552:	db1f      	blt.n	25594 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   25554:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   25556:	f8d9 2000 	ldr.w	r2, [r9]
   2555a:	7919      	ldrb	r1, [r3, #4]
   2555c:	6818      	ldr	r0, [r3, #0]
   2555e:	f019 fef2 	bl	3f346 <pinctrl_configure_pins>
	if (err < 0) {
   25562:	1e05      	subs	r5, r0, #0
   25564:	db16      	blt.n	25594 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   25566:	4638      	mov	r0, r7
   25568:	1d31      	adds	r1, r6, #4
   2556a:	f7ff ff25 	bl	253b8 <uarte_nrfx_configure>
	if (err) {
   2556e:	4605      	mov	r5, r0
   25570:	b980      	cbnz	r0, 25594 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   25572:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   25576:	0799      	lsls	r1, r3, #30
   25578:	d52b      	bpl.n	255d2 <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2557a:	f106 0016 	add.w	r0, r6, #22
   2557e:	f00d fa9d 	bl	32abc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   25582:	4b29      	ldr	r3, [pc, #164]	; (25628 <uarte_0_init+0x10c>)
   25584:	4298      	cmp	r0, r3
   25586:	d009      	beq.n	2559c <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   25588:	2145      	movs	r1, #69	; 0x45
   2558a:	4828      	ldr	r0, [pc, #160]	; (2562c <uarte_0_init+0x110>)
   2558c:	f017 fe35 	bl	3d1fa <z_log_minimal_printk>
		return -EIO;
   25590:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   25594:	4628      	mov	r0, r5
   25596:	b003      	add	sp, #12
   25598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   2559c:	7db7      	ldrb	r7, [r6, #22]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   2559e:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   255a2:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
   255a6:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   255aa:	d10a      	bne.n	255c2 <uarte_0_init+0xa6>
   255ac:	4920      	ldr	r1, [pc, #128]	; (25630 <uarte_0_init+0x114>)
   255ae:	4821      	ldr	r0, [pc, #132]	; (25634 <uarte_0_init+0x118>)
   255b0:	f240 224e 	movw	r2, #590	; 0x24e
   255b4:	f017 fde7 	bl	3d186 <assert_print>
   255b8:	f240 214e 	movw	r1, #590	; 0x24e
   255bc:	481c      	ldr	r0, [pc, #112]	; (25630 <uarte_0_init+0x114>)
   255be:	f017 fddb 	bl	3d178 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   255c2:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   255c4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
   255c8:	7db2      	ldrb	r2, [r6, #22]
   255ca:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   255cc:	4a1a      	ldr	r2, [pc, #104]	; (25638 <uarte_0_init+0x11c>)
   255ce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   255d2:	2308      	movs	r3, #8
   255d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   255d8:	f898 3008 	ldrb.w	r3, [r8, #8]
   255dc:	b95b      	cbnz	r3, 255f6 <uarte_0_init+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   255de:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   255e2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   255e6:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   255ea:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   255ee:	2301      	movs	r3, #1
   255f0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   255f4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   255f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   255fa:	3614      	adds	r6, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   255fc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   255fe:	bf5c      	itt	pl
   25600:	f44f 7280 	movpl.w	r2, #256	; 0x100
   25604:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25608:	06db      	lsls	r3, r3, #27
   2560a:	bf44      	itt	mi
   2560c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   25610:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   25614:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25616:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2561a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2561e:	2301      	movs	r3, #1
   25620:	60a3      	str	r3, [r4, #8]
   25622:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   25624:	e7b6      	b.n	25594 <uarte_0_init+0x78>
   25626:	bf00      	nop
   25628:	0bad0000 	.word	0x0bad0000
   2562c:	000457c1 	.word	0x000457c1
   25630:	000457e5 	.word	0x000457e5
   25634:	0004494f 	.word	0x0004494f
   25638:	40017000 	.word	0x40017000

0002563c <uarte_nrfx_poll_out>:
{
   2563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2563e:	4605      	mov	r5, r0
   25640:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   25642:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   25644:	f01c f826 	bl	41694 <k_is_in_isr>
   25648:	b910      	cbnz	r0, 25650 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2564a:	4b20      	ldr	r3, [pc, #128]	; (256cc <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
   2564c:	781b      	ldrb	r3, [r3, #0]
   2564e:	b983      	cbnz	r3, 25672 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   25650:	f04f 0320 	mov.w	r3, #32
   25654:	f3ef 8411 	mrs	r4, BASEPRI
   25658:	f383 8812 	msr	BASEPRI_MAX, r3
   2565c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   25660:	6868      	ldr	r0, [r5, #4]
   25662:	f019 fd65 	bl	3f130 <is_tx_ready.isra.0>
   25666:	bb28      	cbnz	r0, 256b4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   25668:	f384 8811 	msr	BASEPRI, r4
   2566c:	f3bf 8f6f 	isb	sy
}
   25670:	e7ee      	b.n	25650 <uarte_nrfx_poll_out+0x14>
{
   25672:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   25674:	6868      	ldr	r0, [r5, #4]
   25676:	f019 fd5b 	bl	3f130 <is_tx_ready.isra.0>
   2567a:	b970      	cbnz	r0, 2569a <uarte_nrfx_poll_out+0x5e>
   2567c:	2001      	movs	r0, #1
   2567e:	f01a ff30 	bl	404e2 <nrfx_busy_wait>
   25682:	3c01      	subs	r4, #1
   25684:	d1f6      	bne.n	25674 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   25686:	2100      	movs	r1, #0
   25688:	2021      	movs	r0, #33	; 0x21
   2568a:	f013 facd 	bl	38c28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2568e:	e7f0      	b.n	25672 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   25690:	f384 8811 	msr	BASEPRI, r4
   25694:	f3bf 8f6f 	isb	sy
}
   25698:	e7f5      	b.n	25686 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   2569a:	f04f 0320 	mov.w	r3, #32
   2569e:	f3ef 8411 	mrs	r4, BASEPRI
   256a2:	f383 8812 	msr	BASEPRI_MAX, r3
   256a6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   256aa:	6868      	ldr	r0, [r5, #4]
   256ac:	f019 fd40 	bl	3f130 <is_tx_ready.isra.0>
   256b0:	2800      	cmp	r0, #0
   256b2:	d0ed      	beq.n	25690 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
   256b4:	4631      	mov	r1, r6
   256b6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   256ba:	2201      	movs	r2, #1
   256bc:	6868      	ldr	r0, [r5, #4]
   256be:	f019 fd1c 	bl	3f0fa <tx_start.isra.0>
	__asm__ volatile(
   256c2:	f384 8811 	msr	BASEPRI, r4
   256c6:	f3bf 8f6f 	isb	sy
}
   256ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   256cc:	2001d3e6 	.word	0x2001d3e6

000256d0 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   256d0:	b538      	push	{r3, r4, r5, lr}
   256d2:	460c      	mov	r4, r1
   256d4:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(dev != NULL);
   256d6:	b940      	cbnz	r0, 256ea <entropy_cc3xx_rng_get_entropy+0x1a>
   256d8:	490d      	ldr	r1, [pc, #52]	; (25710 <entropy_cc3xx_rng_get_entropy+0x40>)
   256da:	480e      	ldr	r0, [pc, #56]	; (25714 <entropy_cc3xx_rng_get_entropy+0x44>)
   256dc:	2220      	movs	r2, #32
   256de:	f017 fd52 	bl	3d186 <assert_print>
   256e2:	2120      	movs	r1, #32
   256e4:	480a      	ldr	r0, [pc, #40]	; (25710 <entropy_cc3xx_rng_get_entropy+0x40>)
   256e6:	f017 fd47 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   256ea:	b944      	cbnz	r4, 256fe <entropy_cc3xx_rng_get_entropy+0x2e>
   256ec:	4908      	ldr	r1, [pc, #32]	; (25710 <entropy_cc3xx_rng_get_entropy+0x40>)
   256ee:	4809      	ldr	r0, [pc, #36]	; (25714 <entropy_cc3xx_rng_get_entropy+0x44>)
   256f0:	2221      	movs	r2, #33	; 0x21
   256f2:	f017 fd48 	bl	3d186 <assert_print>
   256f6:	2121      	movs	r1, #33	; 0x21
   256f8:	4805      	ldr	r0, [pc, #20]	; (25710 <entropy_cc3xx_rng_get_entropy+0x40>)
   256fa:	f017 fd3d 	bl	3d178 <assert_post_action>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   256fe:	4629      	mov	r1, r5
   25700:	4620      	mov	r0, r4
   25702:	f014 fc31 	bl	39f68 <psa_generate_random>
	int err = EINVAL;
   25706:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   25708:	bf18      	it	ne
   2570a:	2016      	movne	r0, #22
   2570c:	bd38      	pop	{r3, r4, r5, pc}
   2570e:	bf00      	nop
   25710:	00045834 	.word	0x00045834
   25714:	0004494f 	.word	0x0004494f

00025718 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   25718:	2301      	movs	r3, #1
   2571a:	4083      	lsls	r3, r0
{
   2571c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2571e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25720:	4a0c      	ldr	r2, [pc, #48]	; (25754 <compare_int_lock+0x3c>)
   25722:	e8d2 1fef 	ldaex	r1, [r2]
   25726:	ea01 0c04 	and.w	ip, r1, r4
   2572a:	e8c2 cfee 	stlex	lr, ip, [r2]
   2572e:	f1be 0f00 	cmp.w	lr, #0
   25732:	d1f6      	bne.n	25722 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   25734:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25738:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2573c:	4a06      	ldr	r2, [pc, #24]	; (25758 <compare_int_lock+0x40>)
   2573e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   25742:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25746:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2574a:	420b      	tst	r3, r1
}
   2574c:	bf14      	ite	ne
   2574e:	2001      	movne	r0, #1
   25750:	2000      	moveq	r0, #0
   25752:	bd10      	pop	{r4, pc}
   25754:	200192a4 	.word	0x200192a4
   25758:	40015000 	.word	0x40015000

0002575c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2575c:	4919      	ldr	r1, [pc, #100]	; (257c4 <sys_clock_timeout_handler+0x68>)
{
   2575e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25760:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   25762:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25766:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   25768:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2576c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25770:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   25772:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   25776:	d222      	bcs.n	257be <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   25778:	4b13      	ldr	r3, [pc, #76]	; (257c8 <sys_clock_timeout_handler+0x6c>)
   2577a:	681b      	ldr	r3, [r3, #0]
   2577c:	0a1a      	lsrs	r2, r3, #8
   2577e:	061b      	lsls	r3, r3, #24
   25780:	195e      	adds	r6, r3, r5
   25782:	4b12      	ldr	r3, [pc, #72]	; (257cc <sys_clock_timeout_handler+0x70>)
   25784:	f142 0700 	adc.w	r7, r2, #0
   25788:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   2578c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2578e:	f013 fd91 	bl	392b4 <sys_clock_announce>
    return p_reg->CC[ch];
   25792:	00a3      	lsls	r3, r4, #2
   25794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25798:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2579c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   257a0:	42aa      	cmp	r2, r5
   257a2:	d10b      	bne.n	257bc <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   257a4:	b91e      	cbnz	r6, 257ae <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   257a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   257aa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   257ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   257b2:	4b07      	ldr	r3, [pc, #28]	; (257d0 <sys_clock_timeout_handler+0x74>)
   257b4:	fa00 f404 	lsl.w	r4, r0, r4
   257b8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   257bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   257be:	2600      	movs	r6, #0
   257c0:	e7e5      	b.n	2578e <sys_clock_timeout_handler+0x32>
   257c2:	bf00      	nop
   257c4:	200153f8 	.word	0x200153f8
   257c8:	200192a8 	.word	0x200192a8
   257cc:	200153e0 	.word	0x200153e0
   257d0:	40015000 	.word	0x40015000

000257d4 <compare_int_unlock>:
	if (key) {
   257d4:	b1e1      	cbz	r1, 25810 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
   257d6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   257d8:	4a0e      	ldr	r2, [pc, #56]	; (25814 <compare_int_unlock+0x40>)
   257da:	4083      	lsls	r3, r0
   257dc:	e8d2 1fef 	ldaex	r1, [r2]
   257e0:	4319      	orrs	r1, r3
   257e2:	e8c2 1fec 	stlex	ip, r1, [r2]
   257e6:	f1bc 0f00 	cmp.w	ip, #0
   257ea:	d1f7      	bne.n	257dc <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   257ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   257f0:	4a09      	ldr	r2, [pc, #36]	; (25818 <compare_int_unlock+0x44>)
   257f2:	4083      	lsls	r3, r0
   257f4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   257f8:	4b08      	ldr	r3, [pc, #32]	; (2581c <compare_int_unlock+0x48>)
   257fa:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   257fe:	fa23 f000 	lsr.w	r0, r3, r0
   25802:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25804:	bf42      	ittt	mi
   25806:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   2580a:	4b05      	ldrmi	r3, [pc, #20]	; (25820 <compare_int_unlock+0x4c>)
   2580c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   25810:	4770      	bx	lr
   25812:	bf00      	nop
   25814:	200192a4 	.word	0x200192a4
   25818:	40015000 	.word	0x40015000
   2581c:	200192a0 	.word	0x200192a0
   25820:	e000e100 	.word	0xe000e100

00025824 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   25824:	4b0d      	ldr	r3, [pc, #52]	; (2585c <z_nrf_rtc_timer_read+0x38>)
   25826:	6818      	ldr	r0, [r3, #0]
   25828:	0a01      	lsrs	r1, r0, #8
   2582a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2582c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   25830:	4b0b      	ldr	r3, [pc, #44]	; (25860 <z_nrf_rtc_timer_read+0x3c>)
   25832:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   25836:	1818      	adds	r0, r3, r0
   25838:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2583c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25840:	d20a      	bcs.n	25858 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   25842:	4b08      	ldr	r3, [pc, #32]	; (25864 <z_nrf_rtc_timer_read+0x40>)
   25844:	e9d3 2300 	ldrd	r2, r3, [r3]
   25848:	4290      	cmp	r0, r2
   2584a:	eb71 0303 	sbcs.w	r3, r1, r3
   2584e:	d203      	bcs.n	25858 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   25850:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   25854:	f141 0100 	adc.w	r1, r1, #0
}
   25858:	4770      	bx	lr
   2585a:	bf00      	nop
   2585c:	200192a8 	.word	0x200192a8
   25860:	40015000 	.word	0x40015000
   25864:	200153e0 	.word	0x200153e0

00025868 <compare_set>:
{
   25868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2586c:	ed2d 8b02 	vpush	{d8}
   25870:	b085      	sub	sp, #20
   25872:	4616      	mov	r6, r2
   25874:	4698      	mov	r8, r3
   25876:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   25878:	f7ff ff4e 	bl	25718 <compare_int_lock>
   2587c:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   25880:	f7ff ffd0 	bl	25824 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   25884:	42b0      	cmp	r0, r6
   25886:	eb71 0308 	sbcs.w	r3, r1, r8
   2588a:	d279      	bcs.n	25980 <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
   2588c:	4b44      	ldr	r3, [pc, #272]	; (259a0 <compare_set+0x138>)
   2588e:	1a30      	subs	r0, r6, r0
   25890:	eb68 0101 	sbc.w	r1, r8, r1
   25894:	4298      	cmp	r0, r3
   25896:	f171 0300 	sbcs.w	r3, r1, #0
   2589a:	d27e      	bcs.n	2599a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   2589c:	4b41      	ldr	r3, [pc, #260]	; (259a4 <compare_set+0x13c>)
   2589e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   258a2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   258a6:	45d8      	cmp	r8, fp
   258a8:	bf08      	it	eq
   258aa:	4556      	cmpeq	r6, sl
   258ac:	d050      	beq.n	25950 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   258ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   258b2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   258b6:	4614      	mov	r4, r2
   258b8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   258bc:	f105 0750 	add.w	r7, r5, #80	; 0x50
   258c0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   258c4:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   258c6:	40ab      	lsls	r3, r5
   258c8:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   258cc:	b2bf      	uxth	r7, r7
   258ce:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   258d2:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   258d4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   258d8:	4b33      	ldr	r3, [pc, #204]	; (259a8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   258da:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
   258de:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   258e2:	1a40      	subs	r0, r0, r1
   258e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   258e8:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   258ec:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   258ee:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   258f2:	d107      	bne.n	25904 <compare_set+0x9c>
   258f4:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   258f8:	2013      	movs	r0, #19
   258fa:	f01b ffa3 	bl	41844 <z_impl_k_busy_wait>
   258fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   25902:	4b29      	ldr	r3, [pc, #164]	; (259a8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   25904:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   25908:	eba4 000c 	sub.w	r0, r4, ip
   2590c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   25910:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25914:	bf88      	it	hi
   25916:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25918:	2000      	movs	r0, #0
   2591a:	6038      	str	r0, [r7, #0]
   2591c:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   2591e:	9801      	ldr	r0, [sp, #4]
   25920:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   25924:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   25928:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2592c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   25930:	4281      	cmp	r1, r0
   25932:	d006      	beq.n	25942 <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
   25934:	1a20      	subs	r0, r4, r0
   25936:	3802      	subs	r0, #2
   25938:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2593c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25940:	d81c      	bhi.n	2597c <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
   25942:	1aa4      	subs	r4, r4, r2
   25944:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   25948:	eb14 0a06 	adds.w	sl, r4, r6
   2594c:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
   25950:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   25952:	4914      	ldr	r1, [pc, #80]	; (259a4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   25954:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
   25956:	012b      	lsls	r3, r5, #4
   25958:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
   2595c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   2595e:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
   25962:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25964:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   25966:	4628      	mov	r0, r5
   25968:	ee18 1a10 	vmov	r1, s16
   2596c:	f7ff ff32 	bl	257d4 <compare_int_unlock>
}
   25970:	4620      	mov	r0, r4
   25972:	b005      	add	sp, #20
   25974:	ecbd 8b02 	vpop	{d8}
   25978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2597c:	4620      	mov	r0, r4
   2597e:	e7ae      	b.n	258de <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   25980:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25982:	4a0a      	ldr	r2, [pc, #40]	; (259ac <compare_set+0x144>)
   25984:	40ab      	lsls	r3, r5
   25986:	e8d2 1fef 	ldaex	r1, [r2]
   2598a:	4319      	orrs	r1, r3
   2598c:	e8c2 1fe0 	stlex	r0, r1, [r2]
   25990:	2800      	cmp	r0, #0
   25992:	d1f8      	bne.n	25986 <compare_set+0x11e>
   25994:	46b2      	mov	sl, r6
   25996:	46c3      	mov	fp, r8
   25998:	e7da      	b.n	25950 <compare_set+0xe8>
			return -EINVAL;
   2599a:	f06f 0415 	mvn.w	r4, #21
   2599e:	e7e2      	b.n	25966 <compare_set+0xfe>
   259a0:	01000001 	.word	0x01000001
   259a4:	200153e8 	.word	0x200153e8
   259a8:	40015000 	.word	0x40015000
   259ac:	200192a0 	.word	0x200192a0

000259b0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   259b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   259b2:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   259b4:	f04f 30ff 	mov.w	r0, #4294967295
   259b8:	f04f 31ff 	mov.w	r1, #4294967295
   259bc:	4d16      	ldr	r5, [pc, #88]	; (25a18 <sys_clock_driver_init+0x68>)
   259be:	4b17      	ldr	r3, [pc, #92]	; (25a1c <sys_clock_driver_init+0x6c>)
   259c0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   259c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   259c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   259cc:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   259d2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   259d6:	4b12      	ldr	r3, [pc, #72]	; (25a20 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   259d8:	2101      	movs	r1, #1
   259da:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   259de:	2015      	movs	r0, #21
   259e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   259e4:	4622      	mov	r2, r4
   259e6:	f7fd fb6b 	bl	230c0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   259ea:	2015      	movs	r0, #21
   259ec:	f7fd fb36 	bl	2305c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   259f0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   259f2:	4a0c      	ldr	r2, [pc, #48]	; (25a24 <sys_clock_driver_init+0x74>)
   259f4:	60ab      	str	r3, [r5, #8]
   259f6:	602b      	str	r3, [r5, #0]
   259f8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   259fa:	4b0b      	ldr	r3, [pc, #44]	; (25a28 <sys_clock_driver_init+0x78>)
   259fc:	4a0b      	ldr	r2, [pc, #44]	; (25a2c <sys_clock_driver_init+0x7c>)
   259fe:	9300      	str	r3, [sp, #0]
   25a00:	4620      	mov	r0, r4
   25a02:	2300      	movs	r3, #0
   25a04:	9401      	str	r4, [sp, #4]
   25a06:	f7ff ff2f 	bl	25868 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   25a0a:	4630      	mov	r0, r6
   25a0c:	f7ff f802 	bl	24a14 <z_nrf_clock_control_lf_on>

	return 0;
}
   25a10:	4620      	mov	r0, r4
   25a12:	b002      	add	sp, #8
   25a14:	bd70      	pop	{r4, r5, r6, pc}
   25a16:	bf00      	nop
   25a18:	40015000 	.word	0x40015000
   25a1c:	200153e8 	.word	0x200153e8
   25a20:	e000e100 	.word	0xe000e100
   25a24:	200192a4 	.word	0x200192a4
   25a28:	0002575d 	.word	0x0002575d
   25a2c:	007fffff 	.word	0x007fffff

00025a30 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   25a30:	4b35      	ldr	r3, [pc, #212]	; (25b08 <rtc_nrf_isr+0xd8>)
{
   25a32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25a36:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   25a3a:	0791      	lsls	r1, r2, #30
   25a3c:	d50b      	bpl.n	25a56 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25a3e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   25a42:	b142      	cbz	r2, 25a56 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25a44:	2200      	movs	r2, #0
   25a46:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   25a4a:	4a30      	ldr	r2, [pc, #192]	; (25b0c <rtc_nrf_isr+0xdc>)
   25a4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   25a50:	6813      	ldr	r3, [r2, #0]
   25a52:	3301      	adds	r3, #1
   25a54:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   25a56:	f04f 0320 	mov.w	r3, #32
   25a5a:	f3ef 8111 	mrs	r1, BASEPRI
   25a5e:	f383 8812 	msr	BASEPRI_MAX, r3
   25a62:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   25a66:	4b28      	ldr	r3, [pc, #160]	; (25b08 <rtc_nrf_isr+0xd8>)
   25a68:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   25a6c:	03d2      	lsls	r2, r2, #15
   25a6e:	d50d      	bpl.n	25a8c <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25a70:	4a27      	ldr	r2, [pc, #156]	; (25b10 <rtc_nrf_isr+0xe0>)
   25a72:	e8d2 0fef 	ldaex	r0, [r2]
   25a76:	f020 0401 	bic.w	r4, r0, #1
   25a7a:	e8c2 4fe5 	stlex	r5, r4, [r2]
   25a7e:	2d00      	cmp	r5, #0
   25a80:	d1f7      	bne.n	25a72 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   25a82:	2800      	cmp	r0, #0
   25a84:	d136      	bne.n	25af4 <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25a86:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
   25a8a:	bb9a      	cbnz	r2, 25af4 <rtc_nrf_isr+0xc4>
{
   25a8c:	2300      	movs	r3, #0
	__asm__ volatile(
   25a8e:	f381 8811 	msr	BASEPRI, r1
   25a92:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   25a96:	b353      	cbz	r3, 25aee <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
   25a98:	f7ff fec4 	bl	25824 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   25a9c:	f04f 0320 	mov.w	r3, #32
   25aa0:	f3ef 8711 	mrs	r7, BASEPRI
   25aa4:	f383 8812 	msr	BASEPRI_MAX, r3
   25aa8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   25aac:	4b19      	ldr	r3, [pc, #100]	; (25b14 <rtc_nrf_isr+0xe4>)
   25aae:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
   25ab2:	42a0      	cmp	r0, r4
   25ab4:	eb71 0205 	sbcs.w	r2, r1, r5
   25ab8:	f04f 0200 	mov.w	r2, #0
   25abc:	d321      	bcc.n	25b02 <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
   25abe:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   25ac2:	f04f 38ff 	mov.w	r8, #4294967295
   25ac6:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   25aca:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   25acc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   25ad0:	e9c3 8902 	strd	r8, r9, [r3, #8]
   25ad4:	4b0c      	ldr	r3, [pc, #48]	; (25b08 <rtc_nrf_isr+0xd8>)
   25ad6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   25ada:	f387 8811 	msr	BASEPRI, r7
   25ade:	f3bf 8f6f 	isb	sy
		if (handler) {
   25ae2:	b121      	cbz	r1, 25aee <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
   25ae4:	4622      	mov	r2, r4
   25ae6:	462b      	mov	r3, r5
   25ae8:	2000      	movs	r0, #0
   25aea:	9600      	str	r6, [sp, #0]
   25aec:	4788      	blx	r1
}
   25aee:	b003      	add	sp, #12
   25af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25af4:	2200      	movs	r2, #0
   25af6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   25afa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   25afe:	2301      	movs	r3, #1
}
   25b00:	e7c5      	b.n	25a8e <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   25b02:	4611      	mov	r1, r2
   25b04:	e7e9      	b.n	25ada <rtc_nrf_isr+0xaa>
   25b06:	bf00      	nop
   25b08:	40015000 	.word	0x40015000
   25b0c:	200192a8 	.word	0x200192a8
   25b10:	200192a0 	.word	0x200192a0
   25b14:	200153e8 	.word	0x200153e8

00025b18 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25b18:	1c43      	adds	r3, r0, #1
{
   25b1a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25b1c:	d020      	beq.n	25b60 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   25b1e:	2801      	cmp	r0, #1
   25b20:	dd20      	ble.n	25b64 <sys_clock_set_timeout+0x4c>
   25b22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25b26:	da1f      	bge.n	25b68 <sys_clock_set_timeout+0x50>
   25b28:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   25b2a:	f7ff fe7b 	bl	25824 <z_nrf_rtc_timer_read>
   25b2e:	4b0f      	ldr	r3, [pc, #60]	; (25b6c <sys_clock_set_timeout+0x54>)
   25b30:	e9d3 1300 	ldrd	r1, r3, [r3]
   25b34:	1a40      	subs	r0, r0, r1
		ticks = 0;
   25b36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25b3a:	bf28      	it	cs
   25b3c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   25b3e:	3001      	adds	r0, #1
   25b40:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   25b42:	480b      	ldr	r0, [pc, #44]	; (25b70 <sys_clock_set_timeout+0x58>)
   25b44:	4282      	cmp	r2, r0
   25b46:	bf28      	it	cs
   25b48:	4602      	movcs	r2, r0
   25b4a:	2000      	movs	r0, #0
   25b4c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   25b4e:	4909      	ldr	r1, [pc, #36]	; (25b74 <sys_clock_set_timeout+0x5c>)
   25b50:	9001      	str	r0, [sp, #4]
   25b52:	9100      	str	r1, [sp, #0]
   25b54:	f143 0300 	adc.w	r3, r3, #0
   25b58:	f7ff fe86 	bl	25868 <compare_set>
}
   25b5c:	b002      	add	sp, #8
   25b5e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25b60:	4803      	ldr	r0, [pc, #12]	; (25b70 <sys_clock_set_timeout+0x58>)
   25b62:	e7e1      	b.n	25b28 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   25b64:	2400      	movs	r4, #0
   25b66:	e7e0      	b.n	25b2a <sys_clock_set_timeout+0x12>
   25b68:	4c01      	ldr	r4, [pc, #4]	; (25b70 <sys_clock_set_timeout+0x58>)
   25b6a:	e7de      	b.n	25b2a <sys_clock_set_timeout+0x12>
   25b6c:	200153f8 	.word	0x200153f8
   25b70:	007fffff 	.word	0x007fffff
   25b74:	0002575d 	.word	0x0002575d

00025b78 <sys_clock_elapsed>:
{
   25b78:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   25b7a:	f7ff fe53 	bl	25824 <z_nrf_rtc_timer_read>
   25b7e:	4b02      	ldr	r3, [pc, #8]	; (25b88 <sys_clock_elapsed+0x10>)
   25b80:	681b      	ldr	r3, [r3, #0]
}
   25b82:	1ac0      	subs	r0, r0, r3
   25b84:	bd08      	pop	{r3, pc}
   25b86:	bf00      	nop
   25b88:	200153f8 	.word	0x200153f8

00025b8c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25b8c:	6803      	ldr	r3, [r0, #0]
{
   25b8e:	b510      	push	{r4, lr}
    switch (port)
   25b90:	095a      	lsrs	r2, r3, #5
   25b92:	bf0c      	ite	eq
   25b94:	f04f 32ff 	moveq.w	r2, #4294967295
   25b98:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   25b9a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25b9e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25ba2:	07db      	lsls	r3, r3, #31
{
   25ba4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25ba6:	d40a      	bmi.n	25bbe <nrf_gpio_pin_port_decode+0x32>
   25ba8:	490e      	ldr	r1, [pc, #56]	; (25be4 <nrf_gpio_pin_port_decode+0x58>)
   25baa:	480f      	ldr	r0, [pc, #60]	; (25be8 <nrf_gpio_pin_port_decode+0x5c>)
   25bac:	f240 2229 	movw	r2, #553	; 0x229
   25bb0:	f017 fae9 	bl	3d186 <assert_print>
   25bb4:	f240 2129 	movw	r1, #553	; 0x229
   25bb8:	480a      	ldr	r0, [pc, #40]	; (25be4 <nrf_gpio_pin_port_decode+0x58>)
   25bba:	f017 fadd 	bl	3d178 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   25bbe:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   25bc0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25bc4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   25bc6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25bc8:	d00a      	beq.n	25be0 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   25bca:	4906      	ldr	r1, [pc, #24]	; (25be4 <nrf_gpio_pin_port_decode+0x58>)
   25bcc:	4806      	ldr	r0, [pc, #24]	; (25be8 <nrf_gpio_pin_port_decode+0x5c>)
   25bce:	f240 222e 	movw	r2, #558	; 0x22e
   25bd2:	f017 fad8 	bl	3d186 <assert_print>
   25bd6:	f240 212e 	movw	r1, #558	; 0x22e
   25bda:	4802      	ldr	r0, [pc, #8]	; (25be4 <nrf_gpio_pin_port_decode+0x58>)
   25bdc:	f017 facc 	bl	3d178 <assert_post_action>
}
   25be0:	4802      	ldr	r0, [pc, #8]	; (25bec <nrf_gpio_pin_port_decode+0x60>)
   25be2:	bd10      	pop	{r4, pc}
   25be4:	0004556d 	.word	0x0004556d
   25be8:	0004494f 	.word	0x0004494f
   25bec:	40842500 	.word	0x40842500

00025bf0 <nrf_modem_fault_handler>:
 */

#if defined CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   25bf0:	e9d0 2300 	ldrd	r2, r3, [r0]
   25bf4:	2145      	movs	r1, #69	; 0x45
   25bf6:	4801      	ldr	r0, [pc, #4]	; (25bfc <nrf_modem_fault_handler+0xc>)
   25bf8:	f017 baff 	b.w	3d1fa <z_log_minimal_printk>
   25bfc:	00045872 	.word	0x00045872

00025c00 <_nrf_modem_lib_init>:
{
   25c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!first_time_init) {
   25c02:	4d21      	ldr	r5, [pc, #132]	; (25c88 <_nrf_modem_lib_init+0x88>)
   25c04:	4c21      	ldr	r4, [pc, #132]	; (25c8c <_nrf_modem_lib_init+0x8c>)
   25c06:	782b      	ldrb	r3, [r5, #0]
   25c08:	b933      	cbnz	r3, 25c18 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   25c0a:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   25c0e:	4820      	ldr	r0, [pc, #128]	; (25c90 <_nrf_modem_lib_init+0x90>)
   25c10:	f01b fd5c 	bl	416cc <z_impl_k_mutex_init>
		first_time_init = true;
   25c14:	2301      	movs	r3, #1
   25c16:	702b      	strb	r3, [r5, #0]
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   25c18:	2200      	movs	r2, #0
   25c1a:	202a      	movs	r0, #42	; 0x2a
   25c1c:	4611      	mov	r1, r2
   25c1e:	f7fd fa4f 	bl	230c0 <z_arm_irq_priority_set>
	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   25c22:	2100      	movs	r1, #0
   25c24:	481b      	ldr	r0, [pc, #108]	; (25c94 <_nrf_modem_lib_init+0x94>)
   25c26:	f010 fbbf 	bl	363a8 <nrf_modem_init>
   25c2a:	4f1b      	ldr	r7, [pc, #108]	; (25c98 <_nrf_modem_lib_init+0x98>)
   25c2c:	6038      	str	r0, [r7, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   25c2e:	f04f 32ff 	mov.w	r2, #4294967295
   25c32:	f04f 33ff 	mov.w	r3, #4294967295
   25c36:	4816      	ldr	r0, [pc, #88]	; (25c90 <_nrf_modem_lib_init+0x90>)
   25c38:	f011 f958 	bl	36eec <z_impl_k_mutex_lock>
	return list->head;
   25c3c:	6820      	ldr	r0, [r4, #0]
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   25c3e:	b1d8      	cbz	r0, 25c78 <_nrf_modem_lib_init+0x78>
	return node->next;
   25c40:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   25c42:	3004      	adds	r0, #4
   25c44:	f011 fba4 	bl	37390 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   25c48:	b1b4      	cbz	r4, 25c78 <_nrf_modem_lib_init+0x78>
   25c4a:	4620      	mov	r0, r4
   25c4c:	6824      	ldr	r4, [r4, #0]
   25c4e:	e7f8      	b.n	25c42 <_nrf_modem_lib_init+0x42>
		e->callback(init_ret, e->context);
   25c50:	e9d4 3100 	ldrd	r3, r1, [r4]
   25c54:	6838      	ldr	r0, [r7, #0]
   25c56:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25c58:	3408      	adds	r4, #8
   25c5a:	42b4      	cmp	r4, r6
   25c5c:	d908      	bls.n	25c70 <_nrf_modem_lib_init+0x70>
   25c5e:	4629      	mov	r1, r5
   25c60:	480e      	ldr	r0, [pc, #56]	; (25c9c <_nrf_modem_lib_init+0x9c>)
   25c62:	229b      	movs	r2, #155	; 0x9b
   25c64:	f017 fa8f 	bl	3d186 <assert_print>
   25c68:	219b      	movs	r1, #155	; 0x9b
   25c6a:	4628      	mov	r0, r5
   25c6c:	f017 fa84 	bl	3d178 <assert_post_action>
   25c70:	42b4      	cmp	r4, r6
   25c72:	d3ed      	bcc.n	25c50 <_nrf_modem_lib_init+0x50>
}
   25c74:	2000      	movs	r0, #0
   25c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_mutex_unlock(mutex);
   25c78:	4805      	ldr	r0, [pc, #20]	; (25c90 <_nrf_modem_lib_init+0x90>)
   25c7a:	f011 fa09 	bl	37090 <z_impl_k_mutex_unlock>
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25c7e:	4c08      	ldr	r4, [pc, #32]	; (25ca0 <_nrf_modem_lib_init+0xa0>)
   25c80:	4e08      	ldr	r6, [pc, #32]	; (25ca4 <_nrf_modem_lib_init+0xa4>)
   25c82:	4d09      	ldr	r5, [pc, #36]	; (25ca8 <_nrf_modem_lib_init+0xa8>)
   25c84:	e7e9      	b.n	25c5a <_nrf_modem_lib_init+0x5a>
   25c86:	bf00      	nop
   25c88:	2001a5ee 	.word	0x2001a5ee
   25c8c:	200192b0 	.word	0x200192b0
   25c90:	200192b8 	.word	0x200192b8
   25c94:	00043388 	.word	0x00043388
   25c98:	200192ac 	.word	0x200192ac
   25c9c:	0004494f 	.word	0x0004494f
   25ca0:	0004c934 	.word	0x0004c934
   25ca4:	0004c94c 	.word	0x0004c94c
   25ca8:	00045893 	.word	0x00045893

00025cac <nrf_modem_lib_get_init_ret>:
}
   25cac:	4b01      	ldr	r3, [pc, #4]	; (25cb4 <nrf_modem_lib_get_init_ret+0x8>)
   25cae:	6818      	ldr	r0, [r3, #0]
   25cb0:	4770      	bx	lr
   25cb2:	bf00      	nop
   25cb4:	200192ac 	.word	0x200192ac

00025cb8 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   25cb8:	4b10      	ldr	r3, [pc, #64]	; (25cfc <thread_monitor_entry_get+0x44>)
{
   25cba:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   25cbc:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   25cbe:	4b10      	ldr	r3, [pc, #64]	; (25d00 <thread_monitor_entry_get+0x48>)
{
   25cc0:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   25cc2:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   25cc4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   25cc6:	4618      	mov	r0, r3
   25cc8:	461f      	mov	r7, r3
		if (entry->id == id) {
   25cca:	6804      	ldr	r4, [r0, #0]
   25ccc:	428c      	cmp	r4, r1
   25cce:	d011      	beq.n	25cf4 <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
   25cd0:	b18c      	cbz	r4, 25cf6 <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
   25cd2:	6844      	ldr	r4, [r0, #4]
   25cd4:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   25cd6:	42b4      	cmp	r4, r6
   25cd8:	bfc8      	it	gt
   25cda:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   25cdc:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
   25ce0:	bfc8      	it	gt
   25ce2:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   25ce4:	42b8      	cmp	r0, r7
   25ce6:	d301      	bcc.n	25cec <thread_monitor_entry_get+0x34>
   25ce8:	3d01      	subs	r5, #1
   25cea:	d1ee      	bne.n	25cca <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   25cec:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   25cee:	3a01      	subs	r2, #1
	new_entry->id = id;
   25cf0:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   25cf2:	605a      	str	r2, [r3, #4]
}
   25cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25cf6:	4603      	mov	r3, r0
   25cf8:	e7f8      	b.n	25cec <thread_monitor_entry_get+0x34>
   25cfa:	bf00      	nop
   25cfc:	20019330 	.word	0x20019330
   25d00:	20019358 	.word	0x20019358

00025d04 <on_init>:
	list->head = NULL;
   25d04:	2000      	movs	r0, #0
   25d06:	4b05      	ldr	r3, [pc, #20]	; (25d1c <on_init+0x18>)
	list->tail = NULL;
   25d08:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25d0c:	4b04      	ldr	r3, [pc, #16]	; (25d20 <on_init+0x1c>)
   25d0e:	e8d3 2fef 	ldaex	r2, [r3]
   25d12:	e8c3 0fe1 	stlex	r1, r0, [r3]
   25d16:	2900      	cmp	r1, #0
   25d18:	d1f9      	bne.n	25d0e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   25d1a:	4770      	bx	lr
   25d1c:	20019350 	.word	0x20019350
   25d20:	20019330 	.word	0x20019330

00025d24 <nrf_modem_os_timedwait>:
{
   25d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d28:	b088      	sub	sp, #32
   25d2a:	460c      	mov	r4, r1
	if (!nrf_modem_is_initialized()) {
   25d2c:	f01b fc8e 	bl	4164c <nrf_modem_is_initialized>
   25d30:	4681      	mov	r9, r0
   25d32:	b920      	cbnz	r0, 25d3e <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   25d34:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   25d38:	b008      	add	sp, #32
   25d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   25d3e:	f01b fd7f 	bl	41840 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   25d42:	6823      	ldr	r3, [r4, #0]
   25d44:	4605      	mov	r5, r0
   25d46:	2b00      	cmp	r3, #0
   25d48:	460f      	mov	r7, r1
   25d4a:	d104      	bne.n	25d56 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   25d4c:	f012 fe5e 	bl	38a0c <z_impl_k_yield>
		return -NRF_EAGAIN;
   25d50:	f06f 000a 	mvn.w	r0, #10
   25d54:	e7f0      	b.n	25d38 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   25d56:	bfbc      	itt	lt
   25d58:	f04f 33ff 	movlt.w	r3, #4294967295
   25d5c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25d5e:	2201      	movs	r2, #1
   25d60:	2100      	movs	r1, #0
   25d62:	a802      	add	r0, sp, #8
   25d64:	f01b fcd0 	bl	41708 <z_impl_k_sem_init>
   25d68:	ae01      	add	r6, sp, #4
	__asm__ volatile(
   25d6a:	f04f 0320 	mov.w	r3, #32
   25d6e:	f3ef 8a11 	mrs	sl, BASEPRI
   25d72:	f383 8812 	msr	BASEPRI_MAX, r3
   25d76:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25d7a:	f012 ff85 	bl	38c88 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25d7e:	f7ff ff9b 	bl	25cb8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   25d82:	f8df 8120 	ldr.w	r8, [pc, #288]	; 25ea4 <nrf_modem_os_timedwait+0x180>
   25d86:	6843      	ldr	r3, [r0, #4]
   25d88:	f8d8 2000 	ldr.w	r2, [r8]
   25d8c:	4293      	cmp	r3, r2
   25d8e:	f04f 0300 	mov.w	r3, #0
   25d92:	d107      	bne.n	25da4 <nrf_modem_os_timedwait+0x80>
	parent->next = child;
   25d94:	9301      	str	r3, [sp, #4]
	return list->tail;
   25d96:	4b42      	ldr	r3, [pc, #264]	; (25ea0 <nrf_modem_os_timedwait+0x17c>)
   25d98:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25d9a:	2a00      	cmp	r2, #0
   25d9c:	d170      	bne.n	25e80 <nrf_modem_os_timedwait+0x15c>
	list->head = node;
   25d9e:	e9c3 6600 	strd	r6, r6, [r3]
}
   25da2:	e001      	b.n	25da8 <nrf_modem_os_timedwait+0x84>
	bool allow_to_sleep = false;
   25da4:	4699      	mov	r9, r3
	entry->cnt = rpc_event_cnt;
   25da6:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   25da8:	f38a 8811 	msr	BASEPRI, sl
   25dac:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   25db0:	f1b9 0f00 	cmp.w	r9, #0
   25db4:	d062      	beq.n	25e7c <nrf_modem_os_timedwait+0x158>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   25db6:	6823      	ldr	r3, [r4, #0]
   25db8:	1c5a      	adds	r2, r3, #1
   25dba:	d064      	beq.n	25e86 <nrf_modem_os_timedwait+0x162>
			return ((t * to_hz + off) / from_hz);
   25dbc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   25dc0:	f240 30e7 	movw	r0, #999	; 0x3e7
   25dc4:	2100      	movs	r1, #0
   25dc6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   25dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25dce:	2300      	movs	r3, #0
   25dd0:	fbcc 010e 	smlal	r0, r1, ip, lr
   25dd4:	f7f7 f888 	bl	1cee8 <__aeabi_uldivmod>
   25dd8:	4602      	mov	r2, r0
   25dda:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   25ddc:	a802      	add	r0, sp, #8
   25dde:	f011 fb13 	bl	37408 <z_impl_k_sem_take>
	__asm__ volatile(
   25de2:	f04f 0320 	mov.w	r3, #32
   25de6:	f3ef 8911 	mrs	r9, BASEPRI
   25dea:	f383 8812 	msr	BASEPRI_MAX, r3
   25dee:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25df2:	2100      	movs	r1, #0
	return list->head;
   25df4:	4a2a      	ldr	r2, [pc, #168]	; (25ea0 <nrf_modem_os_timedwait+0x17c>)
   25df6:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25df8:	b15b      	cbz	r3, 25e12 <nrf_modem_os_timedwait+0xee>
   25dfa:	42b3      	cmp	r3, r6
   25dfc:	d14c      	bne.n	25e98 <nrf_modem_os_timedwait+0x174>
	return node->next;
   25dfe:	9801      	ldr	r0, [sp, #4]
	return list->tail;
   25e00:	6856      	ldr	r6, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   25e02:	2900      	cmp	r1, #0
   25e04:	d143      	bne.n	25e8e <nrf_modem_os_timedwait+0x16a>
   25e06:	429e      	cmp	r6, r3
	list->head = node;
   25e08:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25e0a:	d100      	bne.n	25e0e <nrf_modem_os_timedwait+0xea>
	list->tail = node;
   25e0c:	6050      	str	r0, [r2, #4]
	parent->next = child;
   25e0e:	2300      	movs	r3, #0
   25e10:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   25e12:	f012 ff39 	bl	38c88 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25e16:	f7ff ff4f 	bl	25cb8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   25e1a:	f8d8 3000 	ldr.w	r3, [r8]
   25e1e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   25e20:	f389 8811 	msr	BASEPRI, r9
   25e24:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   25e28:	f01b fc10 	bl	4164c <nrf_modem_is_initialized>
   25e2c:	2800      	cmp	r0, #0
   25e2e:	d081      	beq.n	25d34 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   25e30:	6826      	ldr	r6, [r4, #0]
   25e32:	1c73      	adds	r3, r6, #1
   25e34:	d022      	beq.n	25e7c <nrf_modem_os_timedwait+0x158>
	return z_impl_k_uptime_ticks();
   25e36:	f01b fd03 	bl	41840 <z_impl_k_uptime_ticks>
   25e3a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   25e3e:	fba0 300e 	umull	r3, r0, r0, lr
   25e42:	fba5 250e 	umull	r2, r5, r5, lr
   25e46:	fb0e 0101 	mla	r1, lr, r1, r0
   25e4a:	fb0e 5707 	mla	r7, lr, r7, r5
   25e4e:	0bdb      	lsrs	r3, r3, #15
   25e50:	0bd2      	lsrs	r2, r2, #15
   25e52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   25e56:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	delta = uptime - *reftime;
   25e5a:	1a9b      	subs	r3, r3, r2
   25e5c:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   25e60:	eb61 31d7 	sbc.w	r1, r1, r7, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   25e64:	ea4f 7ce6 	mov.w	ip, r6, asr #31
   25e68:	1af3      	subs	r3, r6, r3
   25e6a:	eb6c 0101 	sbc.w	r1, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   25e6e:	2900      	cmp	r1, #0
   25e70:	bfb8      	it	lt
   25e72:	2300      	movlt	r3, #0
   25e74:	6023      	str	r3, [r4, #0]
	if (*timeout == 0) {
   25e76:	2b00      	cmp	r3, #0
   25e78:	f43f af6a 	beq.w	25d50 <nrf_modem_os_timedwait+0x2c>
	return 0;
   25e7c:	2000      	movs	r0, #0
   25e7e:	e75b      	b.n	25d38 <nrf_modem_os_timedwait+0x14>
   25e80:	6016      	str	r6, [r2, #0]
	list->tail = node;
   25e82:	605e      	str	r6, [r3, #4]
}
   25e84:	e790      	b.n	25da8 <nrf_modem_os_timedwait+0x84>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   25e86:	f04f 32ff 	mov.w	r2, #4294967295
   25e8a:	4613      	mov	r3, r2
   25e8c:	e7a6      	b.n	25ddc <nrf_modem_os_timedwait+0xb8>
Z_GENLIST_REMOVE(slist, snode)
   25e8e:	429e      	cmp	r6, r3
	parent->next = child;
   25e90:	6008      	str	r0, [r1, #0]
	list->tail = node;
   25e92:	bf08      	it	eq
   25e94:	6051      	streq	r1, [r2, #4]
}
   25e96:	e7ba      	b.n	25e0e <nrf_modem_os_timedwait+0xea>
	return node->next;
   25e98:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25e9a:	681b      	ldr	r3, [r3, #0]
   25e9c:	e7ac      	b.n	25df8 <nrf_modem_os_timedwait+0xd4>
   25e9e:	bf00      	nop
   25ea0:	20019350 	.word	0x20019350
   25ea4:	20019330 	.word	0x20019330

00025ea8 <nrf_modem_os_errno_set>:
{
   25ea8:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
   25eaa:	1e04      	subs	r4, r0, #0
   25eac:	dc08      	bgt.n	25ec0 <nrf_modem_os_errno_set+0x18>
   25eae:	4906      	ldr	r1, [pc, #24]	; (25ec8 <nrf_modem_os_errno_set+0x20>)
   25eb0:	4806      	ldr	r0, [pc, #24]	; (25ecc <nrf_modem_os_errno_set+0x24>)
   25eb2:	22f1      	movs	r2, #241	; 0xf1
   25eb4:	f017 f967 	bl	3d186 <assert_print>
   25eb8:	21f1      	movs	r1, #241	; 0xf1
   25eba:	4803      	ldr	r0, [pc, #12]	; (25ec8 <nrf_modem_os_errno_set+0x20>)
   25ebc:	f017 f95c 	bl	3d178 <assert_post_action>
	errno = err_code;
   25ec0:	f017 fff3 	bl	3deaa <__errno>
   25ec4:	6004      	str	r4, [r0, #0]
}
   25ec6:	bd10      	pop	{r4, pc}
   25ec8:	000458c5 	.word	0x000458c5
   25ecc:	0004494f 	.word	0x0004494f

00025ed0 <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   25ed0:	6803      	ldr	r3, [r0, #0]
{
   25ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ed6:	4604      	mov	r4, r0
   25ed8:	460e      	mov	r6, r1
   25eda:	4617      	mov	r7, r2
   25edc:	4d14      	ldr	r5, [pc, #80]	; (25f30 <nrf_modem_os_sem_init+0x60>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   25ede:	b12b      	cbz	r3, 25eec <nrf_modem_os_sem_init+0x1c>
   25ee0:	42ab      	cmp	r3, r5
   25ee2:	d303      	bcc.n	25eec <nrf_modem_os_sem_init+0x1c>
   25ee4:	f105 0260 	add.w	r2, r5, #96	; 0x60
   25ee8:	4293      	cmp	r3, r2
   25eea:	d31a      	bcc.n	25f22 <nrf_modem_os_sem_init+0x52>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   25eec:	f8df 804c 	ldr.w	r8, [pc, #76]	; 25f3c <nrf_modem_os_sem_init+0x6c>
   25ef0:	f898 3000 	ldrb.w	r3, [r8]
   25ef4:	2b03      	cmp	r3, #3
   25ef6:	d90a      	bls.n	25f0e <nrf_modem_os_sem_init+0x3e>
   25ef8:	490e      	ldr	r1, [pc, #56]	; (25f34 <nrf_modem_os_sem_init+0x64>)
   25efa:	480f      	ldr	r0, [pc, #60]	; (25f38 <nrf_modem_os_sem_init+0x68>)
   25efc:	f240 1205 	movw	r2, #261	; 0x105
   25f00:	f017 f941 	bl	3d186 <assert_print>
   25f04:	f240 1105 	movw	r1, #261	; 0x105
   25f08:	480a      	ldr	r0, [pc, #40]	; (25f34 <nrf_modem_os_sem_init+0x64>)
   25f0a:	f017 f935 	bl	3d178 <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   25f0e:	f898 3000 	ldrb.w	r3, [r8]
   25f12:	1c5a      	adds	r2, r3, #1
   25f14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25f18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   25f1c:	f888 2000 	strb.w	r2, [r8]
   25f20:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   25f22:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25f24:	463a      	mov	r2, r7
   25f26:	4631      	mov	r1, r6
}
   25f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25f2c:	f01b bbec 	b.w	41708 <z_impl_k_sem_init>
   25f30:	200192d0 	.word	0x200192d0
   25f34:	000458c5 	.word	0x000458c5
   25f38:	0004494f 	.word	0x0004494f
   25f3c:	2001a5ef 	.word	0x2001a5ef

00025f40 <nrf_modem_os_sem_give>:
{
   25f40:	b510      	push	{r4, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   25f42:	4604      	mov	r4, r0
   25f44:	b128      	cbz	r0, 25f52 <nrf_modem_os_sem_give+0x12>
   25f46:	4b0b      	ldr	r3, [pc, #44]	; (25f74 <nrf_modem_os_sem_give+0x34>)
   25f48:	4298      	cmp	r0, r3
   25f4a:	d302      	bcc.n	25f52 <nrf_modem_os_sem_give+0x12>
   25f4c:	3360      	adds	r3, #96	; 0x60
   25f4e:	4298      	cmp	r0, r3
   25f50:	d30a      	bcc.n	25f68 <nrf_modem_os_sem_give+0x28>
   25f52:	4909      	ldr	r1, [pc, #36]	; (25f78 <nrf_modem_os_sem_give+0x38>)
   25f54:	4809      	ldr	r0, [pc, #36]	; (25f7c <nrf_modem_os_sem_give+0x3c>)
   25f56:	f44f 7288 	mov.w	r2, #272	; 0x110
   25f5a:	f017 f914 	bl	3d186 <assert_print>
   25f5e:	f44f 7188 	mov.w	r1, #272	; 0x110
   25f62:	4805      	ldr	r0, [pc, #20]	; (25f78 <nrf_modem_os_sem_give+0x38>)
   25f64:	f017 f908 	bl	3d178 <assert_post_action>
	z_impl_k_sem_give(sem);
   25f68:	4620      	mov	r0, r4
}
   25f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25f6e:	f011 ba0f 	b.w	37390 <z_impl_k_sem_give>
   25f72:	bf00      	nop
   25f74:	200192d0 	.word	0x200192d0
   25f78:	000458c5 	.word	0x000458c5
   25f7c:	0004494f 	.word	0x0004494f

00025f80 <nrf_modem_os_sem_take>:
{
   25f80:	b570      	push	{r4, r5, r6, lr}
   25f82:	460c      	mov	r4, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   25f84:	4605      	mov	r5, r0
   25f86:	b128      	cbz	r0, 25f94 <nrf_modem_os_sem_take+0x14>
   25f88:	4b17      	ldr	r3, [pc, #92]	; (25fe8 <nrf_modem_os_sem_take+0x68>)
   25f8a:	4298      	cmp	r0, r3
   25f8c:	d302      	bcc.n	25f94 <nrf_modem_os_sem_take+0x14>
   25f8e:	3360      	adds	r3, #96	; 0x60
   25f90:	4298      	cmp	r0, r3
   25f92:	d30a      	bcc.n	25faa <nrf_modem_os_sem_take+0x2a>
   25f94:	4915      	ldr	r1, [pc, #84]	; (25fec <nrf_modem_os_sem_take+0x6c>)
   25f96:	4816      	ldr	r0, [pc, #88]	; (25ff0 <nrf_modem_os_sem_take+0x70>)
   25f98:	f44f 728d 	mov.w	r2, #282	; 0x11a
   25f9c:	f017 f8f3 	bl	3d186 <assert_print>
   25fa0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   25fa4:	4811      	ldr	r0, [pc, #68]	; (25fec <nrf_modem_os_sem_take+0x6c>)
   25fa6:	f017 f8e7 	bl	3d178 <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   25faa:	1c63      	adds	r3, r4, #1
   25fac:	d017      	beq.n	25fde <nrf_modem_os_sem_take+0x5e>
   25fae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25fb2:	f240 30e7 	movw	r0, #999	; 0x3e7
   25fb6:	2100      	movs	r1, #0
   25fb8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   25fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25fc0:	2300      	movs	r3, #0
   25fc2:	fbc4 0106 	smlal	r0, r1, r4, r6
   25fc6:	f7f6 ff8f 	bl	1cee8 <__aeabi_uldivmod>
   25fca:	4602      	mov	r2, r0
   25fcc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   25fce:	4628      	mov	r0, r5
   25fd0:	f011 fa1a 	bl	37408 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   25fd4:	2800      	cmp	r0, #0
}
   25fd6:	bf18      	it	ne
   25fd8:	f06f 000a 	mvnne.w	r0, #10
   25fdc:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   25fde:	f04f 32ff 	mov.w	r2, #4294967295
   25fe2:	4613      	mov	r3, r2
   25fe4:	e7f3      	b.n	25fce <nrf_modem_os_sem_take+0x4e>
   25fe6:	bf00      	nop
   25fe8:	200192d0 	.word	0x200192d0
   25fec:	000458c5 	.word	0x000458c5
   25ff0:	0004494f 	.word	0x0004494f

00025ff4 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25ff8:	4b01      	ldr	r3, [pc, #4]	; (26000 <nrf_modem_os_application_irq_set+0xc>)
   25ffa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25ffe:	4770      	bx	lr
   26000:	e000e100 	.word	0xe000e100

00026004 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26008:	4b01      	ldr	r3, [pc, #4]	; (26010 <nrf_modem_os_application_irq_clear+0xc>)
   2600a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2600e:	4770      	bx	lr
   26010:	e000e100 	.word	0xe000e100

00026014 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26014:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   26018:	4b01      	ldr	r3, [pc, #4]	; (26020 <nrf_modem_os_trace_irq_set+0xc>)
   2601a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2601e:	4770      	bx	lr
   26020:	e000e100 	.word	0xe000e100

00026024 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26024:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   26028:	4b01      	ldr	r3, [pc, #4]	; (26030 <nrf_modem_os_trace_irq_clear+0xc>)
   2602a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2602e:	4770      	bx	lr
   26030:	e000e100 	.word	0xe000e100

00026034 <nrf_modem_os_event_notify>:
{
   26034:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26036:	4b08      	ldr	r3, [pc, #32]	; (26058 <nrf_modem_os_event_notify+0x24>)
   26038:	e8d3 2fef 	ldaex	r2, [r3]
   2603c:	3201      	adds	r2, #1
   2603e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26042:	2900      	cmp	r1, #0
   26044:	d1f8      	bne.n	26038 <nrf_modem_os_event_notify+0x4>
	return list->head;
   26046:	4b05      	ldr	r3, [pc, #20]	; (2605c <nrf_modem_os_event_notify+0x28>)
   26048:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2604a:	b124      	cbz	r4, 26056 <nrf_modem_os_event_notify+0x22>
	z_impl_k_sem_give(sem);
   2604c:	1d20      	adds	r0, r4, #4
   2604e:	f011 f99f 	bl	37390 <z_impl_k_sem_give>
	return node->next;
   26052:	6824      	ldr	r4, [r4, #0]
   26054:	e7f9      	b.n	2604a <nrf_modem_os_event_notify+0x16>
}
   26056:	bd10      	pop	{r4, pc}
   26058:	20019330 	.word	0x20019330
   2605c:	20019350 	.word	0x20019350

00026060 <nrf_modem_os_alloc>:
{
   26060:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   26062:	2200      	movs	r2, #0
   26064:	2300      	movs	r3, #0
   26066:	4801      	ldr	r0, [pc, #4]	; (2606c <nrf_modem_os_alloc+0xc>)
   26068:	f01b bb0a 	b.w	41680 <k_heap_alloc>
   2606c:	20014e98 	.word	0x20014e98

00026070 <nrf_modem_os_free>:
{
   26070:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   26072:	4801      	ldr	r0, [pc, #4]	; (26078 <nrf_modem_os_free+0x8>)
   26074:	f010 bc32 	b.w	368dc <k_heap_free>
   26078:	20014e98 	.word	0x20014e98

0002607c <nrf_modem_os_trace_alloc>:
{
   2607c:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&trace_heap, bytes, K_NO_WAIT);
   2607e:	2200      	movs	r2, #0
   26080:	2300      	movs	r3, #0
   26082:	4801      	ldr	r0, [pc, #4]	; (26088 <nrf_modem_os_trace_alloc+0xc>)
   26084:	f01b bafc 	b.w	41680 <k_heap_alloc>
   26088:	20014eb0 	.word	0x20014eb0

0002608c <nrf_modem_os_trace_free>:
{
   2608c:	4601      	mov	r1, r0
	k_heap_free(&trace_heap, mem);
   2608e:	4801      	ldr	r0, [pc, #4]	; (26094 <nrf_modem_os_trace_free+0x8>)
   26090:	f010 bc24 	b.w	368dc <k_heap_free>
   26094:	20014eb0 	.word	0x20014eb0

00026098 <nrf_modem_os_shm_tx_alloc>:
{
   26098:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   2609a:	2200      	movs	r2, #0
   2609c:	2300      	movs	r3, #0
   2609e:	4801      	ldr	r0, [pc, #4]	; (260a4 <nrf_modem_os_shm_tx_alloc+0xc>)
   260a0:	f01b baee 	b.w	41680 <k_heap_alloc>
   260a4:	20019338 	.word	0x20019338

000260a8 <nrf_modem_os_shm_tx_free>:
{
   260a8:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   260aa:	4801      	ldr	r0, [pc, #4]	; (260b0 <nrf_modem_os_shm_tx_free+0x8>)
   260ac:	f010 bc16 	b.w	368dc <k_heap_free>
   260b0:	20019338 	.word	0x20019338

000260b4 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   260b4:	b508      	push	{r3, lr}
	read_task_create();
   260b6:	f019 f9d7 	bl	3f468 <read_task_create>
		LOG_ERR("nrf_modem_lib_trace_init failed with error %d.", err);
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   260ba:	2300      	movs	r3, #0
   260bc:	4a05      	ldr	r2, [pc, #20]	; (260d4 <nrf_modem_os_init+0x20>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   260be:	4906      	ldr	r1, [pc, #24]	; (260d8 <nrf_modem_os_init+0x24>)
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   260c0:	6013      	str	r3, [r2, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   260c2:	4a06      	ldr	r2, [pc, #24]	; (260dc <nrf_modem_os_init+0x28>)
	k_heap_init(&shmem_heap,
   260c4:	4806      	ldr	r0, [pc, #24]	; (260e0 <nrf_modem_os_init+0x2c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   260c6:	6013      	str	r3, [r2, #0]
#ifdef CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&trace_heap_task.work, diag_task);
	k_work_reschedule(&trace_heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIOD_MS));
#endif
}
   260c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&shmem_heap,
   260cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   260d0:	f01b bacd 	b.w	4166e <k_heap_init>
   260d4:	200192cc 	.word	0x200192cc
   260d8:	200104e8 	.word	0x200104e8
   260dc:	20019334 	.word	0x20019334
   260e0:	20019338 	.word	0x20019338

000260e4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   260e4:	2801      	cmp	r0, #1
   260e6:	d021      	beq.n	2612c <z_to_nrf_optname+0x48>
   260e8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   260ec:	d126      	bne.n	2613c <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   260ee:	3901      	subs	r1, #1
   260f0:	290b      	cmp	r1, #11
   260f2:	d823      	bhi.n	2613c <z_to_nrf_optname+0x58>
   260f4:	e8df f001 	tbb	[pc, r1]
   260f8:	0e0c0a06 	.word	0x0e0c0a06
   260fc:	22221210 	.word	0x22221210
   26100:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   26104:	2302      	movs	r3, #2
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   26106:	6013      	str	r3, [r2, #0]
	int retval = 0;
   26108:	2000      	movs	r0, #0
			break;
   2610a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   2610c:	2305      	movs	r3, #5
   2610e:	e7fa      	b.n	26106 <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_LIST;
   26110:	2306      	movs	r3, #6
   26112:	e7f8      	b.n	26106 <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHER_IN_USE;
   26114:	2307      	movs	r3, #7
   26116:	e7f6      	b.n	26106 <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   26118:	2304      	movs	r3, #4
   2611a:	e7f4      	b.n	26106 <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   2611c:	2301      	movs	r3, #1
   2611e:	e7f2      	b.n	26106 <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   26120:	2303      	movs	r3, #3
   26122:	e7f0      	b.n	26106 <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   26124:	2309      	movs	r3, #9
   26126:	e7ee      	b.n	26106 <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   26128:	2308      	movs	r3, #8
   2612a:	e7ec      	b.n	26106 <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   2612c:	2937      	cmp	r1, #55	; 0x37
   2612e:	dc05      	bgt.n	2613c <z_to_nrf_optname+0x58>
   26130:	2913      	cmp	r1, #19
   26132:	dc06      	bgt.n	26142 <z_to_nrf_optname+0x5e>
   26134:	2902      	cmp	r1, #2
   26136:	d059      	beq.n	261ec <z_to_nrf_optname+0x108>
   26138:	2904      	cmp	r1, #4
   2613a:	d0ed      	beq.n	26118 <z_to_nrf_optname+0x34>
   2613c:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   26140:	4770      	bx	lr
   26142:	3914      	subs	r1, #20
   26144:	2923      	cmp	r1, #35	; 0x23
   26146:	d8f9      	bhi.n	2613c <z_to_nrf_optname+0x58>
   26148:	a301      	add	r3, pc, #4	; (adr r3, 26150 <z_to_nrf_optname+0x6c>)
   2614a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2614e:	bf00      	nop
   26150:	000261e1 	.word	0x000261e1
   26154:	000261e5 	.word	0x000261e5
   26158:	0002613d 	.word	0x0002613d
   2615c:	0002613d 	.word	0x0002613d
   26160:	0002613d 	.word	0x0002613d
   26164:	000261e9 	.word	0x000261e9
   26168:	0002613d 	.word	0x0002613d
   2616c:	0002613d 	.word	0x0002613d
   26170:	0002613d 	.word	0x0002613d
   26174:	0002613d 	.word	0x0002613d
   26178:	000261f1 	.word	0x000261f1
   2617c:	000261f5 	.word	0x000261f5
   26180:	000261f9 	.word	0x000261f9
   26184:	0002613d 	.word	0x0002613d
   26188:	0002613d 	.word	0x0002613d
   2618c:	0002613d 	.word	0x0002613d
   26190:	0002613d 	.word	0x0002613d
   26194:	0002613d 	.word	0x0002613d
   26198:	0002613d 	.word	0x0002613d
   2619c:	0002613d 	.word	0x0002613d
   261a0:	0002613d 	.word	0x0002613d
   261a4:	0002613d 	.word	0x0002613d
   261a8:	0002613d 	.word	0x0002613d
   261ac:	0002613d 	.word	0x0002613d
   261b0:	0002613d 	.word	0x0002613d
   261b4:	0002613d 	.word	0x0002613d
   261b8:	0002613d 	.word	0x0002613d
   261bc:	0002613d 	.word	0x0002613d
   261c0:	0002613d 	.word	0x0002613d
   261c4:	0002613d 	.word	0x0002613d
   261c8:	00026201 	.word	0x00026201
   261cc:	00026205 	.word	0x00026205
   261d0:	00026209 	.word	0x00026209
   261d4:	0002620d 	.word	0x0002620d
   261d8:	00026211 	.word	0x00026211
   261dc:	000261fd 	.word	0x000261fd
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   261e0:	2314      	movs	r3, #20
   261e2:	e790      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   261e4:	2315      	movs	r3, #21
   261e6:	e78e      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   261e8:	2319      	movs	r3, #25
   261ea:	e78c      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   261ec:	6011      	str	r1, [r2, #0]
			break;
   261ee:	e78b      	b.n	26108 <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   261f0:	231e      	movs	r3, #30
   261f2:	e788      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   261f4:	231f      	movs	r3, #31
   261f6:	e786      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   261f8:	2320      	movs	r3, #32
   261fa:	e784      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   261fc:	2337      	movs	r3, #55	; 0x37
   261fe:	e782      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   26200:	2333      	movs	r3, #51	; 0x33
   26202:	e780      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   26204:	2332      	movs	r3, #50	; 0x32
   26206:	e77e      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   26208:	2334      	movs	r3, #52	; 0x34
   2620a:	e77c      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   2620c:	2335      	movs	r3, #53	; 0x35
   2620e:	e77a      	b.n	26106 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   26210:	2336      	movs	r3, #54	; 0x36
   26212:	e778      	b.n	26106 <z_to_nrf_optname+0x22>

00026214 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   26214:	f04f 32ff 	mov.w	r2, #4294967295
   26218:	4b05      	ldr	r3, [pc, #20]	; (26230 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   2621a:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   2621c:	601a      	str	r2, [r3, #0]
   2621e:	609a      	str	r2, [r3, #8]
   26220:	611a      	str	r2, [r3, #16]
   26222:	619a      	str	r2, [r3, #24]
   26224:	621a      	str	r2, [r3, #32]
   26226:	629a      	str	r2, [r3, #40]	; 0x28
   26228:	631a      	str	r2, [r3, #48]	; 0x30
   2622a:	639a      	str	r2, [r3, #56]	; 0x38
}
   2622c:	4770      	bx	lr
   2622e:	bf00      	nop
   26230:	200193ac 	.word	0x200193ac

00026234 <nrf91_socket_offload_ioctl>:
{
   26234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   26238:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
{
   2623c:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   2623e:	2b03      	cmp	r3, #3
   26240:	d878      	bhi.n	26334 <nrf91_socket_offload_ioctl+0x100>
   26242:	e8df f003 	tbb	[pc, r3]
   26246:	0294      	.short	0x0294
   26248:	7308      	.short	0x7308
   2624a:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   2624e:	4620      	mov	r0, r4
   26250:	b011      	add	sp, #68	; 0x44
   26252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   26256:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   2625a:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   2625e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   26260:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   26264:	4668      	mov	r0, sp
   26266:	2240      	movs	r2, #64	; 0x40
   26268:	f01b fc7a 	bl	41b60 <memset>
	for (int i = 0; i < nfds; i++) {
   2626c:	466e      	mov	r6, sp
   2626e:	464d      	mov	r5, r9
   26270:	464f      	mov	r7, r9
	int retval = 0;
   26272:	4654      	mov	r4, sl
		tmp[i].events = 0;
   26274:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   26276:	493f      	ldr	r1, [pc, #252]	; (26374 <nrf91_socket_offload_ioctl+0x140>)
	for (int i = 0; i < nfds; i++) {
   26278:	45d0      	cmp	r8, sl
   2627a:	dc0a      	bgt.n	26292 <nrf91_socket_offload_ioctl+0x5e>
	if (retval > 0) {
   2627c:	2c00      	cmp	r4, #0
   2627e:	d1e6      	bne.n	2624e <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   26280:	465a      	mov	r2, fp
   26282:	4641      	mov	r1, r8
   26284:	4668      	mov	r0, sp
   26286:	f01b f887 	bl	41398 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   2628a:	45a0      	cmp	r8, r4
   2628c:	dc26      	bgt.n	262dc <nrf91_socket_offload_ioctl+0xa8>
	return retval;
   2628e:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   26290:	e7dd      	b.n	2624e <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   26292:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   26294:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   26296:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   26298:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   2629a:	da05      	bge.n	262a8 <nrf91_socket_offload_ioctl+0x74>
			tmp[i].fd = fds[i].fd;
   2629c:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   2629e:	f10a 0a01 	add.w	sl, sl, #1
   262a2:	3608      	adds	r6, #8
   262a4:	3708      	adds	r7, #8
   262a6:	e7e7      	b.n	26278 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   262a8:	2286      	movs	r2, #134	; 0x86
   262aa:	f7fa fe39 	bl	20f20 <z_get_fd_obj>
			if (obj != NULL) {
   262ae:	2300      	movs	r3, #0
   262b0:	4930      	ldr	r1, [pc, #192]	; (26374 <nrf91_socket_offload_ioctl+0x140>)
   262b2:	b178      	cbz	r0, 262d4 <nrf91_socket_offload_ioctl+0xa0>
				tmp[i].fd = OBJ_TO_SD(obj);
   262b4:	6802      	ldr	r2, [r0, #0]
   262b6:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   262b8:	88b8      	ldrh	r0, [r7, #4]
   262ba:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   262bc:	bf42      	ittt	mi
   262be:	88b2      	ldrhmi	r2, [r6, #4]
   262c0:	f042 0201 	orrmi.w	r2, r2, #1
   262c4:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   262c6:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   262c8:	bf42      	ittt	mi
   262ca:	88b2      	ldrhmi	r2, [r6, #4]
   262cc:	f042 0204 	orrmi.w	r2, r2, #4
   262d0:	80b2      	strhmi	r2, [r6, #4]
   262d2:	e7e4      	b.n	2629e <nrf91_socket_offload_ioctl+0x6a>
				fds[i].revents = POLLNVAL;
   262d4:	2220      	movs	r2, #32
				retval++;
   262d6:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   262d8:	80fa      	strh	r2, [r7, #6]
				retval++;
   262da:	e7ed      	b.n	262b8 <nrf91_socket_offload_ioctl+0x84>
		if (fds[i].fd < 0) {
   262dc:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
   262e0:	2b00      	cmp	r3, #0
   262e2:	db20      	blt.n	26326 <nrf91_socket_offload_ioctl+0xf2>
		if (tmp[i].revents & NRF_POLLIN) {
   262e4:	eb0d 03c4 	add.w	r3, sp, r4, lsl #3
   262e8:	88db      	ldrh	r3, [r3, #6]
   262ea:	07df      	lsls	r7, r3, #31
			fds[i].revents |= POLLIN;
   262ec:	bf42      	ittt	mi
   262ee:	88ea      	ldrhmi	r2, [r5, #6]
   262f0:	f042 0201 	orrmi.w	r2, r2, #1
   262f4:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   262f6:	075e      	lsls	r6, r3, #29
			fds[i].revents |= POLLOUT;
   262f8:	bf42      	ittt	mi
   262fa:	88ea      	ldrhmi	r2, [r5, #6]
   262fc:	f042 0204 	orrmi.w	r2, r2, #4
   26300:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   26302:	0719      	lsls	r1, r3, #28
			fds[i].revents |= POLLERR;
   26304:	bf42      	ittt	mi
   26306:	88ea      	ldrhmi	r2, [r5, #6]
   26308:	f042 0208 	orrmi.w	r2, r2, #8
   2630c:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   2630e:	069a      	lsls	r2, r3, #26
			fds[i].revents |= POLLNVAL;
   26310:	bf42      	ittt	mi
   26312:	88ea      	ldrhmi	r2, [r5, #6]
   26314:	f042 0220 	orrmi.w	r2, r2, #32
   26318:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   2631a:	06db      	lsls	r3, r3, #27
			fds[i].revents |= POLLHUP;
   2631c:	bf42      	ittt	mi
   2631e:	88eb      	ldrhmi	r3, [r5, #6]
   26320:	f043 0310 	orrmi.w	r3, r3, #16
   26324:	80eb      	strhmi	r3, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   26326:	3401      	adds	r4, #1
   26328:	3508      	adds	r5, #8
   2632a:	e7ae      	b.n	2628a <nrf91_socket_offload_ioctl+0x56>
		ctx->lock = va_arg(args, struct k_mutex *);
   2632c:	6813      	ldr	r3, [r2, #0]
		return 0;
   2632e:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   26330:	6043      	str	r3, [r0, #4]
		return 0;
   26332:	e78c      	b.n	2624e <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   26334:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   26336:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   26338:	d00b      	beq.n	26352 <nrf91_socket_offload_ioctl+0x11e>
   2633a:	2904      	cmp	r1, #4
   2633c:	d110      	bne.n	26360 <nrf91_socket_offload_ioctl+0x12c>
		flags = va_arg(args, int);
   2633e:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   26340:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   26344:	d10c      	bne.n	26360 <nrf91_socket_offload_ioctl+0x12c>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   26346:	1392      	asrs	r2, r2, #14
}
   26348:	b011      	add	sp, #68	; 0x44
   2634a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2634e:	f01b b8b8 	b.w	414c2 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   26352:	2200      	movs	r2, #0
   26354:	f01b f8b5 	bl	414c2 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   26358:	0380      	lsls	r0, r0, #14
   2635a:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   2635e:	e776      	b.n	2624e <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   26360:	f017 fda3 	bl	3deaa <__errno>
   26364:	2316      	movs	r3, #22
	return retval;
   26366:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   2636a:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   2636c:	e76f      	b.n	2624e <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   2636e:	f06f 0411 	mvn.w	r4, #17
   26372:	e76c      	b.n	2624e <nrf91_socket_offload_ioctl+0x1a>
   26374:	000433b8 	.word	0x000433b8

00026378 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   26378:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   2637a:	4b03      	ldr	r3, [pc, #12]	; (26388 <nrf91_socket_iface_init+0x10>)
   2637c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   2637e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   26380:	4802      	ldr	r0, [pc, #8]	; (2638c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   26382:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   26384:	f7fb be70 	b.w	22068 <socket_offload_dns_register>
   26388:	200193a8 	.word	0x200193a8
   2638c:	000433b0 	.word	0x000433b0

00026390 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   26390:	4b0c      	ldr	r3, [pc, #48]	; (263c4 <nrf91_socket_is_supported+0x34>)
   26392:	781b      	ldrb	r3, [r3, #0]
   26394:	b98b      	cbnz	r3, 263ba <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   26396:	4b0c      	ldr	r3, [pc, #48]	; (263c8 <nrf91_socket_is_supported+0x38>)
   26398:	781b      	ldrb	r3, [r3, #0]
   2639a:	b183      	cbz	r3, 263be <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   2639c:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   263a0:	2b02      	cmp	r3, #2
   263a2:	d908      	bls.n	263b6 <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   263a4:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   263a8:	2801      	cmp	r0, #1
   263aa:	bf8c      	ite	hi
   263ac:	2000      	movhi	r0, #0
   263ae:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   263b0:	f080 0001 	eor.w	r0, r0, #1
   263b4:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   263b6:	2001      	movs	r0, #1
   263b8:	e7fa      	b.n	263b0 <nrf91_socket_is_supported+0x20>
		return false;
   263ba:	2000      	movs	r0, #0
   263bc:	4770      	bx	lr
	return true;
   263be:	2001      	movs	r0, #1
}
   263c0:	4770      	bx	lr
   263c2:	bf00      	nop
   263c4:	2001a670 	.word	0x2001a670
   263c8:	2001a671 	.word	0x2001a671

000263cc <nrf91_socket_offload_getaddrinfo>:
{
   263cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263d0:	4614      	mov	r4, r2
   263d2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   263d4:	2100      	movs	r1, #0
{
   263d6:	b08b      	sub	sp, #44	; 0x2c
   263d8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   263da:	2220      	movs	r2, #32
   263dc:	a802      	add	r0, sp, #8
{
   263de:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   263e0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   263e2:	f01b fbbd 	bl	41b60 <memset>
	if (hints != NULL) {
   263e6:	b1fc      	cbz	r4, 26428 <nrf91_socket_offload_getaddrinfo+0x5c>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   263e8:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   263ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   263ee:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   263f0:	bf48      	it	mi
   263f2:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   263f6:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   263f8:	68e3      	ldr	r3, [r4, #12]
   263fa:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   263fc:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   263fe:	2b03      	cmp	r3, #3
   26400:	f200 80d5 	bhi.w	265ae <nrf91_socket_offload_getaddrinfo+0x1e2>
   26404:	4a6d      	ldr	r2, [pc, #436]	; (265bc <nrf91_socket_offload_getaddrinfo+0x1f0>)
   26406:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   26408:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   2640c:	f000 80cf 	beq.w	265ae <nrf91_socket_offload_getaddrinfo+0x1e2>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   26410:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   26412:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   26414:	f019 f841 	bl	3f49a <nrf_to_z_protocol>
   26418:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2641a:	307b      	adds	r0, #123	; 0x7b
   2641c:	f000 80ca 	beq.w	265b4 <nrf91_socket_offload_getaddrinfo+0x1e8>
	if (z_in->ai_canonname != NULL) {
   26420:	69e3      	ldr	r3, [r4, #28]
   26422:	b103      	cbz	r3, 26426 <nrf91_socket_offload_getaddrinfo+0x5a>
		nrf_out->ai_canonname = z_in->ai_canonname;
   26424:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   26426:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   26428:	f04f 32ff 	mov.w	r2, #4294967295
   2642c:	f04f 33ff 	mov.w	r3, #4294967295
   26430:	4863      	ldr	r0, [pc, #396]	; (265c0 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   26432:	f019 f976 	bl	3f722 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   26436:	4622      	mov	r2, r4
   26438:	4631      	mov	r1, r6
   2643a:	4628      	mov	r0, r5
   2643c:	ab01      	add	r3, sp, #4
   2643e:	f00e fa15 	bl	3486c <nrf_getaddrinfo>
	if (retval != 0) {
   26442:	4604      	mov	r4, r0
   26444:	2800      	cmp	r0, #0
   26446:	d043      	beq.n	264d0 <nrf91_socket_offload_getaddrinfo+0x104>
	switch (nrf_gai_err) {
   26448:	f46f 7380 	mvn.w	r3, #256	; 0x100
   2644c:	441c      	add	r4, r3
   2644e:	2c14      	cmp	r4, #20
   26450:	d830      	bhi.n	264b4 <nrf91_socket_offload_getaddrinfo+0xe8>
   26452:	e8df f004 	tbb	[pc, r4]
   26456:	0ba9      	.short	0x0ba9
   26458:	2f2f143a 	.word	0x2f2f143a
   2645c:	2f2f2f2f 	.word	0x2f2f2f2f
   26460:	172f2f2f 	.word	0x172f2f2f
   26464:	23201d1a 	.word	0x23201d1a
   26468:	2926      	.short	0x2926
   2646a:	2c          	.byte	0x2c
   2646b:	00          	.byte	0x00
   2646c:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&getaddrinfo_lock);
   26470:	4853      	ldr	r0, [pc, #332]	; (265c0 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   26472:	f019 f958 	bl	3f726 <k_mutex_unlock.isra.0>
}
   26476:	4620      	mov	r0, r4
   26478:	b00b      	add	sp, #44	; 0x2c
   2647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return DNS_EAI_FAIL;
   2647e:	f06f 0403 	mvn.w	r4, #3
   26482:	e7f5      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_FAMILY;
   26484:	f06f 0405 	mvn.w	r4, #5
   26488:	e7f2      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_MEMORY;
   2648a:	f06f 0409 	mvn.w	r4, #9
   2648e:	e7ef      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NODATA;
   26490:	f06f 0404 	mvn.w	r4, #4
   26494:	e7ec      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NONAME;
   26496:	f06f 0401 	mvn.w	r4, #1
   2649a:	e7e9      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SERVICE;
   2649c:	f06f 0407 	mvn.w	r4, #7
   264a0:	e7e6      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SOCKTYPE;
   264a2:	f06f 0406 	mvn.w	r4, #6
   264a6:	e7e3      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_INPROGRESS;
   264a8:	f06f 0463 	mvn.w	r4, #99	; 0x63
   264ac:	e7e0      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SYSTEM;
   264ae:	f06f 040a 	mvn.w	r4, #10
   264b2:	e7dd      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
		__ASSERT(false, "Untranslated nrf_getaddrinfo() return value %d", nrf_gai_err);
   264b4:	4943      	ldr	r1, [pc, #268]	; (265c4 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   264b6:	4844      	ldr	r0, [pc, #272]	; (265c8 <nrf91_socket_offload_getaddrinfo+0x1fc>)
   264b8:	f240 12a5 	movw	r2, #421	; 0x1a5
   264bc:	f016 fe63 	bl	3d186 <assert_print>
   264c0:	f240 11a5 	movw	r1, #421	; 0x1a5
   264c4:	483f      	ldr	r0, [pc, #252]	; (265c4 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   264c6:	f016 fe57 	bl	3d178 <assert_post_action>
		return -1;
   264ca:	f04f 34ff 	mov.w	r4, #4294967295
   264ce:	e7cf      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
	struct zsock_addrinfo *latest_z_res = NULL;
   264d0:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   264d2:	4680      	mov	r8, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   264d4:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   264d6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 265cc <nrf91_socket_offload_getaddrinfo+0x200>
   264da:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   264dc:	b91e      	cbnz	r6, 264e6 <nrf91_socket_offload_getaddrinfo+0x11a>
	nrf_freeaddrinfo(nrf_res);
   264de:	9801      	ldr	r0, [sp, #4]
   264e0:	f01a fb80 	bl	40be4 <nrf_freeaddrinfo>
   264e4:	e7c4      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
					k_malloc(sizeof(struct zsock_addrinfo));
   264e6:	2050      	movs	r0, #80	; 0x50
   264e8:	f01b fa90 	bl	41a0c <k_malloc>
		if (next_z_res == NULL) {
   264ec:	4605      	mov	r5, r0
   264ee:	2800      	cmp	r0, #0
   264f0:	d049      	beq.n	26586 <nrf91_socket_offload_getaddrinfo+0x1ba>
	family = nrf_to_z_family(nrf_in->ai_family);
   264f2:	f8d6 b004 	ldr.w	fp, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   264f6:	68b3      	ldr	r3, [r6, #8]
   264f8:	f1bb 0f05 	cmp.w	fp, #5
	z_out->ai_next = NULL;
   264fc:	f8c0 8000 	str.w	r8, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   26500:	f8c0 801c 	str.w	r8, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   26504:	f8c0 8004 	str.w	r8, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   26508:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2650a:	d83f      	bhi.n	2658c <nrf91_socket_offload_getaddrinfo+0x1c0>
   2650c:	f91a 300b 	ldrsb.w	r3, [sl, fp]
	if (family == -EAFNOSUPPORT) {
   26510:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   26514:	d03a      	beq.n	2658c <nrf91_socket_offload_getaddrinfo+0x1c0>
	z_out->ai_family = family;
   26516:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   26518:	68f0      	ldr	r0, [r6, #12]
   2651a:	f018 ffbe 	bl	3f49a <nrf_to_z_protocol>
   2651e:	6128      	str	r0, [r5, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   26520:	307b      	adds	r0, #123	; 0x7b
   26522:	d107      	bne.n	26534 <nrf91_socket_offload_getaddrinfo+0x168>
		z_out->ai_addr = NULL;
   26524:	f8c5 8018 	str.w	r8, [r5, #24]
			k_free(next_z_res);
   26528:	4628      	mov	r0, r5
   2652a:	f01b fa68 	bl	419fe <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2652e:	f06f 0406 	mvn.w	r4, #6
   26532:	e030      	b.n	26596 <nrf91_socket_offload_getaddrinfo+0x1ca>
	if (nrf_in->ai_family == NRF_AF_INET) {
   26534:	f1bb 0f01 	cmp.w	fp, #1
   26538:	d114      	bne.n	26564 <nrf91_socket_offload_getaddrinfo+0x198>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2653a:	2008      	movs	r0, #8
   2653c:	f01b fa66 	bl	41a0c <k_malloc>
   26540:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   26542:	b1e8      	cbz	r0, 26580 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   26544:	2308      	movs	r3, #8
   26546:	616b      	str	r3, [r5, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   26548:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2654a:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2654c:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2654e:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   26550:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26554:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   26556:	f1b9 0f00 	cmp.w	r9, #0
   2655a:	d122      	bne.n	265a2 <nrf91_socket_offload_getaddrinfo+0x1d6>
			*res = next_z_res;
   2655c:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2655e:	46a9      	mov	r9, r5
   26560:	69f6      	ldr	r6, [r6, #28]
   26562:	e7bb      	b.n	264dc <nrf91_socket_offload_getaddrinfo+0x110>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   26564:	f1bb 0f02 	cmp.w	fp, #2
   26568:	d1de      	bne.n	26528 <nrf91_socket_offload_getaddrinfo+0x15c>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2656a:	2018      	movs	r0, #24
   2656c:	f01b fa4e 	bl	41a0c <k_malloc>
   26570:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   26572:	b128      	cbz	r0, 26580 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   26574:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   26576:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   26578:	616b      	str	r3, [r5, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2657a:	f019 f804 	bl	3f586 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2657e:	e7ea      	b.n	26556 <nrf91_socket_offload_getaddrinfo+0x18a>
			k_free(next_z_res);
   26580:	4628      	mov	r0, r5
   26582:	f01b fa3c 	bl	419fe <k_free>
			retval = DNS_EAI_MEMORY;
   26586:	f06f 0409 	mvn.w	r4, #9
   2658a:	e004      	b.n	26596 <nrf91_socket_offload_getaddrinfo+0x1ca>
			k_free(next_z_res);
   2658c:	4628      	mov	r0, r5
   2658e:	f01b fa36 	bl	419fe <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   26592:	f06f 0408 	mvn.w	r4, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   26596:	6838      	ldr	r0, [r7, #0]
   26598:	f018 ffe8 	bl	3f56c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2659c:	2300      	movs	r3, #0
   2659e:	603b      	str	r3, [r7, #0]
   265a0:	e79d      	b.n	264de <nrf91_socket_offload_getaddrinfo+0x112>
			latest_z_res->ai_next = next_z_res;
   265a2:	f8c9 5000 	str.w	r5, [r9]
   265a6:	e7da      	b.n	2655e <nrf91_socket_offload_getaddrinfo+0x192>
		return DNS_EAI_ADDRFAMILY;
   265a8:	f06f 0408 	mvn.w	r4, #8
   265ac:	e760      	b.n	26470 <nrf91_socket_offload_getaddrinfo+0xa4>
			return DNS_EAI_ADDRFAMILY;
   265ae:	f06f 0408 	mvn.w	r4, #8
   265b2:	e760      	b.n	26476 <nrf91_socket_offload_getaddrinfo+0xaa>
			return DNS_EAI_SOCKTYPE;
   265b4:	f06f 0406 	mvn.w	r4, #6
   265b8:	e75d      	b.n	26476 <nrf91_socket_offload_getaddrinfo+0xaa>
   265ba:	bf00      	nop
   265bc:	0004593f 	.word	0x0004593f
   265c0:	20014f2c 	.word	0x20014f2c
   265c4:	00045900 	.word	0x00045900
   265c8:	0004494f 	.word	0x0004494f
   265cc:	00045943 	.word	0x00045943

000265d0 <nrf91_socket_offload_sendmsg>:
{
   265d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   265d4:	4680      	mov	r8, r0
   265d6:	4691      	mov	r9, r2
	if (msg == NULL) {
   265d8:	460c      	mov	r4, r1
   265da:	b1f9      	cbz	r1, 2661c <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   265dc:	2300      	movs	r3, #0
	ssize_t len = 0;
   265de:	461a      	mov	r2, r3
   265e0:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   265e2:	4298      	cmp	r0, r3
   265e4:	d124      	bne.n	26630 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   265e6:	2a80      	cmp	r2, #128	; 0x80
   265e8:	d86d      	bhi.n	266c6 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   265ea:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   265ec:	f04f 32ff 	mov.w	r2, #4294967295
   265f0:	f04f 33ff 	mov.w	r3, #4294967295
   265f4:	4836      	ldr	r0, [pc, #216]	; (266d0 <nrf91_socket_offload_sendmsg+0x100>)
   265f6:	f019 f894 	bl	3f722 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   265fa:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   265fc:	4e35      	ldr	r6, [pc, #212]	; (266d4 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   265fe:	68e3      	ldr	r3, [r4, #12]
   26600:	429d      	cmp	r5, r3
   26602:	d31c      	bcc.n	2663e <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   26604:	2600      	movs	r6, #0
		ret = 0;
   26606:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   26608:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 266d4 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   2660c:	42b7      	cmp	r7, r6
   2660e:	dd01      	ble.n	26614 <nrf91_socket_offload_sendmsg+0x44>
   26610:	2d00      	cmp	r5, #0
   26612:	da25      	bge.n	26660 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   26614:	482e      	ldr	r0, [pc, #184]	; (266d0 <nrf91_socket_offload_sendmsg+0x100>)
   26616:	f019 f886 	bl	3f726 <k_mutex_unlock.isra.0>
		return ret;
   2661a:	e005      	b.n	26628 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   2661c:	f017 fc45 	bl	3deaa <__errno>
   26620:	2316      	movs	r3, #22
		return -1;
   26622:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   26626:	6003      	str	r3, [r0, #0]
}
   26628:	4628      	mov	r0, r5
   2662a:	b002      	add	sp, #8
   2662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   26630:	68a1      	ldr	r1, [r4, #8]
   26632:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   26636:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   26638:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   2663a:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   2663c:	e7d1      	b.n	265e2 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2663e:	68a1      	ldr	r1, [r4, #8]
   26640:	19f0      	adds	r0, r6, r7
   26642:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   26646:	685a      	ldr	r2, [r3, #4]
   26648:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   2664c:	f01b fa68 	bl	41b20 <memcpy>
			len += msg->msg_iov[i].iov_len;
   26650:	68a3      	ldr	r3, [r4, #8]
   26652:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   26656:	4453      	add	r3, sl
   26658:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   2665a:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   2665c:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   2665e:	e7ce      	b.n	265fe <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   26660:	6863      	ldr	r3, [r4, #4]
   26662:	1bba      	subs	r2, r7, r6
   26664:	9301      	str	r3, [sp, #4]
   26666:	6823      	ldr	r3, [r4, #0]
   26668:	eb0a 0106 	add.w	r1, sl, r6
   2666c:	9300      	str	r3, [sp, #0]
   2666e:	4640      	mov	r0, r8
   26670:	464b      	mov	r3, r9
   26672:	f018 ffb5 	bl	3f5e0 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   26676:	1e05      	subs	r5, r0, #0
				offset += ret;
   26678:	bfc8      	it	gt
   2667a:	1976      	addgt	r6, r6, r5
   2667c:	e7c6      	b.n	2660c <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   2667e:	68a3      	ldr	r3, [r4, #8]
   26680:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   26684:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   26688:	685b      	ldr	r3, [r3, #4]
   2668a:	b133      	cbz	r3, 2669a <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   2668c:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   2668e:	68a3      	ldr	r3, [r4, #8]
   26690:	eb03 020a 	add.w	r2, r3, sl
   26694:	6852      	ldr	r2, [r2, #4]
   26696:	4297      	cmp	r7, r2
   26698:	d304      	bcc.n	266a4 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   2669a:	3601      	adds	r6, #1
   2669c:	68e3      	ldr	r3, [r4, #12]
   2669e:	42b3      	cmp	r3, r6
   266a0:	d8ed      	bhi.n	2667e <nrf91_socket_offload_sendmsg+0xae>
   266a2:	e7c1      	b.n	26628 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   266a4:	f853 100a 	ldr.w	r1, [r3, sl]
   266a8:	6863      	ldr	r3, [r4, #4]
   266aa:	4439      	add	r1, r7
   266ac:	9301      	str	r3, [sp, #4]
   266ae:	6823      	ldr	r3, [r4, #0]
   266b0:	4640      	mov	r0, r8
   266b2:	9300      	str	r3, [sp, #0]
   266b4:	1bd2      	subs	r2, r2, r7
   266b6:	464b      	mov	r3, r9
   266b8:	f018 ff92 	bl	3f5e0 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   266bc:	1e01      	subs	r1, r0, #0
   266be:	db05      	blt.n	266cc <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   266c0:	440f      	add	r7, r1
			len += ret;
   266c2:	440d      	add	r5, r1
   266c4:	e7e3      	b.n	2668e <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   266c6:	2600      	movs	r6, #0
	len = 0;
   266c8:	4635      	mov	r5, r6
   266ca:	e7e7      	b.n	2669c <nrf91_socket_offload_sendmsg+0xcc>
   266cc:	460d      	mov	r5, r1
   266ce:	e7ab      	b.n	26628 <nrf91_socket_offload_sendmsg+0x58>
   266d0:	20014f7c 	.word	0x20014f7c
   266d4:	2001a5f0 	.word	0x2001a5f0

000266d8 <allocate_ctx>:
{
   266d8:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   266da:	f04f 32ff 	mov.w	r2, #4294967295
   266de:	f04f 33ff 	mov.w	r3, #4294967295
{
   266e2:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   266e4:	480b      	ldr	r0, [pc, #44]	; (26714 <allocate_ctx+0x3c>)
   266e6:	f019 f81c 	bl	3f722 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   266ea:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   266ec:	4a0a      	ldr	r2, [pc, #40]	; (26718 <allocate_ctx+0x40>)
   266ee:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   266f2:	3101      	adds	r1, #1
   266f4:	d108      	bne.n	26708 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   266f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   266fa:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   266fe:	4805      	ldr	r0, [pc, #20]	; (26714 <allocate_ctx+0x3c>)
   26700:	f019 f811 	bl	3f726 <k_mutex_unlock.isra.0>
}
   26704:	4628      	mov	r0, r5
   26706:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   26708:	3301      	adds	r3, #1
   2670a:	2b08      	cmp	r3, #8
   2670c:	d1ef      	bne.n	266ee <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   2670e:	2500      	movs	r5, #0
   26710:	e7f5      	b.n	266fe <allocate_ctx+0x26>
   26712:	bf00      	nop
   26714:	20014f04 	.word	0x20014f04
   26718:	200193ac 	.word	0x200193ac

0002671c <release_ctx>:
{
   2671c:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   2671e:	f04f 32ff 	mov.w	r2, #4294967295
{
   26722:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   26724:	f04f 33ff 	mov.w	r3, #4294967295
   26728:	4806      	ldr	r0, [pc, #24]	; (26744 <release_ctx+0x28>)
   2672a:	f018 fffa 	bl	3f722 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   2672e:	f04f 32ff 	mov.w	r2, #4294967295
   26732:	2300      	movs	r3, #0
	k_mutex_unlock(&ctx_lock);
   26734:	4803      	ldr	r0, [pc, #12]	; (26744 <release_ctx+0x28>)
	ctx->lock = NULL;
   26736:	e9c4 2300 	strd	r2, r3, [r4]
}
   2673a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&ctx_lock);
   2673e:	f018 bff2 	b.w	3f726 <k_mutex_unlock.isra.0>
   26742:	bf00      	nop
   26744:	20014f04 	.word	0x20014f04

00026748 <nrf91_socket_offload_accept>:
{
   26748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2674c:	b08b      	sub	sp, #44	; 0x2c
   2674e:	4607      	mov	r7, r0
   26750:	460c      	mov	r4, r1
   26752:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   26754:	f7fa fc16 	bl	20f84 <z_reserve_fd>
   26758:	4606      	mov	r6, r0
	if (fd < 0) {
   2675a:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   2675c:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   2675e:	db23      	blt.n	267a8 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   26760:	b32c      	cbz	r4, 267ae <nrf91_socket_offload_accept+0x66>
   26762:	b33d      	cbz	r5, 267b4 <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   26764:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   26766:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   26768:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   2676a:	bf0c      	ite	eq
   2676c:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2676e:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   26770:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   26772:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   26774:	4639      	mov	r1, r7
   26776:	f01a fb5b 	bl	40e30 <nrf_accept>
	if (new_sd < 0) {
   2677a:	f1b0 0900 	subs.w	r9, r0, #0
   2677e:	db3b      	blt.n	267f8 <nrf91_socket_offload_accept+0xb0>
	ctx = allocate_ctx(new_sd);
   26780:	f7ff ffaa 	bl	266d8 <allocate_ctx>
	if (ctx == NULL) {
   26784:	4680      	mov	r8, r0
   26786:	b9c0      	cbnz	r0, 267ba <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   26788:	f017 fb8f 	bl	3deaa <__errno>
   2678c:	230c      	movs	r3, #12
   2678e:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   26790:	4648      	mov	r0, r9
   26792:	f01a fa9a 	bl	40cca <nrf_close>
	if (ctx != NULL) {
   26796:	f1b8 0f00 	cmp.w	r8, #0
   2679a:	d002      	beq.n	267a2 <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   2679c:	4640      	mov	r0, r8
   2679e:	f7ff ffbd 	bl	2671c <release_ctx>
	z_free_fd(fd);
   267a2:	4630      	mov	r0, r6
   267a4:	f7fa fc3e 	bl	21024 <z_free_fd>
		return -1;
   267a8:	f04f 36ff 	mov.w	r6, #4294967295
   267ac:	e017      	b.n	267de <nrf91_socket_offload_accept+0x96>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   267ae:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   267b0:	4627      	mov	r7, r4
   267b2:	e7df      	b.n	26774 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   267b4:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   267b6:	462f      	mov	r7, r5
   267b8:	e7dc      	b.n	26774 <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   267ba:	b15c      	cbz	r4, 267d4 <nrf91_socket_offload_accept+0x8c>
   267bc:	b155      	cbz	r5, 267d4 <nrf91_socket_offload_accept+0x8c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   267be:	687b      	ldr	r3, [r7, #4]
   267c0:	2b01      	cmp	r3, #1
   267c2:	d110      	bne.n	267e6 <nrf91_socket_offload_accept+0x9e>
			*addrlen = sizeof(struct sockaddr_in);
   267c4:	2208      	movs	r2, #8
   267c6:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   267c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   267cc:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   267ce:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   267d0:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   267d2:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   267d4:	4641      	mov	r1, r8
   267d6:	4630      	mov	r0, r6
   267d8:	4a0a      	ldr	r2, [pc, #40]	; (26804 <nrf91_socket_offload_accept+0xbc>)
   267da:	f7fa fc09 	bl	20ff0 <z_finalize_fd>
}
   267de:	4630      	mov	r0, r6
   267e0:	b00b      	add	sp, #44	; 0x2c
   267e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   267e6:	2b02      	cmp	r3, #2
   267e8:	d1d2      	bne.n	26790 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   267ea:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   267ec:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   267ee:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   267f0:	a901      	add	r1, sp, #4
   267f2:	f018 fec8 	bl	3f586 <nrf_to_z_ipv6>
   267f6:	e7ed      	b.n	267d4 <nrf91_socket_offload_accept+0x8c>
	if (new_sd != -1) {
   267f8:	f1b9 3fff 	cmp.w	r9, #4294967295
   267fc:	d0d1      	beq.n	267a2 <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   267fe:	f04f 0800 	mov.w	r8, #0
   26802:	e7c5      	b.n	26790 <nrf91_socket_offload_accept+0x48>
   26804:	000433b8 	.word	0x000433b8

00026808 <nrf91_socket_create>:
{
   26808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (type & SOCK_NATIVE) {
   2680a:	1e0e      	subs	r6, r1, #0
{
   2680c:	4605      	mov	r5, r0
   2680e:	9201      	str	r2, [sp, #4]
	if (type & SOCK_NATIVE) {
   26810:	da12      	bge.n	26838 <nrf91_socket_create+0x30>
	k_sched_lock();
   26812:	f011 fbb3 	bl	37f7c <k_sched_lock>
	*offload_lock = true;
   26816:	4f28      	ldr	r7, [pc, #160]	; (268b8 <nrf91_socket_create+0xb0>)
   26818:	2301      	movs	r3, #1
   2681a:	703b      	strb	r3, [r7, #0]
	return z_impl_zsock_socket(family, type, proto);
   2681c:	4628      	mov	r0, r5
   2681e:	9a01      	ldr	r2, [sp, #4]
   26820:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   26824:	f7fb fac8 	bl	21db8 <z_impl_zsock_socket>
	*offload_lock = false;
   26828:	2300      	movs	r3, #0
   2682a:	703b      	strb	r3, [r7, #0]
   2682c:	4604      	mov	r4, r0
	k_sched_unlock();
   2682e:	f012 f847 	bl	388c0 <k_sched_unlock>
}
   26832:	4620      	mov	r0, r4
   26834:	b003      	add	sp, #12
   26836:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   26838:	0073      	lsls	r3, r6, #1
   2683a:	d503      	bpl.n	26844 <nrf91_socket_create+0x3c>
	k_sched_lock();
   2683c:	f011 fb9e 	bl	37f7c <k_sched_lock>
	*offload_lock = true;
   26840:	4f1e      	ldr	r7, [pc, #120]	; (268bc <nrf91_socket_create+0xb4>)
   26842:	e7e9      	b.n	26818 <nrf91_socket_create+0x10>
	fd = z_reserve_fd();
   26844:	f7fa fb9e 	bl	20f84 <z_reserve_fd>
	if (fd < 0) {
   26848:	1e04      	subs	r4, r0, #0
   2684a:	db0f      	blt.n	2686c <nrf91_socket_create+0x64>
	family = z_to_nrf_family(family);
   2684c:	b2ad      	uxth	r5, r5
	switch (z_family) {
   2684e:	2d03      	cmp	r5, #3
   26850:	d805      	bhi.n	2685e <nrf91_socket_create+0x56>
   26852:	4b1b      	ldr	r3, [pc, #108]	; (268c0 <nrf91_socket_create+0xb8>)
	if (family == -EAFNOSUPPORT) {
   26854:	9a01      	ldr	r2, [sp, #4]
   26856:	575d      	ldrsb	r5, [r3, r5]
   26858:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   2685c:	d109      	bne.n	26872 <nrf91_socket_create+0x6a>
		errno = EAFNOSUPPORT;
   2685e:	f017 fb24 	bl	3deaa <__errno>
   26862:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   26864:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   26866:	4620      	mov	r0, r4
   26868:	f7fa fbdc 	bl	21024 <z_free_fd>
		return -1;
   2686c:	f04f 34ff 	mov.w	r4, #4294967295
   26870:	e7df      	b.n	26832 <nrf91_socket_create+0x2a>
	proto = z_to_nrf_protocol(proto);
   26872:	4610      	mov	r0, r2
   26874:	f018 fe11 	bl	3f49a <nrf_to_z_protocol>
	if (proto == -EPROTONOSUPPORT) {
   26878:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   2687c:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2687e:	d103      	bne.n	26888 <nrf91_socket_create+0x80>
		errno = EPROTONOSUPPORT;
   26880:	f017 fb13 	bl	3deaa <__errno>
   26884:	237b      	movs	r3, #123	; 0x7b
   26886:	e7ed      	b.n	26864 <nrf91_socket_create+0x5c>
	retval = nrf_socket(family, type, proto);
   26888:	4628      	mov	r0, r5
   2688a:	4631      	mov	r1, r6
   2688c:	f01a f9bb 	bl	40c06 <nrf_socket>
	if (sd < 0) {
   26890:	1e05      	subs	r5, r0, #0
   26892:	dbe8      	blt.n	26866 <nrf91_socket_create+0x5e>
	ctx = allocate_ctx(sd);
   26894:	f7ff ff20 	bl	266d8 <allocate_ctx>
	if (ctx == NULL) {
   26898:	4601      	mov	r1, r0
   2689a:	b938      	cbnz	r0, 268ac <nrf91_socket_create+0xa4>
		errno = ENOMEM;
   2689c:	f017 fb05 	bl	3deaa <__errno>
   268a0:	230c      	movs	r3, #12
   268a2:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   268a4:	4628      	mov	r0, r5
   268a6:	f01a fa10 	bl	40cca <nrf_close>
   268aa:	e7dc      	b.n	26866 <nrf91_socket_create+0x5e>
	z_finalize_fd(fd, ctx,
   268ac:	4620      	mov	r0, r4
   268ae:	4a05      	ldr	r2, [pc, #20]	; (268c4 <nrf91_socket_create+0xbc>)
   268b0:	f7fa fb9e 	bl	20ff0 <z_finalize_fd>
	return fd;
   268b4:	e7bd      	b.n	26832 <nrf91_socket_create+0x2a>
   268b6:	bf00      	nop
   268b8:	2001a670 	.word	0x2001a670
   268bc:	2001a671 	.word	0x2001a671
   268c0:	0004593f 	.word	0x0004593f
   268c4:	000433b8 	.word	0x000433b8

000268c8 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   268c8:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   268ca:	4805      	ldr	r0, [pc, #20]	; (268e0 <at_monitor_sys_init+0x18>)
   268cc:	f00e feb2 	bl	35634 <nrf_modem_at_notif_handler_set>
	if (err) {
   268d0:	4602      	mov	r2, r0
   268d2:	b118      	cbz	r0, 268dc <at_monitor_sys_init+0x14>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   268d4:	2145      	movs	r1, #69	; 0x45
   268d6:	4803      	ldr	r0, [pc, #12]	; (268e4 <at_monitor_sys_init+0x1c>)
   268d8:	f016 fc8f 	bl	3d1fa <z_log_minimal_printk>
	}

	return 0;
}
   268dc:	2000      	movs	r0, #0
   268de:	bd08      	pop	{r3, pc}
   268e0:	000268e9 	.word	0x000268e9
   268e4:	00045949 	.word	0x00045949

000268e8 <at_monitor_dispatch>:
{
   268e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(notif != NULL);
   268ea:	4604      	mov	r4, r0
   268ec:	b940      	cbnz	r0, 26900 <at_monitor_dispatch+0x18>
   268ee:	4931      	ldr	r1, [pc, #196]	; (269b4 <at_monitor_dispatch+0xcc>)
   268f0:	4831      	ldr	r0, [pc, #196]	; (269b8 <at_monitor_dispatch+0xd0>)
   268f2:	2224      	movs	r2, #36	; 0x24
   268f4:	f016 fc47 	bl	3d186 <assert_print>
   268f8:	2124      	movs	r1, #36	; 0x24
   268fa:	482e      	ldr	r0, [pc, #184]	; (269b4 <at_monitor_dispatch+0xcc>)
   268fc:	f016 fc3c 	bl	3d178 <assert_post_action>
{
   26900:	4d2e      	ldr	r5, [pc, #184]	; (269bc <at_monitor_dispatch+0xd4>)
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   26902:	4e2f      	ldr	r6, [pc, #188]	; (269c0 <at_monitor_dispatch+0xd8>)
   26904:	4f2b      	ldr	r7, [pc, #172]	; (269b4 <at_monitor_dispatch+0xcc>)
   26906:	42b5      	cmp	r5, r6
   26908:	d908      	bls.n	2691c <at_monitor_dispatch+0x34>
   2690a:	4639      	mov	r1, r7
   2690c:	482a      	ldr	r0, [pc, #168]	; (269b8 <at_monitor_dispatch+0xd0>)
   2690e:	222a      	movs	r2, #42	; 0x2a
   26910:	f016 fc39 	bl	3d186 <assert_print>
   26914:	212a      	movs	r1, #42	; 0x2a
   26916:	4638      	mov	r0, r7
   26918:	f016 fc2e 	bl	3d178 <assert_post_action>
   2691c:	42b5      	cmp	r5, r6
   2691e:	d310      	bcc.n	26942 <at_monitor_dispatch+0x5a>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26920:	4d28      	ldr	r5, [pc, #160]	; (269c4 <at_monitor_dispatch+0xdc>)
   26922:	4e29      	ldr	r6, [pc, #164]	; (269c8 <at_monitor_dispatch+0xe0>)
   26924:	4f23      	ldr	r7, [pc, #140]	; (269b4 <at_monitor_dispatch+0xcc>)
   26926:	42b5      	cmp	r5, r6
   26928:	d908      	bls.n	2693c <at_monitor_dispatch+0x54>
   2692a:	4639      	mov	r1, r7
   2692c:	4822      	ldr	r0, [pc, #136]	; (269b8 <at_monitor_dispatch+0xd0>)
   2692e:	2232      	movs	r2, #50	; 0x32
   26930:	f016 fc29 	bl	3d186 <assert_print>
   26934:	2132      	movs	r1, #50	; 0x32
   26936:	4638      	mov	r0, r7
   26938:	f016 fc1e 	bl	3d178 <assert_post_action>
   2693c:	42b5      	cmp	r5, r6
   2693e:	d30f      	bcc.n	26960 <at_monitor_dispatch+0x78>
}
   26940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26942:	7a2b      	ldrb	r3, [r5, #8]
   26944:	b923      	cbnz	r3, 26950 <at_monitor_dispatch+0x68>
   26946:	6829      	ldr	r1, [r5, #0]
   26948:	b921      	cbnz	r1, 26954 <at_monitor_dispatch+0x6c>
			e->handler(notif);
   2694a:	4620      	mov	r0, r4
   2694c:	686b      	ldr	r3, [r5, #4]
   2694e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   26950:	350c      	adds	r5, #12
   26952:	e7d8      	b.n	26906 <at_monitor_dispatch+0x1e>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26954:	4620      	mov	r0, r4
   26956:	f01b fb1d 	bl	41f94 <strstr>
   2695a:	2800      	cmp	r0, #0
   2695c:	d1f5      	bne.n	2694a <at_monitor_dispatch+0x62>
   2695e:	e7f7      	b.n	26950 <at_monitor_dispatch+0x68>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26960:	7a2b      	ldrb	r3, [r5, #8]
   26962:	b9c3      	cbnz	r3, 26996 <at_monitor_dispatch+0xae>
   26964:	6829      	ldr	r1, [r5, #0]
   26966:	b989      	cbnz	r1, 2698c <at_monitor_dispatch+0xa4>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   26968:	4620      	mov	r0, r4
   2696a:	f7f6 fc6a 	bl	1d242 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   2696e:	2200      	movs	r2, #0
   26970:	1d41      	adds	r1, r0, #5
   26972:	2300      	movs	r3, #0
   26974:	4815      	ldr	r0, [pc, #84]	; (269cc <at_monitor_dispatch+0xe4>)
   26976:	f01a fe83 	bl	41680 <k_heap_alloc>
	if (!at_notif) {
   2697a:	4605      	mov	r5, r0
   2697c:	b968      	cbnz	r0, 2699a <at_monitor_dispatch+0xb2>
		LOG_WRN("No heap space for incoming notification: %s",
   2697e:	4622      	mov	r2, r4
}
   26980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   26984:	2157      	movs	r1, #87	; 0x57
   26986:	4812      	ldr	r0, [pc, #72]	; (269d0 <at_monitor_dispatch+0xe8>)
   26988:	f016 bc37 	b.w	3d1fa <z_log_minimal_printk>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2698c:	4620      	mov	r0, r4
   2698e:	f01b fb01 	bl	41f94 <strstr>
   26992:	2800      	cmp	r0, #0
   26994:	d1e8      	bne.n	26968 <at_monitor_dispatch+0x80>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26996:	350c      	adds	r5, #12
   26998:	e7c5      	b.n	26926 <at_monitor_dispatch+0x3e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2699a:	4621      	mov	r1, r4
   2699c:	3004      	adds	r0, #4
   2699e:	f01b faaa 	bl	41ef6 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   269a2:	4629      	mov	r1, r5
   269a4:	480b      	ldr	r0, [pc, #44]	; (269d4 <at_monitor_dispatch+0xec>)
   269a6:	f01a fea4 	bl	416f2 <k_queue_append>
}
   269aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   269ae:	480a      	ldr	r0, [pc, #40]	; (269d8 <at_monitor_dispatch+0xf0>)
   269b0:	f011 b808 	b.w	379c4 <k_work_submit>
   269b4:	0004597b 	.word	0x0004597b
   269b8:	0004494f 	.word	0x0004494f
   269bc:	20014cec 	.word	0x20014cec
   269c0:	20014cec 	.word	0x20014cec
   269c4:	20014c74 	.word	0x20014c74
   269c8:	20014cec 	.word	0x20014cec
   269cc:	20014e80 	.word	0x20014e80
   269d0:	000459a7 	.word	0x000459a7
   269d4:	20015110 	.word	0x20015110
   269d8:	200146a0 	.word	0x200146a0

000269dc <at_monitor_task>:
{
   269dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   269e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 26a54 <at_monitor_task+0x78>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   269e4:	4f17      	ldr	r7, [pc, #92]	; (26a44 <at_monitor_task+0x68>)
   269e6:	2200      	movs	r2, #0
   269e8:	2300      	movs	r3, #0
   269ea:	4648      	mov	r0, r9
   269ec:	f010 fc74 	bl	372d8 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   269f0:	4605      	mov	r5, r0
   269f2:	bb10      	cbnz	r0, 26a3a <at_monitor_task+0x5e>
}
   269f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!e->paused &&
   269f8:	7a23      	ldrb	r3, [r4, #8]
   269fa:	b92b      	cbnz	r3, 26a08 <at_monitor_task+0x2c>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   269fc:	6821      	ldr	r1, [r4, #0]
   269fe:	1d2e      	adds	r6, r5, #4
			if (!e->paused &&
   26a00:	b9a9      	cbnz	r1, 26a2e <at_monitor_task+0x52>
				e->handler(at_notif->data);
   26a02:	4630      	mov	r0, r6
   26a04:	6863      	ldr	r3, [r4, #4]
   26a06:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26a08:	340c      	adds	r4, #12
   26a0a:	42bc      	cmp	r4, r7
   26a0c:	d908      	bls.n	26a20 <at_monitor_task+0x44>
   26a0e:	4641      	mov	r1, r8
   26a10:	480d      	ldr	r0, [pc, #52]	; (26a48 <at_monitor_task+0x6c>)
   26a12:	2253      	movs	r2, #83	; 0x53
   26a14:	f016 fbb7 	bl	3d186 <assert_print>
   26a18:	2153      	movs	r1, #83	; 0x53
   26a1a:	4640      	mov	r0, r8
   26a1c:	f016 fbac 	bl	3d178 <assert_post_action>
   26a20:	42bc      	cmp	r4, r7
   26a22:	d3e9      	bcc.n	269f8 <at_monitor_task+0x1c>
		k_heap_free(&at_monitor_heap, at_notif);
   26a24:	4629      	mov	r1, r5
   26a26:	4809      	ldr	r0, [pc, #36]	; (26a4c <at_monitor_task+0x70>)
   26a28:	f00f ff58 	bl	368dc <k_heap_free>
   26a2c:	e7db      	b.n	269e6 <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   26a2e:	4630      	mov	r0, r6
   26a30:	f01b fab0 	bl	41f94 <strstr>
   26a34:	2800      	cmp	r0, #0
   26a36:	d1e4      	bne.n	26a02 <at_monitor_task+0x26>
   26a38:	e7e6      	b.n	26a08 <at_monitor_task+0x2c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26a3a:	4c05      	ldr	r4, [pc, #20]	; (26a50 <at_monitor_task+0x74>)
   26a3c:	f8df 8018 	ldr.w	r8, [pc, #24]	; 26a58 <at_monitor_task+0x7c>
   26a40:	e7e3      	b.n	26a0a <at_monitor_task+0x2e>
   26a42:	bf00      	nop
   26a44:	20014cec 	.word	0x20014cec
   26a48:	0004494f 	.word	0x0004494f
   26a4c:	20014e80 	.word	0x20014e80
   26a50:	20014c74 	.word	0x20014c74
   26a54:	20015110 	.word	0x20015110
   26a58:	0004597b 	.word	0x0004597b

00026a5c <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   26a5c:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   26a5e:	4d05      	ldr	r5, [pc, #20]	; (26a74 <write_uart_string+0x18>)
   26a60:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   26a62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   26a66:	b901      	cbnz	r1, 26a6a <write_uart_string+0xe>
	}
}
   26a68:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   26a6a:	6828      	ldr	r0, [r5, #0]
   26a6c:	6883      	ldr	r3, [r0, #8]
   26a6e:	685b      	ldr	r3, [r3, #4]
   26a70:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   26a72:	e7f6      	b.n	26a62 <write_uart_string+0x6>
   26a74:	20019400 	.word	0x20019400

00026a78 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   26a78:	b508      	push	{r3, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   26a7a:	4b0c      	ldr	r3, [pc, #48]	; (26aac <cmd_send+0x34>)
   26a7c:	4a0c      	ldr	r2, [pc, #48]	; (26ab0 <cmd_send+0x38>)
   26a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   26a82:	4618      	mov	r0, r3
   26a84:	f00e fe02 	bl	3568c <nrf_modem_at_cmd>
	if (err < 0) {
   26a88:	1e02      	subs	r2, r0, #0
   26a8a:	da03      	bge.n	26a94 <cmd_send+0x1c>
		LOG_ERR("Error while processing AT command: %d", err);
   26a8c:	2145      	movs	r1, #69	; 0x45
   26a8e:	4809      	ldr	r0, [pc, #36]	; (26ab4 <cmd_send+0x3c>)
   26a90:	f016 fbb3 	bl	3d1fa <z_log_minimal_printk>
	}

	write_uart_string(at_buf);
   26a94:	4805      	ldr	r0, [pc, #20]	; (26aac <cmd_send+0x34>)
   26a96:	f7ff ffe1 	bl	26a5c <write_uart_string>

	at_buf_busy = false;
   26a9a:	2200      	movs	r2, #0
   26a9c:	4b06      	ldr	r3, [pc, #24]	; (26ab8 <cmd_send+0x40>)
   26a9e:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
   26aa0:	4b06      	ldr	r3, [pc, #24]	; (26abc <cmd_send+0x44>)
   26aa2:	6818      	ldr	r0, [r3, #0]
}
   26aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   26aa8:	f018 bee0 	b.w	3f86c <z_impl_uart_irq_rx_enable>
   26aac:	2001a672 	.word	0x2001a672
   26ab0:	0004abfc 	.word	0x0004abfc
   26ab4:	000459e3 	.word	0x000459e3
   26ab8:	2001b672 	.word	0x2001b672
   26abc:	20019400 	.word	0x20019400

00026ac0 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   26ac0:	2201      	movs	r2, #1
{
   26ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		term_mode = mode;
   26ac6:	4b3a      	ldr	r3, [pc, #232]	; (26bb0 <at_host_init+0xf0>)
{
   26ac8:	b085      	sub	sp, #20
		term_mode = mode;
   26aca:	701a      	strb	r2, [r3, #0]
   26acc:	4839      	ldr	r0, [pc, #228]	; (26bb4 <at_host_init+0xf4>)
   26ace:	f00f fd09 	bl	364e4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   26ad2:	4e39      	ldr	r6, [pc, #228]	; (26bb8 <at_host_init+0xf8>)
   26ad4:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
   26ad6:	b980      	cbnz	r0, 26afa <at_host_init+0x3a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   26ad8:	4a36      	ldr	r2, [pc, #216]	; (26bb4 <at_host_init+0xf4>)
   26ada:	2145      	movs	r1, #69	; 0x45
   26adc:	4837      	ldr	r0, [pc, #220]	; (26bbc <at_host_init+0xfc>)
   26ade:	f016 fb8c 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   26ae2:	f06f 0215 	mvn.w	r2, #21
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   26ae6:	2145      	movs	r1, #69	; 0x45
   26ae8:	4835      	ldr	r0, [pc, #212]	; (26bc0 <at_host_init+0x100>)
   26aea:	f016 fb86 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   26aee:	f06f 050d 	mvn.w	r5, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   26af2:	4628      	mov	r0, r5
   26af4:	b005      	add	sp, #20
   26af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26afa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	return z_impl_k_uptime_ticks();
   26afe:	f01a fe9f 	bl	41840 <z_impl_k_uptime_ticks>
   26b02:	46b8      	mov	r8, r7
   26b04:	fba0 0307 	umull	r0, r3, r0, r7
   26b08:	fb07 3101 	mla	r1, r7, r1, r3
   26b0c:	0bc0      	lsrs	r0, r0, #15
			LOG_INF("UART check failed: %d. "
   26b0e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 26bdc <at_host_init+0x11c>
   26b12:	ea40 4441 	orr.w	r4, r0, r1, lsl #17
		err = uart_err_check(uart_dev);
   26b16:	6830      	ldr	r0, [r6, #0]
	if (api->err_check == NULL) {
   26b18:	6883      	ldr	r3, [r0, #8]
   26b1a:	689b      	ldr	r3, [r3, #8]
   26b1c:	b1bb      	cbz	r3, 26b4e <at_host_init+0x8e>
	return api->err_check(dev);
   26b1e:	4798      	blx	r3
		if (err) {
   26b20:	4605      	mov	r5, r0
   26b22:	b360      	cbz	r0, 26b7e <at_host_init+0xbe>
   26b24:	f01a fe8c 	bl	41840 <z_impl_k_uptime_ticks>
   26b28:	fba0 3008 	umull	r3, r0, r0, r8
   26b2c:	fb07 0001 	mla	r0, r7, r1, r0
   26b30:	0bdb      	lsrs	r3, r3, #15
   26b32:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
			if (k_uptime_get_32() - start_time >
   26b36:	1b1b      	subs	r3, r3, r4
   26b38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
				LOG_ERR("UART check failed: %d. "
   26b3c:	462a      	mov	r2, r5
			if (k_uptime_get_32() - start_time >
   26b3e:	d909      	bls.n	26b54 <at_host_init+0x94>
				LOG_ERR("UART check failed: %d. "
   26b40:	2145      	movs	r1, #69	; 0x45
   26b42:	4820      	ldr	r0, [pc, #128]	; (26bc4 <at_host_init+0x104>)
   26b44:	f016 fb59 	bl	3d1fa <z_log_minimal_printk>
				return -EIO;
   26b48:	f06f 0204 	mvn.w	r2, #4
   26b4c:	e7cb      	b.n	26ae6 <at_host_init+0x26>
		return -ENOSYS;
   26b4e:	f06f 0557 	mvn.w	r5, #87	; 0x57
   26b52:	e7e7      	b.n	26b24 <at_host_init+0x64>
			LOG_INF("UART check failed: %d. "
   26b54:	2149      	movs	r1, #73	; 0x49
   26b56:	4648      	mov	r0, r9
   26b58:	f016 fb4f 	bl	3d1fa <z_log_minimal_printk>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   26b5c:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
   26b5e:	6883      	ldr	r3, [r0, #8]
   26b60:	699b      	ldr	r3, [r3, #24]
   26b62:	b903      	cbnz	r3, 26b66 <at_host_init+0xa6>
   26b64:	e7fe      	b.n	26b64 <at_host_init+0xa4>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
   26b66:	2201      	movs	r2, #1
   26b68:	f10d 010f 	add.w	r1, sp, #15
   26b6c:	4798      	blx	r3
   26b6e:	2800      	cmp	r0, #0
   26b70:	d1f4      	bne.n	26b5c <at_host_init+0x9c>
	return z_impl_k_sleep(timeout);
   26b72:	2100      	movs	r1, #0
   26b74:	f44f 70a4 	mov.w	r0, #328	; 0x148
   26b78:	f012 f856 	bl	38c28 <z_impl_k_sleep>
	} while (err);
   26b7c:	e7cb      	b.n	26b16 <at_host_init+0x56>
	uart_irq_callback_set(uart_dev, isr);
   26b7e:	6830      	ldr	r0, [r6, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   26b80:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   26b82:	b123      	cbz	r3, 26b8e <at_host_init+0xce>
   26b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   26b86:	b113      	cbz	r3, 26b8e <at_host_init+0xce>
		api->irq_callback_set(dev, cb, user_data);
   26b88:	462a      	mov	r2, r5
   26b8a:	490f      	ldr	r1, [pc, #60]	; (26bc8 <at_host_init+0x108>)
   26b8c:	4798      	blx	r3
	k_work_init(&cmd_send_work, cmd_send);
   26b8e:	490f      	ldr	r1, [pc, #60]	; (26bcc <at_host_init+0x10c>)
   26b90:	480f      	ldr	r0, [pc, #60]	; (26bd0 <at_host_init+0x110>)
   26b92:	f010 fe6b 	bl	3786c <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   26b96:	2300      	movs	r3, #0
   26b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
   26b9c:	9300      	str	r3, [sp, #0]
   26b9e:	490d      	ldr	r1, [pc, #52]	; (26bd4 <at_host_init+0x114>)
   26ba0:	230a      	movs	r3, #10
   26ba2:	480d      	ldr	r0, [pc, #52]	; (26bd8 <at_host_init+0x118>)
   26ba4:	f010 ff68 	bl	37a78 <k_work_queue_start>
	uart_irq_rx_enable(uart_dev);
   26ba8:	6830      	ldr	r0, [r6, #0]
   26baa:	f018 fe5f 	bl	3f86c <z_impl_uart_irq_rx_enable>
}
   26bae:	e7a0      	b.n	26af2 <at_host_init+0x32>
   26bb0:	2001b674 	.word	0x2001b674
   26bb4:	0004581d 	.word	0x0004581d
   26bb8:	20019400 	.word	0x20019400
   26bbc:	00045a0e 	.word	0x00045a0e
   26bc0:	00045a98 	.word	0x00045a98
   26bc4:	00045a23 	.word	0x00045a23
   26bc8:	00026be1 	.word	0x00026be1
   26bcc:	00026a79 	.word	0x00026a79
   26bd0:	200193f0 	.word	0x200193f0
   26bd4:	2001f118 	.word	0x2001f118
   26bd8:	20015400 	.word	0x20015400
   26bdc:	00045a5e 	.word	0x00045a5e

00026be0 <isr>:
{
   26be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26be2:	4604      	mov	r4, r0
	if (api->irq_update == NULL) {
   26be4:	6883      	ldr	r3, [r0, #8]
   26be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   26be8:	b103      	cbz	r3, 26bec <isr+0xc>
	return api->irq_update(dev);
   26bea:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   26bec:	68a3      	ldr	r3, [r4, #8]
   26bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26bf0:	b9c3      	cbnz	r3, 26c24 <isr+0x44>
	while ((!at_buf_busy) &&
   26bf2:	4e3a      	ldr	r6, [pc, #232]	; (26cdc <isr+0xfc>)
		if (at_cmd_len > 0) {
   26bf4:	4d3a      	ldr	r5, [pc, #232]	; (26ce0 <isr+0x100>)
	while ((!at_buf_busy) &&
   26bf6:	7833      	ldrb	r3, [r6, #0]
   26bf8:	b9c3      	cbnz	r3, 26c2c <isr+0x4c>
	if (api->fifo_read == NULL) {
   26bfa:	68a3      	ldr	r3, [r4, #8]
   26bfc:	699b      	ldr	r3, [r3, #24]
   26bfe:	b12b      	cbz	r3, 26c0c <isr+0x2c>
	return api->fifo_read(dev, rx_data, size);
   26c00:	2201      	movs	r2, #1
   26c02:	4620      	mov	r0, r4
   26c04:	f10d 0107 	add.w	r1, sp, #7
   26c08:	4798      	blx	r3
   26c0a:	b178      	cbz	r0, 26c2c <isr+0x4c>
		uart_rx_handler(character);
   26c0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   26c10:	2a08      	cmp	r2, #8
   26c12:	d001      	beq.n	26c18 <isr+0x38>
   26c14:	2a7f      	cmp	r2, #127	; 0x7f
   26c16:	d10b      	bne.n	26c30 <isr+0x50>
		if (at_cmd_len > 0) {
   26c18:	682b      	ldr	r3, [r5, #0]
   26c1a:	2b00      	cmp	r3, #0
   26c1c:	d0eb      	beq.n	26bf6 <isr+0x16>
			at_cmd_len--;
   26c1e:	3b01      	subs	r3, #1
   26c20:	602b      	str	r3, [r5, #0]
   26c22:	e7e8      	b.n	26bf6 <isr+0x16>
	return api->irq_rx_ready(dev);
   26c24:	4620      	mov	r0, r4
   26c26:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   26c28:	2800      	cmp	r0, #0
   26c2a:	d1e2      	bne.n	26bf2 <isr+0x12>
}
   26c2c:	b003      	add	sp, #12
   26c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   26c30:	492c      	ldr	r1, [pc, #176]	; (26ce4 <isr+0x104>)
   26c32:	780b      	ldrb	r3, [r1, #0]
   26c34:	b983      	cbnz	r3, 26c58 <isr+0x78>
		switch (character) {
   26c36:	2a0a      	cmp	r2, #10
   26c38:	d018      	beq.n	26c6c <isr+0x8c>
   26c3a:	2a0d      	cmp	r2, #13
   26c3c:	d008      	beq.n	26c50 <isr+0x70>
   26c3e:	b95a      	cbnz	r2, 26c58 <isr+0x78>
			if (term_mode == MODE_NULL_TERM) {
   26c40:	4b29      	ldr	r3, [pc, #164]	; (26ce8 <isr+0x108>)
   26c42:	781b      	ldrb	r3, [r3, #0]
   26c44:	b363      	cbz	r3, 26ca0 <isr+0xc0>
			LOG_WRN("Ignored null; would terminate string early.");
   26c46:	2157      	movs	r1, #87	; 0x57
   26c48:	4828      	ldr	r0, [pc, #160]	; (26cec <isr+0x10c>)
   26c4a:	f016 fad6 	bl	3d1fa <z_log_minimal_printk>
			return;
   26c4e:	e7d2      	b.n	26bf6 <isr+0x16>
			if (term_mode == MODE_CR) {
   26c50:	4825      	ldr	r0, [pc, #148]	; (26ce8 <isr+0x108>)
   26c52:	7800      	ldrb	r0, [r0, #0]
   26c54:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   26c56:	d023      	beq.n	26ca0 <isr+0xc0>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   26c58:	682f      	ldr	r7, [r5, #0]
   26c5a:	1c78      	adds	r0, r7, #1
   26c5c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   26c60:	d313      	bcc.n	26c8a <isr+0xaa>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   26c62:	2145      	movs	r1, #69	; 0x45
   26c64:	4822      	ldr	r0, [pc, #136]	; (26cf0 <isr+0x110>)
   26c66:	f016 fac8 	bl	3d1fa <z_log_minimal_printk>
		return;
   26c6a:	e7c4      	b.n	26bf6 <isr+0x16>
			if (term_mode == MODE_LF) {
   26c6c:	481e      	ldr	r0, [pc, #120]	; (26ce8 <isr+0x108>)
   26c6e:	7800      	ldrb	r0, [r0, #0]
   26c70:	2802      	cmp	r0, #2
   26c72:	d015      	beq.n	26ca0 <isr+0xc0>
			if (term_mode == MODE_CR_LF &&
   26c74:	2803      	cmp	r0, #3
   26c76:	d1ef      	bne.n	26c58 <isr+0x78>
		if (at_cmd_len > 0) {
   26c78:	682f      	ldr	r7, [r5, #0]
			if (term_mode == MODE_CR_LF &&
   26c7a:	2f00      	cmp	r7, #0
   26c7c:	d0ec      	beq.n	26c58 <isr+0x78>
			    at_buf[at_cmd_len - 1] == '\r') {
   26c7e:	481d      	ldr	r0, [pc, #116]	; (26cf4 <isr+0x114>)
   26c80:	4438      	add	r0, r7
			    at_cmd_len > 0 &&
   26c82:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   26c86:	280d      	cmp	r0, #13
   26c88:	e7e5      	b.n	26c56 <isr+0x76>
	at_buf[at_cmd_len] = character;
   26c8a:	f8df c068 	ldr.w	ip, [pc, #104]	; 26cf4 <isr+0x114>
	if (character == '"') {
   26c8e:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   26c90:	f80c 2007 	strb.w	r2, [ip, r7]
	at_cmd_len++;
   26c94:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   26c96:	d1ae      	bne.n	26bf6 <isr+0x16>
	if (!inside_quotes) {
   26c98:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   26c9c:	700b      	strb	r3, [r1, #0]
   26c9e:	e7aa      	b.n	26bf6 <isr+0x16>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26ca0:	2200      	movs	r2, #0
   26ca2:	4b14      	ldr	r3, [pc, #80]	; (26cf4 <isr+0x114>)
	inside_quotes = false;
   26ca4:	700a      	strb	r2, [r1, #0]
   26ca6:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26ca8:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   26caa:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26cac:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   26cae:	f813 2b01 	ldrb.w	r2, [r3], #1
   26cb2:	2a20      	cmp	r2, #32
   26cb4:	d802      	bhi.n	26cbc <isr+0xdc>
		} else if (*c == '\0') {
   26cb6:	2a00      	cmp	r2, #0
   26cb8:	d1f9      	bne.n	26cae <isr+0xce>
   26cba:	e79c      	b.n	26bf6 <isr+0x16>
	if (at_buf[0]) {
   26cbc:	780b      	ldrb	r3, [r1, #0]
   26cbe:	2b00      	cmp	r3, #0
   26cc0:	d099      	beq.n	26bf6 <isr+0x16>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   26cc2:	4b0d      	ldr	r3, [pc, #52]	; (26cf8 <isr+0x118>)
   26cc4:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable != NULL) {
   26cc6:	6883      	ldr	r3, [r0, #8]
   26cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26cca:	b103      	cbz	r3, 26cce <isr+0xee>
		api->irq_rx_disable(dev);
   26ccc:	4798      	blx	r3
		at_buf_busy = true;
   26cce:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   26cd0:	490a      	ldr	r1, [pc, #40]	; (26cfc <isr+0x11c>)
   26cd2:	480b      	ldr	r0, [pc, #44]	; (26d00 <isr+0x120>)
		at_buf_busy = true;
   26cd4:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   26cd6:	f010 fe21 	bl	3791c <k_work_submit_to_queue>
   26cda:	e78c      	b.n	26bf6 <isr+0x16>
   26cdc:	2001b672 	.word	0x2001b672
   26ce0:	200193ec 	.word	0x200193ec
   26ce4:	2001b673 	.word	0x2001b673
   26ce8:	2001b674 	.word	0x2001b674
   26cec:	00045abf 	.word	0x00045abf
   26cf0:	00045af0 	.word	0x00045af0
   26cf4:	2001a672 	.word	0x2001a672
   26cf8:	20019400 	.word	0x20019400
   26cfc:	200193f0 	.word	0x200193f0
   26d00:	20015400 	.word	0x20015400

00026d04 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   26d04:	4b06      	ldr	r3, [pc, #24]	; (26d20 <is_valid_notification_char+0x1c>)
   26d06:	5cc3      	ldrb	r3, [r0, r3]
   26d08:	f003 0303 	and.w	r3, r3, #3
   26d0c:	2b02      	cmp	r3, #2
   26d0e:	bf08      	it	eq
   26d10:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   26d12:	3841      	subs	r0, #65	; 0x41
   26d14:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   26d16:	2819      	cmp	r0, #25
   26d18:	bf8c      	ite	hi
   26d1a:	2000      	movhi	r0, #0
   26d1c:	2001      	movls	r0, #1
   26d1e:	4770      	bx	lr
   26d20:	0004c62f 	.word	0x0004c62f

00026d24 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   26d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26d26:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   26d28:	2400      	movs	r4, #0
   26d2a:	4e0a      	ldr	r6, [pc, #40]	; (26d54 <is_result+0x30>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   26d2c:	f856 1b04 	ldr.w	r1, [r6], #4
   26d30:	4608      	mov	r0, r1
   26d32:	9101      	str	r1, [sp, #4]
   26d34:	f7f6 fa85 	bl	1d242 <strlen>
   26d38:	9901      	ldr	r1, [sp, #4]
   26d3a:	4602      	mov	r2, r0
   26d3c:	4628      	mov	r0, r5
   26d3e:	f01b f8e2 	bl	41f06 <strncmp>
		if (!diff) {
   26d42:	b128      	cbz	r0, 26d50 <is_result+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   26d44:	3401      	adds	r4, #1
   26d46:	2c04      	cmp	r4, #4
   26d48:	d1f0      	bne.n	26d2c <is_result+0x8>
			return true;
		}
	}

	return false;
   26d4a:	2000      	movs	r0, #0
}
   26d4c:	b002      	add	sp, #8
   26d4e:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   26d50:	2001      	movs	r0, #1
   26d52:	e7fb      	b.n	26d4c <is_result+0x28>
   26d54:	000433f8 	.word	0x000433f8

00026d58 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   26d58:	b510      	push	{r4, lr}
   26d5a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   26d5c:	f7f6 fa71 	bl	1d242 <strlen>
   26d60:	2801      	cmp	r0, #1
   26d62:	d921      	bls.n	26da8 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   26d64:	7823      	ldrb	r3, [r4, #0]
   26d66:	4912      	ldr	r1, [pc, #72]	; (26db0 <is_command+0x58>)
   26d68:	5c5a      	ldrb	r2, [r3, r1]
   26d6a:	f002 0203 	and.w	r2, r2, #3
   26d6e:	2a02      	cmp	r2, #2
   26d70:	bf08      	it	eq
   26d72:	3b20      	subeq	r3, #32
   26d74:	2b41      	cmp	r3, #65	; 0x41
   26d76:	d117      	bne.n	26da8 <is_command+0x50>
   26d78:	7863      	ldrb	r3, [r4, #1]
   26d7a:	5cca      	ldrb	r2, [r1, r3]
   26d7c:	f002 0203 	and.w	r2, r2, #3
   26d80:	2a02      	cmp	r2, #2
   26d82:	bf08      	it	eq
   26d84:	3b20      	subeq	r3, #32
   26d86:	2b54      	cmp	r3, #84	; 0x54
   26d88:	d10e      	bne.n	26da8 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26d8a:	78a2      	ldrb	r2, [r4, #2]
   26d8c:	2a25      	cmp	r2, #37	; 0x25
   26d8e:	d00d      	beq.n	26dac <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   26d90:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   26d94:	2b23      	cmp	r3, #35	; 0x23
   26d96:	d009      	beq.n	26dac <is_command+0x54>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   26d98:	4610      	mov	r0, r2
   26d9a:	f018 fd6e 	bl	3f87a <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   26d9e:	b910      	cbnz	r0, 26da6 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26da0:	fab2 f082 	clz	r0, r2
   26da4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   26da6:	bd10      	pop	{r4, pc}
		return false;
   26da8:	2000      	movs	r0, #0
   26daa:	e7fc      	b.n	26da6 <is_command+0x4e>
		return true;
   26dac:	2001      	movs	r0, #1
   26dae:	e7fa      	b.n	26da6 <is_command+0x4e>
   26db0:	0004c62f 	.word	0x0004c62f

00026db4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   26db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   26db8:	6805      	ldr	r5, [r0, #0]
{
   26dba:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   26dbc:	9500      	str	r5, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26dbe:	782b      	ldrb	r3, [r5, #0]
{
   26dc0:	4680      	mov	r8, r0
   26dc2:	460f      	mov	r7, r1
   26dc4:	4616      	mov	r6, r2
   26dc6:	2b00      	cmp	r3, #0
   26dc8:	f000 80ca 	beq.w	26f60 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   26dcc:	4b66      	ldr	r3, [pc, #408]	; (26f68 <at_parse_process_element+0x1b4>)
   26dce:	781c      	ldrb	r4, [r3, #0]
   26dd0:	2c06      	cmp	r4, #6
   26dd2:	d110      	bne.n	26df6 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   26dd4:	1c6b      	adds	r3, r5, #1
   26dd6:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   26dd8:	9a00      	ldr	r2, [sp, #0]
   26dda:	7810      	ldrb	r0, [r2, #0]
   26ddc:	f7ff ff92 	bl	26d04 <is_valid_notification_char>
   26de0:	b930      	cbnz	r0, 26df0 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   26de2:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   26de4:	462a      	mov	r2, r5
   26de6:	4639      	mov	r1, r7
   26de8:	4630      	mov	r0, r6
   26dea:	f018 fdaf 	bl	3f94c <at_params_string_put>
   26dee:	e01c      	b.n	26e2a <at_parse_process_element+0x76>
			tmpstr++;
   26df0:	3201      	adds	r2, #1
   26df2:	9200      	str	r2, [sp, #0]
   26df4:	e7f0      	b.n	26dd8 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   26df6:	2c07      	cmp	r4, #7
   26df8:	d125      	bne.n	26e46 <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   26dfa:	4668      	mov	r0, sp
   26dfc:	f018 fd46 	bl	3f88c <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   26e00:	4a5a      	ldr	r2, [pc, #360]	; (26f6c <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   26e02:	9b00      	ldr	r3, [sp, #0]
   26e04:	7819      	ldrb	r1, [r3, #0]
   26e06:	5c89      	ldrb	r1, [r1, r2]
   26e08:	0749      	lsls	r1, r1, #29
   26e0a:	d115      	bne.n	26e38 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   26e0c:	462a      	mov	r2, r5
   26e0e:	1b5b      	subs	r3, r3, r5
   26e10:	4639      	mov	r1, r7
   26e12:	4630      	mov	r0, r6
   26e14:	f018 fd9a 	bl	3f94c <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   26e18:	9b00      	ldr	r3, [sp, #0]
   26e1a:	781a      	ldrb	r2, [r3, #0]
   26e1c:	2a3d      	cmp	r2, #61	; 0x3d
   26e1e:	d10e      	bne.n	26e3e <at_parse_process_element+0x8a>
   26e20:	785a      	ldrb	r2, [r3, #1]
   26e22:	2a3f      	cmp	r2, #63	; 0x3f
   26e24:	d101      	bne.n	26e2a <at_parse_process_element+0x76>
			tmpstr += 2;
   26e26:	3302      	adds	r3, #2
			tmpstr++;
   26e28:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   26e2a:	2000      	movs	r0, #0
	*str = tmpstr;
   26e2c:	9b00      	ldr	r3, [sp, #0]
   26e2e:	f8c8 3000 	str.w	r3, [r8]
}
   26e32:	b023      	add	sp, #140	; 0x8c
   26e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   26e38:	3301      	adds	r3, #1
   26e3a:	9300      	str	r3, [sp, #0]
   26e3c:	e7e1      	b.n	26e02 <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   26e3e:	2a3f      	cmp	r2, #63	; 0x3f
   26e40:	d1f3      	bne.n	26e2a <at_parse_process_element+0x76>
			tmpstr++;
   26e42:	3301      	adds	r3, #1
   26e44:	e7f0      	b.n	26e28 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   26e46:	2c08      	cmp	r4, #8
   26e48:	d103      	bne.n	26e52 <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   26e4a:	4610      	mov	r0, r2
   26e4c:	f018 fd50 	bl	3f8f0 <at_params_empty_put>
   26e50:	e7eb      	b.n	26e2a <at_parse_process_element+0x76>
	} else if (state == STRING) {
   26e52:	2c02      	cmp	r4, #2
   26e54:	d111      	bne.n	26e7a <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   26e56:	9a00      	ldr	r2, [sp, #0]
   26e58:	7811      	ldrb	r1, [r2, #0]
   26e5a:	4608      	mov	r0, r1
   26e5c:	f018 fd0d 	bl	3f87a <is_lfcr>
   26e60:	b918      	cbnz	r0, 26e6a <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26e62:	b111      	cbz	r1, 26e6a <at_parse_process_element+0xb6>
			tmpstr++;
   26e64:	3201      	adds	r2, #1
   26e66:	9200      	str	r2, [sp, #0]
   26e68:	e7f5      	b.n	26e56 <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   26e6a:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   26e6c:	462a      	mov	r2, r5
   26e6e:	4639      	mov	r1, r7
   26e70:	4630      	mov	r0, r6
   26e72:	f018 fd6b 	bl	3f94c <at_params_string_put>
		tmpstr++;
   26e76:	9b00      	ldr	r3, [sp, #0]
   26e78:	e7e3      	b.n	26e42 <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   26e7a:	2c03      	cmp	r4, #3
   26e7c:	d109      	bne.n	26e92 <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   26e7e:	9b00      	ldr	r3, [sp, #0]
   26e80:	781a      	ldrb	r2, [r3, #0]
	if (chr == '"') {
   26e82:	2a22      	cmp	r2, #34	; 0x22
   26e84:	d003      	beq.n	26e8e <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26e86:	b112      	cbz	r2, 26e8e <at_parse_process_element+0xda>
			tmpstr++;
   26e88:	3301      	adds	r3, #1
   26e8a:	9300      	str	r3, [sp, #0]
   26e8c:	e7f7      	b.n	26e7e <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   26e8e:	1b5b      	subs	r3, r3, r5
   26e90:	e7ec      	b.n	26e6c <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   26e92:	2c01      	cmp	r4, #1
   26e94:	d13c      	bne.n	26f10 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   26e96:	4628      	mov	r0, r5
   26e98:	220a      	movs	r2, #10
   26e9a:	a901      	add	r1, sp, #4
   26e9c:	f014 f918 	bl	3b0d0 <strtoul>
		tmpstr = next;
   26ea0:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26ea2:	4d33      	ldr	r5, [pc, #204]	; (26f70 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   26ea4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   26ea6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   26ea8:	9800      	ldr	r0, [sp, #0]
   26eaa:	7803      	ldrb	r3, [r0, #0]
	if (chr == ')') {
   26eac:	2b29      	cmp	r3, #41	; 0x29
   26eae:	d01f      	beq.n	26ef0 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26eb0:	b1f3      	cbz	r3, 26ef0 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26eb2:	3b2c      	subs	r3, #44	; 0x2c
   26eb4:	b2db      	uxtb	r3, r3
   26eb6:	3001      	adds	r0, #1
   26eb8:	2b11      	cmp	r3, #17
				tmparray[i++] =
   26eba:	9000      	str	r0, [sp, #0]
   26ebc:	d826      	bhi.n	26f0c <at_parse_process_element+0x158>
   26ebe:	fa25 f303 	lsr.w	r3, r5, r3
   26ec2:	07db      	lsls	r3, r3, #31
   26ec4:	d522      	bpl.n	26f0c <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   26ec6:	220a      	movs	r2, #10
   26ec8:	a901      	add	r1, sp, #4
   26eca:	f014 f901 	bl	3b0d0 <strtoul>
				tmparray[i++] =
   26ece:	ab22      	add	r3, sp, #136	; 0x88
   26ed0:	f104 0901 	add.w	r9, r4, #1
   26ed4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   26ed8:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   26edc:	9800      	ldr	r0, [sp, #0]
   26ede:	f7f6 f9b0 	bl	1d242 <strlen>
   26ee2:	4604      	mov	r4, r0
   26ee4:	9801      	ldr	r0, [sp, #4]
   26ee6:	f7f6 f9ac 	bl	1d242 <strlen>
   26eea:	4284      	cmp	r4, r0
   26eec:	d107      	bne.n	26efe <at_parse_process_element+0x14a>
				tmparray[i++] =
   26eee:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   26ef0:	4639      	mov	r1, r7
   26ef2:	4630      	mov	r0, r6
   26ef4:	00a3      	lsls	r3, r4, #2
   26ef6:	aa02      	add	r2, sp, #8
   26ef8:	f018 fd4e 	bl	3f998 <at_params_array_put>
		tmpstr++;
   26efc:	e7bb      	b.n	26e76 <at_parse_process_element+0xc2>
					tmpstr = next;
   26efe:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26f00:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   26f04:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26f06:	d0f2      	beq.n	26eee <at_parse_process_element+0x13a>
				tmpstr++;
   26f08:	464c      	mov	r4, r9
   26f0a:	e7cd      	b.n	26ea8 <at_parse_process_element+0xf4>
   26f0c:	46a1      	mov	r9, r4
   26f0e:	e7fb      	b.n	26f08 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   26f10:	2c04      	cmp	r4, #4
   26f12:	d10d      	bne.n	26f30 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   26f14:	220a      	movs	r2, #10
   26f16:	4628      	mov	r0, r5
   26f18:	a902      	add	r1, sp, #8
   26f1a:	f014 f85d 	bl	3afd8 <strtoll>
   26f1e:	460b      	mov	r3, r1
		tmpstr = next;
   26f20:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   26f22:	4602      	mov	r2, r0
		tmpstr = next;
   26f24:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   26f26:	4630      	mov	r0, r6
   26f28:	4639      	mov	r1, r7
   26f2a:	f018 fcf8 	bl	3f91e <at_params_int_put>
   26f2e:	e77c      	b.n	26e2a <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   26f30:	2c05      	cmp	r4, #5
   26f32:	d10b      	bne.n	26f4c <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   26f34:	490d      	ldr	r1, [pc, #52]	; (26f6c <at_parse_process_element+0x1b8>)
   26f36:	9b00      	ldr	r3, [sp, #0]
   26f38:	781a      	ldrb	r2, [r3, #0]
   26f3a:	5c52      	ldrb	r2, [r2, r1]
   26f3c:	f012 0f44 	tst.w	r2, #68	; 0x44
   26f40:	d101      	bne.n	26f46 <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   26f42:	1b5b      	subs	r3, r3, r5
   26f44:	e74e      	b.n	26de4 <at_parse_process_element+0x30>
			tmpstr++;
   26f46:	3301      	adds	r3, #1
   26f48:	9300      	str	r3, [sp, #0]
   26f4a:	e7f4      	b.n	26f36 <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   26f4c:	2c09      	cmp	r4, #9
   26f4e:	f47f af6c 	bne.w	26e2a <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   26f52:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26f54:	781a      	ldrb	r2, [r3, #0]
   26f56:	2a00      	cmp	r2, #0
   26f58:	d0f3      	beq.n	26f42 <at_parse_process_element+0x18e>
			tmpstr++;
   26f5a:	3301      	adds	r3, #1
   26f5c:	9300      	str	r3, [sp, #0]
   26f5e:	e7f8      	b.n	26f52 <at_parse_process_element+0x19e>
		return -1;
   26f60:	f04f 30ff 	mov.w	r0, #4294967295
   26f64:	e765      	b.n	26e32 <at_parse_process_element+0x7e>
   26f66:	bf00      	nop
   26f68:	2001b676 	.word	0x2001b676
   26f6c:	0004c62f 	.word	0x0004c62f
   26f70:	00024001 	.word	0x00024001

00026f74 <at_parse_detect_type>:
{
   26f74:	b570      	push	{r4, r5, r6, lr}
   26f76:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   26f78:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   26f7a:	4e64      	ldr	r6, [pc, #400]	; (2710c <at_parse_detect_type+0x198>)
   26f7c:	2900      	cmp	r1, #0
   26f7e:	d137      	bne.n	26ff0 <at_parse_detect_type+0x7c>
   26f80:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26f82:	2b2b      	cmp	r3, #43	; 0x2b
   26f84:	d001      	beq.n	26f8a <at_parse_detect_type+0x16>
   26f86:	2b25      	cmp	r3, #37	; 0x25
   26f88:	d132      	bne.n	26ff0 <at_parse_detect_type+0x7c>
	state = new_state;
   26f8a:	2206      	movs	r2, #6
   26f8c:	4b60      	ldr	r3, [pc, #384]	; (27110 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26f8e:	4620      	mov	r0, r4
	state = new_state;
   26f90:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26f92:	4960      	ldr	r1, [pc, #384]	; (27114 <at_parse_detect_type+0x1a0>)
   26f94:	2205      	movs	r2, #5
   26f96:	f01a ffb6 	bl	41f06 <strncmp>
   26f9a:	b920      	cbnz	r0, 26fa6 <at_parse_detect_type+0x32>
			retval = true;
   26f9c:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   26f9e:	7030      	strb	r0, [r6, #0]
	return 0;
   26fa0:	2000      	movs	r0, #0
	*str = tmpstr;
   26fa2:	602c      	str	r4, [r5, #0]
	return 0;
   26fa4:	e064      	b.n	27070 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   26fa6:	2205      	movs	r2, #5
   26fa8:	4620      	mov	r0, r4
   26faa:	495b      	ldr	r1, [pc, #364]	; (27118 <at_parse_detect_type+0x1a4>)
   26fac:	f01a ffab 	bl	41f06 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26fb0:	2800      	cmp	r0, #0
   26fb2:	d0f3      	beq.n	26f9c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   26fb4:	220b      	movs	r2, #11
   26fb6:	4620      	mov	r0, r4
   26fb8:	4958      	ldr	r1, [pc, #352]	; (2711c <at_parse_detect_type+0x1a8>)
   26fba:	f01a ffa4 	bl	41f06 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   26fbe:	2800      	cmp	r0, #0
   26fc0:	d0ec      	beq.n	26f9c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   26fc2:	220a      	movs	r2, #10
   26fc4:	4620      	mov	r0, r4
   26fc6:	4956      	ldr	r1, [pc, #344]	; (27120 <at_parse_detect_type+0x1ac>)
   26fc8:	f01a ff9d 	bl	41f06 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   26fcc:	2800      	cmp	r0, #0
   26fce:	d0e5      	beq.n	26f9c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   26fd0:	220b      	movs	r2, #11
   26fd2:	4620      	mov	r0, r4
   26fd4:	4953      	ldr	r1, [pc, #332]	; (27124 <at_parse_detect_type+0x1b0>)
   26fd6:	f01a ff96 	bl	41f06 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   26fda:	2800      	cmp	r0, #0
   26fdc:	d0de      	beq.n	26f9c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   26fde:	2207      	movs	r2, #7
   26fe0:	4620      	mov	r0, r4
   26fe2:	4951      	ldr	r1, [pc, #324]	; (27128 <at_parse_detect_type+0x1b4>)
   26fe4:	f01a ff8f 	bl	41f06 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   26fe8:	fab0 f080 	clz	r0, r0
   26fec:	0940      	lsrs	r0, r0, #5
   26fee:	e7d6      	b.n	26f9e <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   26ff0:	7833      	ldrb	r3, [r6, #0]
   26ff2:	b113      	cbz	r3, 26ffa <at_parse_detect_type+0x86>
	state = new_state;
   26ff4:	4b46      	ldr	r3, [pc, #280]	; (27110 <at_parse_detect_type+0x19c>)
   26ff6:	2202      	movs	r2, #2
   26ff8:	e043      	b.n	27082 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   26ffa:	2900      	cmp	r1, #0
   26ffc:	dd39      	ble.n	27072 <at_parse_detect_type+0xfe>
   26ffe:	4622      	mov	r2, r4
   27000:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   27002:	f812 0b01 	ldrb.w	r0, [r2], #1
   27006:	f018 fc38 	bl	3f87a <is_lfcr>
   2700a:	2800      	cmp	r0, #0
   2700c:	d1f8      	bne.n	27000 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   2700e:	4630      	mov	r0, r6
   27010:	f7f6 f917 	bl	1d242 <strlen>
   27014:	2803      	cmp	r0, #3
   27016:	d970      	bls.n	270fa <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   27018:	7833      	ldrb	r3, [r6, #0]
   2701a:	4a44      	ldr	r2, [pc, #272]	; (2712c <at_parse_detect_type+0x1b8>)
   2701c:	5c99      	ldrb	r1, [r3, r2]
   2701e:	f001 0103 	and.w	r1, r1, #3
   27022:	2902      	cmp	r1, #2
   27024:	bf08      	it	eq
   27026:	3b20      	subeq	r3, #32
   27028:	2b41      	cmp	r3, #65	; 0x41
   2702a:	d166      	bne.n	270fa <at_parse_detect_type+0x186>
   2702c:	7873      	ldrb	r3, [r6, #1]
   2702e:	5cd1      	ldrb	r1, [r2, r3]
   27030:	f001 0103 	and.w	r1, r1, #3
   27034:	2902      	cmp	r1, #2
   27036:	bf08      	it	eq
   27038:	3b20      	subeq	r3, #32
   2703a:	2b54      	cmp	r3, #84	; 0x54
   2703c:	d15d      	bne.n	270fa <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   2703e:	78b3      	ldrb	r3, [r6, #2]
   27040:	5cd1      	ldrb	r1, [r2, r3]
   27042:	f001 0103 	and.w	r1, r1, #3
   27046:	2902      	cmp	r1, #2
   27048:	bf08      	it	eq
   2704a:	3b20      	subeq	r3, #32
   2704c:	2b2b      	cmp	r3, #43	; 0x2b
   2704e:	d00a      	beq.n	27066 <at_parse_detect_type+0xf2>
   27050:	2b25      	cmp	r3, #37	; 0x25
   27052:	d152      	bne.n	270fa <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   27054:	78f3      	ldrb	r3, [r6, #3]
   27056:	5cd2      	ldrb	r2, [r2, r3]
   27058:	f002 0203 	and.w	r2, r2, #3
   2705c:	2a02      	cmp	r2, #2
   2705e:	bf08      	it	eq
   27060:	3b20      	subeq	r3, #32
   27062:	2b58      	cmp	r3, #88	; 0x58
   27064:	d049      	beq.n	270fa <at_parse_detect_type+0x186>
	state = new_state;
   27066:	2209      	movs	r2, #9
		return -2;
   27068:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   2706c:	4b28      	ldr	r3, [pc, #160]	; (27110 <at_parse_detect_type+0x19c>)
   2706e:	701a      	strb	r2, [r3, #0]
}
   27070:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   27072:	d108      	bne.n	27086 <at_parse_detect_type+0x112>
   27074:	4620      	mov	r0, r4
   27076:	f7ff fe6f 	bl	26d58 <is_command>
   2707a:	4b25      	ldr	r3, [pc, #148]	; (27110 <at_parse_detect_type+0x19c>)
   2707c:	2800      	cmp	r0, #0
   2707e:	d0ba      	beq.n	26ff6 <at_parse_detect_type+0x82>
	state = new_state;
   27080:	2207      	movs	r2, #7
   27082:	701a      	strb	r2, [r3, #0]
}
   27084:	e78c      	b.n	26fa0 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   27086:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   27088:	4b28      	ldr	r3, [pc, #160]	; (2712c <at_parse_detect_type+0x1b8>)
   2708a:	5cd3      	ldrb	r3, [r2, r3]
   2708c:	0759      	lsls	r1, r3, #29
   2708e:	d403      	bmi.n	27098 <at_parse_detect_type+0x124>
   27090:	2a2d      	cmp	r2, #45	; 0x2d
   27092:	d001      	beq.n	27098 <at_parse_detect_type+0x124>
   27094:	2a2b      	cmp	r2, #43	; 0x2b
   27096:	d102      	bne.n	2709e <at_parse_detect_type+0x12a>
	state = new_state;
   27098:	2204      	movs	r2, #4
   2709a:	4b1d      	ldr	r3, [pc, #116]	; (27110 <at_parse_detect_type+0x19c>)
   2709c:	e7f1      	b.n	27082 <at_parse_detect_type+0x10e>
	if (chr == '"') {
   2709e:	2a22      	cmp	r2, #34	; 0x22
   270a0:	d006      	beq.n	270b0 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   270a2:	2a28      	cmp	r2, #40	; 0x28
   270a4:	d109      	bne.n	270ba <at_parse_detect_type+0x146>
   270a6:	2201      	movs	r2, #1
   270a8:	4b19      	ldr	r3, [pc, #100]	; (27110 <at_parse_detect_type+0x19c>)
		tmpstr++;
   270aa:	4414      	add	r4, r2
	state = new_state;
   270ac:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   270ae:	e777      	b.n	26fa0 <at_parse_detect_type+0x2c>
	state = new_state;
   270b0:	2203      	movs	r2, #3
   270b2:	4b17      	ldr	r3, [pc, #92]	; (27110 <at_parse_detect_type+0x19c>)
		tmpstr++;
   270b4:	3401      	adds	r4, #1
	state = new_state;
   270b6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   270b8:	e772      	b.n	26fa0 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   270ba:	4610      	mov	r0, r2
   270bc:	f018 fbdd 	bl	3f87a <is_lfcr>
   270c0:	b178      	cbz	r0, 270e2 <at_parse_detect_type+0x16e>
   270c2:	4913      	ldr	r1, [pc, #76]	; (27110 <at_parse_detect_type+0x19c>)
   270c4:	780b      	ldrb	r3, [r1, #0]
   270c6:	2b04      	cmp	r3, #4
   270c8:	d108      	bne.n	270dc <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   270ca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   270ce:	f018 fbd4 	bl	3f87a <is_lfcr>
   270d2:	2800      	cmp	r0, #0
   270d4:	d1f9      	bne.n	270ca <at_parse_detect_type+0x156>
	state = new_state;
   270d6:	2305      	movs	r3, #5
   270d8:	700b      	strb	r3, [r1, #0]
}
   270da:	e761      	b.n	26fa0 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   270dc:	2b08      	cmp	r3, #8
   270de:	f43f af5f 	beq.w	26fa0 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   270e2:	3a2c      	subs	r2, #44	; 0x2c
   270e4:	b2d2      	uxtb	r2, r2
   270e6:	2a11      	cmp	r2, #17
   270e8:	d80c      	bhi.n	27104 <at_parse_detect_type+0x190>
   270ea:	4b11      	ldr	r3, [pc, #68]	; (27130 <at_parse_detect_type+0x1bc>)
   270ec:	fa23 f202 	lsr.w	r2, r3, r2
   270f0:	07d3      	lsls	r3, r2, #31
   270f2:	d507      	bpl.n	27104 <at_parse_detect_type+0x190>
	state = new_state;
   270f4:	2208      	movs	r2, #8
   270f6:	4b06      	ldr	r3, [pc, #24]	; (27110 <at_parse_detect_type+0x19c>)
   270f8:	e7c3      	b.n	27082 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   270fa:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   270fc:	2b2b      	cmp	r3, #43	; 0x2b
   270fe:	d001      	beq.n	27104 <at_parse_detect_type+0x190>
   27100:	2b25      	cmp	r3, #37	; 0x25
   27102:	d1c0      	bne.n	27086 <at_parse_detect_type+0x112>
		return -1;
   27104:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   27108:	602c      	str	r4, [r5, #0]
		return -1;
   2710a:	e7b1      	b.n	27070 <at_parse_detect_type+0xfc>
   2710c:	2001b675 	.word	0x2001b675
   27110:	2001b676 	.word	0x2001b676
   27114:	00045b1d 	.word	0x00045b1d
   27118:	00045b23 	.word	0x00045b23
   2711c:	00045b29 	.word	0x00045b29
   27120:	00045b35 	.word	0x00045b35
   27124:	00045b40 	.word	0x00045b40
   27128:	00045b4c 	.word	0x00045b4c
   2712c:	0004c62f 	.word	0x0004c62f
   27130:	00024001 	.word	0x00024001

00027134 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   27134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27138:	4689      	mov	r9, r1
   2713a:	4616      	mov	r6, r2
   2713c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2713e:	4680      	mov	r8, r0
{
   27140:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   27142:	2800      	cmp	r0, #0
   27144:	f000 8097 	beq.w	27276 <at_parser_max_params_from_str+0x142>
   27148:	2a00      	cmp	r2, #0
   2714a:	f000 8094 	beq.w	27276 <at_parser_max_params_from_str+0x142>
   2714e:	6853      	ldr	r3, [r2, #4]
   27150:	2b00      	cmp	r3, #0
   27152:	f000 8090 	beq.w	27276 <at_parser_max_params_from_str+0x142>
	state = IDLE;
   27156:	2500      	movs	r5, #0
	int index = 0;
   27158:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   2715a:	4610      	mov	r0, r2
   2715c:	f000 f8e8 	bl	27330 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   27160:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   27162:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   27166:	429f      	cmp	r7, r3
   27168:	bf28      	it	cs
   2716a:	461f      	movcs	r7, r3
	state = IDLE;
   2716c:	4b43      	ldr	r3, [pc, #268]	; (2727c <at_parser_max_params_from_str+0x148>)
   2716e:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   27170:	4b43      	ldr	r3, [pc, #268]	; (27280 <at_parser_max_params_from_str+0x14c>)
   27172:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   27174:	9b03      	ldr	r3, [sp, #12]
   27176:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   27178:	2a00      	cmp	r2, #0
   2717a:	d055      	beq.n	27228 <at_parser_max_params_from_str+0xf4>
   2717c:	42a7      	cmp	r7, r4
   2717e:	d953      	bls.n	27228 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   27180:	4940      	ldr	r1, [pc, #256]	; (27284 <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   27182:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   27184:	5c52      	ldrb	r2, [r2, r1]
   27186:	0711      	lsls	r1, r2, #28
			str++;
   27188:	bf48      	it	mi
   2718a:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   2718c:	4621      	mov	r1, r4
			str++;
   2718e:	bf48      	it	mi
   27190:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   27192:	f7ff feef 	bl	26f74 <at_parse_detect_type>
		if (ret == -1) {
   27196:	1c42      	adds	r2, r0, #1
   27198:	d046      	beq.n	27228 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   2719a:	3002      	adds	r0, #2
			index = 0;
   2719c:	bf08      	it	eq
   2719e:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   271a0:	4632      	mov	r2, r6
   271a2:	4621      	mov	r1, r4
   271a4:	a803      	add	r0, sp, #12
			str = *at_params_str;
   271a6:	bf08      	it	eq
   271a8:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   271ac:	f7ff fe02 	bl	26db4 <at_parse_process_element>
   271b0:	3001      	adds	r0, #1
   271b2:	d039      	beq.n	27228 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   271b4:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   271b6:	7813      	ldrb	r3, [r2, #0]
   271b8:	3b2c      	subs	r3, #44	; 0x2c
   271ba:	b2db      	uxtb	r3, r3
   271bc:	2b11      	cmp	r3, #17
   271be:	d81b      	bhi.n	271f8 <at_parser_max_params_from_str+0xc4>
   271c0:	4931      	ldr	r1, [pc, #196]	; (27288 <at_parser_max_params_from_str+0x154>)
   271c2:	fa21 f303 	lsr.w	r3, r1, r3
   271c6:	07db      	lsls	r3, r3, #31
   271c8:	d516      	bpl.n	271f8 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   271ca:	7850      	ldrb	r0, [r2, #1]
   271cc:	f018 fb55 	bl	3f87a <is_lfcr>
   271d0:	b178      	cbz	r0, 271f2 <at_parser_max_params_from_str+0xbe>
				index++;
   271d2:	3401      	adds	r4, #1
				if (index == max_params) {
   271d4:	42bc      	cmp	r4, r7
   271d6:	d046      	beq.n	27266 <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   271d8:	4621      	mov	r1, r4
   271da:	a803      	add	r0, sp, #12
   271dc:	f7ff feca 	bl	26f74 <at_parse_detect_type>
   271e0:	3001      	adds	r0, #1
   271e2:	d021      	beq.n	27228 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   271e4:	4632      	mov	r2, r6
   271e6:	4621      	mov	r1, r4
   271e8:	a803      	add	r0, sp, #12
   271ea:	f7ff fde3 	bl	26db4 <at_parse_process_element>
   271ee:	3001      	adds	r0, #1
   271f0:	d01a      	beq.n	27228 <at_parser_max_params_from_str+0xf4>
			str++;
   271f2:	9b03      	ldr	r3, [sp, #12]
   271f4:	3301      	adds	r3, #1
   271f6:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   271f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   271fc:	f89b 0000 	ldrb.w	r0, [fp]
   27200:	f018 fb3b 	bl	3f87a <is_lfcr>
   27204:	b350      	cbz	r0, 2725c <at_parser_max_params_from_str+0x128>
   27206:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   2720a:	9101      	str	r1, [sp, #4]
   2720c:	eba1 0a0b 	sub.w	sl, r1, fp
   27210:	f811 2b01 	ldrb.w	r2, [r1], #1
   27214:	4610      	mov	r0, r2
   27216:	f018 fb30 	bl	3f87a <is_lfcr>
   2721a:	9b01      	ldr	r3, [sp, #4]
   2721c:	2800      	cmp	r0, #0
   2721e:	d1f4      	bne.n	2720a <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   27220:	b99a      	cbnz	r2, 2724a <at_parser_max_params_from_str+0x116>
				str += i;
   27222:	9b03      	ldr	r3, [sp, #12]
   27224:	4453      	add	r3, sl
   27226:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   27228:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   2722a:	b9f5      	cbnz	r5, 2726a <at_parser_max_params_from_str+0x136>
   2722c:	7823      	ldrb	r3, [r4, #0]
   2722e:	b11b      	cbz	r3, 27238 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   27230:	4620      	mov	r0, r4
   27232:	f7ff fd77 	bl	26d24 <is_result>
   27236:	b1d8      	cbz	r0, 27270 <at_parser_max_params_from_str+0x13c>
	return 0;
   27238:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2723a:	f1b9 0f00 	cmp.w	r9, #0
   2723e:	d001      	beq.n	27244 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   27240:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   27244:	b005      	add	sp, #20
   27246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2724a:	2a2b      	cmp	r2, #43	; 0x2b
   2724c:	d0e9      	beq.n	27222 <at_parser_max_params_from_str+0xee>
   2724e:	2a25      	cmp	r2, #37	; 0x25
   27250:	d0e7      	beq.n	27222 <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   27252:	4618      	mov	r0, r3
   27254:	f7ff fd66 	bl	26d24 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   27258:	2800      	cmp	r0, #0
   2725a:	d1e2      	bne.n	27222 <at_parser_max_params_from_str+0xee>
		index++;
   2725c:	3401      	adds	r4, #1
			oversized = true;
   2725e:	42bc      	cmp	r4, r7
   27260:	bf08      	it	eq
   27262:	2501      	moveq	r5, #1
   27264:	e786      	b.n	27174 <at_parser_max_params_from_str+0x40>
					oversized = true;
   27266:	4605      	mov	r5, r0
   27268:	e7de      	b.n	27228 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   2726a:	f06f 0006 	mvn.w	r0, #6
   2726e:	e7e4      	b.n	2723a <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   27270:	f06f 000a 	mvn.w	r0, #10
   27274:	e7e1      	b.n	2723a <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   27276:	f06f 0015 	mvn.w	r0, #21
   2727a:	e7e3      	b.n	27244 <at_parser_max_params_from_str+0x110>
   2727c:	2001b676 	.word	0x2001b676
   27280:	2001b675 	.word	0x2001b675
   27284:	0004c62f 	.word	0x0004c62f
   27288:	00024001 	.word	0x00024001

0002728c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2728c:	b538      	push	{r3, r4, r5, lr}
   2728e:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   27290:	4604      	mov	r4, r0
   27292:	b940      	cbnz	r0, 272a6 <at_params_get+0x1a>
   27294:	4908      	ldr	r1, [pc, #32]	; (272b8 <at_params_get+0x2c>)
   27296:	4809      	ldr	r0, [pc, #36]	; (272bc <at_params_get+0x30>)
   27298:	222b      	movs	r2, #43	; 0x2b
   2729a:	f015 ff74 	bl	3d186 <assert_print>
   2729e:	212b      	movs	r1, #43	; 0x2b
   272a0:	4805      	ldr	r0, [pc, #20]	; (272b8 <at_params_get+0x2c>)
   272a2:	f015 ff69 	bl	3d178 <assert_post_action>

	if (index >= list->param_count) {
   272a6:	6823      	ldr	r3, [r4, #0]
   272a8:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   272aa:	bf8a      	itet	hi
   272ac:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   272ae:	2000      	movls	r0, #0
	return &param[index];
   272b0:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   272b4:	bd38      	pop	{r3, r4, r5, pc}
   272b6:	bf00      	nop
   272b8:	00045b77 	.word	0x00045b77
   272bc:	0004494f 	.word	0x0004494f

000272c0 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   272c0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   272c2:	4604      	mov	r4, r0
   272c4:	b940      	cbnz	r0, 272d8 <at_param_size+0x18>
   272c6:	490a      	ldr	r1, [pc, #40]	; (272f0 <at_param_size+0x30>)
   272c8:	480a      	ldr	r0, [pc, #40]	; (272f4 <at_param_size+0x34>)
   272ca:	2239      	movs	r2, #57	; 0x39
   272cc:	f015 ff5b 	bl	3d186 <assert_print>
   272d0:	2139      	movs	r1, #57	; 0x39
   272d2:	4807      	ldr	r0, [pc, #28]	; (272f0 <at_param_size+0x30>)
   272d4:	f015 ff50 	bl	3d178 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   272d8:	7823      	ldrb	r3, [r4, #0]
   272da:	2b01      	cmp	r3, #1
   272dc:	d004      	beq.n	272e8 <at_param_size+0x28>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   272de:	3b02      	subs	r3, #2
   272e0:	2b01      	cmp	r3, #1
   272e2:	d803      	bhi.n	272ec <at_param_size+0x2c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   272e4:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   272e6:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   272e8:	2008      	movs	r0, #8
   272ea:	e7fc      	b.n	272e6 <at_param_size+0x26>
	return 0;
   272ec:	2000      	movs	r0, #0
   272ee:	e7fa      	b.n	272e6 <at_param_size+0x26>
   272f0:	00045b77 	.word	0x00045b77
   272f4:	0004494f 	.word	0x0004494f

000272f8 <at_param_clear>:
{
   272f8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   272fa:	4604      	mov	r4, r0
   272fc:	b940      	cbnz	r0, 27310 <at_param_clear+0x18>
   272fe:	490a      	ldr	r1, [pc, #40]	; (27328 <at_param_clear+0x30>)
   27300:	480a      	ldr	r0, [pc, #40]	; (2732c <at_param_clear+0x34>)
   27302:	221d      	movs	r2, #29
   27304:	f015 ff3f 	bl	3d186 <assert_print>
   27308:	211d      	movs	r1, #29
   2730a:	4807      	ldr	r0, [pc, #28]	; (27328 <at_param_clear+0x30>)
   2730c:	f015 ff34 	bl	3d178 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   27310:	7823      	ldrb	r3, [r4, #0]
   27312:	3b02      	subs	r3, #2
   27314:	2b01      	cmp	r3, #1
   27316:	d802      	bhi.n	2731e <at_param_clear+0x26>
		k_free(param->value.str_val);
   27318:	68a0      	ldr	r0, [r4, #8]
   2731a:	f01a fb70 	bl	419fe <k_free>
	param->value.int_val = 0;
   2731e:	2200      	movs	r2, #0
   27320:	2300      	movs	r3, #0
   27322:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   27326:	bd10      	pop	{r4, pc}
   27328:	00045b77 	.word	0x00045b77
   2732c:	0004494f 	.word	0x0004494f

00027330 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   27330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (list == NULL || list->params == NULL) {
   27334:	4604      	mov	r4, r0
   27336:	b140      	cbz	r0, 2734a <at_params_list_clear+0x1a>
   27338:	6843      	ldr	r3, [r0, #4]
   2733a:	b133      	cbz	r3, 2734a <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2733c:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2733e:	4f0f      	ldr	r7, [pc, #60]	; (2737c <at_params_list_clear+0x4c>)
   27340:	f8df 803c 	ldr.w	r8, [pc, #60]	; 27380 <at_params_list_clear+0x50>
	for (size_t i = 0; i < list->param_count; ++i) {
   27344:	6823      	ldr	r3, [r4, #0]
   27346:	429e      	cmp	r6, r3
   27348:	d301      	bcc.n	2734e <at_params_list_clear+0x1e>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2734a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		at_param_clear(&params[i]);
   2734e:	6865      	ldr	r5, [r4, #4]
   27350:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   27354:	4628      	mov	r0, r5
   27356:	f7ff ffcf 	bl	272f8 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2735a:	b945      	cbnz	r5, 2736e <at_params_list_clear+0x3e>
   2735c:	4639      	mov	r1, r7
   2735e:	4640      	mov	r0, r8
   27360:	2214      	movs	r2, #20
   27362:	f015 ff10 	bl	3d186 <assert_print>
   27366:	2114      	movs	r1, #20
   27368:	4638      	mov	r0, r7
   2736a:	f015 ff05 	bl	3d178 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   2736e:	2210      	movs	r2, #16
   27370:	2100      	movs	r1, #0
   27372:	4628      	mov	r0, r5
   27374:	f01a fbf4 	bl	41b60 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   27378:	3601      	adds	r6, #1
   2737a:	e7e3      	b.n	27344 <at_params_list_clear+0x14>
   2737c:	00045b77 	.word	0x00045b77
   27380:	0004494f 	.word	0x0004494f

00027384 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   27384:	b510      	push	{r4, lr}
   27386:	4604      	mov	r4, r0
   27388:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   2738a:	2240      	movs	r2, #64	; 0x40
   2738c:	2100      	movs	r1, #0
   2738e:	4668      	mov	r0, sp
   27390:	f01a fbe6 	bl	41b60 <memset>

	__ASSERT_NO_MSG(response != NULL);
   27394:	b954      	cbnz	r4, 273ac <at_handler_cscon+0x28>
   27396:	490f      	ldr	r1, [pc, #60]	; (273d4 <at_handler_cscon+0x50>)
   27398:	480f      	ldr	r0, [pc, #60]	; (273d8 <at_handler_cscon+0x54>)
   2739a:	f240 120b 	movw	r2, #267	; 0x10b
   2739e:	f015 fef2 	bl	3d186 <assert_print>
   273a2:	f240 110b 	movw	r1, #267	; 0x10b
   273a6:	480b      	ldr	r0, [pc, #44]	; (273d4 <at_handler_cscon+0x50>)
   273a8:	f015 fee6 	bl	3d178 <assert_post_action>

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   273ac:	2201      	movs	r2, #1
   273ae:	4620      	mov	r0, r4
   273b0:	a902      	add	r1, sp, #8
   273b2:	f000 fe6f 	bl	28094 <parse_rrc_mode>
	if (err) {
   273b6:	4602      	mov	r2, r0
   273b8:	b128      	cbz	r0, 273c6 <at_handler_cscon+0x42>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   273ba:	2145      	movs	r1, #69	; 0x45
   273bc:	4807      	ldr	r0, [pc, #28]	; (273dc <at_handler_cscon+0x58>)
   273be:	f015 ff1c 	bl	3d1fa <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   273c2:	b010      	add	sp, #64	; 0x40
   273c4:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   273c6:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   273c8:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   273ca:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   273ce:	f000 fd95 	bl	27efc <event_handler_list_dispatch>
   273d2:	e7f6      	b.n	273c2 <at_handler_cscon+0x3e>
   273d4:	00045ba5 	.word	0x00045ba5
   273d8:	0004494f 	.word	0x0004494f
   273dc:	00045bd3 	.word	0x00045bd3

000273e0 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   273e0:	b510      	push	{r4, lr}
   273e2:	4604      	mov	r4, r0
   273e4:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   273e6:	2240      	movs	r2, #64	; 0x40
   273e8:	2100      	movs	r1, #0
   273ea:	4668      	mov	r0, sp
   273ec:	f01a fbb8 	bl	41b60 <memset>

	__ASSERT_NO_MSG(response != NULL);
   273f0:	b954      	cbnz	r4, 27408 <at_handler_cedrxp+0x28>
   273f2:	490f      	ldr	r1, [pc, #60]	; (27430 <at_handler_cedrxp+0x50>)
   273f4:	480f      	ldr	r0, [pc, #60]	; (27434 <at_handler_cedrxp+0x54>)
   273f6:	f240 1225 	movw	r2, #293	; 0x125
   273fa:	f015 fec4 	bl	3d186 <assert_print>
   273fe:	f240 1125 	movw	r1, #293	; 0x125
   27402:	480b      	ldr	r0, [pc, #44]	; (27430 <at_handler_cedrxp+0x50>)
   27404:	f015 feb8 	bl	3d178 <assert_post_action>

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   27408:	4620      	mov	r0, r4
   2740a:	a902      	add	r1, sp, #8
   2740c:	f7f6 ff78 	bl	1e300 <parse_edrx>
	if (err) {
   27410:	4602      	mov	r2, r0
   27412:	b128      	cbz	r0, 27420 <at_handler_cedrxp+0x40>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   27414:	2145      	movs	r1, #69	; 0x45
   27416:	4808      	ldr	r0, [pc, #32]	; (27438 <at_handler_cedrxp+0x58>)
   27418:	f015 feef 	bl	3d1fa <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   2741c:	b010      	add	sp, #64	; 0x40
   2741e:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   27420:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   27422:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   27424:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   27428:	f000 fd68 	bl	27efc <event_handler_list_dispatch>
   2742c:	e7f6      	b.n	2741c <at_handler_cedrxp+0x3c>
   2742e:	bf00      	nop
   27430:	00045ba5 	.word	0x00045ba5
   27434:	0004494f 	.word	0x0004494f
   27438:	00045bff 	.word	0x00045bff

0002743c <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   2743c:	b510      	push	{r4, lr}
   2743e:	4604      	mov	r4, r0
   27440:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   27442:	2240      	movs	r2, #64	; 0x40
   27444:	2100      	movs	r1, #0
   27446:	4668      	mov	r0, sp
   27448:	f01a fb8a 	bl	41b60 <memset>

	__ASSERT_NO_MSG(response != NULL);
   2744c:	b954      	cbnz	r4, 27464 <at_handler_xt3412+0x28>
   2744e:	4912      	ldr	r1, [pc, #72]	; (27498 <at_handler_xt3412+0x5c>)
   27450:	4812      	ldr	r0, [pc, #72]	; (2749c <at_handler_xt3412+0x60>)
   27452:	f240 1239 	movw	r2, #313	; 0x139
   27456:	f015 fe96 	bl	3d186 <assert_print>
   2745a:	f240 1139 	movw	r1, #313	; 0x139
   2745e:	480e      	ldr	r0, [pc, #56]	; (27498 <at_handler_xt3412+0x5c>)
   27460:	f015 fe8a 	bl	3d178 <assert_post_action>

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   27464:	4620      	mov	r0, r4
   27466:	a902      	add	r1, sp, #8
   27468:	f000 ff30 	bl	282cc <parse_xt3412>
	if (err) {
   2746c:	4602      	mov	r2, r0
   2746e:	b128      	cbz	r0, 2747c <at_handler_xt3412+0x40>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   27470:	2145      	movs	r1, #69	; 0x45
   27472:	480b      	ldr	r0, [pc, #44]	; (274a0 <at_handler_xt3412+0x64>)
   27474:	f015 fec1 	bl	3d1fa <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   27478:	b010      	add	sp, #64	; 0x40
   2747a:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   2747c:	9b02      	ldr	r3, [sp, #8]
   2747e:	9a03      	ldr	r2, [sp, #12]
   27480:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   27484:	3b08      	subs	r3, #8
   27486:	4313      	orrs	r3, r2
   27488:	d1f6      	bne.n	27478 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   2748a:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   2748c:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   2748e:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   27492:	f000 fd33 	bl	27efc <event_handler_list_dispatch>
   27496:	e7ef      	b.n	27478 <at_handler_xt3412+0x3c>
   27498:	00045ba5 	.word	0x00045ba5
   2749c:	0004494f 	.word	0x0004494f
   274a0:	00045c20 	.word	0x00045c20

000274a4 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   274a4:	b530      	push	{r4, r5, lr}
   274a6:	4605      	mov	r5, r0
   274a8:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   274aa:	2240      	movs	r2, #64	; 0x40
   274ac:	2100      	movs	r1, #0
   274ae:	4668      	mov	r0, sp
   274b0:	f01a fb56 	bl	41b60 <memset>

	__ASSERT_NO_MSG(response != NULL);
   274b4:	b955      	cbnz	r5, 274cc <at_handler_ncellmeas+0x28>
   274b6:	4921      	ldr	r1, [pc, #132]	; (2753c <at_handler_ncellmeas+0x98>)
   274b8:	4821      	ldr	r0, [pc, #132]	; (27540 <at_handler_ncellmeas+0x9c>)
   274ba:	f44f 72aa 	mov.w	r2, #340	; 0x154
   274be:	f015 fe62 	bl	3d186 <assert_print>
   274c2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   274c6:	481d      	ldr	r0, [pc, #116]	; (2753c <at_handler_ncellmeas+0x98>)
   274c8:	f015 fe56 	bl	3d178 <assert_post_action>

	int ncell_count = neighborcell_count_get(response);
   274cc:	4628      	mov	r0, r5
   274ce:	f000 ff4b 	bl	28368 <neighborcell_count_get>
   274d2:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   274d4:	f000 fcda 	bl	27e8c <event_handler_list_is_empty>
   274d8:	b950      	cbnz	r0, 274f0 <at_handler_ncellmeas+0x4c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   274da:	b15c      	cbz	r4, 274f4 <at_handler_ncellmeas+0x50>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   274dc:	4620      	mov	r0, r4
   274de:	2110      	movs	r1, #16
   274e0:	f01a fa98 	bl	41a14 <k_calloc>
		if (neighbor_cells == NULL) {
   274e4:	4604      	mov	r4, r0
   274e6:	b928      	cbnz	r0, 274f4 <at_handler_ncellmeas+0x50>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   274e8:	2145      	movs	r1, #69	; 0x45
   274ea:	4816      	ldr	r0, [pc, #88]	; (27544 <at_handler_ncellmeas+0xa0>)
   274ec:	f015 fe85 	bl	3d1fa <z_log_minimal_printk>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   274f0:	b011      	add	sp, #68	; 0x44
   274f2:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   274f4:	4628      	mov	r0, r5
   274f6:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   274f8:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   274fa:	f000 ff51 	bl	283a0 <parse_ncellmeas>
	switch (err) {
   274fe:	1dc3      	adds	r3, r0, #7
	err = parse_ncellmeas(response, &evt.cells_info);
   27500:	4602      	mov	r2, r0
	switch (err) {
   27502:	d006      	beq.n	27512 <at_handler_ncellmeas+0x6e>
   27504:	2801      	cmp	r0, #1
   27506:	d90d      	bls.n	27524 <at_handler_ncellmeas+0x80>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   27508:	2145      	movs	r1, #69	; 0x45
   2750a:	480f      	ldr	r0, [pc, #60]	; (27548 <at_handler_ncellmeas+0xa4>)
   2750c:	f015 fe75 	bl	3d1fa <z_log_minimal_printk>
   27510:	e00e      	b.n	27530 <at_handler_ncellmeas+0x8c>
		LOG_WRN("Not all neighbor cells could be parsed");
   27512:	2157      	movs	r1, #87	; 0x57
   27514:	480d      	ldr	r0, [pc, #52]	; (2754c <at_handler_ncellmeas+0xa8>)
   27516:	f015 fe70 	bl	3d1fa <z_log_minimal_printk>
		LOG_WRN("More cells than the configured max count of %d were found",
   2751a:	220a      	movs	r2, #10
   2751c:	2157      	movs	r1, #87	; 0x57
   2751e:	480c      	ldr	r0, [pc, #48]	; (27550 <at_handler_ncellmeas+0xac>)
   27520:	f015 fe6b 	bl	3d1fa <z_log_minimal_printk>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   27524:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   27526:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   27528:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   2752c:	f000 fce6 	bl	27efc <event_handler_list_dispatch>
	if (neighbor_cells) {
   27530:	2c00      	cmp	r4, #0
   27532:	d0dd      	beq.n	274f0 <at_handler_ncellmeas+0x4c>
		k_free(neighbor_cells);
   27534:	4620      	mov	r0, r4
   27536:	f01a fa62 	bl	419fe <k_free>
   2753a:	e7d9      	b.n	274f0 <at_handler_ncellmeas+0x4c>
   2753c:	00045ba5 	.word	0x00045ba5
   27540:	0004494f 	.word	0x0004494f
   27544:	00045c59 	.word	0x00045c59
   27548:	00045cf6 	.word	0x00045cf6
   2754c:	00045c8b 	.word	0x00045c8b
   27550:	00045cb7 	.word	0x00045cb7

00027554 <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   27554:	b510      	push	{r4, lr}
   27556:	4604      	mov	r4, r0
   27558:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   2755a:	2240      	movs	r2, #64	; 0x40
   2755c:	2100      	movs	r1, #0
   2755e:	4668      	mov	r0, sp
   27560:	f01a fafe 	bl	41b60 <memset>

	__ASSERT_NO_MSG(response != NULL);
   27564:	b954      	cbnz	r4, 2757c <at_handler_xmodemsleep+0x28>
   27566:	4919      	ldr	r1, [pc, #100]	; (275cc <at_handler_xmodemsleep+0x78>)
   27568:	4819      	ldr	r0, [pc, #100]	; (275d0 <at_handler_xmodemsleep+0x7c>)
   2756a:	f240 1289 	movw	r2, #393	; 0x189
   2756e:	f015 fe0a 	bl	3d186 <assert_print>
   27572:	f240 1189 	movw	r1, #393	; 0x189
   27576:	4815      	ldr	r0, [pc, #84]	; (275cc <at_handler_xmodemsleep+0x78>)
   27578:	f015 fdfe 	bl	3d178 <assert_post_action>

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   2757c:	4620      	mov	r0, r4
   2757e:	a902      	add	r1, sp, #8
   27580:	f001 f858 	bl	28634 <parse_xmodemsleep>
	if (err) {
   27584:	4602      	mov	r2, r0
   27586:	b128      	cbz	r0, 27594 <at_handler_xmodemsleep+0x40>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   27588:	2145      	movs	r1, #69	; 0x45
   2758a:	4812      	ldr	r0, [pc, #72]	; (275d4 <at_handler_xmodemsleep+0x80>)
   2758c:	f015 fe35 	bl	3d1fa <z_log_minimal_printk>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   27590:	b010      	add	sp, #64	; 0x40
   27592:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   27594:	f89d 3008 	ldrb.w	r3, [sp, #8]
   27598:	1e5a      	subs	r2, r3, #1
   2759a:	2a01      	cmp	r2, #1
   2759c:	d901      	bls.n	275a2 <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   2759e:	2b04      	cmp	r3, #4
   275a0:	d1f6      	bne.n	27590 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   275a2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   275a6:	f5a1 539c 	sub.w	r3, r1, #4992	; 0x1380
   275aa:	3b08      	subs	r3, #8
   275ac:	4313      	orrs	r3, r2
   275ae:	d106      	bne.n	275be <at_handler_xmodemsleep+0x6a>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   275b0:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   275b2:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   275b4:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   275b8:	f000 fca0 	bl	27efc <event_handler_list_dispatch>
   275bc:	e7e8      	b.n	27590 <at_handler_xmodemsleep+0x3c>
	} else if (evt.modem_sleep.time == 0) {
   275be:	ea51 0302 	orrs.w	r3, r1, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   275c2:	bf0c      	ite	eq
   275c4:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   275c6:	230a      	movne	r3, #10
   275c8:	e7f3      	b.n	275b2 <at_handler_xmodemsleep+0x5e>
   275ca:	bf00      	nop
   275cc:	00045ba5 	.word	0x00045ba5
   275d0:	0004494f 	.word	0x0004494f
   275d4:	00045d25 	.word	0x00045d25

000275d8 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   275d8:	b510      	push	{r4, lr}
   275da:	4604      	mov	r4, r0
   275dc:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   275de:	2240      	movs	r2, #64	; 0x40
   275e0:	2100      	movs	r1, #0
   275e2:	4668      	mov	r0, sp
   275e4:	f01a fabc 	bl	41b60 <memset>

	__ASSERT_NO_MSG(response != NULL);
   275e8:	b954      	cbnz	r4, 27600 <at_handler_mdmev+0x28>
   275ea:	490f      	ldr	r1, [pc, #60]	; (27628 <at_handler_mdmev+0x50>)
   275ec:	480f      	ldr	r0, [pc, #60]	; (2762c <at_handler_mdmev+0x54>)
   275ee:	f240 12b1 	movw	r2, #433	; 0x1b1
   275f2:	f015 fdc8 	bl	3d186 <assert_print>
   275f6:	f240 11b1 	movw	r1, #433	; 0x1b1
   275fa:	480b      	ldr	r0, [pc, #44]	; (27628 <at_handler_mdmev+0x50>)
   275fc:	f015 fdbc 	bl	3d178 <assert_post_action>

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   27600:	4620      	mov	r0, r4
   27602:	a902      	add	r1, sp, #8
   27604:	f001 f872 	bl	286ec <parse_mdmev>
	if (err) {
   27608:	4602      	mov	r2, r0
   2760a:	b128      	cbz	r0, 27618 <at_handler_mdmev+0x40>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   2760c:	2145      	movs	r1, #69	; 0x45
   2760e:	4808      	ldr	r0, [pc, #32]	; (27630 <at_handler_mdmev+0x58>)
   27610:	f015 fdf3 	bl	3d1fa <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   27614:	b010      	add	sp, #64	; 0x40
   27616:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   27618:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   2761a:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   2761c:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   27620:	f000 fc6c 	bl	27efc <event_handler_list_dispatch>
   27624:	e7f6      	b.n	27614 <at_handler_mdmev+0x3c>
   27626:	bf00      	nop
   27628:	00045ba5 	.word	0x00045ba5
   2762c:	0004494f 	.word	0x0004494f
   27630:	00045d66 	.word	0x00045d66

00027634 <enable_notifications>:

static int enable_notifications(void)
{
   27634:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   27636:	4818      	ldr	r0, [pc, #96]	; (27698 <enable_notifications+0x64>)
{
   27638:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   2763a:	f00e f801 	bl	35640 <nrf_modem_at_printf>
	if (err) {
   2763e:	4602      	mov	r2, r0
   27640:	b138      	cbz	r0, 27652 <enable_notifications+0x1e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   27642:	4816      	ldr	r0, [pc, #88]	; (2769c <enable_notifications+0x68>)
   27644:	2145      	movs	r1, #69	; 0x45
   27646:	f015 fdd8 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   2764a:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   2764e:	b00e      	add	sp, #56	; 0x38
   27650:	bd10      	pop	{r4, pc}
	err = nrf_modem_at_printf(cscon);
   27652:	4813      	ldr	r0, [pc, #76]	; (276a0 <enable_notifications+0x6c>)
   27654:	f00d fff4 	bl	35640 <nrf_modem_at_printf>
	if (err) {
   27658:	2800      	cmp	r0, #0
   2765a:	d0f8      	beq.n	2764e <enable_notifications+0x1a>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   2765c:	4602      	mov	r2, r0
   2765e:	2157      	movs	r1, #87	; 0x57
   27660:	4810      	ldr	r0, [pc, #64]	; (276a4 <enable_notifications+0x70>)
   27662:	f015 fdca 	bl	3d1fa <z_log_minimal_printk>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   27666:	2157      	movs	r1, #87	; 0x57
   27668:	480f      	ldr	r0, [pc, #60]	; (276a8 <enable_notifications+0x74>)
   2766a:	f015 fdc6 	bl	3d1fa <z_log_minimal_printk>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   2766e:	2132      	movs	r1, #50	; 0x32
   27670:	4a0e      	ldr	r2, [pc, #56]	; (276ac <enable_notifications+0x78>)
   27672:	a801      	add	r0, sp, #4
   27674:	f00e f80a 	bl	3568c <nrf_modem_at_cmd>
		if (err == 0) {
   27678:	4604      	mov	r4, r0
   2767a:	b950      	cbnz	r0, 27692 <enable_notifications+0x5e>
			char *end = strstr(buf, "\r\nOK");
   2767c:	490c      	ldr	r1, [pc, #48]	; (276b0 <enable_notifications+0x7c>)
   2767e:	a801      	add	r0, sp, #4
   27680:	f01a fc88 	bl	41f94 <strstr>
			if (end) {
   27684:	b100      	cbz	r0, 27688 <enable_notifications+0x54>
				*end = '\0';
   27686:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   27688:	2157      	movs	r1, #87	; 0x57
   2768a:	480a      	ldr	r0, [pc, #40]	; (276b4 <enable_notifications+0x80>)
   2768c:	aa01      	add	r2, sp, #4
   2768e:	f015 fdb4 	bl	3d1fa <z_log_minimal_printk>
	return 0;
   27692:	2000      	movs	r0, #0
   27694:	e7db      	b.n	2764e <enable_notifications+0x1a>
   27696:	bf00      	nop
   27698:	00045d9b 	.word	0x00045d9b
   2769c:	00045da6 	.word	0x00045da6
   276a0:	00046410 	.word	0x00046410
   276a4:	00045de1 	.word	0x00045de1
   276a8:	00045e1e 	.word	0x00045e1e
   276ac:	00045e54 	.word	0x00045e54
   276b0:	00045e5c 	.word	0x00045e5c
   276b4:	00045e61 	.word	0x00045e61

000276b8 <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   276b8:	b918      	cbnz	r0, 276c2 <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   276ba:	2149      	movs	r1, #73	; 0x49
   276bc:	4802      	ldr	r0, [pc, #8]	; (276c8 <lte_lc_register_handler+0x10>)
   276be:	f015 bd9c 	b.w	3d1fa <z_log_minimal_printk>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   276c2:	f000 bbeb 	b.w	27e9c <event_handler_list_append_handler>
   276c6:	bf00      	nop
   276c8:	00045e89 	.word	0x00045e89

000276cc <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   276cc:	2300      	movs	r3, #0
{
   276ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   276d0:	b08d      	sub	sp, #52	; 0x34
   276d2:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   276d4:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   276d6:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   276da:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   276de:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   276e2:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   276e6:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   276ea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   276ee:	2800      	cmp	r0, #0
   276f0:	d054      	beq.n	2779c <lte_lc_psm_get+0xd0>
   276f2:	2900      	cmp	r1, #0
   276f4:	d052      	beq.n	2779c <lte_lc_psm_get+0xd0>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   276f6:	4c2b      	ldr	r4, [pc, #172]	; (277a4 <lte_lc_psm_get+0xd8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   276f8:	4a2b      	ldr	r2, [pc, #172]	; (277a8 <lte_lc_psm_get+0xdc>)
   276fa:	21a0      	movs	r1, #160	; 0xa0
   276fc:	4620      	mov	r0, r4
	response[0] = '\0';
   276fe:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   27700:	f00d ffc4 	bl	3568c <nrf_modem_at_cmd>
	if (err < 0) {
   27704:	1e02      	subs	r2, r0, #0
   27706:	da08      	bge.n	2771a <lte_lc_psm_get+0x4e>
		LOG_ERR("AT command failed, error: %d", err);
   27708:	2145      	movs	r1, #69	; 0x45
   2770a:	4828      	ldr	r0, [pc, #160]	; (277ac <lte_lc_psm_get+0xe0>)
   2770c:	f015 fd75 	bl	3d1fa <z_log_minimal_printk>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   27710:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   27714:	4620      	mov	r0, r4
   27716:	b00d      	add	sp, #52	; 0x34
   27718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   2771a:	4620      	mov	r0, r4
   2771c:	212c      	movs	r1, #44	; 0x2c
   2771e:	f01a fbdd 	bl	41edc <strchr>
   27722:	270c      	movs	r7, #12
   27724:	4604      	mov	r4, r0
		if (comma_ptr) {
   27726:	b37c      	cbz	r4, 27788 <lte_lc_psm_get+0xbc>
			comma_ptr = strchr(comma_ptr + 1, ch);
   27728:	1c60      	adds	r0, r4, #1
   2772a:	212c      	movs	r1, #44	; 0x2c
   2772c:	f01a fbd6 	bl	41edc <strchr>
	for (int i = 0; i < 12; i++) {
   27730:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   27732:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   27734:	d1f7      	bne.n	27726 <lte_lc_psm_get+0x5a>
	if (comma_ptr) {
   27736:	b338      	cbz	r0, 27788 <lte_lc_psm_get+0xbc>
		strncpy(active_time_str, comma_ptr + 2, 8);
   27738:	1c81      	adds	r1, r0, #2
   2773a:	2208      	movs	r2, #8
   2773c:	a803      	add	r0, sp, #12
   2773e:	f01a fbf6 	bl	41f2e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   27742:	1c60      	adds	r0, r4, #1
   27744:	212c      	movs	r1, #44	; 0x2c
   27746:	f01a fbc9 	bl	41edc <strchr>
	if (comma_ptr) {
   2774a:	4604      	mov	r4, r0
   2774c:	b1e0      	cbz	r0, 27788 <lte_lc_psm_get+0xbc>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   2774e:	1c81      	adds	r1, r0, #2
   27750:	2208      	movs	r2, #8
   27752:	a806      	add	r0, sp, #24
   27754:	f01a fbeb 	bl	41f2e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   27758:	212c      	movs	r1, #44	; 0x2c
   2775a:	1c60      	adds	r0, r4, #1
   2775c:	f01a fbbe 	bl	41edc <strchr>
	if (comma_ptr) {
   27760:	b120      	cbz	r0, 2776c <lte_lc_psm_get+0xa0>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   27762:	1c81      	adds	r1, r0, #2
   27764:	2208      	movs	r2, #8
   27766:	a809      	add	r0, sp, #36	; 0x24
   27768:	f01a fbe1 	bl	41f2e <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   2776c:	ab01      	add	r3, sp, #4
   2776e:	aa09      	add	r2, sp, #36	; 0x24
   27770:	a906      	add	r1, sp, #24
   27772:	a803      	add	r0, sp, #12
   27774:	f000 fc00 	bl	27f78 <parse_psm>
	if (err) {
   27778:	4604      	mov	r4, r0
   2777a:	b150      	cbz	r0, 27792 <lte_lc_psm_get+0xc6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   2777c:	4602      	mov	r2, r0
   2777e:	2145      	movs	r1, #69	; 0x45
   27780:	480b      	ldr	r0, [pc, #44]	; (277b0 <lte_lc_psm_get+0xe4>)
   27782:	f015 fd3a 	bl	3d1fa <z_log_minimal_printk>
		return err;
   27786:	e7c5      	b.n	27714 <lte_lc_psm_get+0x48>
			LOG_ERR("AT command parsing failed");
   27788:	2145      	movs	r1, #69	; 0x45
   2778a:	480a      	ldr	r0, [pc, #40]	; (277b4 <lte_lc_psm_get+0xe8>)
   2778c:	f015 fd35 	bl	3d1fa <z_log_minimal_printk>
   27790:	e7be      	b.n	27710 <lte_lc_psm_get+0x44>
	*tau = psm_cfg.tau;
   27792:	9b01      	ldr	r3, [sp, #4]
   27794:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   27796:	9b02      	ldr	r3, [sp, #8]
   27798:	602b      	str	r3, [r5, #0]
	return 0;
   2779a:	e7bb      	b.n	27714 <lte_lc_psm_get+0x48>
		return -EINVAL;
   2779c:	f06f 0415 	mvn.w	r4, #21
   277a0:	e7b8      	b.n	27714 <lte_lc_psm_get+0x48>
   277a2:	bf00      	nop
   277a4:	2001b67c 	.word	0x2001b67c
   277a8:	00045f00 	.word	0x00045f00
   277ac:	00045f0d 	.word	0x00045f0d
   277b0:	00045f4e 	.word	0x00045f4e
   277b4:	00045f2f 	.word	0x00045f2f

000277b8 <at_handler_cereg>:
{
   277b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   277ba:	4604      	mov	r4, r0
   277bc:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   277be:	2240      	movs	r2, #64	; 0x40
   277c0:	2100      	movs	r1, #0
   277c2:	a812      	add	r0, sp, #72	; 0x48
   277c4:	f01a f9cc 	bl	41b60 <memset>
	__ASSERT_NO_MSG(response != NULL);
   277c8:	b944      	cbnz	r4, 277dc <at_handler_cereg+0x24>
   277ca:	494e      	ldr	r1, [pc, #312]	; (27904 <at_handler_cereg+0x14c>)
   277cc:	484e      	ldr	r0, [pc, #312]	; (27908 <at_handler_cereg+0x150>)
   277ce:	2292      	movs	r2, #146	; 0x92
   277d0:	f015 fcd9 	bl	3d186 <assert_print>
   277d4:	2192      	movs	r1, #146	; 0x92
   277d6:	484b      	ldr	r0, [pc, #300]	; (27904 <at_handler_cereg+0x14c>)
   277d8:	f015 fcce 	bl	3d178 <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   277dc:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   277de:	2230      	movs	r2, #48	; 0x30
   277e0:	4629      	mov	r1, r5
   277e2:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   277e4:	f88d 500e 	strb.w	r5, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   277e8:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   277ea:	f01a f9b9 	bl	41b60 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   277ee:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   277f2:	607d      	str	r5, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   277f4:	f10d 020e 	add.w	r2, sp, #14
   277f8:	9300      	str	r3, [sp, #0]
   277fa:	2101      	movs	r1, #1
   277fc:	4620      	mov	r0, r4
   277fe:	ab06      	add	r3, sp, #24
	struct lte_lc_psm_cfg psm_cfg = {0};
   27800:	9504      	str	r5, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   27802:	f000 fc8f 	bl	28124 <parse_cereg>
	if (err) {
   27806:	4602      	mov	r2, r0
   27808:	b130      	cbz	r0, 27818 <at_handler_cereg+0x60>
		LOG_ERR("Failed to parse notification (error %d): %s",
   2780a:	4623      	mov	r3, r4
   2780c:	2145      	movs	r1, #69	; 0x45
   2780e:	483f      	ldr	r0, [pc, #252]	; (2790c <at_handler_cereg+0x154>)
   27810:	f015 fcf3 	bl	3d1fa <z_log_minimal_printk>
}
   27814:	b023      	add	sp, #140	; 0x8c
   27816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   27818:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2781c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   27820:	2b01      	cmp	r3, #1
   27822:	d105      	bne.n	27830 <at_handler_cereg+0x78>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   27824:	9b08      	ldr	r3, [sp, #32]
   27826:	3301      	adds	r3, #1
   27828:	d053      	beq.n	278d2 <at_handler_cereg+0x11a>
	z_impl_k_sem_give(sem);
   2782a:	4839      	ldr	r0, [pc, #228]	; (27910 <at_handler_cereg+0x158>)
   2782c:	f00f fdb0 	bl	37390 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   27830:	f000 fb2c 	bl	27e8c <event_handler_list_is_empty>
   27834:	2800      	cmp	r0, #0
   27836:	d1ed      	bne.n	27814 <at_handler_cereg+0x5c>
	if (reg_status != prev_reg_status) {
   27838:	4a36      	ldr	r2, [pc, #216]	; (27914 <at_handler_cereg+0x15c>)
   2783a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2783e:	7811      	ldrb	r1, [r2, #0]
   27840:	4299      	cmp	r1, r3
   27842:	d007      	beq.n	27854 <at_handler_cereg+0x9c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   27844:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   27848:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   2784a:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   2784c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   27850:	f000 fb54 	bl	27efc <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   27854:	2230      	movs	r2, #48	; 0x30
   27856:	4930      	ldr	r1, [pc, #192]	; (27918 <at_handler_cereg+0x160>)
   27858:	a806      	add	r0, sp, #24
   2785a:	f01a f951 	bl	41b00 <memcmp>
   2785e:	b1c8      	cbz	r0, 27894 <at_handler_cereg+0xdc>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   27860:	2304      	movs	r3, #4
   27862:	4d2d      	ldr	r5, [pc, #180]	; (27918 <at_handler_cereg+0x160>)
   27864:	ac06      	add	r4, sp, #24
   27866:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   2786a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2786c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2786e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   27870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   27872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   27876:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   2787a:	ae14      	add	r6, sp, #80	; 0x50
   2787c:	ad06      	add	r5, sp, #24
   2787e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27880:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   27882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27884:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   27886:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2788a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   2788e:	a812      	add	r0, sp, #72	; 0x48
   27890:	f000 fb34 	bl	27efc <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   27894:	4a21      	ldr	r2, [pc, #132]	; (2791c <at_handler_cereg+0x164>)
   27896:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2789a:	7811      	ldrb	r1, [r2, #0]
   2789c:	4299      	cmp	r1, r3
   2789e:	d008      	beq.n	278b2 <at_handler_cereg+0xfa>
		prev_lte_mode = lte_mode;
   278a0:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   278a2:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   278a4:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   278a6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   278aa:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   278ae:	f000 fb25 	bl	27efc <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   278b2:	f89d 400e 	ldrb.w	r4, [sp, #14]
   278b6:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   278ba:	2c01      	cmp	r4, #1
   278bc:	d1aa      	bne.n	27814 <at_handler_cereg+0x5c>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   278be:	4638      	mov	r0, r7
   278c0:	a905      	add	r1, sp, #20
   278c2:	f7ff ff03 	bl	276cc <lte_lc_psm_get>
	if (err) {
   278c6:	b140      	cbz	r0, 278da <at_handler_cereg+0x122>
		LOG_ERR("Failed to get PSM information");
   278c8:	2145      	movs	r1, #69	; 0x45
   278ca:	4815      	ldr	r0, [pc, #84]	; (27920 <at_handler_cereg+0x168>)
   278cc:	f015 fc95 	bl	3d1fa <z_log_minimal_printk>
		return;
   278d0:	e7a0      	b.n	27814 <at_handler_cereg+0x5c>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   278d2:	2304      	movs	r3, #4
   278d4:	f88d 300e 	strb.w	r3, [sp, #14]
   278d8:	e7aa      	b.n	27830 <at_handler_cereg+0x78>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   278da:	4d12      	ldr	r5, [pc, #72]	; (27924 <at_handler_cereg+0x16c>)
   278dc:	2208      	movs	r2, #8
   278de:	4629      	mov	r1, r5
   278e0:	4638      	mov	r0, r7
   278e2:	f01a f90d 	bl	41b00 <memcmp>
   278e6:	2800      	cmp	r0, #0
   278e8:	d094      	beq.n	27814 <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   278ea:	e897 0003 	ldmia.w	r7, {r0, r1}
   278ee:	ab14      	add	r3, sp, #80	; 0x50
   278f0:	e885 0003 	stmia.w	r5, {r0, r1}
   278f4:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   278f8:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   278fa:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   278fe:	f000 fafd 	bl	27efc <event_handler_list_dispatch>
   27902:	e787      	b.n	27814 <at_handler_cereg+0x5c>
   27904:	00045ba5 	.word	0x00045ba5
   27908:	0004494f 	.word	0x0004494f
   2790c:	00045f80 	.word	0x00045f80
   27910:	20019408 	.word	0x20019408
   27914:	2001b67b 	.word	0x2001b67b
   27918:	200154f0 	.word	0x200154f0
   2791c:	2001b67a 	.word	0x2001b67a
   27920:	00045fb1 	.word	0x00045fb1
   27924:	20019420 	.word	0x20019420

00027928 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   27928:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   2792a:	2400      	movs	r4, #0

	if (status == NULL) {
   2792c:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   2792e:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   27930:	b1a8      	cbz	r0, 2795e <lte_lc_nw_reg_status_get+0x36>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   27932:	f10d 0202 	add.w	r2, sp, #2
   27936:	490b      	ldr	r1, [pc, #44]	; (27964 <lte_lc_nw_reg_status_get+0x3c>)
   27938:	480b      	ldr	r0, [pc, #44]	; (27968 <lte_lc_nw_reg_status_get+0x40>)
   2793a:	ab01      	add	r3, sp, #4
   2793c:	f00d ff12 	bl	35764 <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   27940:	1e02      	subs	r2, r0, #0
   27942:	dc07      	bgt.n	27954 <lte_lc_nw_reg_status_get+0x2c>
		LOG_ERR("Could not get registration status, error: %d", err);
   27944:	4809      	ldr	r0, [pc, #36]	; (2796c <lte_lc_nw_reg_status_get+0x44>)
   27946:	2145      	movs	r1, #69	; 0x45
   27948:	f015 fc57 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   2794c:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   27950:	b003      	add	sp, #12
   27952:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   27954:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   27958:	4620      	mov	r0, r4
	*status = status_tmp;
   2795a:	702b      	strb	r3, [r5, #0]
	return 0;
   2795c:	e7f8      	b.n	27950 <lte_lc_nw_reg_status_get+0x28>
		return -EINVAL;
   2795e:	f06f 0015 	mvn.w	r0, #21
   27962:	e7f5      	b.n	27950 <lte_lc_nw_reg_status_get+0x28>
   27964:	00045fd4 	.word	0x00045fd4
   27968:	00045ff0 	.word	0x00045ff0
   2796c:	00045ffa 	.word	0x00045ffa

00027970 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   27970:	2807      	cmp	r0, #7
{
   27972:	b538      	push	{r3, r4, r5, lr}
   27974:	4605      	mov	r5, r0
   27976:	460c      	mov	r4, r1
	switch (mode) {
   27978:	d907      	bls.n	2798a <lte_lc_system_mode_set+0x1a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   2797a:	2145      	movs	r1, #69	; 0x45
   2797c:	4602      	mov	r2, r0
   2797e:	4813      	ldr	r0, [pc, #76]	; (279cc <lte_lc_system_mode_set+0x5c>)
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   27980:	f015 fc3b 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   27984:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   27988:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   2798a:	2904      	cmp	r1, #4
   2798c:	d903      	bls.n	27996 <lte_lc_system_mode_set+0x26>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   2798e:	460a      	mov	r2, r1
   27990:	480f      	ldr	r0, [pc, #60]	; (279d0 <lte_lc_system_mode_set+0x60>)
   27992:	2145      	movs	r1, #69	; 0x45
   27994:	e7f4      	b.n	27980 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   27996:	4b0f      	ldr	r3, [pc, #60]	; (279d4 <lte_lc_system_mode_set+0x64>)
   27998:	5c5a      	ldrb	r2, [r3, r1]
   2799a:	4b0f      	ldr	r3, [pc, #60]	; (279d8 <lte_lc_system_mode_set+0x68>)
   2799c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   279a0:	480e      	ldr	r0, [pc, #56]	; (279dc <lte_lc_system_mode_set+0x6c>)
   279a2:	f00d fe4d 	bl	35640 <nrf_modem_at_printf>
	if (err) {
   279a6:	b138      	cbz	r0, 279b8 <lte_lc_system_mode_set+0x48>
		LOG_ERR("Could not send AT command, error: %d", err);
   279a8:	4602      	mov	r2, r0
   279aa:	2145      	movs	r1, #69	; 0x45
   279ac:	480c      	ldr	r0, [pc, #48]	; (279e0 <lte_lc_system_mode_set+0x70>)
   279ae:	f015 fc24 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   279b2:	f06f 000d 	mvn.w	r0, #13
   279b6:	e7e7      	b.n	27988 <lte_lc_system_mode_set+0x18>
	sys_mode_current = mode;
   279b8:	4b0a      	ldr	r3, [pc, #40]	; (279e4 <lte_lc_system_mode_set+0x74>)
   279ba:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   279bc:	4b0a      	ldr	r3, [pc, #40]	; (279e8 <lte_lc_system_mode_set+0x78>)
   279be:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   279c0:	4b0a      	ldr	r3, [pc, #40]	; (279ec <lte_lc_system_mode_set+0x7c>)
   279c2:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   279c4:	4b0a      	ldr	r3, [pc, #40]	; (279f0 <lte_lc_system_mode_set+0x80>)
   279c6:	701c      	strb	r4, [r3, #0]
	return 0;
   279c8:	e7de      	b.n	27988 <lte_lc_system_mode_set+0x18>
   279ca:	bf00      	nop
   279cc:	0004602c 	.word	0x0004602c
   279d0:	00046053 	.word	0x00046053
   279d4:	0004641b 	.word	0x0004641b
   279d8:	00043408 	.word	0x00043408
   279dc:	0004607d 	.word	0x0004607d
   279e0:	00046093 	.word	0x00046093
   279e4:	2001b71c 	.word	0x2001b71c
   279e8:	20014c44 	.word	0x20014c44
   279ec:	2001b678 	.word	0x2001b678
   279f0:	2001b679 	.word	0x2001b679

000279f4 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   279f4:	b530      	push	{r4, r5, lr}
   279f6:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   279f8:	4605      	mov	r5, r0
{
   279fa:	b087      	sub	sp, #28
	if (mode == NULL) {
   279fc:	2800      	cmp	r0, #0
   279fe:	d06b      	beq.n	27ad8 <lte_lc_system_mode_get+0xe4>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   27a00:	ab05      	add	r3, sp, #20
   27a02:	9301      	str	r3, [sp, #4]
   27a04:	ab04      	add	r3, sp, #16
   27a06:	9300      	str	r3, [sp, #0]
   27a08:	aa02      	add	r2, sp, #8
   27a0a:	4935      	ldr	r1, [pc, #212]	; (27ae0 <lte_lc_system_mode_get+0xec>)
   27a0c:	4835      	ldr	r0, [pc, #212]	; (27ae4 <lte_lc_system_mode_get+0xf0>)
   27a0e:	ab03      	add	r3, sp, #12
   27a10:	f00d fea8 	bl	35764 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   27a14:	2804      	cmp	r0, #4
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   27a16:	4602      	mov	r2, r0
	if (err != 4) {
   27a18:	d004      	beq.n	27a24 <lte_lc_system_mode_get+0x30>
		LOG_ERR("Failed to get system mode, error: %d", err);
   27a1a:	2145      	movs	r1, #69	; 0x45
   27a1c:	4832      	ldr	r0, [pc, #200]	; (27ae8 <lte_lc_system_mode_get+0xf4>)
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   27a1e:	f015 fbec 	bl	3d1fa <z_log_minimal_printk>
			return -EFAULT;
   27a22:	e039      	b.n	27a98 <lte_lc_system_mode_get+0xa4>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27a24:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27a26:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27a28:	2b00      	cmp	r3, #0
   27a2a:	bf14      	ite	ne
   27a2c:	2302      	movne	r3, #2
   27a2e:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27a30:	2a00      	cmp	r2, #0
   27a32:	bf14      	ite	ne
   27a34:	2204      	movne	r2, #4
   27a36:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27a38:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   27a3a:	9a04      	ldr	r2, [sp, #16]
   27a3c:	2a00      	cmp	r2, #0
   27a3e:	bf14      	ite	ne
   27a40:	2208      	movne	r2, #8
   27a42:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27a44:	4313      	orrs	r3, r2
	switch (mode_bitmask) {
   27a46:	2b0e      	cmp	r3, #14
   27a48:	d822      	bhi.n	27a90 <lte_lc_system_mode_get+0x9c>
   27a4a:	e8df f003 	tbb	[pc, r3]
   27a4e:	2108      	.short	0x2108
   27a50:	21152113 	.word	0x21152113
   27a54:	2117211d 	.word	0x2117211d
   27a58:	211b2119 	.word	0x211b2119
   27a5c:	1f          	.byte	0x1f
   27a5d:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   27a5e:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27a60:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   27a62:	b1fc      	cbz	r4, 27aa4 <lte_lc_system_mode_get+0xb0>
		switch (mode_preference) {
   27a64:	9a05      	ldr	r2, [sp, #20]
   27a66:	2a04      	cmp	r2, #4
   27a68:	d833      	bhi.n	27ad2 <lte_lc_system_mode_get+0xde>
   27a6a:	e8df f002 	tbb	[pc, r2]
   27a6e:	2a19      	.short	0x2a19
   27a70:	2e2c      	.short	0x2e2c
   27a72:	30          	.byte	0x30
   27a73:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   27a74:	2301      	movs	r3, #1
   27a76:	e7f3      	b.n	27a60 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   27a78:	2302      	movs	r3, #2
   27a7a:	e7f1      	b.n	27a60 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   27a7c:	2303      	movs	r3, #3
   27a7e:	e7ef      	b.n	27a60 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   27a80:	2304      	movs	r3, #4
   27a82:	e7ed      	b.n	27a60 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   27a84:	2305      	movs	r3, #5
   27a86:	e7eb      	b.n	27a60 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   27a88:	2306      	movs	r3, #6
   27a8a:	e7e9      	b.n	27a60 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27a8c:	2307      	movs	r3, #7
   27a8e:	e7e7      	b.n	27a60 <lte_lc_system_mode_get+0x6c>
		LOG_ERR("Invalid system mode, assuming parsing error");
   27a90:	2145      	movs	r1, #69	; 0x45
   27a92:	4816      	ldr	r0, [pc, #88]	; (27aec <lte_lc_system_mode_get+0xf8>)
   27a94:	f015 fbb1 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   27a98:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   27a9c:	b007      	add	sp, #28
   27a9e:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   27aa0:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   27aa2:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   27aa4:	4b12      	ldr	r3, [pc, #72]	; (27af0 <lte_lc_system_mode_get+0xfc>)
   27aa6:	782a      	ldrb	r2, [r5, #0]
   27aa8:	7819      	ldrb	r1, [r3, #0]
   27aaa:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   27aac:	bf18      	it	ne
   27aae:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   27ab0:	b12c      	cbz	r4, 27abe <lte_lc_system_mode_get+0xca>
   27ab2:	4b10      	ldr	r3, [pc, #64]	; (27af4 <lte_lc_system_mode_get+0x100>)
   27ab4:	7822      	ldrb	r2, [r4, #0]
   27ab6:	7819      	ldrb	r1, [r3, #0]
   27ab8:	4291      	cmp	r1, r2
   27aba:	d000      	beq.n	27abe <lte_lc_system_mode_get+0xca>
		mode_pref_current = *preference;
   27abc:	701a      	strb	r2, [r3, #0]
	return 0;
   27abe:	2000      	movs	r0, #0
   27ac0:	e7ec      	b.n	27a9c <lte_lc_system_mode_get+0xa8>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   27ac2:	2301      	movs	r3, #1
   27ac4:	e7ed      	b.n	27aa2 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   27ac6:	2302      	movs	r3, #2
   27ac8:	e7eb      	b.n	27aa2 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   27aca:	2303      	movs	r3, #3
   27acc:	e7e9      	b.n	27aa2 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   27ace:	2304      	movs	r3, #4
   27ad0:	e7e7      	b.n	27aa2 <lte_lc_system_mode_get+0xae>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   27ad2:	2145      	movs	r1, #69	; 0x45
   27ad4:	4808      	ldr	r0, [pc, #32]	; (27af8 <lte_lc_system_mode_get+0x104>)
   27ad6:	e7a2      	b.n	27a1e <lte_lc_system_mode_get+0x2a>
		return -EINVAL;
   27ad8:	f06f 0015 	mvn.w	r0, #21
   27adc:	e7de      	b.n	27a9c <lte_lc_system_mode_get+0xa8>
   27ade:	bf00      	nop
   27ae0:	000460bd 	.word	0x000460bd
   27ae4:	000460d8 	.word	0x000460d8
   27ae8:	000460e8 	.word	0x000460e8
   27aec:	00046112 	.word	0x00046112
   27af0:	2001b71c 	.word	0x2001b71c
   27af4:	2001b678 	.word	0x2001b678
   27af8:	00046143 	.word	0x00046143

00027afc <init_and_config>:
{
   27afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   27afe:	4d1b      	ldr	r5, [pc, #108]	; (27b6c <init_and_config+0x70>)
   27b00:	7829      	ldrb	r1, [r5, #0]
   27b02:	bb81      	cbnz	r1, 27b66 <init_and_config+0x6a>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   27b04:	4e1a      	ldr	r6, [pc, #104]	; (27b70 <init_and_config+0x74>)
   27b06:	4f1b      	ldr	r7, [pc, #108]	; (27b74 <init_and_config+0x78>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   27b08:	2201      	movs	r2, #1
   27b0a:	481b      	ldr	r0, [pc, #108]	; (27b78 <init_and_config+0x7c>)
   27b0c:	f019 fdfc 	bl	41708 <z_impl_k_sem_init>
   27b10:	4631      	mov	r1, r6
   27b12:	4638      	mov	r0, r7
   27b14:	f7ff ff6e 	bl	279f4 <lte_lc_system_mode_get>
	if (err) {
   27b18:	4604      	mov	r4, r0
   27b1a:	b130      	cbz	r0, 27b2a <init_and_config+0x2e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   27b1c:	2145      	movs	r1, #69	; 0x45
   27b1e:	4602      	mov	r2, r0
   27b20:	4816      	ldr	r0, [pc, #88]	; (27b7c <init_and_config+0x80>)
			LOG_ERR("Could not set system mode, error: %d", err);
   27b22:	f015 fb6a 	bl	3d1fa <z_log_minimal_printk>
}
   27b26:	4620      	mov	r0, r4
   27b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   27b2a:	4b15      	ldr	r3, [pc, #84]	; (27b80 <init_and_config+0x84>)
   27b2c:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   27b2e:	4b15      	ldr	r3, [pc, #84]	; (27b84 <init_and_config+0x88>)
   27b30:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   27b32:	783b      	ldrb	r3, [r7, #0]
   27b34:	4283      	cmp	r3, r0
   27b36:	d102      	bne.n	27b3e <init_and_config+0x42>
   27b38:	7833      	ldrb	r3, [r6, #0]
   27b3a:	428b      	cmp	r3, r1
   27b3c:	d007      	beq.n	27b4e <init_and_config+0x52>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   27b3e:	f7ff ff17 	bl	27970 <lte_lc_system_mode_set>
		if (err) {
   27b42:	4604      	mov	r4, r0
   27b44:	b118      	cbz	r0, 27b4e <init_and_config+0x52>
			LOG_ERR("Could not set system mode, error: %d", err);
   27b46:	4602      	mov	r2, r0
   27b48:	2145      	movs	r1, #69	; 0x45
   27b4a:	480f      	ldr	r0, [pc, #60]	; (27b88 <init_and_config+0x8c>)
   27b4c:	e7e9      	b.n	27b22 <init_and_config+0x26>
	err = enable_notifications();
   27b4e:	f7ff fd71 	bl	27634 <enable_notifications>
	if (err) {
   27b52:	4604      	mov	r4, r0
   27b54:	b120      	cbz	r0, 27b60 <init_and_config+0x64>
		LOG_ERR("Failed to enable notifications");
   27b56:	2145      	movs	r1, #69	; 0x45
   27b58:	480c      	ldr	r0, [pc, #48]	; (27b8c <init_and_config+0x90>)
   27b5a:	f015 fb4e 	bl	3d1fa <z_log_minimal_printk>
		return err;
   27b5e:	e7e2      	b.n	27b26 <init_and_config+0x2a>
	is_initialized = true;
   27b60:	2301      	movs	r3, #1
   27b62:	702b      	strb	r3, [r5, #0]
	return 0;
   27b64:	e7df      	b.n	27b26 <init_and_config+0x2a>
		return 0;
   27b66:	2400      	movs	r4, #0
   27b68:	e7dd      	b.n	27b26 <init_and_config+0x2a>
   27b6a:	bf00      	nop
   27b6c:	2001b677 	.word	0x2001b677
   27b70:	2001b678 	.word	0x2001b678
   27b74:	2001b71c 	.word	0x2001b71c
   27b78:	20019408 	.word	0x20019408
   27b7c:	00046167 	.word	0x00046167
   27b80:	20014c44 	.word	0x20014c44
   27b84:	2001b679 	.word	0x2001b679
   27b88:	00046199 	.word	0x00046199
   27b8c:	000461c3 	.word	0x000461c3

00027b90 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   27b90:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   27b92:	4604      	mov	r4, r0
   27b94:	b1a8      	cbz	r0, 27bc2 <lte_lc_func_mode_get+0x32>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   27b96:	f10d 0206 	add.w	r2, sp, #6
   27b9a:	490b      	ldr	r1, [pc, #44]	; (27bc8 <lte_lc_func_mode_get+0x38>)
   27b9c:	480b      	ldr	r0, [pc, #44]	; (27bcc <lte_lc_func_mode_get+0x3c>)
   27b9e:	f00d fde1 	bl	35764 <nrf_modem_at_scanf>
	if (err != 1) {
   27ba2:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   27ba4:	4602      	mov	r2, r0
	if (err != 1) {
   27ba6:	d007      	beq.n	27bb8 <lte_lc_func_mode_get+0x28>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   27ba8:	4809      	ldr	r0, [pc, #36]	; (27bd0 <lte_lc_func_mode_get+0x40>)
   27baa:	2145      	movs	r1, #69	; 0x45
   27bac:	f015 fb25 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   27bb0:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   27bb4:	b002      	add	sp, #8
   27bb6:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   27bb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   27bbc:	2000      	movs	r0, #0
	*mode = mode_tmp;
   27bbe:	7023      	strb	r3, [r4, #0]
	return 0;
   27bc0:	e7f8      	b.n	27bb4 <lte_lc_func_mode_get+0x24>
		return -EINVAL;
   27bc2:	f06f 0015 	mvn.w	r0, #21
   27bc6:	e7f5      	b.n	27bb4 <lte_lc_func_mode_get+0x24>
   27bc8:	000461e7 	.word	0x000461e7
   27bcc:	000461f2 	.word	0x000461f2
   27bd0:	000461fb 	.word	0x000461fb

00027bd4 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   27bd4:	2804      	cmp	r0, #4
{
   27bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27bda:	4604      	mov	r4, r0
	switch (mode) {
   27bdc:	d819      	bhi.n	27c12 <lte_lc_func_mode_set+0x3e>
   27bde:	2804      	cmp	r0, #4
   27be0:	d81c      	bhi.n	27c1c <lte_lc_func_mode_set+0x48>
   27be2:	e8df f000 	tbb	[pc, r0]
   27be6:	0b25      	.short	0x0b25
   27be8:	1b25      	.short	0x1b25
   27bea:	25          	.byte	0x25
   27beb:	00          	.byte	0x00
   27bec:	2201      	movs	r2, #1
   27bee:	fa02 f303 	lsl.w	r3, r2, r3
   27bf2:	4a1f      	ldr	r2, [pc, #124]	; (27c70 <lte_lc_func_mode_set+0x9c>)
   27bf4:	4213      	tst	r3, r2
   27bf6:	d11b      	bne.n	27c30 <lte_lc_func_mode_set+0x5c>
   27bf8:	079b      	lsls	r3, r3, #30
   27bfa:	d50f      	bpl.n	27c1c <lte_lc_func_mode_set+0x48>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   27bfc:	f7ff fd1a 	bl	27634 <enable_notifications>
		if (err) {
   27c00:	4602      	mov	r2, r0
   27c02:	b1a8      	cbz	r0, 27c30 <lte_lc_func_mode_set+0x5c>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   27c04:	2145      	movs	r1, #69	; 0x45
   27c06:	481b      	ldr	r0, [pc, #108]	; (27c74 <lte_lc_func_mode_set+0xa0>)
   27c08:	f015 faf7 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
	if (err) {
		return -EFAULT;
   27c0c:	f06f 050d 	mvn.w	r5, #13
   27c10:	e00b      	b.n	27c2a <lte_lc_func_mode_set+0x56>
	switch (mode) {
   27c12:	f1a0 0314 	sub.w	r3, r0, #20
   27c16:	b2db      	uxtb	r3, r3
   27c18:	2b18      	cmp	r3, #24
   27c1a:	d9e7      	bls.n	27bec <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   27c1c:	4622      	mov	r2, r4
   27c1e:	2145      	movs	r1, #69	; 0x45
   27c20:	4815      	ldr	r0, [pc, #84]	; (27c78 <lte_lc_func_mode_set+0xa4>)
   27c22:	f015 faea 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   27c26:	f06f 0515 	mvn.w	r5, #21
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   27c2a:	4628      	mov	r0, r5
   27c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   27c30:	4621      	mov	r1, r4
   27c32:	4812      	ldr	r0, [pc, #72]	; (27c7c <lte_lc_func_mode_set+0xa8>)
   27c34:	f00d fd04 	bl	35640 <nrf_modem_at_printf>
	if (err) {
   27c38:	4605      	mov	r5, r0
   27c3a:	2800      	cmp	r0, #0
   27c3c:	d1e6      	bne.n	27c0c <lte_lc_func_mode_set+0x38>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   27c3e:	4e10      	ldr	r6, [pc, #64]	; (27c80 <lte_lc_func_mode_set+0xac>)
   27c40:	4f10      	ldr	r7, [pc, #64]	; (27c84 <lte_lc_func_mode_set+0xb0>)
   27c42:	f8df 8048 	ldr.w	r8, [pc, #72]	; 27c8c <lte_lc_func_mode_set+0xb8>
   27c46:	42be      	cmp	r6, r7
   27c48:	d90a      	bls.n	27c60 <lte_lc_func_mode_set+0x8c>
   27c4a:	4641      	mov	r1, r8
   27c4c:	480e      	ldr	r0, [pc, #56]	; (27c88 <lte_lc_func_mode_set+0xb4>)
   27c4e:	f240 5229 	movw	r2, #1321	; 0x529
   27c52:	f015 fa98 	bl	3d186 <assert_print>
   27c56:	f240 5129 	movw	r1, #1321	; 0x529
   27c5a:	4640      	mov	r0, r8
   27c5c:	f015 fa8c 	bl	3d178 <assert_post_action>
   27c60:	42be      	cmp	r6, r7
   27c62:	d2e2      	bcs.n	27c2a <lte_lc_func_mode_set+0x56>
		e->callback(mode, e->context);
   27c64:	e9d6 3100 	ldrd	r3, r1, [r6]
   27c68:	4620      	mov	r0, r4
   27c6a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   27c6c:	3608      	adds	r6, #8
   27c6e:	e7ea      	b.n	27c46 <lte_lc_func_mode_set+0x72>
   27c70:	01300c01 	.word	0x01300c01
   27c74:	0004623b 	.word	0x0004623b
   27c78:	0004626a 	.word	0x0004626a
   27c7c:	0004628b 	.word	0x0004628b
   27c80:	0004c934 	.word	0x0004c934
   27c84:	0004c934 	.word	0x0004c934
   27c88:	0004494f 	.word	0x0004494f
   27c8c:	00045ba5 	.word	0x00045ba5

00027c90 <connect_lte>:
	if (!is_initialized) {
   27c90:	4b3e      	ldr	r3, [pc, #248]	; (27d8c <connect_lte+0xfc>)
{
   27c92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   27c96:	781b      	ldrb	r3, [r3, #0]
{
   27c98:	4605      	mov	r5, r0
	if (!is_initialized) {
   27c9a:	b943      	cbnz	r3, 27cae <connect_lte+0x1e>
		LOG_ERR("The LTE link controller is not initialized");
   27c9c:	483c      	ldr	r0, [pc, #240]	; (27d90 <connect_lte+0x100>)
   27c9e:	2145      	movs	r1, #69	; 0x45
   27ca0:	f015 faab 	bl	3d1fa <z_log_minimal_printk>
		return -EPERM;
   27ca4:	f04f 30ff 	mov.w	r0, #4294967295
}
   27ca8:	b002      	add	sp, #8
   27caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27cae:	2601      	movs	r6, #1
   27cb0:	4c38      	ldr	r4, [pc, #224]	; (27d94 <connect_lte+0x104>)
   27cb2:	e8d4 3fef 	ldaex	r3, [r4]
   27cb6:	e8c4 6fe2 	stlex	r2, r6, [r4]
   27cba:	2a00      	cmp	r2, #0
   27cbc:	d1f9      	bne.n	27cb2 <connect_lte+0x22>
	if (atomic_set(&in_progress, 1)) {
   27cbe:	2b00      	cmp	r3, #0
   27cc0:	d160      	bne.n	27d84 <connect_lte+0xf4>
	err = lte_lc_nw_reg_status_get(&reg_status);
   27cc2:	f10d 0007 	add.w	r0, sp, #7
   27cc6:	f7ff fe2f 	bl	27928 <lte_lc_nw_reg_status_get>
	if (err) {
   27cca:	b130      	cbz	r0, 27cda <connect_lte+0x4a>
		LOG_ERR("Failed to get current registration status");
   27ccc:	4832      	ldr	r0, [pc, #200]	; (27d98 <connect_lte+0x108>)
   27cce:	2145      	movs	r1, #69	; 0x45
   27cd0:	f015 fa93 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   27cd4:	f06f 000d 	mvn.w	r0, #13
   27cd8:	e7e6      	b.n	27ca8 <connect_lte+0x18>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   27cda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27cde:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   27ce2:	2b01      	cmp	r3, #1
   27ce4:	d0e0      	beq.n	27ca8 <connect_lte+0x18>
	if (blocking) {
   27ce6:	b125      	cbz	r5, 27cf2 <connect_lte+0x62>
   27ce8:	4601      	mov	r1, r0
   27cea:	4632      	mov	r2, r6
   27cec:	482b      	ldr	r0, [pc, #172]	; (27d9c <connect_lte+0x10c>)
   27cee:	f019 fd0b 	bl	41708 <z_impl_k_sem_init>
{
   27cf2:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   27cf4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 27dac <connect_lte+0x11c>
   27cf8:	4e29      	ldr	r6, [pc, #164]	; (27da0 <connect_lte+0x110>)
		err = lte_lc_func_mode_get(&current_func_mode);
   27cfa:	f10d 0006 	add.w	r0, sp, #6
   27cfe:	f7ff ff47 	bl	27b90 <lte_lc_func_mode_get>
		if (err) {
   27d02:	b9b8      	cbnz	r0, 27d34 <connect_lte+0xa4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   27d04:	f89d 3006 	ldrb.w	r3, [sp, #6]
   27d08:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   27d0c:	d00b      	beq.n	27d26 <connect_lte+0x96>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   27d0e:	2001      	movs	r0, #1
   27d10:	f7ff ff60 	bl	27bd4 <lte_lc_func_mode_set>
		if (err || !blocking) {
   27d14:	b188      	cbz	r0, 27d3a <connect_lte+0xaa>
   27d16:	2300      	movs	r3, #0
   27d18:	e8d4 2fef 	ldaex	r2, [r4]
   27d1c:	e8c4 3fe1 	stlex	r1, r3, [r4]
   27d20:	2900      	cmp	r1, #0
   27d22:	d0c1      	beq.n	27ca8 <connect_lte+0x18>
   27d24:	e7f8      	b.n	27d18 <connect_lte+0x88>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   27d26:	f898 1000 	ldrb.w	r1, [r8]
   27d2a:	7830      	ldrb	r0, [r6, #0]
   27d2c:	f7ff fe20 	bl	27970 <lte_lc_system_mode_set>
			if (err) {
   27d30:	2800      	cmp	r0, #0
   27d32:	d0ec      	beq.n	27d0e <connect_lte+0x7e>
			err = -EFAULT;
   27d34:	f06f 000d 	mvn.w	r0, #13
   27d38:	e7ed      	b.n	27d16 <connect_lte+0x86>
		if (err || !blocking) {
   27d3a:	2d00      	cmp	r5, #0
   27d3c:	d0eb      	beq.n	27d16 <connect_lte+0x86>
	return z_impl_k_sem_take(sem, timeout);
   27d3e:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   27d42:	2300      	movs	r3, #0
   27d44:	4815      	ldr	r0, [pc, #84]	; (27d9c <connect_lte+0x10c>)
   27d46:	f00f fb5f 	bl	37408 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   27d4a:	f110 0f0b 	cmn.w	r0, #11
   27d4e:	d1e2      	bne.n	27d16 <connect_lte+0x86>
			LOG_INF("Network connection attempt timed out");
   27d50:	2149      	movs	r1, #73	; 0x49
   27d52:	4814      	ldr	r0, [pc, #80]	; (27da4 <connect_lte+0x114>)
   27d54:	f015 fa51 	bl	3d1fa <z_log_minimal_printk>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   27d58:	2f01      	cmp	r7, #1
   27d5a:	d010      	beq.n	27d7e <connect_lte+0xee>
				if (sys_mode_target == sys_mode_preferred) {
   27d5c:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   27d5e:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   27d60:	2b04      	cmp	r3, #4
   27d62:	bf0c      	ite	eq
   27d64:	2305      	moveq	r3, #5
   27d66:	2304      	movne	r3, #4
   27d68:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   27d6a:	f7ff ff33 	bl	27bd4 <lte_lc_func_mode_set>
				if (err) {
   27d6e:	2800      	cmp	r0, #0
   27d70:	d1e0      	bne.n	27d34 <connect_lte+0xa4>
				LOG_INF("Using fallback network mode");
   27d72:	2149      	movs	r1, #73	; 0x49
   27d74:	480c      	ldr	r0, [pc, #48]	; (27da8 <connect_lte+0x118>)
   27d76:	f015 fa40 	bl	3d1fa <z_log_minimal_printk>
   27d7a:	2701      	movs	r7, #1
   27d7c:	e7bd      	b.n	27cfa <connect_lte+0x6a>
				err = -ETIMEDOUT;
   27d7e:	f06f 0073 	mvn.w	r0, #115	; 0x73
   27d82:	e7c8      	b.n	27d16 <connect_lte+0x86>
		return -EINPROGRESS;
   27d84:	f06f 0076 	mvn.w	r0, #118	; 0x76
   27d88:	e78e      	b.n	27ca8 <connect_lte+0x18>
   27d8a:	bf00      	nop
   27d8c:	2001b677 	.word	0x2001b677
   27d90:	00046296 	.word	0x00046296
   27d94:	20019404 	.word	0x20019404
   27d98:	000462c6 	.word	0x000462c6
   27d9c:	20019408 	.word	0x20019408
   27da0:	20014c44 	.word	0x20014c44
   27da4:	000462f5 	.word	0x000462f5
   27da8:	0004631f 	.word	0x0004631f
   27dac:	2001b678 	.word	0x2001b678

00027db0 <lte_lc_connect_async>:
{
   27db0:	b508      	push	{r3, lr}
	if (handler) {
   27db2:	b130      	cbz	r0, 27dc2 <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   27db4:	f000 f872 	bl	27e9c <event_handler_list_append_handler>
}
   27db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   27dbc:	2000      	movs	r0, #0
   27dbe:	f7ff bf67 	b.w	27c90 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   27dc2:	f000 f863 	bl	27e8c <event_handler_list_is_empty>
   27dc6:	2800      	cmp	r0, #0
   27dc8:	d0f6      	beq.n	27db8 <lte_lc_connect_async+0x8>
		LOG_ERR("No handler registered");
   27dca:	2145      	movs	r1, #69	; 0x45
   27dcc:	4802      	ldr	r0, [pc, #8]	; (27dd8 <lte_lc_connect_async+0x28>)
   27dce:	f015 fa14 	bl	3d1fa <z_log_minimal_printk>
}
   27dd2:	f06f 0015 	mvn.w	r0, #21
   27dd6:	bd08      	pop	{r3, pc}
   27dd8:	00046340 	.word	0x00046340

00027ddc <lte_lc_deinit>:
{
   27ddc:	b508      	push	{r3, lr}
	if (is_initialized) {
   27dde:	4b06      	ldr	r3, [pc, #24]	; (27df8 <lte_lc_deinit+0x1c>)
   27de0:	781a      	ldrb	r2, [r3, #0]
   27de2:	b122      	cbz	r2, 27dee <lte_lc_deinit+0x12>
		is_initialized = false;
   27de4:	2000      	movs	r0, #0
   27de6:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   27de8:	f7ff fef4 	bl	27bd4 <lte_lc_func_mode_set>
   27dec:	b908      	cbnz	r0, 27df2 <lte_lc_deinit+0x16>
   27dee:	2000      	movs	r0, #0
}
   27df0:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   27df2:	f06f 000d 	mvn.w	r0, #13
   27df6:	e7fb      	b.n	27df0 <lte_lc_deinit+0x14>
   27df8:	2001b677 	.word	0x2001b677

00027dfc <lte_lc_neighbor_cell_measurement>:
	 * the type of search.
	 * If the type is LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT, we therefore use the AT
	 * command without parameters to avoid error messages for older firmware version.
	 */

	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   27dfc:	2801      	cmp	r0, #1
{
   27dfe:	b508      	push	{r3, lr}
	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   27e00:	d107      	bne.n	27e12 <lte_lc_neighbor_cell_measurement+0x16>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=1");
   27e02:	4806      	ldr	r0, [pc, #24]	; (27e1c <lte_lc_neighbor_cell_measurement+0x20>)
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
	} else {
		/* Defaulting to use LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT */
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   27e04:	f00d fc1c 	bl	35640 <nrf_modem_at_printf>
	}

	return err ? -EFAULT : 0;
   27e08:	2800      	cmp	r0, #0
}
   27e0a:	bf18      	it	ne
   27e0c:	f06f 000d 	mvnne.w	r0, #13
   27e10:	bd08      	pop	{r3, pc}
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   27e12:	2802      	cmp	r0, #2
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
   27e14:	bf0c      	ite	eq
   27e16:	4802      	ldreq	r0, [pc, #8]	; (27e20 <lte_lc_neighbor_cell_measurement+0x24>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   27e18:	4802      	ldrne	r0, [pc, #8]	; (27e24 <lte_lc_neighbor_cell_measurement+0x28>)
   27e1a:	e7f3      	b.n	27e04 <lte_lc_neighbor_cell_measurement+0x8>
   27e1c:	0004635b 	.word	0x0004635b
   27e20:	0004636b 	.word	0x0004636b
   27e24:	0004637b 	.word	0x0004637b

00027e28 <lte_lc_neighbor_cell_measurement_cancel>:

int lte_lc_neighbor_cell_measurement_cancel(void)
{
   27e28:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_NCELLMEAS_STOP) ? -EFAULT : 0;
   27e2a:	4804      	ldr	r0, [pc, #16]	; (27e3c <lte_lc_neighbor_cell_measurement_cancel+0x14>)
   27e2c:	f00d fc08 	bl	35640 <nrf_modem_at_printf>
   27e30:	2800      	cmp	r0, #0
}
   27e32:	bf18      	it	ne
   27e34:	f06f 000d 	mvnne.w	r0, #13
   27e38:	bd08      	pop	{r3, pc}
   27e3a:	bf00      	nop
   27e3c:	00046389 	.word	0x00046389

00027e40 <lte_lc_modem_events_enable>:

	return 0;
}

int lte_lc_modem_events_enable(void)
{
   27e40:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_MDMEV_ENABLE) ? -EFAULT : 0;
   27e42:	4804      	ldr	r0, [pc, #16]	; (27e54 <lte_lc_modem_events_enable+0x14>)
   27e44:	f00d fbfc 	bl	35640 <nrf_modem_at_printf>
   27e48:	2800      	cmp	r0, #0
}
   27e4a:	bf18      	it	ne
   27e4c:	f06f 000d 	mvnne.w	r0, #13
   27e50:	bd08      	pop	{r3, pc}
   27e52:	bf00      	nop
   27e54:	0004639b 	.word	0x0004639b

00027e58 <event_handler_list_find_node>:
	return list->head;
   27e58:	4b08      	ldr	r3, [pc, #32]	; (27e7c <event_handler_list_find_node+0x24>)
{
   27e5a:	4602      	mov	r2, r0
   27e5c:	6818      	ldr	r0, [r3, #0]
   27e5e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   27e60:	b120      	cbz	r0, 27e6c <event_handler_list_find_node+0x14>
   27e62:	2400      	movs	r4, #0
		if (curr->handler == handler) {
   27e64:	6843      	ldr	r3, [r0, #4]
   27e66:	428b      	cmp	r3, r1
   27e68:	d101      	bne.n	27e6e <event_handler_list_find_node+0x16>
			*prev_out = prev;
   27e6a:	6014      	str	r4, [r2, #0]
}
   27e6c:	bd10      	pop	{r4, pc}
	return node->next;
   27e6e:	6803      	ldr	r3, [r0, #0]
   27e70:	4604      	mov	r4, r0
   27e72:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   27e74:	2b00      	cmp	r3, #0
   27e76:	d1f5      	bne.n	27e64 <event_handler_list_find_node+0xc>
   27e78:	e7f8      	b.n	27e6c <event_handler_list_find_node+0x14>
   27e7a:	bf00      	nop
   27e7c:	20019428 	.word	0x20019428

00027e80 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27e80:	4801      	ldr	r0, [pc, #4]	; (27e88 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   27e82:	f00f b905 	b.w	37090 <z_impl_k_mutex_unlock>
   27e86:	bf00      	nop
   27e88:	20014f40 	.word	0x20014f40

00027e8c <event_handler_list_is_empty>:
	return list->head;
   27e8c:	4b02      	ldr	r3, [pc, #8]	; (27e98 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   27e8e:	6818      	ldr	r0, [r3, #0]
}
   27e90:	fab0 f080 	clz	r0, r0
   27e94:	0940      	lsrs	r0, r0, #5
   27e96:	4770      	bx	lr
   27e98:	20019428 	.word	0x20019428

00027e9c <event_handler_list_append_handler>:
{
   27e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27e9e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   27ea0:	f04f 32ff 	mov.w	r2, #4294967295
   27ea4:	f04f 33ff 	mov.w	r3, #4294967295
   27ea8:	4812      	ldr	r0, [pc, #72]	; (27ef4 <event_handler_list_append_handler+0x58>)
   27eaa:	f00f f81f 	bl	36eec <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   27eae:	4629      	mov	r1, r5
   27eb0:	a801      	add	r0, sp, #4
   27eb2:	f7ff ffd1 	bl	27e58 <event_handler_list_find_node>
   27eb6:	4604      	mov	r4, r0
   27eb8:	b120      	cbz	r0, 27ec4 <event_handler_list_append_handler+0x28>
		k_mutex_unlock(&list_mtx);
   27eba:	f7ff ffe1 	bl	27e80 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   27ebe:	2000      	movs	r0, #0
}
   27ec0:	b003      	add	sp, #12
   27ec2:	bd30      	pop	{r4, r5, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   27ec4:	2008      	movs	r0, #8
   27ec6:	f019 fda1 	bl	41a0c <k_malloc>
   27eca:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   27ecc:	b920      	cbnz	r0, 27ed8 <event_handler_list_append_handler+0x3c>
		k_mutex_unlock(&list_mtx);
   27ece:	f7ff ffd7 	bl	27e80 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   27ed2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27ed6:	e7f3      	b.n	27ec0 <event_handler_list_append_handler+0x24>
	return list->tail;
   27ed8:	4a07      	ldr	r2, [pc, #28]	; (27ef8 <event_handler_list_append_handler+0x5c>)
   27eda:	6004      	str	r4, [r0, #0]
   27edc:	6044      	str	r4, [r0, #4]
	to_ins->handler = handler;
   27ede:	9b01      	ldr	r3, [sp, #4]
   27ee0:	6851      	ldr	r1, [r2, #4]
	parent->next = child;
   27ee2:	e9c3 4500 	strd	r4, r5, [r3]
Z_GENLIST_APPEND(slist, snode)
   27ee6:	b911      	cbnz	r1, 27eee <event_handler_list_append_handler+0x52>
	list->head = node;
   27ee8:	e9c2 3300 	strd	r3, r3, [r2]
}
   27eec:	e7e5      	b.n	27eba <event_handler_list_append_handler+0x1e>
	parent->next = child;
   27eee:	600b      	str	r3, [r1, #0]
	list->tail = node;
   27ef0:	6053      	str	r3, [r2, #4]
}
   27ef2:	e7e2      	b.n	27eba <event_handler_list_append_handler+0x1e>
   27ef4:	20014f40 	.word	0x20014f40
   27ef8:	20019428 	.word	0x20019428

00027efc <event_handler_list_dispatch>:
{
   27efc:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   27efe:	4c0d      	ldr	r4, [pc, #52]	; (27f34 <event_handler_list_dispatch+0x38>)
   27f00:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   27f02:	6823      	ldr	r3, [r4, #0]
   27f04:	b1ab      	cbz	r3, 27f32 <event_handler_list_dispatch+0x36>
   27f06:	f04f 33ff 	mov.w	r3, #4294967295
   27f0a:	f04f 32ff 	mov.w	r2, #4294967295
   27f0e:	480a      	ldr	r0, [pc, #40]	; (27f38 <event_handler_list_dispatch+0x3c>)
   27f10:	f00e ffec 	bl	36eec <z_impl_k_mutex_lock>
   27f14:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27f16:	b91b      	cbnz	r3, 27f20 <event_handler_list_dispatch+0x24>
}
   27f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   27f1c:	f7ff bfb0 	b.w	27e80 <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
   27f20:	681c      	ldr	r4, [r3, #0]
		curr->handler(evt);
   27f22:	4628      	mov	r0, r5
   27f24:	685b      	ldr	r3, [r3, #4]
   27f26:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27f28:	2c00      	cmp	r4, #0
   27f2a:	d0f5      	beq.n	27f18 <event_handler_list_dispatch+0x1c>
   27f2c:	4623      	mov	r3, r4
   27f2e:	6824      	ldr	r4, [r4, #0]
   27f30:	e7f7      	b.n	27f22 <event_handler_list_dispatch+0x26>
}
   27f32:	bd38      	pop	{r3, r4, r5, pc}
   27f34:	20019428 	.word	0x20019428
   27f38:	20014f40 	.word	0x20014f40

00027f3c <response_is_valid>:
{
   27f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27f3e:	460d      	mov	r5, r1
	if ((response == NULL) || (check == NULL)) {
   27f40:	4604      	mov	r4, r0
   27f42:	b100      	cbz	r0, 27f46 <response_is_valid+0xa>
   27f44:	b92a      	cbnz	r2, 27f52 <response_is_valid+0x16>
		LOG_ERR("Invalid pointer provided");
   27f46:	2145      	movs	r1, #69	; 0x45
   27f48:	480a      	ldr	r0, [pc, #40]	; (27f74 <response_is_valid+0x38>)
   27f4a:	f015 f956 	bl	3d1fa <z_log_minimal_printk>
		return false;
   27f4e:	2000      	movs	r0, #0
   27f50:	e00d      	b.n	27f6e <response_is_valid+0x32>
	if ((response_len < strlen(check)) ||
   27f52:	4610      	mov	r0, r2
   27f54:	9201      	str	r2, [sp, #4]
   27f56:	f7f5 f974 	bl	1d242 <strlen>
   27f5a:	4285      	cmp	r5, r0
   27f5c:	d3f7      	bcc.n	27f4e <response_is_valid+0x12>
	    (memcmp(response, check, response_len) != 0)) {
   27f5e:	462a      	mov	r2, r5
   27f60:	4620      	mov	r0, r4
   27f62:	9901      	ldr	r1, [sp, #4]
   27f64:	f019 fdcc 	bl	41b00 <memcmp>
	if ((response_len < strlen(check)) ||
   27f68:	fab0 f080 	clz	r0, r0
   27f6c:	0940      	lsrs	r0, r0, #5
}
   27f6e:	b003      	add	sp, #12
   27f70:	bd30      	pop	{r4, r5, pc}
   27f72:	bf00      	nop
   27f74:	00046420 	.word	0x00046420

00027f78 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   27f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   27f7c:	f04f 0800 	mov.w	r8, #0
{
   27f80:	4607      	mov	r7, r0
   27f82:	460e      	mov	r6, r1
   27f84:	4614      	mov	r4, r2
   27f86:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   27f88:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27f8c:	f7f5 f959 	bl	1d242 <strlen>
   27f90:	2808      	cmp	r0, #8
   27f92:	d004      	beq.n	27f9e <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   27f94:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   27f98:	b003      	add	sp, #12
   27f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27f9e:	4630      	mov	r0, r6
   27fa0:	f7f5 f94f 	bl	1d242 <strlen>
   27fa4:	2808      	cmp	r0, #8
   27fa6:	d1f5      	bne.n	27f94 <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   27fa8:	8832      	ldrh	r2, [r6, #0]
   27faa:	78b3      	ldrb	r3, [r6, #2]
   27fac:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   27fb0:	4641      	mov	r1, r8
   27fb2:	2202      	movs	r2, #2
   27fb4:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   27fb6:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   27fba:	f013 f889 	bl	3b0d0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   27fbe:	2807      	cmp	r0, #7
   27fc0:	d904      	bls.n	27fcc <parse_psm+0x54>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   27fc2:	2145      	movs	r1, #69	; 0x45
   27fc4:	482d      	ldr	r0, [pc, #180]	; (2807c <parse_psm+0x104>)
		LOG_ERR("Unable to parse active time string");
   27fc6:	f015 f918 	bl	3d1fa <z_log_minimal_printk>
   27fca:	e7e3      	b.n	27f94 <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   27fcc:	4b2c      	ldr	r3, [pc, #176]	; (28080 <parse_psm+0x108>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   27fce:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   27fd0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   27fd4:	4641      	mov	r1, r8
   27fd6:	1cf0      	adds	r0, r6, #3
   27fd8:	f013 f87a 	bl	3b0d0 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27fdc:	f1b9 0f00 	cmp.w	r9, #0
   27fe0:	d118      	bne.n	28014 <parse_psm+0x9c>
   27fe2:	f04f 33ff 	mov.w	r3, #4294967295
   27fe6:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   27fe8:	b1cc      	cbz	r4, 2801e <parse_psm+0xa6>
   27fea:	4620      	mov	r0, r4
   27fec:	f7f5 f929 	bl	1d242 <strlen>
   27ff0:	2808      	cmp	r0, #8
   27ff2:	d114      	bne.n	2801e <parse_psm+0xa6>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   27ff4:	8822      	ldrh	r2, [r4, #0]
   27ff6:	78a3      	ldrb	r3, [r4, #2]
   27ff8:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   27ffc:	2100      	movs	r1, #0
   27ffe:	2202      	movs	r2, #2
   28000:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   28002:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   28006:	f013 f863 	bl	3b0d0 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2800a:	2807      	cmp	r0, #7
   2800c:	d917      	bls.n	2803e <parse_psm+0xc6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   2800e:	2145      	movs	r1, #69	; 0x45
   28010:	481c      	ldr	r0, [pc, #112]	; (28084 <parse_psm+0x10c>)
   28012:	e7d8      	b.n	27fc6 <parse_psm+0x4e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   28014:	fb09 f000 	mul.w	r0, r9, r0
   28018:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   2801a:	3001      	adds	r0, #1
   2801c:	d0e4      	beq.n	27fe8 <parse_psm+0x70>
	memcpy(unit_str, active_time_str, unit_str_len);
   2801e:	883a      	ldrh	r2, [r7, #0]
   28020:	78bb      	ldrb	r3, [r7, #2]
   28022:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   28026:	2100      	movs	r1, #0
   28028:	2202      	movs	r2, #2
   2802a:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   2802c:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   28030:	f013 f84e 	bl	3b0d0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   28034:	2807      	cmp	r0, #7
   28036:	d911      	bls.n	2805c <parse_psm+0xe4>
		LOG_ERR("Unable to parse active time string");
   28038:	2145      	movs	r1, #69	; 0x45
   2803a:	4813      	ldr	r0, [pc, #76]	; (28088 <parse_psm+0x110>)
   2803c:	e7c3      	b.n	27fc6 <parse_psm+0x4e>
		timer_unit = t3412_lookup[lut_idx];
   2803e:	4b13      	ldr	r3, [pc, #76]	; (2808c <parse_psm+0x114>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   28040:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   28042:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   28046:	2100      	movs	r1, #0
   28048:	1ce0      	adds	r0, r4, #3
   2804a:	f013 f841 	bl	3b0d0 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2804e:	b116      	cbz	r6, 28056 <parse_psm+0xde>
   28050:	4346      	muls	r6, r0
   28052:	602e      	str	r6, [r5, #0]
   28054:	e7e3      	b.n	2801e <parse_psm+0xa6>
   28056:	f04f 36ff 	mov.w	r6, #4294967295
   2805a:	e7fa      	b.n	28052 <parse_psm+0xda>
	timer_unit = t3324_lookup[lut_idx];
   2805c:	4b0c      	ldr	r3, [pc, #48]	; (28090 <parse_psm+0x118>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   2805e:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   28060:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   28064:	2100      	movs	r1, #0
   28066:	1cf8      	adds	r0, r7, #3
   28068:	f013 f832 	bl	3b0d0 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2806c:	b11c      	cbz	r4, 28076 <parse_psm+0xfe>
   2806e:	4344      	muls	r4, r0
	return 0;
   28070:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   28072:	606c      	str	r4, [r5, #4]
	return 0;
   28074:	e790      	b.n	27f98 <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   28076:	f04f 34ff 	mov.w	r4, #4294967295
   2807a:	e7f9      	b.n	28070 <parse_psm+0xf8>
   2807c:	0004659d 	.word	0x0004659d
   28080:	0004345c 	.word	0x0004345c
   28084:	000465d7 	.word	0x000465d7
   28088:	00046608 	.word	0x00046608
   2808c:	0004343c 	.word	0x0004343c
   28090:	0004343c 	.word	0x0004343c

00028094 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   28094:	2300      	movs	r3, #0
{
   28096:	b5f0      	push	{r4, r5, r6, r7, lr}
   28098:	b085      	sub	sp, #20
   2809a:	4607      	mov	r7, r0
   2809c:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   2809e:	a802      	add	r0, sp, #8
   280a0:	2104      	movs	r1, #4
{
   280a2:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   280a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   280a8:	f017 fc01 	bl	3f8ae <at_params_list_init>
	if (err) {
   280ac:	4604      	mov	r4, r0
   280ae:	b138      	cbz	r0, 280c0 <parse_rrc_mode+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   280b0:	4602      	mov	r2, r0
   280b2:	2145      	movs	r1, #69	; 0x45
   280b4:	4817      	ldr	r0, [pc, #92]	; (28114 <parse_rrc_mode+0x80>)
   280b6:	f015 f8a0 	bl	3d1fa <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   280ba:	4620      	mov	r0, r4
   280bc:	b005      	add	sp, #20
   280be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   280c0:	4601      	mov	r1, r0
   280c2:	aa02      	add	r2, sp, #8
   280c4:	4638      	mov	r0, r7
   280c6:	f017 fbef 	bl	3f8a8 <at_parser_params_from_str>
	if (err) {
   280ca:	4604      	mov	r4, r0
   280cc:	b140      	cbz	r0, 280e0 <parse_rrc_mode+0x4c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   280ce:	2145      	movs	r1, #69	; 0x45
   280d0:	4602      	mov	r2, r0
   280d2:	4811      	ldr	r0, [pc, #68]	; (28118 <parse_rrc_mode+0x84>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   280d4:	f015 f891 	bl	3d1fa <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   280d8:	a802      	add	r0, sp, #8
   280da:	f017 fbfb 	bl	3f8d4 <at_params_list_free>
	return err;
   280de:	e7ec      	b.n	280ba <parse_rrc_mode+0x26>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   280e0:	4631      	mov	r1, r6
   280e2:	aa01      	add	r2, sp, #4
   280e4:	a802      	add	r0, sp, #8
   280e6:	f017 fcb9 	bl	3fa5c <at_params_int_get>
	if (err) {
   280ea:	4604      	mov	r4, r0
   280ec:	b118      	cbz	r0, 280f6 <parse_rrc_mode+0x62>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   280ee:	4602      	mov	r2, r0
   280f0:	2145      	movs	r1, #69	; 0x45
   280f2:	480a      	ldr	r0, [pc, #40]	; (2811c <parse_rrc_mode+0x88>)
   280f4:	e7ee      	b.n	280d4 <parse_rrc_mode+0x40>
	if (temp_mode == 0) {
   280f6:	9a01      	ldr	r2, [sp, #4]
   280f8:	b90a      	cbnz	r2, 280fe <parse_rrc_mode+0x6a>
		*mode = LTE_LC_RRC_MODE_IDLE;
   280fa:	7028      	strb	r0, [r5, #0]
   280fc:	e7ec      	b.n	280d8 <parse_rrc_mode+0x44>
	} else if (temp_mode == 1) {
   280fe:	2a01      	cmp	r2, #1
   28100:	d101      	bne.n	28106 <parse_rrc_mode+0x72>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   28102:	702a      	strb	r2, [r5, #0]
   28104:	e7e8      	b.n	280d8 <parse_rrc_mode+0x44>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   28106:	2145      	movs	r1, #69	; 0x45
   28108:	4805      	ldr	r0, [pc, #20]	; (28120 <parse_rrc_mode+0x8c>)
   2810a:	f015 f876 	bl	3d1fa <z_log_minimal_printk>
		err = -EINVAL;
   2810e:	f06f 0415 	mvn.w	r4, #21
   28112:	e7e1      	b.n	280d8 <parse_rrc_mode+0x44>
   28114:	0004643e 	.word	0x0004643e
   28118:	00046630 	.word	0x00046630
   2811c:	00046660 	.word	0x00046660
   28120:	0004668e 	.word	0x0004668e

00028124 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   28124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28128:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2812a:	2300      	movs	r3, #0
{
   2812c:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2812e:	9303      	str	r3, [sp, #12]
   28130:	f8ad 3010 	strh.w	r3, [sp, #16]
   28134:	f88d 3012 	strb.w	r3, [sp, #18]
{
   28138:	4691      	mov	r9, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   2813a:	2309      	movs	r3, #9
   2813c:	2207      	movs	r2, #7
{
   2813e:	4605      	mov	r5, r0
   28140:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   28142:	a805      	add	r0, sp, #20
   28144:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   28146:	e9cd 2300 	strd	r2, r3, [sp]
{
   2814a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2814e:	f017 fbae 	bl	3f8ae <at_params_list_init>
	if (err) {
   28152:	4604      	mov	r4, r0
   28154:	b140      	cbz	r0, 28168 <parse_cereg+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
   28156:	4602      	mov	r2, r0
   28158:	2145      	movs	r1, #69	; 0x45
   2815a:	4854      	ldr	r0, [pc, #336]	; (282ac <parse_cereg+0x188>)
   2815c:	f015 f84d 	bl	3d1fa <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   28160:	4620      	mov	r0, r4
   28162:	b00b      	add	sp, #44	; 0x2c
   28164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   28168:	4601      	mov	r1, r0
   2816a:	aa05      	add	r2, sp, #20
   2816c:	4628      	mov	r0, r5
   2816e:	f017 fb9b 	bl	3f8a8 <at_parser_params_from_str>
	if (err) {
   28172:	4604      	mov	r4, r0
   28174:	b140      	cbz	r0, 28188 <parse_cereg+0x64>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   28176:	2145      	movs	r1, #69	; 0x45
   28178:	4602      	mov	r2, r0
   2817a:	484d      	ldr	r0, [pc, #308]	; (282b0 <parse_cereg+0x18c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2817c:	f015 f83d 	bl	3d1fa <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   28180:	a805      	add	r0, sp, #20
   28182:	f017 fba7 	bl	3f8d4 <at_params_list_free>
	return err;
   28186:	e7eb      	b.n	28160 <parse_cereg+0x3c>
	err = at_params_string_get(&resp_list,
   28188:	4601      	mov	r1, r0
   2818a:	466b      	mov	r3, sp
   2818c:	aa03      	add	r2, sp, #12
   2818e:	a805      	add	r0, sp, #20
   28190:	f017 fc99 	bl	3fac6 <at_params_string_get>
	if (err) {
   28194:	4604      	mov	r4, r0
   28196:	b118      	cbz	r0, 281a0 <parse_cereg+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
   28198:	4602      	mov	r2, r0
   2819a:	2145      	movs	r1, #69	; 0x45
   2819c:	4845      	ldr	r0, [pc, #276]	; (282b4 <parse_cereg+0x190>)
   2819e:	e7ed      	b.n	2817c <parse_cereg+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   281a0:	4a45      	ldr	r2, [pc, #276]	; (282b8 <parse_cereg+0x194>)
   281a2:	9900      	ldr	r1, [sp, #0]
   281a4:	a803      	add	r0, sp, #12
   281a6:	f7ff fec9 	bl	27f3c <response_is_valid>
   281aa:	2800      	cmp	r0, #0
   281ac:	d0e8      	beq.n	28180 <parse_cereg+0x5c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   281ae:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   281b0:	bf14      	ite	ne
   281b2:	2101      	movne	r1, #1
   281b4:	2102      	moveq	r1, #2
   281b6:	aa07      	add	r2, sp, #28
   281b8:	a805      	add	r0, sp, #20
   281ba:	f017 fc4f 	bl	3fa5c <at_params_int_get>
	if (err) {
   281be:	1e05      	subs	r5, r0, #0
   281c0:	d132      	bne.n	28228 <parse_cereg+0x104>
	switch (reg_status) {
   281c2:	9d07      	ldr	r5, [sp, #28]
   281c4:	2d08      	cmp	r5, #8
   281c6:	d012      	beq.n	281ee <parse_cereg+0xca>
   281c8:	dc0f      	bgt.n	281ea <parse_cereg+0xc6>
   281ca:	2d05      	cmp	r5, #5
   281cc:	d90f      	bls.n	281ee <parse_cereg+0xca>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   281ce:	462a      	mov	r2, r5
   281d0:	2145      	movs	r1, #69	; 0x45
   281d2:	483a      	ldr	r0, [pc, #232]	; (282bc <parse_cereg+0x198>)
   281d4:	f015 f811 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   281d8:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   281dc:	462a      	mov	r2, r5
   281de:	2145      	movs	r1, #69	; 0x45
   281e0:	4837      	ldr	r0, [pc, #220]	; (282c0 <parse_cereg+0x19c>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   281e2:	f015 f80a 	bl	3d1fa <z_log_minimal_printk>
			goto clean_exit;
   281e6:	462c      	mov	r4, r5
   281e8:	e7ca      	b.n	28180 <parse_cereg+0x5c>
	switch (reg_status) {
   281ea:	2d5a      	cmp	r5, #90	; 0x5a
   281ec:	d1ef      	bne.n	281ce <parse_cereg+0xaa>
	if (reg_status) {
   281ee:	f1b9 0f00 	cmp.w	r9, #0
   281f2:	d001      	beq.n	281f8 <parse_cereg+0xd4>
		*reg_status = status;
   281f4:	f889 5000 	strb.w	r5, [r9]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   281f8:	2e00      	cmp	r6, #0
   281fa:	d03e      	beq.n	2827a <parse_cereg+0x156>
   281fc:	2d5a      	cmp	r5, #90	; 0x5a
   281fe:	d050      	beq.n	282a2 <parse_cereg+0x17e>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   28200:	a805      	add	r0, sp, #20
   28202:	f017 fc87 	bl	3fb14 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   28206:	2803      	cmp	r0, #3
   28208:	d94b      	bls.n	282a2 <parse_cereg+0x17e>
		err = at_params_string_get(
   2820a:	2f00      	cmp	r7, #0
   2820c:	bf14      	ite	ne
   2820e:	2102      	movne	r1, #2
   28210:	2103      	moveq	r1, #3
   28212:	ab01      	add	r3, sp, #4
   28214:	aa07      	add	r2, sp, #28
   28216:	a805      	add	r0, sp, #20
   28218:	f017 fc55 	bl	3fac6 <at_params_string_get>
		if (err) {
   2821c:	4605      	mov	r5, r0
   2821e:	b128      	cbz	r0, 2822c <parse_cereg+0x108>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   28220:	4602      	mov	r2, r0
   28222:	2145      	movs	r1, #69	; 0x45
   28224:	4827      	ldr	r0, [pc, #156]	; (282c4 <parse_cereg+0x1a0>)
   28226:	e7dc      	b.n	281e2 <parse_cereg+0xbe>
	if (status < 0) {
   28228:	dae1      	bge.n	281ee <parse_cereg+0xca>
   2822a:	e7d7      	b.n	281dc <parse_cereg+0xb8>
		str_buf[len] = '\0';
   2822c:	9b01      	ldr	r3, [sp, #4]
   2822e:	aa0a      	add	r2, sp, #40	; 0x28
   28230:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   28232:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   28234:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   28238:	2210      	movs	r2, #16
   2823a:	a807      	add	r0, sp, #28
   2823c:	f012 ff48 	bl	3b0d0 <strtoul>
		len = sizeof(str_buf) - 1;
   28240:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   28242:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   28244:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   28246:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   28248:	bf14      	ite	ne
   2824a:	2103      	movne	r1, #3
   2824c:	2104      	moveq	r1, #4
   2824e:	ab01      	add	r3, sp, #4
   28250:	aa07      	add	r2, sp, #28
   28252:	a805      	add	r0, sp, #20
   28254:	f017 fc37 	bl	3fac6 <at_params_string_get>
		if (err) {
   28258:	4605      	mov	r5, r0
   2825a:	b118      	cbz	r0, 28264 <parse_cereg+0x140>
			LOG_ERR("Could not get cell ID, error: %d", err);
   2825c:	4602      	mov	r2, r0
   2825e:	2145      	movs	r1, #69	; 0x45
   28260:	4819      	ldr	r0, [pc, #100]	; (282c8 <parse_cereg+0x1a4>)
   28262:	e7be      	b.n	281e2 <parse_cereg+0xbe>
		str_buf[len] = '\0';
   28264:	9b01      	ldr	r3, [sp, #4]
   28266:	aa0a      	add	r2, sp, #40	; 0x28
   28268:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   2826a:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   2826c:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   28270:	2210      	movs	r2, #16
   28272:	a807      	add	r0, sp, #28
   28274:	f012 ff2c 	bl	3b0d0 <strtoul>
   28278:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   2827a:	f1b8 0f00 	cmp.w	r8, #0
   2827e:	f43f af7f 	beq.w	28180 <parse_cereg+0x5c>
		err = at_params_int_get(&resp_list,
   28282:	2f00      	cmp	r7, #0
   28284:	bf14      	ite	ne
   28286:	2104      	movne	r1, #4
   28288:	2105      	moveq	r1, #5
   2828a:	aa02      	add	r2, sp, #8
   2828c:	a805      	add	r0, sp, #20
   2828e:	f017 fbe5 	bl	3fa5c <at_params_int_get>
		if (err) {
   28292:	b920      	cbnz	r0, 2829e <parse_cereg+0x17a>
			*lte_mode = mode;
   28294:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   28298:	f888 3000 	strb.w	r3, [r8]
   2829c:	e770      	b.n	28180 <parse_cereg+0x5c>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   2829e:	2300      	movs	r3, #0
   282a0:	e7fa      	b.n	28298 <parse_cereg+0x174>
		cell->tac = UINT32_MAX;
   282a2:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   282a6:	e9c6 3302 	strd	r3, r3, [r6, #8]
   282aa:	e7e6      	b.n	2827a <parse_cereg+0x156>
   282ac:	0004643e 	.word	0x0004643e
   282b0:	000466af 	.word	0x000466af
   282b4:	000466e1 	.word	0x000466e1
   282b8:	000463d2 	.word	0x000463d2
   282bc:	0004670f 	.word	0x0004670f
   282c0:	00045ffa 	.word	0x00045ffa
   282c4:	0004673c 	.word	0x0004673c
   282c8:	0004676d 	.word	0x0004676d

000282cc <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   282cc:	2300      	movs	r3, #0
{
   282ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   282d0:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   282d2:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   282d4:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   282d8:	b3c9      	cbz	r1, 2834e <parse_xt3412+0x82>
   282da:	b3c0      	cbz	r0, 2834e <parse_xt3412+0x82>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   282dc:	2104      	movs	r1, #4
   282de:	4668      	mov	r0, sp
   282e0:	f017 fae5 	bl	3f8ae <at_params_list_init>
	if (err) {
   282e4:	4604      	mov	r4, r0
   282e6:	b138      	cbz	r0, 282f8 <parse_xt3412+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   282e8:	4602      	mov	r2, r0
   282ea:	2145      	movs	r1, #69	; 0x45
   282ec:	4819      	ldr	r0, [pc, #100]	; (28354 <parse_xt3412+0x88>)
   282ee:	f014 ff84 	bl	3d1fa <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   282f2:	4620      	mov	r0, r4
   282f4:	b002      	add	sp, #8
   282f6:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   282f8:	4601      	mov	r1, r0
   282fa:	466a      	mov	r2, sp
   282fc:	4630      	mov	r0, r6
   282fe:	f017 fad3 	bl	3f8a8 <at_parser_params_from_str>
	if (err) {
   28302:	4604      	mov	r4, r0
   28304:	b140      	cbz	r0, 28318 <parse_xt3412+0x4c>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   28306:	2145      	movs	r1, #69	; 0x45
   28308:	4602      	mov	r2, r0
   2830a:	4813      	ldr	r0, [pc, #76]	; (28358 <parse_xt3412+0x8c>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   2830c:	f014 ff75 	bl	3d1fa <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   28310:	4668      	mov	r0, sp
   28312:	f017 fadf 	bl	3f8d4 <at_params_list_free>
	return err;
   28316:	e7ec      	b.n	282f2 <parse_xt3412+0x26>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   28318:	462a      	mov	r2, r5
   2831a:	2102      	movs	r1, #2
   2831c:	4668      	mov	r0, sp
   2831e:	f017 fbba 	bl	3fa96 <at_params_int64_get>
	if (err) {
   28322:	4604      	mov	r4, r0
   28324:	b118      	cbz	r0, 2832e <parse_xt3412+0x62>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   28326:	4602      	mov	r2, r0
   28328:	2145      	movs	r1, #69	; 0x45
   2832a:	480c      	ldr	r0, [pc, #48]	; (2835c <parse_xt3412+0x90>)
   2832c:	e7ee      	b.n	2830c <parse_xt3412+0x40>
	if ((*time > T3412_MAX) || *time < 0) {
   2832e:	490c      	ldr	r1, [pc, #48]	; (28360 <parse_xt3412+0x94>)
   28330:	e9d5 2300 	ldrd	r2, r3, [r5]
   28334:	4291      	cmp	r1, r2
   28336:	f04f 0208 	mov.w	r2, #8
   2833a:	eb72 0303 	sbcs.w	r3, r2, r3
   2833e:	d2e7      	bcs.n	28310 <parse_xt3412+0x44>
		LOG_WRN("Parsed time parameter not within valid range");
   28340:	2157      	movs	r1, #87	; 0x57
   28342:	4808      	ldr	r0, [pc, #32]	; (28364 <parse_xt3412+0x98>)
   28344:	f014 ff59 	bl	3d1fa <z_log_minimal_printk>
		err = -EINVAL;
   28348:	f06f 0415 	mvn.w	r4, #21
   2834c:	e7e0      	b.n	28310 <parse_xt3412+0x44>
		return -EINVAL;
   2834e:	f06f 0415 	mvn.w	r4, #21
   28352:	e7ce      	b.n	282f2 <parse_xt3412+0x26>
   28354:	0004643e 	.word	0x0004643e
   28358:	00046793 	.word	0x00046793
   2835c:	000467c5 	.word	0x000467c5
   28360:	5099e000 	.word	0x5099e000
   28364:	000467f7 	.word	0x000467f7

00028368 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   28368:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   2836a:	4604      	mov	r4, r0
   2836c:	b928      	cbnz	r0, 2837a <neighborcell_count_get+0x12>
		LOG_ERR("at_response is NULL, can't get cell count");
   2836e:	480b      	ldr	r0, [pc, #44]	; (2839c <neighborcell_count_get+0x34>)
   28370:	2145      	movs	r1, #69	; 0x45
   28372:	f014 ff42 	bl	3d1fa <z_log_minimal_printk>
   28376:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   28378:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   2837a:	2400      	movs	r4, #0
   2837c:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   2837e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   28382:	282c      	cmp	r0, #44	; 0x2c
   28384:	d101      	bne.n	2838a <neighborcell_count_get+0x22>
			count++;
   28386:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   28388:	e7f9      	b.n	2837e <neighborcell_count_get+0x16>
   2838a:	2800      	cmp	r0, #0
   2838c:	d1f7      	bne.n	2837e <neighborcell_count_get+0x16>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   2838e:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   28390:	bf82      	ittt	hi
   28392:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   28394:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   28396:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   2839a:	e7ed      	b.n	28378 <neighborcell_count_get+0x10>
   2839c:	00046829 	.word	0x00046829

000283a0 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   283a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   283a4:	230b      	movs	r3, #11
{
   283a6:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   283a8:	2100      	movs	r1, #0
{
   283aa:	4606      	mov	r6, r0
   283ac:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   283ae:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   283b2:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   283b4:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   283b8:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   283ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   283be:	2b2c      	cmp	r3, #44	; 0x2c
   283c0:	d101      	bne.n	283c6 <parse_ncellmeas+0x26>
			count++;
   283c2:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   283c4:	e7f9      	b.n	283ba <parse_ncellmeas+0x1a>
   283c6:	2b00      	cmp	r3, #0
   283c8:	d1f7      	bne.n	283ba <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   283ca:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   283ce:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   283d2:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   283d4:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   283d6:	a807      	add	r0, sp, #28
   283d8:	f017 fa69 	bl	3f8ae <at_params_list_init>
	if (err) {
   283dc:	4604      	mov	r4, r0
   283de:	b140      	cbz	r0, 283f2 <parse_ncellmeas+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
   283e0:	4602      	mov	r2, r0
   283e2:	2145      	movs	r1, #69	; 0x45
   283e4:	488f      	ldr	r0, [pc, #572]	; (28624 <parse_ncellmeas+0x284>)
   283e6:	f014 ff08 	bl	3d1fa <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   283ea:	4620      	mov	r0, r4
   283ec:	b00d      	add	sp, #52	; 0x34
   283ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   283f2:	4601      	mov	r1, r0
   283f4:	aa07      	add	r2, sp, #28
   283f6:	4630      	mov	r0, r6
   283f8:	f017 fa56 	bl	3f8a8 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   283fc:	4604      	mov	r4, r0
   283fe:	b150      	cbz	r0, 28416 <parse_ncellmeas+0x76>
   28400:	1dc3      	adds	r3, r0, #7
   28402:	d015      	beq.n	28430 <parse_ncellmeas+0x90>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   28404:	2145      	movs	r1, #69	; 0x45
   28406:	4602      	mov	r2, r0
   28408:	4887      	ldr	r0, [pc, #540]	; (28628 <parse_ncellmeas+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2840a:	f014 fef6 	bl	3d1fa <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   2840e:	a807      	add	r0, sp, #28
   28410:	f017 fa60 	bl	3f8d4 <at_params_list_free>
	return err;
   28414:	e7e9      	b.n	283ea <parse_ncellmeas+0x4a>
	bool incomplete = false;
   28416:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   28418:	2100      	movs	r1, #0
   2841a:	ab04      	add	r3, sp, #16
   2841c:	aa09      	add	r2, sp, #36	; 0x24
   2841e:	a807      	add	r0, sp, #28
   28420:	f017 fb51 	bl	3fac6 <at_params_string_get>
	if (err) {
   28424:	4604      	mov	r4, r0
   28426:	b128      	cbz	r0, 28434 <parse_ncellmeas+0x94>
		LOG_ERR("Could not get response prefix, error: %d", err);
   28428:	4602      	mov	r2, r0
   2842a:	2145      	movs	r1, #69	; 0x45
   2842c:	487f      	ldr	r0, [pc, #508]	; (2862c <parse_ncellmeas+0x28c>)
   2842e:	e7ec      	b.n	2840a <parse_ncellmeas+0x6a>
		incomplete = true;
   28430:	2701      	movs	r7, #1
   28432:	e7f1      	b.n	28418 <parse_ncellmeas+0x78>
	if (!response_is_valid(response_prefix, response_prefix_len,
   28434:	4a7e      	ldr	r2, [pc, #504]	; (28630 <parse_ncellmeas+0x290>)
   28436:	9904      	ldr	r1, [sp, #16]
   28438:	a809      	add	r0, sp, #36	; 0x24
   2843a:	f7ff fd7f 	bl	27f3c <response_is_valid>
   2843e:	2800      	cmp	r0, #0
   28440:	d0e5      	beq.n	2840e <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   28442:	2101      	movs	r1, #1
   28444:	aa01      	add	r2, sp, #4
   28446:	a807      	add	r0, sp, #28
   28448:	f017 fb08 	bl	3fa5c <at_params_int_get>
	if (err) {
   2844c:	4604      	mov	r4, r0
   2844e:	2800      	cmp	r0, #0
   28450:	d1dd      	bne.n	2840e <parse_ncellmeas+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   28452:	9b01      	ldr	r3, [sp, #4]
   28454:	2b00      	cmp	r3, #0
   28456:	f040 80e2 	bne.w	2861e <parse_ncellmeas+0x27e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   2845a:	2102      	movs	r1, #2
   2845c:	aa02      	add	r2, sp, #8
   2845e:	a807      	add	r0, sp, #28
   28460:	f017 fba2 	bl	3fba8 <string_param_to_int.constprop.0>
	if (err) {
   28464:	4604      	mov	r4, r0
   28466:	2800      	cmp	r0, #0
   28468:	d1d1      	bne.n	2840e <parse_ncellmeas+0x6e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   2846a:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   2846c:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   28470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   28474:	bfa4      	itt	ge
   28476:	f04f 33ff 	movge.w	r3, #4294967295
   2847a:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   2847c:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   2847e:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   28480:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   28482:	aa05      	add	r2, sp, #20
   28484:	ab03      	add	r3, sp, #12
   28486:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   28488:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   2848c:	f017 fb1b 	bl	3fac6 <at_params_string_get>
	if (err) {
   28490:	4604      	mov	r4, r0
   28492:	2800      	cmp	r0, #0
   28494:	d1bb      	bne.n	2840e <parse_ncellmeas+0x6e>
	tmp_str[len] = '\0';
   28496:	9b03      	ldr	r3, [sp, #12]
   28498:	aa0c      	add	r2, sp, #48	; 0x30
   2849a:	4413      	add	r3, r2
   2849c:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   284a0:	210a      	movs	r1, #10
   284a2:	1d2a      	adds	r2, r5, #4
   284a4:	f10d 0017 	add.w	r0, sp, #23
   284a8:	f017 fb58 	bl	3fb5c <string_to_int>
	if (err) {
   284ac:	4604      	mov	r4, r0
   284ae:	2800      	cmp	r0, #0
   284b0:	d1ad      	bne.n	2840e <parse_ncellmeas+0x6e>
	tmp_str[3] = '\0';
   284b2:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   284b6:	462a      	mov	r2, r5
   284b8:	210a      	movs	r1, #10
   284ba:	a805      	add	r0, sp, #20
   284bc:	f017 fb4e 	bl	3fb5c <string_to_int>
	if (err) {
   284c0:	4604      	mov	r4, r0
   284c2:	2800      	cmp	r0, #0
   284c4:	d1a3      	bne.n	2840e <parse_ncellmeas+0x6e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   284c6:	2104      	movs	r1, #4
   284c8:	aa02      	add	r2, sp, #8
   284ca:	a807      	add	r0, sp, #28
   284cc:	f017 fb6c 	bl	3fba8 <string_param_to_int.constprop.0>
	if (err) {
   284d0:	4604      	mov	r4, r0
   284d2:	2800      	cmp	r0, #0
   284d4:	d19b      	bne.n	2840e <parse_ncellmeas+0x6e>
	cells->current_cell.tac = tmp;
   284d6:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   284d8:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   284da:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   284dc:	aa02      	add	r2, sp, #8
   284de:	a807      	add	r0, sp, #28
   284e0:	f017 fabc 	bl	3fa5c <at_params_int_get>
	if (err) {
   284e4:	4604      	mov	r4, r0
   284e6:	2800      	cmp	r0, #0
   284e8:	d191      	bne.n	2840e <parse_ncellmeas+0x6e>
	cells->current_cell.timing_advance = tmp;
   284ea:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   284ec:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   284ee:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   284f0:	f105 0210 	add.w	r2, r5, #16
   284f4:	a807      	add	r0, sp, #28
   284f6:	f017 fab1 	bl	3fa5c <at_params_int_get>
	if (err) {
   284fa:	4604      	mov	r4, r0
   284fc:	2800      	cmp	r0, #0
   284fe:	d186      	bne.n	2840e <parse_ncellmeas+0x6e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   28500:	4641      	mov	r1, r8
   28502:	f105 0228 	add.w	r2, r5, #40	; 0x28
   28506:	a807      	add	r0, sp, #28
   28508:	f017 fa6c 	bl	3f9e4 <at_params_short_get>
	if (err) {
   2850c:	4604      	mov	r4, r0
   2850e:	2800      	cmp	r0, #0
   28510:	f47f af7d 	bne.w	2840e <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   28514:	2108      	movs	r1, #8
   28516:	aa02      	add	r2, sp, #8
   28518:	a807      	add	r0, sp, #28
   2851a:	f017 fa9f 	bl	3fa5c <at_params_int_get>
	if (err) {
   2851e:	4604      	mov	r4, r0
   28520:	2800      	cmp	r0, #0
   28522:	f47f af74 	bne.w	2840e <parse_ncellmeas+0x6e>
	cells->current_cell.rsrp = tmp;
   28526:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   28528:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   2852a:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   2852c:	aa02      	add	r2, sp, #8
   2852e:	a807      	add	r0, sp, #28
   28530:	f017 fa94 	bl	3fa5c <at_params_int_get>
	if (err) {
   28534:	4604      	mov	r4, r0
   28536:	2800      	cmp	r0, #0
   28538:	f47f af69 	bne.w	2840e <parse_ncellmeas+0x6e>
	cells->current_cell.rsrq = tmp;
   2853c:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   2853e:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   28540:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   28542:	f105 0220 	add.w	r2, r5, #32
   28546:	a807      	add	r0, sp, #28
   28548:	f017 faa5 	bl	3fa96 <at_params_int64_get>
	if (err) {
   2854c:	4604      	mov	r4, r0
   2854e:	2800      	cmp	r0, #0
   28550:	f47f af5d 	bne.w	2840e <parse_ncellmeas+0x6e>
	cells->ncells_count = neighborcell_count_get(at_response);
   28554:	4630      	mov	r0, r6
   28556:	f7ff ff07 	bl	28368 <neighborcell_count_get>
   2855a:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   2855e:	b2c6      	uxtb	r6, r0
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   28560:	a807      	add	r0, sp, #28
   28562:	f017 fad7 	bl	3fb14 <at_params_valid_count_get>
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   28566:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   2856a:	360b      	adds	r6, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   2856c:	4286      	cmp	r6, r0
   2856e:	d208      	bcs.n	28582 <parse_ncellmeas+0x1e2>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   28570:	4631      	mov	r1, r6
   28572:	f105 0218 	add.w	r2, r5, #24
   28576:	a807      	add	r0, sp, #28
   28578:	f017 fa8d 	bl	3fa96 <at_params_int64_get>
		if (err) {
   2857c:	b128      	cbz	r0, 2858a <parse_ncellmeas+0x1ea>
   2857e:	4604      	mov	r4, r0
   28580:	e745      	b.n	2840e <parse_ncellmeas+0x6e>
		cells->current_cell.timing_advance_meas_time = 0;
   28582:	2200      	movs	r2, #0
   28584:	2300      	movs	r3, #0
   28586:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   2858a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   2858e:	2b00      	cmp	r3, #0
   28590:	f43f af3d 	beq.w	2840e <parse_ncellmeas+0x6e>
   28594:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28596:	2b00      	cmp	r3, #0
   28598:	f43f af39 	beq.w	2840e <parse_ncellmeas+0x6e>
   2859c:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   2859e:	f04f 0800 	mov.w	r8, #0
   285a2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   285a6:	4598      	cmp	r8, r3
   285a8:	d304      	bcc.n	285b4 <parse_ncellmeas+0x214>
		err = -E2BIG;
   285aa:	2f00      	cmp	r7, #0
   285ac:	bf18      	it	ne
   285ae:	f06f 0406 	mvnne.w	r4, #6
   285b2:	e72c      	b.n	2840e <parse_ncellmeas+0x6e>
					&cells->neighbor_cells[i].earfcn);
   285b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   285b6:	1f31      	subs	r1, r6, #4
   285b8:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   285bc:	a807      	add	r0, sp, #28
   285be:	ea4f 1908 	mov.w	r9, r8, lsl #4
   285c2:	f017 fa4b 	bl	3fa5c <at_params_int_get>
		if (err) {
   285c6:	2800      	cmp	r0, #0
   285c8:	d1d9      	bne.n	2857e <parse_ncellmeas+0x1de>
					  &cells->neighbor_cells[i].phys_cell_id);
   285ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   285cc:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   285ce:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   285d0:	3208      	adds	r2, #8
   285d2:	a807      	add	r0, sp, #28
   285d4:	f017 fa06 	bl	3f9e4 <at_params_short_get>
		if (err) {
   285d8:	2800      	cmp	r0, #0
   285da:	d1d0      	bne.n	2857e <parse_ncellmeas+0x1de>
		err = at_params_int_get(&resp_list,
   285dc:	aa02      	add	r2, sp, #8
   285de:	1eb1      	subs	r1, r6, #2
   285e0:	a807      	add	r0, sp, #28
   285e2:	f017 fa3b 	bl	3fa5c <at_params_int_get>
		if (err) {
   285e6:	2800      	cmp	r0, #0
   285e8:	d1c9      	bne.n	2857e <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrp = tmp;
   285ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   285ec:	9a02      	ldr	r2, [sp, #8]
   285ee:	444b      	add	r3, r9
   285f0:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   285f2:	1e71      	subs	r1, r6, #1
   285f4:	aa02      	add	r2, sp, #8
   285f6:	a807      	add	r0, sp, #28
   285f8:	f017 fa30 	bl	3fa5c <at_params_int_get>
		if (err) {
   285fc:	2800      	cmp	r0, #0
   285fe:	d1be      	bne.n	2857e <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrq = tmp;
   28600:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   28602:	9b02      	ldr	r3, [sp, #8]
   28604:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   28606:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   28608:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   2860a:	a807      	add	r0, sp, #28
   2860c:	3204      	adds	r2, #4
   2860e:	f017 fa25 	bl	3fa5c <at_params_int_get>
		if (err) {
   28612:	3605      	adds	r6, #5
   28614:	2800      	cmp	r0, #0
   28616:	d1b2      	bne.n	2857e <parse_ncellmeas+0x1de>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   28618:	f108 0801 	add.w	r8, r8, #1
   2861c:	e7c1      	b.n	285a2 <parse_ncellmeas+0x202>
		err = 1;
   2861e:	2401      	movs	r4, #1
   28620:	e6f5      	b.n	2840e <parse_ncellmeas+0x6e>
   28622:	bf00      	nop
   28624:	0004643e 	.word	0x0004643e
   28628:	00046858 	.word	0x00046858
   2862c:	000466e1 	.word	0x000466e1
   28630:	0004637e 	.word	0x0004637e

00028634 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   28634:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   28636:	2300      	movs	r3, #0
{
   28638:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   2863a:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   2863c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   28640:	2900      	cmp	r1, #0
   28642:	d047      	beq.n	286d4 <parse_xmodemsleep+0xa0>
   28644:	2800      	cmp	r0, #0
   28646:	d045      	beq.n	286d4 <parse_xmodemsleep+0xa0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   28648:	2104      	movs	r1, #4
   2864a:	a802      	add	r0, sp, #8
   2864c:	f017 f92f 	bl	3f8ae <at_params_list_init>
	if (err) {
   28650:	4604      	mov	r4, r0
   28652:	b138      	cbz	r0, 28664 <parse_xmodemsleep+0x30>
		LOG_ERR("Could not init AT params list, error: %d", err);
   28654:	4602      	mov	r2, r0
   28656:	2145      	movs	r1, #69	; 0x45
   28658:	4820      	ldr	r0, [pc, #128]	; (286dc <parse_xmodemsleep+0xa8>)
   2865a:	f014 fdce 	bl	3d1fa <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   2865e:	4620      	mov	r0, r4
   28660:	b004      	add	sp, #16
   28662:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   28664:	4601      	mov	r1, r0
   28666:	aa02      	add	r2, sp, #8
   28668:	4630      	mov	r0, r6
   2866a:	f017 f91d 	bl	3f8a8 <at_parser_params_from_str>
	if (err) {
   2866e:	4604      	mov	r4, r0
   28670:	b128      	cbz	r0, 2867e <parse_xmodemsleep+0x4a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   28672:	2145      	movs	r1, #69	; 0x45
   28674:	4602      	mov	r2, r0
   28676:	481a      	ldr	r0, [pc, #104]	; (286e0 <parse_xmodemsleep+0xac>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   28678:	f014 fdbf 	bl	3d1fa <z_log_minimal_printk>
		goto clean_exit;
   2867c:	e019      	b.n	286b2 <parse_xmodemsleep+0x7e>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   2867e:	2101      	movs	r1, #1
   28680:	f10d 0206 	add.w	r2, sp, #6
   28684:	a802      	add	r0, sp, #8
   28686:	f017 f9cd 	bl	3fa24 <at_params_unsigned_short_get>
	if (err) {
   2868a:	4604      	mov	r4, r0
   2868c:	b118      	cbz	r0, 28696 <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   2868e:	4602      	mov	r2, r0
   28690:	2145      	movs	r1, #69	; 0x45
   28692:	4814      	ldr	r0, [pc, #80]	; (286e4 <parse_xmodemsleep+0xb0>)
   28694:	e7f0      	b.n	28678 <parse_xmodemsleep+0x44>
	modem_sleep->type = type;
   28696:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   2869a:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   2869c:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   2869e:	f017 fa39 	bl	3fb14 <at_params_valid_count_get>
   286a2:	2802      	cmp	r0, #2
   286a4:	d809      	bhi.n	286ba <parse_xmodemsleep+0x86>
		modem_sleep->time = -1;
   286a6:	f04f 32ff 	mov.w	r2, #4294967295
   286aa:	f04f 33ff 	mov.w	r3, #4294967295
   286ae:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   286b2:	a802      	add	r0, sp, #8
   286b4:	f017 f90e 	bl	3f8d4 <at_params_list_free>
	return err;
   286b8:	e7d1      	b.n	2865e <parse_xmodemsleep+0x2a>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   286ba:	2102      	movs	r1, #2
   286bc:	f105 0208 	add.w	r2, r5, #8
   286c0:	a802      	add	r0, sp, #8
   286c2:	f017 f9e8 	bl	3fa96 <at_params_int64_get>
	if (err) {
   286c6:	4604      	mov	r4, r0
   286c8:	2800      	cmp	r0, #0
   286ca:	d0f2      	beq.n	286b2 <parse_xmodemsleep+0x7e>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   286cc:	4602      	mov	r2, r0
   286ce:	2145      	movs	r1, #69	; 0x45
   286d0:	4805      	ldr	r0, [pc, #20]	; (286e8 <parse_xmodemsleep+0xb4>)
   286d2:	e7d1      	b.n	28678 <parse_xmodemsleep+0x44>
		return -EINVAL;
   286d4:	f06f 0415 	mvn.w	r4, #21
   286d8:	e7c1      	b.n	2865e <parse_xmodemsleep+0x2a>
   286da:	bf00      	nop
   286dc:	0004643e 	.word	0x0004643e
   286e0:	0004688f 	.word	0x0004688f
   286e4:	000468c6 	.word	0x000468c6
   286e8:	000468f4 	.word	0x000468f4

000286ec <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   286ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   286ee:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   286f0:	4604      	mov	r4, r0
   286f2:	b1e8      	cbz	r0, 28730 <parse_mdmev+0x44>
   286f4:	b1e1      	cbz	r1, 28730 <parse_mdmev+0x44>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   286f6:	2108      	movs	r1, #8
   286f8:	4a0f      	ldr	r2, [pc, #60]	; (28738 <parse_mdmev+0x4c>)
   286fa:	f7ff fc1f 	bl	27f3c <response_is_valid>
   286fe:	b930      	cbnz	r0, 2870e <parse_mdmev+0x22>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   28700:	480e      	ldr	r0, [pc, #56]	; (2873c <parse_mdmev+0x50>)
   28702:	2145      	movs	r1, #69	; 0x45
   28704:	f014 fd79 	bl	3d1fa <z_log_minimal_printk>
		return -EIO;
   28708:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   2870c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   2870e:	2500      	movs	r5, #0
   28710:	4f0b      	ldr	r7, [pc, #44]	; (28740 <parse_mdmev+0x54>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   28712:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   28714:	4621      	mov	r1, r4
   28716:	f857 0b04 	ldr.w	r0, [r7], #4
   2871a:	f7f4 fd88 	bl	1d22e <strcmp>
   2871e:	b908      	cbnz	r0, 28724 <parse_mdmev+0x38>
			*modem_evt = i;
   28720:	7035      	strb	r5, [r6, #0]
			return 0;
   28722:	e7f3      	b.n	2870c <parse_mdmev+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   28724:	3501      	adds	r5, #1
   28726:	2d05      	cmp	r5, #5
   28728:	d1f4      	bne.n	28714 <parse_mdmev+0x28>
	return -ENODATA;
   2872a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2872e:	e7ed      	b.n	2870c <parse_mdmev+0x20>
		return -EINVAL;
   28730:	f06f 0015 	mvn.w	r0, #21
   28734:	e7ea      	b.n	2870c <parse_mdmev+0x20>
   28736:	bf00      	nop
   28738:	0004692e 	.word	0x0004692e
   2873c:	00046937 	.word	0x00046937
   28740:	00043428 	.word	0x00043428

00028744 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   28744:	b510      	push	{r4, lr}
   28746:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28748:	4a09      	ldr	r2, [pc, #36]	; (28770 <modem_info_parse+0x2c>)
{
   2874a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2874c:	7a63      	ldrb	r3, [r4, #9]
   2874e:	2100      	movs	r1, #0
   28750:	f7fe fcf0 	bl	27134 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   28754:	f110 0f0b 	cmn.w	r0, #11
   28758:	d000      	beq.n	2875c <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2875a:	b940      	cbnz	r0, 2876e <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2875c:	4804      	ldr	r0, [pc, #16]	; (28770 <modem_info_parse+0x2c>)
   2875e:	f017 f9d9 	bl	3fb14 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   28762:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
   28764:	4298      	cmp	r0, r3
   28766:	bf94      	ite	ls
   28768:	2000      	movls	r0, #0
   2876a:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   2876e:	bd10      	pop	{r4, pc}
   28770:	20019430 	.word	0x20019430

00028774 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   28774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28776:	4604      	mov	r4, r0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   28778:	4a11      	ldr	r2, [pc, #68]	; (287c0 <modem_info_rsrp_subscribe_handler+0x4c>)
   2877a:	ab01      	add	r3, sp, #4
   2877c:	ca07      	ldmia	r2, {r0, r1, r2}
   2877e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   28782:	4621      	mov	r1, r4
   28784:	4618      	mov	r0, r3
   28786:	f7ff ffdd 	bl	28744 <modem_info_parse>
	if (err != 0) {
   2878a:	4602      	mov	r2, r0
   2878c:	b128      	cbz	r0, 2879a <modem_info_rsrp_subscribe_handler+0x26>
		LOG_ERR("modem_info_parse failed to parse "
   2878e:	2145      	movs	r1, #69	; 0x45
   28790:	480c      	ldr	r0, [pc, #48]	; (287c4 <modem_info_rsrp_subscribe_handler+0x50>)

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   28792:	f014 fd32 	bl	3d1fa <z_log_minimal_printk>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   28796:	b004      	add	sp, #16
   28798:	bd10      	pop	{r4, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   2879a:	f10d 0202 	add.w	r2, sp, #2
   2879e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   287a2:	4809      	ldr	r0, [pc, #36]	; (287c8 <modem_info_rsrp_subscribe_handler+0x54>)
   287a4:	f017 f93e 	bl	3fa24 <at_params_unsigned_short_get>
	if (err != 0) {
   287a8:	4602      	mov	r2, r0
   287aa:	b110      	cbz	r0, 287b2 <modem_info_rsrp_subscribe_handler+0x3e>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   287ac:	2145      	movs	r1, #69	; 0x45
   287ae:	4807      	ldr	r0, [pc, #28]	; (287cc <modem_info_rsrp_subscribe_handler+0x58>)
   287b0:	e7ef      	b.n	28792 <modem_info_rsrp_subscribe_handler+0x1e>
	modem_info_rsrp_cb(param_value);
   287b2:	4b07      	ldr	r3, [pc, #28]	; (287d0 <modem_info_rsrp_subscribe_handler+0x5c>)
   287b4:	f89d 0002 	ldrb.w	r0, [sp, #2]
   287b8:	681b      	ldr	r3, [r3, #0]
   287ba:	4798      	blx	r3
   287bc:	e7eb      	b.n	28796 <modem_info_rsrp_subscribe_handler+0x22>
   287be:	bf00      	nop
   287c0:	00042f30 	.word	0x00042f30
   287c4:	00046b10 	.word	0x00046b10
   287c8:	20019430 	.word	0x20019430
   287cc:	00046b4c 	.word	0x00046b4c
   287d0:	20019438 	.word	0x20019438

000287d4 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   287d4:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   287d6:	bf9d      	ittte	ls
   287d8:	4b02      	ldrls	r3, [pc, #8]	; (287e4 <modem_info_type_get+0x10>)
   287da:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   287de:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   287e0:	20ea      	movhi	r0, #234	; 0xea
}
   287e2:	4770      	bx	lr
   287e4:	00043548 	.word	0x00043548

000287e8 <modem_info_name_get>:
{
   287e8:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   287ea:	460d      	mov	r5, r1
   287ec:	b919      	cbnz	r1, 287f6 <modem_info_name_get+0xe>
		return -EINVAL;
   287ee:	f06f 0415 	mvn.w	r4, #21
}
   287f2:	4620      	mov	r0, r4
   287f4:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   287f6:	4b07      	ldr	r3, [pc, #28]	; (28814 <modem_info_name_get+0x2c>)
   287f8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   287fc:	6870      	ldr	r0, [r6, #4]
   287fe:	f7f4 fd20 	bl	1d242 <strlen>
	if (len <= 0) {
   28802:	1e04      	subs	r4, r0, #0
   28804:	ddf3      	ble.n	287ee <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28806:	4622      	mov	r2, r4
   28808:	4628      	mov	r0, r5
   2880a:	6871      	ldr	r1, [r6, #4]
   2880c:	f019 f988 	bl	41b20 <memcpy>
   28810:	e7ef      	b.n	287f2 <modem_info_name_get+0xa>
   28812:	bf00      	nop
   28814:	00043548 	.word	0x00043548

00028818 <modem_info_short_get>:
{
   28818:	b530      	push	{r4, r5, lr}
   2881a:	460d      	mov	r5, r1
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2881c:	2100      	movs	r1, #0
{
   2881e:	b0a1      	sub	sp, #132	; 0x84
   28820:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28822:	227c      	movs	r2, #124	; 0x7c
   28824:	a801      	add	r0, sp, #4
   28826:	9100      	str	r1, [sp, #0]
   28828:	f019 f99a 	bl	41b60 <memset>
	if (buf == NULL) {
   2882c:	b1d5      	cbz	r5, 28864 <modem_info_short_get+0x4c>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2882e:	4b10      	ldr	r3, [pc, #64]	; (28870 <modem_info_short_get+0x58>)
   28830:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   28834:	7aa3      	ldrb	r3, [r4, #10]
   28836:	2b02      	cmp	r3, #2
   28838:	d014      	beq.n	28864 <modem_info_short_get+0x4c>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   2883a:	2180      	movs	r1, #128	; 0x80
   2883c:	4668      	mov	r0, sp
   2883e:	6822      	ldr	r2, [r4, #0]
   28840:	f00c ff24 	bl	3568c <nrf_modem_at_cmd>
	if (err != 0) {
   28844:	b988      	cbnz	r0, 2886a <modem_info_short_get+0x52>
	err = modem_info_parse(modem_data[info], recv_buf);
   28846:	4669      	mov	r1, sp
   28848:	4620      	mov	r0, r4
   2884a:	f7ff ff7b 	bl	28744 <modem_info_parse>
	if (err) {
   2884e:	b938      	cbnz	r0, 28860 <modem_info_short_get+0x48>
	err = at_params_unsigned_short_get(&m_param_list,
   28850:	462a      	mov	r2, r5
   28852:	7a21      	ldrb	r1, [r4, #8]
   28854:	4807      	ldr	r0, [pc, #28]	; (28874 <modem_info_short_get+0x5c>)
   28856:	f017 f8e5 	bl	3fa24 <at_params_unsigned_short_get>
	return sizeof(uint16_t);
   2885a:	2800      	cmp	r0, #0
   2885c:	bf08      	it	eq
   2885e:	2002      	moveq	r0, #2
}
   28860:	b021      	add	sp, #132	; 0x84
   28862:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28864:	f06f 0015 	mvn.w	r0, #21
   28868:	e7fa      	b.n	28860 <modem_info_short_get+0x48>
		return -EIO;
   2886a:	f06f 0004 	mvn.w	r0, #4
   2886e:	e7f7      	b.n	28860 <modem_info_short_get+0x48>
   28870:	00043548 	.word	0x00043548
   28874:	20019430 	.word	0x20019430

00028878 <modem_info_string_get>:
{
   28878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2887c:	2700      	movs	r7, #0
{
   2887e:	460d      	mov	r5, r1
   28880:	b0b5      	sub	sp, #212	; 0xd4
   28882:	4604      	mov	r4, r0
   28884:	4616      	mov	r6, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28886:	4639      	mov	r1, r7
   28888:	227c      	movs	r2, #124	; 0x7c
   2888a:	a815      	add	r0, sp, #84	; 0x54
   2888c:	9714      	str	r7, [sp, #80]	; 0x50
   2888e:	f019 f967 	bl	41b60 <memset>
	size_t len = 0;
   28892:	9702      	str	r7, [sp, #8]
	if ((buf == NULL) || (buf_size == 0)) {
   28894:	2d00      	cmp	r5, #0
   28896:	f000 8118 	beq.w	28aca <modem_info_string_get+0x252>
   2889a:	2e00      	cmp	r6, #0
   2889c:	f000 8115 	beq.w	28aca <modem_info_string_get+0x252>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   288a0:	4b8e      	ldr	r3, [pc, #568]	; (28adc <modem_info_string_get+0x264>)
	buf[0] = '\0';
   288a2:	702f      	strb	r7, [r5, #0]
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   288a4:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
   288a8:	2180      	movs	r1, #128	; 0x80
   288aa:	683a      	ldr	r2, [r7, #0]
   288ac:	a814      	add	r0, sp, #80	; 0x50
   288ae:	f00c feed 	bl	3568c <nrf_modem_at_cmd>
	if (err != 0) {
   288b2:	4680      	mov	r8, r0
   288b4:	2800      	cmp	r0, #0
   288b6:	f040 810b 	bne.w	28ad0 <modem_info_string_get+0x258>
	if (info == MODEM_INFO_SUP_BAND) {
   288ba:	2c02      	cmp	r4, #2
   288bc:	d123      	bne.n	28906 <modem_info_string_get+0x8e>
		char *str_begin = strchr(recv_buf, '(');
   288be:	2128      	movs	r1, #40	; 0x28
   288c0:	a814      	add	r0, sp, #80	; 0x50
   288c2:	f019 fb0b 	bl	41edc <strchr>
   288c6:	4607      	mov	r7, r0
		str_end = strchr(recv_buf, ')');
   288c8:	2129      	movs	r1, #41	; 0x29
   288ca:	a814      	add	r0, sp, #80	; 0x50
   288cc:	f019 fb06 	bl	41edc <strchr>
		if (!str_begin || !str_end) {
   288d0:	2f00      	cmp	r7, #0
   288d2:	f000 8100 	beq.w	28ad6 <modem_info_string_get+0x25e>
   288d6:	2800      	cmp	r0, #0
   288d8:	f000 80fd 	beq.w	28ad6 <modem_info_string_get+0x25e>
		*(str_end + 1) = 0;
   288dc:	f880 8001 	strb.w	r8, [r0, #1]
		len = strlen(str_begin);
   288e0:	4638      	mov	r0, r7
   288e2:	f7f4 fcae 	bl	1d242 <strlen>
		if (len >= buf_size) {
   288e6:	42b0      	cmp	r0, r6
		len = strlen(str_begin);
   288e8:	4604      	mov	r4, r0
   288ea:	9002      	str	r0, [sp, #8]
		if (len >= buf_size) {
   288ec:	d302      	bcc.n	288f4 <modem_info_string_get+0x7c>
		return -EMSGSIZE;
   288ee:	f06f 0979 	mvn.w	r9, #121	; 0x79
   288f2:	e004      	b.n	288fe <modem_info_string_get+0x86>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   288f4:	4639      	mov	r1, r7
   288f6:	4628      	mov	r0, r5
   288f8:	f019 fafd 	bl	41ef6 <strcpy>
		return len;
   288fc:	46a1      	mov	r9, r4
}
   288fe:	4648      	mov	r0, r9
   28900:	b035      	add	sp, #212	; 0xd4
   28902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = modem_info_parse(modem_data[info], recv_buf);
   28906:	4638      	mov	r0, r7
   28908:	a914      	add	r1, sp, #80	; 0x50
   2890a:	f7ff ff1b 	bl	28744 <modem_info_parse>
	if (err) {
   2890e:	4681      	mov	r9, r0
   28910:	b128      	cbz	r0, 2891e <modem_info_string_get+0xa6>
		LOG_ERR("Unable to parse data: %d", err);
   28912:	464a      	mov	r2, r9
   28914:	2145      	movs	r1, #69	; 0x45
   28916:	4872      	ldr	r0, [pc, #456]	; (28ae0 <modem_info_string_get+0x268>)
			LOG_ERR("Unable to obtain short: %d", err);
   28918:	f014 fc6f 	bl	3d1fa <z_log_minimal_printk>
			return err;
   2891c:	e7ef      	b.n	288fe <modem_info_string_get+0x86>
	if (info == MODEM_INFO_IP_ADDRESS) {
   2891e:	2c09      	cmp	r4, #9
   28920:	d17e      	bne.n	28a20 <modem_info_string_get+0x1a8>
	size_t len = 0;
   28922:	9003      	str	r0, [sp, #12]
	p = strstr(in_buf, "OK\r\n");
   28924:	496f      	ldr	r1, [pc, #444]	; (28ae4 <modem_info_string_get+0x26c>)
   28926:	a814      	add	r0, sp, #80	; 0x50
   28928:	f019 fb34 	bl	41f94 <strstr>
	if (!p) {
   2892c:	2800      	cmp	r0, #0
   2892e:	f000 80cc 	beq.w	28aca <modem_info_string_get+0x252>
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   28932:	4f6d      	ldr	r7, [pc, #436]	; (28ae8 <modem_info_string_get+0x270>)
	*p = '\0';
   28934:	f880 9000 	strb.w	r9, [r0]
	char *str_end = in_buf;
   28938:	a814      	add	r0, sp, #80	; 0x50
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   2893a:	4639      	mov	r1, r7
   2893c:	f019 fb2a 	bl	41f94 <strstr>
   28940:	4604      	mov	r4, r0
   28942:	2800      	cmp	r0, #0
   28944:	d13a      	bne.n	289bc <modem_info_string_get+0x144>
	if (total_ip_count == 0) {
   28946:	f1b9 0f00 	cmp.w	r9, #0
   2894a:	d0d8      	beq.n	288fe <modem_info_string_get+0x86>
	first_address = true;
   2894c:	f04f 0801 	mov.w	r8, #1
	err = at_params_string_get(&m_param_list,
   28950:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 28b00 <modem_info_string_get+0x288>
   28954:	f109 37ff 	add.w	r7, r9, #4294967295
	str_end = strstr(&in_buf[line_start_idx], AT_CMD_RSP_DELIM);
   28958:	ab14      	add	r3, sp, #80	; 0x50
   2895a:	eb03 0904 	add.w	r9, r3, r4
   2895e:	4648      	mov	r0, r9
   28960:	4961      	ldr	r1, [pc, #388]	; (28ae8 <modem_info_string_get+0x270>)
   28962:	f019 fb17 	bl	41f94 <strstr>
	if (str_end == NULL) {
   28966:	2800      	cmp	r0, #0
   28968:	f000 80b5 	beq.w	28ad6 <modem_info_string_get+0x25e>
	in_buf[++line_len + line_start_idx] = '\0';
   2896c:	2100      	movs	r1, #0
	line_len = str_end - &in_buf[line_start_idx];
   2896e:	eba0 0009 	sub.w	r0, r0, r9
	in_buf[++line_len + line_start_idx] = '\0';
   28972:	3401      	adds	r4, #1
   28974:	4404      	add	r4, r0
   28976:	ab34      	add	r3, sp, #208	; 0xd0
   28978:	191a      	adds	r2, r3, r4
   2897a:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   2897e:	485b      	ldr	r0, [pc, #364]	; (28aec <modem_info_string_get+0x274>)
   28980:	4649      	mov	r1, r9
   28982:	f7ff fedf 	bl	28744 <modem_info_parse>
	if (err) {
   28986:	4681      	mov	r9, r0
   28988:	2800      	cmp	r0, #0
   2898a:	d1c2      	bne.n	28912 <modem_info_string_get+0x9a>
	len = sizeof(ip_buf);
   2898c:	2340      	movs	r3, #64	; 0x40
	err = at_params_string_get(&m_param_list,
   2898e:	f10d 0a10 	add.w	sl, sp, #16
	len = sizeof(ip_buf);
   28992:	9303      	str	r3, [sp, #12]
	err = at_params_string_get(&m_param_list,
   28994:	4652      	mov	r2, sl
   28996:	2104      	movs	r1, #4
   28998:	4658      	mov	r0, fp
   2899a:	ab03      	add	r3, sp, #12
   2899c:	f017 f893 	bl	3fac6 <at_params_string_get>
	if (err != 0) {
   289a0:	4681      	mov	r9, r0
   289a2:	2800      	cmp	r0, #0
   289a4:	d1ab      	bne.n	288fe <modem_info_string_get+0x86>
	} else if (len >= sizeof(ip_buf)) {
   289a6:	9903      	ldr	r1, [sp, #12]
   289a8:	293f      	cmp	r1, #63	; 0x3f
   289aa:	d8a0      	bhi.n	288ee <modem_info_string_get+0x76>
	if (len == 0) {
   289ac:	b951      	cbnz	r1, 289c4 <modem_info_string_get+0x14c>
		line_start_idx += line_len + 1;
   289ae:	3401      	adds	r4, #1
		if (--current_ip_idx) {
   289b0:	bba7      	cbnz	r7, 28a1c <modem_info_string_get+0x1a4>
	return strlen(out_buf);
   289b2:	4628      	mov	r0, r5
   289b4:	f7f4 fc45 	bl	1d242 <strlen>
   289b8:	4681      	mov	r9, r0
   289ba:	e7a0      	b.n	288fe <modem_info_string_get+0x86>
		str_end++;
   289bc:	1c60      	adds	r0, r4, #1
		total_ip_count++;
   289be:	f109 0901 	add.w	r9, r9, #1
   289c2:	e7ba      	b.n	2893a <modem_info_string_get+0xc2>
	ip_buf[len] = '\0';
   289c4:	ab34      	add	r3, sp, #208	; 0xd0
   289c6:	4419      	add	r1, r3
   289c8:	f801 0cc0 	strb.w	r0, [r1, #-192]
	ip_v6_str = strstr(ip_buf, " ");
   289cc:	4650      	mov	r0, sl
   289ce:	4948      	ldr	r1, [pc, #288]	; (28af0 <modem_info_string_get+0x278>)
   289d0:	f019 fae0 	bl	41f94 <strstr>
	if (ip_v6_str) {
   289d4:	b128      	cbz	r0, 289e2 <modem_info_string_get+0x16a>
		*ip_v6_str = '\0';
   289d6:	f880 9000 	strb.w	r9, [r0]
		len = strlen(ip_buf);
   289da:	4650      	mov	r0, sl
   289dc:	f7f4 fc31 	bl	1d242 <strlen>
   289e0:	9003      	str	r0, [sp, #12]
	out_buf_len = strlen(out_buf);
   289e2:	4628      	mov	r0, r5
   289e4:	f7f4 fc2d 	bl	1d242 <strlen>
	err = snprintk(out_buf + out_buf_len,
   289e8:	4a42      	ldr	r2, [pc, #264]	; (28af4 <modem_info_string_get+0x27c>)
   289ea:	4b43      	ldr	r3, [pc, #268]	; (28af8 <modem_info_string_get+0x280>)
   289ec:	eba6 0900 	sub.w	r9, r6, r0
   289f0:	f1b8 0f00 	cmp.w	r8, #0
   289f4:	bf18      	it	ne
   289f6:	4613      	movne	r3, r2
   289f8:	4649      	mov	r1, r9
   289fa:	4a40      	ldr	r2, [pc, #256]	; (28afc <modem_info_string_get+0x284>)
   289fc:	f8cd a000 	str.w	sl, [sp]
   28a00:	4428      	add	r0, r5
   28a02:	f014 f9ea 	bl	3cdda <snprintk>
	if ((err <= 0) || (err > (out_buf_size - out_buf_len))) {
   28a06:	2800      	cmp	r0, #0
   28a08:	f77f af71 	ble.w	288ee <modem_info_string_get+0x76>
   28a0c:	4581      	cmp	r9, r0
   28a0e:	f4ff af6e 	bcc.w	288ee <modem_info_string_get+0x76>
	if (--current_ip_idx) {
   28a12:	2f00      	cmp	r7, #0
   28a14:	d0cd      	beq.n	289b2 <modem_info_string_get+0x13a>
	first_address = false;
   28a16:	f04f 0800 	mov.w	r8, #0
		line_start_idx  += line_len + 1;
   28a1a:	3401      	adds	r4, #1
		goto parse_line;
   28a1c:	3f01      	subs	r7, #1
   28a1e:	e79b      	b.n	28958 <modem_info_string_get+0xe0>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_INT) {
   28a20:	7abb      	ldrb	r3, [r7, #10]
   28a22:	2b01      	cmp	r3, #1
   28a24:	d133      	bne.n	28a8e <modem_info_string_get+0x216>
		err = at_params_unsigned_short_get(&m_param_list,
   28a26:	7a39      	ldrb	r1, [r7, #8]
   28a28:	4835      	ldr	r0, [pc, #212]	; (28b00 <modem_info_string_get+0x288>)
   28a2a:	aa04      	add	r2, sp, #16
   28a2c:	f016 fffa 	bl	3fa24 <at_params_unsigned_short_get>
		if (err) {
   28a30:	4681      	mov	r9, r0
   28a32:	b118      	cbz	r0, 28a3c <modem_info_string_get+0x1c4>
			LOG_ERR("Unable to obtain short: %d", err);
   28a34:	4602      	mov	r2, r0
   28a36:	2145      	movs	r1, #69	; 0x45
   28a38:	4832      	ldr	r0, [pc, #200]	; (28b04 <modem_info_string_get+0x28c>)
   28a3a:	e76d      	b.n	28918 <modem_info_string_get+0xa0>
		len = snprintf(buf, buf_size, "%d", param_value);
   28a3c:	4631      	mov	r1, r6
   28a3e:	4628      	mov	r0, r5
   28a40:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28a44:	4a30      	ldr	r2, [pc, #192]	; (28b08 <modem_info_string_get+0x290>)
   28a46:	f012 f939 	bl	3acbc <sniprintf>
   28a4a:	9002      	str	r0, [sp, #8]
		if ((len <= 0) || (len > buf_size)) {
   28a4c:	2800      	cmp	r0, #0
   28a4e:	f43f af4e 	beq.w	288ee <modem_info_string_get+0x76>
   28a52:	4286      	cmp	r6, r0
   28a54:	f4ff af4b 	bcc.w	288ee <modem_info_string_get+0x76>
	if (info == MODEM_INFO_ICCID) {
   28a58:	2c0e      	cmp	r4, #14
   28a5a:	d111      	bne.n	28a80 <modem_info_string_get+0x208>
   28a5c:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   28a5e:	4628      	mov	r0, r5
   28a60:	f7f4 fbef 	bl	1d242 <strlen>
   28a64:	1ca3      	adds	r3, r4, #2
   28a66:	1b64      	subs	r4, r4, r5
   28a68:	42a0      	cmp	r0, r4
   28a6a:	d824      	bhi.n	28ab6 <modem_info_string_get+0x23e>
		if ((len == ICCID_LEN) &&
   28a6c:	9b02      	ldr	r3, [sp, #8]
   28a6e:	2b14      	cmp	r3, #20
   28a70:	d106      	bne.n	28a80 <modem_info_string_get+0x208>
   28a72:	7ceb      	ldrb	r3, [r5, #19]
   28a74:	2b46      	cmp	r3, #70	; 0x46
			buf[len - 1] = '\0';
   28a76:	bf01      	itttt	eq
   28a78:	2300      	moveq	r3, #0
   28a7a:	74eb      	strbeq	r3, [r5, #19]
			--len;
   28a7c:	2313      	moveq	r3, #19
   28a7e:	9302      	streq	r3, [sp, #8]
	return len <= 0 ? -ENOTSUP : len;
   28a80:	9802      	ldr	r0, [sp, #8]
   28a82:	2800      	cmp	r0, #0
   28a84:	bf14      	ite	ne
   28a86:	4681      	movne	r9, r0
   28a88:	f06f 0985 	mvneq.w	r9, #133	; 0x85
   28a8c:	e737      	b.n	288fe <modem_info_string_get+0x86>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28a8e:	2b02      	cmp	r3, #2
   28a90:	d1e2      	bne.n	28a58 <modem_info_string_get+0x1e0>
		err = at_params_string_get(&m_param_list,
   28a92:	462a      	mov	r2, r5
   28a94:	7a39      	ldrb	r1, [r7, #8]
   28a96:	481a      	ldr	r0, [pc, #104]	; (28b00 <modem_info_string_get+0x288>)
   28a98:	ab02      	add	r3, sp, #8
		len = buf_size - out_buf_len;
   28a9a:	9602      	str	r6, [sp, #8]
		err = at_params_string_get(&m_param_list,
   28a9c:	f017 f813 	bl	3fac6 <at_params_string_get>
		if (err != 0) {
   28aa0:	4681      	mov	r9, r0
   28aa2:	2800      	cmp	r0, #0
   28aa4:	f47f af2b 	bne.w	288fe <modem_info_string_get+0x86>
		} else if (len >= buf_size) {
   28aa8:	9b02      	ldr	r3, [sp, #8]
   28aaa:	429e      	cmp	r6, r3
   28aac:	f67f af1f 	bls.w	288ee <modem_info_string_get+0x76>
		buf[accumulated_len] = '\0';
   28ab0:	2200      	movs	r2, #0
   28ab2:	54ea      	strb	r2, [r5, r3]
   28ab4:	e7d0      	b.n	28a58 <modem_info_string_get+0x1e0>
		current_char = buf[i];
   28ab6:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   28aba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   28abe:	461c      	mov	r4, r3
		buf[i] = next_char;
   28ac0:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   28ac4:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   28ac8:	e7c9      	b.n	28a5e <modem_info_string_get+0x1e6>
		return -EINVAL;
   28aca:	f06f 0915 	mvn.w	r9, #21
   28ace:	e716      	b.n	288fe <modem_info_string_get+0x86>
		return -EIO;
   28ad0:	f06f 0904 	mvn.w	r9, #4
   28ad4:	e713      	b.n	288fe <modem_info_string_get+0x86>
			return -EFAULT;
   28ad6:	f06f 090d 	mvn.w	r9, #13
   28ada:	e710      	b.n	288fe <modem_info_string_get+0x86>
   28adc:	00043548 	.word	0x00043548
   28ae0:	00046b74 	.word	0x00046b74
   28ae4:	00045b54 	.word	0x00045b54
   28ae8:	0004b6bf 	.word	0x0004b6bf
   28aec:	0004350c 	.word	0x0004350c
   28af0:	00044a17 	.word	0x00044a17
   28af4:	00045b14 	.word	0x00045b14
   28af8:	00046b71 	.word	0x00046b71
   28afc:	0004abfa 	.word	0x0004abfa
   28b00:	20019430 	.word	0x20019430
   28b04:	00046b92 	.word	0x00046b92
   28b08:	00046d78 	.word	0x00046d78

00028b0c <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   28b0c:	4803      	ldr	r0, [pc, #12]	; (28b1c <modem_info_init+0x10>)
   28b0e:	6843      	ldr	r3, [r0, #4]
   28b10:	b913      	cbnz	r3, 28b18 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   28b12:	210a      	movs	r1, #10
   28b14:	f016 becb 	b.w	3f8ae <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   28b18:	2000      	movs	r0, #0
   28b1a:	4770      	bx	lr
   28b1c:	20019430 	.word	0x20019430

00028b20 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   28b20:	b538      	push	{r3, r4, r5, lr}
   28b22:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   28b24:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   28b28:	f7ff fe54 	bl	287d4 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   28b2c:	2802      	cmp	r0, #2
   28b2e:	d112      	bne.n	28b56 <modem_data_get+0x36>
		ret = modem_info_string_get(param->type,
   28b30:	2264      	movs	r2, #100	; 0x64
   28b32:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28b36:	1ca9      	adds	r1, r5, #2
   28b38:	f7ff fe9e 	bl	28878 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   28b3c:	1e04      	subs	r4, r0, #0
   28b3e:	db02      	blt.n	28b46 <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   28b40:	2400      	movs	r4, #0
}
   28b42:	4620      	mov	r0, r4
   28b44:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   28b46:	4623      	mov	r3, r4
   28b48:	2145      	movs	r1, #69	; 0x45
   28b4a:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   28b4e:	4809      	ldr	r0, [pc, #36]	; (28b74 <modem_data_get+0x54>)
   28b50:	f014 fb53 	bl	3d1fa <z_log_minimal_printk>
			return ret;
   28b54:	e7f5      	b.n	28b42 <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_INT) {
   28b56:	2801      	cmp	r0, #1
   28b58:	d1f2      	bne.n	28b40 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   28b5a:	4629      	mov	r1, r5
   28b5c:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28b60:	f7ff fe5a 	bl	28818 <modem_info_short_get>
		if (ret < 0) {
   28b64:	1e04      	subs	r4, r0, #0
   28b66:	daeb      	bge.n	28b40 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   28b68:	4622      	mov	r2, r4
   28b6a:	2145      	movs	r1, #69	; 0x45
   28b6c:	4802      	ldr	r0, [pc, #8]	; (28b78 <modem_data_get+0x58>)
   28b6e:	f014 fb44 	bl	3d1fa <z_log_minimal_printk>
			return ret;
   28b72:	e7e6      	b.n	28b42 <modem_data_get+0x22>
   28b74:	00046bb2 	.word	0x00046bb2
   28b78:	00046bd5 	.word	0x00046bd5

00028b7c <modem_info_params_init>:
	if (modem == NULL) {
   28b7c:	2800      	cmp	r0, #0
   28b7e:	d049      	beq.n	28c14 <modem_info_params_init+0x98>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   28b80:	2301      	movs	r3, #1
   28b82:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   28b86:	2302      	movs	r3, #2
   28b88:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   28b8c:	2303      	movs	r3, #3
   28b8e:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   28b92:	2305      	movs	r3, #5
   28b94:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   28b98:	2306      	movs	r3, #6
   28b9a:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   28b9e:	2307      	movs	r3, #7
   28ba0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   28ba4:	2308      	movs	r3, #8
   28ba6:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   28baa:	2309      	movs	r3, #9
   28bac:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   28bb0:	2304      	movs	r3, #4
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   28bb2:	220a      	movs	r2, #10
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   28bb4:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   28bb8:	230f      	movs	r3, #15
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   28bba:	f880 2714 	strb.w	r2, [r0, #1812]	; 0x714
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   28bbe:	220e      	movs	r2, #14
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   28bc0:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   28bc4:	2310      	movs	r3, #16
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   28bc6:	f880 2784 	strb.w	r2, [r0, #1924]	; 0x784
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   28bca:	2212      	movs	r2, #18
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   28bcc:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   28bd0:	2311      	movs	r3, #17
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   28bd2:	f880 27f4 	strb.w	r2, [r0, #2036]	; 0x7f4
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   28bd6:	220d      	movs	r2, #13
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   28bd8:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   28bdc:	2314      	movs	r3, #20
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   28bde:	f880 2864 	strb.w	r2, [r0, #2148]	; 0x864
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   28be2:	220b      	movs	r2, #11
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   28be4:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   28be8:	2315      	movs	r3, #21
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   28bea:	f880 28d4 	strb.w	r2, [r0, #2260]	; 0x8d4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   28bee:	2213      	movs	r2, #19
	modem->network.apn.type			= MODEM_INFO_APN;
   28bf0:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   28bf4:	2300      	movs	r3, #0
	modem->device.imei.type			= MODEM_INFO_IMEI;
   28bf6:	f880 2944 	strb.w	r2, [r0, #2372]	; 0x944
	modem->device.board			= CONFIG_BOARD;
   28bfa:	4a08      	ldr	r2, [pc, #32]	; (28c1c <modem_info_params_init+0xa0>)
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   28bfc:	f880 368c 	strb.w	r3, [r0, #1676]	; 0x68c
	modem->device.board			= CONFIG_BOARD;
   28c00:	f8c0 2948 	str.w	r2, [r0, #2376]	; 0x948
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   28c04:	4a06      	ldr	r2, [pc, #24]	; (28c20 <modem_info_params_init+0xa4>)
   28c06:	f8c0 294c 	str.w	r2, [r0, #2380]	; 0x94c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   28c0a:	4a06      	ldr	r2, [pc, #24]	; (28c24 <modem_info_params_init+0xa8>)
   28c0c:	f8c0 2950 	str.w	r2, [r0, #2384]	; 0x950
	return 0;
   28c10:	4618      	mov	r0, r3
   28c12:	4770      	bx	lr
		return -EINVAL;
   28c14:	f06f 0015 	mvn.w	r0, #21
}
   28c18:	4770      	bx	lr
   28c1a:	bf00      	nop
   28c1c:	00046bf5 	.word	0x00046bf5
   28c20:	00046c07 	.word	0x00046c07
   28c24:	00046c0e 	.word	0x00046c0e

00028c28 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   28c28:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   28c2a:	4604      	mov	r4, r0
   28c2c:	2800      	cmp	r0, #0
   28c2e:	f000 80a1 	beq.w	28d74 <modem_info_params_get+0x14c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   28c32:	f7ff ff75 	bl	28b20 <modem_data_get>
   28c36:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   28c38:	f104 0070 	add.w	r0, r4, #112	; 0x70
   28c3c:	f7ff ff70 	bl	28b20 <modem_data_get>
   28c40:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   28c42:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28c46:	f7ff ff6b 	bl	28b20 <modem_data_get>
   28c4a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   28c4c:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28c50:	f7ff ff66 	bl	28b20 <modem_data_get>
   28c54:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   28c56:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   28c5a:	f7ff ff61 	bl	28b20 <modem_data_get>
   28c5e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   28c60:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   28c64:	f7ff ff5c 	bl	28b20 <modem_data_get>
   28c68:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   28c6a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   28c6e:	f7ff ff57 	bl	28b20 <modem_data_get>
   28c72:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   28c74:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   28c78:	f7ff ff52 	bl	28b20 <modem_data_get>
   28c7c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   28c7e:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   28c82:	f7ff ff4d 	bl	28b20 <modem_data_get>
   28c86:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   28c88:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   28c8c:	f7ff ff48 	bl	28b20 <modem_data_get>
   28c90:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   28c92:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   28c96:	f7ff ff43 	bl	28b20 <modem_data_get>
   28c9a:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   28c9c:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   28ca0:	f7ff ff3e 	bl	28b20 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28ca4:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
   28ca8:	4405      	add	r5, r0
   28caa:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   28cae:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28cb2:	220a      	movs	r2, #10
   28cb4:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
   28cb8:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   28cbc:	2100      	movs	r1, #0
   28cbe:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   28cc2:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
	memcpy(mcc->value_string, current_operator->value_string, 3);
   28cc6:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   28cca:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28cce:	f012 f8e3 	bl	3ae98 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   28cd2:	f204 2632 	addw	r6, r4, #562	; 0x232
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28cd6:	220a      	movs	r2, #10
   28cd8:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28cda:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28cde:	4630      	mov	r0, r6
   28ce0:	f012 f8da 	bl	3ae98 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   28ce4:	2210      	movs	r2, #16
   28ce6:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28ce8:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   28cec:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   28cf0:	f012 f8d2 	bl	3ae98 <strtol>
   28cf4:	f7f3 fcf6 	bl	1c6e4 <__aeabi_i2d>
   28cf8:	f504 66d2 	add.w	r6, r4, #1680	; 0x690
   28cfc:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   28d00:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28d02:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   28d04:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28d08:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   28d0c:	f012 f8c4 	bl	3ae98 <strtol>
   28d10:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   28d14:	b13d      	cbz	r5, 28d26 <modem_info_params_get+0xfe>
			LOG_ERR("Network data not obtained: %d", ret);
   28d16:	462a      	mov	r2, r5
   28d18:	2145      	movs	r1, #69	; 0x45
   28d1a:	4818      	ldr	r0, [pc, #96]	; (28d7c <modem_info_params_get+0x154>)
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   28d1c:	f014 fa6d 	bl	3d1fa <z_log_minimal_printk>
			return -EAGAIN;
   28d20:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   28d24:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   28d26:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   28d2a:	f7ff fef9 	bl	28b20 <modem_data_get>
   28d2e:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   28d30:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   28d34:	f7ff fef4 	bl	28b20 <modem_data_get>
   28d38:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   28d3a:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   28d3e:	f7ff feef 	bl	28b20 <modem_data_get>
		if (ret) {
   28d42:	182a      	adds	r2, r5, r0
   28d44:	d002      	beq.n	28d4c <modem_info_params_get+0x124>
			LOG_ERR("Sim data not obtained: %d", ret);
   28d46:	2145      	movs	r1, #69	; 0x45
   28d48:	480d      	ldr	r0, [pc, #52]	; (28d80 <modem_info_params_get+0x158>)
   28d4a:	e7e7      	b.n	28d1c <modem_info_params_get+0xf4>
		ret = modem_data_get(&modem->device.modem_fw);
   28d4c:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   28d50:	f7ff fee6 	bl	28b20 <modem_data_get>
   28d54:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   28d56:	f604 0068 	addw	r0, r4, #2152	; 0x868
   28d5a:	f7ff fee1 	bl	28b20 <modem_data_get>
   28d5e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   28d60:	f604 00d8 	addw	r0, r4, #2264	; 0x8d8
   28d64:	f7ff fedc 	bl	28b20 <modem_data_get>
		if (ret) {
   28d68:	1940      	adds	r0, r0, r5
   28d6a:	d0db      	beq.n	28d24 <modem_info_params_get+0xfc>
			LOG_ERR("Device data not obtained: %d", ret);
   28d6c:	4602      	mov	r2, r0
   28d6e:	2145      	movs	r1, #69	; 0x45
   28d70:	4804      	ldr	r0, [pc, #16]	; (28d84 <modem_info_params_get+0x15c>)
   28d72:	e7d3      	b.n	28d1c <modem_info_params_get+0xf4>
		return -EINVAL;
   28d74:	f06f 0015 	mvn.w	r0, #21
   28d78:	e7d4      	b.n	28d24 <modem_info_params_get+0xfc>
   28d7a:	bf00      	nop
   28d7c:	00046c1b 	.word	0x00046c1b
   28d80:	00046c3e 	.word	0x00046c3e
   28d84:	00046c5d 	.word	0x00046c5d

00028d88 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   28d88:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   28d8c:	4681      	mov	r9, r0
	int total_len;

	if (device == NULL || json_obj == NULL) {
   28d8e:	460c      	mov	r4, r1
   28d90:	b329      	cbz	r1, 28dde <device_data_add+0x56>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   28d92:	f016 ff3d 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   28d96:	4621      	mov	r1, r4
	total_len = json_add_data(&device->modem_fw, json_obj);
   28d98:	4605      	mov	r5, r0
	total_len += json_add_data(&device->battery, json_obj);
   28d9a:	f109 0070 	add.w	r0, r9, #112	; 0x70
   28d9e:	f016 ff37 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   28da2:	4621      	mov	r1, r4
	total_len += json_add_data(&device->battery, json_obj);
   28da4:	4405      	add	r5, r0
	total_len += json_add_data(&device->imei, json_obj);
   28da6:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   28daa:	f016 ff31 	bl	3fc10 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   28dae:	f8d9 2150 	ldr.w	r2, [r9, #336]	; 0x150
   28db2:	490c      	ldr	r1, [pc, #48]	; (28de4 <device_data_add+0x5c>)
	total_len += json_add_data(&device->imei, json_obj);
   28db4:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "board", device->board);
   28db6:	4620      	mov	r0, r4
   28db8:	f016 ff13 	bl	3fbe2 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   28dbc:	f8d9 2154 	ldr.w	r2, [r9, #340]	; 0x154
   28dc0:	4909      	ldr	r1, [pc, #36]	; (28de8 <device_data_add+0x60>)
	total_len += json_add_str(json_obj, "board", device->board);
   28dc2:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   28dc4:	4620      	mov	r0, r4
   28dc6:	f016 ff0c 	bl	3fbe2 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   28dca:	f8d9 2158 	ldr.w	r2, [r9, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   28dce:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   28dd0:	4906      	ldr	r1, [pc, #24]	; (28dec <device_data_add+0x64>)
   28dd2:	4620      	mov	r0, r4
   28dd4:	f016 ff05 	bl	3fbe2 <json_add_str>
   28dd8:	4428      	add	r0, r5

	return total_len;
}
   28dda:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
		return -EINVAL;
   28dde:	f06f 0015 	mvn.w	r0, #21
   28de2:	e7fa      	b.n	28dda <device_data_add+0x52>
   28de4:	00046c91 	.word	0x00046c91
   28de8:	00046c97 	.word	0x00046c97
   28dec:	00046ca2 	.word	0x00046ca2

00028df0 <network_data_add>:
{
   28df0:	b5d0      	push	{r4, r6, r7, lr}
   28df2:	460e      	mov	r6, r1
	if (network == NULL || json_obj == NULL) {
   28df4:	4604      	mov	r4, r0
{
   28df6:	b09a      	sub	sp, #104	; 0x68
	if (network == NULL || json_obj == NULL) {
   28df8:	2800      	cmp	r0, #0
   28dfa:	d06b      	beq.n	28ed4 <network_data_add+0xe4>
   28dfc:	2900      	cmp	r1, #0
   28dfe:	d069      	beq.n	28ed4 <network_data_add+0xe4>
	total_len = json_add_data(&network->current_band, json_obj);
   28e00:	f016 ff06 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   28e04:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   28e06:	4607      	mov	r7, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   28e08:	f104 0070 	add.w	r0, r4, #112	; 0x70
   28e0c:	f016 ff00 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   28e10:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   28e12:	4407      	add	r7, r0
	total_len += json_add_data(&network->area_code, json_obj);
   28e14:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   28e18:	f016 fefa 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   28e1c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   28e1e:	4407      	add	r7, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   28e20:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   28e24:	f016 fef4 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   28e28:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   28e2a:	4407      	add	r7, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   28e2c:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28e30:	f016 feee 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   28e34:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   28e36:	4407      	add	r7, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   28e38:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28e3c:	f016 fee8 	bl	3fc10 <json_add_data>
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28e40:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   28e42:	4407      	add	r7, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28e44:	f894 030c 	ldrb.w	r0, [r4, #780]	; 0x30c
   28e48:	f7ff fcce 	bl	287e8 <modem_info_name_get>
	if (len > 0) {
   28e4c:	2800      	cmp	r0, #0
   28e4e:	dd11      	ble.n	28e74 <network_data_add+0x84>
		data_name[len] = '\0';
   28e50:	ab1a      	add	r3, sp, #104	; 0x68
   28e52:	4418      	add	r0, r3
   28e54:	2300      	movs	r3, #0
   28e56:	f800 3c64 	strb.w	r3, [r0, #-100]
		ret = json_add_num(json_obj, data_name, network->cellid_dec);
   28e5a:	f504 63d2 	add.w	r3, r4, #1680	; 0x690
	json_num = cJSON_CreateNumber(num);
   28e5e:	e9d3 0100 	ldrd	r0, r1, [r3]
   28e62:	f7f5 fcb5 	bl	1e7d0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   28e66:	4602      	mov	r2, r0
   28e68:	b120      	cbz	r0, 28e74 <network_data_add+0x84>
	cJSON_AddItemToObject(parent, str, item);
   28e6a:	4630      	mov	r0, r6
   28e6c:	a901      	add	r1, sp, #4
   28e6e:	f017 fa1b 	bl	402a8 <cJSON_AddItemToObject>
			total_len += sizeof(double);
   28e72:	3708      	adds	r7, #8
	network->network_mode[0] = '\0';
   28e74:	2300      	movs	r3, #0
   28e76:	f884 3698 	strb.w	r3, [r4, #1688]	; 0x698
	if (network->lte_mode.value == 1) {
   28e7a:	f8b4 33f0 	ldrh.w	r3, [r4, #1008]	; 0x3f0
		strcat(network->network_mode, lte_string);
   28e7e:	f504 62d3 	add.w	r2, r4, #1688	; 0x698
	if (network->lte_mode.value == 1) {
   28e82:	2b01      	cmp	r3, #1
   28e84:	d11b      	bne.n	28ebe <network_data_add+0xce>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   28e86:	4610      	mov	r0, r2
   28e88:	4914      	ldr	r1, [pc, #80]	; (28edc <network_data_add+0xec>)
   28e8a:	f019 f818 	bl	41ebe <strcat>
   28e8e:	4602      	mov	r2, r0
		total_len += sizeof(lte_string);
   28e90:	3706      	adds	r7, #6
	if (network->gps_mode.value == 1) {
   28e92:	f8b4 34d0 	ldrh.w	r3, [r4, #1232]	; 0x4d0
   28e96:	2b01      	cmp	r3, #1
   28e98:	d105      	bne.n	28ea6 <network_data_add+0xb6>
   28e9a:	4610      	mov	r0, r2
   28e9c:	4910      	ldr	r1, [pc, #64]	; (28ee0 <network_data_add+0xf0>)
   28e9e:	f019 f80e 	bl	41ebe <strcat>
   28ea2:	4602      	mov	r2, r0
		total_len += sizeof(gps_string);
   28ea4:	3705      	adds	r7, #5
	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   28ea6:	4630      	mov	r0, r6
   28ea8:	490e      	ldr	r1, [pc, #56]	; (28ee4 <network_data_add+0xf4>)
   28eaa:	f016 fe9a 	bl	3fbe2 <json_add_str>
	if (ret) {
   28eae:	b118      	cbz	r0, 28eb8 <network_data_add+0xc8>
		LOG_ERR("Unable to add the network mode");
   28eb0:	2145      	movs	r1, #69	; 0x45
   28eb2:	480d      	ldr	r0, [pc, #52]	; (28ee8 <network_data_add+0xf8>)
   28eb4:	f014 f9a1 	bl	3d1fa <z_log_minimal_printk>
}
   28eb8:	4638      	mov	r0, r7
   28eba:	b01a      	add	sp, #104	; 0x68
   28ebc:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (network->nbiot_mode.value == 1) {
   28ebe:	f8b4 3460 	ldrh.w	r3, [r4, #1120]	; 0x460
   28ec2:	2b01      	cmp	r3, #1
   28ec4:	d1e5      	bne.n	28e92 <network_data_add+0xa2>
   28ec6:	4610      	mov	r0, r2
   28ec8:	4908      	ldr	r1, [pc, #32]	; (28eec <network_data_add+0xfc>)
   28eca:	f018 fff8 	bl	41ebe <strcat>
		total_len += sizeof(nbiot_string);
   28ece:	3707      	adds	r7, #7
   28ed0:	4602      	mov	r2, r0
   28ed2:	e7de      	b.n	28e92 <network_data_add+0xa2>
		return -EINVAL;
   28ed4:	f06f 0715 	mvn.w	r7, #21
   28ed8:	e7ee      	b.n	28eb8 <network_data_add+0xc8>
   28eda:	bf00      	nop
   28edc:	00046d0e 	.word	0x00046d0e
   28ee0:	00046d09 	.word	0x00046d09
   28ee4:	00046caa 	.word	0x00046caa
   28ee8:	00046cb6 	.word	0x00046cb6
   28eec:	00046d14 	.word	0x00046d14

00028ef0 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   28ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28ef4:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   28ef6:	460d      	mov	r5, r1
   28ef8:	2900      	cmp	r1, #0
   28efa:	d04f      	beq.n	28f9c <modem_info_json_object_encode+0xac>
   28efc:	2800      	cmp	r0, #0
   28efe:	d04d      	beq.n	28f9c <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   28f00:	4608      	mov	r0, r1
   28f02:	f017 f9b7 	bl	40274 <cJSON_GetArraySize>
   28f06:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   28f08:	f009 fbee 	bl	326e8 <cJSON_CreateObject>
   28f0c:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   28f0e:	f009 fbeb 	bl	326e8 <cJSON_CreateObject>
   28f12:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   28f14:	f009 fbe8 	bl	326e8 <cJSON_CreateObject>
   28f18:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   28f1a:	f1b8 0f00 	cmp.w	r8, #0
   28f1e:	d03a      	beq.n	28f96 <modem_info_json_object_encode+0xa6>
   28f20:	b3cf      	cbz	r7, 28f96 <modem_info_json_object_encode+0xa6>
   28f22:	b3c0      	cbz	r0, 28f96 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   28f24:	4641      	mov	r1, r8
   28f26:	4648      	mov	r0, r9
   28f28:	f7ff ff62 	bl	28df0 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   28f2c:	2800      	cmp	r0, #0
   28f2e:	dd06      	ble.n	28f3e <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   28f30:	4642      	mov	r2, r8
   28f32:	4628      	mov	r0, r5
   28f34:	491b      	ldr	r1, [pc, #108]	; (28fa4 <modem_info_json_object_encode+0xb4>)
   28f36:	f017 f9b7 	bl	402a8 <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_NET_INF, network_obj);
		network_obj = NULL;
   28f3a:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   28f3e:	4639      	mov	r1, r7
   28f40:	f509 60d5 	add.w	r0, r9, #1704	; 0x6a8
   28f44:	f016 fea7 	bl	3fc96 <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   28f48:	2800      	cmp	r0, #0
   28f4a:	dd05      	ble.n	28f58 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   28f4c:	463a      	mov	r2, r7
   28f4e:	4628      	mov	r0, r5
   28f50:	4915      	ldr	r1, [pc, #84]	; (28fa8 <modem_info_json_object_encode+0xb8>)
   28f52:	f017 f9a9 	bl	402a8 <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_SIM_INF, sim_obj);
		sim_obj = NULL;
   28f56:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   28f58:	4631      	mov	r1, r6
   28f5a:	f509 60ff 	add.w	r0, r9, #2040	; 0x7f8
   28f5e:	f7ff ff13 	bl	28d88 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   28f62:	2800      	cmp	r0, #0
   28f64:	dd05      	ble.n	28f72 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   28f66:	4632      	mov	r2, r6
   28f68:	4628      	mov	r0, r5
   28f6a:	4910      	ldr	r1, [pc, #64]	; (28fac <modem_info_json_object_encode+0xbc>)
   28f6c:	f017 f99c 	bl	402a8 <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_DEV_INF, device_obj);
		device_obj = NULL;
   28f70:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   28f72:	4640      	mov	r0, r8
   28f74:	f009 faf6 	bl	32564 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   28f78:	4638      	mov	r0, r7
   28f7a:	f009 faf3 	bl	32564 <cJSON_Delete>
	cJSON_Delete(device_obj);
   28f7e:	4630      	mov	r0, r6
   28f80:	f009 faf0 	bl	32564 <cJSON_Delete>

	if (obj_count >= 0) {
   28f84:	2c00      	cmp	r4, #0
   28f86:	db03      	blt.n	28f90 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   28f88:	4628      	mov	r0, r5
   28f8a:	f017 f973 	bl	40274 <cJSON_GetArraySize>
   28f8e:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   28f90:	4620      	mov	r0, r4
   28f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   28f96:	f06f 040b 	mvn.w	r4, #11
   28f9a:	e7ea      	b.n	28f72 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   28f9c:	f06f 0415 	mvn.w	r4, #21
   28fa0:	e7f6      	b.n	28f90 <modem_info_json_object_encode+0xa0>
   28fa2:	bf00      	nop
   28fa4:	00046cda 	.word	0x00046cda
   28fa8:	00046ce6 	.word	0x00046ce6
   28fac:	00046cee 	.word	0x00046cee

00028fb0 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   28fb0:	4803      	ldr	r0, [pc, #12]	; (28fc0 <k_sys_fatal_error_handler+0x10>)
   28fb2:	2145      	movs	r1, #69	; 0x45
{
   28fb4:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   28fb6:	f014 f920 	bl	3d1fa <z_log_minimal_printk>
		sys_arch_reboot(0);
   28fba:	2000      	movs	r0, #0
   28fbc:	f7fa fc5a 	bl	23874 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   28fc0:	00046d1b 	.word	0x00046d1b

00028fc4 <translate_error>:
{
	cmee_control(DISABLE);
}

static int translate_error(int err)
{
   28fc4:	b508      	push	{r3, lr}
	/* In case of CME error translate the error value to
	 * an errno value.
	 */
	switch (err) {
   28fc6:	f46f 7300 	mvn.w	r3, #512	; 0x200
   28fca:	4418      	add	r0, r3
   28fcc:	2805      	cmp	r0, #5
   28fce:	d80d      	bhi.n	28fec <translate_error+0x28>
   28fd0:	e8df f000 	tbb	[pc, r0]
   28fd4:	0c060317 	.word	0x0c060317
   28fd8:	090c      	.short	0x090c
   28fda:	f04f 30ff 	mov.w	r0, #4294967295
		__ASSERT(false, "Untranslated CME error %d!", err);
		return 0xBAADBAAD;
	}

	return err;
}
   28fde:	bd08      	pop	{r3, pc}
		return -ENOMEM;
   28fe0:	f06f 000b 	mvn.w	r0, #11
   28fe4:	e7fb      	b.n	28fde <translate_error+0x1a>
		return -EACCES;
   28fe6:	f06f 000c 	mvn.w	r0, #12
   28fea:	e7f8      	b.n	28fde <translate_error+0x1a>
		__ASSERT(false, "Untranslated CME error %d!", err);
   28fec:	224c      	movs	r2, #76	; 0x4c
   28fee:	4906      	ldr	r1, [pc, #24]	; (29008 <translate_error+0x44>)
   28ff0:	4806      	ldr	r0, [pc, #24]	; (2900c <translate_error+0x48>)
   28ff2:	f014 f8c8 	bl	3d186 <assert_print>
   28ff6:	4804      	ldr	r0, [pc, #16]	; (29008 <translate_error+0x44>)
   28ff8:	214c      	movs	r1, #76	; 0x4c
   28ffa:	f014 f8bd 	bl	3d178 <assert_post_action>
   28ffe:	4804      	ldr	r0, [pc, #16]	; (29010 <translate_error+0x4c>)
   29000:	e7ed      	b.n	28fde <translate_error+0x1a>
		return -ENOENT;
   29002:	f06f 0001 	mvn.w	r0, #1
   29006:	e7ea      	b.n	28fde <translate_error+0x1a>
   29008:	00046d3d 	.word	0x00046d3d
   2900c:	0004494f 	.word	0x0004494f
   29010:	baadbaad 	.word	0xbaadbaad

00029014 <cmee_enable>:
{
   29014:	b513      	push	{r0, r1, r4, lr}
   29016:	4604      	mov	r4, r0
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   29018:	aa01      	add	r2, sp, #4
   2901a:	490d      	ldr	r1, [pc, #52]	; (29050 <cmee_enable+0x3c>)
   2901c:	480d      	ldr	r0, [pc, #52]	; (29054 <cmee_enable+0x40>)
   2901e:	f00c fba1 	bl	35764 <nrf_modem_at_scanf>
	if (err < 0) {
   29022:	1e02      	subs	r2, r0, #0
   29024:	da0c      	bge.n	29040 <cmee_enable+0x2c>
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   29026:	2157      	movs	r1, #87	; 0x57
   29028:	480b      	ldr	r0, [pc, #44]	; (29058 <cmee_enable+0x44>)
   2902a:	f014 f8e6 	bl	3d1fa <z_log_minimal_printk>
		*was_enabled = false;
   2902e:	2300      	movs	r3, #0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   29030:	2101      	movs	r1, #1
   29032:	480a      	ldr	r0, [pc, #40]	; (2905c <cmee_enable+0x48>)
		*was_enabled = false;
   29034:	7023      	strb	r3, [r4, #0]
}
   29036:	b002      	add	sp, #8
   29038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   2903c:	f00c bb00 	b.w	35640 <nrf_modem_at_printf>
	return active ? true : false;
   29040:	9b01      	ldr	r3, [sp, #4]
	if (!cmee_is_active()) {
   29042:	2b00      	cmp	r3, #0
   29044:	d0f3      	beq.n	2902e <cmee_enable+0x1a>
		*was_enabled = true;
   29046:	2301      	movs	r3, #1
   29048:	7023      	strb	r3, [r4, #0]
}
   2904a:	b002      	add	sp, #8
   2904c:	bd10      	pop	{r4, pc}
   2904e:	bf00      	nop
   29050:	00046d71 	.word	0x00046d71
   29054:	00046d7b 	.word	0x00046d7b
   29058:	00046d84 	.word	0x00046d84
   2905c:	00046db0 	.word	0x00046db0

00029060 <cmee_disable>:
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   29060:	2100      	movs	r1, #0
   29062:	4801      	ldr	r0, [pc, #4]	; (29068 <cmee_disable+0x8>)
   29064:	f00c baec 	b.w	35640 <nrf_modem_at_printf>
   29068:	00046db0 	.word	0x00046db0

0002906c <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   2906c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2906e:	4606      	mov	r6, r0
   29070:	460f      	mov	r7, r1
   29072:	461c      	mov	r4, r3
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   29074:	4615      	mov	r5, r2
{
   29076:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
   29078:	b1d2      	cbz	r2, 290b0 <modem_key_mgmt_write+0x44>
   2907a:	b1cb      	cbz	r3, 290b0 <modem_key_mgmt_write+0x44>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   2907c:	f10d 000f 	add.w	r0, sp, #15
   29080:	f7ff ffc8 	bl	29014 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   29084:	4623      	mov	r3, r4
   29086:	463a      	mov	r2, r7
   29088:	4631      	mov	r1, r6
   2908a:	480b      	ldr	r0, [pc, #44]	; (290b8 <modem_key_mgmt_write+0x4c>)
   2908c:	9500      	str	r5, [sp, #0]
   2908e:	f00c fad7 	bl	35640 <nrf_modem_at_printf>
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   29092:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   29096:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   29098:	b90b      	cbnz	r3, 2909e <modem_key_mgmt_write+0x32>
		cmee_disable();
   2909a:	f7ff ffe1 	bl	29060 <cmee_disable>
	}

	if (err) {
   2909e:	b124      	cbz	r4, 290aa <modem_key_mgmt_write+0x3e>
		return translate_error(nrf_modem_at_err(err));
   290a0:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   290a4:	f7ff ff8e 	bl	28fc4 <translate_error>
   290a8:	4604      	mov	r4, r0
	}

	return 0;
}
   290aa:	4620      	mov	r0, r4
   290ac:	b005      	add	sp, #20
   290ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   290b0:	f06f 0415 	mvn.w	r4, #21
   290b4:	e7f9      	b.n	290aa <modem_key_mgmt_write+0x3e>
   290b6:	bf00      	nop
   290b8:	00046dbb 	.word	0x00046dbb

000290bc <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   290bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   290be:	4604      	mov	r4, r0
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   290c0:	f10d 000f 	add.w	r0, sp, #15
{
   290c4:	9101      	str	r1, [sp, #4]
	cmee_enable(&cmee_was_enabled);
   290c6:	f7ff ffa5 	bl	29014 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   290ca:	4621      	mov	r1, r4
   290cc:	9a01      	ldr	r2, [sp, #4]
   290ce:	4809      	ldr	r0, [pc, #36]	; (290f4 <modem_key_mgmt_delete+0x38>)
   290d0:	f00c fab6 	bl	35640 <nrf_modem_at_printf>

	if (!cmee_was_enabled) {
   290d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   290d8:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   290da:	b90b      	cbnz	r3, 290e0 <modem_key_mgmt_delete+0x24>
		cmee_disable();
   290dc:	f7ff ffc0 	bl	29060 <cmee_disable>
	}

	if (err) {
   290e0:	b124      	cbz	r4, 290ec <modem_key_mgmt_delete+0x30>
		return translate_error(nrf_modem_at_err(err));
   290e2:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   290e6:	f7ff ff6d 	bl	28fc4 <translate_error>
   290ea:	4604      	mov	r4, r0
	}

	return 0;
}
   290ec:	4620      	mov	r0, r4
   290ee:	b004      	add	sp, #16
   290f0:	bd10      	pop	{r4, pc}
   290f2:	bf00      	nop
   290f4:	00046dd3 	.word	0x00046dd3

000290f8 <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   290f8:	b570      	push	{r4, r5, r6, lr}
   290fa:	b086      	sub	sp, #24
   290fc:	460c      	mov	r4, r1
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   290fe:	4615      	mov	r5, r2
{
   29100:	9003      	str	r0, [sp, #12]
	if (exists == NULL) {
   29102:	b34a      	cbz	r2, 29158 <modem_key_mgmt_exists+0x60>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   29104:	f10d 0017 	add.w	r0, sp, #23
   29108:	f7ff ff84 	bl	29014 <cmee_enable>

	scratch_buf[0] = '\0';
   2910c:	2200      	movs	r2, #0
   2910e:	4814      	ldr	r0, [pc, #80]	; (29160 <modem_key_mgmt_exists+0x68>)
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   29110:	9b03      	ldr	r3, [sp, #12]
	scratch_buf[0] = '\0';
   29112:	7002      	strb	r2, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   29114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   29118:	9400      	str	r4, [sp, #0]
   2911a:	4a12      	ldr	r2, [pc, #72]	; (29164 <modem_key_mgmt_exists+0x6c>)
   2911c:	f00c fab6 	bl	3568c <nrf_modem_at_cmd>
			       "AT%%CMNG=1,%d,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   29120:	f89d 3017 	ldrb.w	r3, [sp, #23]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   29124:	4604      	mov	r4, r0
	if (!cmee_was_active) {
   29126:	b90b      	cbnz	r3, 2912c <modem_key_mgmt_exists+0x34>
		cmee_disable();
   29128:	f7ff ff9a 	bl	29060 <cmee_disable>
	}

	if (err) {
   2912c:	b13c      	cbz	r4, 2913e <modem_key_mgmt_exists+0x46>
		return translate_error(nrf_modem_at_err(err));
   2912e:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   29132:	f7ff ff47 	bl	28fc4 <translate_error>
   29136:	4604      	mov	r4, r0
	} else {
		*exists = false;
	}

	return 0;
}
   29138:	4620      	mov	r0, r4
   2913a:	b006      	add	sp, #24
   2913c:	bd70      	pop	{r4, r5, r6, pc}
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   2913e:	4808      	ldr	r0, [pc, #32]	; (29160 <modem_key_mgmt_exists+0x68>)
   29140:	f7f4 f87f 	bl	1d242 <strlen>
   29144:	4606      	mov	r6, r0
   29146:	4808      	ldr	r0, [pc, #32]	; (29168 <modem_key_mgmt_exists+0x70>)
   29148:	f7f4 f87b 	bl	1d242 <strlen>
   2914c:	4286      	cmp	r6, r0
		*exists = true;
   2914e:	bf8a      	itet	hi
   29150:	2301      	movhi	r3, #1
		*exists = false;
   29152:	702c      	strbls	r4, [r5, #0]
		*exists = true;
   29154:	702b      	strbhi	r3, [r5, #0]
		*exists = false;
   29156:	e7ef      	b.n	29138 <modem_key_mgmt_exists+0x40>
		return -EINVAL;
   29158:	f06f 0415 	mvn.w	r4, #21
   2915c:	e7ec      	b.n	29138 <modem_key_mgmt_exists+0x40>
   2915e:	bf00      	nop
   29160:	2001b71d 	.word	0x2001b71d
   29164:	00046de4 	.word	0x00046de4
   29168:	00045b54 	.word	0x00045b54

0002916c <date_time_now>:

	return 0;
}

int date_time_now(int64_t *unix_time_ms)
{
   2916c:	b510      	push	{r4, lr}
	int err;

	if (unix_time_ms == NULL) {
   2916e:	4604      	mov	r4, r0
   29170:	b930      	cbnz	r0, 29180 <date_time_now+0x14>
		LOG_ERR("The passed in pointer cannot be NULL");
   29172:	480b      	ldr	r0, [pc, #44]	; (291a0 <date_time_now+0x34>)
   29174:	2145      	movs	r1, #69	; 0x45
   29176:	f014 f840 	bl	3d1fa <z_log_minimal_printk>
   2917a:	f06f 0015 	mvn.w	r0, #21
	}

	err = date_time_core_now(unix_time_ms);

	return err;
}
   2917e:	bd10      	pop	{r4, pc}

bool date_time_is_valid(void)
{
	return date_time_core_is_valid();
   29180:	f000 f88e 	bl	292a0 <date_time_core_is_valid>
	if (!date_time_is_valid()) {
   29184:	b930      	cbnz	r0, 29194 <date_time_now+0x28>
		LOG_WRN("Valid time not currently available");
   29186:	4807      	ldr	r0, [pc, #28]	; (291a4 <date_time_now+0x38>)
   29188:	2157      	movs	r1, #87	; 0x57
   2918a:	f014 f836 	bl	3d1fa <z_log_minimal_printk>
		return -ENODATA;
   2918e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   29192:	e7f4      	b.n	2917e <date_time_now+0x12>
	err = date_time_core_now(unix_time_ms);
   29194:	4620      	mov	r0, r4
}
   29196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = date_time_core_now(unix_time_ms);
   2919a:	f000 b851 	b.w	29240 <date_time_core_now>
   2919e:	bf00      	nop
   291a0:	00046e04 	.word	0x00046e04
   291a4:	00046f61 	.word	0x00046f61

000291a8 <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   291a8:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   291aa:	bf1c      	itt	ne
   291ac:	4b03      	ldrne	r3, [pc, #12]	; (291bc <date_time_core_notify_event+0x14>)
   291ae:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   291b0:	4b03      	ldr	r3, [pc, #12]	; (291c0 <date_time_core_notify_event+0x18>)
   291b2:	681b      	ldr	r3, [r3, #0]
   291b4:	b10b      	cbz	r3, 291ba <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   291b6:	4801      	ldr	r0, [pc, #4]	; (291bc <date_time_core_notify_event+0x14>)
   291b8:	4718      	bx	r3
	}
}
   291ba:	4770      	bx	lr
   291bc:	2001c71d 	.word	0x2001c71d
   291c0:	2001943c 	.word	0x2001943c

000291c4 <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   291c4:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   291c6:	7803      	ldrb	r3, [r0, #0]
   291c8:	b9c3      	cbnz	r3, 291fc <date_time_lte_ind_handler+0x38>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   291ca:	7a03      	ldrb	r3, [r0, #8]
   291cc:	3b01      	subs	r3, #1
   291ce:	2b07      	cmp	r3, #7
   291d0:	d814      	bhi.n	291fc <date_time_lte_ind_handler+0x38>
   291d2:	e8df f003 	tbb	[pc, r3]
   291d6:	0f04      	.short	0x0f04
   291d8:	13041313 	.word	0x13041313
   291dc:	0413      	.short	0x0413
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid()) {
   291de:	f016 fd76 	bl	3fcce <date_time_is_valid>
   291e2:	b958      	cbnz	r0, 291fc <date_time_lte_ind_handler+0x38>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   291e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_reschedule(&time_work, K_SECONDS(1));
   291e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   291ec:	2300      	movs	r3, #0
   291ee:	4804      	ldr	r0, [pc, #16]	; (29200 <date_time_lte_ind_handler+0x3c>)
   291f0:	f00e bda2 	b.w	37d38 <k_work_reschedule>
}
   291f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   291f8:	f000 ba80 	b.w	296fc <date_time_modem_xtime_subscribe>
}
   291fc:	bd10      	pop	{r4, pc}
   291fe:	bf00      	nop
   29200:	20014500 	.word	0x20014500

00029204 <date_time_core_schedule_update>:
{
   29204:	b510      	push	{r4, lr}
		if (check_pending && k_work_delayable_is_pending(&time_work)) {
   29206:	b118      	cbz	r0, 29210 <date_time_core_schedule_update+0xc>
	return k_work_delayable_busy_get(dwork) != 0;
   29208:	4806      	ldr	r0, [pc, #24]	; (29224 <date_time_core_schedule_update+0x20>)
   2920a:	f018 fade 	bl	417ca <k_work_delayable_busy_get>
   2920e:	b938      	cbnz	r0, 29220 <date_time_core_schedule_update+0x1c>
}
   29210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   29214:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   29218:	2300      	movs	r3, #0
   2921a:	4802      	ldr	r0, [pc, #8]	; (29224 <date_time_core_schedule_update+0x20>)
   2921c:	f00e bd8c 	b.w	37d38 <k_work_reschedule>
}
   29220:	bd10      	pop	{r4, pc}
   29222:	bf00      	nop
   29224:	20014500 	.word	0x20014500

00029228 <date_time_handler>:
	z_impl_k_sem_give(sem);
   29228:	4801      	ldr	r0, [pc, #4]	; (29230 <date_time_handler+0x8>)
   2922a:	f00e b8b1 	b.w	37390 <z_impl_k_sem_give>
   2922e:	bf00      	nop
   29230:	200150c0 	.word	0x200150c0

00029234 <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   29234:	4801      	ldr	r0, [pc, #4]	; (2923c <date_time_core_init+0x8>)
   29236:	f7fe ba3f 	b.w	276b8 <lte_lc_register_handler>
   2923a:	bf00      	nop
   2923c:	000291c5 	.word	0x000291c5

00029240 <date_time_core_now>:
		date_time_core_schedule_update(false);
	}
}

int date_time_core_now(int64_t *unix_time_ms)
{
   29240:	b530      	push	{r4, r5, lr}
   29242:	4604      	mov	r4, r0
   29244:	b085      	sub	sp, #20
		union { uintptr_t x; struct timespec * val; } parm1 = { .val = ts };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   29246:	2001      	movs	r0, #1
   29248:	4669      	mov	r1, sp
   2924a:	f7fa fe97 	bl	23f7c <z_impl_clock_gettime>
	int err;
	struct timespec tp;

	err = clock_gettime(CLOCK_REALTIME, &tp);
	if (err) {
   2924e:	b150      	cbz	r0, 29266 <date_time_core_now+0x26>
		LOG_WRN("clock_gettime failed, errno %d", errno);
   29250:	f014 fe2b 	bl	3deaa <__errno>
   29254:	2157      	movs	r1, #87	; 0x57
   29256:	6802      	ldr	r2, [r0, #0]
   29258:	480c      	ldr	r0, [pc, #48]	; (2928c <date_time_core_now+0x4c>)
   2925a:	f013 ffce 	bl	3d1fa <z_log_minimal_printk>
		return -ENODATA;
   2925e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;

	return 0;
}
   29262:	b005      	add	sp, #20
   29264:	bd30      	pop	{r4, r5, pc}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
   29266:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2926a:	9b00      	ldr	r3, [sp, #0]
   2926c:	9d01      	ldr	r5, [sp, #4]
   2926e:	fba3 3201 	umull	r3, r2, r3, r1
   29272:	fb01 2205 	mla	r2, r1, r5, r2
   29276:	9902      	ldr	r1, [sp, #8]
   29278:	4d05      	ldr	r5, [pc, #20]	; (29290 <date_time_core_now+0x50>)
   2927a:	fb91 f1f5 	sdiv	r1, r1, r5
   2927e:	185b      	adds	r3, r3, r1
   29280:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   29284:	e9c4 3200 	strd	r3, r2, [r4]
	return 0;
   29288:	e7eb      	b.n	29262 <date_time_core_now+0x22>
   2928a:	bf00      	nop
   2928c:	00046f93 	.word	0x00046f93
   29290:	000f4240 	.word	0x000f4240

00029294 <date_time_core_register_handler>:
	return 0;
}

void date_time_core_register_handler(date_time_evt_handler_t evt_handler)
{
	if (evt_handler == NULL) {
   29294:	4b01      	ldr	r3, [pc, #4]	; (2929c <date_time_core_register_handler+0x8>)
   29296:	6018      	str	r0, [r3, #0]
	}

	LOG_DBG("Registering handler %p", evt_handler);

	app_evt_handler = evt_handler;
}
   29298:	4770      	bx	lr
   2929a:	bf00      	nop
   2929c:	2001943c 	.word	0x2001943c

000292a0 <date_time_core_is_valid>:

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   292a0:	4b03      	ldr	r3, [pc, #12]	; (292b0 <date_time_core_is_valid+0x10>)
   292a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   292a6:	4313      	orrs	r3, r2
}
   292a8:	bf14      	ite	ne
   292aa:	2001      	movne	r0, #1
   292ac:	2000      	moveq	r0, #0
   292ae:	4770      	bx	lr
   292b0:	200155f0 	.word	0x200155f0

000292b4 <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   292b4:	b510      	push	{r4, lr}
	if (date_time_last_update_uptime == 0) {
   292b6:	4c10      	ldr	r4, [pc, #64]	; (292f8 <date_time_core_current_check+0x44>)
   292b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   292bc:	4313      	orrs	r3, r2
   292be:	d016      	beq.n	292ee <date_time_core_current_check+0x3a>
	return z_impl_k_uptime_ticks();
   292c0:	f018 fabe 	bl	41840 <z_impl_k_uptime_ticks>
   292c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   292c8:	fba0 0302 	umull	r0, r3, r0, r2
   292cc:	fb02 3101 	mla	r1, r2, r1, r3
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   292d0:	e9d4 3200 	ldrd	r3, r2, [r4]
   292d4:	0bc0      	lsrs	r0, r0, #15
   292d6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   292da:	1ac0      	subs	r0, r0, r3
   292dc:	4b07      	ldr	r3, [pc, #28]	; (292fc <date_time_core_current_check+0x48>)
   292de:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   292e2:	eb61 0102 	sbc.w	r1, r1, r2
   292e6:	4298      	cmp	r0, r3
   292e8:	f171 0300 	sbcs.w	r3, r1, #0
   292ec:	db02      	blt.n	292f4 <date_time_core_current_check+0x40>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
   292ee:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   292f2:	bd10      	pop	{r4, pc}
	return 0;
   292f4:	2000      	movs	r0, #0
   292f6:	e7fc      	b.n	292f2 <date_time_core_current_check+0x3e>
   292f8:	200155f0 	.word	0x200155f0
   292fc:	0036ee80 	.word	0x0036ee80

00029300 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   29300:	b5f0      	push	{r4, r5, r6, r7, lr}
   29302:	b08f      	sub	sp, #60	; 0x3c
   29304:	4606      	mov	r6, r0
   29306:	460d      	mov	r5, r1
   29308:	4617      	mov	r7, r2
	struct timespec tp = { 0 };
   2930a:	2100      	movs	r1, #0
   2930c:	2210      	movs	r2, #16
   2930e:	4668      	mov	r0, sp
   29310:	f018 fc26 	bl	41b60 <memset>
	struct tm ltm = { 0 };
   29314:	2224      	movs	r2, #36	; 0x24
   29316:	2100      	movs	r1, #0
   29318:	a805      	add	r0, sp, #20
   2931a:	f018 fc21 	bl	41b60 <memset>
   2931e:	f018 fa8f 	bl	41840 <z_impl_k_uptime_ticks>
   29322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29326:	fba0 3002 	umull	r3, r0, r0, r2
   2932a:	fb02 0401 	mla	r4, r2, r1, r0
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   2932e:	f8df c074 	ldr.w	ip, [pc, #116]	; 293a4 <date_time_core_store+0xa4>
   29332:	0bdb      	lsrs	r3, r3, #15
   29334:	ea43 4344 	orr.w	r3, r3, r4, lsl #17

	date_time_core_schedule_update(false);
   29338:	2000      	movs	r0, #0
   2933a:	0be4      	lsrs	r4, r4, #15
	date_time_last_update_uptime = k_uptime_get();
   2933c:	e9cc 3400 	strd	r3, r4, [ip]
	date_time_core_schedule_update(false);
   29340:	f7ff ff60 	bl	29204 <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   29344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29348:	2300      	movs	r3, #0
   2934a:	4630      	mov	r0, r6
   2934c:	4629      	mov	r1, r5
   2934e:	f7f3 fd7b 	bl	1ce48 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   29352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	tp.tv_sec = curr_time_ms / 1000;
   29356:	e9cd 0100 	strd	r0, r1, [sp]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   2935a:	2300      	movs	r3, #0
   2935c:	4630      	mov	r0, r6
   2935e:	4629      	mov	r1, r5
   29360:	f7f3 fd72 	bl	1ce48 <__aeabi_ldivmod>
   29364:	4b0d      	ldr	r3, [pc, #52]	; (2939c <date_time_core_store+0x9c>)

	ret = clock_settime(CLOCK_REALTIME, &tp);
   29366:	4669      	mov	r1, sp
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   29368:	435a      	muls	r2, r3
	ret = clock_settime(CLOCK_REALTIME, &tp);
   2936a:	2001      	movs	r0, #1
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   2936c:	9202      	str	r2, [sp, #8]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   2936e:	f7f4 ff47 	bl	1e200 <clock_settime>
	if (ret != 0) {
   29372:	4602      	mov	r2, r0
   29374:	b140      	cbz	r0, 29388 <date_time_core_store+0x88>
		LOG_ERR("Could not set system time, %d", ret);
   29376:	480a      	ldr	r0, [pc, #40]	; (293a0 <date_time_core_store+0xa0>)
   29378:	2145      	movs	r1, #69	; 0x45
   2937a:	f013 ff3e 	bl	3d1fa <z_log_minimal_printk>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   2937e:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   29380:	f7ff ff12 	bl	291a8 <date_time_core_notify_event>
}
   29384:	b00f      	add	sp, #60	; 0x3c
   29386:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   29388:	a905      	add	r1, sp, #20
   2938a:	4668      	mov	r0, sp
   2938c:	f010 fe76 	bl	3a07c <gmtime_r>
	date_time_modem_store(&ltm);
   29390:	a805      	add	r0, sp, #20
   29392:	f000 f989 	bl	296a8 <date_time_modem_store>
	date_time_core_notify_event(time_source);
   29396:	4638      	mov	r0, r7
   29398:	e7f2      	b.n	29380 <date_time_core_store+0x80>
   2939a:	bf00      	nop
   2939c:	000f4240 	.word	0x000f4240
   293a0:	00046fb7 	.word	0x00046fb7
   293a4:	200155f0 	.word	0x200155f0

000293a8 <date_time_update_thread>:
{
   293a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   293aa:	2400      	movs	r4, #0
   293ac:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   293ae:	4e16      	ldr	r6, [pc, #88]	; (29408 <date_time_update_thread+0x60>)
   293b0:	f04f 32ff 	mov.w	r2, #4294967295
   293b4:	f04f 33ff 	mov.w	r3, #4294967295
   293b8:	4630      	mov	r0, r6
   293ba:	f00e f825 	bl	37408 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   293be:	f7ff ff79 	bl	292b4 <date_time_core_current_check>
		if (err == 0) {
   293c2:	b930      	cbnz	r0, 293d2 <date_time_update_thread+0x2a>
			date_time_core_schedule_update(true);
   293c4:	2001      	movs	r0, #1
   293c6:	f7ff ff1d 	bl	29204 <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   293ca:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   293cc:	f7ff feec 	bl	291a8 <date_time_core_notify_event>
   293d0:	e7ee      	b.n	293b0 <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   293d2:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   293d4:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   293d8:	f000 f92c 	bl	29634 <date_time_modem_get>
		if (err == 0) {
   293dc:	4602      	mov	r2, r0
   293de:	b920      	cbnz	r0, 293ea <date_time_update_thread+0x42>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   293e0:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   293e4:	f7ff ff8c 	bl	29300 <date_time_core_store>
			continue;
   293e8:	e7e2      	b.n	293b0 <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   293ea:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   293ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   293f0:	f000 f80c 	bl	2940c <date_time_ntp_get>
		if (err == 0) {
   293f4:	b918      	cbnz	r0, 293fe <date_time_update_thread+0x56>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   293f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   293fa:	2201      	movs	r2, #1
   293fc:	e7f2      	b.n	293e4 <date_time_update_thread+0x3c>
		date_time_core_schedule_update(true);
   293fe:	2001      	movs	r0, #1
   29400:	f7ff ff00 	bl	29204 <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   29404:	2003      	movs	r0, #3
   29406:	e7e1      	b.n	293cc <date_time_update_thread+0x24>
   29408:	200150c0 	.word	0x200150c0

0002940c <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   2940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29410:	b09a      	sub	sp, #104	; 0x68
   29412:	4606      	mov	r6, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   29414:	a806      	add	r0, sp, #24
   29416:	f7fe fa87 	bl	27928 <lte_lc_nw_reg_status_get>
	if (err) {
   2941a:	4605      	mov	r5, r0
   2941c:	b138      	cbz	r0, 2942e <date_time_ntp_get+0x22>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   2941e:	4602      	mov	r2, r0
   29420:	2157      	movs	r1, #87	; 0x57
   29422:	4832      	ldr	r0, [pc, #200]	; (294ec <date_time_ntp_get+0xe0>)
   29424:	f013 fee9 	bl	3d1fa <z_log_minimal_printk>
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
   29428:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2942c:	e04d      	b.n	294ca <date_time_ntp_get+0xbe>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   2942e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   29432:	2b08      	cmp	r3, #8
   29434:	d003      	beq.n	2943e <date_time_ntp_get+0x32>
   29436:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2943a:	2b01      	cmp	r3, #1
   2943c:	d1f4      	bne.n	29428 <date_time_ntp_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2943e:	4f2c      	ldr	r7, [pc, #176]	; (294f0 <date_time_ntp_get+0xe4>)

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   29440:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 29504 <date_time_ntp_get+0xf8>
	err = sntp_query(&sntp_ctx, timeout, time);
   29444:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 29500 <date_time_ntp_get+0xf4>
		LOG_WRN("sntp_query, error: %d", err);
   29448:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 29508 <date_time_ntp_get+0xfc>
	struct addrinfo hints = {
   2944c:	2250      	movs	r2, #80	; 0x50
   2944e:	2100      	movs	r1, #0
   29450:	a806      	add	r0, sp, #24
		err =  sntp_time_request(servers[i],
   29452:	f857 4b04 	ldr.w	r4, [r7], #4
	struct addrinfo hints = {
   29456:	f018 fb83 	bl	41b60 <memset>
   2945a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2945e:	aa06      	add	r2, sp, #24
   29460:	9307      	str	r3, [sp, #28]
   29462:	4641      	mov	r1, r8
   29464:	466b      	mov	r3, sp
   29466:	4620      	mov	r0, r4
   29468:	f014 f9f9 	bl	3d85e <zsock_getaddrinfo>
	if (err) {
   2946c:	4602      	mov	r2, r0
   2946e:	b160      	cbz	r0, 2948a <date_time_ntp_get+0x7e>
		LOG_WRN("getaddrinfo, error: %d", err);
   29470:	2157      	movs	r1, #87	; 0x57
   29472:	4820      	ldr	r0, [pc, #128]	; (294f4 <date_time_ntp_get+0xe8>)
   29474:	f013 fec1 	bl	3d1fa <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   29478:	2d01      	cmp	r5, #1
   2947a:	d104      	bne.n	29486 <date_time_ntp_get+0x7a>
	LOG_WRN("Did not get time from any NTP server");
   2947c:	2157      	movs	r1, #87	; 0x57
   2947e:	481e      	ldr	r0, [pc, #120]	; (294f8 <date_time_ntp_get+0xec>)
   29480:	f013 febb 	bl	3d1fa <z_log_minimal_printk>
   29484:	e7d0      	b.n	29428 <date_time_ntp_get+0x1c>
   29486:	2501      	movs	r5, #1
   29488:	e7e0      	b.n	2944c <date_time_ntp_get+0x40>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   2948a:	9b00      	ldr	r3, [sp, #0]
   2948c:	a801      	add	r0, sp, #4
   2948e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   29492:	f014 f9b0 	bl	3d7f6 <sntp_init>
	if (err) {
   29496:	4604      	mov	r4, r0
   29498:	b1d8      	cbz	r0, 294d2 <date_time_ntp_get+0xc6>
		LOG_WRN("sntp_init, error: %d", err);
   2949a:	2157      	movs	r1, #87	; 0x57
   2949c:	4602      	mov	r2, r0
   2949e:	4817      	ldr	r0, [pc, #92]	; (294fc <date_time_ntp_get+0xf0>)
		LOG_WRN("sntp_query, error: %d", err);
   294a0:	f013 feab 	bl	3d1fa <z_log_minimal_printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   294a4:	9800      	ldr	r0, [sp, #0]
   294a6:	f014 f9dc 	bl	3d862 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   294aa:	a801      	add	r0, sp, #4
   294ac:	f014 f9d2 	bl	3d854 <sntp_close>
		if (err) {
   294b0:	2c00      	cmp	r4, #0
   294b2:	d1e1      	bne.n	29478 <date_time_ntp_get+0x6c>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   294b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   294b8:	4811      	ldr	r0, [pc, #68]	; (29500 <date_time_ntp_get+0xf4>)
   294ba:	6803      	ldr	r3, [r0, #0]
   294bc:	6845      	ldr	r5, [r0, #4]
   294be:	fba3 3201 	umull	r3, r2, r3, r1
   294c2:	fb01 2205 	mla	r2, r1, r5, r2
   294c6:	e9c6 3200 	strd	r3, r2, [r6]
}
   294ca:	4620      	mov	r0, r4
   294cc:	b01a      	add	sp, #104	; 0x68
   294ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = sntp_query(&sntp_ctx, timeout, time);
   294d2:	464a      	mov	r2, r9
   294d4:	f241 3188 	movw	r1, #5000	; 0x1388
   294d8:	a801      	add	r0, sp, #4
   294da:	f7f8 fbd1 	bl	21c80 <sntp_query>
	if (err) {
   294de:	4604      	mov	r4, r0
   294e0:	2800      	cmp	r0, #0
   294e2:	d0df      	beq.n	294a4 <date_time_ntp_get+0x98>
		LOG_WRN("sntp_query, error: %d", err);
   294e4:	4602      	mov	r2, r0
   294e6:	2157      	movs	r1, #87	; 0x57
   294e8:	4650      	mov	r0, sl
   294ea:	e7d9      	b.n	294a0 <date_time_ntp_get+0x94>
   294ec:	00046fe6 	.word	0x00046fe6
   294f0:	000435dc 	.word	0x000435dc
   294f4:	00047029 	.word	0x00047029
   294f8:	0004707a 	.word	0x0004707a
   294fc:	00047045 	.word	0x00047045
   29500:	200155f8 	.word	0x200155f8
   29504:	00047025 	.word	0x00047025
   29508:	0004705f 	.word	0x0004705f

0002950c <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   2950c:	b530      	push	{r4, r5, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   2950e:	4604      	mov	r4, r0
{
   29510:	b08d      	sub	sp, #52	; 0x34
	if (notif == NULL) {
   29512:	2800      	cmp	r0, #0
   29514:	f000 8082 	beq.w	2961c <date_time_at_xtime_handler+0x110>
		return;
	}
	modem_valid_network_time = true;
   29518:	2201      	movs	r2, #1
   2951a:	4b41      	ldr	r3, [pc, #260]	; (29620 <date_time_at_xtime_handler+0x114>)
   2951c:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   2951e:	f7ff fec9 	bl	292b4 <date_time_core_current_check>
	if (err == 0) {
   29522:	2800      	cmp	r0, #0
   29524:	d07a      	beq.n	2961c <date_time_at_xtime_handler+0x110>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   29526:	212c      	movs	r1, #44	; 0x2c
   29528:	4620      	mov	r0, r4
   2952a:	f018 fcd7 	bl	41edc <strchr>
	if (time_str_start == NULL) {
   2952e:	4605      	mov	r5, r0
   29530:	b938      	cbnz	r0, 29542 <date_time_at_xtime_handler+0x36>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   29532:	4622      	mov	r2, r4
   29534:	2145      	movs	r1, #69	; 0x45
   29536:	483b      	ldr	r0, [pc, #236]	; (29624 <date_time_at_xtime_handler+0x118>)
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   29538:	b00d      	add	sp, #52	; 0x34
   2953a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   2953e:	f013 be5c 	b.w	3d1fa <z_log_minimal_printk>
	if (strlen(time_str_start) < 17) {
   29542:	f7f3 fe7e 	bl	1d242 <strlen>
   29546:	2810      	cmp	r0, #16
   29548:	d803      	bhi.n	29552 <date_time_at_xtime_handler+0x46>
		LOG_ERR("%%XTIME notification too short: %s", notif);
   2954a:	4622      	mov	r2, r4
   2954c:	2145      	movs	r1, #69	; 0x45
   2954e:	4836      	ldr	r0, [pc, #216]	; (29628 <date_time_at_xtime_handler+0x11c>)
   29550:	e7f2      	b.n	29538 <date_time_at_xtime_handler+0x2c>
	if (*(time_str_start + 1) != '"') {
   29552:	786b      	ldrb	r3, [r5, #1]
   29554:	2b22      	cmp	r3, #34	; 0x22
   29556:	d003      	beq.n	29560 <date_time_at_xtime_handler+0x54>
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   29558:	4622      	mov	r2, r4
   2955a:	2145      	movs	r1, #69	; 0x45
   2955c:	4833      	ldr	r0, [pc, #204]	; (2962c <date_time_at_xtime_handler+0x120>)
   2955e:	e7eb      	b.n	29538 <date_time_at_xtime_handler+0x2c>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   29560:	aa01      	add	r2, sp, #4
   29562:	2306      	movs	r3, #6
   29564:	210c      	movs	r1, #12
   29566:	1ca8      	adds	r0, r5, #2
   29568:	f013 fbc9 	bl	3ccfe <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   2956c:	2805      	cmp	r0, #5
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   2956e:	4602      	mov	r2, r0
	if (time_buf_len < sizeof(time_buf)) {
   29570:	d804      	bhi.n	2957c <date_time_at_xtime_handler+0x70>
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   29572:	4623      	mov	r3, r4
   29574:	2145      	movs	r1, #69	; 0x45
   29576:	482e      	ldr	r0, [pc, #184]	; (29630 <date_time_at_xtime_handler+0x124>)
   29578:	f013 fe3f 	bl	3d1fa <z_log_minimal_printk>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   2957c:	f89d 1006 	ldrb.w	r1, [sp, #6]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   29580:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   29584:	f001 000f 	and.w	r0, r1, #15
   29588:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2958c:	0909      	lsrs	r1, r1, #4
   2958e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   29592:	b2c9      	uxtb	r1, r1
   29594:	9106      	str	r1, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   29596:	f89d 1007 	ldrb.w	r1, [sp, #7]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   2959a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   2959e:	f001 000f 	and.w	r0, r1, #15
   295a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   295a6:	0909      	lsrs	r1, r1, #4
   295a8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   295ac:	b2c9      	uxtb	r1, r1
   295ae:	9105      	str	r1, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   295b0:	f89d 1008 	ldrb.w	r1, [sp, #8]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   295b4:	f001 000f 	and.w	r0, r1, #15
   295b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   295bc:	0909      	lsrs	r1, r1, #4
   295be:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   295c2:	b2c9      	uxtb	r1, r1
   295c4:	9104      	str	r1, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   295c6:	f89d 1009 	ldrb.w	r1, [sp, #9]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   295ca:	f001 000f 	and.w	r0, r1, #15
   295ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   295d2:	0909      	lsrs	r1, r1, #4
   295d4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   295d8:	b2c9      	uxtb	r1, r1
   295da:	9103      	str	r1, [sp, #12]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   295dc:	f002 010f 	and.w	r1, r2, #15
   295e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   295e4:	0912      	lsrs	r2, r2, #4
   295e6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   295ea:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   295ec:	3264      	adds	r2, #100	; 0x64
   295ee:	9208      	str	r2, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   295f0:	f003 020f 	and.w	r2, r3, #15
   295f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   295f8:	091b      	lsrs	r3, r3, #4
   295fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   295fe:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   29600:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29602:	a803      	add	r0, sp, #12
	date_time.tm_mon = date_time.tm_mon - 1;
   29604:	9307      	str	r3, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29606:	f7f8 f805 	bl	21614 <timeutil_timegm64>
   2960a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2960e:	fba0 0403 	umull	r0, r4, r0, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   29612:	2200      	movs	r2, #0
   29614:	fb03 4101 	mla	r1, r3, r1, r4
   29618:	f7ff fe72 	bl	29300 <date_time_core_store>
}
   2961c:	b00d      	add	sp, #52	; 0x34
   2961e:	bd30      	pop	{r4, r5, pc}
   29620:	2001c71e 	.word	0x2001c71e
   29624:	000470bf 	.word	0x000470bf
   29628:	000470f1 	.word	0x000470f1
   2962c:	00047119 	.word	0x00047119
   29630:	00047155 	.word	0x00047155

00029634 <date_time_modem_get>:
{
   29634:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   29636:	4b18      	ldr	r3, [pc, #96]	; (29698 <date_time_modem_get+0x64>)
{
   29638:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   2963a:	781b      	ldrb	r3, [r3, #0]
{
   2963c:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   2963e:	b1a3      	cbz	r3, 2966a <date_time_modem_get+0x36>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   29640:	ab06      	add	r3, sp, #24
   29642:	9302      	str	r3, [sp, #8]
   29644:	ab07      	add	r3, sp, #28
   29646:	9301      	str	r3, [sp, #4]
   29648:	ad05      	add	r5, sp, #20
   2964a:	ab08      	add	r3, sp, #32
   2964c:	9300      	str	r3, [sp, #0]
   2964e:	aa0a      	add	r2, sp, #40	; 0x28
   29650:	4912      	ldr	r1, [pc, #72]	; (2969c <date_time_modem_get+0x68>)
   29652:	4813      	ldr	r0, [pc, #76]	; (296a0 <date_time_modem_get+0x6c>)
   29654:	9503      	str	r5, [sp, #12]
   29656:	ab09      	add	r3, sp, #36	; 0x24
   29658:	f00c f884 	bl	35764 <nrf_modem_at_scanf>
	if (rc != 6) {
   2965c:	2806      	cmp	r0, #6
	rc = nrf_modem_at_scanf("AT+CCLK?",
   2965e:	4602      	mov	r2, r0
	if (rc != 6) {
   29660:	d006      	beq.n	29670 <date_time_modem_get+0x3c>
		LOG_WRN("Did not get time from cellular network (error: %d). "
   29662:	2157      	movs	r1, #87	; 0x57
   29664:	480f      	ldr	r0, [pc, #60]	; (296a4 <date_time_modem_get+0x70>)
   29666:	f013 fdc8 	bl	3d1fa <z_log_minimal_printk>
		return -ENODATA;
   2966a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2966e:	e011      	b.n	29694 <date_time_modem_get+0x60>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   29670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29672:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   29674:	3364      	adds	r3, #100	; 0x64
   29676:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   29678:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2967a:	3b01      	subs	r3, #1
   2967c:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2967e:	f7f7 ffc9 	bl	21614 <timeutil_timegm64>
   29682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29686:	fba0 3002 	umull	r3, r0, r0, r2
   2968a:	fb02 0001 	mla	r0, r2, r1, r0
   2968e:	e9c4 3000 	strd	r3, r0, [r4]
	return 0;
   29692:	2000      	movs	r0, #0
}
   29694:	b00f      	add	sp, #60	; 0x3c
   29696:	bd30      	pop	{r4, r5, pc}
   29698:	2001c71e 	.word	0x2001c71e
   2969c:	0004718c 	.word	0x0004718c
   296a0:	000469d7 	.word	0x000469d7
   296a4:	000471a6 	.word	0x000471a6

000296a8 <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   296a8:	b530      	push	{r4, r5, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   296aa:	4b11      	ldr	r3, [pc, #68]	; (296f0 <date_time_modem_store+0x48>)
{
   296ac:	b085      	sub	sp, #20
	if (!modem_valid_network_time) {
   296ae:	781b      	ldrb	r3, [r3, #0]
   296b0:	b9db      	cbnz	r3, 296ea <date_time_modem_store+0x42>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   296b2:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   296b6:	2464      	movs	r4, #100	; 0x64
   296b8:	fb91 f5f4 	sdiv	r5, r1, r4
   296bc:	9303      	str	r3, [sp, #12]
   296be:	6803      	ldr	r3, [r0, #0]
   296c0:	3201      	adds	r2, #1
   296c2:	9302      	str	r3, [sp, #8]
   296c4:	6843      	ldr	r3, [r0, #4]
   296c6:	fb04 1115 	mls	r1, r4, r5, r1
   296ca:	9301      	str	r3, [sp, #4]
   296cc:	6883      	ldr	r3, [r0, #8]
   296ce:	9300      	str	r3, [sp, #0]
   296d0:	68c3      	ldr	r3, [r0, #12]
   296d2:	4808      	ldr	r0, [pc, #32]	; (296f4 <date_time_modem_store+0x4c>)
   296d4:	f00b ffb4 	bl	35640 <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   296d8:	4602      	mov	r2, r0
   296da:	b130      	cbz	r0, 296ea <date_time_modem_store+0x42>
			LOG_ERR("Setting modem time failed, %d", ret);
   296dc:	2145      	movs	r1, #69	; 0x45
   296de:	4806      	ldr	r0, [pc, #24]	; (296f8 <date_time_modem_store+0x50>)
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   296e0:	b005      	add	sp, #20
   296e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Setting modem time failed, %d", ret);
   296e6:	f013 bd88 	b.w	3d1fa <z_log_minimal_printk>
}
   296ea:	b005      	add	sp, #20
   296ec:	bd30      	pop	{r4, r5, pc}
   296ee:	bf00      	nop
   296f0:	2001c71e 	.word	0x2001c71e
   296f4:	0004723b 	.word	0x0004723b
   296f8:	00047268 	.word	0x00047268

000296fc <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   296fc:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   296fe:	4806      	ldr	r0, [pc, #24]	; (29718 <date_time_modem_xtime_subscribe+0x1c>)
   29700:	f00b ff9e 	bl	35640 <nrf_modem_at_printf>

	if (err) {
   29704:	4602      	mov	r2, r0
   29706:	b128      	cbz	r0, 29714 <date_time_modem_xtime_subscribe+0x18>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   29708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   2970c:	2145      	movs	r1, #69	; 0x45
   2970e:	4803      	ldr	r0, [pc, #12]	; (2971c <date_time_modem_xtime_subscribe+0x20>)
   29710:	f013 bd73 	b.w	3d1fa <z_log_minimal_printk>
}
   29714:	bd08      	pop	{r3, pc}
   29716:	bf00      	nop
   29718:	0004728b 	.word	0x0004728b
   2971c:	00047297 	.word	0x00047297

00029720 <multicell_location_get>:


int multicell_location_get(enum multicell_service service,
			   const struct lte_lc_cells_info *cell_data,
			   struct multicell_location *location)
{
   29720:	b570      	push	{r4, r5, r6, lr}
   29722:	4606      	mov	r6, r0
   29724:	4615      	mov	r5, r2
	if ((cell_data == NULL) || (location == NULL)) {
   29726:	460c      	mov	r4, r1
   29728:	b1f1      	cbz	r1, 29768 <multicell_location_get+0x48>
   2972a:	b1ea      	cbz	r2, 29768 <multicell_location_get+0x48>
		return -EINVAL;
	}

	if (cell_data->current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   2972c:	688b      	ldr	r3, [r1, #8]
   2972e:	3301      	adds	r3, #1
   29730:	d106      	bne.n	29740 <multicell_location_get+0x20>
		LOG_WRN("Invalid cell ID, device may not be connected to a network");
   29732:	480f      	ldr	r0, [pc, #60]	; (29770 <multicell_location_get+0x50>)
   29734:	2157      	movs	r1, #87	; 0x57
   29736:	f013 fd60 	bl	3d1fa <z_log_minimal_printk>
		return -ENOENT;
   2973a:	f06f 0001 	mvn.w	r0, #1
			cell_data->ncells_count, CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS);
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
	}

	return location_service_get_cell_location(service, cell_data, location);
}
   2973e:	bd70      	pop	{r4, r5, r6, pc}
	if (cell_data->ncells_count > CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS) {
   29740:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   29744:	2a08      	cmp	r2, #8
   29746:	d908      	bls.n	2975a <multicell_location_get+0x3a>
		LOG_WRN("Found %d neighbor cells, but %d cells will be used in location request",
   29748:	2157      	movs	r1, #87	; 0x57
   2974a:	480a      	ldr	r0, [pc, #40]	; (29774 <multicell_location_get+0x54>)
   2974c:	2308      	movs	r3, #8
   2974e:	f013 fd54 	bl	3d1fa <z_log_minimal_printk>
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
   29752:	2157      	movs	r1, #87	; 0x57
   29754:	4808      	ldr	r0, [pc, #32]	; (29778 <multicell_location_get+0x58>)
   29756:	f013 fd50 	bl	3d1fa <z_log_minimal_printk>
	return location_service_get_cell_location(service, cell_data, location);
   2975a:	462a      	mov	r2, r5
   2975c:	4621      	mov	r1, r4
   2975e:	4630      	mov	r0, r6
}
   29760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return location_service_get_cell_location(service, cell_data, location);
   29764:	f000 b858 	b.w	29818 <location_service_get_cell_location>
		return -EINVAL;
   29768:	f06f 0015 	mvn.w	r0, #21
   2976c:	e7e7      	b.n	2973e <multicell_location_get+0x1e>
   2976e:	bf00      	nop
   29770:	000472df 	.word	0x000472df
   29774:	0004731e 	.word	0x0004731e
   29778:	0004736a 	.word	0x0004736a

0002977c <multicell_location_provision_certificate>:

	return 0;
}

int multicell_location_provision_certificate(bool overwrite)
{
   2977c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2977e:	4606      	mov	r6, r0
	int ret = -ENOTSUP;

#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	ret = multicell_location_provision_service_certificate(
   29780:	2001      	movs	r0, #1
   29782:	f016 faa8 	bl	3fcd6 <location_service_get_certificate>
	if (certificate == NULL) {
   29786:	4605      	mov	r5, r0
   29788:	b940      	cbnz	r0, 2979c <multicell_location_provision_certificate+0x20>
		LOG_ERR("No certificate was provided by the location service");
   2978a:	2145      	movs	r1, #69	; 0x45
   2978c:	481c      	ldr	r0, [pc, #112]	; (29800 <multicell_location_provision_certificate+0x84>)
   2978e:	f013 fd34 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   29792:	f06f 040d 	mvn.w	r4, #13
	if (ret) {
		return ret;
	}
#endif
	return ret;
}
   29796:	4620      	mov	r0, r4
   29798:	b002      	add	sp, #8
   2979a:	bd70      	pop	{r4, r5, r6, pc}
	err = modem_key_mgmt_exists(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   2979c:	2100      	movs	r1, #0
   2979e:	4819      	ldr	r0, [pc, #100]	; (29804 <multicell_location_provision_certificate+0x88>)
   297a0:	f10d 0207 	add.w	r2, sp, #7
   297a4:	f7ff fca8 	bl	290f8 <modem_key_mgmt_exists>
	if (err) {
   297a8:	4604      	mov	r4, r0
   297aa:	b128      	cbz	r0, 297b8 <multicell_location_provision_certificate+0x3c>
		LOG_ERR("Failed to check for certificates err %d", err);
   297ac:	2145      	movs	r1, #69	; 0x45
   297ae:	4602      	mov	r2, r0
   297b0:	4815      	ldr	r0, [pc, #84]	; (29808 <multicell_location_provision_certificate+0x8c>)
		LOG_ERR("Failed to provision certificate, err %d", err);
   297b2:	f013 fd22 	bl	3d1fa <z_log_minimal_printk>
		return err;
   297b6:	e7ee      	b.n	29796 <multicell_location_provision_certificate+0x1a>
	if (exists && overwrite) {
   297b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   297bc:	b15b      	cbz	r3, 297d6 <multicell_location_provision_certificate+0x5a>
   297be:	2e00      	cmp	r6, #0
   297c0:	d0e9      	beq.n	29796 <multicell_location_provision_certificate+0x1a>
		err = modem_key_mgmt_delete(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   297c2:	4601      	mov	r1, r0
   297c4:	480f      	ldr	r0, [pc, #60]	; (29804 <multicell_location_provision_certificate+0x88>)
   297c6:	f7ff fc79 	bl	290bc <modem_key_mgmt_delete>
		if (err) {
   297ca:	4602      	mov	r2, r0
   297cc:	b118      	cbz	r0, 297d6 <multicell_location_provision_certificate+0x5a>
			LOG_ERR("Failed to delete existing certificate, err %d", err);
   297ce:	2145      	movs	r1, #69	; 0x45
   297d0:	480e      	ldr	r0, [pc, #56]	; (2980c <multicell_location_provision_certificate+0x90>)
   297d2:	f013 fd12 	bl	3d1fa <z_log_minimal_printk>
	LOG_INF("Provisioning certificate");
   297d6:	2149      	movs	r1, #73	; 0x49
   297d8:	480d      	ldr	r0, [pc, #52]	; (29810 <multicell_location_provision_certificate+0x94>)
   297da:	f013 fd0e 	bl	3d1fa <z_log_minimal_printk>
	err = modem_key_mgmt_write(sec_tag,
   297de:	4628      	mov	r0, r5
   297e0:	f7f3 fd2f 	bl	1d242 <strlen>
   297e4:	462a      	mov	r2, r5
   297e6:	4603      	mov	r3, r0
   297e8:	2100      	movs	r1, #0
   297ea:	4806      	ldr	r0, [pc, #24]	; (29804 <multicell_location_provision_certificate+0x88>)
   297ec:	f7ff fc3e 	bl	2906c <modem_key_mgmt_write>
	if (err) {
   297f0:	4604      	mov	r4, r0
   297f2:	2800      	cmp	r0, #0
   297f4:	d0cf      	beq.n	29796 <multicell_location_provision_certificate+0x1a>
		LOG_ERR("Failed to provision certificate, err %d", err);
   297f6:	4602      	mov	r2, r0
   297f8:	2145      	movs	r1, #69	; 0x45
   297fa:	4806      	ldr	r0, [pc, #24]	; (29814 <multicell_location_provision_certificate+0x98>)
   297fc:	e7d9      	b.n	297b2 <multicell_location_provision_certificate+0x36>
   297fe:	bf00      	nop
   29800:	000473b2 	.word	0x000473b2
   29804:	01010001 	.word	0x01010001
   29808:	000473eb 	.word	0x000473eb
   2980c:	00047418 	.word	0x00047418
   29810:	0004744b 	.word	0x0004744b
   29814:	00047469 	.word	0x00047469

00029818 <location_service_get_cell_location>:

int location_service_get_cell_location(
	enum multicell_service service,
	const struct lte_lc_cells_info *cell_data,
	struct multicell_location *const location)
{
   29818:	b410      	push	{r4}
   2981a:	4604      	mov	r4, r0
#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   2981c:	2c01      	cmp	r4, #1
{
   2981e:	4608      	mov	r0, r1
   29820:	4613      	mov	r3, r2
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   29822:	d806      	bhi.n	29832 <location_service_get_cell_location+0x1a>
		return location_service_get_cell_location_nrf_cloud(
   29824:	f44f 7200 	mov.w	r2, #512	; 0x200
   29828:	4904      	ldr	r1, [pc, #16]	; (2983c <location_service_get_cell_location+0x24>)
			cell_data, recv_buf, sizeof(recv_buf), location);
	}
#endif
	/* We should never get here as at least one service must be enabled */
	return -ENOTSUP;
}
   2982a:	f85d 4b04 	ldr.w	r4, [sp], #4
		return location_service_get_cell_location_nrf_cloud(
   2982e:	f000 b835 	b.w	2989c <location_service_get_cell_location_nrf_cloud>
}
   29832:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29836:	f85d 4b04 	ldr.w	r4, [sp], #4
   2983a:	4770      	bx	lr
   2983c:	2001c71f 	.word	0x2001c71f

00029840 <location_service_location_ready_cb>:
	return tls_certificate;
}

#if defined(CONFIG_NRF_CLOUD_MQTT)
static void location_service_location_ready_cb(const struct nrf_cloud_cell_pos_result *const result)
{
   29840:	b538      	push	{r3, r4, r5, lr}
	if ((result != NULL) && (result->err == NRF_CLOUD_ERROR_NONE)) {
   29842:	4604      	mov	r4, r0
   29844:	b1d8      	cbz	r0, 2987e <location_service_location_ready_cb+0x3e>
   29846:	69c2      	ldr	r2, [r0, #28]
   29848:	b9aa      	cbnz	r2, 29876 <location_service_location_ready_cb+0x36>
		nrf_cloud_location.latitude = result->lat;
   2984a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2984e:	f7f3 faab 	bl	1cda8 <__aeabi_d2f>
   29852:	4d0d      	ldr	r5, [pc, #52]	; (29888 <location_service_location_ready_cb+0x48>)
   29854:	6028      	str	r0, [r5, #0]
		nrf_cloud_location.longitude = result->lon;
   29856:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   2985a:	f7f3 faa5 	bl	1cda8 <__aeabi_d2f>
   2985e:	6068      	str	r0, [r5, #4]
		nrf_cloud_location.accuracy = (double)result->unc;
   29860:	69a0      	ldr	r0, [r4, #24]
   29862:	f7f2 ff2f 	bl	1c6c4 <__aeabi_ui2d>
   29866:	f7f3 fa9f 	bl	1cda8 <__aeabi_d2f>
   2986a:	60a8      	str	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   2986c:	4807      	ldr	r0, [pc, #28]	; (2988c <location_service_location_ready_cb+0x4c>)
		/* Reset the semaphore to unblock location_service_get_cell_location_nrf_cloud()
		 * and make it return an error.
		 */
		k_sem_reset(&location_ready);
	}
}
   2986e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29872:	f00d bd8d 	b.w	37390 <z_impl_k_sem_give>
			LOG_ERR("Unable to determine location from cellular data, error: %d",
   29876:	2145      	movs	r1, #69	; 0x45
   29878:	4805      	ldr	r0, [pc, #20]	; (29890 <location_service_location_ready_cb+0x50>)
   2987a:	f013 fcbe 	bl	3d1fa <z_log_minimal_printk>
}
   2987e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_reset(sem);
   29882:	4802      	ldr	r0, [pc, #8]	; (2988c <location_service_location_ready_cb+0x4c>)
   29884:	f00d be2a 	b.w	374dc <z_impl_k_sem_reset>
   29888:	20019440 	.word	0x20019440
   2988c:	20015090 	.word	0x20015090
   29890:	000474a9 	.word	0x000474a9

00029894 <location_service_get_certificate_nrf_cloud>:
}
   29894:	4800      	ldr	r0, [pc, #0]	; (29898 <location_service_get_certificate_nrf_cloud+0x4>)
   29896:	4770      	bx	lr
   29898:	000475e6 	.word	0x000475e6

0002989c <location_service_get_cell_location_nrf_cloud>:
int location_service_get_cell_location_nrf_cloud(
	const struct lte_lc_cells_info *cell_data,
	char * const rcv_buf,
	const size_t rcv_buf_len,
	struct multicell_location *const location)
{
   2989c:	b538      	push	{r3, r4, r5, lr}
   2989e:	4604      	mov	r4, r0
   298a0:	461d      	mov	r5, r3
   298a2:	4819      	ldr	r0, [pc, #100]	; (29908 <location_service_get_cell_location_nrf_cloud+0x6c>)
   298a4:	f00d fe1a 	bl	374dc <z_impl_k_sem_reset>
	int err;

	k_sem_reset(&location_ready);

	LOG_DBG("Sending cellular positioning request (MQTT)");
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   298a8:	4620      	mov	r0, r4
   298aa:	2101      	movs	r1, #1
   298ac:	4a17      	ldr	r2, [pc, #92]	; (2990c <location_service_get_cell_location_nrf_cloud+0x70>)
   298ae:	f016 faed 	bl	3fe8c <nrf_cloud_cell_pos_request>
	if (err == -EACCES) {
   298b2:	f110 0f0d 	cmn.w	r0, #13
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   298b6:	4604      	mov	r4, r0
	if (err == -EACCES) {
   298b8:	d105      	bne.n	298c6 <location_service_get_cell_location_nrf_cloud+0x2a>
		LOG_ERR("Cloud connection is not established");
   298ba:	2145      	movs	r1, #69	; 0x45
   298bc:	4814      	ldr	r0, [pc, #80]	; (29910 <location_service_get_cell_location_nrf_cloud+0x74>)
   298be:	f013 fc9c 	bl	3d1fa <z_log_minimal_printk>
	}

	*location = nrf_cloud_location;

	return err;
}
   298c2:	4620      	mov	r0, r4
   298c4:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err) {
   298c6:	b128      	cbz	r0, 298d4 <location_service_get_cell_location_nrf_cloud+0x38>
		LOG_ERR("Failed to request cellular positioning data, error: %d", err);
   298c8:	4602      	mov	r2, r0
   298ca:	2145      	movs	r1, #69	; 0x45
   298cc:	4811      	ldr	r0, [pc, #68]	; (29914 <location_service_get_cell_location_nrf_cloud+0x78>)
   298ce:	f013 fc94 	bl	3d1fa <z_log_minimal_printk>
		return err;
   298d2:	e7f6      	b.n	298c2 <location_service_get_cell_location_nrf_cloud+0x26>
	LOG_INF("Cellular positioning request sent");
   298d4:	2149      	movs	r1, #73	; 0x49
   298d6:	4810      	ldr	r0, [pc, #64]	; (29918 <location_service_get_cell_location_nrf_cloud+0x7c>)
   298d8:	f013 fc8f 	bl	3d1fa <z_log_minimal_printk>
	return z_impl_k_sem_take(sem, timeout);
   298dc:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   298e0:	2300      	movs	r3, #0
   298e2:	4809      	ldr	r0, [pc, #36]	; (29908 <location_service_get_cell_location_nrf_cloud+0x6c>)
   298e4:	f00d fd90 	bl	37408 <z_impl_k_sem_take>
	if (k_sem_take(&location_ready, K_SECONDS(20)) == -EAGAIN) {
   298e8:	300b      	adds	r0, #11
   298ea:	d106      	bne.n	298fa <location_service_get_cell_location_nrf_cloud+0x5e>
		LOG_ERR("Cellular positioning data request timed out or "
   298ec:	2145      	movs	r1, #69	; 0x45
   298ee:	480b      	ldr	r0, [pc, #44]	; (2991c <location_service_get_cell_location_nrf_cloud+0x80>)
   298f0:	f013 fc83 	bl	3d1fa <z_log_minimal_printk>
		return -ETIMEDOUT;
   298f4:	f06f 0473 	mvn.w	r4, #115	; 0x73
   298f8:	e7e3      	b.n	298c2 <location_service_get_cell_location_nrf_cloud+0x26>
	*location = nrf_cloud_location;
   298fa:	4b09      	ldr	r3, [pc, #36]	; (29920 <location_service_get_cell_location_nrf_cloud+0x84>)
   298fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29900:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	return err;
   29904:	e7dd      	b.n	298c2 <location_service_get_cell_location_nrf_cloud+0x26>
   29906:	bf00      	nop
   29908:	20015090 	.word	0x20015090
   2990c:	00029841 	.word	0x00029841
   29910:	000474e9 	.word	0x000474e9
   29914:	00047512 	.word	0x00047512
   29918:	0004754e 	.word	0x0004754e
   2991c:	00047575 	.word	0x00047575
   29920:	20019440 	.word	0x20019440

00029924 <location_init>:
static const char LOCATION_METHOD_GNSS_STR[] = "GNSS";
static const char LOCATION_METHOD_WIFI_STR[] = "Wi-Fi";
static const char LOCATION_METHOD_UNKNOWN_STR[] = "Unknown";

int location_init(location_event_handler_t handler)
{
   29924:	b510      	push	{r4, lr}
	int err;

	err = location_core_event_handler_set(handler);
   29926:	f000 f8e5 	bl	29af4 <location_core_event_handler_set>
	if (err) {
   2992a:	b938      	cbnz	r0, 2993c <location_init+0x18>
		return err;
	}
	if (initialized) {
   2992c:	4c04      	ldr	r4, [pc, #16]	; (29940 <location_init+0x1c>)
   2992e:	7823      	ldrb	r3, [r4, #0]
   29930:	b923      	cbnz	r3, 2993c <location_init+0x18>
		/* Already initialized so library is ready. We just updated the event handler. */
		return 0;
	}

	err = location_core_init();
   29932:	f000 f8f1 	bl	29b18 <location_core_init>
	if (err) {
   29936:	b908      	cbnz	r0, 2993c <location_init+0x18>
		return err;
	}

	initialized = true;
   29938:	2301      	movs	r3, #1
   2993a:	7023      	strb	r3, [r4, #0]

	LOG_DBG("Location library initialized");

	return 0;
}
   2993c:	bd10      	pop	{r4, pc}
   2993e:	bf00      	nop
   29940:	2001c91f 	.word	0x2001c91f

00029944 <location_config_defaults_set>:

void location_config_defaults_set(
	struct location_config *config,
	uint8_t methods_count,
	enum location_method *method_types)
{
   29944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29946:	460d      	mov	r5, r1
   29948:	4616      	mov	r6, r2
	if (config == NULL) {
   2994a:	4604      	mov	r4, r0
   2994c:	b928      	cbnz	r0, 2995a <location_config_defaults_set+0x16>
		LOG_ERR("Configuration must not be NULL");
   2994e:	2145      	movs	r1, #69	; 0x45
	config->methods_count = methods_count;
	config->mode = LOCATION_REQ_MODE_FALLBACK;
	for (int i = 0; i < methods_count; i++) {
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
	}
}
   29950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Configuration must not be NULL");
   29954:	4814      	ldr	r0, [pc, #80]	; (299a8 <location_config_defaults_set+0x64>)
   29956:	f013 bc50 	b.w	3d1fa <z_log_minimal_printk>
__ssp_bos_icheck3(memset, void *, int)
   2995a:	221e      	movs	r2, #30
   2995c:	2100      	movs	r1, #0
   2995e:	f018 f8ff 	bl	41b60 <memset>
	for (int i = 0; i < methods_count; i++) {
   29962:	2300      	movs	r3, #0
   29964:	4620      	mov	r0, r4
	config->methods_count = methods_count;
   29966:	7025      	strb	r5, [r4, #0]
		method->wifi.service = LOCATION_SERVICE_ANY;
   29968:	461a      	mov	r2, r3
		method->wifi.timeout = 30;
   2996a:	241e      	movs	r4, #30
		method->gnss.timeout = 120;
   2996c:	2778      	movs	r7, #120	; 0x78
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   2996e:	f04f 0c01 	mov.w	ip, #1
		method->gnss.num_consecutive_fixes = 3;
   29972:	f04f 0e03 	mov.w	lr, #3
	for (int i = 0; i < methods_count; i++) {
   29976:	42ab      	cmp	r3, r5
   29978:	db00      	blt.n	2997c <location_config_defaults_set+0x38>
}
   2997a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
   2997c:	5cf1      	ldrb	r1, [r6, r3]
	if (method_type == LOCATION_METHOD_GNSS) {
   2997e:	2902      	cmp	r1, #2
	method->method = method_type;
   29980:	7081      	strb	r1, [r0, #2]
	if (method_type == LOCATION_METHOD_GNSS) {
   29982:	d108      	bne.n	29996 <location_config_defaults_set+0x52>
		method->gnss.timeout = 120;
   29984:	8087      	strh	r7, [r0, #4]
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   29986:	f880 c006 	strb.w	ip, [r0, #6]
		method->gnss.num_consecutive_fixes = 3;
   2998a:	f880 e007 	strb.w	lr, [r0, #7]
		method->gnss.visibility_detection = false;
   2998e:	7202      	strb	r2, [r0, #8]
	for (int i = 0; i < methods_count; i++) {
   29990:	3301      	adds	r3, #1
   29992:	3008      	adds	r0, #8
   29994:	e7ef      	b.n	29976 <location_config_defaults_set+0x32>
	} else if (method_type == LOCATION_METHOD_CELLULAR) {
   29996:	2901      	cmp	r1, #1
   29998:	d102      	bne.n	299a0 <location_config_defaults_set+0x5c>
		method->wifi.timeout = 30;
   2999a:	8084      	strh	r4, [r0, #4]
		method->wifi.service = LOCATION_SERVICE_ANY;
   2999c:	7182      	strb	r2, [r0, #6]
   2999e:	e7f7      	b.n	29990 <location_config_defaults_set+0x4c>
	} else if (method_type == LOCATION_METHOD_WIFI) {
   299a0:	2903      	cmp	r1, #3
   299a2:	d1f5      	bne.n	29990 <location_config_defaults_set+0x4c>
   299a4:	e7f9      	b.n	2999a <location_config_defaults_set+0x56>
   299a6:	bf00      	nop
   299a8:	00047c63 	.word	0x00047c63

000299ac <location_request>:
{
   299ac:	b530      	push	{r4, r5, lr}
   299ae:	b08b      	sub	sp, #44	; 0x2c
   299b0:	4604      	mov	r4, r0
	struct location_config default_config = { 0 };
   299b2:	221e      	movs	r2, #30
   299b4:	2100      	movs	r1, #0
   299b6:	a802      	add	r0, sp, #8
   299b8:	f018 f8d2 	bl	41b60 <memset>
	enum location_method methods[] = {
   299bc:	4b17      	ldr	r3, [pc, #92]	; (29a1c <location_request+0x70>)
   299be:	881b      	ldrh	r3, [r3, #0]
   299c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (!initialized) {
   299c4:	4b16      	ldr	r3, [pc, #88]	; (29a20 <location_request+0x74>)
   299c6:	781b      	ldrb	r3, [r3, #0]
   299c8:	b94b      	cbnz	r3, 299de <location_request+0x32>
		LOG_ERR("Location library not initialized when calling %s", __func__);
   299ca:	2145      	movs	r1, #69	; 0x45
   299cc:	4a15      	ldr	r2, [pc, #84]	; (29a24 <location_request+0x78>)
   299ce:	4816      	ldr	r0, [pc, #88]	; (29a28 <location_request+0x7c>)
   299d0:	f013 fc13 	bl	3d1fa <z_log_minimal_printk>
		return -EPERM;
   299d4:	f04f 35ff 	mov.w	r5, #4294967295
}
   299d8:	4628      	mov	r0, r5
   299da:	b00b      	add	sp, #44	; 0x2c
   299dc:	bd30      	pop	{r4, r5, pc}
	if (config == NULL || config->methods_count == 0) {
   299de:	b10c      	cbz	r4, 299e4 <location_request+0x38>
   299e0:	7823      	ldrb	r3, [r4, #0]
   299e2:	b94b      	cbnz	r3, 299f8 <location_request+0x4c>
		location_config_defaults_set(&default_config, ARRAY_SIZE(methods), methods);
   299e4:	2102      	movs	r1, #2
   299e6:	aa01      	add	r2, sp, #4
   299e8:	a802      	add	r0, sp, #8
   299ea:	f7ff ffab 	bl	29944 <location_config_defaults_set>
		if (config != NULL) {
   299ee:	b114      	cbz	r4, 299f6 <location_request+0x4a>
			default_config.interval = config->interval;
   299f0:	8b63      	ldrh	r3, [r4, #26]
   299f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		config = &default_config;
   299f6:	ac02      	add	r4, sp, #8
	location_core_config_log(config);
   299f8:	4620      	mov	r0, r4
   299fa:	f016 f972 	bl	3fce2 <location_core_config_log>
	err = location_core_validate_params(config);
   299fe:	4620      	mov	r0, r4
   29a00:	f000 f8b6 	bl	29b70 <location_core_validate_params>
	if (err) {
   29a04:	4605      	mov	r5, r0
   29a06:	b120      	cbz	r0, 29a12 <location_request+0x66>
		LOG_ERR("Invalid parameters given.");
   29a08:	2145      	movs	r1, #69	; 0x45
   29a0a:	4808      	ldr	r0, [pc, #32]	; (29a2c <location_request+0x80>)
   29a0c:	f013 fbf5 	bl	3d1fa <z_log_minimal_printk>
		return err;
   29a10:	e7e2      	b.n	299d8 <location_request+0x2c>
	err = location_core_location_get(config);
   29a12:	4620      	mov	r0, r4
   29a14:	f000 f8ea 	bl	29bec <location_core_location_get>
   29a18:	4605      	mov	r5, r0
	return err;
   29a1a:	e7dd      	b.n	299d8 <location_request+0x2c>
   29a1c:	00042f92 	.word	0x00042f92
   29a20:	2001c91f 	.word	0x2001c91f
   29a24:	00047ca6 	.word	0x00047ca6
   29a28:	00047c2d 	.word	0x00047c2d
   29a2c:	00047c87 	.word	0x00047c87

00029a30 <location_method_api_get>:
static const struct location_method_api *location_method_api_get(enum location_method method)
{
	const struct location_method_api *method_api = NULL;

	for (int i = 0; methods_supported[i] != NULL; i++) {
		if (method == methods_supported[i]->method) {
   29a30:	2802      	cmp	r0, #2
   29a32:	d004      	beq.n	29a3e <location_method_api_get+0xe>
	const struct location_method_api *method_api = NULL;
   29a34:	2801      	cmp	r0, #1
   29a36:	4803      	ldr	r0, [pc, #12]	; (29a44 <location_method_api_get+0x14>)
   29a38:	bf18      	it	ne
   29a3a:	2000      	movne	r0, #0
   29a3c:	4770      	bx	lr
	for (int i = 0; methods_supported[i] != NULL; i++) {
   29a3e:	4802      	ldr	r0, [pc, #8]	; (29a48 <location_method_api_get+0x18>)
			break;
		}
	}

	return method_api;
}
   29a40:	4770      	bx	lr
   29a42:	bf00      	nop
   29a44:	000435e4 	.word	0x000435e4
   29a48:	00043600 	.word	0x00043600

00029a4c <location_core_current_config_clear>:
	memset(&current_config, 0, sizeof(current_config));
   29a4c:	221e      	movs	r2, #30
   29a4e:	2100      	movs	r1, #0
   29a50:	4801      	ldr	r0, [pc, #4]	; (29a58 <location_core_current_config_clear+0xc>)
   29a52:	f018 b885 	b.w	41b60 <memset>
   29a56:	bf00      	nop
   29a58:	2001a584 	.word	0x2001a584

00029a5c <location_core_current_event_data_init>:
	memset(&current_event_data, 0, sizeof(current_event_data));
   29a5c:	4b04      	ldr	r3, [pc, #16]	; (29a70 <location_core_current_event_data_init+0x14>)
{
   29a5e:	b510      	push	{r4, lr}
	memset(&current_event_data, 0, sizeof(current_event_data));
   29a60:	2230      	movs	r2, #48	; 0x30
{
   29a62:	4604      	mov	r4, r0
	memset(&current_event_data, 0, sizeof(current_event_data));
   29a64:	2100      	movs	r1, #0
   29a66:	4618      	mov	r0, r3
   29a68:	f018 f87a 	bl	41b60 <memset>
	current_event_data.location.method = method;
   29a6c:	7204      	strb	r4, [r0, #8]
}
   29a6e:	bd10      	pop	{r4, pc}
   29a70:	20015608 	.word	0x20015608

00029a74 <location_core_location_get_pos>:

	memcpy(&current_config, config, sizeof(struct location_config));
}

static int location_core_location_get_pos(const struct location_config *config)
{
   29a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   29a76:	7803      	ldrb	r3, [r0, #0]
{
   29a78:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   29a7a:	2b03      	cmp	r3, #3
   29a7c:	d90a      	bls.n	29a94 <location_core_location_get_pos+0x20>
   29a7e:	4916      	ldr	r1, [pc, #88]	; (29ad8 <location_core_location_get_pos+0x64>)
   29a80:	4816      	ldr	r0, [pc, #88]	; (29adc <location_core_location_get_pos+0x68>)
   29a82:	f240 1231 	movw	r2, #305	; 0x131
   29a86:	f013 fb7e 	bl	3d186 <assert_print>
   29a8a:	f240 1131 	movw	r1, #305	; 0x131
   29a8e:	4812      	ldr	r0, [pc, #72]	; (29ad8 <location_core_location_get_pos+0x64>)
   29a90:	f013 fb72 	bl	3d178 <assert_post_action>
	if (config == &current_config) {
   29a94:	4d12      	ldr	r5, [pc, #72]	; (29ae0 <location_core_location_get_pos+0x6c>)
   29a96:	42ac      	cmp	r4, r5
   29a98:	d00d      	beq.n	29ab6 <location_core_location_get_pos+0x42>
	location_core_current_config_clear();
   29a9a:	f7ff ffd7 	bl	29a4c <location_core_current_config_clear>
	memcpy(&current_config, config, sizeof(struct location_config));
   29a9e:	4622      	mov	r2, r4
   29aa0:	462b      	mov	r3, r5
   29aa2:	f104 011c 	add.w	r1, r4, #28
   29aa6:	f852 0b04 	ldr.w	r0, [r2], #4
   29aaa:	428a      	cmp	r2, r1
   29aac:	f843 0b04 	str.w	r0, [r3], #4
   29ab0:	d1f9      	bne.n	29aa6 <location_core_location_get_pos+0x32>
   29ab2:	8812      	ldrh	r2, [r2, #0]
   29ab4:	801a      	strh	r2, [r3, #0]
	int err;
	enum location_method requested_method;

	location_core_current_config_set(config);
	/* Location request starts from the first method */
	current_method_index = 0;
   29ab6:	2200      	movs	r2, #0
	requested_method = config->methods[current_method_index].method;
   29ab8:	f814 0f02 	ldrb.w	r0, [r4, #2]!
	current_method_index = 0;
   29abc:	4b09      	ldr	r3, [pc, #36]	; (29ae4 <location_core_location_get_pos+0x70>)
	LOG_DBG("Requesting location with '%s' method",
		(char *)location_method_api_get(requested_method)->method_string);
	location_core_current_event_data_init(requested_method);
   29abe:	9001      	str	r0, [sp, #4]
	current_method_index = 0;
   29ac0:	601a      	str	r2, [r3, #0]
	location_core_current_event_data_init(requested_method);
   29ac2:	f7ff ffcb 	bl	29a5c <location_core_current_event_data_init>
	err = location_method_api_get(requested_method)->location_get(
   29ac6:	9801      	ldr	r0, [sp, #4]
   29ac8:	f7ff ffb2 	bl	29a30 <location_method_api_get>
   29acc:	6943      	ldr	r3, [r0, #20]
   29ace:	4620      	mov	r0, r4
		&config->methods[current_method_index]);

	return err;
}
   29ad0:	b003      	add	sp, #12
   29ad2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = location_method_api_get(requested_method)->location_get(
   29ad6:	4718      	bx	r3
   29ad8:	00047cb7 	.word	0x00047cb7
   29adc:	0004494f 	.word	0x0004494f
   29ae0:	2001a584 	.word	0x2001a584
   29ae4:	2001944c 	.word	0x2001944c

00029ae8 <location_core_periodic_work_fn>:
}

static void location_core_periodic_work_fn(struct k_work *work)
{
	ARG_UNUSED(work);
	location_core_location_get_pos(&current_config);
   29ae8:	4801      	ldr	r0, [pc, #4]	; (29af0 <location_core_periodic_work_fn+0x8>)
   29aea:	f7ff bfc3 	b.w	29a74 <location_core_location_get_pos>
   29aee:	bf00      	nop
   29af0:	2001a584 	.word	0x2001a584

00029af4 <location_core_event_handler_set>:
{
   29af4:	b508      	push	{r3, lr}
	if (handler == NULL) {
   29af6:	b930      	cbnz	r0, 29b06 <location_core_event_handler_set+0x12>
		LOG_ERR("No event handler given");
   29af8:	4805      	ldr	r0, [pc, #20]	; (29b10 <location_core_event_handler_set+0x1c>)
   29afa:	2145      	movs	r1, #69	; 0x45
   29afc:	f013 fb7d 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   29b00:	f06f 0015 	mvn.w	r0, #21
}
   29b04:	bd08      	pop	{r3, pc}
	event_handler = handler;
   29b06:	4b03      	ldr	r3, [pc, #12]	; (29b14 <location_core_event_handler_set+0x20>)
   29b08:	6018      	str	r0, [r3, #0]
	return 0;
   29b0a:	2000      	movs	r0, #0
   29b0c:	e7fa      	b.n	29b04 <location_core_event_handler_set+0x10>
   29b0e:	bf00      	nop
   29b10:	00047ce4 	.word	0x00047ce4
   29b14:	20019450 	.word	0x20019450

00029b18 <location_core_init>:
{
   29b18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_work_queue_config cfg = {
   29b1a:	2300      	movs	r3, #0
   29b1c:	9303      	str	r3, [sp, #12]
   29b1e:	4b0f      	ldr	r3, [pc, #60]	; (29b5c <location_core_init+0x44>)
	k_work_queue_start(
   29b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   29b24:	9302      	str	r3, [sp, #8]
	k_work_queue_start(
   29b26:	ab02      	add	r3, sp, #8
   29b28:	9300      	str	r3, [sp, #0]
   29b2a:	490d      	ldr	r1, [pc, #52]	; (29b60 <location_core_init+0x48>)
   29b2c:	2305      	movs	r3, #5
   29b2e:	480d      	ldr	r0, [pc, #52]	; (29b64 <location_core_init+0x4c>)
   29b30:	f00d ffa2 	bl	37a78 <k_work_queue_start>
	for (int i = 0; methods_supported[i] != NULL; i++) {
   29b34:	4e0c      	ldr	r6, [pc, #48]	; (29b68 <location_core_init+0x50>)
   29b36:	f856 5b04 	ldr.w	r5, [r6], #4
   29b3a:	b90d      	cbnz	r5, 29b40 <location_core_init+0x28>
	return 0;
   29b3c:	462c      	mov	r4, r5
   29b3e:	e009      	b.n	29b54 <location_core_init+0x3c>
		err = methods_supported[i]->init();
   29b40:	68eb      	ldr	r3, [r5, #12]
   29b42:	4798      	blx	r3
		if (err) {
   29b44:	4604      	mov	r4, r0
   29b46:	2800      	cmp	r0, #0
   29b48:	d0f5      	beq.n	29b36 <location_core_init+0x1e>
			LOG_ERR("Failed to initialize '%s' method",
   29b4a:	2145      	movs	r1, #69	; 0x45
   29b4c:	4807      	ldr	r0, [pc, #28]	; (29b6c <location_core_init+0x54>)
   29b4e:	1c6a      	adds	r2, r5, #1
   29b50:	f013 fb53 	bl	3d1fa <z_log_minimal_printk>
}
   29b54:	4620      	mov	r0, r4
   29b56:	b004      	add	sp, #16
   29b58:	bd70      	pop	{r4, r5, r6, pc}
   29b5a:	bf00      	nop
   29b5c:	00047d00 	.word	0x00047d00
   29b60:	2001fa18 	.word	0x2001fa18
   29b64:	20015638 	.word	0x20015638
   29b68:	0004361c 	.word	0x0004361c
   29b6c:	00047d13 	.word	0x00047d13

00029b70 <location_core_validate_params>:
{
   29b70:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(config != NULL);
   29b72:	4604      	mov	r4, r0
   29b74:	b940      	cbnz	r0, 29b88 <location_core_validate_params+0x18>
   29b76:	4918      	ldr	r1, [pc, #96]	; (29bd8 <location_core_validate_params+0x68>)
   29b78:	4818      	ldr	r0, [pc, #96]	; (29bdc <location_core_validate_params+0x6c>)
   29b7a:	22ea      	movs	r2, #234	; 0xea
   29b7c:	f013 fb03 	bl	3d186 <assert_print>
   29b80:	21ea      	movs	r1, #234	; 0xea
   29b82:	4815      	ldr	r0, [pc, #84]	; (29bd8 <location_core_validate_params+0x68>)
   29b84:	f013 faf8 	bl	3d178 <assert_post_action>
	if (config->methods_count > CONFIG_LOCATION_METHODS_LIST_SIZE) {
   29b88:	7823      	ldrb	r3, [r4, #0]
   29b8a:	2b03      	cmp	r3, #3
   29b8c:	d907      	bls.n	29b9e <location_core_validate_params+0x2e>
		LOG_ERR("Maximum number of methods (%d) exceeded: %d",
   29b8e:	2203      	movs	r2, #3
   29b90:	2145      	movs	r1, #69	; 0x45
   29b92:	4813      	ldr	r0, [pc, #76]	; (29be0 <location_core_validate_params+0x70>)
   29b94:	f013 fb31 	bl	3d1fa <z_log_minimal_printk>
			return -EINVAL;
   29b98:	f06f 0015 	mvn.w	r0, #21
}
   29b9c:	bd10      	pop	{r4, pc}
	if ((config->interval > 0) && (config->interval < 10)) {
   29b9e:	8b62      	ldrh	r2, [r4, #26]
   29ba0:	3a01      	subs	r2, #1
   29ba2:	b292      	uxth	r2, r2
   29ba4:	2a08      	cmp	r2, #8
   29ba6:	d814      	bhi.n	29bd2 <location_core_validate_params+0x62>
		LOG_ERR("Interval for periodic location updates must be longer than 10 seconds");
   29ba8:	2145      	movs	r1, #69	; 0x45
   29baa:	480e      	ldr	r0, [pc, #56]	; (29be4 <location_core_validate_params+0x74>)
   29bac:	f013 fb25 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   29bb0:	e7f2      	b.n	29b98 <location_core_validate_params+0x28>
		method_api = location_method_api_get(config->methods[i].method);
   29bb2:	f814 2031 	ldrb.w	r2, [r4, r1, lsl #3]
   29bb6:	4610      	mov	r0, r2
   29bb8:	f7ff ff3a 	bl	29a30 <location_method_api_get>
		if (method_api == NULL) {
   29bbc:	b920      	cbnz	r0, 29bc8 <location_core_validate_params+0x58>
			LOG_ERR("Location method (%d) not supported", config->methods[i].method);
   29bbe:	2145      	movs	r1, #69	; 0x45
   29bc0:	4809      	ldr	r0, [pc, #36]	; (29be8 <location_core_validate_params+0x78>)
   29bc2:	f013 fb1a 	bl	3d1fa <z_log_minimal_printk>
   29bc6:	e7e7      	b.n	29b98 <location_core_validate_params+0x28>
	for (int i = 0; i < config->methods_count; i++) {
   29bc8:	3101      	adds	r1, #1
   29bca:	4299      	cmp	r1, r3
   29bcc:	dbf1      	blt.n	29bb2 <location_core_validate_params+0x42>
	return 0;
   29bce:	2000      	movs	r0, #0
   29bd0:	e7e4      	b.n	29b9c <location_core_validate_params+0x2c>
	for (int i = 0; i < config->methods_count; i++) {
   29bd2:	2100      	movs	r1, #0
		method_api = location_method_api_get(config->methods[i].method);
   29bd4:	3402      	adds	r4, #2
   29bd6:	e7f8      	b.n	29bca <location_core_validate_params+0x5a>
   29bd8:	00047cb7 	.word	0x00047cb7
   29bdc:	0004494f 	.word	0x0004494f
   29be0:	00047d39 	.word	0x00047d39
   29be4:	00047d6a 	.word	0x00047d6a
   29be8:	00047db5 	.word	0x00047db5

00029bec <location_core_location_get>:
{
   29bec:	b510      	push	{r4, lr}
   29bee:	4604      	mov	r4, r0
   29bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   29bf4:	2300      	movs	r3, #0
   29bf6:	4808      	ldr	r0, [pc, #32]	; (29c18 <location_core_location_get+0x2c>)
   29bf8:	f00d fc06 	bl	37408 <z_impl_k_sem_take>
	if (err) {
   29bfc:	b920      	cbnz	r0, 29c08 <location_core_location_get+0x1c>
	return location_core_location_get_pos(config);
   29bfe:	4620      	mov	r0, r4
}
   29c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return location_core_location_get_pos(config);
   29c04:	f7ff bf36 	b.w	29a74 <location_core_location_get_pos>
		LOG_ERR("Location request already ongoing");
   29c08:	2145      	movs	r1, #69	; 0x45
   29c0a:	4804      	ldr	r0, [pc, #16]	; (29c1c <location_core_location_get+0x30>)
   29c0c:	f013 faf5 	bl	3d1fa <z_log_minimal_printk>
}
   29c10:	f06f 000f 	mvn.w	r0, #15
   29c14:	bd10      	pop	{r4, pc}
   29c16:	bf00      	nop
   29c18:	20015078 	.word	0x20015078
   29c1c:	00047ddd 	.word	0x00047ddd

00029c20 <location_core_event_cb>:
{
   29c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c24:	4604      	mov	r4, r0
   29c26:	b08c      	sub	sp, #48	; 0x30
	k_work_cancel_delayable(&location_timeout_work);
   29c28:	485c      	ldr	r0, [pc, #368]	; (29d9c <location_core_event_cb+0x17c>)
   29c2a:	f00e f88b 	bl	37d44 <k_work_cancel_delayable>
	if (location != NULL) {
   29c2e:	4f5c      	ldr	r7, [pc, #368]	; (29da0 <location_core_event_cb+0x180>)
   29c30:	4e5c      	ldr	r6, [pc, #368]	; (29da4 <location_core_event_cb+0x184>)
   29c32:	2c00      	cmp	r4, #0
   29c34:	d07a      	beq.n	29d2c <location_core_event_cb+0x10c>
		current_event_data.id = LOCATION_EVT_LOCATION;
   29c36:	463d      	mov	r5, r7
   29c38:	2301      	movs	r3, #1
   29c3a:	f805 3b08 	strb.w	r3, [r5], #8
		current_event_data.location = *location;
   29c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   29c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   29c46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
		current_event_data.location = *location;
   29c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
   29c4e:	e885 0003 	stmia.w	r5, {r0, r1}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   29c52:	e9cd 2300 	strd	r2, r3, [sp]
   29c56:	220c      	movs	r2, #12
   29c58:	2100      	movs	r1, #0
   29c5a:	4b53      	ldr	r3, [pc, #332]	; (29da8 <location_core_event_cb+0x188>)
   29c5c:	eb0d 0002 	add.w	r0, sp, r2
   29c60:	f018 f8ce 	bl	41e00 <__sprintf_chk>
		sprintf(longitude_str, "%.06f", current_event_data.location.longitude);
   29c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   29c68:	2100      	movs	r1, #0
   29c6a:	e9cd 2300 	strd	r2, r3, [sp]
   29c6e:	a806      	add	r0, sp, #24
   29c70:	220c      	movs	r2, #12
   29c72:	4b4d      	ldr	r3, [pc, #308]	; (29da8 <location_core_event_cb+0x188>)
   29c74:	f018 f8c4 	bl	41e00 <__sprintf_chk>
		sprintf(accuracy_str, "%.01f", current_event_data.location.accuracy);
   29c78:	6a38      	ldr	r0, [r7, #32]
   29c7a:	f7f2 fd45 	bl	1c708 <__aeabi_f2d>
   29c7e:	4b4b      	ldr	r3, [pc, #300]	; (29dac <location_core_event_cb+0x18c>)
   29c80:	e9cd 0100 	strd	r0, r1, [sp]
   29c84:	220c      	movs	r2, #12
   29c86:	2100      	movs	r1, #0
   29c88:	a809      	add	r0, sp, #36	; 0x24
   29c8a:	f018 f8b9 	bl	41e00 <__sprintf_chk>
		if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   29c8e:	7f33      	ldrb	r3, [r6, #28]
   29c90:	2b01      	cmp	r3, #1
   29c92:	d12e      	bne.n	29cf2 <location_core_event_cb+0xd2>
			current_method_index++;
   29c94:	4c46      	ldr	r4, [pc, #280]	; (29db0 <location_core_event_cb+0x190>)
			if (current_method_index < current_config.methods_count) {
   29c96:	7832      	ldrb	r2, [r6, #0]
			current_method_index++;
   29c98:	6823      	ldr	r3, [r4, #0]
			previous_method = current_event_data.location.method;
   29c9a:	7a38      	ldrb	r0, [r7, #8]
			current_method_index++;
   29c9c:	3301      	adds	r3, #1
			if (current_method_index < current_config.methods_count) {
   29c9e:	4293      	cmp	r3, r2
			current_method_index++;
   29ca0:	6023      	str	r3, [r4, #0]
			if (current_method_index < current_config.methods_count) {
   29ca2:	da20      	bge.n	29ce6 <location_core_event_cb+0xc6>
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   29ca4:	f7ff fec4 	bl	29a30 <location_method_api_get>
				requested_method =
   29ca8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   29cac:	f893 8002 	ldrb.w	r8, [r3, #2]
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   29cb0:	4602      	mov	r2, r0
   29cb2:	4640      	mov	r0, r8
   29cb4:	f7ff febc 	bl	29a30 <location_method_api_get>
   29cb8:	4605      	mov	r5, r0
   29cba:	2149      	movs	r1, #73	; 0x49
   29cbc:	1c43      	adds	r3, r0, #1
   29cbe:	3201      	adds	r2, #1
   29cc0:	483c      	ldr	r0, [pc, #240]	; (29db4 <location_core_event_cb+0x194>)
   29cc2:	f013 fa9a 	bl	3d1fa <z_log_minimal_printk>
				event_handler(&current_event_data);
   29cc6:	4b3c      	ldr	r3, [pc, #240]	; (29db8 <location_core_event_cb+0x198>)
   29cc8:	4638      	mov	r0, r7
   29cca:	681b      	ldr	r3, [r3, #0]
   29ccc:	4798      	blx	r3
				location_core_current_event_data_init(requested_method);
   29cce:	4640      	mov	r0, r8
   29cd0:	f7ff fec4 	bl	29a5c <location_core_current_event_data_init>
					&current_config.methods[current_method_index]);
   29cd4:	6820      	ldr	r0, [r4, #0]
				err = location_method_api_get(requested_method)->location_get(
   29cd6:	696b      	ldr	r3, [r5, #20]
					&current_config.methods[current_method_index]);
   29cd8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
				err = location_method_api_get(requested_method)->location_get(
   29cdc:	3002      	adds	r0, #2
   29cde:	4798      	blx	r3
}
   29ce0:	b00c      	add	sp, #48	; 0x30
   29ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("LOCATION_REQ_MODE_ALL: all methods done");
   29ce6:	2149      	movs	r1, #73	; 0x49
   29ce8:	4834      	ldr	r0, [pc, #208]	; (29dbc <location_core_event_cb+0x19c>)
   29cea:	f013 fa86 	bl	3d1fa <z_log_minimal_printk>
			current_method_index = 0;
   29cee:	2300      	movs	r3, #0
   29cf0:	6023      	str	r3, [r4, #0]
	event_handler(&current_event_data);
   29cf2:	4b31      	ldr	r3, [pc, #196]	; (29db8 <location_core_event_cb+0x198>)
   29cf4:	482a      	ldr	r0, [pc, #168]	; (29da0 <location_core_event_cb+0x180>)
   29cf6:	681b      	ldr	r3, [r3, #0]
   29cf8:	4798      	blx	r3
	if (current_config.interval > 0) {
   29cfa:	8b74      	ldrh	r4, [r6, #26]
   29cfc:	2c00      	cmp	r4, #0
   29cfe:	d046      	beq.n	29d8e <location_core_event_cb+0x16e>
			K_SECONDS(current_config.interval));
   29d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   29d04:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29d08:	f240 30e7 	movw	r0, #999	; 0x3e7
   29d0c:	2100      	movs	r1, #0
   29d0e:	435c      	muls	r4, r3
   29d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29d14:	2300      	movs	r3, #0
   29d16:	fbe4 0105 	umlal	r0, r1, r4, r5
   29d1a:	f7f3 f8e5 	bl	1cee8 <__aeabi_uldivmod>
   29d1e:	4602      	mov	r2, r0
   29d20:	460b      	mov	r3, r1
		k_work_schedule_for_queue(
   29d22:	4827      	ldr	r0, [pc, #156]	; (29dc0 <location_core_event_cb+0x1a0>)
   29d24:	4927      	ldr	r1, [pc, #156]	; (29dc4 <location_core_event_cb+0x1a4>)
   29d26:	f00d ff3b 	bl	37ba0 <k_work_schedule_for_queue>
   29d2a:	e7d9      	b.n	29ce0 <location_core_event_cb+0xc0>
		current_method_index++;
   29d2c:	4d20      	ldr	r5, [pc, #128]	; (29db0 <location_core_event_cb+0x190>)
		if (current_method_index < current_config.methods_count) {
   29d2e:	7832      	ldrb	r2, [r6, #0]
		current_method_index++;
   29d30:	682b      	ldr	r3, [r5, #0]
		previous_method = current_event_data.location.method;
   29d32:	7a38      	ldrb	r0, [r7, #8]
		current_method_index++;
   29d34:	3301      	adds	r3, #1
		if (current_method_index < current_config.methods_count) {
   29d36:	4293      	cmp	r3, r2
		current_method_index++;
   29d38:	602b      	str	r3, [r5, #0]
		if (current_method_index < current_config.methods_count) {
   29d3a:	da23      	bge.n	29d84 <location_core_event_cb+0x164>
			LOG_WRN("Failed to acquire location using '%s', "
   29d3c:	f7ff fe78 	bl	29a30 <location_method_api_get>
			requested_method = current_config.methods[current_method_index].method;
   29d40:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   29d44:	f893 8002 	ldrb.w	r8, [r3, #2]
			LOG_WRN("Failed to acquire location using '%s', "
   29d48:	4602      	mov	r2, r0
   29d4a:	4640      	mov	r0, r8
   29d4c:	f7ff fe70 	bl	29a30 <location_method_api_get>
   29d50:	2157      	movs	r1, #87	; 0x57
   29d52:	1c43      	adds	r3, r0, #1
   29d54:	4604      	mov	r4, r0
   29d56:	3201      	adds	r2, #1
   29d58:	481b      	ldr	r0, [pc, #108]	; (29dc8 <location_core_event_cb+0x1a8>)
   29d5a:	f013 fa4e 	bl	3d1fa <z_log_minimal_printk>
			if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   29d5e:	7f33      	ldrb	r3, [r6, #28]
   29d60:	2b01      	cmp	r3, #1
   29d62:	d103      	bne.n	29d6c <location_core_event_cb+0x14c>
				event_handler(&current_event_data);
   29d64:	4b14      	ldr	r3, [pc, #80]	; (29db8 <location_core_event_cb+0x198>)
   29d66:	4638      	mov	r0, r7
   29d68:	681b      	ldr	r3, [r3, #0]
   29d6a:	4798      	blx	r3
			location_core_current_event_data_init(requested_method);
   29d6c:	4640      	mov	r0, r8
   29d6e:	f7ff fe75 	bl	29a5c <location_core_current_event_data_init>
				&current_config.methods[current_method_index]);
   29d72:	6828      	ldr	r0, [r5, #0]
			err = location_method_api_get(requested_method)->location_get(
   29d74:	6963      	ldr	r3, [r4, #20]
				&current_config.methods[current_method_index]);
   29d76:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
			err = location_method_api_get(requested_method)->location_get(
   29d7a:	3002      	adds	r0, #2
}
   29d7c:	b00c      	add	sp, #48	; 0x30
   29d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = location_method_api_get(requested_method)->location_get(
   29d82:	4718      	bx	r3
		LOG_ERR("Location acquisition failed and fallbacks are also done");
   29d84:	2145      	movs	r1, #69	; 0x45
   29d86:	4811      	ldr	r0, [pc, #68]	; (29dcc <location_core_event_cb+0x1ac>)
   29d88:	f013 fa37 	bl	3d1fa <z_log_minimal_printk>
   29d8c:	e7b1      	b.n	29cf2 <location_core_event_cb+0xd2>
		location_core_current_config_clear();
   29d8e:	f7ff fe5d 	bl	29a4c <location_core_current_config_clear>
	z_impl_k_sem_give(sem);
   29d92:	480f      	ldr	r0, [pc, #60]	; (29dd0 <location_core_event_cb+0x1b0>)
   29d94:	f00d fafc 	bl	37390 <z_impl_k_sem_give>
}
   29d98:	e7a2      	b.n	29ce0 <location_core_event_cb+0xc0>
   29d9a:	bf00      	nop
   29d9c:	20014560 	.word	0x20014560
   29da0:	20015608 	.word	0x20015608
   29da4:	2001a584 	.word	0x2001a584
   29da8:	00047e03 	.word	0x00047e03
   29dac:	00047e09 	.word	0x00047e09
   29db0:	2001944c 	.word	0x2001944c
   29db4:	00047e0f 	.word	0x00047e0f
   29db8:	20019450 	.word	0x20019450
   29dbc:	00047e5f 	.word	0x00047e5f
   29dc0:	20015638 	.word	0x20015638
   29dc4:	20014530 	.word	0x20014530
   29dc8:	00047e8c 	.word	0x00047e8c
   29dcc:	00047ece 	.word	0x00047ece
   29dd0:	20015078 	.word	0x20015078

00029dd4 <location_core_event_cb_error>:
	current_event_data.id = LOCATION_EVT_ERROR;
   29dd4:	2203      	movs	r2, #3
   29dd6:	4b02      	ldr	r3, [pc, #8]	; (29de0 <location_core_event_cb_error+0xc>)
	location_core_event_cb(NULL);
   29dd8:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_ERROR;
   29dda:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   29ddc:	f7ff bf20 	b.w	29c20 <location_core_event_cb>
   29de0:	20015608 	.word	0x20015608

00029de4 <location_core_event_cb_timeout>:
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   29de4:	2202      	movs	r2, #2
   29de6:	4b02      	ldr	r3, [pc, #8]	; (29df0 <location_core_event_cb_timeout+0xc>)
	location_core_event_cb(NULL);
   29de8:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   29dea:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   29dec:	f7ff bf18 	b.w	29c20 <location_core_event_cb>
   29df0:	20015608 	.word	0x20015608

00029df4 <location_core_timeout_work_fn>:
}

static void location_core_timeout_work_fn(struct k_work *work)
{
   29df4:	b510      	push	{r4, lr}
	enum location_method current_method =
		current_config.methods[current_method_index].method;
   29df6:	4b09      	ldr	r3, [pc, #36]	; (29e1c <location_core_timeout_work_fn+0x28>)

	ARG_UNUSED(work);

	LOG_WRN("Timeout occurred");
   29df8:	2157      	movs	r1, #87	; 0x57
	enum location_method current_method =
   29dfa:	681a      	ldr	r2, [r3, #0]
   29dfc:	4b08      	ldr	r3, [pc, #32]	; (29e20 <location_core_timeout_work_fn+0x2c>)
	LOG_WRN("Timeout occurred");
   29dfe:	4809      	ldr	r0, [pc, #36]	; (29e24 <location_core_timeout_work_fn+0x30>)
	enum location_method current_method =
   29e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   29e04:	789c      	ldrb	r4, [r3, #2]
	LOG_WRN("Timeout occurred");
   29e06:	f013 f9f8 	bl	3d1fa <z_log_minimal_printk>

	location_method_api_get(current_method)->cancel();
   29e0a:	4620      	mov	r0, r4
   29e0c:	f7ff fe10 	bl	29a30 <location_method_api_get>
   29e10:	6983      	ldr	r3, [r0, #24]
   29e12:	4798      	blx	r3
	location_core_event_cb_timeout();
}
   29e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	location_core_event_cb_timeout();
   29e18:	f7ff bfe4 	b.w	29de4 <location_core_event_cb_timeout>
   29e1c:	2001944c 	.word	0x2001944c
   29e20:	2001a584 	.word	0x2001a584
   29e24:	00047f0b 	.word	0x00047f0b

00029e28 <location_core_work_queue_get>:
}
   29e28:	4800      	ldr	r0, [pc, #0]	; (29e2c <location_core_work_queue_get+0x4>)
   29e2a:	4770      	bx	lr
   29e2c:	20015638 	.word	0x20015638

00029e30 <location_core_timer_start>:

void location_core_timer_start(uint16_t timeout)
{
   29e30:	b570      	push	{r4, r5, r6, lr}
	if (timeout > 0) {
   29e32:	b1a8      	cbz	r0, 29e60 <location_core_timer_start+0x30>
		 * their operation, blocking waiting of semaphores will block the timeout from
		 * expiring and canceling methods.
		 */
		k_work_schedule(
			&location_timeout_work,
			K_SECONDS(timeout));
   29e34:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29e38:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29e3c:	4344      	muls	r4, r0
   29e3e:	2100      	movs	r1, #0
   29e40:	f240 30e7 	movw	r0, #999	; 0x3e7
   29e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29e48:	2300      	movs	r3, #0
   29e4a:	fbe4 0105 	umlal	r0, r1, r4, r5
   29e4e:	f7f3 f84b 	bl	1cee8 <__aeabi_uldivmod>
	}
}
   29e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29e56:	4602      	mov	r2, r0
   29e58:	460b      	mov	r3, r1
		k_work_schedule(
   29e5a:	4802      	ldr	r0, [pc, #8]	; (29e64 <location_core_timer_start+0x34>)
   29e5c:	f00d bf04 	b.w	37c68 <k_work_schedule>
}
   29e60:	bd70      	pop	{r4, r5, r6, pc}
   29e62:	bf00      	nop
   29e64:	20014560 	.word	0x20014560

00029e68 <location_utils_modem_params_read>:
	}
	return is_active;
}

int location_utils_modem_params_read(struct location_utils_modem_params_info *modem_params)
{
   29e68:	b530      	push	{r4, r5, lr}
	/* Parsed strings include double quotes */
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29e6a:	2400      	movs	r4, #0
{
   29e6c:	4605      	mov	r5, r0
   29e6e:	b093      	sub	sp, #76	; 0x4c
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29e70:	220d      	movs	r2, #13
   29e72:	4621      	mov	r1, r4
   29e74:	a804      	add	r0, sp, #16
   29e76:	9403      	str	r4, [sp, #12]
   29e78:	f017 fe72 	bl	41b60 <memset>
	char tac_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29e7c:	220d      	movs	r2, #13
   29e7e:	4621      	mov	r1, r4
   29e80:	a809      	add	r0, sp, #36	; 0x24
   29e82:	9408      	str	r4, [sp, #32]
   29e84:	f017 fe6c 	bl	41b60 <memset>
	char cell_id_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29e88:	220d      	movs	r2, #13
   29e8a:	4621      	mov	r1, r4
   29e8c:	a80e      	add	r0, sp, #56	; 0x38
   29e8e:	940d      	str	r4, [sp, #52]	; 0x34
   29e90:	f017 fe66 	bl	41b60 <memset>
	int err = 0;

	__ASSERT_NO_MSG(modem_params != NULL);
   29e94:	b945      	cbnz	r5, 29ea8 <location_utils_modem_params_read+0x40>
   29e96:	491f      	ldr	r1, [pc, #124]	; (29f14 <location_utils_modem_params_read+0xac>)
   29e98:	481f      	ldr	r0, [pc, #124]	; (29f18 <location_utils_modem_params_read+0xb0>)
   29e9a:	223f      	movs	r2, #63	; 0x3f
   29e9c:	f013 f973 	bl	3d186 <assert_print>
   29ea0:	213f      	movs	r1, #63	; 0x3f
   29ea2:	481c      	ldr	r0, [pc, #112]	; (29f14 <location_utils_modem_params_read+0xac>)
   29ea4:	f013 f968 	bl	3d178 <assert_post_action>

	err = nrf_modem_at_scanf(
   29ea8:	f105 0310 	add.w	r3, r5, #16
   29eac:	9301      	str	r3, [sp, #4]
   29eae:	ab0d      	add	r3, sp, #52	; 0x34
   29eb0:	9300      	str	r3, [sp, #0]
   29eb2:	491a      	ldr	r1, [pc, #104]	; (29f1c <location_utils_modem_params_read+0xb4>)
   29eb4:	481a      	ldr	r0, [pc, #104]	; (29f20 <location_utils_modem_params_read+0xb8>)
   29eb6:	ab08      	add	r3, sp, #32
   29eb8:	aa03      	add	r2, sp, #12
   29eba:	f00b fc53 	bl	35764 <nrf_modem_at_scanf>
		",%*d"                                /* <band>: ignored */
		",%"L(MODEM_PARAM_STR_MAX_LEN)"[^,]"  /* <cell_id> */
		",%d",                                /* <phys_cell_id> */
		plmn_str, tac_str, cell_id_str, &modem_params->phys_cell_id);

	if (err <= 2) {
   29ebe:	2802      	cmp	r0, #2
	err = nrf_modem_at_scanf(
   29ec0:	4604      	mov	r4, r0
	if (err <= 2) {
   29ec2:	dc07      	bgt.n	29ed4 <location_utils_modem_params_read+0x6c>
		LOG_ERR("Cannot get modem parameters, err %d", err);
   29ec4:	4602      	mov	r2, r0
   29ec6:	2145      	movs	r1, #69	; 0x45
   29ec8:	4816      	ldr	r0, [pc, #88]	; (29f24 <location_utils_modem_params_read+0xbc>)
   29eca:	f013 f996 	bl	3d1fa <z_log_minimal_printk>
			modem_params->mcc, modem_params->mnc, modem_params->tac,
			log_strdup(tac_str), modem_params->cell_id, log_strdup(cell_id_str),
			modem_params->phys_cell_id);
	}
	return err;
}
   29ece:	4620      	mov	r0, r4
   29ed0:	b013      	add	sp, #76	; 0x4c
   29ed2:	bd30      	pop	{r4, r5, pc}
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   29ed4:	220a      	movs	r2, #10
   29ed6:	2100      	movs	r1, #0
   29ed8:	a804      	add	r0, sp, #16
   29eda:	f010 ffdd 	bl	3ae98 <strtol>
		plmn_str[4] = '\0';
   29ede:	2400      	movs	r4, #0
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   29ee0:	220a      	movs	r2, #10
   29ee2:	4621      	mov	r1, r4
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   29ee4:	6068      	str	r0, [r5, #4]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   29ee6:	f10d 000d 	add.w	r0, sp, #13
		plmn_str[4] = '\0';
   29eea:	f88d 4010 	strb.w	r4, [sp, #16]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   29eee:	f010 ffd3 	bl	3ae98 <strtol>
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   29ef2:	2210      	movs	r2, #16
   29ef4:	4621      	mov	r1, r4
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   29ef6:	6028      	str	r0, [r5, #0]
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   29ef8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   29efc:	f010 ffcc 	bl	3ae98 <strtol>
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   29f00:	2210      	movs	r2, #16
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   29f02:	60e8      	str	r0, [r5, #12]
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   29f04:	4621      	mov	r1, r4
   29f06:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   29f0a:	f010 ffc5 	bl	3ae98 <strtol>
   29f0e:	60a8      	str	r0, [r5, #8]
	return err;
   29f10:	e7dd      	b.n	29ece <location_utils_modem_params_read+0x66>
   29f12:	bf00      	nop
   29f14:	00047f21 	.word	0x00047f21
   29f18:	0004494f 	.word	0x0004494f
   29f1c:	00047f4f 	.word	0x00047f4f
   29f20:	00047f90 	.word	0x00047f90
   29f24:	00047f9c 	.word	0x00047f9c

00029f28 <location_utils_systime_to_location_datetime>:

	return jwt_buf;
}

void location_utils_systime_to_location_datetime(struct location_datetime *datetime)
{
   29f28:	b510      	push	{r4, lr}
   29f2a:	4604      	mov	r4, r0
   29f2c:	b08e      	sub	sp, #56	; 0x38
	struct timespec tp;
	struct tm ltm = { 0 };
   29f2e:	2224      	movs	r2, #36	; 0x24
   29f30:	2100      	movs	r1, #0
   29f32:	a805      	add	r0, sp, #20
   29f34:	f017 fe14 	bl	41b60 <memset>

	__ASSERT_NO_MSG(datetime != NULL);
   29f38:	b944      	cbnz	r4, 29f4c <location_utils_systime_to_location_datetime+0x24>
   29f3a:	4914      	ldr	r1, [pc, #80]	; (29f8c <location_utils_systime_to_location_datetime+0x64>)
   29f3c:	4814      	ldr	r0, [pc, #80]	; (29f90 <location_utils_systime_to_location_datetime+0x68>)
   29f3e:	227f      	movs	r2, #127	; 0x7f
   29f40:	f013 f921 	bl	3d186 <assert_print>
   29f44:	217f      	movs	r1, #127	; 0x7f
   29f46:	4811      	ldr	r0, [pc, #68]	; (29f8c <location_utils_systime_to_location_datetime+0x64>)
   29f48:	f013 f916 	bl	3d178 <assert_post_action>
   29f4c:	2001      	movs	r0, #1
   29f4e:	4669      	mov	r1, sp
   29f50:	f7fa f814 	bl	23f7c <z_impl_clock_gettime>

	clock_gettime(CLOCK_REALTIME, &tp);
	gmtime_r(&tp.tv_sec, &ltm);
   29f54:	4668      	mov	r0, sp
   29f56:	a905      	add	r1, sp, #20
   29f58:	f010 f890 	bl	3a07c <gmtime_r>

	/* System time should have been set when date_time lib is in use */
	if (IS_ENABLED(CONFIG_DATE_TIME)) {
		datetime->valid = true;
   29f5c:	2301      	movs	r3, #1
   29f5e:	7023      	strb	r3, [r4, #0]
	} else {
		datetime->valid = false;
	}

	/* Relative to 1900, as per POSIX */
	datetime->year = 1900 + ltm.tm_year;
   29f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28

	datetime->day = ltm.tm_mday;
	datetime->hour = ltm.tm_hour;
	datetime->minute = ltm.tm_min;
	datetime->second = ltm.tm_sec;
	datetime->ms = tp.tv_nsec / 1000000;
   29f62:	4a0c      	ldr	r2, [pc, #48]	; (29f94 <location_utils_systime_to_location_datetime+0x6c>)
	datetime->year = 1900 + ltm.tm_year;
   29f64:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   29f68:	8063      	strh	r3, [r4, #2]
	datetime->month = ltm.tm_mon + 1;
   29f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29f6c:	3301      	adds	r3, #1
   29f6e:	7123      	strb	r3, [r4, #4]
	datetime->day = ltm.tm_mday;
   29f70:	9b08      	ldr	r3, [sp, #32]
   29f72:	7163      	strb	r3, [r4, #5]
	datetime->hour = ltm.tm_hour;
   29f74:	9b07      	ldr	r3, [sp, #28]
   29f76:	71a3      	strb	r3, [r4, #6]
	datetime->minute = ltm.tm_min;
   29f78:	9b06      	ldr	r3, [sp, #24]
   29f7a:	71e3      	strb	r3, [r4, #7]
	datetime->second = ltm.tm_sec;
   29f7c:	9b05      	ldr	r3, [sp, #20]
   29f7e:	7223      	strb	r3, [r4, #8]
	datetime->ms = tp.tv_nsec / 1000000;
   29f80:	9b02      	ldr	r3, [sp, #8]
   29f82:	fb93 f3f2 	sdiv	r3, r3, r2
   29f86:	8163      	strh	r3, [r4, #10]
}
   29f88:	b00e      	add	sp, #56	; 0x38
   29f8a:	bd10      	pop	{r4, pc}
   29f8c:	00047f21 	.word	0x00047f21
   29f90:	0004494f 	.word	0x0004494f
   29f94:	000f4240 	.word	0x000f4240

00029f98 <method_gnss_notify_pgps>:
#endif
	}
}

static void method_gnss_notify_pgps(struct k_work *work)
{
   29f98:	b508      	push	{r3, lr}
	ARG_UNUSED(work);
	int err = nrf_cloud_pgps_notify_prediction();
   29f9a:	f004 f93b 	bl	2e214 <nrf_cloud_pgps_notify_prediction>

	if (err) {
   29f9e:	4602      	mov	r2, r0
   29fa0:	b128      	cbz	r0, 29fae <method_gnss_notify_pgps+0x16>
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
	}
}
   29fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
   29fa6:	2145      	movs	r1, #69	; 0x45
   29fa8:	4801      	ldr	r0, [pc, #4]	; (29fb0 <method_gnss_notify_pgps+0x18>)
   29faa:	f013 b926 	b.w	3d1fa <z_log_minimal_printk>
}
   29fae:	bd08      	pop	{r3, pc}
   29fb0:	00047fc5 	.word	0x00047fc5

00029fb4 <method_gnss_manage_pgps>:
{
   29fb4:	b508      	push	{r3, lr}
	err = nrf_cloud_pgps_inject(prediction, &pgps_agps_request);
   29fb6:	4b0b      	ldr	r3, [pc, #44]	; (29fe4 <method_gnss_manage_pgps+0x30>)
   29fb8:	490b      	ldr	r1, [pc, #44]	; (29fe8 <method_gnss_manage_pgps+0x34>)
   29fba:	6818      	ldr	r0, [r3, #0]
   29fbc:	f004 fc52 	bl	2e864 <nrf_cloud_pgps_inject>
	if (err) {
   29fc0:	4602      	mov	r2, r0
   29fc2:	b118      	cbz	r0, 29fcc <method_gnss_manage_pgps+0x18>
		LOG_ERR("Unable to send prediction to modem: %d", err);
   29fc4:	2145      	movs	r1, #69	; 0x45
   29fc6:	4809      	ldr	r0, [pc, #36]	; (29fec <method_gnss_manage_pgps+0x38>)
   29fc8:	f013 f917 	bl	3d1fa <z_log_minimal_printk>
	err = nrf_cloud_pgps_preemptive_updates();
   29fcc:	f004 fb92 	bl	2e6f4 <nrf_cloud_pgps_preemptive_updates>
	if (err) {
   29fd0:	4602      	mov	r2, r0
   29fd2:	b128      	cbz	r0, 29fe0 <method_gnss_manage_pgps+0x2c>
}
   29fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting updates: %d", err);
   29fd8:	2145      	movs	r1, #69	; 0x45
   29fda:	4805      	ldr	r0, [pc, #20]	; (29ff0 <method_gnss_manage_pgps+0x3c>)
   29fdc:	f013 b90d 	b.w	3d1fa <z_log_minimal_printk>
}
   29fe0:	bd08      	pop	{r3, pc}
   29fe2:	bf00      	nop
   29fe4:	200194d0 	.word	0x200194d0
   29fe8:	200194c4 	.word	0x200194c4
   29fec:	00048007 	.word	0x00048007
   29ff0:	00048033 	.word	0x00048033

00029ff4 <method_gnss_agps_request_work_fn>:
}

#if defined(CONFIG_NRF_CLOUD_AGPS) && !defined(CONFIG_LOCATION_METHOD_GNSS_AGPS_EXTERNAL)
#if defined(CONFIG_NRF_CLOUD_MQTT)
static void method_gnss_agps_request_work_fn(struct k_work *item)
{
   29ff4:	b508      	push	{r3, lr}
	int err = nrf_cloud_agps_request(&agps_request);
   29ff6:	4806      	ldr	r0, [pc, #24]	; (2a010 <method_gnss_agps_request_work_fn+0x1c>)
   29ff8:	f002 ffea 	bl	2cfd0 <nrf_cloud_agps_request>

	if (err) {
   29ffc:	4602      	mov	r2, r0
   29ffe:	b128      	cbz	r0, 2a00c <method_gnss_agps_request_work_fn+0x18>
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
		return;
	}

	LOG_DBG("A-GPS data requested");
}
   2a000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   2a004:	2145      	movs	r1, #69	; 0x45
   2a006:	4803      	ldr	r0, [pc, #12]	; (2a014 <method_gnss_agps_request_work_fn+0x20>)
   2a008:	f013 b8f7 	b.w	3d1fa <z_log_minimal_printk>
}
   2a00c:	bd08      	pop	{r3, pc}
   2a00e:	bf00      	nop
   2a010:	20019454 	.word	0x20019454
   2a014:	00048055 	.word	0x00048055

0002a018 <method_gnss_pgps_handler>:
{
   2a018:	b508      	push	{r3, lr}
	if ((event->type == PGPS_EVT_AVAILABLE) ||
   2a01a:	7803      	ldrb	r3, [r0, #0]
   2a01c:	2b03      	cmp	r3, #3
   2a01e:	d003      	beq.n	2a028 <method_gnss_pgps_handler+0x10>
   2a020:	2b04      	cmp	r3, #4
   2a022:	d10b      	bne.n	2a03c <method_gnss_pgps_handler+0x24>
	    ((event->type == PGPS_EVT_READY) && (event->prediction != NULL))) {
   2a024:	6843      	ldr	r3, [r0, #4]
   2a026:	b17b      	cbz	r3, 2a048 <method_gnss_pgps_handler+0x30>
		prediction = event->prediction;
   2a028:	6842      	ldr	r2, [r0, #4]
   2a02a:	4b08      	ldr	r3, [pc, #32]	; (2a04c <method_gnss_pgps_handler+0x34>)
   2a02c:	601a      	str	r2, [r3, #0]
		k_work_submit_to_queue(location_core_work_queue_get(),
   2a02e:	f7ff fefb 	bl	29e28 <location_core_work_queue_get>
   2a032:	4907      	ldr	r1, [pc, #28]	; (2a050 <method_gnss_pgps_handler+0x38>)
}
   2a034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(location_core_work_queue_get(),
   2a038:	f00d bc70 	b.w	3791c <k_work_submit_to_queue>
	} else if (event->type == PGPS_EVT_REQUEST) {
   2a03c:	2b05      	cmp	r3, #5
   2a03e:	d103      	bne.n	2a048 <method_gnss_pgps_handler+0x30>
		k_work_submit_to_queue(location_core_work_queue_get(),
   2a040:	f7ff fef2 	bl	29e28 <location_core_work_queue_get>
   2a044:	4903      	ldr	r1, [pc, #12]	; (2a054 <method_gnss_pgps_handler+0x3c>)
   2a046:	e7f5      	b.n	2a034 <method_gnss_pgps_handler+0x1c>
}
   2a048:	bd08      	pop	{r3, pc}
   2a04a:	bf00      	nop
   2a04c:	200194d0 	.word	0x200194d0
   2a050:	20019474 	.word	0x20019474
   2a054:	20019494 	.word	0x20019494

0002a058 <method_gnss_positioning_work_fn>:
	location_core_event_cb_pgps_request(&pgps_request);
}
#endif

static void method_gnss_positioning_work_fn(struct k_work *work)
{
   2a058:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lte_lc_system_mode_get(&mode, NULL);
   2a05a:	2100      	movs	r1, #0
   2a05c:	f10d 0007 	add.w	r0, sp, #7
   2a060:	f7fd fcc8 	bl	279f4 <lte_lc_system_mode_get>
	if (mode == LTE_LC_SYSTEM_MODE_GPS) {
   2a064:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a068:	2b03      	cmp	r3, #3
   2a06a:	d00f      	beq.n	2a08c <method_gnss_positioning_work_fn+0x34>
	return z_impl_k_sem_take(sem, timeout);
   2a06c:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   2a070:	2300      	movs	r3, #0
   2a072:	4821      	ldr	r0, [pc, #132]	; (2a0f8 <method_gnss_positioning_work_fn+0xa0>)
   2a074:	f00d f9c8 	bl	37408 <z_impl_k_sem_take>
	if (k_sem_take(&entered_rrc_idle, K_MINUTES(SLEEP_WAIT_BACKSTOP)) == -EAGAIN) {
   2a078:	300b      	adds	r0, #11
   2a07a:	d124      	bne.n	2a0c6 <method_gnss_positioning_work_fn+0x6e>
		if (!running) { /* Location request was cancelled */
   2a07c:	4b1f      	ldr	r3, [pc, #124]	; (2a0fc <method_gnss_positioning_work_fn+0xa4>)
   2a07e:	781b      	ldrb	r3, [r3, #0]
   2a080:	b1fb      	cbz	r3, 2a0c2 <method_gnss_positioning_work_fn+0x6a>
		LOG_WRN("RRC connection was not released in %d minutes. Starting GNSS anyway.",
   2a082:	2205      	movs	r2, #5
   2a084:	2157      	movs	r1, #87	; 0x57
   2a086:	481e      	ldr	r0, [pc, #120]	; (2a100 <method_gnss_positioning_work_fn+0xa8>)
   2a088:	f013 f8b7 	bl	3d1fa <z_log_minimal_printk>
		/* Location request was cancelled while waiting for RRC idle or PSM. Do nothing. */
		return;
	}

	/* Configure GNSS to continuous tracking mode */
	err = nrf_modem_gnss_fix_interval_set(1);
   2a08c:	2001      	movs	r0, #1
   2a08e:	f00c f8b3 	bl	361f8 <nrf_modem_gnss_fix_interval_set>
   2a092:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK)
	err |= nrf_modem_gnss_elevation_threshold_set(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK);
#endif
	/* By default we take the first fix. */
	fixes_remaining = 1;
   2a094:	2001      	movs	r0, #1

	uint8_t use_case = NRF_MODEM_GNSS_USE_CASE_MULTIPLE_HOT_START;

	switch (gnss_config.accuracy) {
   2a096:	4d1b      	ldr	r5, [pc, #108]	; (2a104 <method_gnss_positioning_work_fn+0xac>)
	fixes_remaining = 1;
   2a098:	4b1b      	ldr	r3, [pc, #108]	; (2a108 <method_gnss_positioning_work_fn+0xb0>)
	switch (gnss_config.accuracy) {
   2a09a:	78aa      	ldrb	r2, [r5, #2]
	fixes_remaining = 1;
   2a09c:	6018      	str	r0, [r3, #0]
	switch (gnss_config.accuracy) {
   2a09e:	b1b2      	cbz	r2, 2a0ce <method_gnss_positioning_work_fn+0x76>
   2a0a0:	2a02      	cmp	r2, #2
   2a0a2:	d101      	bne.n	2a0a8 <method_gnss_positioning_work_fn+0x50>
	case LOCATION_ACCURACY_NORMAL:
		break;

	case LOCATION_ACCURACY_HIGH:
		/* In high accuracy mode, use the configured fix count. */
		fixes_remaining = gnss_config.num_consecutive_fixes;
   2a0a4:	78ea      	ldrb	r2, [r5, #3]
   2a0a6:	601a      	str	r2, [r3, #0]
		break;
	}

	err |= nrf_modem_gnss_use_case_set(use_case);
   2a0a8:	f00c f888 	bl	361bc <nrf_modem_gnss_use_case_set>

	if (err) {
   2a0ac:	4304      	orrs	r4, r0
   2a0ae:	d010      	beq.n	2a0d2 <method_gnss_positioning_work_fn+0x7a>
		LOG_ERR("Failed to configure GNSS");
   2a0b0:	2145      	movs	r1, #69	; 0x45
   2a0b2:	4816      	ldr	r0, [pc, #88]	; (2a10c <method_gnss_positioning_work_fn+0xb4>)
   2a0b4:	f013 f8a1 	bl	3d1fa <z_log_minimal_printk>
		location_core_event_cb_error();
   2a0b8:	f7ff fe8c 	bl	29dd4 <location_core_event_cb_error>
		running = false;
   2a0bc:	2200      	movs	r2, #0
   2a0be:	4b0f      	ldr	r3, [pc, #60]	; (2a0fc <method_gnss_positioning_work_fn+0xa4>)
   2a0c0:	701a      	strb	r2, [r3, #0]
		running = false;
		return;
	}

	location_core_timer_start(gnss_config.timeout);
}
   2a0c2:	b003      	add	sp, #12
   2a0c4:	bd30      	pop	{r4, r5, pc}
	z_impl_k_sem_give(sem);
   2a0c6:	480c      	ldr	r0, [pc, #48]	; (2a0f8 <method_gnss_positioning_work_fn+0xa0>)
   2a0c8:	f00d f962 	bl	37390 <z_impl_k_sem_give>
   2a0cc:	e7de      	b.n	2a08c <method_gnss_positioning_work_fn+0x34>
	switch (gnss_config.accuracy) {
   2a0ce:	2003      	movs	r0, #3
   2a0d0:	e7ea      	b.n	2a0a8 <method_gnss_positioning_work_fn+0x50>
	err = nrf_modem_gnss_start();
   2a0d2:	f00c f803 	bl	360dc <nrf_modem_gnss_start>
	if (err) {
   2a0d6:	b140      	cbz	r0, 2a0ea <method_gnss_positioning_work_fn+0x92>
		LOG_ERR("Failed to start GNSS");
   2a0d8:	2145      	movs	r1, #69	; 0x45
   2a0da:	480d      	ldr	r0, [pc, #52]	; (2a110 <method_gnss_positioning_work_fn+0xb8>)
   2a0dc:	f013 f88d 	bl	3d1fa <z_log_minimal_printk>
		location_core_event_cb_error();
   2a0e0:	f7ff fe78 	bl	29dd4 <location_core_event_cb_error>
		running = false;
   2a0e4:	4b05      	ldr	r3, [pc, #20]	; (2a0fc <method_gnss_positioning_work_fn+0xa4>)
   2a0e6:	701c      	strb	r4, [r3, #0]
		return;
   2a0e8:	e7eb      	b.n	2a0c2 <method_gnss_positioning_work_fn+0x6a>
	location_core_timer_start(gnss_config.timeout);
   2a0ea:	8828      	ldrh	r0, [r5, #0]
}
   2a0ec:	b003      	add	sp, #12
   2a0ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	location_core_timer_start(gnss_config.timeout);
   2a0f2:	f7ff be9d 	b.w	29e30 <location_core_timer_start>
   2a0f6:	bf00      	nop
   2a0f8:	20015060 	.word	0x20015060
   2a0fc:	2001c921 	.word	0x2001c921
   2a100:	00048084 	.word	0x00048084
   2a104:	2001a5a2 	.word	0x2001a5a2
   2a108:	20019460 	.word	0x20019460
   2a10c:	000480ce 	.word	0x000480ce
   2a110:	000480ec 	.word	0x000480ec

0002a114 <method_gnss_lte_ind_handler>:
	switch (evt->type) {
   2a114:	7803      	ldrb	r3, [r0, #0]
   2a116:	3b01      	subs	r3, #1
   2a118:	2b09      	cmp	r3, #9
   2a11a:	d821      	bhi.n	2a160 <method_gnss_lte_ind_handler+0x4c>
   2a11c:	e8df f003 	tbb	[pc, r3]
   2a120:	2018200e 	.word	0x2018200e
   2a124:	20202020 	.word	0x20202020
   2a128:	050b      	.short	0x050b
		if (evt->modem_sleep.type == LTE_LC_MODEM_SLEEP_PSM) {
   2a12a:	7a03      	ldrb	r3, [r0, #8]
   2a12c:	2b01      	cmp	r3, #1
   2a12e:	d117      	bne.n	2a160 <method_gnss_lte_ind_handler+0x4c>
   2a130:	480c      	ldr	r0, [pc, #48]	; (2a164 <method_gnss_lte_ind_handler+0x50>)
   2a132:	f00d b92d 	b.w	37390 <z_impl_k_sem_give>
	z_impl_k_sem_reset(sem);
   2a136:	480b      	ldr	r0, [pc, #44]	; (2a164 <method_gnss_lte_ind_handler+0x50>)
   2a138:	f00d b9d0 	b.w	374dc <z_impl_k_sem_reset>
		if (evt->psm_cfg.active_time == -1) {
   2a13c:	68c3      	ldr	r3, [r0, #12]
   2a13e:	1c5a      	adds	r2, r3, #1
   2a140:	d0f6      	beq.n	2a130 <method_gnss_lte_ind_handler+0x1c>
		} else if (evt->psm_cfg.active_time > 0) {
   2a142:	2b00      	cmp	r3, #0
   2a144:	dd0c      	ble.n	2a160 <method_gnss_lte_ind_handler+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   2a146:	2200      	movs	r2, #0
   2a148:	2300      	movs	r3, #0
   2a14a:	4806      	ldr	r0, [pc, #24]	; (2a164 <method_gnss_lte_ind_handler+0x50>)
   2a14c:	f00d b95c 	b.w	37408 <z_impl_k_sem_take>
		if (evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED) {
   2a150:	7a03      	ldrb	r3, [r0, #8]
   2a152:	2b01      	cmp	r3, #1
   2a154:	d101      	bne.n	2a15a <method_gnss_lte_ind_handler+0x46>
	z_impl_k_sem_reset(sem);
   2a156:	4804      	ldr	r0, [pc, #16]	; (2a168 <method_gnss_lte_ind_handler+0x54>)
   2a158:	e7ee      	b.n	2a138 <method_gnss_lte_ind_handler+0x24>
		} else if (evt->rrc_mode == LTE_LC_RRC_MODE_IDLE) {
   2a15a:	b90b      	cbnz	r3, 2a160 <method_gnss_lte_ind_handler+0x4c>
	z_impl_k_sem_give(sem);
   2a15c:	4802      	ldr	r0, [pc, #8]	; (2a168 <method_gnss_lte_ind_handler+0x54>)
   2a15e:	e7e8      	b.n	2a132 <method_gnss_lte_ind_handler+0x1e>
}
   2a160:	4770      	bx	lr
   2a162:	bf00      	nop
   2a164:	20015048 	.word	0x20015048
   2a168:	20015060 	.word	0x20015060

0002a16c <method_gnss_event_handler>:
	switch (event) {
   2a16c:	2801      	cmp	r0, #1
{
   2a16e:	b510      	push	{r4, lr}
	switch (event) {
   2a170:	d002      	beq.n	2a178 <method_gnss_event_handler+0xc>
   2a172:	2804      	cmp	r0, #4
   2a174:	d007      	beq.n	2a186 <method_gnss_event_handler+0x1a>
}
   2a176:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_pvt_work);
   2a178:	f7ff fe56 	bl	29e28 <location_core_work_queue_get>
   2a17c:	4911      	ldr	r1, [pc, #68]	; (2a1c4 <method_gnss_event_handler+0x58>)
}
   2a17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit_to_queue(
   2a182:	f00d bbcb 	b.w	3791c <k_work_submit_to_queue>
	int err = nrf_modem_gnss_read(&agps_request,
   2a186:	4c10      	ldr	r4, [pc, #64]	; (2a1c8 <method_gnss_event_handler+0x5c>)
   2a188:	2203      	movs	r2, #3
   2a18a:	210c      	movs	r1, #12
   2a18c:	4620      	mov	r0, r4
   2a18e:	f00b fe15 	bl	35dbc <nrf_modem_gnss_read>
	if (err) {
   2a192:	4602      	mov	r2, r0
   2a194:	b128      	cbz	r0, 2a1a2 <method_gnss_event_handler+0x36>
}
   2a196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_WRN("Reading A-GPS req data from GNSS failed, error: %d", err);
   2a19a:	2157      	movs	r1, #87	; 0x57
   2a19c:	480b      	ldr	r0, [pc, #44]	; (2a1cc <method_gnss_event_handler+0x60>)
   2a19e:	f013 b82c 	b.w	3d1fa <z_log_minimal_printk>
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   2a1a2:	6821      	ldr	r1, [r4, #0]
   2a1a4:	4b0a      	ldr	r3, [pc, #40]	; (2a1d0 <method_gnss_event_handler+0x64>)
		agps_request.sv_mask_alm = 0;
   2a1a6:	e9c4 0000 	strd	r0, r0, [r4]
	if (method_gnss_agps_required(&agps_request)) {
   2a1aa:	4620      	mov	r0, r4
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   2a1ac:	6019      	str	r1, [r3, #0]
	if (method_gnss_agps_required(&agps_request)) {
   2a1ae:	f015 fd99 	bl	3fce4 <method_gnss_agps_required>
   2a1b2:	b118      	cbz	r0, 2a1bc <method_gnss_event_handler+0x50>
		k_work_submit_to_queue(
   2a1b4:	f7ff fe38 	bl	29e28 <location_core_work_queue_get>
   2a1b8:	4906      	ldr	r1, [pc, #24]	; (2a1d4 <method_gnss_event_handler+0x68>)
   2a1ba:	e7e0      	b.n	2a17e <method_gnss_event_handler+0x12>
		k_work_submit_to_queue(
   2a1bc:	f7ff fe34 	bl	29e28 <location_core_work_queue_get>
   2a1c0:	4905      	ldr	r1, [pc, #20]	; (2a1d8 <method_gnss_event_handler+0x6c>)
   2a1c2:	e7dc      	b.n	2a17e <method_gnss_event_handler+0x12>
   2a1c4:	200194a4 	.word	0x200194a4
   2a1c8:	20019454 	.word	0x20019454
   2a1cc:	00048106 	.word	0x00048106
   2a1d0:	200194c4 	.word	0x200194c4
   2a1d4:	20019464 	.word	0x20019464
   2a1d8:	20019484 	.word	0x20019484

0002a1dc <method_gnss_cancel>:
{
   2a1dc:	b510      	push	{r4, lr}
	int err = nrf_modem_gnss_stop();
   2a1de:	f00b ffd3 	bl	36188 <nrf_modem_gnss_stop>
	if ((err != 0) && (err != -NRF_EPERM)) {
   2a1e2:	1c43      	adds	r3, r0, #1
   2a1e4:	2b01      	cmp	r3, #1
	int err = nrf_modem_gnss_stop();
   2a1e6:	4604      	mov	r4, r0
	if ((err != 0) && (err != -NRF_EPERM)) {
   2a1e8:	d903      	bls.n	2a1f2 <method_gnss_cancel+0x16>
		LOG_ERR("Failed to stop GNSS");
   2a1ea:	2145      	movs	r1, #69	; 0x45
   2a1ec:	480a      	ldr	r0, [pc, #40]	; (2a218 <method_gnss_cancel+0x3c>)
   2a1ee:	f013 f804 	bl	3d1fa <z_log_minimal_printk>
	running = false;
   2a1f2:	2200      	movs	r2, #0
   2a1f4:	4b09      	ldr	r3, [pc, #36]	; (2a21c <method_gnss_cancel+0x40>)
	(void)k_work_cancel(&method_gnss_start_work);
   2a1f6:	480a      	ldr	r0, [pc, #40]	; (2a220 <method_gnss_cancel+0x44>)
	running = false;
   2a1f8:	701a      	strb	r2, [r3, #0]
	(void)k_work_cancel(&method_gnss_start_work);
   2a1fa:	f00d fbe9 	bl	379d0 <k_work_cancel>
	return sem->count;
   2a1fe:	4809      	ldr	r0, [pc, #36]	; (2a224 <method_gnss_cancel+0x48>)
	if (!sleeping) {
   2a200:	6883      	ldr	r3, [r0, #8]
   2a202:	b90b      	cbnz	r3, 2a208 <method_gnss_cancel+0x2c>
	z_impl_k_sem_reset(sem);
   2a204:	f00d f96a 	bl	374dc <z_impl_k_sem_reset>
   2a208:	4807      	ldr	r0, [pc, #28]	; (2a228 <method_gnss_cancel+0x4c>)
	if (!rrc_idling) {
   2a20a:	6883      	ldr	r3, [r0, #8]
   2a20c:	b90b      	cbnz	r3, 2a212 <method_gnss_cancel+0x36>
   2a20e:	f00d f965 	bl	374dc <z_impl_k_sem_reset>
}
   2a212:	4620      	mov	r0, r4
   2a214:	bd10      	pop	{r4, pc}
   2a216:	bf00      	nop
   2a218:	0004813e 	.word	0x0004813e
   2a21c:	2001c921 	.word	0x2001c921
   2a220:	200194b4 	.word	0x200194b4
   2a224:	20015048 	.word	0x20015048
   2a228:	20015060 	.word	0x20015060

0002a22c <method_gnss_pvt_work_fn>:
{
   2a22c:	b510      	push	{r4, lr}
	if (!running) {
   2a22e:	4b2e      	ldr	r3, [pc, #184]	; (2a2e8 <method_gnss_pvt_work_fn+0xbc>)
{
   2a230:	b0ba      	sub	sp, #232	; 0xe8
	if (!running) {
   2a232:	781b      	ldrb	r3, [r3, #0]
   2a234:	b14b      	cbz	r3, 2a24a <method_gnss_pvt_work_fn+0x1e>
	if (nrf_modem_gnss_read(&pvt_data, sizeof(pvt_data), NRF_MODEM_GNSS_DATA_PVT) != 0) {
   2a236:	2201      	movs	r2, #1
   2a238:	21e8      	movs	r1, #232	; 0xe8
   2a23a:	4668      	mov	r0, sp
   2a23c:	f00b fdbe 	bl	35dbc <nrf_modem_gnss_read>
   2a240:	b128      	cbz	r0, 2a24e <method_gnss_pvt_work_fn+0x22>
		LOG_ERR("Failed to read PVT data from GNSS");
   2a242:	2145      	movs	r1, #69	; 0x45
   2a244:	4829      	ldr	r0, [pc, #164]	; (2a2ec <method_gnss_pvt_work_fn+0xc0>)
   2a246:	f012 ffd8 	bl	3d1fa <z_log_minimal_printk>
}
   2a24a:	b03a      	add	sp, #232	; 0xe8
   2a24c:	bd10      	pop	{r4, pc}
	if (pvt_data.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   2a24e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   2a252:	f013 0301 	ands.w	r3, r3, #1
   2a256:	d02a      	beq.n	2a2ae <method_gnss_pvt_work_fn+0x82>
		location_result.latitude = pvt_data.latitude;
   2a258:	e9dd 0100 	ldrd	r0, r1, [sp]
		fixes_remaining--;
   2a25c:	4a24      	ldr	r2, [pc, #144]	; (2a2f0 <method_gnss_pvt_work_fn+0xc4>)
		location_result.method = LOCATION_METHOD_GNSS;
   2a25e:	4c25      	ldr	r4, [pc, #148]	; (2a2f4 <method_gnss_pvt_work_fn+0xc8>)
		fixes_remaining--;
   2a260:	6813      	ldr	r3, [r2, #0]
		location_result.latitude = pvt_data.latitude;
   2a262:	e9c4 0102 	strd	r0, r1, [r4, #8]
		location_result.longitude = pvt_data.longitude;
   2a266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		fixes_remaining--;
   2a26a:	3b01      	subs	r3, #1
   2a26c:	6013      	str	r3, [r2, #0]
		location_result.method = LOCATION_METHOD_GNSS;
   2a26e:	2202      	movs	r2, #2
   2a270:	7022      	strb	r2, [r4, #0]
		location_result.accuracy = pvt_data.accuracy;
   2a272:	9a05      	ldr	r2, [sp, #20]
		location_result.longitude = pvt_data.longitude;
   2a274:	e9c4 0104 	strd	r0, r1, [r4, #16]
		location_result.accuracy = pvt_data.accuracy;
   2a278:	61a2      	str	r2, [r4, #24]
		location_result.datetime.valid = true;
   2a27a:	2201      	movs	r2, #1
		location_result.datetime.year = pvt_data.datetime.year;
   2a27c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
		location_result.datetime.valid = true;
   2a280:	7722      	strb	r2, [r4, #28]
		location_result.datetime.year = pvt_data.datetime.year;
   2a282:	83e1      	strh	r1, [r4, #30]
		location_result.datetime.second = pvt_data.datetime.seconds;
   2a284:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		location_result.datetime.month = pvt_data.datetime.month;
   2a288:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
		location_result.datetime.second = pvt_data.datetime.seconds;
   2a28c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
		location_result.datetime.month = pvt_data.datetime.month;
   2a290:	8421      	strh	r1, [r4, #32]
		location_result.datetime.ms = pvt_data.datetime.ms;
   2a292:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
		location_result.datetime.hour = pvt_data.datetime.hour;
   2a296:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
		if (fixes_remaining <= 0) {
   2a29a:	2b00      	cmp	r3, #0
		location_result.datetime.hour = pvt_data.datetime.hour;
   2a29c:	8461      	strh	r1, [r4, #34]	; 0x22
		location_result.datetime.ms = pvt_data.datetime.ms;
   2a29e:	84e2      	strh	r2, [r4, #38]	; 0x26
		if (fixes_remaining <= 0) {
   2a2a0:	dcd3      	bgt.n	2a24a <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   2a2a2:	f7ff ff9b 	bl	2a1dc <method_gnss_cancel>
			location_core_event_cb(&location_result);
   2a2a6:	4620      	mov	r0, r4
   2a2a8:	f7ff fcba 	bl	29c20 <location_core_event_cb>
   2a2ac:	e7cd      	b.n	2a24a <method_gnss_pvt_work_fn+0x1e>
	} else if (gnss_config.visibility_detection) {
   2a2ae:	4a12      	ldr	r2, [pc, #72]	; (2a2f8 <method_gnss_pvt_work_fn+0xcc>)
   2a2b0:	7912      	ldrb	r2, [r2, #4]
   2a2b2:	2a00      	cmp	r2, #0
   2a2b4:	d0c9      	beq.n	2a24a <method_gnss_pvt_work_fn+0x1e>
		if (pvt_data.execution_time >= VISIBILITY_DETECTION_EXEC_TIME &&
   2a2b6:	9a39      	ldr	r2, [sp, #228]	; 0xe4
   2a2b8:	f6a2 32b8 	subw	r2, r2, #3000	; 0xbb8
   2a2bc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   2a2c0:	d2c3      	bcs.n	2a24a <method_gnss_pvt_work_fn+0x1e>
   2a2c2:	466a      	mov	r2, sp
		if (pvt_data->sv[i].sv == 0) {
   2a2c4:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
   2a2c8:	b131      	cbz	r1, 2a2d8 <method_gnss_pvt_work_fn+0xac>
		tracked++;
   2a2ca:	3301      	adds	r3, #1
   2a2cc:	b2db      	uxtb	r3, r3
	for (uint32_t i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; i++) {
   2a2ce:	2b0c      	cmp	r3, #12
   2a2d0:	f102 020c 	add.w	r2, r2, #12
   2a2d4:	d1f6      	bne.n	2a2c4 <method_gnss_pvt_work_fn+0x98>
   2a2d6:	e7b8      	b.n	2a24a <method_gnss_pvt_work_fn+0x1e>
		    pvt_data.execution_time < (VISIBILITY_DETECTION_EXEC_TIME + MSEC_PER_SEC) &&
   2a2d8:	2b02      	cmp	r3, #2
   2a2da:	d8b6      	bhi.n	2a24a <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   2a2dc:	f7ff ff7e 	bl	2a1dc <method_gnss_cancel>
			location_core_event_cb_error();
   2a2e0:	f7ff fd78 	bl	29dd4 <location_core_event_cb_error>
   2a2e4:	e7b1      	b.n	2a24a <method_gnss_pvt_work_fn+0x1e>
   2a2e6:	bf00      	nop
   2a2e8:	2001c921 	.word	0x2001c921
   2a2ec:	00048157 	.word	0x00048157
   2a2f0:	20019460 	.word	0x20019460
   2a2f4:	20015728 	.word	0x20015728
   2a2f8:	2001a5a2 	.word	0x2001a5a2

0002a2fc <method_gnss_location_get>:

int method_gnss_location_get(const struct location_method_config *config)
{
   2a2fc:	b530      	push	{r4, r5, lr}
	int err;

	gnss_config = config->gnss;
   2a2fe:	f8d0 2002 	ldr.w	r2, [r0, #2]
   2a302:	4b19      	ldr	r3, [pc, #100]	; (2a368 <method_gnss_location_get+0x6c>)
{
   2a304:	b085      	sub	sp, #20
	gnss_config = config->gnss;
   2a306:	601a      	str	r2, [r3, #0]
   2a308:	88c2      	ldrh	r2, [r0, #6]

	/* GNSS event handler is already set once in method_gnss_init(). If no other thread is
	 * using GNSS, setting it again is not needed.
	 */
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   2a30a:	4818      	ldr	r0, [pc, #96]	; (2a36c <method_gnss_location_get+0x70>)
	gnss_config = config->gnss;
   2a30c:	809a      	strh	r2, [r3, #4]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   2a30e:	f00b ff91 	bl	36234 <nrf_modem_gnss_event_handler_set>
	if (err) {
   2a312:	4604      	mov	r4, r0
   2a314:	b138      	cbz	r0, 2a326 <method_gnss_location_get+0x2a>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   2a316:	4602      	mov	r2, r0
   2a318:	2145      	movs	r1, #69	; 0x45
   2a31a:	4815      	ldr	r0, [pc, #84]	; (2a370 <method_gnss_location_get+0x74>)
   2a31c:	f012 ff6d 	bl	3d1fa <z_log_minimal_printk>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);

	running = true;

	return 0;
}
   2a320:	4620      	mov	r0, r4
   2a322:	b005      	add	sp, #20
   2a324:	bd30      	pop	{r4, r5, pc}
	if (!initialized) {
   2a326:	4d13      	ldr	r5, [pc, #76]	; (2a374 <method_gnss_location_get+0x78>)
   2a328:	782b      	ldrb	r3, [r5, #0]
   2a32a:	b963      	cbnz	r3, 2a346 <method_gnss_location_get+0x4a>
		struct nrf_cloud_pgps_init_param param = {
   2a32c:	4b12      	ldr	r3, [pc, #72]	; (2a378 <method_gnss_location_get+0x7c>)
   2a32e:	9003      	str	r0, [sp, #12]
   2a330:	e9cd 3001 	strd	r3, r0, [sp, #4]
		err = nrf_cloud_pgps_init(&param);
   2a334:	a801      	add	r0, sp, #4
   2a336:	f004 fc39 	bl	2ebac <nrf_cloud_pgps_init>
		if (err) {
   2a33a:	4602      	mov	r2, r0
   2a33c:	b180      	cbz	r0, 2a360 <method_gnss_location_get+0x64>
			LOG_ERR("Error from PGPS init: %d", err);
   2a33e:	2145      	movs	r1, #69	; 0x45
   2a340:	480e      	ldr	r0, [pc, #56]	; (2a37c <method_gnss_location_get+0x80>)
   2a342:	f012 ff5a 	bl	3d1fa <z_log_minimal_printk>
	nrf_modem_gnss_start();
   2a346:	f00b fec9 	bl	360dc <nrf_modem_gnss_start>
	nrf_modem_gnss_stop();
   2a34a:	f00b ff1d 	bl	36188 <nrf_modem_gnss_stop>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);
   2a34e:	f7ff fd6b 	bl	29e28 <location_core_work_queue_get>
   2a352:	490b      	ldr	r1, [pc, #44]	; (2a380 <method_gnss_location_get+0x84>)
   2a354:	f00d fae2 	bl	3791c <k_work_submit_to_queue>
	running = true;
   2a358:	2201      	movs	r2, #1
   2a35a:	4b0a      	ldr	r3, [pc, #40]	; (2a384 <method_gnss_location_get+0x88>)
   2a35c:	701a      	strb	r2, [r3, #0]
	return 0;
   2a35e:	e7df      	b.n	2a320 <method_gnss_location_get+0x24>
			initialized = true;
   2a360:	2301      	movs	r3, #1
   2a362:	702b      	strb	r3, [r5, #0]
   2a364:	e7ef      	b.n	2a346 <method_gnss_location_get+0x4a>
   2a366:	bf00      	nop
   2a368:	2001a5a2 	.word	0x2001a5a2
   2a36c:	0002a16d 	.word	0x0002a16d
   2a370:	0004817e 	.word	0x0004817e
   2a374:	2001c920 	.word	0x2001c920
   2a378:	0002a019 	.word	0x0002a019
   2a37c:	000481ae 	.word	0x000481ae
   2a380:	200194b4 	.word	0x200194b4
   2a384:	2001c921 	.word	0x2001c921

0002a388 <method_gnss_init>:

int method_gnss_init(void)
{
	int err;
	running = false;
   2a388:	2200      	movs	r2, #0
   2a38a:	4b13      	ldr	r3, [pc, #76]	; (2a3d8 <method_gnss_init+0x50>)
{
   2a38c:	b510      	push	{r4, lr}

	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   2a38e:	4813      	ldr	r0, [pc, #76]	; (2a3dc <method_gnss_init+0x54>)
	running = false;
   2a390:	701a      	strb	r2, [r3, #0]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   2a392:	f00b ff4f 	bl	36234 <nrf_modem_gnss_event_handler_set>
	if (err) {
   2a396:	4604      	mov	r4, r0
   2a398:	b130      	cbz	r0, 2a3a8 <method_gnss_init+0x20>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   2a39a:	4602      	mov	r2, r0
   2a39c:	2145      	movs	r1, #69	; 0x45
   2a39e:	4810      	ldr	r0, [pc, #64]	; (2a3e0 <method_gnss_init+0x58>)
   2a3a0:	f012 ff2b 	bl	3d1fa <z_log_minimal_printk>
	/* Subscribe to sleep notification to monitor when modem enters power saving mode */
	method_gnss_modem_sleep_notif_subscribe(MIN_SLEEP_DURATION_FOR_STARTING_GNSS);
#endif
	lte_lc_register_handler(method_gnss_lte_ind_handler);
	return 0;
}
   2a3a4:	4620      	mov	r0, r4
   2a3a6:	bd10      	pop	{r4, pc}
	k_work_init(&method_gnss_pvt_work, method_gnss_pvt_work_fn);
   2a3a8:	490e      	ldr	r1, [pc, #56]	; (2a3e4 <method_gnss_init+0x5c>)
   2a3aa:	480f      	ldr	r0, [pc, #60]	; (2a3e8 <method_gnss_init+0x60>)
   2a3ac:	f00d fa5e 	bl	3786c <k_work_init>
	k_work_init(&method_gnss_start_work, method_gnss_positioning_work_fn);
   2a3b0:	490e      	ldr	r1, [pc, #56]	; (2a3ec <method_gnss_init+0x64>)
   2a3b2:	480f      	ldr	r0, [pc, #60]	; (2a3f0 <method_gnss_init+0x68>)
   2a3b4:	f00d fa5a 	bl	3786c <k_work_init>
	k_work_init(&method_gnss_agps_request_work, method_gnss_agps_request_work_fn);
   2a3b8:	490e      	ldr	r1, [pc, #56]	; (2a3f4 <method_gnss_init+0x6c>)
   2a3ba:	480f      	ldr	r0, [pc, #60]	; (2a3f8 <method_gnss_init+0x70>)
   2a3bc:	f00d fa56 	bl	3786c <k_work_init>
	k_work_init(&method_gnss_manage_pgps_work, method_gnss_manage_pgps);
   2a3c0:	490e      	ldr	r1, [pc, #56]	; (2a3fc <method_gnss_init+0x74>)
   2a3c2:	480f      	ldr	r0, [pc, #60]	; (2a400 <method_gnss_init+0x78>)
   2a3c4:	f00d fa52 	bl	3786c <k_work_init>
	k_work_init(&method_gnss_notify_pgps_work, method_gnss_notify_pgps);
   2a3c8:	490e      	ldr	r1, [pc, #56]	; (2a404 <method_gnss_init+0x7c>)
   2a3ca:	480f      	ldr	r0, [pc, #60]	; (2a408 <method_gnss_init+0x80>)
   2a3cc:	f00d fa4e 	bl	3786c <k_work_init>
	lte_lc_register_handler(method_gnss_lte_ind_handler);
   2a3d0:	480e      	ldr	r0, [pc, #56]	; (2a40c <method_gnss_init+0x84>)
   2a3d2:	f7fd f971 	bl	276b8 <lte_lc_register_handler>
	return 0;
   2a3d6:	e7e5      	b.n	2a3a4 <method_gnss_init+0x1c>
   2a3d8:	2001c921 	.word	0x2001c921
   2a3dc:	0002a16d 	.word	0x0002a16d
   2a3e0:	0004817e 	.word	0x0004817e
   2a3e4:	0002a22d 	.word	0x0002a22d
   2a3e8:	200194a4 	.word	0x200194a4
   2a3ec:	0002a059 	.word	0x0002a059
   2a3f0:	200194b4 	.word	0x200194b4
   2a3f4:	00029ff5 	.word	0x00029ff5
   2a3f8:	20019464 	.word	0x20019464
   2a3fc:	00029fb5 	.word	0x00029fb5
   2a400:	20019474 	.word	0x20019474
   2a404:	00029f99 	.word	0x00029f99
   2a408:	20019484 	.word	0x20019484
   2a40c:	0002a115 	.word	0x0002a115

0002a410 <method_cellular_positioning_work_fn>:
	}
	return 0;
}

static void method_cellular_positioning_work_fn(struct k_work *work)
{
   2a410:	b570      	push	{r4, r5, r6, lr}
   2a412:	4604      	mov	r4, r0
   2a414:	b090      	sub	sp, #64	; 0x40
	struct multicell_location location;
	struct location_data location_result = { 0 };
   2a416:	2228      	movs	r2, #40	; 0x28
   2a418:	2100      	movs	r1, #0
   2a41a:	a806      	add	r0, sp, #24
   2a41c:	f017 fba0 	bl	41b60 <memset>
	int ret;
	struct method_cellular_positioning_work_args *work_data =
		CONTAINER_OF(work, struct method_cellular_positioning_work_args, work_item);
	const struct location_cellular_config cellular_config = work_data->cellular_config;

	location_core_timer_start(cellular_config.timeout);
   2a420:	8a20      	ldrh	r0, [r4, #16]
	const struct location_cellular_config cellular_config = work_data->cellular_config;
   2a422:	7ca6      	ldrb	r6, [r4, #18]
	location_core_timer_start(cellular_config.timeout);
   2a424:	f7ff fd04 	bl	29e30 <location_core_timer_start>
	struct location_utils_modem_params_info modem_params = { 0 };
   2a428:	2214      	movs	r2, #20
   2a42a:	2100      	movs	r1, #0
   2a42c:	a801      	add	r0, sp, #4
   2a42e:	f017 fb97 	bl	41b60 <memset>
	err = lte_lc_neighbor_cell_measurement(LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT);
   2a432:	2000      	movs	r0, #0
   2a434:	f7fd fce2 	bl	27dfc <lte_lc_neighbor_cell_measurement>
	if (err) {
   2a438:	4d34      	ldr	r5, [pc, #208]	; (2a50c <method_cellular_positioning_work_fn+0xfc>)
   2a43a:	4602      	mov	r2, r0
   2a43c:	b358      	cbz	r0, 2a496 <method_cellular_positioning_work_fn+0x86>
		LOG_WRN("Failed to initiate neighbor cell measurements: %d, "
   2a43e:	2157      	movs	r1, #87	; 0x57
   2a440:	4833      	ldr	r0, [pc, #204]	; (2a510 <method_cellular_positioning_work_fn+0x100>)
   2a442:	f012 feda 	bl	3d1fa <z_log_minimal_printk>
		err = location_utils_modem_params_read(&modem_params);
   2a446:	a801      	add	r0, sp, #4
   2a448:	f7ff fd0e 	bl	29e68 <location_utils_modem_params_read>
		if (err < 0) {
   2a44c:	2800      	cmp	r0, #0
   2a44e:	da0d      	bge.n	2a46c <method_cellular_positioning_work_fn+0x5c>
			LOG_ERR("Could not obtain modem parameters");
   2a450:	2145      	movs	r1, #69	; 0x45
   2a452:	4830      	ldr	r0, [pc, #192]	; (2a514 <method_cellular_positioning_work_fn+0x104>)
   2a454:	f012 fed1 	bl	3d1fa <z_log_minimal_printk>

	LOG_DBG("Triggering neighbor cell measurements");
	ret = method_cellular_ncellmeas_start();
	if (ret) {
		LOG_WRN("Cannot start neighbor cell measurements");
   2a458:	2157      	movs	r1, #87	; 0x57
   2a45a:	482f      	ldr	r0, [pc, #188]	; (2a518 <method_cellular_positioning_work_fn+0x108>)
	if (!running) {
		return;
	}

	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
		LOG_WRN("Current cell ID not valid");
   2a45c:	f012 fecd 	bl	3d1fa <z_log_minimal_printk>
		location_core_event_cb_error();
   2a460:	f7ff fcb8 	bl	29dd4 <location_core_event_cb_error>
		running = false;
   2a464:	2300      	movs	r3, #0
   2a466:	702b      	strb	r3, [r5, #0]
		if (running) {
			running = false;
			location_core_event_cb(&location_result);
		}
	}
}
   2a468:	b010      	add	sp, #64	; 0x40
   2a46a:	bd70      	pop	{r4, r5, r6, pc}
		memset(&cell_data, 0, sizeof(struct lte_lc_cells_info));
   2a46c:	4c2b      	ldr	r4, [pc, #172]	; (2a51c <method_cellular_positioning_work_fn+0x10c>)
   2a46e:	2228      	movs	r2, #40	; 0x28
   2a470:	2100      	movs	r1, #0
   2a472:	f104 0010 	add.w	r0, r4, #16
   2a476:	f017 fb73 	bl	41b60 <memset>
		cell_data.current_cell.mcc = modem_params.mcc;
   2a47a:	9b01      	ldr	r3, [sp, #4]
   2a47c:	6023      	str	r3, [r4, #0]
		cell_data.current_cell.mnc = modem_params.mnc;
   2a47e:	9b02      	ldr	r3, [sp, #8]
   2a480:	6063      	str	r3, [r4, #4]
		cell_data.current_cell.tac = modem_params.tac;
   2a482:	9b04      	ldr	r3, [sp, #16]
   2a484:	60e3      	str	r3, [r4, #12]
		cell_data.current_cell.id = modem_params.cell_id;
   2a486:	9b03      	ldr	r3, [sp, #12]
   2a488:	60a3      	str	r3, [r4, #8]
		cell_data.current_cell.phys_cell_id = modem_params.phys_cell_id;
   2a48a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2a48e:	8523      	strh	r3, [r4, #40]	; 0x28
	z_impl_k_sem_give(sem);
   2a490:	4823      	ldr	r0, [pc, #140]	; (2a520 <method_cellular_positioning_work_fn+0x110>)
   2a492:	f00c ff7d 	bl	37390 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   2a496:	f04f 33ff 	mov.w	r3, #4294967295
   2a49a:	f04f 32ff 	mov.w	r2, #4294967295
   2a49e:	4820      	ldr	r0, [pc, #128]	; (2a520 <method_cellular_positioning_work_fn+0x110>)
   2a4a0:	f00c ffb2 	bl	37408 <z_impl_k_sem_take>
	if (!running) {
   2a4a4:	782b      	ldrb	r3, [r5, #0]
   2a4a6:	2b00      	cmp	r3, #0
   2a4a8:	d0de      	beq.n	2a468 <method_cellular_positioning_work_fn+0x58>
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   2a4aa:	4c1c      	ldr	r4, [pc, #112]	; (2a51c <method_cellular_positioning_work_fn+0x10c>)
   2a4ac:	68a3      	ldr	r3, [r4, #8]
   2a4ae:	3301      	adds	r3, #1
   2a4b0:	d102      	bne.n	2a4b8 <method_cellular_positioning_work_fn+0xa8>
		LOG_WRN("Current cell ID not valid");
   2a4b2:	2157      	movs	r1, #87	; 0x57
   2a4b4:	481b      	ldr	r0, [pc, #108]	; (2a524 <method_cellular_positioning_work_fn+0x114>)
   2a4b6:	e7d1      	b.n	2a45c <method_cellular_positioning_work_fn+0x4c>
	location_utils_systime_to_location_datetime(&location_result.datetime);
   2a4b8:	a80d      	add	r0, sp, #52	; 0x34
   2a4ba:	f7ff fd35 	bl	29f28 <location_utils_systime_to_location_datetime>
	ret = multicell_location_get(cellular_config.service, &cell_data, &location);
   2a4be:	4621      	mov	r1, r4
   2a4c0:	4630      	mov	r0, r6
   2a4c2:	aa01      	add	r2, sp, #4
   2a4c4:	f7ff f92c 	bl	29720 <multicell_location_get>
	if (ret) {
   2a4c8:	4604      	mov	r4, r0
   2a4ca:	b138      	cbz	r0, 2a4dc <method_cellular_positioning_work_fn+0xcc>
		LOG_ERR("Failed to acquire location from multicell_location lib, error: %d", ret);
   2a4cc:	4602      	mov	r2, r0
   2a4ce:	2145      	movs	r1, #69	; 0x45
   2a4d0:	4815      	ldr	r0, [pc, #84]	; (2a528 <method_cellular_positioning_work_fn+0x118>)
   2a4d2:	f012 fe92 	bl	3d1fa <z_log_minimal_printk>
		location_core_event_cb_error();
   2a4d6:	f7ff fc7d 	bl	29dd4 <location_core_event_cb_error>
   2a4da:	e7c5      	b.n	2a468 <method_cellular_positioning_work_fn+0x58>
		location_result.method = LOCATION_METHOD_CELLULAR;
   2a4dc:	2301      	movs	r3, #1
		location_result.latitude = location.latitude;
   2a4de:	9801      	ldr	r0, [sp, #4]
		location_result.method = LOCATION_METHOD_CELLULAR;
   2a4e0:	f88d 3018 	strb.w	r3, [sp, #24]
		location_result.latitude = location.latitude;
   2a4e4:	f7f2 f910 	bl	1c708 <__aeabi_f2d>
   2a4e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
		location_result.longitude = location.longitude;
   2a4ec:	9802      	ldr	r0, [sp, #8]
   2a4ee:	f7f2 f90b 	bl	1c708 <__aeabi_f2d>
		location_result.accuracy = location.accuracy;
   2a4f2:	9b03      	ldr	r3, [sp, #12]
		location_result.longitude = location.longitude;
   2a4f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		location_result.accuracy = location.accuracy;
   2a4f8:	930c      	str	r3, [sp, #48]	; 0x30
		if (running) {
   2a4fa:	782b      	ldrb	r3, [r5, #0]
   2a4fc:	2b00      	cmp	r3, #0
   2a4fe:	d0b3      	beq.n	2a468 <method_cellular_positioning_work_fn+0x58>
			location_core_event_cb(&location_result);
   2a500:	a806      	add	r0, sp, #24
			running = false;
   2a502:	702c      	strb	r4, [r5, #0]
			location_core_event_cb(&location_result);
   2a504:	f7ff fb8c 	bl	29c20 <location_core_event_cb>
   2a508:	e7ae      	b.n	2a468 <method_cellular_positioning_work_fn+0x58>
   2a50a:	bf00      	nop
   2a50c:	2001c922 	.word	0x2001c922
   2a510:	000481cc 	.word	0x000481cc
   2a514:	0004822b 	.word	0x0004822b
   2a518:	00048252 	.word	0x00048252
   2a51c:	20014590 	.word	0x20014590
   2a520:	20015018 	.word	0x20015018
   2a524:	0004827f 	.word	0x0004827f
   2a528:	0004829e 	.word	0x0004829e

0002a52c <method_cellular_lte_ind_handler>:
{
   2a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (evt->type) {
   2a52e:	7803      	ldrb	r3, [r0, #0]
{
   2a530:	4604      	mov	r4, r0
	switch (evt->type) {
   2a532:	2b07      	cmp	r3, #7
   2a534:	d127      	bne.n	2a586 <method_cellular_lte_ind_handler+0x5a>
		memcpy(&cell_data.current_cell,
   2a536:	4a14      	ldr	r2, [pc, #80]	; (2a588 <method_cellular_lte_ind_handler+0x5c>)
   2a538:	f100 0308 	add.w	r3, r0, #8
   2a53c:	4616      	mov	r6, r2
   2a53e:	f100 0738 	add.w	r7, r0, #56	; 0x38
   2a542:	4615      	mov	r5, r2
   2a544:	6818      	ldr	r0, [r3, #0]
   2a546:	6859      	ldr	r1, [r3, #4]
   2a548:	3308      	adds	r3, #8
   2a54a:	c503      	stmia	r5!, {r0, r1}
   2a54c:	42bb      	cmp	r3, r7
   2a54e:	462a      	mov	r2, r5
   2a550:	d1f7      	bne.n	2a542 <method_cellular_lte_ind_handler+0x16>
		if (evt->cells_info.ncells_count > 0 && evt->cells_info.neighbor_cells) {
   2a552:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   2a556:	b172      	cbz	r2, 2a576 <method_cellular_lte_ind_handler+0x4a>
   2a558:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   2a55a:	b161      	cbz	r1, 2a576 <method_cellular_lte_ind_handler+0x4a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a55c:	6b70      	ldr	r0, [r6, #52]	; 0x34
   2a55e:	0112      	lsls	r2, r2, #4
   2a560:	f017 fade 	bl	41b20 <memcpy>
			cell_data.ncells_count = evt->cells_info.ncells_count;
   2a564:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2a568:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	z_impl_k_sem_give(sem);
   2a56c:	4807      	ldr	r0, [pc, #28]	; (2a58c <method_cellular_lte_ind_handler+0x60>)
}
   2a56e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a572:	f00c bf0d 	b.w	37390 <z_impl_k_sem_give>
			cell_data.ncells_count = 0;
   2a576:	2300      	movs	r3, #0
			LOG_INF("No neighbor cell information from modem.");
   2a578:	2149      	movs	r1, #73	; 0x49
   2a57a:	4805      	ldr	r0, [pc, #20]	; (2a590 <method_cellular_lte_ind_handler+0x64>)
			cell_data.ncells_count = 0;
   2a57c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
			LOG_INF("No neighbor cell information from modem.");
   2a580:	f012 fe3b 	bl	3d1fa <z_log_minimal_printk>
   2a584:	e7f2      	b.n	2a56c <method_cellular_lte_ind_handler+0x40>
}
   2a586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a588:	20014590 	.word	0x20014590
   2a58c:	20015018 	.word	0x20015018
   2a590:	000482e5 	.word	0x000482e5

0002a594 <method_cellular_location_get>:

int method_cellular_location_get(const struct location_method_config *config)
{
   2a594:	b510      	push	{r4, lr}
	/* Note: LTE status not checked, let it fail in NCELLMEAS if no connection */

	method_cellular_positioning_work.cellular_config = config->cellular;
   2a596:	f8d0 0002 	ldr.w	r0, [r0, #2]
   2a59a:	4c06      	ldr	r4, [pc, #24]	; (2a5b4 <method_cellular_location_get+0x20>)
   2a59c:	6120      	str	r0, [r4, #16]
	k_work_submit_to_queue(location_core_work_queue_get(),
   2a59e:	f7ff fc43 	bl	29e28 <location_core_work_queue_get>
   2a5a2:	4621      	mov	r1, r4
   2a5a4:	f00d f9ba 	bl	3791c <k_work_submit_to_queue>
			       &method_cellular_positioning_work.work_item);

	running = true;
   2a5a8:	2201      	movs	r2, #1
   2a5aa:	4b03      	ldr	r3, [pc, #12]	; (2a5b8 <method_cellular_location_get+0x24>)

	return 0;
}
   2a5ac:	2000      	movs	r0, #0
	running = true;
   2a5ae:	701a      	strb	r2, [r3, #0]
}
   2a5b0:	bd10      	pop	{r4, pc}
   2a5b2:	bf00      	nop
   2a5b4:	200194d4 	.word	0x200194d4
   2a5b8:	2001c922 	.word	0x2001c922

0002a5bc <method_cellular_cancel>:

int method_cellular_cancel(void)
{
   2a5bc:	b538      	push	{r3, r4, r5, lr}
	if (running) {
   2a5be:	4d09      	ldr	r5, [pc, #36]	; (2a5e4 <method_cellular_cancel+0x28>)
   2a5c0:	782b      	ldrb	r3, [r5, #0]
   2a5c2:	b15b      	cbz	r3, 2a5dc <method_cellular_cancel+0x20>
		(void)lte_lc_neighbor_cell_measurement_cancel();
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
		running = false;
   2a5c4:	2400      	movs	r4, #0
		(void)lte_lc_neighbor_cell_measurement_cancel();
   2a5c6:	f7fd fc2f 	bl	27e28 <lte_lc_neighbor_cell_measurement_cancel>
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
   2a5ca:	4807      	ldr	r0, [pc, #28]	; (2a5e8 <method_cellular_cancel+0x2c>)
   2a5cc:	f00d fa00 	bl	379d0 <k_work_cancel>
		running = false;
   2a5d0:	702c      	strb	r4, [r5, #0]
	z_impl_k_sem_reset(sem);
   2a5d2:	4806      	ldr	r0, [pc, #24]	; (2a5ec <method_cellular_cancel+0x30>)
   2a5d4:	f00c ff82 	bl	374dc <z_impl_k_sem_reset>
		k_sem_reset(&cellmeas_data_ready);
	} else {
		return -EPERM;
	}

	return 0;
   2a5d8:	4620      	mov	r0, r4
}
   2a5da:	bd38      	pop	{r3, r4, r5, pc}
		return -EPERM;
   2a5dc:	f04f 30ff 	mov.w	r0, #4294967295
   2a5e0:	e7fb      	b.n	2a5da <method_cellular_cancel+0x1e>
   2a5e2:	bf00      	nop
   2a5e4:	2001c922 	.word	0x2001c922
   2a5e8:	200194d4 	.word	0x200194d4
   2a5ec:	20015018 	.word	0x20015018

0002a5f0 <method_cellular_init>:

int method_cellular_init(void)
{
   2a5f0:	b510      	push	{r4, lr}
	int ret;

	running = false;
   2a5f2:	2400      	movs	r4, #0
   2a5f4:	4b0d      	ldr	r3, [pc, #52]	; (2a62c <method_cellular_init+0x3c>)

	k_work_init(&method_cellular_positioning_work.work_item,
   2a5f6:	490e      	ldr	r1, [pc, #56]	; (2a630 <method_cellular_init+0x40>)
   2a5f8:	480e      	ldr	r0, [pc, #56]	; (2a634 <method_cellular_init+0x44>)
	running = false;
   2a5fa:	701c      	strb	r4, [r3, #0]
	k_work_init(&method_cellular_positioning_work.work_item,
   2a5fc:	f00d f936 	bl	3786c <k_work_init>
		    method_cellular_positioning_work_fn);
	lte_lc_register_handler(method_cellular_lte_ind_handler);
   2a600:	480d      	ldr	r0, [pc, #52]	; (2a638 <method_cellular_init+0x48>)
   2a602:	f7fd f859 	bl	276b8 <lte_lc_register_handler>

	ret = multicell_location_provision_certificate(false);
   2a606:	4620      	mov	r0, r4
   2a608:	f7ff f8b8 	bl	2977c <multicell_location_provision_certificate>
	if (ret) {
   2a60c:	4604      	mov	r4, r0
   2a60e:	b158      	cbz	r0, 2a628 <method_cellular_init+0x38>
		LOG_ERR("Certificate provisioning failed, ret %d", ret);
   2a610:	4602      	mov	r2, r0
   2a612:	2145      	movs	r1, #69	; 0x45
   2a614:	4809      	ldr	r0, [pc, #36]	; (2a63c <method_cellular_init+0x4c>)
   2a616:	f012 fdf0 	bl	3d1fa <z_log_minimal_printk>
		if (ret == -EACCES) {
   2a61a:	f114 0f0d 	cmn.w	r4, #13
   2a61e:	d103      	bne.n	2a628 <method_cellular_init+0x38>
			LOG_WRN("err: -EACCESS, that might indicate that modem is in state where "
   2a620:	2157      	movs	r1, #87	; 0x57
   2a622:	4807      	ldr	r0, [pc, #28]	; (2a640 <method_cellular_init+0x50>)
   2a624:	f012 fde9 	bl	3d1fa <z_log_minimal_printk>
		}
		return ret;
	}

	return 0;
}
   2a628:	4620      	mov	r0, r4
   2a62a:	bd10      	pop	{r4, pc}
   2a62c:	2001c922 	.word	0x2001c922
   2a630:	0002a411 	.word	0x0002a411
   2a634:	200194d4 	.word	0x200194d4
   2a638:	0002a52d 	.word	0x0002a52d
   2a63c:	00048313 	.word	0x00048313
   2a640:	00048340 	.word	0x00048340

0002a644 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   2a644:	b508      	push	{r3, lr}
	if (ret != 0) {
   2a646:	b9d8      	cbnz	r0, 2a680 <on_modem_lib_init+0x3c>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2a648:	480e      	ldr	r0, [pc, #56]	; (2a684 <on_modem_lib_init+0x40>)
   2a64a:	f7f2 fdfa 	bl	1d242 <strlen>
   2a64e:	b140      	cbz	r0, 2a662 <on_modem_lib_init+0x1e>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO) != 0) {
   2a650:	490c      	ldr	r1, [pc, #48]	; (2a684 <on_modem_lib_init+0x40>)
   2a652:	480d      	ldr	r0, [pc, #52]	; (2a688 <on_modem_lib_init+0x44>)
   2a654:	f00a fff4 	bl	35640 <nrf_modem_at_printf>
   2a658:	b118      	cbz	r0, 2a662 <on_modem_lib_init+0x1e>
			LOG_ERR("Failed to set MAGPIO configuration");
   2a65a:	2145      	movs	r1, #69	; 0x45
   2a65c:	480b      	ldr	r0, [pc, #44]	; (2a68c <on_modem_lib_init+0x48>)
   2a65e:	f012 fdcc 	bl	3d1fa <z_log_minimal_printk>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   2a662:	480b      	ldr	r0, [pc, #44]	; (2a690 <on_modem_lib_init+0x4c>)
   2a664:	f7f2 fded 	bl	1d242 <strlen>
   2a668:	b150      	cbz	r0, 2a680 <on_modem_lib_init+0x3c>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0) != 0) {
   2a66a:	4909      	ldr	r1, [pc, #36]	; (2a690 <on_modem_lib_init+0x4c>)
   2a66c:	4806      	ldr	r0, [pc, #24]	; (2a688 <on_modem_lib_init+0x44>)
   2a66e:	f00a ffe7 	bl	35640 <nrf_modem_at_printf>
   2a672:	b128      	cbz	r0, 2a680 <on_modem_lib_init+0x3c>
			LOG_ERR("Failed to set COEX0 configuration");
		}
	}
}
   2a674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_ERR("Failed to set COEX0 configuration");
   2a678:	2145      	movs	r1, #69	; 0x45
   2a67a:	4806      	ldr	r0, [pc, #24]	; (2a694 <on_modem_lib_init+0x50>)
   2a67c:	f012 bdbd 	b.w	3d1fa <z_log_minimal_printk>
}
   2a680:	bd08      	pop	{r3, pc}
   2a682:	bf00      	nop
   2a684:	000446c9 	.word	0x000446c9
   2a688:	0004abfc 	.word	0x0004abfc
   2a68c:	000483bb 	.word	0x000483bb
   2a690:	000446e8 	.word	0x000446e8
   2a694:	000483e3 	.word	0x000483e3

0002a698 <json_item_string_exists>:
	return err;
}

static bool json_item_string_exists(const cJSON *const obj, const char *const key,
				    const char *const val)
{
   2a698:	b570      	push	{r4, r5, r6, lr}
   2a69a:	460e      	mov	r6, r1
   2a69c:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(obj != NULL);
   2a69e:	4604      	mov	r4, r0
   2a6a0:	b950      	cbnz	r0, 2a6b8 <json_item_string_exists+0x20>
   2a6a2:	4911      	ldr	r1, [pc, #68]	; (2a6e8 <json_item_string_exists+0x50>)
   2a6a4:	4811      	ldr	r0, [pc, #68]	; (2a6ec <json_item_string_exists+0x54>)
   2a6a6:	f240 52a3 	movw	r2, #1443	; 0x5a3
   2a6aa:	f012 fd6c 	bl	3d186 <assert_print>
   2a6ae:	f240 51a3 	movw	r1, #1443	; 0x5a3
   2a6b2:	480d      	ldr	r0, [pc, #52]	; (2a6e8 <json_item_string_exists+0x50>)
   2a6b4:	f012 fd60 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(key != NULL);

	char *str_val;
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2a6b8:	4631      	mov	r1, r6
   2a6ba:	4620      	mov	r0, r4
   2a6bc:	f015 fde8 	bl	40290 <cJSON_GetObjectItem>

	if (!item) {
   2a6c0:	b148      	cbz	r0, 2a6d6 <json_item_string_exists+0x3e>
		return false;
	}

	if (!val) {
   2a6c2:	b92d      	cbnz	r5, 2a6d0 <json_item_string_exists+0x38>
		return cJSON_IsNull(item);
   2a6c4:	f015 fee4 	bl	40490 <cJSON_IsNull>
   2a6c8:	3800      	subs	r0, #0
   2a6ca:	bf18      	it	ne
   2a6cc:	2001      	movne	r0, #1
	if (!str_val) {
		return false;
	}

	return (strcmp(str_val, val) == 0);
}
   2a6ce:	bd70      	pop	{r4, r5, r6, pc}
	str_val = cJSON_GetStringValue(item);
   2a6d0:	f015 fef2 	bl	404b8 <cJSON_GetStringValue>
	if (!str_val) {
   2a6d4:	b908      	cbnz	r0, 2a6da <json_item_string_exists+0x42>
		return false;
   2a6d6:	2000      	movs	r0, #0
   2a6d8:	e7f9      	b.n	2a6ce <json_item_string_exists+0x36>
	return (strcmp(str_val, val) == 0);
   2a6da:	4629      	mov	r1, r5
   2a6dc:	f7f2 fda7 	bl	1d22e <strcmp>
   2a6e0:	fab0 f080 	clz	r0, r0
   2a6e4:	0940      	lsrs	r0, r0, #5
   2a6e6:	e7f2      	b.n	2a6ce <json_item_string_exists+0x36>
   2a6e8:	00048418 	.word	0x00048418
   2a6ec:	0004494f 	.word	0x0004494f

0002a6f0 <nrf_cloud_decode_desired_obj>:
{
   2a6f0:	b538      	push	{r3, r4, r5, lr}
   2a6f2:	460c      	mov	r4, r1
	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2a6f4:	4605      	mov	r5, r0
   2a6f6:	b140      	cbz	r0, 2a70a <nrf_cloud_decode_desired_obj+0x1a>
		state_obj = json_object_decode(root_obj, JSON_KEY_STATE);
   2a6f8:	4904      	ldr	r1, [pc, #16]	; (2a70c <nrf_cloud_decode_desired_obj+0x1c>)
   2a6fa:	f015 fb33 	bl	3fd64 <json_object_decode>
		if (state_obj == NULL) {
   2a6fe:	b918      	cbnz	r0, 2a708 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, JSON_KEY_DES);
   2a700:	4628      	mov	r0, r5
   2a702:	4903      	ldr	r1, [pc, #12]	; (2a710 <nrf_cloud_decode_desired_obj+0x20>)
   2a704:	f015 fb2e 	bl	3fd64 <json_object_decode>
			*desired_obj = state_obj;
   2a708:	6020      	str	r0, [r4, #0]
}
   2a70a:	bd38      	pop	{r3, r4, r5, pc}
   2a70c:	00048457 	.word	0x00048457
   2a710:	0004845d 	.word	0x0004845d

0002a714 <encode_info_item_cs>:
{
   2a714:	b570      	push	{r4, r5, r6, lr}
   2a716:	4605      	mov	r5, r0
	switch (inf) {
   2a718:	2d01      	cmp	r5, #1
{
   2a71a:	460c      	mov	r4, r1
   2a71c:	4610      	mov	r0, r2
   2a71e:	461e      	mov	r6, r3
	switch (inf) {
   2a720:	d003      	beq.n	2a72a <encode_info_item_cs+0x16>
   2a722:	2d02      	cmp	r5, #2
   2a724:	d01f      	beq.n	2a766 <encode_info_item_cs+0x52>
	return 0;
   2a726:	2000      	movs	r0, #0
   2a728:	e00a      	b.n	2a740 <encode_info_item_cs+0x2c>
		move_obj = cJSON_DetachItemFromObject(inf_obj, inf_name);
   2a72a:	f015 fddf 	bl	402ec <cJSON_DetachItemFromObject>
		if (!move_obj) {
   2a72e:	4605      	mov	r5, r0
   2a730:	b938      	cbnz	r0, 2a742 <encode_info_item_cs+0x2e>
			LOG_ERR("Info item \"%s\" not found", log_strdup(inf_name));
   2a732:	4811      	ldr	r0, [pc, #68]	; (2a778 <encode_info_item_cs+0x64>)
   2a734:	4622      	mov	r2, r4
   2a736:	2145      	movs	r1, #69	; 0x45
   2a738:	f012 fd5f 	bl	3d1fa <z_log_minimal_printk>
			return -ENOMSG;
   2a73c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   2a740:	bd70      	pop	{r4, r5, r6, pc}
		if (json_add_obj_cs(root_obj, inf_name, move_obj)) {
   2a742:	4602      	mov	r2, r0
   2a744:	4621      	mov	r1, r4
   2a746:	4630      	mov	r0, r6
   2a748:	f015 faef 	bl	3fd2a <json_add_obj_cs>
   2a74c:	2800      	cmp	r0, #0
   2a74e:	d0ea      	beq.n	2a726 <encode_info_item_cs+0x12>
			cJSON_Delete(move_obj);
   2a750:	4628      	mov	r0, r5
   2a752:	f007 ff07 	bl	32564 <cJSON_Delete>
			LOG_ERR("Failed to add info item \"%s\"", log_strdup(inf_name));
   2a756:	4622      	mov	r2, r4
   2a758:	2145      	movs	r1, #69	; 0x45
   2a75a:	4808      	ldr	r0, [pc, #32]	; (2a77c <encode_info_item_cs+0x68>)
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a75c:	f012 fd4d 	bl	3d1fa <z_log_minimal_printk>
			return -ENOMEM;
   2a760:	f06f 000b 	mvn.w	r0, #11
   2a764:	e7ec      	b.n	2a740 <encode_info_item_cs+0x2c>
		if (json_add_null_cs(root_obj, inf_name)) {
   2a766:	4618      	mov	r0, r3
   2a768:	f015 fb00 	bl	3fd6c <json_add_null_cs>
   2a76c:	2800      	cmp	r0, #0
   2a76e:	d0da      	beq.n	2a726 <encode_info_item_cs+0x12>
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a770:	4622      	mov	r2, r4
   2a772:	2145      	movs	r1, #69	; 0x45
   2a774:	4802      	ldr	r0, [pc, #8]	; (2a780 <encode_info_item_cs+0x6c>)
   2a776:	e7f1      	b.n	2a75c <encode_info_item_cs+0x48>
   2a778:	00048465 	.word	0x00048465
   2a77c:	00048483 	.word	0x00048483
   2a780:	000484a5 	.word	0x000484a5

0002a784 <get_error_code_value>:
{
   2a784:	b538      	push	{r3, r4, r5, lr}
   2a786:	460d      	mov	r5, r1
	err_obj = cJSON_GetObjectItem(obj, NRF_CLOUD_JSON_ERR_KEY);
   2a788:	490c      	ldr	r1, [pc, #48]	; (2a7bc <get_error_code_value+0x38>)
   2a78a:	f015 fd81 	bl	40290 <cJSON_GetObjectItem>
	if (!err_obj) {
   2a78e:	4604      	mov	r4, r0
   2a790:	b188      	cbz	r0, 2a7b6 <get_error_code_value+0x32>
	if (!cJSON_IsNumber(err_obj)) {
   2a792:	f015 fe83 	bl	4049c <cJSON_IsNumber>
   2a796:	b930      	cbnz	r0, 2a7a6 <get_error_code_value+0x22>
		LOG_WRN("Invalid JSON data type for error value");
   2a798:	4809      	ldr	r0, [pc, #36]	; (2a7c0 <get_error_code_value+0x3c>)
   2a79a:	2157      	movs	r1, #87	; 0x57
   2a79c:	f012 fd2d 	bl	3d1fa <z_log_minimal_printk>
   2a7a0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
}
   2a7a4:	bd38      	pop	{r3, r4, r5, pc}
	*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);
   2a7a6:	4620      	mov	r0, r4
   2a7a8:	f007 ffaa 	bl	32700 <cJSON_GetNumberValue>
   2a7ac:	f7f2 fab4 	bl	1cd18 <__aeabi_d2iz>
   2a7b0:	6028      	str	r0, [r5, #0]
	return 0;
   2a7b2:	2000      	movs	r0, #0
   2a7b4:	e7f6      	b.n	2a7a4 <get_error_code_value+0x20>
		return -ENOMSG;
   2a7b6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2a7ba:	e7f3      	b.n	2a7a4 <get_error_code_value+0x20>
   2a7bc:	000484ce 	.word	0x000484ce
   2a7c0:	000484d2 	.word	0x000484d2

0002a7c4 <nrf_cloud_codec_init>:
{
   2a7c4:	b510      	push	{r4, lr}
	if (!initialized) {
   2a7c6:	4c04      	ldr	r4, [pc, #16]	; (2a7d8 <nrf_cloud_codec_init+0x14>)
   2a7c8:	7823      	ldrb	r3, [r4, #0]
   2a7ca:	b91b      	cbnz	r3, 2a7d4 <nrf_cloud_codec_init+0x10>
		cJSON_Init();
   2a7cc:	f007 ffac 	bl	32728 <cJSON_Init>
		initialized = true;
   2a7d0:	2301      	movs	r3, #1
   2a7d2:	7023      	strb	r3, [r4, #0]
}
   2a7d4:	2000      	movs	r0, #0
   2a7d6:	bd10      	pop	{r4, pc}
   2a7d8:	2001c923 	.word	0x2001c923

0002a7dc <json_create_req_obj>:
{
   2a7dc:	b570      	push	{r4, r5, r6, lr}
   2a7de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(app_id != NULL);
   2a7e0:	4606      	mov	r6, r0
   2a7e2:	b940      	cbnz	r0, 2a7f6 <json_create_req_obj+0x1a>
   2a7e4:	4915      	ldr	r1, [pc, #84]	; (2a83c <json_create_req_obj+0x60>)
   2a7e6:	4816      	ldr	r0, [pc, #88]	; (2a840 <json_create_req_obj+0x64>)
   2a7e8:	2266      	movs	r2, #102	; 0x66
   2a7ea:	f012 fccc 	bl	3d186 <assert_print>
   2a7ee:	2166      	movs	r1, #102	; 0x66
   2a7f0:	4812      	ldr	r0, [pc, #72]	; (2a83c <json_create_req_obj+0x60>)
   2a7f2:	f012 fcc1 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(msg_type != NULL);
   2a7f6:	b945      	cbnz	r5, 2a80a <json_create_req_obj+0x2e>
   2a7f8:	4910      	ldr	r1, [pc, #64]	; (2a83c <json_create_req_obj+0x60>)
   2a7fa:	4811      	ldr	r0, [pc, #68]	; (2a840 <json_create_req_obj+0x64>)
   2a7fc:	2267      	movs	r2, #103	; 0x67
   2a7fe:	f012 fcc2 	bl	3d186 <assert_print>
   2a802:	2167      	movs	r1, #103	; 0x67
   2a804:	480d      	ldr	r0, [pc, #52]	; (2a83c <json_create_req_obj+0x60>)
   2a806:	f012 fcb7 	bl	3d178 <assert_post_action>
	nrf_cloud_codec_init();
   2a80a:	f7ff ffdb 	bl	2a7c4 <nrf_cloud_codec_init>
	cJSON *req_obj = cJSON_CreateObject();
   2a80e:	f007 ff6b 	bl	326e8 <cJSON_CreateObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a812:	4632      	mov	r2, r6
   2a814:	490b      	ldr	r1, [pc, #44]	; (2a844 <json_create_req_obj+0x68>)
	cJSON *req_obj = cJSON_CreateObject();
   2a816:	4604      	mov	r4, r0
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a818:	f015 fdd0 	bl	403bc <cJSON_AddStringToObject>
   2a81c:	b928      	cbnz	r0, 2a82a <json_create_req_obj+0x4e>
		cJSON_Delete(req_obj);
   2a81e:	4620      	mov	r0, r4
   2a820:	f007 fea0 	bl	32564 <cJSON_Delete>
		req_obj = NULL;
   2a824:	2400      	movs	r4, #0
}
   2a826:	4620      	mov	r0, r4
   2a828:	bd70      	pop	{r4, r5, r6, pc}
	    !cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2a82a:	462a      	mov	r2, r5
   2a82c:	4620      	mov	r0, r4
   2a82e:	4906      	ldr	r1, [pc, #24]	; (2a848 <json_create_req_obj+0x6c>)
   2a830:	f015 fdc4 	bl	403bc <cJSON_AddStringToObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a834:	2800      	cmp	r0, #0
   2a836:	d1f6      	bne.n	2a826 <json_create_req_obj+0x4a>
   2a838:	e7f1      	b.n	2a81e <json_create_req_obj+0x42>
   2a83a:	bf00      	nop
   2a83c:	00048418 	.word	0x00048418
   2a840:	0004494f 	.word	0x0004494f
   2a844:	00043d12 	.word	0x00043d12
   2a848:	00043d63 	.word	0x00043d63

0002a84c <nrf_cloud_json_add_modem_info>:
{
   2a84c:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(data_obj != NULL);
   2a84e:	4605      	mov	r5, r0
{
   2a850:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	__ASSERT_NO_MSG(data_obj != NULL);
   2a854:	b940      	cbnz	r0, 2a868 <nrf_cloud_json_add_modem_info+0x1c>
   2a856:	493f      	ldr	r1, [pc, #252]	; (2a954 <nrf_cloud_json_add_modem_info+0x108>)
   2a858:	483f      	ldr	r0, [pc, #252]	; (2a958 <nrf_cloud_json_add_modem_info+0x10c>)
   2a85a:	22bc      	movs	r2, #188	; 0xbc
   2a85c:	f012 fc93 	bl	3d186 <assert_print>
   2a860:	21bc      	movs	r1, #188	; 0xbc
   2a862:	483c      	ldr	r0, [pc, #240]	; (2a954 <nrf_cloud_json_add_modem_info+0x108>)
   2a864:	f012 fc88 	bl	3d178 <assert_post_action>
	struct modem_param_info modem_info = {0};
   2a868:	f640 1258 	movw	r2, #2392	; 0x958
   2a86c:	2100      	movs	r1, #0
   2a86e:	4668      	mov	r0, sp
   2a870:	f017 f976 	bl	41b60 <memset>
	int err = modem_info_init();
   2a874:	f7fe f94a 	bl	28b0c <modem_info_init>
	if (err) {
   2a878:	4604      	mov	r4, r0
   2a87a:	b140      	cbz	r0, 2a88e <nrf_cloud_json_add_modem_info+0x42>
		LOG_ERR("Could not initialize modem info module, error: %d",
   2a87c:	2145      	movs	r1, #69	; 0x45
   2a87e:	4602      	mov	r2, r0
   2a880:	4836      	ldr	r0, [pc, #216]	; (2a95c <nrf_cloud_json_add_modem_info+0x110>)
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a882:	f012 fcba 	bl	3d1fa <z_log_minimal_printk>
}
   2a886:	4620      	mov	r0, r4
   2a888:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2a88c:	bd30      	pop	{r4, r5, pc}
	err = modem_info_params_init(modem_info);
   2a88e:	4668      	mov	r0, sp
   2a890:	f7fe f974 	bl	28b7c <modem_info_params_init>
	if (err) {
   2a894:	4604      	mov	r4, r0
   2a896:	b118      	cbz	r0, 2a8a0 <nrf_cloud_json_add_modem_info+0x54>
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a898:	4602      	mov	r2, r0
   2a89a:	2145      	movs	r1, #69	; 0x45
   2a89c:	4830      	ldr	r0, [pc, #192]	; (2a960 <nrf_cloud_json_add_modem_info+0x114>)
   2a89e:	e7f0      	b.n	2a882 <nrf_cloud_json_add_modem_info+0x36>
	err = modem_info_params_get(modem_info);
   2a8a0:	4668      	mov	r0, sp
   2a8a2:	f7fe f9c1 	bl	28c28 <modem_info_params_get>
	if (err) {
   2a8a6:	4604      	mov	r4, r0
   2a8a8:	2800      	cmp	r0, #0
   2a8aa:	d14f      	bne.n	2a94c <nrf_cloud_json_add_modem_info+0x100>
	__ASSERT_NO_MSG(data_obj != NULL);
   2a8ac:	b945      	cbnz	r5, 2a8c0 <nrf_cloud_json_add_modem_info+0x74>
   2a8ae:	4929      	ldr	r1, [pc, #164]	; (2a954 <nrf_cloud_json_add_modem_info+0x108>)
   2a8b0:	4829      	ldr	r0, [pc, #164]	; (2a958 <nrf_cloud_json_add_modem_info+0x10c>)
   2a8b2:	22a7      	movs	r2, #167	; 0xa7
   2a8b4:	f012 fc67 	bl	3d186 <assert_print>
   2a8b8:	21a7      	movs	r1, #167	; 0xa7
   2a8ba:	4826      	ldr	r0, [pc, #152]	; (2a954 <nrf_cloud_json_add_modem_info+0x108>)
   2a8bc:	f012 fc5c 	bl	3d178 <assert_post_action>
	if (json_add_num_cs(data_obj, NRF_CLOUD_JSON_MCC_KEY,
   2a8c0:	f8bd 01c0 	ldrh.w	r0, [sp, #448]	; 0x1c0
   2a8c4:	f7f1 fefe 	bl	1c6c4 <__aeabi_ui2d>
   2a8c8:	4602      	mov	r2, r0
   2a8ca:	460b      	mov	r3, r1
   2a8cc:	4628      	mov	r0, r5
   2a8ce:	4925      	ldr	r1, [pc, #148]	; (2a964 <nrf_cloud_json_add_modem_info+0x118>)
   2a8d0:	f015 fa1e 	bl	3fd10 <json_add_num_cs>
   2a8d4:	2800      	cmp	r0, #0
   2a8d6:	d136      	bne.n	2a946 <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_MNC_KEY,
   2a8d8:	f8bd 0230 	ldrh.w	r0, [sp, #560]	; 0x230
   2a8dc:	f7f1 fef2 	bl	1c6c4 <__aeabi_ui2d>
   2a8e0:	4602      	mov	r2, r0
   2a8e2:	460b      	mov	r3, r1
   2a8e4:	4628      	mov	r0, r5
   2a8e6:	4920      	ldr	r1, [pc, #128]	; (2a968 <nrf_cloud_json_add_modem_info+0x11c>)
   2a8e8:	f015 fa12 	bl	3fd10 <json_add_num_cs>
		modem_info->network.mcc.value) ||
   2a8ec:	bb58      	cbnz	r0, 2a946 <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_AREA_CODE_KEY,
   2a8ee:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
   2a8f2:	f7f1 fee7 	bl	1c6c4 <__aeabi_ui2d>
   2a8f6:	4602      	mov	r2, r0
   2a8f8:	460b      	mov	r3, r1
   2a8fa:	4628      	mov	r0, r5
   2a8fc:	491b      	ldr	r1, [pc, #108]	; (2a96c <nrf_cloud_json_add_modem_info+0x120>)
   2a8fe:	f015 fa07 	bl	3fd10 <json_add_num_cs>
		modem_info->network.mnc.value) ||
   2a902:	bb00      	cbnz	r0, 2a946 <nrf_cloud_json_add_modem_info+0xfa>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a904:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
   2a908:	e9d3 0100 	ldrd	r0, r1, [r3]
   2a90c:	f7f2 fa2c 	bl	1cd68 <__aeabi_d2uiz>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_CELL_ID_KEY,
   2a910:	f7f1 fed8 	bl	1c6c4 <__aeabi_ui2d>
   2a914:	4602      	mov	r2, r0
   2a916:	460b      	mov	r3, r1
   2a918:	4628      	mov	r0, r5
   2a91a:	4915      	ldr	r1, [pc, #84]	; (2a970 <nrf_cloud_json_add_modem_info+0x124>)
   2a91c:	f015 f9f8 	bl	3fd10 <json_add_num_cs>
		modem_info->network.area_code.value) ||
   2a920:	b988      	cbnz	r0, 2a946 <nrf_cloud_json_add_modem_info+0xfa>
		RSRP_ADJ(modem_info->network.rsrp.value))) {
   2a922:	f8bd 3620 	ldrh.w	r3, [sp, #1568]	; 0x620
   2a926:	2b00      	cmp	r3, #0
   2a928:	bf0c      	ite	eq
   2a92a:	208c      	moveq	r0, #140	; 0x8c
   2a92c:	208d      	movne	r0, #141	; 0x8d
	    json_add_num_cs(data_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2a92e:	1a18      	subs	r0, r3, r0
   2a930:	f7f1 fed8 	bl	1c6e4 <__aeabi_i2d>
   2a934:	4602      	mov	r2, r0
   2a936:	460b      	mov	r3, r1
   2a938:	4628      	mov	r0, r5
   2a93a:	490e      	ldr	r1, [pc, #56]	; (2a974 <nrf_cloud_json_add_modem_info+0x128>)
   2a93c:	f015 f9e8 	bl	3fd10 <json_add_num_cs>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a940:	4604      	mov	r4, r0
   2a942:	2800      	cmp	r0, #0
   2a944:	d09f      	beq.n	2a886 <nrf_cloud_json_add_modem_info+0x3a>
		return -ENOMEM;
   2a946:	f06f 040b 	mvn.w	r4, #11
   2a94a:	e79c      	b.n	2a886 <nrf_cloud_json_add_modem_info+0x3a>
		LOG_ERR("Could not obtain cell information, error: %d",
   2a94c:	4602      	mov	r2, r0
   2a94e:	2145      	movs	r1, #69	; 0x45
   2a950:	4809      	ldr	r0, [pc, #36]	; (2a978 <nrf_cloud_json_add_modem_info+0x12c>)
   2a952:	e796      	b.n	2a882 <nrf_cloud_json_add_modem_info+0x36>
   2a954:	00048418 	.word	0x00048418
   2a958:	0004494f 	.word	0x0004494f
   2a95c:	000484fe 	.word	0x000484fe
   2a960:	00048535 	.word	0x00048535
   2a964:	00046ab5 	.word	0x00046ab5
   2a968:	00046abc 	.word	0x00046abc
   2a96c:	000485a2 	.word	0x000485a2
   2a970:	000485a6 	.word	0x000485a6
   2a974:	000469bc 	.word	0x000469bc
   2a978:	00048570 	.word	0x00048570

0002a97c <nrf_cloud_decode_requested_state>:
{
   2a97c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a97e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2a980:	460e      	mov	r6, r1
   2a982:	b951      	cbnz	r1, 2a99a <nrf_cloud_decode_requested_state+0x1e>
   2a984:	4946      	ldr	r1, [pc, #280]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a986:	4847      	ldr	r0, [pc, #284]	; (2aaa4 <nrf_cloud_decode_requested_state+0x128>)
   2a988:	f44f 72bc 	mov.w	r2, #376	; 0x178
   2a98c:	f012 fbfb 	bl	3d186 <assert_print>
   2a990:	f44f 71bc 	mov.w	r1, #376	; 0x178
   2a994:	4842      	ldr	r0, [pc, #264]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a996:	f012 fbef 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a99a:	b954      	cbnz	r4, 2a9b2 <nrf_cloud_decode_requested_state+0x36>
   2a99c:	4940      	ldr	r1, [pc, #256]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a99e:	4841      	ldr	r0, [pc, #260]	; (2aaa4 <nrf_cloud_decode_requested_state+0x128>)
   2a9a0:	f240 1279 	movw	r2, #377	; 0x179
   2a9a4:	f012 fbef 	bl	3d186 <assert_print>
   2a9a8:	f240 1179 	movw	r1, #377	; 0x179
   2a9ac:	483c      	ldr	r0, [pc, #240]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a9ae:	f012 fbe3 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a9b2:	6863      	ldr	r3, [r4, #4]
   2a9b4:	b953      	cbnz	r3, 2a9cc <nrf_cloud_decode_requested_state+0x50>
   2a9b6:	493a      	ldr	r1, [pc, #232]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a9b8:	483a      	ldr	r0, [pc, #232]	; (2aaa4 <nrf_cloud_decode_requested_state+0x128>)
   2a9ba:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   2a9be:	f012 fbe2 	bl	3d186 <assert_print>
   2a9c2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   2a9c6:	4836      	ldr	r0, [pc, #216]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a9c8:	f012 fbd6 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a9cc:	6823      	ldr	r3, [r4, #0]
   2a9ce:	b953      	cbnz	r3, 2a9e6 <nrf_cloud_decode_requested_state+0x6a>
   2a9d0:	4933      	ldr	r1, [pc, #204]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a9d2:	4834      	ldr	r0, [pc, #208]	; (2aaa4 <nrf_cloud_decode_requested_state+0x128>)
   2a9d4:	f240 127b 	movw	r2, #379	; 0x17b
   2a9d8:	f012 fbd5 	bl	3d186 <assert_print>
   2a9dc:	f240 117b 	movw	r1, #379	; 0x17b
   2a9e0:	482f      	ldr	r0, [pc, #188]	; (2aaa0 <nrf_cloud_decode_requested_state+0x124>)
   2a9e2:	f012 fbc9 	bl	3d178 <assert_post_action>
	root_obj = cJSON_Parse(input->ptr);
   2a9e6:	6860      	ldr	r0, [r4, #4]
   2a9e8:	f015 fc3d 	bl	40266 <cJSON_Parse>
	if (root_obj == NULL) {
   2a9ec:	4605      	mov	r5, r0
   2a9ee:	b938      	cbnz	r0, 2aa00 <nrf_cloud_decode_requested_state+0x84>
		LOG_ERR("cJSON_Parse failed: %s",
   2a9f0:	2145      	movs	r1, #69	; 0x45
   2a9f2:	6862      	ldr	r2, [r4, #4]
   2a9f4:	482c      	ldr	r0, [pc, #176]	; (2aaa8 <nrf_cloud_decode_requested_state+0x12c>)
   2a9f6:	f012 fc00 	bl	3d1fa <z_log_minimal_printk>
		return -ENOENT;
   2a9fa:	f06f 0401 	mvn.w	r4, #1
   2a9fe:	e010      	b.n	2aa22 <nrf_cloud_decode_requested_state+0xa6>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2aa00:	a901      	add	r1, sp, #4
   2aa02:	f7ff fe75 	bl	2a6f0 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, JSON_KEY_TOPIC_PRFX);
   2aa06:	4929      	ldr	r1, [pc, #164]	; (2aaac <nrf_cloud_decode_requested_state+0x130>)
   2aa08:	9801      	ldr	r0, [sp, #4]
   2aa0a:	f015 f9ab 	bl	3fd64 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2aa0e:	b158      	cbz	r0, 2aa28 <nrf_cloud_decode_requested_state+0xac>
		nct_set_topic_prefix(topic_prefix_obj->valuestring);
   2aa10:	6900      	ldr	r0, [r0, #16]
   2aa12:	f001 fe7d 	bl	2c710 <nct_set_topic_prefix>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2aa16:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2aa18:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2aa1a:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2aa1c:	f007 fda2 	bl	32564 <cJSON_Delete>
		return 0;
   2aa20:	2400      	movs	r4, #0
}
   2aa22:	4620      	mov	r0, r4
   2aa24:	b002      	add	sp, #8
   2aa26:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2aa28:	4921      	ldr	r1, [pc, #132]	; (2aab0 <nrf_cloud_decode_requested_state+0x134>)
   2aa2a:	9801      	ldr	r0, [sp, #4]
   2aa2c:	f015 f99a 	bl	3fd64 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2aa30:	4920      	ldr	r1, [pc, #128]	; (2aab4 <nrf_cloud_decode_requested_state+0x138>)
   2aa32:	f015 f997 	bl	3fd64 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2aa36:	b110      	cbz	r0, 2aa3e <nrf_cloud_decode_requested_state+0xc2>
   2aa38:	68c3      	ldr	r3, [r0, #12]
   2aa3a:	2b10      	cmp	r3, #16
   2aa3c:	d014      	beq.n	2aa68 <nrf_cloud_decode_requested_state+0xec>
		if (cJSON_HasObjectItem(desired_obj, JSON_KEY_CFG) == false) {
   2aa3e:	491e      	ldr	r1, [pc, #120]	; (2aab8 <nrf_cloud_decode_requested_state+0x13c>)
   2aa40:	9801      	ldr	r0, [sp, #4]
   2aa42:	f015 fc28 	bl	40296 <cJSON_HasObjectItem>
   2aa46:	b958      	cbnz	r0, 2aa60 <nrf_cloud_decode_requested_state+0xe4>
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2aa48:	2157      	movs	r1, #87	; 0x57
   2aa4a:	481c      	ldr	r0, [pc, #112]	; (2aabc <nrf_cloud_decode_requested_state+0x140>)
   2aa4c:	f012 fbd5 	bl	3d1fa <z_log_minimal_printk>
			LOG_INF("Ensure device firmware is up to date.");
   2aa50:	2149      	movs	r1, #73	; 0x49
   2aa52:	481b      	ldr	r0, [pc, #108]	; (2aac0 <nrf_cloud_decode_requested_state+0x144>)
   2aa54:	f012 fbd1 	bl	3d1fa <z_log_minimal_printk>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2aa58:	2149      	movs	r1, #73	; 0x49
   2aa5a:	481a      	ldr	r0, [pc, #104]	; (2aac4 <nrf_cloud_decode_requested_state+0x148>)
   2aa5c:	f012 fbcd 	bl	3d1fa <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2aa60:	4628      	mov	r0, r5
   2aa62:	f007 fd7f 	bl	32564 <cJSON_Delete>
   2aa66:	e7c8      	b.n	2a9fa <nrf_cloud_decode_requested_state+0x7e>
	const char *state_str = pairing_state_obj->valuestring;
   2aa68:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2aa6a:	4817      	ldr	r0, [pc, #92]	; (2aac8 <nrf_cloud_decode_requested_state+0x14c>)
   2aa6c:	f7f2 fbe9 	bl	1d242 <strlen>
   2aa70:	4915      	ldr	r1, [pc, #84]	; (2aac8 <nrf_cloud_decode_requested_state+0x14c>)
   2aa72:	4602      	mov	r2, r0
   2aa74:	4620      	mov	r0, r4
   2aa76:	f017 fa46 	bl	41f06 <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2aa7a:	4604      	mov	r4, r0
   2aa7c:	b928      	cbnz	r0, 2aa8a <nrf_cloud_decode_requested_state+0x10e>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2aa7e:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2aa80:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2aa82:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   2aa84:	f007 fd6e 	bl	32564 <cJSON_Delete>
	return 0;
   2aa88:	e7cb      	b.n	2aa22 <nrf_cloud_decode_requested_state+0xa6>
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2aa8a:	2145      	movs	r1, #69	; 0x45
   2aa8c:	480f      	ldr	r0, [pc, #60]	; (2aacc <nrf_cloud_decode_requested_state+0x150>)
   2aa8e:	f012 fbb4 	bl	3d1fa <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2aa92:	4628      	mov	r0, r5
   2aa94:	f007 fd66 	bl	32564 <cJSON_Delete>
		return -ENOTSUP;
   2aa98:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2aa9c:	e7c1      	b.n	2aa22 <nrf_cloud_decode_requested_state+0xa6>
   2aa9e:	bf00      	nop
   2aaa0:	00048418 	.word	0x00048418
   2aaa4:	0004494f 	.word	0x0004494f
   2aaa8:	000485b3 	.word	0x000485b3
   2aaac:	000485cf 	.word	0x000485cf
   2aab0:	000485ea 	.word	0x000485ea
   2aab4:	00048457 	.word	0x00048457
   2aab8:	000485f2 	.word	0x000485f2
   2aabc:	000485f9 	.word	0x000485f9
   2aac0:	00048626 	.word	0x00048626
   2aac4:	00048651 	.word	0x00048651
   2aac8:	00048691 	.word	0x00048691
   2aacc:	000486a0 	.word	0x000486a0

0002aad0 <nrf_cloud_encode_config_response>:
{
   2aad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aad4:	4604      	mov	r4, r0
   2aad6:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2aad8:	460e      	mov	r6, r1
   2aada:	b951      	cbnz	r1, 2aaf2 <nrf_cloud_encode_config_response+0x22>
   2aadc:	4943      	ldr	r1, [pc, #268]	; (2abec <nrf_cloud_encode_config_response+0x11c>)
   2aade:	4844      	ldr	r0, [pc, #272]	; (2abf0 <nrf_cloud_encode_config_response+0x120>)
   2aae0:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   2aae4:	f012 fb4f 	bl	3d186 <assert_print>
   2aae8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   2aaec:	483f      	ldr	r0, [pc, #252]	; (2abec <nrf_cloud_encode_config_response+0x11c>)
   2aaee:	f012 fb43 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2aaf2:	2c00      	cmp	r4, #0
   2aaf4:	d14e      	bne.n	2ab94 <nrf_cloud_encode_config_response+0xc4>
   2aaf6:	493d      	ldr	r1, [pc, #244]	; (2abec <nrf_cloud_encode_config_response+0x11c>)
   2aaf8:	483d      	ldr	r0, [pc, #244]	; (2abf0 <nrf_cloud_encode_config_response+0x120>)
   2aafa:	f240 12c9 	movw	r2, #457	; 0x1c9
   2aafe:	f012 fb42 	bl	3d186 <assert_print>
   2ab02:	f240 11c9 	movw	r1, #457	; 0x1c9
   2ab06:	4839      	ldr	r0, [pc, #228]	; (2abec <nrf_cloud_encode_config_response+0x11c>)
   2ab08:	f012 fb36 	bl	3d178 <assert_post_action>
		return -ESRCH; /* invalid input or no JSON parsed */
   2ab0c:	f06f 0402 	mvn.w	r4, #2
   2ab10:	e068      	b.n	2abe4 <nrf_cloud_encode_config_response+0x114>
	root_obj = cJSON_CreateObject();
   2ab12:	f007 fde9 	bl	326e8 <cJSON_CreateObject>
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2ab16:	4937      	ldr	r1, [pc, #220]	; (2abf4 <nrf_cloud_encode_config_response+0x124>)
	root_obj = cJSON_CreateObject();
   2ab18:	4680      	mov	r8, r0
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2ab1a:	f015 fc8f 	bl	4043c <cJSON_AddObjectToObjectCS>
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2ab1e:	4936      	ldr	r1, [pc, #216]	; (2abf8 <nrf_cloud_encode_config_response+0x128>)
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2ab20:	4681      	mov	r9, r0
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2ab22:	4640      	mov	r0, r8
   2ab24:	f015 fc8a 	bl	4043c <cJSON_AddObjectToObjectCS>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2ab28:	4934      	ldr	r1, [pc, #208]	; (2abfc <nrf_cloud_encode_config_response+0x12c>)
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2ab2a:	4604      	mov	r4, r0
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2ab2c:	4648      	mov	r0, r9
   2ab2e:	f015 f91d 	bl	3fd6c <json_add_null_cs>
   2ab32:	b148      	cbz	r0, 2ab48 <nrf_cloud_encode_config_response+0x78>
		cJSON_Delete(root_obj);
   2ab34:	4640      	mov	r0, r8
   2ab36:	f007 fd15 	bl	32564 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2ab3a:	4638      	mov	r0, r7
   2ab3c:	f007 fd12 	bl	32564 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2ab40:	4628      	mov	r0, r5
		cJSON_Delete(root_obj);
   2ab42:	f007 fd0f 	bl	32564 <cJSON_Delete>
	if (buffer == NULL) {
   2ab46:	e01a      	b.n	2ab7e <nrf_cloud_encode_config_response+0xae>
	    json_add_obj_cs(reported_obj, JSON_KEY_CFG, config_obj)) {
   2ab48:	4620      	mov	r0, r4
   2ab4a:	463a      	mov	r2, r7
   2ab4c:	492b      	ldr	r1, [pc, #172]	; (2abfc <nrf_cloud_encode_config_response+0x12c>)
   2ab4e:	f015 f8ec 	bl	3fd2a <json_add_obj_cs>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2ab52:	4604      	mov	r4, r0
   2ab54:	2800      	cmp	r0, #0
   2ab56:	d1ed      	bne.n	2ab34 <nrf_cloud_encode_config_response+0x64>
	cJSON_Delete(state_obj);
   2ab58:	4628      	mov	r0, r5
   2ab5a:	f007 fd03 	bl	32564 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2ab5e:	f007 fdc3 	bl	326e8 <cJSON_CreateObject>
	if (state_obj) {
   2ab62:	4607      	mov	r7, r0
   2ab64:	b170      	cbz	r0, 2ab84 <nrf_cloud_encode_config_response+0xb4>
		(void)json_add_obj_cs(state_obj, JSON_KEY_STATE, root_obj);
   2ab66:	4642      	mov	r2, r8
   2ab68:	4925      	ldr	r1, [pc, #148]	; (2ac00 <nrf_cloud_encode_config_response+0x130>)
   2ab6a:	f015 f8de 	bl	3fd2a <json_add_obj_cs>
		buffer = cJSON_PrintUnformatted(state_obj);
   2ab6e:	4638      	mov	r0, r7
   2ab70:	f015 fb7d 	bl	4026e <cJSON_PrintUnformatted>
   2ab74:	4605      	mov	r5, r0
		cJSON_Delete(state_obj);
   2ab76:	4638      	mov	r0, r7
   2ab78:	f007 fcf4 	bl	32564 <cJSON_Delete>
	if (buffer == NULL) {
   2ab7c:	b925      	cbnz	r5, 2ab88 <nrf_cloud_encode_config_response+0xb8>
		return -ENOMEM;
   2ab7e:	f06f 040b 	mvn.w	r4, #11
   2ab82:	e02f      	b.n	2abe4 <nrf_cloud_encode_config_response+0x114>
		cJSON_Delete(root_obj);
   2ab84:	4640      	mov	r0, r8
   2ab86:	e7dc      	b.n	2ab42 <nrf_cloud_encode_config_response+0x72>
	output->len = strlen(buffer);
   2ab88:	4628      	mov	r0, r5
	output->ptr = buffer;
   2ab8a:	6075      	str	r5, [r6, #4]
	output->len = strlen(buffer);
   2ab8c:	f7f2 fb59 	bl	1d242 <strlen>
   2ab90:	6030      	str	r0, [r6, #0]
	return 0;
   2ab92:	e027      	b.n	2abe4 <nrf_cloud_encode_config_response+0x114>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2ab94:	6860      	ldr	r0, [r4, #4]
   2ab96:	f015 fb66 	bl	40266 <cJSON_Parse>
	if (input_obj == NULL) {
   2ab9a:	4604      	mov	r4, r0
   2ab9c:	2800      	cmp	r0, #0
   2ab9e:	d0b5      	beq.n	2ab0c <nrf_cloud_encode_config_response+0x3c>
	state_obj = cJSON_DetachItemFromObject(input_obj, JSON_KEY_STATE);
   2aba0:	4917      	ldr	r1, [pc, #92]	; (2ac00 <nrf_cloud_encode_config_response+0x130>)
   2aba2:	f015 fba3 	bl	402ec <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2aba6:	1e05      	subs	r5, r0, #0
   2aba8:	bf14      	ite	ne
   2abaa:	4628      	movne	r0, r5
   2abac:	4620      	moveq	r0, r4
   2abae:	4913      	ldr	r1, [pc, #76]	; (2abfc <nrf_cloud_encode_config_response+0x12c>)
   2abb0:	f015 fb9c 	bl	402ec <cJSON_DetachItemFromObject>
   2abb4:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2abb6:	4620      	mov	r0, r4
   2abb8:	f007 fcd4 	bl	32564 <cJSON_Delete>
	if (has_config) {
   2abbc:	f1b8 0f00 	cmp.w	r8, #0
   2abc0:	d004      	beq.n	2abcc <nrf_cloud_encode_config_response+0xfc>
		*has_config = (config_obj != NULL);
   2abc2:	1e3b      	subs	r3, r7, #0
   2abc4:	bf18      	it	ne
   2abc6:	2301      	movne	r3, #1
   2abc8:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2abcc:	b10d      	cbz	r5, 2abd2 <nrf_cloud_encode_config_response+0x102>
   2abce:	2f00      	cmp	r7, #0
   2abd0:	d19f      	bne.n	2ab12 <nrf_cloud_encode_config_response+0x42>
		output->ptr = NULL;
   2abd2:	2400      	movs	r4, #0
		cJSON_Delete(state_obj);
   2abd4:	4628      	mov	r0, r5
   2abd6:	f007 fcc5 	bl	32564 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2abda:	4638      	mov	r0, r7
   2abdc:	f007 fcc2 	bl	32564 <cJSON_Delete>
		output->len = 0;
   2abe0:	e9c6 4400 	strd	r4, r4, [r6]
}
   2abe4:	4620      	mov	r0, r4
   2abe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2abea:	bf00      	nop
   2abec:	00048418 	.word	0x00048418
   2abf0:	0004494f 	.word	0x0004494f
   2abf4:	0004845d 	.word	0x0004845d
   2abf8:	000485aa 	.word	0x000485aa
   2abfc:	000485f2 	.word	0x000485f2
   2ac00:	00048457 	.word	0x00048457

0002ac04 <nrf_cloud_encode_state>:
{
   2ac04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   2ac08:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(output != NULL);
   2ac0a:	4688      	mov	r8, r1
{
   2ac0c:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(output != NULL);
   2ac0e:	b951      	cbnz	r1, 2ac26 <nrf_cloud_encode_state+0x22>
   2ac10:	4949      	ldr	r1, [pc, #292]	; (2ad38 <nrf_cloud_encode_state+0x134>)
   2ac12:	484a      	ldr	r0, [pc, #296]	; (2ad3c <nrf_cloud_encode_state+0x138>)
   2ac14:	f240 220f 	movw	r2, #527	; 0x20f
   2ac18:	f012 fab5 	bl	3d186 <assert_print>
   2ac1c:	f240 210f 	movw	r1, #527	; 0x20f
   2ac20:	4845      	ldr	r0, [pc, #276]	; (2ad38 <nrf_cloud_encode_state+0x134>)
   2ac22:	f012 faa9 	bl	3d178 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   2ac26:	f007 fd5f 	bl	326e8 <cJSON_CreateObject>
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2ac2a:	4945      	ldr	r1, [pc, #276]	; (2ad40 <nrf_cloud_encode_state+0x13c>)
	cJSON *root_obj = cJSON_CreateObject();
   2ac2c:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2ac2e:	f015 fc05 	bl	4043c <cJSON_AddObjectToObjectCS>
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2ac32:	4944      	ldr	r1, [pc, #272]	; (2ad44 <nrf_cloud_encode_state+0x140>)
   2ac34:	f015 fc02 	bl	4043c <cJSON_AddObjectToObjectCS>
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2ac38:	4943      	ldr	r1, [pc, #268]	; (2ad48 <nrf_cloud_encode_state+0x144>)
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2ac3a:	4683      	mov	fp, r0
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2ac3c:	f015 fbfe 	bl	4043c <cJSON_AddObjectToObjectCS>
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2ac40:	4942      	ldr	r1, [pc, #264]	; (2ad4c <nrf_cloud_encode_state+0x148>)
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2ac42:	4681      	mov	r9, r0
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2ac44:	4658      	mov	r0, fp
   2ac46:	f015 fbf9 	bl	4043c <cJSON_AddObjectToObjectCS>
   2ac4a:	4682      	mov	sl, r0
	if (!pairing_obj || !connection_obj) {
   2ac4c:	f1b9 0f00 	cmp.w	r9, #0
   2ac50:	d000      	beq.n	2ac54 <nrf_cloud_encode_state+0x50>
   2ac52:	b928      	cbnz	r0, 2ac60 <nrf_cloud_encode_state+0x5c>
			cJSON_Delete(root_obj);
   2ac54:	4638      	mov	r0, r7
   2ac56:	f007 fc85 	bl	32564 <cJSON_Delete>
		return -ENOMEM;
   2ac5a:	f06f 000b 	mvn.w	r0, #11
   2ac5e:	e008      	b.n	2ac72 <nrf_cloud_encode_state+0x6e>
	switch (reported_state) {
   2ac60:	2c06      	cmp	r4, #6
   2ac62:	d009      	beq.n	2ac78 <nrf_cloud_encode_state+0x74>
   2ac64:	2c07      	cmp	r4, #7
   2ac66:	d032      	beq.n	2acce <nrf_cloud_encode_state+0xca>
		cJSON_Delete(root_obj);
   2ac68:	4638      	mov	r0, r7
   2ac6a:	f007 fc7b 	bl	32564 <cJSON_Delete>
		return -ENOTSUP;
   2ac6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2ac72:	b006      	add	sp, #24
   2ac74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, DUA_PIN_STR);
   2ac78:	4a35      	ldr	r2, [pc, #212]	; (2ad50 <nrf_cloud_encode_state+0x14c>)
   2ac7a:	4931      	ldr	r1, [pc, #196]	; (2ad40 <nrf_cloud_encode_state+0x13c>)
   2ac7c:	4648      	mov	r0, r9
   2ac7e:	f015 f863 	bl	3fd48 <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_TOPICS);
   2ac82:	4934      	ldr	r1, [pc, #208]	; (2ad54 <nrf_cloud_encode_state+0x150>)
   2ac84:	4648      	mov	r0, r9
   2ac86:	f015 f871 	bl	3fd6c <json_add_null_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2ac8a:	4933      	ldr	r1, [pc, #204]	; (2ad58 <nrf_cloud_encode_state+0x154>)
   2ac8c:	4648      	mov	r0, r9
   2ac8e:	f015 f86d 	bl	3fd6c <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_STAGE);
   2ac92:	4932      	ldr	r1, [pc, #200]	; (2ad5c <nrf_cloud_encode_state+0x158>)
   2ac94:	4658      	mov	r0, fp
   2ac96:	f015 f869 	bl	3fd6c <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_TOPIC_PRFX);
   2ac9a:	4931      	ldr	r1, [pc, #196]	; (2ad60 <nrf_cloud_encode_state+0x15c>)
   2ac9c:	4658      	mov	r0, fp
   2ac9e:	f015 f865 	bl	3fd6c <json_add_null_cs>
		ret += json_add_null_cs(connection_obj, JSON_KEY_KEEPALIVE);
   2aca2:	4650      	mov	r0, sl
   2aca4:	492f      	ldr	r1, [pc, #188]	; (2ad64 <nrf_cloud_encode_state+0x160>)
   2aca6:	f015 f861 	bl	3fd6c <json_add_null_cs>
	buffer = cJSON_PrintUnformatted(root_obj);
   2acaa:	4638      	mov	r0, r7
   2acac:	f015 fadf 	bl	4026e <cJSON_PrintUnformatted>
   2acb0:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   2acb2:	4638      	mov	r0, r7
   2acb4:	f007 fc56 	bl	32564 <cJSON_Delete>
	if (buffer == NULL) {
   2acb8:	2c00      	cmp	r4, #0
   2acba:	d0ce      	beq.n	2ac5a <nrf_cloud_encode_state+0x56>
	output->len = strlen(buffer);
   2acbc:	4620      	mov	r0, r4
	output->ptr = buffer;
   2acbe:	f8c8 4004 	str.w	r4, [r8, #4]
	output->len = strlen(buffer);
   2acc2:	f7f2 fabe 	bl	1d242 <strlen>
   2acc6:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   2acca:	2000      	movs	r0, #0
   2accc:	e7d1      	b.n	2ac72 <nrf_cloud_encode_state+0x6e>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL, &m_endp);
   2acce:	ab04      	add	r3, sp, #16
   2acd0:	2200      	movs	r2, #0
   2acd2:	4669      	mov	r1, sp
   2acd4:	a802      	add	r0, sp, #8
   2acd6:	f002 f879 	bl	2cdcc <nct_dc_endpoint_get>
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2acda:	9a05      	ldr	r2, [sp, #20]
   2acdc:	4920      	ldr	r1, [pc, #128]	; (2ad60 <nrf_cloud_encode_state+0x15c>)
   2acde:	4658      	mov	r0, fp
   2ace0:	f015 f832 	bl	3fd48 <json_add_str_cs>
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2ace4:	4a20      	ldr	r2, [pc, #128]	; (2ad68 <nrf_cloud_encode_state+0x164>)
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2ace6:	4604      	mov	r4, r0
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2ace8:	4915      	ldr	r1, [pc, #84]	; (2ad40 <nrf_cloud_encode_state+0x13c>)
   2acea:	4648      	mov	r0, r9
   2acec:	f015 f82c 	bl	3fd48 <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2acf0:	4919      	ldr	r1, [pc, #100]	; (2ad58 <nrf_cloud_encode_state+0x154>)
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2acf2:	4404      	add	r4, r0
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2acf4:	4648      	mov	r0, r9
   2acf6:	f015 f839 	bl	3fd6c <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2acfa:	491c      	ldr	r1, [pc, #112]	; (2ad6c <nrf_cloud_encode_state+0x168>)
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2acfc:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2acfe:	4658      	mov	r0, fp
   2ad00:	f015 f834 	bl	3fd6c <json_add_null_cs>
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2ad04:	4b1a      	ldr	r3, [pc, #104]	; (2ad70 <nrf_cloud_encode_state+0x16c>)
   2ad06:	2200      	movs	r2, #0
   2ad08:	4916      	ldr	r1, [pc, #88]	; (2ad64 <nrf_cloud_encode_state+0x160>)
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2ad0a:	4404      	add	r4, r0
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2ad0c:	4650      	mov	r0, sl
   2ad0e:	f014 ffff 	bl	3fd10 <json_add_num_cs>
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2ad12:	4910      	ldr	r1, [pc, #64]	; (2ad54 <nrf_cloud_encode_state+0x150>)
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2ad14:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2ad16:	4648      	mov	r0, r9
   2ad18:	f015 fb90 	bl	4043c <cJSON_AddObjectToObjectCS>
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2ad1c:	9a03      	ldr	r2, [sp, #12]
   2ad1e:	4915      	ldr	r1, [pc, #84]	; (2ad74 <nrf_cloud_encode_state+0x170>)
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2ad20:	4605      	mov	r5, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2ad22:	f015 f811 	bl	3fd48 <json_add_str_cs>
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2ad26:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2ad28:	4404      	add	r4, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2ad2a:	4913      	ldr	r1, [pc, #76]	; (2ad78 <nrf_cloud_encode_state+0x174>)
   2ad2c:	4628      	mov	r0, r5
   2ad2e:	f015 f80b 	bl	3fd48 <json_add_str_cs>
		if (ret != 0) {
   2ad32:	42c4      	cmn	r4, r0
   2ad34:	d0b9      	beq.n	2acaa <nrf_cloud_encode_state+0xa6>
   2ad36:	e78d      	b.n	2ac54 <nrf_cloud_encode_state+0x50>
   2ad38:	00048418 	.word	0x00048418
   2ad3c:	0004494f 	.word	0x0004494f
   2ad40:	00048457 	.word	0x00048457
   2ad44:	000485aa 	.word	0x000485aa
   2ad48:	000485ea 	.word	0x000485ea
   2ad4c:	00044693 	.word	0x00044693
   2ad50:	00048691 	.word	0x00048691
   2ad54:	000486fe 	.word	0x000486fe
   2ad58:	000485f2 	.word	0x000485f2
   2ad5c:	00048705 	.word	0x00048705
   2ad60:	000485cf 	.word	0x000485cf
   2ad64:	0004870b 	.word	0x0004870b
   2ad68:	00048715 	.word	0x00048715
   2ad6c:	0004871c 	.word	0x0004871c
   2ad70:	4092c000 	.word	0x4092c000
   2ad74:	0004872a 	.word	0x0004872a
   2ad78:	0004872e 	.word	0x0004872e

0002ad7c <nrf_cloud_decode_data_endpoint>:
{
   2ad7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad80:	b085      	sub	sp, #20
   2ad82:	460e      	mov	r6, r1
   2ad84:	4690      	mov	r8, r2
   2ad86:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2ad88:	4604      	mov	r4, r0
{
   2ad8a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(input != NULL);
   2ad8e:	b950      	cbnz	r0, 2ada6 <nrf_cloud_decode_data_endpoint+0x2a>
   2ad90:	4967      	ldr	r1, [pc, #412]	; (2af30 <__kernel_ram_size+0x80>)
   2ad92:	4868      	ldr	r0, [pc, #416]	; (2af34 <__kernel_ram_size+0x84>)
   2ad94:	f240 2266 	movw	r2, #614	; 0x266
   2ad98:	f012 f9f5 	bl	3d186 <assert_print>
   2ad9c:	f240 2166 	movw	r1, #614	; 0x266
   2ada0:	4863      	ldr	r0, [pc, #396]	; (2af30 <__kernel_ram_size+0x80>)
   2ada2:	f012 f9e9 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2ada6:	6863      	ldr	r3, [r4, #4]
   2ada8:	b953      	cbnz	r3, 2adc0 <nrf_cloud_decode_data_endpoint+0x44>
   2adaa:	4961      	ldr	r1, [pc, #388]	; (2af30 <__kernel_ram_size+0x80>)
   2adac:	4861      	ldr	r0, [pc, #388]	; (2af34 <__kernel_ram_size+0x84>)
   2adae:	f240 2267 	movw	r2, #615	; 0x267
   2adb2:	f012 f9e8 	bl	3d186 <assert_print>
   2adb6:	f240 2167 	movw	r1, #615	; 0x267
   2adba:	485d      	ldr	r0, [pc, #372]	; (2af30 <__kernel_ram_size+0x80>)
   2adbc:	f012 f9dc 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2adc0:	6823      	ldr	r3, [r4, #0]
   2adc2:	b953      	cbnz	r3, 2adda <nrf_cloud_decode_data_endpoint+0x5e>
   2adc4:	495a      	ldr	r1, [pc, #360]	; (2af30 <__kernel_ram_size+0x80>)
   2adc6:	485b      	ldr	r0, [pc, #364]	; (2af34 <__kernel_ram_size+0x84>)
   2adc8:	f44f 721a 	mov.w	r2, #616	; 0x268
   2adcc:	f012 f9db 	bl	3d186 <assert_print>
   2add0:	f44f 711a 	mov.w	r1, #616	; 0x268
   2add4:	4856      	ldr	r0, [pc, #344]	; (2af30 <__kernel_ram_size+0x80>)
   2add6:	f012 f9cf 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2adda:	b956      	cbnz	r6, 2adf2 <nrf_cloud_decode_data_endpoint+0x76>
   2addc:	4954      	ldr	r1, [pc, #336]	; (2af30 <__kernel_ram_size+0x80>)
   2adde:	4855      	ldr	r0, [pc, #340]	; (2af34 <__kernel_ram_size+0x84>)
   2ade0:	f240 2269 	movw	r2, #617	; 0x269
   2ade4:	f012 f9cf 	bl	3d186 <assert_print>
   2ade8:	f240 2169 	movw	r1, #617	; 0x269
   2adec:	4850      	ldr	r0, [pc, #320]	; (2af30 <__kernel_ram_size+0x80>)
   2adee:	f012 f9c3 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2adf2:	f1b8 0f00 	cmp.w	r8, #0
   2adf6:	d10a      	bne.n	2ae0e <nrf_cloud_decode_data_endpoint+0x92>
   2adf8:	494d      	ldr	r1, [pc, #308]	; (2af30 <__kernel_ram_size+0x80>)
   2adfa:	484e      	ldr	r0, [pc, #312]	; (2af34 <__kernel_ram_size+0x84>)
   2adfc:	f240 226a 	movw	r2, #618	; 0x26a
   2ae00:	f012 f9c1 	bl	3d186 <assert_print>
   2ae04:	f240 216a 	movw	r1, #618	; 0x26a
   2ae08:	4849      	ldr	r0, [pc, #292]	; (2af30 <__kernel_ram_size+0x80>)
   2ae0a:	f012 f9b5 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(bulk_endpoint != NULL);
   2ae0e:	b957      	cbnz	r7, 2ae26 <nrf_cloud_decode_data_endpoint+0xaa>
   2ae10:	4947      	ldr	r1, [pc, #284]	; (2af30 <__kernel_ram_size+0x80>)
   2ae12:	4848      	ldr	r0, [pc, #288]	; (2af34 <__kernel_ram_size+0x84>)
   2ae14:	f240 226b 	movw	r2, #619	; 0x26b
   2ae18:	f012 f9b5 	bl	3d186 <assert_print>
   2ae1c:	f240 216b 	movw	r1, #619	; 0x26b
   2ae20:	4843      	ldr	r0, [pc, #268]	; (2af30 <__kernel_ram_size+0x80>)
   2ae22:	f012 f9a9 	bl	3d178 <assert_post_action>
	cJSON *desired_obj = NULL;
   2ae26:	2300      	movs	r3, #0
	root_obj = cJSON_Parse(input->ptr);
   2ae28:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2ae2a:	9303      	str	r3, [sp, #12]
	root_obj = cJSON_Parse(input->ptr);
   2ae2c:	f015 fa1b 	bl	40266 <cJSON_Parse>
	if (root_obj == NULL) {
   2ae30:	4605      	mov	r5, r0
   2ae32:	b318      	cbz	r0, 2ae7c <nrf_cloud_decode_data_endpoint+0x100>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2ae34:	a903      	add	r1, sp, #12
   2ae36:	f7ff fc5b 	bl	2a6f0 <nrf_cloud_decode_desired_obj>
	if (m_endpoint != NULL) {
   2ae3a:	f1ba 0f00 	cmp.w	sl, #0
   2ae3e:	d020      	beq.n	2ae82 <nrf_cloud_decode_data_endpoint+0x106>
		m_endpoint_obj = json_object_decode(
   2ae40:	493d      	ldr	r1, [pc, #244]	; (2af38 <__kernel_ram_size+0x88>)
   2ae42:	9803      	ldr	r0, [sp, #12]
   2ae44:	f014 ff8e 	bl	3fd64 <json_object_decode>
   2ae48:	4604      	mov	r4, r0
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2ae4a:	493c      	ldr	r1, [pc, #240]	; (2af3c <__kernel_ram_size+0x8c>)
   2ae4c:	9803      	ldr	r0, [sp, #12]
   2ae4e:	f014 ff89 	bl	3fd64 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2ae52:	493b      	ldr	r1, [pc, #236]	; (2af40 <__kernel_ram_size+0x90>)
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2ae54:	4681      	mov	r9, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2ae56:	f014 ff85 	bl	3fd64 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2ae5a:	493a      	ldr	r1, [pc, #232]	; (2af44 <__kernel_ram_size+0x94>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2ae5c:	4683      	mov	fp, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2ae5e:	4648      	mov	r0, r9
   2ae60:	f014 ff80 	bl	3fd64 <json_object_decode>
   2ae64:	4681      	mov	r9, r0
	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2ae66:	f1bb 0f00 	cmp.w	fp, #0
   2ae6a:	d004      	beq.n	2ae76 <nrf_cloud_decode_data_endpoint+0xfa>
   2ae6c:	b118      	cbz	r0, 2ae76 <nrf_cloud_decode_data_endpoint+0xfa>
   2ae6e:	f8db 300c 	ldr.w	r3, [fp, #12]
   2ae72:	2b10      	cmp	r3, #16
   2ae74:	d007      	beq.n	2ae86 <nrf_cloud_decode_data_endpoint+0x10a>
		cJSON_Delete(root_obj);
   2ae76:	4628      	mov	r0, r5
   2ae78:	f007 fb74 	bl	32564 <cJSON_Delete>
		return -ENOENT;
   2ae7c:	f06f 0401 	mvn.w	r4, #1
   2ae80:	e03b      	b.n	2aefa <__kernel_ram_size+0x4a>
	cJSON *m_endpoint_obj = NULL;
   2ae82:	4654      	mov	r4, sl
   2ae84:	e7e1      	b.n	2ae4a <nrf_cloud_decode_data_endpoint+0xce>
	return !strncmp(s1, s2, strlen(s2));
   2ae86:	4830      	ldr	r0, [pc, #192]	; (2af48 <__kernel_ram_size+0x98>)
	const char *state_str = pairing_state_obj->valuestring;
   2ae88:	f8db b010 	ldr.w	fp, [fp, #16]
	return !strncmp(s1, s2, strlen(s2));
   2ae8c:	f7f2 f9d9 	bl	1d242 <strlen>
   2ae90:	492d      	ldr	r1, [pc, #180]	; (2af48 <__kernel_ram_size+0x98>)
   2ae92:	4602      	mov	r2, r0
   2ae94:	4658      	mov	r0, fp
   2ae96:	f017 f836 	bl	41f06 <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2ae9a:	2800      	cmp	r0, #0
   2ae9c:	d1eb      	bne.n	2ae76 <nrf_cloud_decode_data_endpoint+0xfa>
	if (m_endpoint_obj != NULL) {
   2ae9e:	b14c      	cbz	r4, 2aeb4 <__kernel_ram_size+0x4>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2aea0:	4620      	mov	r0, r4
   2aea2:	4651      	mov	r1, sl
   2aea4:	f014 ff83 	bl	3fdae <json_decode_and_alloc>
		if (err) {
   2aea8:	4604      	mov	r4, r0
   2aeaa:	b118      	cbz	r0, 2aeb4 <__kernel_ram_size+0x4>
			cJSON_Delete(root_obj);
   2aeac:	4628      	mov	r0, r5
	cJSON_Delete(root_obj);
   2aeae:	f007 fb59 	bl	32564 <cJSON_Delete>
	return err;
   2aeb2:	e022      	b.n	2aefa <__kernel_ram_size+0x4a>
	cJSON *tx_obj = json_object_decode(topic_obj, JSON_KEY_DEVICE_TO_CLOUD);
   2aeb4:	4925      	ldr	r1, [pc, #148]	; (2af4c <__kernel_ram_size+0x9c>)
   2aeb6:	4648      	mov	r0, r9
   2aeb8:	f014 ff54 	bl	3fd64 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2aebc:	4631      	mov	r1, r6
   2aebe:	f014 ff76 	bl	3fdae <json_decode_and_alloc>
	if (err) {
   2aec2:	4604      	mov	r4, r0
   2aec4:	b140      	cbz	r0, 2aed8 <__kernel_ram_size+0x28>
		cJSON_Delete(root_obj);
   2aec6:	4628      	mov	r0, r5
   2aec8:	f007 fb4c 	bl	32564 <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_DEVICE_TO_CLOUD);
   2aecc:	4a1f      	ldr	r2, [pc, #124]	; (2af4c <__kernel_ram_size+0x9c>)
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2aece:	2145      	movs	r1, #69	; 0x45
   2aed0:	481f      	ldr	r0, [pc, #124]	; (2af50 <__kernel_ram_size+0xa0>)
   2aed2:	f012 f992 	bl	3d1fa <z_log_minimal_printk>
		return err;
   2aed6:	e010      	b.n	2aefa <__kernel_ram_size+0x4a>
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2aed8:	6834      	ldr	r4, [r6, #0]
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2aeda:	2101      	movs	r1, #1
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2aedc:	3406      	adds	r4, #6
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2aede:	4620      	mov	r0, r4
   2aee0:	f016 fd98 	bl	41a14 <k_calloc>
   2aee4:	6078      	str	r0, [r7, #4]
	if (bulk_endpoint->ptr == NULL) {
   2aee6:	b960      	cbnz	r0, 2af02 <__kernel_ram_size+0x52>
		cJSON_Delete(root_obj);
   2aee8:	4628      	mov	r0, r5
   2aeea:	f007 fb3b 	bl	32564 <cJSON_Delete>
		LOG_ERR("Could not allocate memory for bulk topic");
   2aeee:	2145      	movs	r1, #69	; 0x45
   2aef0:	4818      	ldr	r0, [pc, #96]	; (2af54 <__kernel_ram_size+0xa4>)
   2aef2:	f012 f982 	bl	3d1fa <z_log_minimal_printk>
		return -ENOMEM;
   2aef6:	f06f 040b 	mvn.w	r4, #11
}
   2aefa:	4620      	mov	r0, r4
   2aefc:	b005      	add	sp, #20
   2aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2af02:	4b15      	ldr	r3, [pc, #84]	; (2af58 <__kernel_ram_size+0xa8>)
   2af04:	4621      	mov	r1, r4
   2af06:	4a15      	ldr	r2, [pc, #84]	; (2af5c <__kernel_ram_size+0xac>)
   2af08:	9300      	str	r3, [sp, #0]
   2af0a:	6873      	ldr	r3, [r6, #4]
   2af0c:	f011 ff65 	bl	3cdda <snprintk>
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2af10:	4913      	ldr	r1, [pc, #76]	; (2af60 <__kernel_ram_size+0xb0>)
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2af12:	6038      	str	r0, [r7, #0]
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2af14:	4648      	mov	r0, r9
   2af16:	f014 ff25 	bl	3fd64 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2af1a:	4641      	mov	r1, r8
   2af1c:	f014 ff47 	bl	3fdae <json_decode_and_alloc>
	if (err) {
   2af20:	4604      	mov	r4, r0
		cJSON_Delete(root_obj);
   2af22:	4628      	mov	r0, r5
	if (err) {
   2af24:	2c00      	cmp	r4, #0
   2af26:	d0c2      	beq.n	2aeae <nrf_cloud_decode_data_endpoint+0x132>
		cJSON_Delete(root_obj);
   2af28:	f007 fb1c 	bl	32564 <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2af2c:	4a0c      	ldr	r2, [pc, #48]	; (2af60 <__kernel_ram_size+0xb0>)
   2af2e:	e7ce      	b.n	2aece <__kernel_ram_size+0x1e>
   2af30:	00048418 	.word	0x00048418
   2af34:	0004494f 	.word	0x0004494f
   2af38:	000485cf 	.word	0x000485cf
   2af3c:	000485ea 	.word	0x000485ea
   2af40:	00048457 	.word	0x00048457
   2af44:	000486fe 	.word	0x000486fe
   2af48:	00048715 	.word	0x00048715
   2af4c:	0004872a 	.word	0x0004872a
   2af50:	00048732 	.word	0x00048732
   2af54:	00048755 	.word	0x00048755
   2af58:	00048783 	.word	0x00048783
   2af5c:	0004abfa 	.word	0x0004abfa
   2af60:	0004872e 	.word	0x0004872e

0002af64 <json_send_to_cloud>:
{
   2af64:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(request != NULL);
   2af66:	4604      	mov	r4, r0
{
   2af68:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(request != NULL);
   2af6a:	b950      	cbnz	r0, 2af82 <json_send_to_cloud+0x1e>
   2af6c:	491b      	ldr	r1, [pc, #108]	; (2afdc <json_send_to_cloud+0x78>)
   2af6e:	481c      	ldr	r0, [pc, #112]	; (2afe0 <json_send_to_cloud+0x7c>)
   2af70:	f44f 7230 	mov.w	r2, #704	; 0x2c0
   2af74:	f012 f907 	bl	3d186 <assert_print>
   2af78:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   2af7c:	4817      	ldr	r0, [pc, #92]	; (2afdc <json_send_to_cloud+0x78>)
   2af7e:	f012 f8fb 	bl	3d178 <assert_post_action>
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2af82:	f000 fdef 	bl	2bb64 <nfsm_get_current_state>
   2af86:	2809      	cmp	r0, #9
   2af88:	d125      	bne.n	2afd6 <json_send_to_cloud+0x72>
	msg_string = cJSON_PrintUnformatted(request);
   2af8a:	4620      	mov	r0, r4
   2af8c:	f015 f96f 	bl	4026e <cJSON_PrintUnformatted>
	if (!msg_string) {
   2af90:	4605      	mov	r5, r0
   2af92:	b940      	cbnz	r0, 2afa6 <json_send_to_cloud+0x42>
		LOG_ERR("Could not allocate memory for request message");
   2af94:	2145      	movs	r1, #69	; 0x45
   2af96:	4813      	ldr	r0, [pc, #76]	; (2afe4 <json_send_to_cloud+0x80>)
   2af98:	f012 f92f 	bl	3d1fa <z_log_minimal_printk>
		return -ENOMEM;
   2af9c:	f06f 040b 	mvn.w	r4, #11
}
   2afa0:	4620      	mov	r0, r4
   2afa2:	b007      	add	sp, #28
   2afa4:	bd30      	pop	{r4, r5, pc}
	struct nct_dc_data msg = {
   2afa6:	2214      	movs	r2, #20
   2afa8:	2100      	movs	r1, #0
   2afaa:	a801      	add	r0, sp, #4
   2afac:	f016 fdd8 	bl	41b60 <memset>
		.data.len = strlen(msg_string)
   2afb0:	4628      	mov	r0, r5
   2afb2:	f7f2 f946 	bl	1d242 <strlen>
	struct nct_dc_data msg = {
   2afb6:	e9cd 0501 	strd	r0, r5, [sp, #4]
	err = nct_dc_send(&msg);
   2afba:	a801      	add	r0, sp, #4
   2afbc:	f014 ff5d 	bl	3fe7a <nct_dc_send>
	if (err) {
   2afc0:	4604      	mov	r4, r0
   2afc2:	b120      	cbz	r0, 2afce <json_send_to_cloud+0x6a>
		LOG_ERR("Failed to send request, error: %d", err);
   2afc4:	4602      	mov	r2, r0
   2afc6:	2145      	movs	r1, #69	; 0x45
   2afc8:	4807      	ldr	r0, [pc, #28]	; (2afe8 <json_send_to_cloud+0x84>)
   2afca:	f012 f916 	bl	3d1fa <z_log_minimal_printk>
	k_free(msg_string);
   2afce:	4628      	mov	r0, r5
   2afd0:	f016 fd15 	bl	419fe <k_free>
	return err;
   2afd4:	e7e4      	b.n	2afa0 <json_send_to_cloud+0x3c>
		return -EACCES;
   2afd6:	f06f 040c 	mvn.w	r4, #12
   2afda:	e7e1      	b.n	2afa0 <json_send_to_cloud+0x3c>
   2afdc:	00048418 	.word	0x00048418
   2afe0:	0004494f 	.word	0x0004494f
   2afe4:	00048789 	.word	0x00048789
   2afe8:	000487bc 	.word	0x000487bc

0002afec <nrf_cloud_modem_info_json_encode>:
{
   2afec:	b5f0      	push	{r4, r5, r6, r7, lr}
   2afee:	4606      	mov	r6, r0
	if (!mod_inf_obj || !mod_inf) {
   2aff0:	460f      	mov	r7, r1
{
   2aff2:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	if (!mod_inf_obj || !mod_inf) {
   2aff6:	2900      	cmp	r1, #0
   2aff8:	d057      	beq.n	2b0aa <nrf_cloud_modem_info_json_encode+0xbe>
   2affa:	2800      	cmp	r0, #0
   2affc:	d055      	beq.n	2b0aa <nrf_cloud_modem_info_json_encode+0xbe>
	cJSON *tmp = cJSON_CreateObject();
   2affe:	f007 fb73 	bl	326e8 <cJSON_CreateObject>
	if (!tmp) {
   2b002:	4605      	mov	r5, r0
   2b004:	2800      	cmp	r0, #0
   2b006:	d04d      	beq.n	2b0a4 <nrf_cloud_modem_info_json_encode+0xb8>
	struct modem_param_info *mpi = (struct modem_param_info *)mod_inf->mpi;
   2b008:	6870      	ldr	r0, [r6, #4]
	if (!mpi) {
   2b00a:	bb10      	cbnz	r0, 2b052 <nrf_cloud_modem_info_json_encode+0x66>
		err = modem_info_init();
   2b00c:	f7fd fd7e 	bl	28b0c <modem_info_init>
		if (err) {
   2b010:	4604      	mov	r4, r0
   2b012:	b158      	cbz	r0, 2b02c <nrf_cloud_modem_info_json_encode+0x40>
			LOG_ERR("modem_info_init() failed: %d", err);
   2b014:	2145      	movs	r1, #69	; 0x45
   2b016:	4602      	mov	r2, r0
   2b018:	4825      	ldr	r0, [pc, #148]	; (2b0b0 <nrf_cloud_modem_info_json_encode+0xc4>)
		LOG_ERR("Failed to encode modem info: %d", err);
   2b01a:	f012 f8ee 	bl	3d1fa <z_log_minimal_printk>
	cJSON_Delete(tmp);
   2b01e:	4628      	mov	r0, r5
   2b020:	f007 faa0 	bl	32564 <cJSON_Delete>
}
   2b024:	4620      	mov	r0, r4
   2b026:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2b02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = modem_info_params_init(&fetched_mod_inf);
   2b02c:	4668      	mov	r0, sp
   2b02e:	f7fd fda5 	bl	28b7c <modem_info_params_init>
		if (err) {
   2b032:	4604      	mov	r4, r0
   2b034:	b118      	cbz	r0, 2b03e <nrf_cloud_modem_info_json_encode+0x52>
			LOG_ERR("modem_info_params_init() failed: %d", err);
   2b036:	4602      	mov	r2, r0
   2b038:	2145      	movs	r1, #69	; 0x45
   2b03a:	481e      	ldr	r0, [pc, #120]	; (2b0b4 <nrf_cloud_modem_info_json_encode+0xc8>)
   2b03c:	e7ed      	b.n	2b01a <nrf_cloud_modem_info_json_encode+0x2e>
		err = modem_info_params_get(&fetched_mod_inf);
   2b03e:	4668      	mov	r0, sp
   2b040:	f7fd fdf2 	bl	28c28 <modem_info_params_get>
		if (err < 0) {
   2b044:	1e04      	subs	r4, r0, #0
   2b046:	da03      	bge.n	2b050 <nrf_cloud_modem_info_json_encode+0x64>
			LOG_ERR("modem_info_params_get() failed: %d", err);
   2b048:	4622      	mov	r2, r4
   2b04a:	2145      	movs	r1, #69	; 0x45
   2b04c:	481a      	ldr	r0, [pc, #104]	; (2b0b8 <nrf_cloud_modem_info_json_encode+0xcc>)
   2b04e:	e7e4      	b.n	2b01a <nrf_cloud_modem_info_json_encode+0x2e>
		mpi = &fetched_mod_inf;
   2b050:	4668      	mov	r0, sp
	err = modem_info_json_object_encode(mpi, tmp);
   2b052:	4629      	mov	r1, r5
   2b054:	f7fd ff4c 	bl	28ef0 <modem_info_json_object_encode>
	if (err < 0) {
   2b058:	1e04      	subs	r4, r0, #0
   2b05a:	da03      	bge.n	2b064 <nrf_cloud_modem_info_json_encode+0x78>
		LOG_ERR("Failed to encode modem info: %d", err);
   2b05c:	4622      	mov	r2, r4
   2b05e:	2145      	movs	r1, #69	; 0x45
   2b060:	4816      	ldr	r0, [pc, #88]	; (2b0bc <nrf_cloud_modem_info_json_encode+0xd0>)
   2b062:	e7da      	b.n	2b01a <nrf_cloud_modem_info_json_encode+0x2e>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2b064:	463b      	mov	r3, r7
   2b066:	462a      	mov	r2, r5
   2b068:	4915      	ldr	r1, [pc, #84]	; (2b0c0 <nrf_cloud_modem_info_json_encode+0xd4>)
   2b06a:	7830      	ldrb	r0, [r6, #0]
   2b06c:	f7ff fb52 	bl	2a714 <encode_info_item_cs>
   2b070:	b130      	cbz	r0, 2b080 <nrf_cloud_modem_info_json_encode+0x94>
		LOG_ERR("Failed to encode modem info");
   2b072:	2145      	movs	r1, #69	; 0x45
   2b074:	4813      	ldr	r0, [pc, #76]	; (2b0c4 <nrf_cloud_modem_info_json_encode+0xd8>)
   2b076:	f012 f8c0 	bl	3d1fa <z_log_minimal_printk>
		err = -EIO;
   2b07a:	f06f 0404 	mvn.w	r4, #4
		goto cleanup;
   2b07e:	e7ce      	b.n	2b01e <nrf_cloud_modem_info_json_encode+0x32>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2b080:	463b      	mov	r3, r7
   2b082:	462a      	mov	r2, r5
   2b084:	4910      	ldr	r1, [pc, #64]	; (2b0c8 <nrf_cloud_modem_info_json_encode+0xdc>)
   2b086:	7870      	ldrb	r0, [r6, #1]
   2b088:	f7ff fb44 	bl	2a714 <encode_info_item_cs>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2b08c:	2800      	cmp	r0, #0
   2b08e:	d1f0      	bne.n	2b072 <nrf_cloud_modem_info_json_encode+0x86>
	    encode_info_item_cs(mod_inf->sim, MODEM_INFO_JSON_KEY_SIM_INF, tmp, mod_inf_obj)) {
   2b090:	463b      	mov	r3, r7
   2b092:	462a      	mov	r2, r5
   2b094:	490d      	ldr	r1, [pc, #52]	; (2b0cc <nrf_cloud_modem_info_json_encode+0xe0>)
   2b096:	78b0      	ldrb	r0, [r6, #2]
   2b098:	f7ff fb3c 	bl	2a714 <encode_info_item_cs>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2b09c:	4604      	mov	r4, r0
   2b09e:	2800      	cmp	r0, #0
   2b0a0:	d0bd      	beq.n	2b01e <nrf_cloud_modem_info_json_encode+0x32>
   2b0a2:	e7e6      	b.n	2b072 <nrf_cloud_modem_info_json_encode+0x86>
		err = -ENOMEM;
   2b0a4:	f06f 040b 	mvn.w	r4, #11
   2b0a8:	e7b9      	b.n	2b01e <nrf_cloud_modem_info_json_encode+0x32>
		return -EINVAL;
   2b0aa:	f06f 0415 	mvn.w	r4, #21
   2b0ae:	e7b9      	b.n	2b024 <nrf_cloud_modem_info_json_encode+0x38>
   2b0b0:	000487e3 	.word	0x000487e3
   2b0b4:	00048805 	.word	0x00048805
   2b0b8:	0004882e 	.word	0x0004882e
   2b0bc:	00048856 	.word	0x00048856
   2b0c0:	00046cee 	.word	0x00046cee
   2b0c4:	0004887b 	.word	0x0004887b
   2b0c8:	00046cda 	.word	0x00046cda
   2b0cc:	00046ce6 	.word	0x00046ce6

0002b0d0 <nrf_cloud_service_info_json_encode>:
{
   2b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0d4:	460f      	mov	r7, r1
	if (!svc_inf || !svc_inf_obj) {
   2b0d6:	4606      	mov	r6, r0
   2b0d8:	2800      	cmp	r0, #0
   2b0da:	f000 80b5 	beq.w	2b248 <nrf_cloud_service_info_json_encode+0x178>
   2b0de:	2900      	cmp	r1, #0
   2b0e0:	f000 80b2 	beq.w	2b248 <nrf_cloud_service_info_json_encode+0x178>
	int err = nrf_cloud_encode_service_info_fota(svc_inf->fota, svc_inf_obj);
   2b0e4:	f8d0 8000 	ldr.w	r8, [r0]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2b0e8:	4959      	ldr	r1, [pc, #356]	; (2b250 <nrf_cloud_service_info_json_encode+0x180>)
   2b0ea:	4638      	mov	r0, r7
	if (fota == NULL ||
   2b0ec:	f1b8 0f00 	cmp.w	r8, #0
   2b0f0:	d105      	bne.n	2b0fe <nrf_cloud_service_info_json_encode+0x2e>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2b0f2:	f014 fe3b 	bl	3fd6c <json_add_null_cs>
   2b0f6:	b3b0      	cbz	r0, 2b166 <nrf_cloud_service_info_json_encode+0x96>
			return -ENOMEM;
   2b0f8:	f06f 000b 	mvn.w	r0, #11
   2b0fc:	e03c      	b.n	2b178 <nrf_cloud_service_info_json_encode+0xa8>
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2b0fe:	f015 f973 	bl	403e8 <cJSON_AddArrayToObjectCS>
		if (!array) {
   2b102:	4605      	mov	r5, r0
   2b104:	2800      	cmp	r0, #0
   2b106:	d0f7      	beq.n	2b0f8 <nrf_cloud_service_info_json_encode+0x28>
		if (fota->bootloader) {
   2b108:	f898 4000 	ldrb.w	r4, [r8]
   2b10c:	f014 0401 	ands.w	r4, r4, #1
   2b110:	d007      	beq.n	2b122 <nrf_cloud_service_info_json_encode+0x52>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_BOOT));
   2b112:	4850      	ldr	r0, [pc, #320]	; (2b254 <nrf_cloud_service_info_json_encode+0x184>)
   2b114:	f007 fac4 	bl	326a0 <cJSON_CreateString>
   2b118:	4601      	mov	r1, r0
   2b11a:	4628      	mov	r0, r5
   2b11c:	f015 f8c2 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b120:	2401      	movs	r4, #1
		if (fota->modem) {
   2b122:	f898 3000 	ldrb.w	r3, [r8]
   2b126:	0798      	lsls	r0, r3, #30
   2b128:	d507      	bpl.n	2b13a <nrf_cloud_service_info_json_encode+0x6a>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_MODEM));
   2b12a:	484b      	ldr	r0, [pc, #300]	; (2b258 <nrf_cloud_service_info_json_encode+0x188>)
   2b12c:	f007 fab8 	bl	326a0 <cJSON_CreateString>
   2b130:	4601      	mov	r1, r0
   2b132:	4628      	mov	r0, r5
   2b134:	f015 f8b6 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b138:	3401      	adds	r4, #1
		if (fota->application) {
   2b13a:	f898 3000 	ldrb.w	r3, [r8]
   2b13e:	0759      	lsls	r1, r3, #29
   2b140:	d507      	bpl.n	2b152 <nrf_cloud_service_info_json_encode+0x82>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_APP));
   2b142:	4846      	ldr	r0, [pc, #280]	; (2b25c <nrf_cloud_service_info_json_encode+0x18c>)
   2b144:	f007 faac 	bl	326a0 <cJSON_CreateString>
   2b148:	4601      	mov	r1, r0
   2b14a:	4628      	mov	r0, r5
   2b14c:	f015 f8aa 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b150:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2b152:	4628      	mov	r0, r5
   2b154:	f015 f88e 	bl	40274 <cJSON_GetArraySize>
   2b158:	42a0      	cmp	r0, r4
   2b15a:	d004      	beq.n	2b166 <nrf_cloud_service_info_json_encode+0x96>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2b15c:	493c      	ldr	r1, [pc, #240]	; (2b250 <nrf_cloud_service_info_json_encode+0x180>)
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2b15e:	4638      	mov	r0, r7
   2b160:	f015 f8ce 	bl	40300 <cJSON_DeleteItemFromObject>
   2b164:	e7c8      	b.n	2b0f8 <nrf_cloud_service_info_json_encode+0x28>
   2b166:	6876      	ldr	r6, [r6, #4]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2b168:	4638      	mov	r0, r7
   2b16a:	493d      	ldr	r1, [pc, #244]	; (2b260 <nrf_cloud_service_info_json_encode+0x190>)
	if (ui == NULL) {
   2b16c:	b936      	cbnz	r6, 2b17c <nrf_cloud_service_info_json_encode+0xac>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2b16e:	f014 fdfd 	bl	3fd6c <json_add_null_cs>
   2b172:	2800      	cmp	r0, #0
   2b174:	d1c0      	bne.n	2b0f8 <nrf_cloud_service_info_json_encode+0x28>
	return 0;
   2b176:	2000      	movs	r0, #0
}
   2b178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2b17c:	f015 f934 	bl	403e8 <cJSON_AddArrayToObjectCS>
		if (!array) {
   2b180:	4605      	mov	r5, r0
   2b182:	2800      	cmp	r0, #0
   2b184:	d0b8      	beq.n	2b0f8 <nrf_cloud_service_info_json_encode+0x28>
		if (ui->air_pressure) {
   2b186:	7834      	ldrb	r4, [r6, #0]
   2b188:	f014 0410 	ands.w	r4, r4, #16
   2b18c:	d007      	beq.n	2b19e <nrf_cloud_service_info_json_encode+0xce>
			cJSON_AddItemToArray(array,
   2b18e:	4835      	ldr	r0, [pc, #212]	; (2b264 <nrf_cloud_service_info_json_encode+0x194>)
   2b190:	f007 fa86 	bl	326a0 <cJSON_CreateString>
   2b194:	4601      	mov	r1, r0
   2b196:	4628      	mov	r0, r5
   2b198:	f015 f884 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b19c:	2401      	movs	r4, #1
		if (ui->gps) {
   2b19e:	7833      	ldrb	r3, [r6, #0]
   2b1a0:	079a      	lsls	r2, r3, #30
   2b1a2:	d507      	bpl.n	2b1b4 <nrf_cloud_service_info_json_encode+0xe4>
			cJSON_AddItemToArray(array,
   2b1a4:	4830      	ldr	r0, [pc, #192]	; (2b268 <nrf_cloud_service_info_json_encode+0x198>)
   2b1a6:	f007 fa7b 	bl	326a0 <cJSON_CreateString>
   2b1aa:	4601      	mov	r1, r0
   2b1ac:	4628      	mov	r0, r5
   2b1ae:	f015 f879 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b1b2:	3401      	adds	r4, #1
		if (ui->flip) {
   2b1b4:	7833      	ldrb	r3, [r6, #0]
   2b1b6:	075b      	lsls	r3, r3, #29
   2b1b8:	d507      	bpl.n	2b1ca <nrf_cloud_service_info_json_encode+0xfa>
			cJSON_AddItemToArray(array,
   2b1ba:	482c      	ldr	r0, [pc, #176]	; (2b26c <nrf_cloud_service_info_json_encode+0x19c>)
   2b1bc:	f007 fa70 	bl	326a0 <cJSON_CreateString>
   2b1c0:	4601      	mov	r1, r0
   2b1c2:	4628      	mov	r0, r5
   2b1c4:	f015 f86e 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b1c8:	3401      	adds	r4, #1
		if (ui->button) {
   2b1ca:	7873      	ldrb	r3, [r6, #1]
   2b1cc:	07d8      	lsls	r0, r3, #31
   2b1ce:	d507      	bpl.n	2b1e0 <nrf_cloud_service_info_json_encode+0x110>
			cJSON_AddItemToArray(array,
   2b1d0:	4827      	ldr	r0, [pc, #156]	; (2b270 <nrf_cloud_service_info_json_encode+0x1a0>)
   2b1d2:	f007 fa65 	bl	326a0 <cJSON_CreateString>
   2b1d6:	4601      	mov	r1, r0
   2b1d8:	4628      	mov	r0, r5
   2b1da:	f015 f863 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b1de:	3401      	adds	r4, #1
		if (ui->temperature) {
   2b1e0:	7833      	ldrb	r3, [r6, #0]
   2b1e2:	07d9      	lsls	r1, r3, #31
   2b1e4:	d507      	bpl.n	2b1f6 <nrf_cloud_service_info_json_encode+0x126>
			cJSON_AddItemToArray(array,
   2b1e6:	4823      	ldr	r0, [pc, #140]	; (2b274 <nrf_cloud_service_info_json_encode+0x1a4>)
   2b1e8:	f007 fa5a 	bl	326a0 <cJSON_CreateString>
   2b1ec:	4601      	mov	r1, r0
   2b1ee:	4628      	mov	r0, r5
   2b1f0:	f015 f858 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b1f4:	3401      	adds	r4, #1
		if (ui->humidity) {
   2b1f6:	7833      	ldrb	r3, [r6, #0]
   2b1f8:	071a      	lsls	r2, r3, #28
   2b1fa:	d507      	bpl.n	2b20c <nrf_cloud_service_info_json_encode+0x13c>
			cJSON_AddItemToArray(array,
   2b1fc:	481e      	ldr	r0, [pc, #120]	; (2b278 <nrf_cloud_service_info_json_encode+0x1a8>)
   2b1fe:	f007 fa4f 	bl	326a0 <cJSON_CreateString>
   2b202:	4601      	mov	r1, r0
   2b204:	4628      	mov	r0, r5
   2b206:	f015 f84d 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b20a:	3401      	adds	r4, #1
		if (ui->light_sensor) {
   2b20c:	f996 3000 	ldrsb.w	r3, [r6]
   2b210:	2b00      	cmp	r3, #0
   2b212:	da07      	bge.n	2b224 <nrf_cloud_service_info_json_encode+0x154>
			cJSON_AddItemToArray(array,
   2b214:	4819      	ldr	r0, [pc, #100]	; (2b27c <nrf_cloud_service_info_json_encode+0x1ac>)
   2b216:	f007 fa43 	bl	326a0 <cJSON_CreateString>
   2b21a:	4601      	mov	r1, r0
   2b21c:	4628      	mov	r0, r5
   2b21e:	f015 f841 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b222:	3401      	adds	r4, #1
		if (ui->rsrp) {
   2b224:	7833      	ldrb	r3, [r6, #0]
   2b226:	069b      	lsls	r3, r3, #26
   2b228:	d507      	bpl.n	2b23a <nrf_cloud_service_info_json_encode+0x16a>
			cJSON_AddItemToArray(array,
   2b22a:	4815      	ldr	r0, [pc, #84]	; (2b280 <nrf_cloud_service_info_json_encode+0x1b0>)
   2b22c:	f007 fa38 	bl	326a0 <cJSON_CreateString>
   2b230:	4601      	mov	r1, r0
   2b232:	4628      	mov	r0, r5
   2b234:	f015 f836 	bl	402a4 <cJSON_AddItemToArray>
			++item_cnt;
   2b238:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2b23a:	4628      	mov	r0, r5
   2b23c:	f015 f81a 	bl	40274 <cJSON_GetArraySize>
   2b240:	42a0      	cmp	r0, r4
   2b242:	d098      	beq.n	2b176 <nrf_cloud_service_info_json_encode+0xa6>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2b244:	4906      	ldr	r1, [pc, #24]	; (2b260 <nrf_cloud_service_info_json_encode+0x190>)
   2b246:	e78a      	b.n	2b15e <nrf_cloud_service_info_json_encode+0x8e>
		return -EINVAL;
   2b248:	f06f 0015 	mvn.w	r0, #21
   2b24c:	e794      	b.n	2b178 <nrf_cloud_service_info_json_encode+0xa8>
   2b24e:	bf00      	nop
   2b250:	0004889c 	.word	0x0004889c
   2b254:	000488a4 	.word	0x000488a4
   2b258:	000488a9 	.word	0x000488a9
   2b25c:	000488af 	.word	0x000488af
   2b260:	000488b3 	.word	0x000488b3
   2b264:	000488b6 	.word	0x000488b6
   2b268:	00049319 	.word	0x00049319
   2b26c:	000488c0 	.word	0x000488c0
   2b270:	000488c5 	.word	0x000488c5
   2b274:	000488cc 	.word	0x000488cc
   2b278:	000488d1 	.word	0x000488d1
   2b27c:	000488d7 	.word	0x000488d7
   2b280:	000488dd 	.word	0x000488dd

0002b284 <nrf_cloud_device_status_encode>:
{
   2b284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b288:	460d      	mov	r5, r1
   2b28a:	4614      	mov	r4, r2
	if (!dev_status || !output) {
   2b28c:	4607      	mov	r7, r0
   2b28e:	2800      	cmp	r0, #0
   2b290:	d03d      	beq.n	2b30e <nrf_cloud_device_status_encode+0x8a>
   2b292:	2900      	cmp	r1, #0
   2b294:	d03b      	beq.n	2b30e <nrf_cloud_device_status_encode+0x8a>
	cJSON *root_obj = cJSON_CreateObject();
   2b296:	f007 fa27 	bl	326e8 <cJSON_CreateObject>
   2b29a:	4606      	mov	r6, r0
	if (include_state) {
   2b29c:	b114      	cbz	r4, 2b2a4 <nrf_cloud_device_status_encode+0x20>
		state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2b29e:	491d      	ldr	r1, [pc, #116]	; (2b314 <nrf_cloud_device_status_encode+0x90>)
   2b2a0:	f015 f8cc 	bl	4043c <cJSON_AddObjectToObjectCS>
		reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2b2a4:	491c      	ldr	r1, [pc, #112]	; (2b318 <nrf_cloud_device_status_encode+0x94>)
   2b2a6:	f015 f8c9 	bl	4043c <cJSON_AddObjectToObjectCS>
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2b2aa:	491c      	ldr	r1, [pc, #112]	; (2b31c <nrf_cloud_device_status_encode+0x98>)
   2b2ac:	f015 f8c6 	bl	4043c <cJSON_AddObjectToObjectCS>
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2b2b0:	491b      	ldr	r1, [pc, #108]	; (2b320 <nrf_cloud_device_status_encode+0x9c>)
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2b2b2:	4604      	mov	r4, r0
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2b2b4:	f015 f8c2 	bl	4043c <cJSON_AddObjectToObjectCS>
	if (svc_inf_obj == NULL) {
   2b2b8:	4680      	mov	r8, r0
   2b2ba:	b958      	cbnz	r0, 2b2d4 <nrf_cloud_device_status_encode+0x50>
		err = -ENOMEM;
   2b2bc:	f06f 040b 	mvn.w	r4, #11
	cJSON_Delete(root_obj);
   2b2c0:	4630      	mov	r0, r6
   2b2c2:	f007 f94f 	bl	32564 <cJSON_Delete>
	if (err) {
   2b2c6:	b114      	cbz	r4, 2b2ce <nrf_cloud_device_status_encode+0x4a>
		output->ptr = NULL;
   2b2c8:	2300      	movs	r3, #0
		output->len = 0;
   2b2ca:	e9c5 3300 	strd	r3, r3, [r5]
}
   2b2ce:	4620      	mov	r0, r4
   2b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_status->modem) {
   2b2d4:	6838      	ldr	r0, [r7, #0]
   2b2d6:	b960      	cbnz	r0, 2b2f2 <nrf_cloud_device_status_encode+0x6e>
	if (dev_status->svc) {
   2b2d8:	6878      	ldr	r0, [r7, #4]
   2b2da:	b988      	cbnz	r0, 2b300 <nrf_cloud_device_status_encode+0x7c>
	output->ptr = cJSON_PrintUnformatted(root_obj);
   2b2dc:	4630      	mov	r0, r6
   2b2de:	f014 ffc6 	bl	4026e <cJSON_PrintUnformatted>
   2b2e2:	6068      	str	r0, [r5, #4]
	if (output->ptr) {
   2b2e4:	2800      	cmp	r0, #0
   2b2e6:	d0e9      	beq.n	2b2bc <nrf_cloud_device_status_encode+0x38>
		output->len = strlen(output->ptr);
   2b2e8:	f7f1 ffab 	bl	1d242 <strlen>
   2b2ec:	2400      	movs	r4, #0
   2b2ee:	6028      	str	r0, [r5, #0]
   2b2f0:	e7e6      	b.n	2b2c0 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_modem_info_json_encode(dev_status->modem, device_obj);
   2b2f2:	4621      	mov	r1, r4
   2b2f4:	f7ff fe7a 	bl	2afec <nrf_cloud_modem_info_json_encode>
		if (err) {
   2b2f8:	4604      	mov	r4, r0
   2b2fa:	2800      	cmp	r0, #0
   2b2fc:	d0ec      	beq.n	2b2d8 <nrf_cloud_device_status_encode+0x54>
   2b2fe:	e7df      	b.n	2b2c0 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_service_info_json_encode(dev_status->svc, svc_inf_obj);
   2b300:	4641      	mov	r1, r8
   2b302:	f7ff fee5 	bl	2b0d0 <nrf_cloud_service_info_json_encode>
		if (err) {
   2b306:	4604      	mov	r4, r0
   2b308:	2800      	cmp	r0, #0
   2b30a:	d0e7      	beq.n	2b2dc <nrf_cloud_device_status_encode+0x58>
   2b30c:	e7d8      	b.n	2b2c0 <nrf_cloud_device_status_encode+0x3c>
		return -EINVAL;
   2b30e:	f06f 0415 	mvn.w	r4, #21
   2b312:	e7dc      	b.n	2b2ce <nrf_cloud_device_status_encode+0x4a>
   2b314:	00048457 	.word	0x00048457
   2b318:	000485aa 	.word	0x000485aa
   2b31c:	000488e2 	.word	0x000488e2
   2b320:	000488e9 	.word	0x000488e9

0002b324 <get_string_from_array>:
{
   2b324:	b570      	push	{r4, r5, r6, lr}
   2b326:	4605      	mov	r5, r0
   2b328:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2b32a:	4614      	mov	r4, r2
   2b32c:	b952      	cbnz	r2, 2b344 <get_string_from_array+0x20>
   2b32e:	490d      	ldr	r1, [pc, #52]	; (2b364 <get_string_from_array+0x40>)
   2b330:	480d      	ldr	r0, [pc, #52]	; (2b368 <get_string_from_array+0x44>)
   2b332:	f240 42cf 	movw	r2, #1231	; 0x4cf
   2b336:	f011 ff26 	bl	3d186 <assert_print>
   2b33a:	f240 41cf 	movw	r1, #1231	; 0x4cf
   2b33e:	4809      	ldr	r0, [pc, #36]	; (2b364 <get_string_from_array+0x40>)
   2b340:	f011 ff1a 	bl	3d178 <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2b344:	4628      	mov	r0, r5
   2b346:	4631      	mov	r1, r6
   2b348:	f014 ff9c 	bl	40284 <cJSON_GetArrayItem>
   2b34c:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2b34e:	f015 f8ac 	bl	404aa <cJSON_IsString>
   2b352:	b118      	cbz	r0, 2b35c <get_string_from_array+0x38>
	return 0;
   2b354:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2b356:	692b      	ldr	r3, [r5, #16]
   2b358:	6023      	str	r3, [r4, #0]
}
   2b35a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2b35c:	f06f 0015 	mvn.w	r0, #21
   2b360:	e7fb      	b.n	2b35a <get_string_from_array+0x36>
   2b362:	bf00      	nop
   2b364:	00048418 	.word	0x00048418
   2b368:	0004494f 	.word	0x0004494f

0002b36c <get_string_from_obj>:
{
   2b36c:	b570      	push	{r4, r5, r6, lr}
   2b36e:	4605      	mov	r5, r0
   2b370:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2b372:	4614      	mov	r4, r2
   2b374:	b952      	cbnz	r2, 2b38c <get_string_from_obj+0x20>
   2b376:	490d      	ldr	r1, [pc, #52]	; (2b3ac <get_string_from_obj+0x40>)
   2b378:	480d      	ldr	r0, [pc, #52]	; (2b3b0 <get_string_from_obj+0x44>)
   2b37a:	f240 42df 	movw	r2, #1247	; 0x4df
   2b37e:	f011 ff02 	bl	3d186 <assert_print>
   2b382:	f240 41df 	movw	r1, #1247	; 0x4df
   2b386:	4809      	ldr	r0, [pc, #36]	; (2b3ac <get_string_from_obj+0x40>)
   2b388:	f011 fef6 	bl	3d178 <assert_post_action>
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2b38c:	4628      	mov	r0, r5
   2b38e:	4631      	mov	r1, r6
   2b390:	f014 ff7e 	bl	40290 <cJSON_GetObjectItem>
   2b394:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2b396:	f015 f888 	bl	404aa <cJSON_IsString>
   2b39a:	b118      	cbz	r0, 2b3a4 <get_string_from_obj+0x38>
	return 0;
   2b39c:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2b39e:	692b      	ldr	r3, [r5, #16]
   2b3a0:	6023      	str	r3, [r4, #0]
}
   2b3a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2b3a4:	f06f 0015 	mvn.w	r0, #21
   2b3a8:	e7fb      	b.n	2b3a2 <get_string_from_obj+0x36>
   2b3aa:	bf00      	nop
   2b3ac:	00048418 	.word	0x00048418
   2b3b0:	0004494f 	.word	0x0004494f

0002b3b4 <nrf_cloud_parse_cell_pos_json>:

static int nrf_cloud_parse_cell_pos_json(const cJSON *const cell_pos_obj,
	struct nrf_cloud_cell_pos_result *const location_out)
{
   2b3b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b3b8:	460c      	mov	r4, r1
	if (!cell_pos_obj || !location_out) {
   2b3ba:	4605      	mov	r5, r0
   2b3bc:	2800      	cmp	r0, #0
   2b3be:	d04f      	beq.n	2b460 <nrf_cloud_parse_cell_pos_json+0xac>
   2b3c0:	2900      	cmp	r1, #0
   2b3c2:	d04d      	beq.n	2b460 <nrf_cloud_parse_cell_pos_json+0xac>
	}

	cJSON *lat, *lon, *unc;
	char *type;

	lat = cJSON_GetObjectItem(cell_pos_obj,
   2b3c4:	4928      	ldr	r1, [pc, #160]	; (2b468 <nrf_cloud_parse_cell_pos_json+0xb4>)
   2b3c6:	f014 ff63 	bl	40290 <cJSON_GetObjectItem>
				  NRF_CLOUD_CELL_POS_JSON_KEY_LAT);
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2b3ca:	4928      	ldr	r1, [pc, #160]	; (2b46c <nrf_cloud_parse_cell_pos_json+0xb8>)
	lat = cJSON_GetObjectItem(cell_pos_obj,
   2b3cc:	4680      	mov	r8, r0
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2b3ce:	4628      	mov	r0, r5
   2b3d0:	f014 ff5e 	bl	40290 <cJSON_GetObjectItem>
				NRF_CLOUD_CELL_POS_JSON_KEY_LON);
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2b3d4:	4926      	ldr	r1, [pc, #152]	; (2b470 <nrf_cloud_parse_cell_pos_json+0xbc>)
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2b3d6:	4607      	mov	r7, r0
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2b3d8:	4628      	mov	r0, r5
   2b3da:	f014 ff59 	bl	40290 <cJSON_GetObjectItem>
   2b3de:	4606      	mov	r6, r0
				NRF_CLOUD_CELL_POS_JSON_KEY_UNCERT);

	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2b3e0:	4640      	mov	r0, r8
   2b3e2:	f015 f85b 	bl	4049c <cJSON_IsNumber>
   2b3e6:	b920      	cbnz	r0, 2b3f2 <nrf_cloud_parse_cell_pos_json+0x3e>
	    !cJSON_IsNumber(unc)) {
		return -EBADMSG;
   2b3e8:	f06f 004c 	mvn.w	r0, #76	; 0x4c
	} else {
		LOG_WRN("Cellular positioning type not found in message");
	}

	return 0;
}
   2b3ec:	b002      	add	sp, #8
   2b3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2b3f2:	4638      	mov	r0, r7
   2b3f4:	f015 f852 	bl	4049c <cJSON_IsNumber>
   2b3f8:	2800      	cmp	r0, #0
   2b3fa:	d0f5      	beq.n	2b3e8 <nrf_cloud_parse_cell_pos_json+0x34>
	    !cJSON_IsNumber(unc)) {
   2b3fc:	4630      	mov	r0, r6
   2b3fe:	f015 f84d 	bl	4049c <cJSON_IsNumber>
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2b402:	2800      	cmp	r0, #0
   2b404:	d0f0      	beq.n	2b3e8 <nrf_cloud_parse_cell_pos_json+0x34>
	location_out->lat = lat->valuedouble;
   2b406:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
   2b40a:	e9c4 2302 	strd	r2, r3, [r4, #8]
	location_out->lon = lon->valuedouble;
   2b40e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   2b412:	e9c4 2304 	strd	r2, r3, [r4, #16]
	location_out->unc = (uint32_t)unc->valueint;
   2b416:	6973      	ldr	r3, [r6, #20]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2b418:	4628      	mov	r0, r5
	location_out->unc = (uint32_t)unc->valueint;
   2b41a:	61a3      	str	r3, [r4, #24]
	location_out->type = CELL_POS_TYPE__INVALID;
   2b41c:	2302      	movs	r3, #2
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2b41e:	4915      	ldr	r1, [pc, #84]	; (2b474 <nrf_cloud_parse_cell_pos_json+0xc0>)
	location_out->type = CELL_POS_TYPE__INVALID;
   2b420:	7023      	strb	r3, [r4, #0]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2b422:	aa01      	add	r2, sp, #4
   2b424:	f7ff ffa2 	bl	2b36c <get_string_from_obj>
   2b428:	b9a8      	cbnz	r0, 2b456 <nrf_cloud_parse_cell_pos_json+0xa2>
		if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_MCELL)) {
   2b42a:	4913      	ldr	r1, [pc, #76]	; (2b478 <nrf_cloud_parse_cell_pos_json+0xc4>)
   2b42c:	9801      	ldr	r0, [sp, #4]
   2b42e:	f7f1 fefe 	bl	1d22e <strcmp>
   2b432:	b910      	cbnz	r0, 2b43a <nrf_cloud_parse_cell_pos_json+0x86>
			location_out->type = CELL_POS_TYPE_MULTI;
   2b434:	2301      	movs	r3, #1
   2b436:	7023      	strb	r3, [r4, #0]
   2b438:	e7d8      	b.n	2b3ec <nrf_cloud_parse_cell_pos_json+0x38>
		} else if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_SCELL)) {
   2b43a:	4910      	ldr	r1, [pc, #64]	; (2b47c <nrf_cloud_parse_cell_pos_json+0xc8>)
   2b43c:	9801      	ldr	r0, [sp, #4]
   2b43e:	f7f1 fef6 	bl	1d22e <strcmp>
   2b442:	b908      	cbnz	r0, 2b448 <nrf_cloud_parse_cell_pos_json+0x94>
			location_out->type = CELL_POS_TYPE_SINGLE;
   2b444:	7020      	strb	r0, [r4, #0]
   2b446:	e7d1      	b.n	2b3ec <nrf_cloud_parse_cell_pos_json+0x38>
			LOG_WRN("Unhandled cellular positioning type: %s", log_strdup(type));
   2b448:	2157      	movs	r1, #87	; 0x57
   2b44a:	9a01      	ldr	r2, [sp, #4]
   2b44c:	480c      	ldr	r0, [pc, #48]	; (2b480 <nrf_cloud_parse_cell_pos_json+0xcc>)
   2b44e:	f011 fed4 	bl	3d1fa <z_log_minimal_printk>
	return 0;
   2b452:	2000      	movs	r0, #0
   2b454:	e7ca      	b.n	2b3ec <nrf_cloud_parse_cell_pos_json+0x38>
		LOG_WRN("Cellular positioning type not found in message");
   2b456:	2157      	movs	r1, #87	; 0x57
   2b458:	480a      	ldr	r0, [pc, #40]	; (2b484 <nrf_cloud_parse_cell_pos_json+0xd0>)
   2b45a:	f011 fece 	bl	3d1fa <z_log_minimal_printk>
   2b45e:	e7f8      	b.n	2b452 <nrf_cloud_parse_cell_pos_json+0x9e>
		return -EINVAL;
   2b460:	f06f 0015 	mvn.w	r0, #21
   2b464:	e7c2      	b.n	2b3ec <nrf_cloud_parse_cell_pos_json+0x38>
   2b466:	bf00      	nop
   2b468:	0004893f 	.word	0x0004893f
   2b46c:	00048943 	.word	0x00048943
   2b470:	00048947 	.word	0x00048947
   2b474:	00048953 	.word	0x00048953
   2b478:	00048961 	.word	0x00048961
   2b47c:	00048967 	.word	0x00048967
   2b480:	0004896d 	.word	0x0004896d
   2b484:	0004899a 	.word	0x0004899a

0002b488 <nrf_cloud_format_single_cell_pos_req_json>:
{
   2b488:	b570      	push	{r4, r5, r6, lr}
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2b48a:	490f      	ldr	r1, [pc, #60]	; (2b4c8 <nrf_cloud_format_single_cell_pos_req_json+0x40>)
{
   2b48c:	4605      	mov	r5, r0
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2b48e:	f014 ffab 	bl	403e8 <cJSON_AddArrayToObjectCS>
   2b492:	4606      	mov	r6, r0
	cJSON *lte_obj = cJSON_CreateObject();
   2b494:	f007 f928 	bl	326e8 <cJSON_CreateObject>
   2b498:	4604      	mov	r4, r0
	if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2b49a:	4601      	mov	r1, r0
   2b49c:	4630      	mov	r0, r6
   2b49e:	f014 ff01 	bl	402a4 <cJSON_AddItemToArray>
   2b4a2:	b948      	cbnz	r0, 2b4b8 <nrf_cloud_format_single_cell_pos_req_json+0x30>
		cJSON_Delete(lte_obj);
   2b4a4:	4620      	mov	r0, r4
   2b4a6:	f007 f85d 	bl	32564 <cJSON_Delete>
		err = -ENOMEM;
   2b4aa:	f06f 040b 	mvn.w	r4, #11
		cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2b4ae:	4628      	mov	r0, r5
   2b4b0:	4905      	ldr	r1, [pc, #20]	; (2b4c8 <nrf_cloud_format_single_cell_pos_req_json+0x40>)
   2b4b2:	f014 ff25 	bl	40300 <cJSON_DeleteItemFromObject>
	return err;
   2b4b6:	e005      	b.n	2b4c4 <nrf_cloud_format_single_cell_pos_req_json+0x3c>
		err = nrf_cloud_json_add_modem_info(lte_obj);
   2b4b8:	4620      	mov	r0, r4
   2b4ba:	f7ff f9c7 	bl	2a84c <nrf_cloud_json_add_modem_info>
	if (err) {
   2b4be:	4604      	mov	r4, r0
   2b4c0:	2800      	cmp	r0, #0
   2b4c2:	d1f4      	bne.n	2b4ae <nrf_cloud_format_single_cell_pos_req_json+0x26>
}
   2b4c4:	4620      	mov	r0, r4
   2b4c6:	bd70      	pop	{r4, r5, r6, pc}
   2b4c8:	000489ce 	.word	0x000489ce

0002b4cc <nrf_cloud_format_cell_pos_req_json>:
{
   2b4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4d0:	b085      	sub	sp, #20
   2b4d2:	4690      	mov	r8, r2
	if (!inf || !inf_cnt || !req_obj_out) {
   2b4d4:	4604      	mov	r4, r0
{
   2b4d6:	9101      	str	r1, [sp, #4]
	if (!inf || !inf_cnt || !req_obj_out) {
   2b4d8:	2800      	cmp	r0, #0
   2b4da:	f000 8123 	beq.w	2b724 <nrf_cloud_format_cell_pos_req_json+0x258>
   2b4de:	2900      	cmp	r1, #0
   2b4e0:	f000 8120 	beq.w	2b724 <nrf_cloud_format_cell_pos_req_json+0x258>
   2b4e4:	2a00      	cmp	r2, #0
   2b4e6:	f000 811d 	beq.w	2b724 <nrf_cloud_format_cell_pos_req_json+0x258>
	lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2b4ea:	4610      	mov	r0, r2
   2b4ec:	498f      	ldr	r1, [pc, #572]	; (2b72c <nrf_cloud_format_cell_pos_req_json+0x260>)
   2b4ee:	f014 ff7b 	bl	403e8 <cJSON_AddArrayToObjectCS>
	if (!lte_array) {
   2b4f2:	9000      	str	r0, [sp, #0]
   2b4f4:	2800      	cmp	r0, #0
   2b4f6:	f000 8090 	beq.w	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2b4fa:	f04f 0a00 	mov.w	sl, #0
	cJSON *nmr_array = NULL;
   2b4fe:	46d3      	mov	fp, sl
		lte_obj = cJSON_CreateObject();
   2b500:	f007 f8f2 	bl	326e8 <cJSON_CreateObject>
		if (!lte_obj) {
   2b504:	4605      	mov	r5, r0
   2b506:	2800      	cmp	r0, #0
   2b508:	f000 8087 	beq.w	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2b50c:	4601      	mov	r1, r0
   2b50e:	9800      	ldr	r0, [sp, #0]
   2b510:	f014 fec8 	bl	402a4 <cJSON_AddItemToArray>
   2b514:	b918      	cbnz	r0, 2b51e <nrf_cloud_format_cell_pos_req_json+0x52>
				cJSON_Delete(ncell_obj);
   2b516:	4628      	mov	r0, r5
   2b518:	f007 f824 	bl	32564 <cJSON_Delete>
				goto cleanup;
   2b51c:	e07d      	b.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2b51e:	68a0      	ldr	r0, [r4, #8]
   2b520:	f7f1 f8d0 	bl	1c6c4 <__aeabi_ui2d>
   2b524:	4602      	mov	r2, r0
   2b526:	460b      	mov	r3, r1
   2b528:	4628      	mov	r0, r5
   2b52a:	4981      	ldr	r1, [pc, #516]	; (2b730 <nrf_cloud_format_cell_pos_req_json+0x264>)
   2b52c:	f014 fbf0 	bl	3fd10 <json_add_num_cs>
   2b530:	2800      	cmp	r0, #0
   2b532:	d172      	bne.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2b534:	6820      	ldr	r0, [r4, #0]
   2b536:	f7f1 f8d5 	bl	1c6e4 <__aeabi_i2d>
   2b53a:	4602      	mov	r2, r0
   2b53c:	460b      	mov	r3, r1
   2b53e:	4628      	mov	r0, r5
   2b540:	497c      	ldr	r1, [pc, #496]	; (2b734 <nrf_cloud_format_cell_pos_req_json+0x268>)
   2b542:	f014 fbe5 	bl	3fd10 <json_add_num_cs>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2b546:	2800      	cmp	r0, #0
   2b548:	d167      	bne.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2b54a:	6860      	ldr	r0, [r4, #4]
   2b54c:	f7f1 f8ca 	bl	1c6e4 <__aeabi_i2d>
   2b550:	4602      	mov	r2, r0
   2b552:	460b      	mov	r3, r1
   2b554:	4628      	mov	r0, r5
   2b556:	4978      	ldr	r1, [pc, #480]	; (2b738 <nrf_cloud_format_cell_pos_req_json+0x26c>)
   2b558:	f014 fbda 	bl	3fd10 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2b55c:	2800      	cmp	r0, #0
   2b55e:	d15c      	bne.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_TAC, cur->tac)) {
   2b560:	68e0      	ldr	r0, [r4, #12]
   2b562:	f7f1 f8af 	bl	1c6c4 <__aeabi_ui2d>
   2b566:	4602      	mov	r2, r0
   2b568:	460b      	mov	r3, r1
   2b56a:	4628      	mov	r0, r5
   2b56c:	4973      	ldr	r1, [pc, #460]	; (2b73c <nrf_cloud_format_cell_pos_req_json+0x270>)
   2b56e:	f014 fbcf 	bl	3fd10 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2b572:	4606      	mov	r6, r0
   2b574:	2800      	cmp	r0, #0
   2b576:	d150      	bne.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2b578:	6920      	ldr	r0, [r4, #16]
   2b57a:	1c43      	adds	r3, r0, #1
   2b57c:	d143      	bne.n	2b606 <nrf_cloud_format_cell_pos_req_json+0x13a>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b57e:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   2b582:	2bff      	cmp	r3, #255	; 0xff
   2b584:	d154      	bne.n	2b630 <nrf_cloud_format_cell_pos_req_json+0x164>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b586:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	; 0x2c
   2b58a:	28ff      	cmp	r0, #255	; 0xff
   2b58c:	d010      	beq.n	2b5b0 <nrf_cloud_format_cell_pos_req_json+0xe4>
				    RSRQ_ADJ(cur->rsrq))) {
   2b58e:	f7f1 f8a9 	bl	1c6e4 <__aeabi_i2d>
   2b592:	2200      	movs	r2, #0
   2b594:	4b6a      	ldr	r3, [pc, #424]	; (2b740 <nrf_cloud_format_cell_pos_req_json+0x274>)
   2b596:	f7f1 f90f 	bl	1c7b8 <__aeabi_dmul>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2b59a:	2200      	movs	r2, #0
   2b59c:	4b69      	ldr	r3, [pc, #420]	; (2b744 <nrf_cloud_format_cell_pos_req_json+0x278>)
   2b59e:	f7f0 ff53 	bl	1c448 <__aeabi_dsub>
   2b5a2:	4602      	mov	r2, r0
   2b5a4:	460b      	mov	r3, r1
   2b5a6:	4628      	mov	r0, r5
   2b5a8:	4967      	ldr	r1, [pc, #412]	; (2b748 <nrf_cloud_format_cell_pos_req_json+0x27c>)
   2b5aa:	f014 fbb1 	bl	3fd10 <json_add_num_cs>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b5ae:	bba0      	cbnz	r0, 2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (cur->timing_advance != NRF_CLOUD_CELL_POS_OMIT_TIME_ADV) {
   2b5b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b5b4:	8aa3      	ldrh	r3, [r4, #20]
   2b5b6:	4293      	cmp	r3, r2
   2b5b8:	d00d      	beq.n	2b5d6 <nrf_cloud_format_cell_pos_req_json+0x10a>
			if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_T_ADV, t_adv)) {
   2b5ba:	f245 0020 	movw	r0, #20512	; 0x5020
   2b5be:	4298      	cmp	r0, r3
   2b5c0:	bf28      	it	cs
   2b5c2:	4618      	movcs	r0, r3
   2b5c4:	f7f1 f87e 	bl	1c6c4 <__aeabi_ui2d>
   2b5c8:	4602      	mov	r2, r0
   2b5ca:	460b      	mov	r3, r1
   2b5cc:	4628      	mov	r0, r5
   2b5ce:	495f      	ldr	r1, [pc, #380]	; (2b74c <nrf_cloud_format_cell_pos_req_json+0x280>)
   2b5d0:	f014 fb9e 	bl	3fd10 <json_add_num_cs>
   2b5d4:	bb08      	cbnz	r0, 2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (lte->ncells_count) {
   2b5d6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   2b5da:	2a00      	cmp	r2, #0
   2b5dc:	d138      	bne.n	2b650 <nrf_cloud_format_cell_pos_req_json+0x184>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2b5de:	f04f 0900 	mov.w	r9, #0
   2b5e2:	fa5f f789 	uxtb.w	r7, r9
   2b5e6:	f1bb 0f00 	cmp.w	fp, #0
   2b5ea:	d003      	beq.n	2b5f4 <nrf_cloud_format_cell_pos_req_json+0x128>
   2b5ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2b5f0:	42bb      	cmp	r3, r7
   2b5f2:	d83f      	bhi.n	2b674 <nrf_cloud_format_cell_pos_req_json+0x1a8>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2b5f4:	9b01      	ldr	r3, [sp, #4]
   2b5f6:	f10a 0a01 	add.w	sl, sl, #1
   2b5fa:	459a      	cmp	sl, r3
   2b5fc:	f104 0438 	add.w	r4, r4, #56	; 0x38
   2b600:	f47f af7e 	bne.w	2b500 <nrf_cloud_format_cell_pos_req_json+0x34>
   2b604:	e02a      	b.n	2b65c <nrf_cloud_format_cell_pos_req_json+0x190>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN, cur->earfcn)) {
   2b606:	f7f1 f85d 	bl	1c6c4 <__aeabi_ui2d>
   2b60a:	4602      	mov	r2, r0
   2b60c:	460b      	mov	r3, r1
   2b60e:	4628      	mov	r0, r5
   2b610:	494f      	ldr	r1, [pc, #316]	; (2b750 <nrf_cloud_format_cell_pos_req_json+0x284>)
   2b612:	f014 fb7d 	bl	3fd10 <json_add_num_cs>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2b616:	2800      	cmp	r0, #0
   2b618:	d0b1      	beq.n	2b57e <nrf_cloud_format_cell_pos_req_json+0xb2>
	cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2b61a:	4640      	mov	r0, r8
   2b61c:	4943      	ldr	r1, [pc, #268]	; (2b72c <nrf_cloud_format_cell_pos_req_json+0x260>)
   2b61e:	f014 fe6f 	bl	40300 <cJSON_DeleteItemFromObject>
	LOG_ERR("Failed to format location request, out of memory");
   2b622:	2145      	movs	r1, #69	; 0x45
   2b624:	484b      	ldr	r0, [pc, #300]	; (2b754 <nrf_cloud_format_cell_pos_req_json+0x288>)
   2b626:	f011 fde8 	bl	3d1fa <z_log_minimal_printk>
	return -ENOMEM;
   2b62a:	f06f 060b 	mvn.w	r6, #11
   2b62e:	e015      	b.n	2b65c <nrf_cloud_format_cell_pos_req_json+0x190>
				    RSRP_ADJ(cur->rsrp))) {
   2b630:	2b00      	cmp	r3, #0
   2b632:	bfd4      	ite	le
   2b634:	208c      	movle	r0, #140	; 0x8c
   2b636:	208d      	movgt	r0, #141	; 0x8d
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b638:	1a18      	subs	r0, r3, r0
   2b63a:	f7f1 f853 	bl	1c6e4 <__aeabi_i2d>
   2b63e:	4602      	mov	r2, r0
   2b640:	460b      	mov	r3, r1
   2b642:	4628      	mov	r0, r5
   2b644:	4944      	ldr	r1, [pc, #272]	; (2b758 <nrf_cloud_format_cell_pos_req_json+0x28c>)
   2b646:	f014 fb63 	bl	3fd10 <json_add_num_cs>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b64a:	2800      	cmp	r0, #0
   2b64c:	d09b      	beq.n	2b586 <nrf_cloud_format_cell_pos_req_json+0xba>
   2b64e:	e7e4      	b.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
			if (lte->neighbor_cells == NULL) {
   2b650:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b652:	b93b      	cbnz	r3, 2b664 <nrf_cloud_format_cell_pos_req_json+0x198>
				LOG_WRN("Neighbor cell count is %u, but buffer is NULL",
   2b654:	2157      	movs	r1, #87	; 0x57
   2b656:	4841      	ldr	r0, [pc, #260]	; (2b75c <nrf_cloud_format_cell_pos_req_json+0x290>)
   2b658:	f011 fdcf 	bl	3d1fa <z_log_minimal_printk>
}
   2b65c:	4630      	mov	r0, r6
   2b65e:	b005      	add	sp, #20
   2b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nmr_array = cJSON_AddArrayToObjectCS(lte_obj,
   2b664:	4628      	mov	r0, r5
   2b666:	493e      	ldr	r1, [pc, #248]	; (2b760 <nrf_cloud_format_cell_pos_req_json+0x294>)
   2b668:	f014 febe 	bl	403e8 <cJSON_AddArrayToObjectCS>
			if (!nmr_array) {
   2b66c:	4683      	mov	fp, r0
   2b66e:	2800      	cmp	r0, #0
   2b670:	d1b5      	bne.n	2b5de <nrf_cloud_format_cell_pos_req_json+0x112>
   2b672:	e7d2      	b.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b674:	013b      	lsls	r3, r7, #4
   2b676:	9303      	str	r3, [sp, #12]
   2b678:	6b63      	ldr	r3, [r4, #52]	; 0x34
			if (ncell == NULL) {
   2b67a:	eb13 1707 	adds.w	r7, r3, r7, lsl #4
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b67e:	9302      	str	r3, [sp, #8]
			if (ncell == NULL) {
   2b680:	d0b8      	beq.n	2b5f4 <nrf_cloud_format_cell_pos_req_json+0x128>
			ncell_obj = cJSON_CreateObject();
   2b682:	f007 f831 	bl	326e8 <cJSON_CreateObject>
			if (!ncell_obj) {
   2b686:	4605      	mov	r5, r0
   2b688:	2800      	cmp	r0, #0
   2b68a:	d0c6      	beq.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
			if (!cJSON_AddItemToArray(nmr_array, ncell_obj)) {
   2b68c:	4601      	mov	r1, r0
   2b68e:	4658      	mov	r0, fp
   2b690:	f014 fe08 	bl	402a4 <cJSON_AddItemToArray>
   2b694:	2800      	cmp	r0, #0
   2b696:	f43f af3e 	beq.w	2b516 <nrf_cloud_format_cell_pos_req_json+0x4a>
			if (json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN,
   2b69a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b69e:	5898      	ldr	r0, [r3, r2]
   2b6a0:	f7f1 f810 	bl	1c6c4 <__aeabi_ui2d>
   2b6a4:	4602      	mov	r2, r0
   2b6a6:	460b      	mov	r3, r1
   2b6a8:	4628      	mov	r0, r5
   2b6aa:	4929      	ldr	r1, [pc, #164]	; (2b750 <nrf_cloud_format_cell_pos_req_json+0x284>)
   2b6ac:	f014 fb30 	bl	3fd10 <json_add_num_cs>
   2b6b0:	2800      	cmp	r0, #0
   2b6b2:	d1b2      	bne.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_PCI,
   2b6b4:	8938      	ldrh	r0, [r7, #8]
   2b6b6:	f7f1 f805 	bl	1c6c4 <__aeabi_ui2d>
   2b6ba:	4602      	mov	r2, r0
   2b6bc:	460b      	mov	r3, r1
   2b6be:	4628      	mov	r0, r5
   2b6c0:	4928      	ldr	r1, [pc, #160]	; (2b764 <nrf_cloud_format_cell_pos_req_json+0x298>)
   2b6c2:	f014 fb25 	bl	3fd10 <json_add_num_cs>
					    ncell->earfcn) ||
   2b6c6:	2800      	cmp	r0, #0
   2b6c8:	d1a7      	bne.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b6ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   2b6ce:	2bff      	cmp	r3, #255	; 0xff
   2b6d0:	d118      	bne.n	2b704 <nrf_cloud_format_cell_pos_req_json+0x238>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b6d2:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
   2b6d6:	28ff      	cmp	r0, #255	; 0xff
   2b6d8:	d011      	beq.n	2b6fe <nrf_cloud_format_cell_pos_req_json+0x232>
					    RSRQ_ADJ(ncell->rsrq))) {
   2b6da:	f7f1 f803 	bl	1c6e4 <__aeabi_i2d>
   2b6de:	2200      	movs	r2, #0
   2b6e0:	4b17      	ldr	r3, [pc, #92]	; (2b740 <nrf_cloud_format_cell_pos_req_json+0x274>)
   2b6e2:	f7f1 f869 	bl	1c7b8 <__aeabi_dmul>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2b6e6:	2200      	movs	r2, #0
   2b6e8:	4b16      	ldr	r3, [pc, #88]	; (2b744 <nrf_cloud_format_cell_pos_req_json+0x278>)
   2b6ea:	f7f0 fead 	bl	1c448 <__aeabi_dsub>
   2b6ee:	4602      	mov	r2, r0
   2b6f0:	460b      	mov	r3, r1
   2b6f2:	4628      	mov	r0, r5
   2b6f4:	4914      	ldr	r1, [pc, #80]	; (2b748 <nrf_cloud_format_cell_pos_req_json+0x27c>)
   2b6f6:	f014 fb0b 	bl	3fd10 <json_add_num_cs>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b6fa:	2800      	cmp	r0, #0
   2b6fc:	d18d      	bne.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2b6fe:	f109 0901 	add.w	r9, r9, #1
   2b702:	e76e      	b.n	2b5e2 <nrf_cloud_format_cell_pos_req_json+0x116>
					    RSRP_ADJ(ncell->rsrp))) {
   2b704:	2b00      	cmp	r3, #0
   2b706:	bfd4      	ite	le
   2b708:	208c      	movle	r0, #140	; 0x8c
   2b70a:	208d      	movgt	r0, #141	; 0x8d
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b70c:	1a18      	subs	r0, r3, r0
   2b70e:	f7f0 ffe9 	bl	1c6e4 <__aeabi_i2d>
   2b712:	4602      	mov	r2, r0
   2b714:	460b      	mov	r3, r1
   2b716:	4628      	mov	r0, r5
   2b718:	490f      	ldr	r1, [pc, #60]	; (2b758 <nrf_cloud_format_cell_pos_req_json+0x28c>)
   2b71a:	f014 faf9 	bl	3fd10 <json_add_num_cs>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b71e:	2800      	cmp	r0, #0
   2b720:	d0d7      	beq.n	2b6d2 <nrf_cloud_format_cell_pos_req_json+0x206>
   2b722:	e77a      	b.n	2b61a <nrf_cloud_format_cell_pos_req_json+0x14e>
		return -EINVAL;
   2b724:	f06f 0615 	mvn.w	r6, #21
   2b728:	e798      	b.n	2b65c <nrf_cloud_format_cell_pos_req_json+0x190>
   2b72a:	bf00      	nop
   2b72c:	000489ce 	.word	0x000489ce
   2b730:	000485a6 	.word	0x000485a6
   2b734:	00046ab5 	.word	0x00046ab5
   2b738:	00046abc 	.word	0x00046abc
   2b73c:	000485a2 	.word	0x000485a2
   2b740:	3fe00000 	.word	0x3fe00000
   2b744:	40338000 	.word	0x40338000
   2b748:	000489d9 	.word	0x000489d9
   2b74c:	000489de 	.word	0x000489de
   2b750:	000489d2 	.word	0x000489d2
   2b754:	00048a1d 	.word	0x00048a1d
   2b758:	000469bc 	.word	0x000469bc
   2b75c:	000489e2 	.word	0x000489e2
   2b760:	00048a15 	.word	0x00048a15
   2b764:	00048a19 	.word	0x00048a19

0002b768 <nrf_cloud_handle_error_message>:

int nrf_cloud_handle_error_message(const char *const buf,
				   const char *const app_id,
				   const char *const msg_type,
				   enum nrf_cloud_error * const err)
{
   2b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b76a:	460e      	mov	r6, r1
   2b76c:	4617      	mov	r7, r2
   2b76e:	461c      	mov	r4, r3
	if (!buf || !err) {
   2b770:	b320      	cbz	r0, 2b7bc <nrf_cloud_handle_error_message+0x54>
   2b772:	b31b      	cbz	r3, 2b7bc <nrf_cloud_handle_error_message+0x54>
	}

	int ret;
	cJSON *root_obj;

	*err = NRF_CLOUD_ERROR_NONE;
   2b774:	2300      	movs	r3, #0
   2b776:	6023      	str	r3, [r4, #0]

	root_obj = cJSON_Parse(buf);
   2b778:	f014 fd75 	bl	40266 <cJSON_Parse>
	if (!root_obj) {
   2b77c:	4605      	mov	r5, r0
   2b77e:	b300      	cbz	r0, 2b7c2 <nrf_cloud_handle_error_message+0x5a>
		LOG_DBG("No JSON found");
		return -ENODATA;
	}

	ret = get_error_code_value(root_obj, err);
   2b780:	4621      	mov	r1, r4
   2b782:	f7fe ffff 	bl	2a784 <get_error_code_value>
	if (ret) {
   2b786:	4604      	mov	r4, r0
   2b788:	b908      	cbnz	r0, 2b78e <nrf_cloud_handle_error_message+0x26>
		goto clean_up;
	}

	/* If provided, check for matching app id and msg type */
	if (msg_type &&
   2b78a:	b92f      	cbnz	r7, 2b798 <nrf_cloud_handle_error_message+0x30>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
		ret = -ENOENT;
		goto clean_up;
	}
	if (app_id &&
   2b78c:	b976      	cbnz	r6, 2b7ac <nrf_cloud_handle_error_message+0x44>
		ret = -ENOENT;
		goto clean_up;
	}

clean_up:
	cJSON_Delete(root_obj);
   2b78e:	4628      	mov	r0, r5
   2b790:	f006 fee8 	bl	32564 <cJSON_Delete>
	return ret;
}
   2b794:	4620      	mov	r0, r4
   2b796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2b798:	463a      	mov	r2, r7
   2b79a:	4628      	mov	r0, r5
   2b79c:	490a      	ldr	r1, [pc, #40]	; (2b7c8 <nrf_cloud_handle_error_message+0x60>)
   2b79e:	f7fe ff7b 	bl	2a698 <json_item_string_exists>
	if (msg_type &&
   2b7a2:	2800      	cmp	r0, #0
   2b7a4:	d1f2      	bne.n	2b78c <nrf_cloud_handle_error_message+0x24>
		ret = -ENOENT;
   2b7a6:	f06f 0401 	mvn.w	r4, #1
		goto clean_up;
   2b7aa:	e7f0      	b.n	2b78e <nrf_cloud_handle_error_message+0x26>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_APPID_KEY, app_id)) {
   2b7ac:	4632      	mov	r2, r6
   2b7ae:	4628      	mov	r0, r5
   2b7b0:	4906      	ldr	r1, [pc, #24]	; (2b7cc <nrf_cloud_handle_error_message+0x64>)
   2b7b2:	f7fe ff71 	bl	2a698 <json_item_string_exists>
	if (app_id &&
   2b7b6:	2800      	cmp	r0, #0
   2b7b8:	d1e9      	bne.n	2b78e <nrf_cloud_handle_error_message+0x26>
   2b7ba:	e7f4      	b.n	2b7a6 <nrf_cloud_handle_error_message+0x3e>
		return -EINVAL;
   2b7bc:	f06f 0415 	mvn.w	r4, #21
   2b7c0:	e7e8      	b.n	2b794 <nrf_cloud_handle_error_message+0x2c>
		return -ENODATA;
   2b7c2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2b7c6:	e7e5      	b.n	2b794 <nrf_cloud_handle_error_message+0x2c>
   2b7c8:	00043d63 	.word	0x00043d63
   2b7cc:	00043d12 	.word	0x00043d12

0002b7d0 <nrf_cloud_parse_pgps_response>:
{
   2b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b7d2:	460c      	mov	r4, r1
	if (!response || !result ||
   2b7d4:	4606      	mov	r6, r0
{
   2b7d6:	b085      	sub	sp, #20
	if (!response || !result ||
   2b7d8:	2800      	cmp	r0, #0
   2b7da:	d076      	beq.n	2b8ca <nrf_cloud_parse_pgps_response+0xfa>
   2b7dc:	2900      	cmp	r1, #0
   2b7de:	d074      	beq.n	2b8ca <nrf_cloud_parse_pgps_response+0xfa>
   2b7e0:	680b      	ldr	r3, [r1, #0]
   2b7e2:	2b00      	cmp	r3, #0
   2b7e4:	d071      	beq.n	2b8ca <nrf_cloud_parse_pgps_response+0xfa>
	    !result->host || !result->host_sz ||
   2b7e6:	684b      	ldr	r3, [r1, #4]
   2b7e8:	2b00      	cmp	r3, #0
   2b7ea:	d06e      	beq.n	2b8ca <nrf_cloud_parse_pgps_response+0xfa>
   2b7ec:	688b      	ldr	r3, [r1, #8]
   2b7ee:	2b00      	cmp	r3, #0
   2b7f0:	d06b      	beq.n	2b8ca <nrf_cloud_parse_pgps_response+0xfa>
	    !result->path || !result->path_sz) {
   2b7f2:	68cb      	ldr	r3, [r1, #12]
   2b7f4:	2b00      	cmp	r3, #0
   2b7f6:	d068      	beq.n	2b8ca <nrf_cloud_parse_pgps_response+0xfa>
	char *host_ptr = NULL;
   2b7f8:	2700      	movs	r7, #0
	char *path_ptr = NULL;
   2b7fa:	e9cd 7701 	strd	r7, r7, [sp, #4]
	cJSON *rsp_obj = cJSON_Parse(response);
   2b7fe:	f014 fd32 	bl	40266 <cJSON_Parse>
	if (!rsp_obj) {
   2b802:	4605      	mov	r5, r0
   2b804:	b940      	cbnz	r0, 2b818 <nrf_cloud_parse_pgps_response+0x48>
		LOG_ERR("P-GPS response does not contain valid JSON");
   2b806:	2145      	movs	r1, #69	; 0x45
   2b808:	4833      	ldr	r0, [pc, #204]	; (2b8d8 <nrf_cloud_parse_pgps_response+0x108>)
   2b80a:	f011 fcf6 	bl	3d1fa <z_log_minimal_printk>
		err = -EBADMSG;
   2b80e:	f06f 044c 	mvn.w	r4, #76	; 0x4c
}
   2b812:	4620      	mov	r0, r4
   2b814:	b005      	add	sp, #20
   2b816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cJSON_IsArray(rsp_obj)) {
   2b818:	f014 fe55 	bl	404c6 <cJSON_IsArray>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b81c:	aa01      	add	r2, sp, #4
	if (cJSON_IsArray(rsp_obj)) {
   2b81e:	b300      	cbz	r0, 2b862 <nrf_cloud_parse_pgps_response+0x92>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b820:	4639      	mov	r1, r7
   2b822:	4628      	mov	r0, r5
   2b824:	f7ff fd7e 	bl	2b324 <get_string_from_array>
   2b828:	b130      	cbz	r0, 2b838 <nrf_cloud_parse_pgps_response+0x68>
			LOG_ERR("Invalid P-GPS array response format");
   2b82a:	2145      	movs	r1, #69	; 0x45
   2b82c:	482b      	ldr	r0, [pc, #172]	; (2b8dc <nrf_cloud_parse_pgps_response+0x10c>)
			LOG_ERR("Invalid P-GPS response format");
   2b82e:	f011 fce4 	bl	3d1fa <z_log_minimal_printk>
			err = -EFTYPE;
   2b832:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		goto cleanup;
   2b836:	e032      	b.n	2b89e <nrf_cloud_parse_pgps_response+0xce>
		    get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_PATH, &path_ptr)) {
   2b838:	2101      	movs	r1, #1
   2b83a:	4628      	mov	r0, r5
   2b83c:	aa02      	add	r2, sp, #8
   2b83e:	f7ff fd71 	bl	2b324 <get_string_from_array>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b842:	2800      	cmp	r0, #0
   2b844:	d1f1      	bne.n	2b82a <nrf_cloud_parse_pgps_response+0x5a>
	if (!host_ptr || !path_ptr) {
   2b846:	9801      	ldr	r0, [sp, #4]
   2b848:	2800      	cmp	r0, #0
   2b84a:	d041      	beq.n	2b8d0 <nrf_cloud_parse_pgps_response+0x100>
   2b84c:	9b02      	ldr	r3, [sp, #8]
   2b84e:	2b00      	cmp	r3, #0
   2b850:	d03e      	beq.n	2b8d0 <nrf_cloud_parse_pgps_response+0x100>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b852:	6866      	ldr	r6, [r4, #4]
   2b854:	f7f1 fcf5 	bl	1d242 <strlen>
   2b858:	4286      	cmp	r6, r0
   2b85a:	d824      	bhi.n	2b8a6 <nrf_cloud_parse_pgps_response+0xd6>
		err = -ENOBUFS;
   2b85c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2b860:	e01d      	b.n	2b89e <nrf_cloud_parse_pgps_response+0xce>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b862:	4628      	mov	r0, r5
   2b864:	491e      	ldr	r1, [pc, #120]	; (2b8e0 <nrf_cloud_parse_pgps_response+0x110>)
   2b866:	f7ff fd81 	bl	2b36c <get_string_from_obj>
   2b86a:	b148      	cbz	r0, 2b880 <nrf_cloud_parse_pgps_response+0xb0>
		err = nrf_cloud_handle_error_message(response, NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2b86c:	4630      	mov	r0, r6
   2b86e:	4a1d      	ldr	r2, [pc, #116]	; (2b8e4 <nrf_cloud_parse_pgps_response+0x114>)
   2b870:	491d      	ldr	r1, [pc, #116]	; (2b8e8 <nrf_cloud_parse_pgps_response+0x118>)
   2b872:	ab03      	add	r3, sp, #12
   2b874:	f7ff ff78 	bl	2b768 <nrf_cloud_handle_error_message>
		if (!err) {
   2b878:	b150      	cbz	r0, 2b890 <nrf_cloud_parse_pgps_response+0xc0>
			LOG_ERR("Invalid P-GPS response format");
   2b87a:	2145      	movs	r1, #69	; 0x45
   2b87c:	481b      	ldr	r0, [pc, #108]	; (2b8ec <nrf_cloud_parse_pgps_response+0x11c>)
   2b87e:	e7d6      	b.n	2b82e <nrf_cloud_parse_pgps_response+0x5e>
		   get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_PATH, &path_ptr)) {
   2b880:	4628      	mov	r0, r5
   2b882:	491b      	ldr	r1, [pc, #108]	; (2b8f0 <nrf_cloud_parse_pgps_response+0x120>)
   2b884:	aa02      	add	r2, sp, #8
   2b886:	f7ff fd71 	bl	2b36c <get_string_from_obj>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b88a:	2800      	cmp	r0, #0
   2b88c:	d0db      	beq.n	2b846 <nrf_cloud_parse_pgps_response+0x76>
   2b88e:	e7ed      	b.n	2b86c <nrf_cloud_parse_pgps_response+0x9c>
			LOG_ERR("nRF Cloud returned P-GPS error: %d", nrf_err);
   2b890:	2145      	movs	r1, #69	; 0x45
   2b892:	9a03      	ldr	r2, [sp, #12]
   2b894:	4817      	ldr	r0, [pc, #92]	; (2b8f4 <nrf_cloud_parse_pgps_response+0x124>)
   2b896:	f011 fcb0 	bl	3d1fa <z_log_minimal_printk>
			err = -EFAULT;
   2b89a:	f06f 040d 	mvn.w	r4, #13
		cJSON_Delete(rsp_obj);
   2b89e:	4628      	mov	r0, r5
   2b8a0:	f006 fe60 	bl	32564 <cJSON_Delete>
   2b8a4:	e7b5      	b.n	2b812 <nrf_cloud_parse_pgps_response+0x42>
	    (result->path_sz <= strlen(path_ptr))) {
   2b8a6:	9802      	ldr	r0, [sp, #8]
   2b8a8:	68e6      	ldr	r6, [r4, #12]
   2b8aa:	f7f1 fcca 	bl	1d242 <strlen>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b8ae:	4286      	cmp	r6, r0
   2b8b0:	d9d4      	bls.n	2b85c <nrf_cloud_parse_pgps_response+0x8c>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b8b2:	6862      	ldr	r2, [r4, #4]
   2b8b4:	9901      	ldr	r1, [sp, #4]
   2b8b6:	6820      	ldr	r0, [r4, #0]
   2b8b8:	f016 fb39 	bl	41f2e <strncpy>
   2b8bc:	68e2      	ldr	r2, [r4, #12]
   2b8be:	68a0      	ldr	r0, [r4, #8]
   2b8c0:	9902      	ldr	r1, [sp, #8]
   2b8c2:	f016 fb34 	bl	41f2e <strncpy>
	int err = 0;
   2b8c6:	2400      	movs	r4, #0
   2b8c8:	e7e9      	b.n	2b89e <nrf_cloud_parse_pgps_response+0xce>
		return -EINVAL;
   2b8ca:	f06f 0415 	mvn.w	r4, #21
   2b8ce:	e7a0      	b.n	2b812 <nrf_cloud_parse_pgps_response+0x42>
		err = -ENOSTR;
   2b8d0:	f06f 043b 	mvn.w	r4, #59	; 0x3b
   2b8d4:	e7e3      	b.n	2b89e <nrf_cloud_parse_pgps_response+0xce>
   2b8d6:	bf00      	nop
   2b8d8:	00048a53 	.word	0x00048a53
   2b8dc:	00048a83 	.word	0x00048a83
   2b8e0:	00045b18 	.word	0x00045b18
   2b8e4:	00043d5e 	.word	0x00043d5e
   2b8e8:	00048aac 	.word	0x00048aac
   2b8ec:	00048ad9 	.word	0x00048ad9
   2b8f0:	00048907 	.word	0x00048907
   2b8f4:	00048ab1 	.word	0x00048ab1

0002b8f8 <nrf_cloud_parse_cell_pos_response>:

int nrf_cloud_parse_cell_pos_response(const char *const buf,
				      struct nrf_cloud_cell_pos_result *result)
{
   2b8f8:	b570      	push	{r4, r5, r6, lr}
   2b8fa:	460d      	mov	r5, r1
	int ret = 1; /* 1: cell-based location not found */
	cJSON *cell_pos_obj;
	cJSON *data_obj;

	if ((buf == NULL) || (result == NULL)) {
   2b8fc:	2800      	cmp	r0, #0
   2b8fe:	d051      	beq.n	2b9a4 <nrf_cloud_parse_cell_pos_response+0xac>
   2b900:	2900      	cmp	r1, #0
   2b902:	d04f      	beq.n	2b9a4 <nrf_cloud_parse_cell_pos_response+0xac>
		return -EINVAL;
	}

	cell_pos_obj = cJSON_Parse(buf);
   2b904:	f014 fcaf 	bl	40266 <cJSON_Parse>
	if (!cell_pos_obj) {
   2b908:	4606      	mov	r6, r0
   2b90a:	2800      	cmp	r0, #0
   2b90c:	d04d      	beq.n	2b9aa <nrf_cloud_parse_cell_pos_response+0xb2>
	}

	/* First, check to see if this is a REST payload, which is not wrapped in
	 * an nRF Cloud MQTT message
	 */
	ret = nrf_cloud_parse_cell_pos_json(cell_pos_obj, result);
   2b90e:	4629      	mov	r1, r5
   2b910:	f7ff fd50 	bl	2b3b4 <nrf_cloud_parse_cell_pos_json>
	if (ret == 0) {
   2b914:	4604      	mov	r4, r0
   2b916:	b140      	cbz	r0, 2b92a <nrf_cloud_parse_cell_pos_response+0x32>
		goto cleanup;
	}

	/* Clear the error flag and check for MQTT payload format */
	result->err = NRF_CLOUD_ERROR_NONE;
   2b918:	2300      	movs	r3, #0
	ret = 1;

	/* Check for nRF Cloud MQTT message; valid appId and msgType */
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b91a:	4630      	mov	r0, r6
   2b91c:	4a24      	ldr	r2, [pc, #144]	; (2b9b0 <nrf_cloud_parse_cell_pos_response+0xb8>)
   2b91e:	4925      	ldr	r1, [pc, #148]	; (2b9b4 <nrf_cloud_parse_cell_pos_response+0xbc>)
	result->err = NRF_CLOUD_ERROR_NONE;
   2b920:	61eb      	str	r3, [r5, #28]
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b922:	f7fe feb9 	bl	2a698 <json_item_string_exists>
   2b926:	b9b0      	cbnz	r0, 2b956 <nrf_cloud_parse_cell_pos_response+0x5e>
	ret = 1;
   2b928:	2401      	movs	r4, #1
		LOG_ERR("Expected data not found in cellular positioning message");
		ret = -EBADMSG;
	}

cleanup:
	cJSON_Delete(cell_pos_obj);
   2b92a:	4630      	mov	r0, r6
   2b92c:	f006 fe1a 	bl	32564 <cJSON_Delete>

	if (ret < 0) {
   2b930:	2c00      	cmp	r4, #0
   2b932:	da0e      	bge.n	2b952 <nrf_cloud_parse_cell_pos_response+0x5a>
		/* Clear data on error */
		result->lat = 0.0;
   2b934:	2300      	movs	r3, #0
   2b936:	2200      	movs	r2, #0
   2b938:	e9c5 2302 	strd	r2, r3, [r5, #8]
		result->lon = 0.0;
   2b93c:	e9c5 2304 	strd	r2, r3, [r5, #16]
		result->unc = 0;
   2b940:	2300      	movs	r3, #0
   2b942:	61ab      	str	r3, [r5, #24]
		result->type = CELL_POS_TYPE__INVALID;
   2b944:	2302      	movs	r3, #2
   2b946:	702b      	strb	r3, [r5, #0]

		/* Set to unknown error if an error code was not found */
		if (result->err == NRF_CLOUD_ERROR_NONE) {
   2b948:	69eb      	ldr	r3, [r5, #28]
   2b94a:	b913      	cbnz	r3, 2b952 <nrf_cloud_parse_cell_pos_response+0x5a>
			result->err = NRF_CLOUD_ERROR_UNKNOWN;
   2b94c:	f04f 33ff 	mov.w	r3, #4294967295
   2b950:	61eb      	str	r3, [r5, #28]
		}
	}

	return ret;
}
   2b952:	4620      	mov	r0, r4
   2b954:	bd70      	pop	{r4, r5, r6, pc}
	    !json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_APPID_KEY,
   2b956:	4630      	mov	r0, r6
   2b958:	4a17      	ldr	r2, [pc, #92]	; (2b9b8 <nrf_cloud_parse_cell_pos_response+0xc0>)
   2b95a:	4918      	ldr	r1, [pc, #96]	; (2b9bc <nrf_cloud_parse_cell_pos_response+0xc4>)
   2b95c:	f7fe fe9c 	bl	2a698 <json_item_string_exists>
				     NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) ||
   2b960:	2800      	cmp	r0, #0
   2b962:	d0e1      	beq.n	2b928 <nrf_cloud_parse_cell_pos_response+0x30>
	data_obj = cJSON_GetObjectItem(cell_pos_obj, NRF_CLOUD_JSON_DATA_KEY);
   2b964:	4630      	mov	r0, r6
   2b966:	4916      	ldr	r1, [pc, #88]	; (2b9c0 <nrf_cloud_parse_cell_pos_response+0xc8>)
   2b968:	f014 fc92 	bl	40290 <cJSON_GetObjectItem>
	if (data_obj) {
   2b96c:	b150      	cbz	r0, 2b984 <nrf_cloud_parse_cell_pos_response+0x8c>
		ret = nrf_cloud_parse_cell_pos_json(data_obj, result);
   2b96e:	4629      	mov	r1, r5
   2b970:	f7ff fd20 	bl	2b3b4 <nrf_cloud_parse_cell_pos_json>
		if (ret) {
   2b974:	4604      	mov	r4, r0
   2b976:	2800      	cmp	r0, #0
   2b978:	d0d7      	beq.n	2b92a <nrf_cloud_parse_cell_pos_response+0x32>
			LOG_ERR("Failed to parse cellular positioning data");
   2b97a:	2145      	movs	r1, #69	; 0x45
   2b97c:	4811      	ldr	r0, [pc, #68]	; (2b9c4 <nrf_cloud_parse_cell_pos_response+0xcc>)
   2b97e:	f011 fc3c 	bl	3d1fa <z_log_minimal_printk>
   2b982:	e7d2      	b.n	2b92a <nrf_cloud_parse_cell_pos_response+0x32>
	ret = get_error_code_value(cell_pos_obj, &result->err);
   2b984:	4630      	mov	r0, r6
   2b986:	f105 011c 	add.w	r1, r5, #28
   2b98a:	f7fe fefb 	bl	2a784 <get_error_code_value>
	if (ret) {
   2b98e:	b930      	cbnz	r0, 2b99e <nrf_cloud_parse_cell_pos_response+0xa6>
		LOG_ERR("Expected data not found in cellular positioning message");
   2b990:	2145      	movs	r1, #69	; 0x45
   2b992:	480d      	ldr	r0, [pc, #52]	; (2b9c8 <nrf_cloud_parse_cell_pos_response+0xd0>)
   2b994:	f011 fc31 	bl	3d1fa <z_log_minimal_printk>
		ret = -EBADMSG;
   2b998:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   2b99c:	e7c5      	b.n	2b92a <nrf_cloud_parse_cell_pos_response+0x32>
		ret = -EFAULT;
   2b99e:	f06f 040d 	mvn.w	r4, #13
   2b9a2:	e7c2      	b.n	2b92a <nrf_cloud_parse_cell_pos_response+0x32>
		return -EINVAL;
   2b9a4:	f06f 0415 	mvn.w	r4, #21
   2b9a8:	e7d3      	b.n	2b952 <nrf_cloud_parse_cell_pos_response+0x5a>
		return 1;
   2b9aa:	2401      	movs	r4, #1
   2b9ac:	e7d1      	b.n	2b952 <nrf_cloud_parse_cell_pos_response+0x5a>
   2b9ae:	bf00      	nop
   2b9b0:	00043d5e 	.word	0x00043d5e
   2b9b4:	00043d63 	.word	0x00043d63
   2b9b8:	00048afc 	.word	0x00048afc
   2b9bc:	00043d12 	.word	0x00043d12
   2b9c0:	00043e3a 	.word	0x00043e3a
   2b9c4:	00048b05 	.word	0x00048b05
   2b9c8:	00048b34 	.word	0x00048b34

0002b9cc <nrf_cloud_detect_disconnection_request>:

	return ret;
}

bool nrf_cloud_detect_disconnection_request(const char *const buf)
{
   2b9cc:	b538      	push	{r3, r4, r5, lr}
	if (buf == NULL) {
   2b9ce:	4604      	mov	r4, r0
   2b9d0:	b910      	cbnz	r0, 2b9d8 <nrf_cloud_detect_disconnection_request+0xc>
		return false;
   2b9d2:	2400      	movs	r4, #0
		ret = false;
	}

	cJSON_Delete(discon_request_obj);
	return ret;
}
   2b9d4:	4620      	mov	r0, r4
   2b9d6:	bd38      	pop	{r3, r4, r5, pc}
	if (memchr(buf, '\0', NRF_CLOUD_JSON_MSG_MAX_LEN_DISCONNECT) == NULL) {
   2b9d8:	22c8      	movs	r2, #200	; 0xc8
   2b9da:	2100      	movs	r1, #0
   2b9dc:	f016 f882 	bl	41ae4 <memchr>
   2b9e0:	2800      	cmp	r0, #0
   2b9e2:	d0f6      	beq.n	2b9d2 <nrf_cloud_detect_disconnection_request+0x6>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b9e4:	4620      	mov	r0, r4
   2b9e6:	490f      	ldr	r1, [pc, #60]	; (2ba24 <nrf_cloud_detect_disconnection_request+0x58>)
   2b9e8:	f016 fad4 	bl	41f94 <strstr>
   2b9ec:	2800      	cmp	r0, #0
   2b9ee:	d0f0      	beq.n	2b9d2 <nrf_cloud_detect_disconnection_request+0x6>
	    strstr(buf, NRF_CLOUD_JSON_MSG_TYPE_VAL_DISCONNECT) == NULL) {
   2b9f0:	4620      	mov	r0, r4
   2b9f2:	490d      	ldr	r1, [pc, #52]	; (2ba28 <nrf_cloud_detect_disconnection_request+0x5c>)
   2b9f4:	f016 face 	bl	41f94 <strstr>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b9f8:	2800      	cmp	r0, #0
   2b9fa:	d0ea      	beq.n	2b9d2 <nrf_cloud_detect_disconnection_request+0x6>
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2b9fc:	4620      	mov	r0, r4
   2b9fe:	f014 fc32 	bl	40266 <cJSON_Parse>
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2ba02:	4a09      	ldr	r2, [pc, #36]	; (2ba28 <nrf_cloud_detect_disconnection_request+0x5c>)
   2ba04:	4909      	ldr	r1, [pc, #36]	; (2ba2c <nrf_cloud_detect_disconnection_request+0x60>)
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2ba06:	4605      	mov	r5, r0
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2ba08:	f7fe fe46 	bl	2a698 <json_item_string_exists>
   2ba0c:	4604      	mov	r4, r0
   2ba0e:	b128      	cbz	r0, 2ba1c <nrf_cloud_detect_disconnection_request+0x50>
	    !json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_APPID_KEY,
   2ba10:	4628      	mov	r0, r5
   2ba12:	4a04      	ldr	r2, [pc, #16]	; (2ba24 <nrf_cloud_detect_disconnection_request+0x58>)
   2ba14:	4906      	ldr	r1, [pc, #24]	; (2ba30 <nrf_cloud_detect_disconnection_request+0x64>)
   2ba16:	f7fe fe3f 	bl	2a698 <json_item_string_exists>
   2ba1a:	4604      	mov	r4, r0
	cJSON_Delete(discon_request_obj);
   2ba1c:	4628      	mov	r0, r5
   2ba1e:	f006 fda1 	bl	32564 <cJSON_Delete>
	return ret;
   2ba22:	e7d7      	b.n	2b9d4 <nrf_cloud_detect_disconnection_request+0x8>
   2ba24:	00048b71 	.word	0x00048b71
   2ba28:	00048b78 	.word	0x00048b78
   2ba2c:	00043d63 	.word	0x00043d63
   2ba30:	00043d12 	.word	0x00043d12

0002ba34 <nrf_cloud_configured_client_id_get>:
	return 0;
#endif
}

int nrf_cloud_configured_client_id_get(char * const buf, const size_t buf_sz)
{
   2ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba36:	460d      	mov	r5, r1
	if (!buf || !buf_sz) {
   2ba38:	4606      	mov	r6, r0
{
   2ba3a:	b089      	sub	sp, #36	; 0x24
	if (!buf || !buf_sz) {
   2ba3c:	b310      	cbz	r0, 2ba84 <nrf_cloud_configured_client_id_get+0x50>
   2ba3e:	b309      	cbz	r1, 2ba84 <nrf_cloud_configured_client_id_get+0x50>
	int print_ret;

#if defined(CONFIG_NRF_CLOUD_CLIENT_ID_SRC_IMEI)
	char imei_buf[CGSN_RESPONSE_LENGTH];

	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   2ba40:	af02      	add	r7, sp, #8
   2ba42:	2116      	movs	r1, #22
   2ba44:	4638      	mov	r0, r7
   2ba46:	4a12      	ldr	r2, [pc, #72]	; (2ba90 <nrf_cloud_configured_client_id_get+0x5c>)
   2ba48:	f009 fe20 	bl	3568c <nrf_modem_at_cmd>
	if (err) {
   2ba4c:	4604      	mov	r4, r0
   2ba4e:	b138      	cbz	r0, 2ba60 <nrf_cloud_configured_client_id_get+0x2c>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   2ba50:	4602      	mov	r2, r0
   2ba52:	2145      	movs	r1, #69	; 0x45
   2ba54:	480f      	ldr	r0, [pc, #60]	; (2ba94 <nrf_cloud_configured_client_id_get+0x60>)
   2ba56:	f011 fbd0 	bl	3d1fa <z_log_minimal_printk>
	} else if (print_ret >= buf_sz) {
		return -EMSGSIZE;
	}

	return 0;
}
   2ba5a:	4620      	mov	r0, r4
   2ba5c:	b009      	add	sp, #36	; 0x24
   2ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2ba60:	230f      	movs	r3, #15
	imei_buf[NRF_IMEI_LEN] = 0;
   2ba62:	f88d 0017 	strb.w	r0, [sp, #23]
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2ba66:	9300      	str	r3, [sp, #0]
   2ba68:	4629      	mov	r1, r5
   2ba6a:	4630      	mov	r0, r6
   2ba6c:	4b0a      	ldr	r3, [pc, #40]	; (2ba98 <nrf_cloud_configured_client_id_get+0x64>)
   2ba6e:	4a0b      	ldr	r2, [pc, #44]	; (2ba9c <nrf_cloud_configured_client_id_get+0x68>)
   2ba70:	9701      	str	r7, [sp, #4]
   2ba72:	f011 f9b2 	bl	3cdda <snprintk>
	if (print_ret <= 0) {
   2ba76:	2800      	cmp	r0, #0
   2ba78:	dd07      	ble.n	2ba8a <nrf_cloud_configured_client_id_get+0x56>
		return -EMSGSIZE;
   2ba7a:	4285      	cmp	r5, r0
   2ba7c:	bf98      	it	ls
   2ba7e:	f06f 0479 	mvnls.w	r4, #121	; 0x79
   2ba82:	e7ea      	b.n	2ba5a <nrf_cloud_configured_client_id_get+0x26>
		return -EINVAL;
   2ba84:	f06f 0415 	mvn.w	r4, #21
   2ba88:	e7e7      	b.n	2ba5a <nrf_cloud_configured_client_id_get+0x26>
		return -EIO;
   2ba8a:	f06f 0404 	mvn.w	r4, #4
   2ba8e:	e7e4      	b.n	2ba5a <nrf_cloud_configured_client_id_get+0x26>
   2ba90:	000469e9 	.word	0x000469e9
   2ba94:	00048b98 	.word	0x00048b98
   2ba98:	00048bbe 	.word	0x00048bbe
   2ba9c:	00048bc3 	.word	0x00048bc3

0002baa0 <connect_error_translate>:
	return err;
}

static int connect_error_translate(const int err)
{
	switch (err) {
   2baa0:	2800      	cmp	r0, #0
{
   2baa2:	b508      	push	{r3, lr}
	switch (err) {
   2baa4:	dc0e      	bgt.n	2bac4 <connect_error_translate+0x24>
   2baa6:	f110 0f0d 	cmn.w	r0, #13
   2baaa:	da13      	bge.n	2bad4 <connect_error_translate+0x34>
   2baac:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2bab0:	d049      	beq.n	2bb46 <connect_error_translate+0xa6>
   2bab2:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2bab6:	da34      	bge.n	2bb22 <connect_error_translate+0x82>
   2bab8:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2babc:	d046      	beq.n	2bb4c <connect_error_translate+0xac>
   2babe:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2bac2:	d046      	beq.n	2bb52 <connect_error_translate+0xb2>
	case -ENOMEM:
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
	case -EINPROGRESS:
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
	default:
		LOG_ERR("nRF cloud connect failed %d", err);
   2bac4:	4602      	mov	r2, r0
   2bac6:	2145      	movs	r1, #69	; 0x45
   2bac8:	4825      	ldr	r0, [pc, #148]	; (2bb60 <connect_error_translate+0xc0>)
   2baca:	f011 fb96 	bl	3d1fa <z_log_minimal_printk>
		return NRF_CLOUD_CONNECT_RES_ERR_MISC;
   2bace:	f06f 0004 	mvn.w	r0, #4
   2bad2:	e025      	b.n	2bb20 <connect_error_translate+0x80>
	switch (err) {
   2bad4:	f100 030d 	add.w	r3, r0, #13
   2bad8:	2b0d      	cmp	r3, #13
   2bada:	d8f3      	bhi.n	2bac4 <connect_error_translate+0x24>
   2badc:	a201      	add	r2, pc, #4	; (adr r2, 2bae4 <connect_error_translate+0x44>)
   2bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2bae2:	bf00      	nop
   2bae4:	0002bb35 	.word	0x0002bb35
   2bae8:	0002bb41 	.word	0x0002bb41
   2baec:	0002bac5 	.word	0x0002bac5
   2baf0:	0002bb1d 	.word	0x0002bb1d
   2baf4:	0002bac5 	.word	0x0002bac5
   2baf8:	0002bb3b 	.word	0x0002bb3b
   2bafc:	0002bac5 	.word	0x0002bac5
   2bb00:	0002bac5 	.word	0x0002bac5
   2bb04:	0002bac5 	.word	0x0002bac5
   2bb08:	0002bac5 	.word	0x0002bac5
   2bb0c:	0002bac5 	.word	0x0002bac5
   2bb10:	0002bac5 	.word	0x0002bac5
   2bb14:	0002bac5 	.word	0x0002bac5
   2bb18:	0002bb21 	.word	0x0002bb21
   2bb1c:	f06f 0002 	mvn.w	r0, #2
	}
}
   2bb20:	bd08      	pop	{r3, pc}
	switch (err) {
   2bb22:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2bb26:	d017      	beq.n	2bb58 <connect_error_translate+0xb8>
   2bb28:	f110 0f16 	cmn.w	r0, #22
   2bb2c:	d1ca      	bne.n	2bac4 <connect_error_translate+0x24>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2bb2e:	f06f 0006 	mvn.w	r0, #6
   2bb32:	e7f5      	b.n	2bb20 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2bb34:	f04f 30ff 	mov.w	r0, #4294967295
   2bb38:	e7f2      	b.n	2bb20 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   2bb3a:	f06f 0003 	mvn.w	r0, #3
   2bb3e:	e7ef      	b.n	2bb20 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   2bb40:	f06f 0005 	mvn.w	r0, #5
   2bb44:	e7ec      	b.n	2bb20 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2bb46:	f06f 0008 	mvn.w	r0, #8
   2bb4a:	e7e9      	b.n	2bb20 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2bb4c:	f06f 000a 	mvn.w	r0, #10
   2bb50:	e7e6      	b.n	2bb20 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2bb52:	f06f 0009 	mvn.w	r0, #9
   2bb56:	e7e3      	b.n	2bb20 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   2bb58:	f06f 0007 	mvn.w	r0, #7
   2bb5c:	e7e0      	b.n	2bb20 <connect_error_translate+0x80>
   2bb5e:	bf00      	nop
   2bb60:	00048bde 	.word	0x00048bde

0002bb64 <nfsm_get_current_state>:
	return current_state;
   2bb64:	4b01      	ldr	r3, [pc, #4]	; (2bb6c <nfsm_get_current_state+0x8>)
   2bb66:	7818      	ldrb	r0, [r3, #0]
}
   2bb68:	4770      	bx	lr
   2bb6a:	bf00      	nop
   2bb6c:	2001c924 	.word	0x2001c924

0002bb70 <nfsm_set_current_state_and_notify>:
{
   2bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bb72:	4606      	mov	r6, r0
	bool discon_evt = (evt != NULL) &&
   2bb74:	460c      	mov	r4, r1
   2bb76:	b341      	cbz	r1, 2bbca <nfsm_set_current_state_and_notify+0x5a>
   2bb78:	780d      	ldrb	r5, [r1, #0]
   2bb7a:	f1a5 0309 	sub.w	r3, r5, #9
   2bb7e:	425d      	negs	r5, r3
   2bb80:	415d      	adcs	r5, r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2bb82:	f04f 32ff 	mov.w	r2, #4294967295
   2bb86:	f04f 33ff 	mov.w	r3, #4294967295
   2bb8a:	4811      	ldr	r0, [pc, #68]	; (2bbd0 <nfsm_set_current_state_and_notify+0x60>)
   2bb8c:	f00b f9ae 	bl	36eec <z_impl_k_mutex_lock>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bb90:	4f10      	ldr	r7, [pc, #64]	; (2bbd4 <nfsm_set_current_state_and_notify+0x64>)
   2bb92:	e8d7 3faf 	lda	r3, [r7]
	if (!atomic_get(&uninit_in_progress)) {
   2bb96:	b90b      	cbnz	r3, 2bb9c <nfsm_set_current_state_and_notify+0x2c>
		current_state = state;
   2bb98:	4b0f      	ldr	r3, [pc, #60]	; (2bbd8 <nfsm_set_current_state_and_notify+0x68>)
   2bb9a:	701e      	strb	r6, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2bb9c:	480c      	ldr	r0, [pc, #48]	; (2bbd0 <nfsm_set_current_state_and_notify+0x60>)
   2bb9e:	f00b fa77 	bl	37090 <z_impl_k_mutex_unlock>
	if (discon_evt) {
   2bba2:	b11d      	cbz	r5, 2bbac <nfsm_set_current_state_and_notify+0x3c>
		atomic_set(&transport_disconnected, 1);
   2bba4:	2101      	movs	r1, #1
   2bba6:	480d      	ldr	r0, [pc, #52]	; (2bbdc <nfsm_set_current_state_and_notify+0x6c>)
   2bba8:	f014 f926 	bl	3fdf8 <atomic_set.isra.0>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2bbac:	4b0c      	ldr	r3, [pc, #48]	; (2bbe0 <nfsm_set_current_state_and_notify+0x70>)
   2bbae:	681b      	ldr	r3, [r3, #0]
   2bbb0:	b113      	cbz	r3, 2bbb8 <nfsm_set_current_state_and_notify+0x48>
   2bbb2:	b10c      	cbz	r4, 2bbb8 <nfsm_set_current_state_and_notify+0x48>
		app_event_handler(evt);
   2bbb4:	4620      	mov	r0, r4
   2bbb6:	4798      	blx	r3
	if (discon_evt && atomic_get(&uninit_in_progress)) {
   2bbb8:	b14d      	cbz	r5, 2bbce <nfsm_set_current_state_and_notify+0x5e>
   2bbba:	e8d7 3faf 	lda	r3, [r7]
   2bbbe:	b133      	cbz	r3, 2bbce <nfsm_set_current_state_and_notify+0x5e>
}
   2bbc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2bbc4:	4807      	ldr	r0, [pc, #28]	; (2bbe4 <nfsm_set_current_state_and_notify+0x74>)
   2bbc6:	f00b bbe3 	b.w	37390 <z_impl_k_sem_give>
	bool discon_evt = (evt != NULL) &&
   2bbca:	460d      	mov	r5, r1
   2bbcc:	e7d9      	b.n	2bb82 <nfsm_set_current_state_and_notify+0x12>
}
   2bbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bbd0:	20014fa4 	.word	0x20014fa4
   2bbd4:	20019578 	.word	0x20019578
   2bbd8:	2001c924 	.word	0x2001c924
   2bbdc:	20019574 	.word	0x20019574
   2bbe0:	20019568 	.word	0x20019568
   2bbe4:	200150d8 	.word	0x200150d8

0002bbe8 <nfsm_get_disconnect_requested>:
   2bbe8:	4b03      	ldr	r3, [pc, #12]	; (2bbf8 <nfsm_get_disconnect_requested+0x10>)
   2bbea:	e8d3 0faf 	lda	r0, [r3]
}
   2bbee:	3800      	subs	r0, #0
   2bbf0:	bf18      	it	ne
   2bbf2:	2001      	movne	r0, #1
   2bbf4:	4770      	bx	lr
   2bbf6:	bf00      	nop
   2bbf8:	20019570 	.word	0x20019570

0002bbfc <nrf_cloud_init>:
{
   2bbfc:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE ||
   2bbfe:	4b15      	ldr	r3, [pc, #84]	; (2bc54 <nrf_cloud_init+0x58>)
{
   2bc00:	4605      	mov	r5, r0
	if (current_state != STATE_IDLE ||
   2bc02:	781b      	ldrb	r3, [r3, #0]
   2bc04:	b11b      	cbz	r3, 2bc0e <nrf_cloud_init+0x12>
		return -EACCES;
   2bc06:	f06f 040c 	mvn.w	r4, #12
}
   2bc0a:	4620      	mov	r0, r4
   2bc0c:	bd38      	pop	{r3, r4, r5, pc}
   2bc0e:	4b12      	ldr	r3, [pc, #72]	; (2bc58 <nrf_cloud_init+0x5c>)
   2bc10:	e8d3 3faf 	lda	r3, [r3]
	if (current_state != STATE_IDLE ||
   2bc14:	2b00      	cmp	r3, #0
   2bc16:	d1f6      	bne.n	2bc06 <nrf_cloud_init+0xa>
	if (param->event_handler == NULL) {
   2bc18:	6803      	ldr	r3, [r0, #0]
   2bc1a:	b1bb      	cbz	r3, 2bc4c <nrf_cloud_init+0x50>
	err = nfsm_init();
   2bc1c:	f000 fb86 	bl	2c32c <nfsm_init>
	if (err) {
   2bc20:	4604      	mov	r4, r0
   2bc22:	2800      	cmp	r0, #0
   2bc24:	d1f1      	bne.n	2bc0a <nrf_cloud_init+0xe>
	err = nrf_cloud_codec_init();
   2bc26:	f7fe fdcd 	bl	2a7c4 <nrf_cloud_codec_init>
	if (err) {
   2bc2a:	4604      	mov	r4, r0
   2bc2c:	2800      	cmp	r0, #0
   2bc2e:	d1ec      	bne.n	2bc0a <nrf_cloud_init+0xe>
	err = nct_init(param->client_id);
   2bc30:	6868      	ldr	r0, [r5, #4]
   2bc32:	f000 fee9 	bl	2ca08 <nct_init>
	if (err) {
   2bc36:	4604      	mov	r4, r0
   2bc38:	2800      	cmp	r0, #0
   2bc3a:	d1e6      	bne.n	2bc0a <nrf_cloud_init+0xe>
	app_event_handler = param->event_handler;
   2bc3c:	682a      	ldr	r2, [r5, #0]
   2bc3e:	4b07      	ldr	r3, [pc, #28]	; (2bc5c <nrf_cloud_init+0x60>)
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2bc40:	4601      	mov	r1, r0
   2bc42:	2001      	movs	r0, #1
	app_event_handler = param->event_handler;
   2bc44:	601a      	str	r2, [r3, #0]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2bc46:	f7ff ff93 	bl	2bb70 <nfsm_set_current_state_and_notify>
	return 0;
   2bc4a:	e7de      	b.n	2bc0a <nrf_cloud_init+0xe>
		return -EINVAL;
   2bc4c:	f06f 0415 	mvn.w	r4, #21
   2bc50:	e7db      	b.n	2bc0a <nrf_cloud_init+0xe>
   2bc52:	bf00      	nop
   2bc54:	2001c924 	.word	0x2001c924
   2bc58:	20019578 	.word	0x20019578
   2bc5c:	20019568 	.word	0x20019568

0002bc60 <nrf_cloud_uninit>:
{
   2bc60:	b538      	push	{r3, r4, r5, lr}
	err = nrf_cloud_fota_uninit();
   2bc62:	f004 f8a9 	bl	2fdb8 <nrf_cloud_fota_uninit>
	if (err == -EBUSY) {
   2bc66:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_fota_uninit();
   2bc6a:	4604      	mov	r4, r0
	if (err == -EBUSY) {
   2bc6c:	d105      	bne.n	2bc7a <nrf_cloud_uninit+0x1a>
		LOG_WRN("Cannot uninitialize while a FOTA job is active");
   2bc6e:	2157      	movs	r1, #87	; 0x57
   2bc70:	481e      	ldr	r0, [pc, #120]	; (2bcec <nrf_cloud_uninit+0x8c>)
   2bc72:	f011 fac2 	bl	3d1fa <z_log_minimal_printk>
}
   2bc76:	4620      	mov	r0, r4
   2bc78:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set(&uninit_in_progress, 1);
   2bc7a:	2101      	movs	r1, #1
   2bc7c:	481c      	ldr	r0, [pc, #112]	; (2bcf0 <nrf_cloud_uninit+0x90>)
   2bc7e:	f014 f8bb 	bl	3fdf8 <atomic_set.isra.0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2bc82:	f04f 32ff 	mov.w	r2, #4294967295
   2bc86:	f04f 33ff 	mov.w	r3, #4294967295
   2bc8a:	481a      	ldr	r0, [pc, #104]	; (2bcf4 <nrf_cloud_uninit+0x94>)
   2bc8c:	f00b f92e 	bl	36eec <z_impl_k_mutex_lock>
	current_state = STATE_IDLE;
   2bc90:	2200      	movs	r2, #0
	prev_state = current_state;
   2bc92:	4b19      	ldr	r3, [pc, #100]	; (2bcf8 <nrf_cloud_uninit+0x98>)
   2bc94:	781d      	ldrb	r5, [r3, #0]
	current_state = STATE_IDLE;
   2bc96:	701a      	strb	r2, [r3, #0]
	prev_state = current_state;
   2bc98:	b2ed      	uxtb	r5, r5
	return z_impl_k_mutex_unlock(mutex);
   2bc9a:	4816      	ldr	r0, [pc, #88]	; (2bcf4 <nrf_cloud_uninit+0x94>)
   2bc9c:	f00b f9f8 	bl	37090 <z_impl_k_mutex_unlock>
	if (prev_state >= STATE_CONNECTED) {
   2bca0:	2d01      	cmp	r5, #1
   2bca2:	d918      	bls.n	2bcd6 <nrf_cloud_uninit+0x76>
		atomic_set(&disconnect_requested, 1);
   2bca4:	2101      	movs	r1, #1
   2bca6:	4815      	ldr	r0, [pc, #84]	; (2bcfc <nrf_cloud_uninit+0x9c>)
   2bca8:	f014 f8a6 	bl	3fdf8 <atomic_set.isra.0>
	z_impl_k_sem_reset(sem);
   2bcac:	4814      	ldr	r0, [pc, #80]	; (2bd00 <nrf_cloud_uninit+0xa0>)
   2bcae:	f00b fc15 	bl	374dc <z_impl_k_sem_reset>
		(void)nct_disconnect();
   2bcb2:	f001 f915 	bl	2cee0 <nct_disconnect>
	return z_impl_k_sem_take(sem, timeout);
   2bcb6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2bcba:	2300      	movs	r3, #0
   2bcbc:	4810      	ldr	r0, [pc, #64]	; (2bd00 <nrf_cloud_uninit+0xa0>)
   2bcbe:	f00b fba3 	bl	37408 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2bcc2:	f110 0f0b 	cmn.w	r0, #11
   2bcc6:	4604      	mov	r4, r0
   2bcc8:	d105      	bne.n	2bcd6 <nrf_cloud_uninit+0x76>
			LOG_WRN("Did not receive expected disconnect event during cloud unint");
   2bcca:	2157      	movs	r1, #87	; 0x57
   2bccc:	480d      	ldr	r0, [pc, #52]	; (2bd04 <nrf_cloud_uninit+0xa4>)
   2bcce:	f011 fa94 	bl	3d1fa <z_log_minimal_printk>
			err = -EISCONN;
   2bcd2:	f06f 047e 	mvn.w	r4, #126	; 0x7e
	app_event_handler = NULL;
   2bcd6:	2500      	movs	r5, #0
   2bcd8:	4b0b      	ldr	r3, [pc, #44]	; (2bd08 <nrf_cloud_uninit+0xa8>)
   2bcda:	601d      	str	r5, [r3, #0]
	nct_uninit();
   2bcdc:	f000 ff88 	bl	2cbf0 <nct_uninit>
	atomic_set(&uninit_in_progress, 0);
   2bce0:	4629      	mov	r1, r5
   2bce2:	4803      	ldr	r0, [pc, #12]	; (2bcf0 <nrf_cloud_uninit+0x90>)
   2bce4:	f014 f888 	bl	3fdf8 <atomic_set.isra.0>
	return err;
   2bce8:	e7c5      	b.n	2bc76 <nrf_cloud_uninit+0x16>
   2bcea:	bf00      	nop
   2bcec:	00048bff 	.word	0x00048bff
   2bcf0:	20019578 	.word	0x20019578
   2bcf4:	20014fa4 	.word	0x20014fa4
   2bcf8:	2001c924 	.word	0x2001c924
   2bcfc:	20019570 	.word	0x20019570
   2bd00:	200150d8 	.word	0x200150d8
   2bd04:	00048c33 	.word	0x00048c33
   2bd08:	20019568 	.word	0x20019568

0002bd0c <nrf_cloud_connect>:
	atomic_set(&disconnect_requested, 0);
	return nct_connect();
}

int nrf_cloud_connect(const struct nrf_cloud_connect_param *param)
{
   2bd0c:	b510      	push	{r4, lr}
	int err;

	if (current_state == STATE_IDLE) {
   2bd0e:	4b12      	ldr	r3, [pc, #72]	; (2bd58 <nrf_cloud_connect+0x4c>)
   2bd10:	781a      	ldrb	r2, [r3, #0]
   2bd12:	b1d2      	cbz	r2, 2bd4a <nrf_cloud_connect+0x3e>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
	} else if (current_state != STATE_INITIALIZED) {
   2bd14:	781a      	ldrb	r2, [r3, #0]
   2bd16:	2a01      	cmp	r2, #1
   2bd18:	d11a      	bne.n	2bd50 <nrf_cloud_connect+0x44>
}

#if IS_ENABLED(CONFIG_NRF_CLOUD_CONNECTION_POLL_THREAD)
static int start_connection_poll()
{
	if (current_state == STATE_IDLE) {
   2bd1a:	781b      	ldrb	r3, [r3, #0]
   2bd1c:	b17b      	cbz	r3, 2bd3e <nrf_cloud_connect+0x32>
   2bd1e:	4b0f      	ldr	r3, [pc, #60]	; (2bd5c <nrf_cloud_connect+0x50>)
   2bd20:	e8d3 4faf 	lda	r4, [r3]
		return -EACCES;
	}

	if (atomic_get(&connection_poll_active)) {
   2bd24:	b974      	cbnz	r4, 2bd44 <nrf_cloud_connect+0x38>
		LOG_DBG("Connection poll in progress");
		return -EINPROGRESS;
	}

	atomic_set(&disconnect_requested, 0);
   2bd26:	4621      	mov	r1, r4
   2bd28:	480d      	ldr	r0, [pc, #52]	; (2bd60 <nrf_cloud_connect+0x54>)
   2bd2a:	f014 f865 	bl	3fdf8 <atomic_set.isra.0>
	z_impl_k_sem_give(sem);
   2bd2e:	480d      	ldr	r0, [pc, #52]	; (2bd64 <nrf_cloud_connect+0x58>)
   2bd30:	f00b fb2e 	bl	37390 <z_impl_k_sem_give>
	k_sem_give(&connection_poll_sem);

	return 0;
   2bd34:	4620      	mov	r0, r4
}
   2bd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_error_translate(err);
   2bd3a:	f7ff beb1 	b.w	2baa0 <connect_error_translate>
		return -EACCES;
   2bd3e:	f06f 000c 	mvn.w	r0, #12
   2bd42:	e7f8      	b.n	2bd36 <nrf_cloud_connect+0x2a>
		return -EINPROGRESS;
   2bd44:	f06f 0076 	mvn.w	r0, #118	; 0x76
   2bd48:	e7f5      	b.n	2bd36 <nrf_cloud_connect+0x2a>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2bd4a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2bd4e:	bd10      	pop	{r4, pc}
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2bd50:	f06f 000a 	mvn.w	r0, #10
   2bd54:	e7fb      	b.n	2bd4e <nrf_cloud_connect+0x42>
   2bd56:	bf00      	nop
   2bd58:	2001c924 	.word	0x2001c924
   2bd5c:	2001956c 	.word	0x2001956c
   2bd60:	20019570 	.word	0x20019570
   2bd64:	20015030 	.word	0x20015030

0002bd68 <nrf_cloud_disconnect>:
{
   2bd68:	b508      	push	{r3, lr}
	if (current_state < STATE_CONNECTED) {
   2bd6a:	4b07      	ldr	r3, [pc, #28]	; (2bd88 <nrf_cloud_disconnect+0x20>)
   2bd6c:	781b      	ldrb	r3, [r3, #0]
   2bd6e:	2b01      	cmp	r3, #1
   2bd70:	d907      	bls.n	2bd82 <nrf_cloud_disconnect+0x1a>
	atomic_set(&disconnect_requested, 1);
   2bd72:	2101      	movs	r1, #1
   2bd74:	4805      	ldr	r0, [pc, #20]	; (2bd8c <nrf_cloud_disconnect+0x24>)
   2bd76:	f014 f83f 	bl	3fdf8 <atomic_set.isra.0>
}
   2bd7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2bd7e:	f001 b8af 	b.w	2cee0 <nct_disconnect>
}
   2bd82:	f06f 000c 	mvn.w	r0, #12
   2bd86:	bd08      	pop	{r3, pc}
   2bd88:	2001c924 	.word	0x2001c924
   2bd8c:	20019570 	.word	0x20019570

0002bd90 <nrf_cloud_run>:
}

void nrf_cloud_run(void)
{
   2bd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
start:
	k_sem_take(&connection_poll_sem, K_FOREVER);
	atomic_set(&connection_poll_active, 1);

	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2bd94:	2700      	movs	r7, #0
	return z_impl_k_sem_take(sem, timeout);
   2bd96:	4d41      	ldr	r5, [pc, #260]	; (2be9c <nrf_cloud_run+0x10c>)
	atomic_set(&connection_poll_active, 1);
   2bd98:	4e41      	ldr	r6, [pc, #260]	; (2bea0 <nrf_cloud_run+0x110>)
{
   2bd9a:	b089      	sub	sp, #36	; 0x24
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2bd9c:	f04f 0902 	mov.w	r9, #2
   2bda0:	f04f 32ff 	mov.w	r2, #4294967295
   2bda4:	f04f 33ff 	mov.w	r3, #4294967295
   2bda8:	4628      	mov	r0, r5
	return current_state;
   2bdaa:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2beb0 <nrf_cloud_run+0x120>
   2bdae:	f00b fb2b 	bl	37408 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2bdb2:	2101      	movs	r1, #1
   2bdb4:	4630      	mov	r0, r6
   2bdb6:	f014 f81f 	bl	3fdf8 <atomic_set.isra.0>
	return current_state;
   2bdba:	f898 0000 	ldrb.w	r0, [r8]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bdbe:	a902      	add	r1, sp, #8
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2bdc0:	f88d 9008 	strb.w	r9, [sp, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2bdc4:	9703      	str	r7, [sp, #12]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bdc6:	f7ff fed3 	bl	2bb70 <nfsm_set_current_state_and_notify>
	atomic_set(&disconnect_requested, 0);
   2bdca:	2100      	movs	r1, #0
   2bdcc:	4835      	ldr	r0, [pc, #212]	; (2bea4 <nrf_cloud_run+0x114>)
   2bdce:	f014 f813 	bl	3fdf8 <atomic_set.isra.0>
	return nct_connect();
   2bdd2:	f000 ff29 	bl	2cc28 <nct_connect>

	ret = connect_to_cloud();
	ret = connect_error_translate(ret);
   2bdd6:	f7ff fe63 	bl	2baa0 <connect_error_translate>

	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   2bdda:	4604      	mov	r4, r0
   2bddc:	b188      	cbz	r0, 2be02 <nrf_cloud_run+0x72>
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
		evt.status = ret;
   2bdde:	9003      	str	r0, [sp, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bde0:	a902      	add	r1, sp, #8
	return current_state;
   2bde2:	f898 0000 	ldrb.w	r0, [r8]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2bde6:	f88d 9008 	strb.w	r9, [sp, #8]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bdea:	f7ff fec1 	bl	2bb70 <nfsm_set_current_state_and_notify>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
		nrf_cloud_disconnect();
	}

reset:
	atomic_set(&connection_poll_active, 0);
   2bdee:	2100      	movs	r1, #0
   2bdf0:	4630      	mov	r0, r6
   2bdf2:	f014 f801 	bl	3fdf8 <atomic_set.isra.0>
   2bdf6:	2200      	movs	r2, #0
   2bdf8:	2300      	movs	r3, #0
   2bdfa:	4628      	mov	r0, r5
   2bdfc:	f00b fb04 	bl	37408 <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   2be00:	e7cc      	b.n	2bd9c <nrf_cloud_run+0xc>
	fds[0].fd = nct_socket_get();
   2be02:	f001 f8cb 	bl	2cf9c <nct_socket_get>
	fds[0].events = POLLIN;
   2be06:	2301      	movs	r3, #1
   2be08:	f8ad 3004 	strh.w	r3, [sp, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2be0c:	2309      	movs	r3, #9
	fds[0].fd = nct_socket_get();
   2be0e:	9000      	str	r0, [sp, #0]
	atomic_set(&transport_disconnected, 0);
   2be10:	4825      	ldr	r0, [pc, #148]	; (2bea8 <nrf_cloud_run+0x118>)
   2be12:	4621      	mov	r1, r4
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2be14:	f88d 3008 	strb.w	r3, [sp, #8]
   2be18:	4604      	mov	r4, r0
	atomic_set(&transport_disconnected, 0);
   2be1a:	f013 ffed 	bl	3fdf8 <atomic_set.isra.0>
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   2be1e:	f001 f8b7 	bl	2cf90 <nct_keepalive_time_left>
   2be22:	4602      	mov	r2, r0
	return z_impl_zsock_poll(fds, nfds, timeout);
   2be24:	2101      	movs	r1, #1
   2be26:	4668      	mov	r0, sp
   2be28:	f011 fe02 	bl	3da30 <z_impl_zsock_poll>
		if (ret == 0) {
   2be2c:	4602      	mov	r2, r0
   2be2e:	b940      	cbnz	r0, 2be42 <nrf_cloud_run+0xb2>
	return nct_process();
   2be30:	f001 f860 	bl	2cef4 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2be34:	2800      	cmp	r0, #0
   2be36:	daf2      	bge.n	2be1e <nrf_cloud_run+0x8e>
   2be38:	300b      	adds	r0, #11
   2be3a:	d0f0      	beq.n	2be1e <nrf_cloud_run+0x8e>
				evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2be3c:	2301      	movs	r3, #1
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2be3e:	9303      	str	r3, [sp, #12]
			break;
   2be40:	e00d      	b.n	2be5e <nrf_cloud_run+0xce>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2be42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2be46:	07d8      	lsls	r0, r3, #31
   2be48:	d515      	bpl.n	2be76 <nrf_cloud_run+0xe6>
	return nct_process();
   2be4a:	f001 f853 	bl	2cef4 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2be4e:	2800      	cmp	r0, #0
   2be50:	da01      	bge.n	2be56 <nrf_cloud_run+0xc6>
   2be52:	300b      	adds	r0, #11
   2be54:	d1f2      	bne.n	2be3c <nrf_cloud_run+0xac>
   2be56:	e8d4 3faf 	lda	r3, [r4]
			if (atomic_get(&transport_disconnected) == 1) {
   2be5a:	2b01      	cmp	r3, #1
   2be5c:	d1df      	bne.n	2be1e <nrf_cloud_run+0x8e>
   2be5e:	4b12      	ldr	r3, [pc, #72]	; (2bea8 <nrf_cloud_run+0x118>)
   2be60:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2be64:	2b00      	cmp	r3, #0
   2be66:	d1c2      	bne.n	2bdee <nrf_cloud_run+0x5e>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   2be68:	a902      	add	r1, sp, #8
   2be6a:	2001      	movs	r0, #1
   2be6c:	f7ff fe80 	bl	2bb70 <nfsm_set_current_state_and_notify>
		nrf_cloud_disconnect();
   2be70:	f7ff ff7a 	bl	2bd68 <nrf_cloud_disconnect>
   2be74:	e7bb      	b.n	2bdee <nrf_cloud_run+0x5e>
		if (ret < 0) {
   2be76:	2a00      	cmp	r2, #0
   2be78:	da05      	bge.n	2be86 <nrf_cloud_run+0xf6>
			LOG_ERR("poll() returned an error: %d", ret);
   2be7a:	2145      	movs	r1, #69	; 0x45
   2be7c:	480b      	ldr	r0, [pc, #44]	; (2beac <nrf_cloud_run+0x11c>)
   2be7e:	f011 f9bc 	bl	3d1fa <z_log_minimal_printk>
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2be82:	2303      	movs	r3, #3
   2be84:	e7db      	b.n	2be3e <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2be86:	0699      	lsls	r1, r3, #26
   2be88:	d503      	bpl.n	2be92 <nrf_cloud_run+0x102>
			if (nfsm_get_disconnect_requested()) {
   2be8a:	f7ff fead 	bl	2bbe8 <nfsm_get_disconnect_requested>
			evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   2be8e:	2302      	movs	r3, #2
   2be90:	e7d5      	b.n	2be3e <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2be92:	06da      	lsls	r2, r3, #27
   2be94:	d4d2      	bmi.n	2be3c <nrf_cloud_run+0xac>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2be96:	071b      	lsls	r3, r3, #28
   2be98:	d5c1      	bpl.n	2be1e <nrf_cloud_run+0x8e>
   2be9a:	e7f2      	b.n	2be82 <nrf_cloud_run+0xf2>
   2be9c:	20015030 	.word	0x20015030
   2bea0:	2001956c 	.word	0x2001956c
   2bea4:	20019570 	.word	0x20019570
   2bea8:	20019574 	.word	0x20019574
   2beac:	00048c75 	.word	0x00048c75
   2beb0:	2001c924 	.word	0x2001c924

0002beb4 <nrf_cloud_send>:
{
   2beb4:	b510      	push	{r4, lr}
   2beb6:	b086      	sub	sp, #24
	if (!msg) {
   2beb8:	2800      	cmp	r0, #0
   2beba:	d044      	beq.n	2bf46 <nrf_cloud_send+0x92>
	switch (msg->topic_type) {
   2bebc:	7a03      	ldrb	r3, [r0, #8]
   2bebe:	2b02      	cmp	r3, #2
   2bec0:	d01f      	beq.n	2bf02 <nrf_cloud_send+0x4e>
   2bec2:	2b03      	cmp	r3, #3
   2bec4:	d042      	beq.n	2bf4c <nrf_cloud_send+0x98>
   2bec6:	2b01      	cmp	r3, #1
   2bec8:	d15d      	bne.n	2bf86 <nrf_cloud_send+0xd2>
		if (current_state < STATE_CC_CONNECTED) {
   2beca:	4a32      	ldr	r2, [pc, #200]	; (2bf94 <nrf_cloud_send+0xe0>)
   2becc:	7812      	ldrb	r2, [r2, #0]
   2bece:	2a03      	cmp	r2, #3
   2bed0:	d956      	bls.n	2bf80 <nrf_cloud_send+0xcc>
		const struct nct_cc_data shadow_data = {
   2bed2:	2200      	movs	r2, #0
   2bed4:	9205      	str	r2, [sp, #20]
   2bed6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   2beda:	6802      	ldr	r2, [r0, #0]
   2bedc:	f88d 3016 	strb.w	r3, [sp, #22]
   2bee0:	9201      	str	r2, [sp, #4]
   2bee2:	6842      	ldr	r2, [r0, #4]
   2bee4:	9202      	str	r2, [sp, #8]
   2bee6:	68c2      	ldr	r2, [r0, #12]
		err = nct_cc_send(&shadow_data);
   2bee8:	a801      	add	r0, sp, #4
		const struct nct_cc_data shadow_data = {
   2beea:	f8ad 2014 	strh.w	r2, [sp, #20]
		err = nct_cc_send(&shadow_data);
   2beee:	f000 fee9 	bl	2ccc4 <nct_cc_send>
		if (err) {
   2bef2:	4604      	mov	r4, r0
   2bef4:	b1d0      	cbz	r0, 2bf2c <nrf_cloud_send+0x78>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2bef6:	2145      	movs	r1, #69	; 0x45
   2bef8:	4602      	mov	r2, r0
   2befa:	4827      	ldr	r0, [pc, #156]	; (2bf98 <nrf_cloud_send+0xe4>)
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2befc:	f011 f97d 	bl	3d1fa <z_log_minimal_printk>
			return err;
   2bf00:	e014      	b.n	2bf2c <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2bf02:	4b24      	ldr	r3, [pc, #144]	; (2bf94 <nrf_cloud_send+0xe0>)
   2bf04:	781b      	ldrb	r3, [r3, #0]
   2bf06:	2b09      	cmp	r3, #9
   2bf08:	d13a      	bne.n	2bf80 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2bf0a:	2300      	movs	r3, #0
   2bf0c:	9305      	str	r3, [sp, #20]
   2bf0e:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2bf12:	6803      	ldr	r3, [r0, #0]
   2bf14:	9301      	str	r3, [sp, #4]
   2bf16:	6843      	ldr	r3, [r0, #4]
   2bf18:	9302      	str	r3, [sp, #8]
   2bf1a:	68c3      	ldr	r3, [r0, #12]
   2bf1c:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (msg->qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2bf20:	7a43      	ldrb	r3, [r0, #9]
   2bf22:	b933      	cbnz	r3, 2bf32 <nrf_cloud_send+0x7e>
			err = nct_dc_stream(&buf);
   2bf24:	a801      	add	r0, sp, #4
   2bf26:	f013 ffab 	bl	3fe80 <nct_dc_stream>
	return 0;
   2bf2a:	2400      	movs	r4, #0
}
   2bf2c:	4620      	mov	r0, r4
   2bf2e:	b006      	add	sp, #24
   2bf30:	bd10      	pop	{r4, pc}
		} else if (msg->qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2bf32:	2b01      	cmp	r3, #1
   2bf34:	d103      	bne.n	2bf3e <nrf_cloud_send+0x8a>
			err = nct_dc_send(&buf);
   2bf36:	a801      	add	r0, sp, #4
   2bf38:	f013 ff9f 	bl	3fe7a <nct_dc_send>
   2bf3c:	e7f5      	b.n	2bf2a <nrf_cloud_send+0x76>
			LOG_ERR("Unsupported QoS setting");
   2bf3e:	2145      	movs	r1, #69	; 0x45
   2bf40:	4816      	ldr	r0, [pc, #88]	; (2bf9c <nrf_cloud_send+0xe8>)
   2bf42:	f011 f95a 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2bf46:	f06f 0415 	mvn.w	r4, #21
   2bf4a:	e7ef      	b.n	2bf2c <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2bf4c:	4b11      	ldr	r3, [pc, #68]	; (2bf94 <nrf_cloud_send+0xe0>)
   2bf4e:	781b      	ldrb	r3, [r3, #0]
   2bf50:	2b09      	cmp	r3, #9
   2bf52:	d115      	bne.n	2bf80 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2bf54:	2300      	movs	r3, #0
   2bf56:	9305      	str	r3, [sp, #20]
   2bf58:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2bf5c:	6803      	ldr	r3, [r0, #0]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2bf5e:	7a41      	ldrb	r1, [r0, #9]
		const struct nct_dc_data buf = {
   2bf60:	9301      	str	r3, [sp, #4]
   2bf62:	6843      	ldr	r3, [r0, #4]
   2bf64:	9302      	str	r3, [sp, #8]
   2bf66:	68c3      	ldr	r3, [r0, #12]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2bf68:	a801      	add	r0, sp, #4
		const struct nct_dc_data buf = {
   2bf6a:	f8ad 3014 	strh.w	r3, [sp, #20]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2bf6e:	f000 ff67 	bl	2ce40 <nct_dc_bulk_send>
		if (err) {
   2bf72:	4604      	mov	r4, r0
   2bf74:	2800      	cmp	r0, #0
   2bf76:	d0d9      	beq.n	2bf2c <nrf_cloud_send+0x78>
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2bf78:	4602      	mov	r2, r0
   2bf7a:	2145      	movs	r1, #69	; 0x45
   2bf7c:	4808      	ldr	r0, [pc, #32]	; (2bfa0 <nrf_cloud_send+0xec>)
   2bf7e:	e7bd      	b.n	2befc <nrf_cloud_send+0x48>
			return -EACCES;
   2bf80:	f06f 040c 	mvn.w	r4, #12
   2bf84:	e7d2      	b.n	2bf2c <nrf_cloud_send+0x78>
		LOG_ERR("Unknown topic type");
   2bf86:	2145      	movs	r1, #69	; 0x45
   2bf88:	4806      	ldr	r0, [pc, #24]	; (2bfa4 <nrf_cloud_send+0xf0>)
   2bf8a:	f011 f936 	bl	3d1fa <z_log_minimal_printk>
		return -ENODATA;
   2bf8e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2bf92:	e7cb      	b.n	2bf2c <nrf_cloud_send+0x78>
   2bf94:	2001c924 	.word	0x2001c924
   2bf98:	00048c97 	.word	0x00048c97
   2bf9c:	00048cbb 	.word	0x00048cbb
   2bfa0:	00048cd8 	.word	0x00048cd8
   2bfa4:	00048d00 	.word	0x00048d00

0002bfa8 <nrf_cloud_shadow_device_status_update>:
{
   2bfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2bfaa:	4604      	mov	r4, r0
	struct nrf_cloud_tx_data tx_data = {
   2bfac:	2210      	movs	r2, #16
   2bfae:	2100      	movs	r1, #0
   2bfb0:	4668      	mov	r0, sp
   2bfb2:	f015 fdd5 	bl	41b60 <memset>
   2bfb6:	f240 1301 	movw	r3, #257	; 0x101
   2bfba:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (current_state != STATE_DC_CONNECTED) {
   2bfbe:	4b0c      	ldr	r3, [pc, #48]	; (2bff0 <nrf_cloud_shadow_device_status_update+0x48>)
   2bfc0:	781b      	ldrb	r3, [r3, #0]
   2bfc2:	2b09      	cmp	r3, #9
   2bfc4:	d110      	bne.n	2bfe8 <nrf_cloud_shadow_device_status_update+0x40>
	err = nrf_cloud_device_status_encode(dev_status, &tx_data.data, true);
   2bfc6:	4620      	mov	r0, r4
   2bfc8:	2201      	movs	r2, #1
   2bfca:	4669      	mov	r1, sp
   2bfcc:	f7ff f95a 	bl	2b284 <nrf_cloud_device_status_encode>
	if (err) {
   2bfd0:	4604      	mov	r4, r0
   2bfd2:	b930      	cbnz	r0, 2bfe2 <nrf_cloud_shadow_device_status_update+0x3a>
	err = nrf_cloud_send(&tx_data);
   2bfd4:	4668      	mov	r0, sp
   2bfd6:	f7ff ff6d 	bl	2beb4 <nrf_cloud_send>
   2bfda:	4604      	mov	r4, r0
	nrf_cloud_device_status_free(&tx_data.data);
   2bfdc:	4668      	mov	r0, sp
   2bfde:	f013 fefe 	bl	3fdde <nrf_cloud_device_status_free>
}
   2bfe2:	4620      	mov	r0, r4
   2bfe4:	b004      	add	sp, #16
   2bfe6:	bd10      	pop	{r4, pc}
		return -EACCES;
   2bfe8:	f06f 040c 	mvn.w	r4, #12
   2bfec:	e7f9      	b.n	2bfe2 <nrf_cloud_shadow_device_status_update+0x3a>
   2bfee:	bf00      	nop
   2bff0:	2001c924 	.word	0x2001c924

0002bff4 <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2bff4:	4b01      	ldr	r3, [pc, #4]	; (2bffc <nct_input+0x8>)
   2bff6:	7819      	ldrb	r1, [r3, #0]
   2bff8:	f000 b99e 	b.w	2c338 <nfsm_handle_incoming_event>
   2bffc:	2001c924 	.word	0x2001c924

0002c000 <nct_apply_update>:
	app_event_handler(evt);
   2c000:	4b01      	ldr	r3, [pc, #4]	; (2c008 <nct_apply_update+0x8>)
   2c002:	681b      	ldr	r3, [r3, #0]
   2c004:	4718      	bx	r3
   2c006:	bf00      	nop
   2c008:	20019568 	.word	0x20019568

0002c00c <dc_rx_data_handler>:
#endif
	return -EFTYPE;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2c00c:	b570      	push	{r4, r5, r6, lr}
	struct nrf_cloud_evt cloud_evt = {
   2c00e:	2306      	movs	r3, #6
   2c010:	2600      	movs	r6, #0
{
   2c012:	b08e      	sub	sp, #56	; 0x38
	struct nrf_cloud_evt cloud_evt = {
   2c014:	e9cd 6600 	strd	r6, r6, [sp]
   2c018:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   2c01c:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   2c01e:	aa02      	add	r2, sp, #8
{
   2c020:	4604      	mov	r4, r0
	struct nrf_cloud_evt cloud_evt = {
   2c022:	e893 0003 	ldmia.w	r3, {r0, r1}
   2c026:	e882 0003 	stmia.w	r2, {r0, r1}
   2c02a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2c02e:	aa04      	add	r2, sp, #16
   2c030:	e882 0003 	stmia.w	r2, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2c034:	6858      	ldr	r0, [r3, #4]
   2c036:	f7ff fcc9 	bl	2b9cc <nrf_cloud_detect_disconnection_request>

	/* All data is forwared to the app... unless a callback is registered */
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2c03a:	6863      	ldr	r3, [r4, #4]
	if (cell_pos_cb) {
   2c03c:	4c10      	ldr	r4, [pc, #64]	; (2c080 <dc_rx_data_handler+0x74>)
	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2c03e:	4605      	mov	r5, r0
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2c040:	6858      	ldr	r0, [r3, #4]
	if (cell_pos_cb) {
   2c042:	6823      	ldr	r3, [r4, #0]
   2c044:	b15b      	cbz	r3, 2c05e <dc_rx_data_handler+0x52>
		int ret = nrf_cloud_cell_pos_process(rx_buf, &res);
   2c046:	a906      	add	r1, sp, #24
   2c048:	f003 fac0 	bl	2f5cc <nrf_cloud_cell_pos_process>
		if (ret <= 0) {
   2c04c:	42b0      	cmp	r0, r6
   2c04e:	dc06      	bgt.n	2c05e <dc_rx_data_handler+0x52>
			cell_pos_cb(&res);
   2c050:	6823      	ldr	r3, [r4, #0]
   2c052:	a806      	add	r0, sp, #24
   2c054:	4798      	blx	r3
	cell_pos_cb = cb;
   2c056:	6026      	str	r6, [r4, #0]
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
		}
	}

	return 0;
}
   2c058:	2000      	movs	r0, #0
   2c05a:	b00e      	add	sp, #56	; 0x38
   2c05c:	bd70      	pop	{r4, r5, r6, pc}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2c05e:	f7ff fd81 	bl	2bb64 <nfsm_get_current_state>
   2c062:	4669      	mov	r1, sp
   2c064:	f7ff fd84 	bl	2bb70 <nfsm_set_current_state_and_notify>
	if (discon_req) {
   2c068:	2d00      	cmp	r5, #0
   2c06a:	d0f5      	beq.n	2c058 <dc_rx_data_handler+0x4c>
		int err = nrf_cloud_disconnect();
   2c06c:	f7ff fe7c 	bl	2bd68 <nrf_cloud_disconnect>
		if (err < 0) {
   2c070:	1e02      	subs	r2, r0, #0
   2c072:	daf1      	bge.n	2c058 <dc_rx_data_handler+0x4c>
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
   2c074:	2145      	movs	r1, #69	; 0x45
   2c076:	4803      	ldr	r0, [pc, #12]	; (2c084 <dc_rx_data_handler+0x78>)
   2c078:	f011 f8bf 	bl	3d1fa <z_log_minimal_printk>
   2c07c:	e7ec      	b.n	2c058 <dc_rx_data_handler+0x4c>
   2c07e:	bf00      	nop
   2c080:	2001957c 	.word	0x2001957c
   2c084:	00048d38 	.word	0x00048d38

0002c088 <cc_connection_handler>:
{
   2c088:	b510      	push	{r4, lr}
   2c08a:	4604      	mov	r4, r0
   2c08c:	b086      	sub	sp, #24
	const struct nrf_cloud_evt evt = {
   2c08e:	2100      	movs	r1, #0
   2c090:	2218      	movs	r2, #24
   2c092:	4668      	mov	r0, sp
   2c094:	f015 fd64 	bl	41b60 <memset>
   2c098:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   2c09a:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2c09c:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2c0a0:	b151      	cbz	r1, 2c0b8 <cc_connection_handler+0x30>
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2c0a2:	f7ff fd5f 	bl	2bb64 <nfsm_get_current_state>
   2c0a6:	4669      	mov	r1, sp
   2c0a8:	f7ff fd62 	bl	2bb70 <nfsm_set_current_state_and_notify>
		return 0;
   2c0ac:	2400      	movs	r4, #0
		(void)nct_dc_disconnect();
   2c0ae:	f000 fef5 	bl	2ce9c <nct_dc_disconnect>
}
   2c0b2:	4620      	mov	r0, r4
   2c0b4:	b006      	add	sp, #24
   2c0b6:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2c0b8:	2004      	movs	r0, #4
   2c0ba:	f7ff fd59 	bl	2bb70 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2c0be:	4806      	ldr	r0, [pc, #24]	; (2c0d8 <cc_connection_handler+0x50>)
   2c0c0:	f000 fe00 	bl	2ccc4 <nct_cc_send>
	if (err) {
   2c0c4:	4604      	mov	r4, r0
   2c0c6:	b120      	cbz	r0, 2c0d2 <cc_connection_handler+0x4a>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2c0c8:	4669      	mov	r1, sp
   2c0ca:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2c0cc:	f7ff fd50 	bl	2bb70 <nfsm_set_current_state_and_notify>
	return 0;
   2c0d0:	e7ef      	b.n	2c0b2 <cc_connection_handler+0x2a>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2c0d2:	4601      	mov	r1, r0
   2c0d4:	2005      	movs	r0, #5
   2c0d6:	e7f9      	b.n	2c0cc <cc_connection_handler+0x44>
   2c0d8:	00043730 	.word	0x00043730

0002c0dc <state_ua_pin_wait>:
{
   2c0dc:	b510      	push	{r4, lr}
   2c0de:	b08c      	sub	sp, #48	; 0x30
	struct nct_cc_data msg = {
   2c0e0:	2214      	movs	r2, #20
   2c0e2:	2100      	movs	r1, #0
   2c0e4:	a801      	add	r0, sp, #4
   2c0e6:	f015 fd3b 	bl	41b60 <memset>
   2c0ea:	4b17      	ldr	r3, [pc, #92]	; (2c148 <state_ua_pin_wait+0x6c>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2c0ec:	2006      	movs	r0, #6
   2c0ee:	a901      	add	r1, sp, #4
	struct nct_cc_data msg = {
   2c0f0:	9305      	str	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2c0f2:	f7fe fd87 	bl	2ac04 <nrf_cloud_encode_state>
	if (err) {
   2c0f6:	4604      	mov	r4, r0
   2c0f8:	b138      	cbz	r0, 2c10a <state_ua_pin_wait+0x2e>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2c0fa:	4602      	mov	r2, r0
   2c0fc:	2145      	movs	r1, #69	; 0x45
   2c0fe:	4813      	ldr	r0, [pc, #76]	; (2c14c <state_ua_pin_wait+0x70>)
   2c100:	f011 f87b 	bl	3d1fa <z_log_minimal_printk>
}
   2c104:	4620      	mov	r0, r4
   2c106:	b00c      	add	sp, #48	; 0x30
   2c108:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2c10a:	a801      	add	r0, sp, #4
   2c10c:	f000 fdda 	bl	2ccc4 <nct_cc_send>
	if (err) {
   2c110:	4604      	mov	r4, r0
   2c112:	b140      	cbz	r0, 2c126 <state_ua_pin_wait+0x4a>
		LOG_ERR("nct_cc_send failed %d", err);
   2c114:	4602      	mov	r2, r0
   2c116:	2145      	movs	r1, #69	; 0x45
   2c118:	480d      	ldr	r0, [pc, #52]	; (2c150 <state_ua_pin_wait+0x74>)
   2c11a:	f011 f86e 	bl	3d1fa <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2c11e:	9802      	ldr	r0, [sp, #8]
   2c120:	f015 fc6d 	bl	419fe <k_free>
		return err;
   2c124:	e7ee      	b.n	2c104 <state_ua_pin_wait+0x28>
	nrf_cloud_free((void *)msg.data.ptr);
   2c126:	9802      	ldr	r0, [sp, #8]
   2c128:	f015 fc69 	bl	419fe <k_free>
	struct nrf_cloud_evt evt = {
   2c12c:	2218      	movs	r2, #24
   2c12e:	4621      	mov	r1, r4
   2c130:	eb0d 0002 	add.w	r0, sp, r2
   2c134:	f015 fd14 	bl	41b60 <memset>
   2c138:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2c13a:	2006      	movs	r0, #6
   2c13c:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   2c13e:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2c142:	f7ff fd15 	bl	2bb70 <nfsm_set_current_state_and_notify>
	return 0;
   2c146:	e7dd      	b.n	2c104 <state_ua_pin_wait+0x28>
   2c148:	0001012c 	.word	0x0001012c
   2c14c:	00048d72 	.word	0x00048d72
   2c150:	00048d98 	.word	0x00048d98

0002c154 <cc_rx_data_handler>:
{
   2c154:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool config_found = false;
   2c156:	2400      	movs	r4, #0
{
   2c158:	b097      	sub	sp, #92	; 0x5c
   2c15a:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2c15c:	6847      	ldr	r7, [r0, #4]
	bool config_found = false;
   2c15e:	f88d 400b 	strb.w	r4, [sp, #11]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2c162:	f7ff fcff 	bl	2bb64 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2c166:	2214      	movs	r2, #20
   2c168:	4621      	mov	r1, r4
	const enum nfsm_state current_state = nfsm_get_current_state();
   2c16a:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   2c16c:	a80b      	add	r0, sp, #44	; 0x2c
   2c16e:	f015 fcf7 	bl	41b60 <memset>
   2c172:	4b64      	ldr	r3, [pc, #400]	; (2c304 <cc_rx_data_handler+0x1b0>)
	struct nrf_cloud_evt cloud_evt = {
   2c174:	2218      	movs	r2, #24
   2c176:	4621      	mov	r1, r4
   2c178:	a810      	add	r0, sp, #64	; 0x40
	struct nct_cc_data msg = {
   2c17a:	930f      	str	r3, [sp, #60]	; 0x3c
	struct nrf_cloud_evt cloud_evt = {
   2c17c:	f015 fcf0 	bl	41b60 <memset>
   2c180:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2c182:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   2c184:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (evt->param.cc == NULL) {
   2c188:	b160      	cbz	r0, 2c1a4 <cc_rx_data_handler+0x50>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2c18a:	f10d 020b 	add.w	r2, sp, #11
   2c18e:	a90b      	add	r1, sp, #44	; 0x2c
   2c190:	f7fe fc9e 	bl	2aad0 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2c194:	4602      	mov	r2, r0
   2c196:	b1b8      	cbz	r0, 2c1c8 <cc_rx_data_handler+0x74>
   2c198:	1cc3      	adds	r3, r0, #3
   2c19a:	d015      	beq.n	2c1c8 <cc_rx_data_handler+0x74>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2c19c:	2145      	movs	r1, #69	; 0x45
   2c19e:	485a      	ldr	r0, [pc, #360]	; (2c308 <cc_rx_data_handler+0x1b4>)
   2c1a0:	f011 f82b 	bl	3d1fa <z_log_minimal_printk>
	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2c1a4:	4638      	mov	r0, r7
   2c1a6:	f10d 010a 	add.w	r1, sp, #10
   2c1aa:	f7fe fbe7 	bl	2a97c <nrf_cloud_decode_requested_state>
	if (err) {
   2c1ae:	4604      	mov	r4, r0
   2c1b0:	b370      	cbz	r0, 2c210 <cc_rx_data_handler+0xbc>
		if (!config_found) {
   2c1b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2c1b6:	2b00      	cmp	r3, #0
   2c1b8:	f040 80a1 	bne.w	2c2fe <cc_rx_data_handler+0x1aa>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2c1bc:	2145      	movs	r1, #69	; 0x45
   2c1be:	4602      	mov	r2, r0
   2c1c0:	4852      	ldr	r0, [pc, #328]	; (2c30c <cc_rx_data_handler+0x1b8>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2c1c2:	f011 f81a 	bl	3d1fa <z_log_minimal_printk>
		return err;
   2c1c6:	e055      	b.n	2c274 <cc_rx_data_handler+0x120>
	if (*config_found == false) {
   2c1c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2c1cc:	2b00      	cmp	r3, #0
   2c1ce:	d0e9      	beq.n	2c1a4 <cc_rx_data_handler+0x50>
	if (msg.data.ptr) {
   2c1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c1d2:	b163      	cbz	r3, 2c1ee <cc_rx_data_handler+0x9a>
		err = nct_cc_send(&msg);
   2c1d4:	a80b      	add	r0, sp, #44	; 0x2c
   2c1d6:	f000 fd75 	bl	2ccc4 <nct_cc_send>
   2c1da:	4604      	mov	r4, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2c1dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c1de:	f015 fc0e 	bl	419fe <k_free>
		if (err) {
   2c1e2:	b124      	cbz	r4, 2c1ee <cc_rx_data_handler+0x9a>
			LOG_ERR("nct_cc_send failed %d", err);
   2c1e4:	4622      	mov	r2, r4
   2c1e6:	2145      	movs	r1, #69	; 0x45
   2c1e8:	4849      	ldr	r0, [pc, #292]	; (2c310 <cc_rx_data_handler+0x1bc>)
   2c1ea:	f011 f806 	bl	3d1fa <z_log_minimal_printk>
	cloud_evt.data = evt->param.cc->data;
   2c1ee:	6873      	ldr	r3, [r6, #4]
   2c1f0:	aa12      	add	r2, sp, #72	; 0x48
   2c1f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   2c1f6:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2c1fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2c1fe:	ab16      	add	r3, sp, #88	; 0x58
   2c200:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2c204:	f7ff fcae 	bl	2bb64 <nfsm_get_current_state>
   2c208:	a910      	add	r1, sp, #64	; 0x40
   2c20a:	f7ff fcb1 	bl	2bb70 <nfsm_set_current_state_and_notify>
	return err;
   2c20e:	e7c9      	b.n	2c1a4 <cc_rx_data_handler+0x50>
	switch (current_state) {
   2c210:	2d07      	cmp	r5, #7
   2c212:	d82b      	bhi.n	2c26c <cc_rx_data_handler+0x118>
   2c214:	2d03      	cmp	r5, #3
   2c216:	d92d      	bls.n	2c274 <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2c218:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2c21c:	2b07      	cmp	r3, #7
   2c21e:	d161      	bne.n	2c2e4 <cc_rx_data_handler+0x190>
			if (!config_found) {
   2c220:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2c224:	b9a2      	cbnz	r2, 2c250 <cc_rx_data_handler+0xfc>
				struct nrf_cloud_evt cloud_evt = {
   2c226:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   2c22a:	2206      	movs	r2, #6
					.data = nct_evt->param.cc->data,
   2c22c:	6873      	ldr	r3, [r6, #4]
				struct nrf_cloud_evt cloud_evt = {
   2c22e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   2c232:	aa12      	add	r2, sp, #72	; 0x48
   2c234:	e893 0003 	ldmia.w	r3, {r0, r1}
   2c238:	e882 0003 	stmia.w	r2, {r0, r1}
   2c23c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2c240:	ab16      	add	r3, sp, #88	; 0x58
   2c242:	e903 0003 	stmdb	r3, {r0, r1}
				nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2c246:	f7ff fc8d 	bl	2bb64 <nfsm_get_current_state>
   2c24a:	a910      	add	r1, sp, #64	; 0x40
   2c24c:	f7ff fc90 	bl	2bb70 <nfsm_set_current_state_and_notify>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &bulk, &endpoint);
   2c250:	ad09      	add	r5, sp, #36	; 0x24
   2c252:	6870      	ldr	r0, [r6, #4]
   2c254:	9500      	str	r5, [sp, #0]
   2c256:	ab07      	add	r3, sp, #28
   2c258:	aa03      	add	r2, sp, #12
   2c25a:	a905      	add	r1, sp, #20
   2c25c:	f7fe fd8e 	bl	2ad7c <nrf_cloud_decode_data_endpoint>
	if (err) {
   2c260:	4604      	mov	r4, r0
   2c262:	b150      	cbz	r0, 2c27a <cc_rx_data_handler+0x126>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2c264:	4602      	mov	r2, r0
   2c266:	2145      	movs	r1, #69	; 0x45
   2c268:	482a      	ldr	r0, [pc, #168]	; (2c314 <cc_rx_data_handler+0x1c0>)
   2c26a:	e7aa      	b.n	2c1c2 <cc_rx_data_handler+0x6e>
	switch (current_state) {
   2c26c:	3d08      	subs	r5, #8
   2c26e:	b2ed      	uxtb	r5, r5
   2c270:	2d01      	cmp	r5, #1
   2c272:	d93d      	bls.n	2c2f0 <cc_rx_data_handler+0x19c>
}
   2c274:	4620      	mov	r0, r4
   2c276:	b017      	add	sp, #92	; 0x5c
   2c278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &bulk, &endpoint);
   2c27a:	462b      	mov	r3, r5
   2c27c:	aa07      	add	r2, sp, #28
   2c27e:	a903      	add	r1, sp, #12
   2c280:	a805      	add	r0, sp, #20
   2c282:	f000 fd69 	bl	2cd58 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2c286:	4621      	mov	r1, r4
   2c288:	2214      	movs	r2, #20
   2c28a:	a80b      	add	r0, sp, #44	; 0x2c
   2c28c:	f015 fc68 	bl	41b60 <memset>
   2c290:	4b21      	ldr	r3, [pc, #132]	; (2c318 <cc_rx_data_handler+0x1c4>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2c292:	2007      	movs	r0, #7
   2c294:	a90b      	add	r1, sp, #44	; 0x2c
	struct nct_cc_data msg = {
   2c296:	930f      	str	r3, [sp, #60]	; 0x3c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2c298:	f7fe fcb4 	bl	2ac04 <nrf_cloud_encode_state>
	if (err) {
   2c29c:	4604      	mov	r4, r0
   2c29e:	b118      	cbz	r0, 2c2a8 <cc_rx_data_handler+0x154>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2c2a0:	4602      	mov	r2, r0
   2c2a2:	2145      	movs	r1, #69	; 0x45
   2c2a4:	481d      	ldr	r0, [pc, #116]	; (2c31c <cc_rx_data_handler+0x1c8>)
   2c2a6:	e78c      	b.n	2c1c2 <cc_rx_data_handler+0x6e>
	err = nct_cc_send(&msg);
   2c2a8:	a80b      	add	r0, sp, #44	; 0x2c
   2c2aa:	f000 fd0b 	bl	2ccc4 <nct_cc_send>
	if (err) {
   2c2ae:	4604      	mov	r4, r0
   2c2b0:	b140      	cbz	r0, 2c2c4 <cc_rx_data_handler+0x170>
		LOG_ERR("nct_cc_send failed %d", err);
   2c2b2:	4602      	mov	r2, r0
   2c2b4:	2145      	movs	r1, #69	; 0x45
   2c2b6:	4816      	ldr	r0, [pc, #88]	; (2c310 <cc_rx_data_handler+0x1bc>)
   2c2b8:	f010 ff9f 	bl	3d1fa <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2c2bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c2be:	f015 fb9e 	bl	419fe <k_free>
		return err;
   2c2c2:	e7d7      	b.n	2c274 <cc_rx_data_handler+0x120>
	nrf_cloud_free((void *)msg.data.ptr);
   2c2c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c2c6:	f015 fb9a 	bl	419fe <k_free>
	struct nrf_cloud_evt evt = {
   2c2ca:	4621      	mov	r1, r4
   2c2cc:	2218      	movs	r2, #24
   2c2ce:	a810      	add	r0, sp, #64	; 0x40
   2c2d0:	f015 fc46 	bl	41b60 <memset>
   2c2d4:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2c2d6:	2007      	movs	r0, #7
   2c2d8:	a910      	add	r1, sp, #64	; 0x40
	struct nrf_cloud_evt evt = {
   2c2da:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2c2de:	f7ff fc47 	bl	2bb70 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2c2e2:	e7c7      	b.n	2c274 <cc_rx_data_handler+0x120>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2c2e4:	2b06      	cmp	r3, #6
   2c2e6:	d1c5      	bne.n	2c274 <cc_rx_data_handler+0x120>
			return state_ua_pin_wait();
   2c2e8:	f7ff fef8 	bl	2c0dc <state_ua_pin_wait>
   2c2ec:	4604      	mov	r4, r0
   2c2ee:	e7c1      	b.n	2c274 <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_WAIT) {
   2c2f0:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2c2f4:	2b06      	cmp	r3, #6
   2c2f6:	d1bd      	bne.n	2c274 <cc_rx_data_handler+0x120>
			(void)nct_dc_disconnect();
   2c2f8:	f000 fdd0 	bl	2ce9c <nct_dc_disconnect>
   2c2fc:	e7f4      	b.n	2c2e8 <cc_rx_data_handler+0x194>
		return 0;
   2c2fe:	2400      	movs	r4, #0
   2c300:	e7b8      	b.n	2c274 <cc_rx_data_handler+0x120>
   2c302:	bf00      	nop
   2c304:	0001012c 	.word	0x0001012c
   2c308:	00048db3 	.word	0x00048db3
   2c30c:	00048de3 	.word	0x00048de3
   2c310:	00048d98 	.word	0x00048d98
   2c314:	00048e13 	.word	0x00048e13
   2c318:	0001012d 	.word	0x0001012d
   2c31c:	00048d72 	.word	0x00048d72

0002c320 <nfsm_set_cell_pos_response_cb>:
	cell_pos_cb = cb;
   2c320:	4b01      	ldr	r3, [pc, #4]	; (2c328 <nfsm_set_cell_pos_response_cb+0x8>)
   2c322:	6018      	str	r0, [r3, #0]
}
   2c324:	4770      	bx	lr
   2c326:	bf00      	nop
   2c328:	2001957c 	.word	0x2001957c

0002c32c <nfsm_init>:
	persistent_session = false;
   2c32c:	2000      	movs	r0, #0
   2c32e:	4b01      	ldr	r3, [pc, #4]	; (2c334 <nfsm_init+0x8>)
   2c330:	7018      	strb	r0, [r3, #0]
}
   2c332:	4770      	bx	lr
   2c334:	2001c925 	.word	0x2001c925

0002c338 <nfsm_handle_incoming_event>:
{
   2c338:	b570      	push	{r4, r5, r6, lr}
   2c33a:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2c33c:	4606      	mov	r6, r0
   2c33e:	b120      	cbz	r0, 2c34a <nfsm_handle_incoming_event+0x12>
   2c340:	7a03      	ldrb	r3, [r0, #8]
   2c342:	2b0a      	cmp	r3, #10
   2c344:	d801      	bhi.n	2c34a <nfsm_handle_incoming_event+0x12>
   2c346:	2909      	cmp	r1, #9
   2c348:	d90c      	bls.n	2c364 <nfsm_handle_incoming_event+0x2c>
		__ASSERT_NO_MSG(false);
   2c34a:	2280      	movs	r2, #128	; 0x80
   2c34c:	490e      	ldr	r1, [pc, #56]	; (2c388 <nfsm_handle_incoming_event+0x50>)
   2c34e:	480f      	ldr	r0, [pc, #60]	; (2c38c <nfsm_handle_incoming_event+0x54>)
   2c350:	f010 ff19 	bl	3d186 <assert_print>
   2c354:	2180      	movs	r1, #128	; 0x80
   2c356:	480c      	ldr	r0, [pc, #48]	; (2c388 <nfsm_handle_incoming_event+0x50>)
   2c358:	f010 ff0e 	bl	3d178 <assert_post_action>
		return -EINVAL;
   2c35c:	f06f 0415 	mvn.w	r4, #21
}
   2c360:	4620      	mov	r0, r4
   2c362:	bd70      	pop	{r4, r5, r6, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2c364:	4a0a      	ldr	r2, [pc, #40]	; (2c390 <nfsm_handle_incoming_event+0x58>)
   2c366:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   2c36a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2c36e:	2c00      	cmp	r4, #0
   2c370:	d0f6      	beq.n	2c360 <nfsm_handle_incoming_event+0x28>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2c372:	47a0      	blx	r4
		if (err) {
   2c374:	4604      	mov	r4, r0
   2c376:	2800      	cmp	r0, #0
   2c378:	d0f2      	beq.n	2c360 <nfsm_handle_incoming_event+0x28>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2c37a:	462a      	mov	r2, r5
   2c37c:	2145      	movs	r1, #69	; 0x45
   2c37e:	7a33      	ldrb	r3, [r6, #8]
   2c380:	4804      	ldr	r0, [pc, #16]	; (2c394 <nfsm_handle_incoming_event+0x5c>)
   2c382:	f010 ff3a 	bl	3d1fa <z_log_minimal_printk>
   2c386:	e7eb      	b.n	2c360 <nfsm_handle_incoming_event+0x28>
   2c388:	00048e41 	.word	0x00048e41
   2c38c:	0004494f 	.word	0x0004494f
   2c390:	0004379c 	.word	0x0004379c
   2c394:	00048e7e 	.word	0x00048e7e

0002c398 <cc_tx_ack_handler>:
{
   2c398:	b510      	push	{r4, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2c39a:	8883      	ldrh	r3, [r0, #4]
{
   2c39c:	4604      	mov	r4, r0
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2c39e:	2bc8      	cmp	r3, #200	; 0xc8
{
   2c3a0:	b086      	sub	sp, #24
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2c3a2:	d105      	bne.n	2c3b0 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   2c3a4:	2100      	movs	r1, #0
   2c3a6:	2005      	movs	r0, #5
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2c3a8:	f7ff fbe2 	bl	2bb70 <nfsm_set_current_state_and_notify>
	return 0;
   2c3ac:	2400      	movs	r4, #0
   2c3ae:	e00e      	b.n	2c3ce <cc_tx_ack_handler+0x36>
	} else if (nct_evt->param.message_id == NCT_MSG_ID_PAIR_STATUS_REPORT) {
   2c3b0:	f240 122d 	movw	r2, #301	; 0x12d
   2c3b4:	4293      	cmp	r3, r2
   2c3b6:	d119      	bne.n	2c3ec <cc_tx_ack_handler+0x54>
		if (!persistent_session) {
   2c3b8:	4b1c      	ldr	r3, [pc, #112]	; (2c42c <cc_tx_ack_handler+0x94>)
   2c3ba:	781b      	ldrb	r3, [r3, #0]
   2c3bc:	b953      	cbnz	r3, 2c3d4 <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   2c3be:	f000 fd25 	bl	2ce0c <nct_dc_connect>
			if (err) {
   2c3c2:	4604      	mov	r4, r0
   2c3c4:	b918      	cbnz	r0, 2c3ce <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2c3c6:	4601      	mov	r1, r0
   2c3c8:	2008      	movs	r0, #8
   2c3ca:	f7ff fbd1 	bl	2bb70 <nfsm_set_current_state_and_notify>
}
   2c3ce:	4620      	mov	r0, r4
   2c3d0:	b006      	add	sp, #24
   2c3d2:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2c3d4:	2400      	movs	r4, #0
   2c3d6:	2302      	movs	r3, #2
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2c3d8:	2108      	movs	r1, #8
   2c3da:	4668      	mov	r0, sp
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2c3dc:	9402      	str	r4, [sp, #8]
   2c3de:	e9cd 4400 	strd	r4, r4, [sp]
   2c3e2:	f88d 3008 	strb.w	r3, [sp, #8]
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2c3e6:	f7ff ffa7 	bl	2c338 <nfsm_handle_incoming_event>
   2c3ea:	e7f0      	b.n	2c3ce <cc_tx_ack_handler+0x36>
	} else if (nct_evt->type == NCT_EVT_PINGRESP) {
   2c3ec:	7a02      	ldrb	r2, [r0, #8]
   2c3ee:	2a05      	cmp	r2, #5
   2c3f0:	d10b      	bne.n	2c40a <cc_tx_ack_handler+0x72>
		struct nrf_cloud_evt evt = {
   2c3f2:	2218      	movs	r2, #24
   2c3f4:	2100      	movs	r1, #0
   2c3f6:	4668      	mov	r0, sp
   2c3f8:	f015 fbb2 	bl	41b60 <memset>
   2c3fc:	2307      	movs	r3, #7
   2c3fe:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2c402:	f7ff fbaf 	bl	2bb64 <nfsm_get_current_state>
   2c406:	4669      	mov	r1, sp
   2c408:	e7ce      	b.n	2c3a8 <cc_tx_ack_handler+0x10>
	} else if (IS_VALID_USER_TAG(nct_evt->param.message_id)) {
   2c40a:	f242 720f 	movw	r2, #9999	; 0x270f
   2c40e:	4293      	cmp	r3, r2
   2c410:	d9cc      	bls.n	2c3ac <cc_tx_ack_handler+0x14>
		struct nrf_cloud_evt evt = {
   2c412:	2218      	movs	r2, #24
   2c414:	2100      	movs	r1, #0
   2c416:	4668      	mov	r0, sp
   2c418:	f015 fba2 	bl	41b60 <memset>
   2c41c:	2308      	movs	r3, #8
   2c41e:	f88d 3000 	strb.w	r3, [sp]
   2c422:	2302      	movs	r3, #2
			.data.ptr = &nct_evt->param.message_id
   2c424:	3404      	adds	r4, #4
		struct nrf_cloud_evt evt = {
   2c426:	9302      	str	r3, [sp, #8]
   2c428:	9403      	str	r4, [sp, #12]
   2c42a:	e7ea      	b.n	2c402 <cc_tx_ack_handler+0x6a>
   2c42c:	2001c925 	.word	0x2001c925

0002c430 <connection_handler>:
{
   2c430:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   2c432:	6804      	ldr	r4, [r0, #0]
{
   2c434:	4605      	mov	r5, r0
   2c436:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   2c438:	b164      	cbz	r4, 2c454 <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   2c43a:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   2c43c:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   2c43e:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2c442:	f7ff fb8f 	bl	2bb64 <nfsm_get_current_state>
   2c446:	a904      	add	r1, sp, #16
   2c448:	f7ff fb92 	bl	2bb70 <nfsm_set_current_state_and_notify>
		return 0;
   2c44c:	2400      	movs	r4, #0
}
   2c44e:	4620      	mov	r0, r4
   2c450:	b00a      	add	sp, #40	; 0x28
   2c452:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2c454:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   2c456:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2c458:	a904      	add	r1, sp, #16
   2c45a:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   2c45c:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2c45e:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2c462:	f7ff fb85 	bl	2bb70 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   2c466:	792b      	ldrb	r3, [r5, #4]
   2c468:	2b00      	cmp	r3, #0
   2c46a:	bf14      	ite	ne
   2c46c:	4632      	movne	r2, r6
   2c46e:	2200      	moveq	r2, #0
   2c470:	4b0b      	ldr	r3, [pc, #44]	; (2c4a0 <connection_handler+0x70>)
   2c472:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   2c474:	d109      	bne.n	2c48a <connection_handler+0x5a>
		err = nct_cc_connect();
   2c476:	f000 fc13 	bl	2cca0 <nct_cc_connect>
		if (err) {
   2c47a:	4604      	mov	r4, r0
   2c47c:	2800      	cmp	r0, #0
   2c47e:	d1e6      	bne.n	2c44e <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2c480:	4601      	mov	r1, r0
   2c482:	2003      	movs	r0, #3
   2c484:	f7ff fb74 	bl	2bb70 <nfsm_set_current_state_and_notify>
   2c488:	e7e1      	b.n	2c44e <connection_handler+0x1e>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2c48a:	2103      	movs	r1, #3
   2c48c:	a801      	add	r0, sp, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   2c48e:	9403      	str	r4, [sp, #12]
   2c490:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2c494:	f88d 600c 	strb.w	r6, [sp, #12]
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2c498:	f7ff ff4e 	bl	2c338 <nfsm_handle_incoming_event>
   2c49c:	e7d7      	b.n	2c44e <connection_handler+0x1e>
   2c49e:	bf00      	nop
   2c4a0:	2001c925 	.word	0x2001c925

0002c4a4 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2c4a4:	2200      	movs	r2, #0
   2c4a6:	4b05      	ldr	r3, [pc, #20]	; (2c4bc <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2c4a8:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2c4ac:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2c4b0:	e9c3 2235 	strd	r2, r2, [r3, #212]	; 0xd4

	nct.dc_bulk_endp.utf8 = NULL;
	nct.dc_bulk_endp.size = 0;
   2c4b4:	e9c3 2237 	strd	r2, r2, [r3, #220]	; 0xdc
}
   2c4b8:	4770      	bx	lr
   2c4ba:	bf00      	nop
   2c4bc:	20019588 	.word	0x20019588

0002c4c0 <get_message_id>:
	return nct.message_id;
}

static uint16_t get_message_id(const uint16_t requested_id)
{
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   2c4c0:	b968      	cbnz	r0, 2c4de <get_message_id+0x1e>
	if (nct.message_id < NCT_MSG_ID_INCREMENT_BEGIN ||
   2c4c2:	4b09      	ldr	r3, [pc, #36]	; (2c4e8 <get_message_id+0x28>)
   2c4c4:	f8b3 00e4 	ldrh.w	r0, [r3, #228]	; 0xe4
   2c4c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   2c4cc:	d308      	bcc.n	2c4e0 <get_message_id+0x20>
   2c4ce:	f242 720f 	movw	r2, #9999	; 0x270f
   2c4d2:	4290      	cmp	r0, r2
   2c4d4:	d004      	beq.n	2c4e0 <get_message_id+0x20>
		++nct.message_id;
   2c4d6:	3001      	adds	r0, #1
   2c4d8:	b280      	uxth	r0, r0
   2c4da:	f8a3 00e4 	strh.w	r0, [r3, #228]	; 0xe4
		return requested_id;
	}

	return get_next_message_id();
}
   2c4de:	4770      	bx	lr
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
   2c4e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2c4e4:	e7f9      	b.n	2c4da <get_message_id+0x1a>
   2c4e6:	bf00      	nop
   2c4e8:	20019588 	.word	0x20019588

0002c4ec <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   2c4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c4ee:	460d      	mov	r5, r1
   2c4f0:	4616      	mov	r6, r2
   2c4f2:	461f      	mov	r7, r3
	if (!key) {
   2c4f4:	4604      	mov	r4, r0
   2c4f6:	b1e8      	cbz	r0, 2c534 <nct_settings_set+0x48>

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   2c4f8:	4810      	ldr	r0, [pc, #64]	; (2c53c <nct_settings_set+0x50>)
   2c4fa:	f7f0 fea2 	bl	1d242 <strlen>
   2c4fe:	490f      	ldr	r1, [pc, #60]	; (2c53c <nct_settings_set+0x50>)
   2c500:	4602      	mov	r2, r0
   2c502:	4620      	mov	r0, r4
   2c504:	f015 fcff 	bl	41f06 <strncmp>
   2c508:	4604      	mov	r4, r0
   2c50a:	b120      	cbz	r0, 2c516 <nct_settings_set+0x2a>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   2c50c:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   2c510:	4620      	mov	r0, r4
   2c512:	b003      	add	sp, #12
   2c514:	bdf0      	pop	{r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   2c516:	2d04      	cmp	r5, #4
   2c518:	d1f8      	bne.n	2c50c <nct_settings_set+0x20>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   2c51a:	462a      	mov	r2, r5
   2c51c:	4638      	mov	r0, r7
   2c51e:	a901      	add	r1, sp, #4
   2c520:	47b0      	blx	r6
   2c522:	2804      	cmp	r0, #4
   2c524:	d1f2      	bne.n	2c50c <nct_settings_set+0x20>
			persistent_session = (bool)read_val;
   2c526:	9b01      	ldr	r3, [sp, #4]
   2c528:	4a05      	ldr	r2, [pc, #20]	; (2c540 <nct_settings_set+0x54>)
   2c52a:	3b00      	subs	r3, #0
   2c52c:	bf18      	it	ne
   2c52e:	2301      	movne	r3, #1
   2c530:	7013      	strb	r3, [r2, #0]
			return 0;
   2c532:	e7ed      	b.n	2c510 <nct_settings_set+0x24>
		return -EINVAL;
   2c534:	f06f 0415 	mvn.w	r4, #21
   2c538:	e7ea      	b.n	2c510 <nct_settings_set+0x24>
   2c53a:	bf00      	nop
   2c53c:	00048f57 	.word	0x00048f57
   2c540:	2001c927 	.word	0x2001c927

0002c544 <nrf_cloud_fota_cb_handler>:
}

#if defined(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   2c544:	b530      	push	{r4, r5, lr}
	switch (evt->id) {
   2c546:	7804      	ldrb	r4, [r0, #0]
{
   2c548:	4605      	mov	r5, r0
	switch (evt->id) {
   2c54a:	2c01      	cmp	r4, #1
{
   2c54c:	b089      	sub	sp, #36	; 0x24
	switch (evt->id) {
   2c54e:	d00b      	beq.n	2c568 <nrf_cloud_fota_cb_handler+0x24>
   2c550:	2c02      	cmp	r4, #2
   2c552:	d01d      	beq.n	2c590 <nrf_cloud_fota_cb_handler+0x4c>
   2c554:	b9d4      	cbnz	r4, 2c58c <nrf_cloud_fota_cb_handler+0x48>
	case NRF_CLOUD_FOTA_EVT_START: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
		struct nrf_cloud_evt cloud_evt = {
   2c556:	2218      	movs	r2, #24
   2c558:	4621      	mov	r1, r4
   2c55a:	a802      	add	r0, sp, #8
   2c55c:	f015 fb00 	bl	41b60 <memset>
   2c560:	230a      	movs	r3, #10
		nct_apply_update(&cloud_evt);
		break;
	}
	case NRF_CLOUD_FOTA_EVT_ERROR: {
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
		struct nrf_cloud_evt cloud_evt = {
   2c562:	f88d 3008 	strb.w	r3, [sp, #8]
   2c566:	e00e      	b.n	2c586 <nrf_cloud_fota_cb_handler+0x42>
		struct nrf_cloud_evt cloud_evt = {
   2c568:	2218      	movs	r2, #24
   2c56a:	2100      	movs	r1, #0
   2c56c:	a802      	add	r0, sp, #8
   2c56e:	f015 faf7 	bl	41b60 <memset>
   2c572:	230b      	movs	r3, #11
   2c574:	f88d 3008 	strb.w	r3, [sp, #8]
			fota_type = evt->type;
   2c578:	78ab      	ldrb	r3, [r5, #2]
   2c57a:	f88d 3007 	strb.w	r3, [sp, #7]
			cloud_evt.data.ptr = &fota_type;
   2c57e:	f10d 0307 	add.w	r3, sp, #7
			cloud_evt.data.len = sizeof(fota_type);
   2c582:	e9cd 4304 	strd	r4, r3, [sp, #16]
			.type = NRF_CLOUD_EVT_FOTA_ERROR
		};

		nct_apply_update(&cloud_evt);
   2c586:	a802      	add	r0, sp, #8
   2c588:	f7ff fd3a 	bl	2c000 <nct_apply_update>
	}
	default: {
		break;
	}
	}
}
   2c58c:	b009      	add	sp, #36	; 0x24
   2c58e:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   2c590:	2145      	movs	r1, #69	; 0x45
   2c592:	4805      	ldr	r0, [pc, #20]	; (2c5a8 <nrf_cloud_fota_cb_handler+0x64>)
   2c594:	f010 fe31 	bl	3d1fa <z_log_minimal_printk>
		struct nrf_cloud_evt cloud_evt = {
   2c598:	2218      	movs	r2, #24
   2c59a:	2100      	movs	r1, #0
   2c59c:	a802      	add	r0, sp, #8
   2c59e:	f015 fadf 	bl	41b60 <memset>
   2c5a2:	230c      	movs	r3, #12
   2c5a4:	e7dd      	b.n	2c562 <nrf_cloud_fota_cb_handler+0x1e>
   2c5a6:	bf00      	nop
   2c5a8:	00048eb5 	.word	0x00048eb5

0002c5ac <allocate_and_format_topic>:
{
   2c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const size_t client_sz = strlen(client_id_buf);
   2c5ae:	4f13      	ldr	r7, [pc, #76]	; (2c5fc <allocate_and_format_topic+0x50>)
{
   2c5b0:	4605      	mov	r5, r0
	const size_t client_sz = strlen(client_id_buf);
   2c5b2:	6838      	ldr	r0, [r7, #0]
{
   2c5b4:	460e      	mov	r6, r1
	const size_t client_sz = strlen(client_id_buf);
   2c5b6:	f7f0 fe44 	bl	1d242 <strlen>
   2c5ba:	4604      	mov	r4, r0
	topic_sz = client_sz + strlen(topic_template) - 1;
   2c5bc:	4630      	mov	r0, r6
   2c5be:	f7f0 fe40 	bl	1d242 <strlen>
   2c5c2:	4404      	add	r4, r0
   2c5c4:	3c01      	subs	r4, #1
	*topic_buf = nrf_cloud_calloc(topic_sz, 1);
   2c5c6:	2101      	movs	r1, #1
   2c5c8:	4620      	mov	r0, r4
   2c5ca:	f015 fa23 	bl	41a14 <k_calloc>
   2c5ce:	6028      	str	r0, [r5, #0]
	if (!*topic_buf) {
   2c5d0:	b170      	cbz	r0, 2c5f0 <allocate_and_format_topic+0x44>
	ret = snprintk(*topic_buf, topic_sz,
   2c5d2:	4632      	mov	r2, r6
   2c5d4:	4621      	mov	r1, r4
   2c5d6:	683b      	ldr	r3, [r7, #0]
   2c5d8:	f010 fbff 	bl	3cdda <snprintk>
	if (ret <= 0 || ret >= topic_sz) {
   2c5dc:	2800      	cmp	r0, #0
   2c5de:	dd01      	ble.n	2c5e4 <allocate_and_format_topic+0x38>
   2c5e0:	42a0      	cmp	r0, r4
   2c5e2:	d308      	bcc.n	2c5f6 <allocate_and_format_topic+0x4a>
		nrf_cloud_free(*topic_buf);
   2c5e4:	6828      	ldr	r0, [r5, #0]
   2c5e6:	f015 fa0a 	bl	419fe <k_free>
		return -EIO;
   2c5ea:	f06f 0004 	mvn.w	r0, #4
}
   2c5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   2c5f0:	f06f 000b 	mvn.w	r0, #11
   2c5f4:	e7fb      	b.n	2c5ee <allocate_and_format_topic+0x42>
	return 0;
   2c5f6:	2000      	movs	r0, #0
   2c5f8:	e7f9      	b.n	2c5ee <allocate_and_format_topic+0x42>
   2c5fa:	bf00      	nop
   2c5fc:	20019584 	.word	0x20019584

0002c600 <nct_reset_topics>:
{
   2c600:	b510      	push	{r4, lr}
	if (accepted_topic) {
   2c602:	4c17      	ldr	r4, [pc, #92]	; (2c660 <nct_reset_topics+0x60>)
   2c604:	6820      	ldr	r0, [r4, #0]
   2c606:	b118      	cbz	r0, 2c610 <nct_reset_topics+0x10>
		nrf_cloud_free(accepted_topic);
   2c608:	f015 f9f9 	bl	419fe <k_free>
		accepted_topic = NULL;
   2c60c:	2300      	movs	r3, #0
   2c60e:	6023      	str	r3, [r4, #0]
	if (rejected_topic) {
   2c610:	4c14      	ldr	r4, [pc, #80]	; (2c664 <nct_reset_topics+0x64>)
   2c612:	6820      	ldr	r0, [r4, #0]
   2c614:	b118      	cbz	r0, 2c61e <nct_reset_topics+0x1e>
		nrf_cloud_free(rejected_topic);
   2c616:	f015 f9f2 	bl	419fe <k_free>
		rejected_topic = NULL;
   2c61a:	2300      	movs	r3, #0
   2c61c:	6023      	str	r3, [r4, #0]
	if (update_delta_topic) {
   2c61e:	4c12      	ldr	r4, [pc, #72]	; (2c668 <nct_reset_topics+0x68>)
   2c620:	6820      	ldr	r0, [r4, #0]
   2c622:	b118      	cbz	r0, 2c62c <nct_reset_topics+0x2c>
		nrf_cloud_free(update_delta_topic);
   2c624:	f015 f9eb 	bl	419fe <k_free>
		update_delta_topic = NULL;
   2c628:	2300      	movs	r3, #0
   2c62a:	6023      	str	r3, [r4, #0]
	if (update_topic) {
   2c62c:	4c0f      	ldr	r4, [pc, #60]	; (2c66c <nct_reset_topics+0x6c>)
   2c62e:	6820      	ldr	r0, [r4, #0]
   2c630:	b118      	cbz	r0, 2c63a <nct_reset_topics+0x3a>
		nrf_cloud_free(update_topic);
   2c632:	f015 f9e4 	bl	419fe <k_free>
		update_topic = NULL;
   2c636:	2300      	movs	r3, #0
   2c638:	6023      	str	r3, [r4, #0]
	if (shadow_get_topic) {
   2c63a:	4c0d      	ldr	r4, [pc, #52]	; (2c670 <nct_reset_topics+0x70>)
   2c63c:	6820      	ldr	r0, [r4, #0]
   2c63e:	b118      	cbz	r0, 2c648 <nct_reset_topics+0x48>
		nrf_cloud_free(shadow_get_topic);
   2c640:	f015 f9dd 	bl	419fe <k_free>
		shadow_get_topic = NULL;
   2c644:	2300      	movs	r3, #0
   2c646:	6023      	str	r3, [r4, #0]
	memset(nct_cc_rx_list, 0, sizeof(nct_cc_rx_list[0]) * CC_RX_LIST_CNT);
   2c648:	2224      	movs	r2, #36	; 0x24
   2c64a:	2100      	movs	r1, #0
   2c64c:	4809      	ldr	r0, [pc, #36]	; (2c674 <nct_reset_topics+0x74>)
   2c64e:	f015 fa87 	bl	41b60 <memset>
}
   2c652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(nct_cc_tx_list, 0, sizeof(nct_cc_tx_list[0]) * CC_TX_LIST_CNT);
   2c656:	2218      	movs	r2, #24
   2c658:	2100      	movs	r1, #0
   2c65a:	4807      	ldr	r0, [pc, #28]	; (2c678 <nct_reset_topics+0x78>)
   2c65c:	f015 ba80 	b.w	41b60 <memset>
   2c660:	20019580 	.word	0x20019580
   2c664:	2001a10c 	.word	0x2001a10c
   2c668:	2001a114 	.word	0x2001a114
   2c66c:	2001a118 	.word	0x2001a118
   2c670:	2001a110 	.word	0x2001a110
   2c674:	2001a0d0 	.word	0x2001a0d0
   2c678:	2001a0f4 	.word	0x2001a0f4

0002c67c <dc_endpoint_free>:
{
   2c67c:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2c67e:	4c0d      	ldr	r4, [pc, #52]	; (2c6b4 <dc_endpoint_free+0x38>)
   2c680:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2c684:	b108      	cbz	r0, 2c68a <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2c686:	f015 f9ba 	bl	419fe <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2c68a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2c68e:	b108      	cbz	r0, 2c694 <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   2c690:	f015 f9b5 	bl	419fe <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2c694:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2c698:	b108      	cbz	r0, 2c69e <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   2c69a:	f015 f9b0 	bl	419fe <k_free>
	if (nct.dc_bulk_endp.utf8 != NULL) {
   2c69e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   2c6a2:	b108      	cbz	r0, 2c6a8 <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.dc_bulk_endp.utf8);
   2c6a4:	f015 f9ab 	bl	419fe <k_free>
	dc_endpoint_reset();
   2c6a8:	f7ff fefc 	bl	2c4a4 <dc_endpoint_reset>
}
   2c6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   2c6b0:	f003 bb3e 	b.w	2fd30 <nrf_cloud_fota_endpoint_clear>
   2c6b4:	20019588 	.word	0x20019588

0002c6b8 <dc_send>:
{
   2c6b8:	b530      	push	{r4, r5, lr}
   2c6ba:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2c6bc:	4604      	mov	r4, r0
{
   2c6be:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2c6c0:	b1f8      	cbz	r0, 2c702 <dc_send+0x4a>
	struct mqtt_publish_param publish = {
   2c6c2:	2210      	movs	r2, #16
   2c6c4:	2100      	movs	r1, #0
   2c6c6:	a802      	add	r0, sp, #8
   2c6c8:	f015 fa4a 	bl	41b60 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2c6cc:	4b0e      	ldr	r3, [pc, #56]	; (2c708 <dc_send+0x50>)
	struct mqtt_publish_param publish = {
   2c6ce:	f88d 5008 	strb.w	r5, [sp, #8]
   2c6d2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   2c6d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   2c6da:	9200      	str	r2, [sp, #0]
   2c6dc:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2c6de:	6823      	ldr	r3, [r4, #0]
   2c6e0:	b11b      	cbz	r3, 2c6ea <dc_send+0x32>
   2c6e2:	6862      	ldr	r2, [r4, #4]
   2c6e4:	b10a      	cbz	r2, 2c6ea <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2c6e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2c6ea:	b125      	cbz	r5, 2c6f6 <dc_send+0x3e>
		publish.message_id = get_message_id(dc_data->message_id);
   2c6ec:	8a20      	ldrh	r0, [r4, #16]
   2c6ee:	f7ff fee7 	bl	2c4c0 <get_message_id>
   2c6f2:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2c6f6:	4669      	mov	r1, sp
   2c6f8:	4804      	ldr	r0, [pc, #16]	; (2c70c <dc_send+0x54>)
   2c6fa:	f012 f947 	bl	3e98c <mqtt_publish>
}
   2c6fe:	b007      	add	sp, #28
   2c700:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c702:	f06f 0015 	mvn.w	r0, #21
   2c706:	e7fa      	b.n	2c6fe <dc_send+0x46>
   2c708:	20019588 	.word	0x20019588
   2c70c:	200195ac 	.word	0x200195ac

0002c710 <nct_set_topic_prefix>:
{
   2c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *end_of_stage = strchr(topic_prefix, '/');
   2c712:	212f      	movs	r1, #47	; 0x2f
{
   2c714:	4604      	mov	r4, r0
	char *end_of_stage = strchr(topic_prefix, '/');
   2c716:	f015 fbe1 	bl	41edc <strchr>
	if (end_of_stage) {
   2c71a:	4606      	mov	r6, r0
   2c71c:	b348      	cbz	r0, 2c772 <nct_set_topic_prefix+0x62>
		len = end_of_stage - topic_prefix;
   2c71e:	1b05      	subs	r5, r0, r4
		if (len >= sizeof(stage)) {
   2c720:	2d07      	cmp	r5, #7
   2c722:	d906      	bls.n	2c732 <nct_set_topic_prefix+0x22>
			LOG_WRN("Truncating copy of stage string length "
   2c724:	462a      	mov	r2, r5
   2c726:	2308      	movs	r3, #8
   2c728:	2157      	movs	r1, #87	; 0x57
   2c72a:	4812      	ldr	r0, [pc, #72]	; (2c774 <nct_set_topic_prefix+0x64>)
   2c72c:	f010 fd65 	bl	3d1fa <z_log_minimal_printk>
			len = sizeof(stage) - 1;
   2c730:	2507      	movs	r5, #7
		memcpy(stage, topic_prefix, len);
   2c732:	4f11      	ldr	r7, [pc, #68]	; (2c778 <nct_set_topic_prefix+0x68>)
   2c734:	4621      	mov	r1, r4
   2c736:	2308      	movs	r3, #8
   2c738:	462a      	mov	r2, r5
   2c73a:	4638      	mov	r0, r7
   2c73c:	f015 f9fd 	bl	41b3a <__memcpy_chk>
		stage[len] = '\0';
   2c740:	2300      	movs	r3, #0
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c742:	4620      	mov	r0, r4
		stage[len] = '\0';
   2c744:	557b      	strb	r3, [r7, r5]
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c746:	f7f0 fd7c 	bl	1d242 <strlen>
   2c74a:	1e84      	subs	r4, r0, #2
   2c74c:	1b64      	subs	r4, r4, r5
		if (len >= sizeof(tenant)) {
   2c74e:	2c3f      	cmp	r4, #63	; 0x3f
   2c750:	d906      	bls.n	2c760 <nct_set_topic_prefix+0x50>
			LOG_WRN("Truncating copy of tenant id string length "
   2c752:	4622      	mov	r2, r4
   2c754:	2340      	movs	r3, #64	; 0x40
   2c756:	2157      	movs	r1, #87	; 0x57
   2c758:	4808      	ldr	r0, [pc, #32]	; (2c77c <nct_set_topic_prefix+0x6c>)
   2c75a:	f010 fd4e 	bl	3d1fa <z_log_minimal_printk>
			len = sizeof(tenant) - 1;
   2c75e:	243f      	movs	r4, #63	; 0x3f
		memcpy(tenant, end_of_stage + 1, len);
   2c760:	4d07      	ldr	r5, [pc, #28]	; (2c780 <nct_set_topic_prefix+0x70>)
   2c762:	2340      	movs	r3, #64	; 0x40
   2c764:	4622      	mov	r2, r4
   2c766:	4628      	mov	r0, r5
   2c768:	1c71      	adds	r1, r6, #1
   2c76a:	f015 f9e6 	bl	41b3a <__memcpy_chk>
		tenant[len] = '\0';
   2c76e:	2300      	movs	r3, #0
   2c770:	552b      	strb	r3, [r5, r4]
}
   2c772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c774:	00048ed3 	.word	0x00048ed3
   2c778:	2001c928 	.word	0x2001c928
   2c77c:	00048f0e 	.word	0x00048f0e
   2c780:	2001c930 	.word	0x2001c930

0002c784 <nct_save_session_state>:
{
   2c784:	b507      	push	{r0, r1, r2, lr}
   2c786:	9001      	str	r0, [sp, #4]
	persistent_session = (bool)session_valid;
   2c788:	3800      	subs	r0, #0
   2c78a:	bf18      	it	ne
   2c78c:	2001      	movne	r0, #1
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c78e:	2204      	movs	r2, #4
	persistent_session = (bool)session_valid;
   2c790:	4b04      	ldr	r3, [pc, #16]	; (2c7a4 <nct_save_session_state+0x20>)
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c792:	eb0d 0102 	add.w	r1, sp, r2
	persistent_session = (bool)session_valid;
   2c796:	7018      	strb	r0, [r3, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c798:	4803      	ldr	r0, [pc, #12]	; (2c7a8 <nct_save_session_state+0x24>)
   2c79a:	f7f5 fe33 	bl	22404 <settings_save_one>
}
   2c79e:	b003      	add	sp, #12
   2c7a0:	f85d fb04 	ldr.w	pc, [sp], #4
   2c7a4:	2001c927 	.word	0x2001c927
   2c7a8:	00048f4d 	.word	0x00048f4d

0002c7ac <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c7ac:	2300      	movs	r3, #0
{
   2c7ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c7b0:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c7b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c7b6:	69cb      	ldr	r3, [r1, #28]
{
   2c7b8:	4606      	mov	r6, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c7ba:	4608      	mov	r0, r1
{
   2c7bc:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c7be:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c7c0:	f003 fb38 	bl	2fe34 <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   2c7c4:	1e02      	subs	r2, r0, #0
   2c7c6:	d033      	beq.n	2c830 <nct_mqtt_evt_handler+0x84>
		return;
	} else if (err < 0) {
   2c7c8:	da04      	bge.n	2c7d4 <nct_mqtt_evt_handler+0x28>
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   2c7ca:	2145      	movs	r1, #69	; 0x45
   2c7cc:	485a      	ldr	r0, [pc, #360]	; (2c938 <nct_mqtt_evt_handler+0x18c>)

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   2c7ce:	f010 fd14 	bl	3d1fa <z_log_minimal_printk>
   2c7d2:	e02d      	b.n	2c830 <nct_mqtt_evt_handler+0x84>
	switch (_mqtt_evt->type) {
   2c7d4:	7823      	ldrb	r3, [r4, #0]
   2c7d6:	2b09      	cmp	r3, #9
   2c7d8:	d82a      	bhi.n	2c830 <nct_mqtt_evt_handler+0x84>
   2c7da:	e8df f003 	tbb	[pc, r3]
   2c7de:	9305      	.short	0x9305
   2c7e0:	29298a16 	.word	0x29298a16
   2c7e4:	91858029 	.word	0x91858029
		evt.param.flag = (p->session_present_flag != 0) &&
   2c7e8:	4b54      	ldr	r3, [pc, #336]	; (2c93c <nct_mqtt_evt_handler+0x190>)
   2c7ea:	7920      	ldrb	r0, [r4, #4]
   2c7ec:	781b      	ldrb	r3, [r3, #0]
   2c7ee:	2800      	cmp	r0, #0
   2c7f0:	bf14      	ite	ne
   2c7f2:	461a      	movne	r2, r3
   2c7f4:	2200      	moveq	r2, #0
   2c7f6:	f88d 2008 	strb.w	r2, [sp, #8]
		if (persistent_session && (p->session_present_flag == 0)) {
   2c7fa:	b113      	cbz	r3, 2c802 <nct_mqtt_evt_handler+0x56>
   2c7fc:	b908      	cbnz	r0, 2c802 <nct_mqtt_evt_handler+0x56>
			nct_save_session_state(0);
   2c7fe:	f7ff ffc1 	bl	2c784 <nct_save_session_state>
		evt.type = NCT_EVT_CONNECTED;
   2c802:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   2c804:	f88d 300c 	strb.w	r3, [sp, #12]
	if (event_notify) {
   2c808:	e04b      	b.n	2c8a2 <nct_mqtt_evt_handler+0xf6>
		int err = publish_get_payload(mqtt_client,
   2c80a:	6967      	ldr	r7, [r4, #20]
	if (length > (sizeof(nct.payload_buf) - 1)) {
   2c80c:	f5b7 6f06 	cmp.w	r7, #2144	; 0x860
   2c810:	d910      	bls.n	2c834 <nct_mqtt_evt_handler+0x88>
		LOG_ERR("Length specified:%zd larger than payload_buf:%zd",
   2c812:	463a      	mov	r2, r7
   2c814:	f640 0361 	movw	r3, #2145	; 0x861
   2c818:	2145      	movs	r1, #69	; 0x45
   2c81a:	4849      	ldr	r0, [pc, #292]	; (2c940 <nct_mqtt_evt_handler+0x194>)
   2c81c:	f010 fced 	bl	3d1fa <z_log_minimal_printk>
		return -EMSGSIZE;
   2c820:	f06f 0279 	mvn.w	r2, #121	; 0x79
			LOG_ERR("publish_get_payload: failed %d", err);
   2c824:	2145      	movs	r1, #69	; 0x45
   2c826:	4847      	ldr	r0, [pc, #284]	; (2c944 <nct_mqtt_evt_handler+0x198>)
   2c828:	f010 fce7 	bl	3d1fa <z_log_minimal_printk>
			nrf_cloud_disconnect();
   2c82c:	f7ff fa9c 	bl	2bd68 <nrf_cloud_disconnect>
		}
	}
}
   2c830:	b00f      	add	sp, #60	; 0x3c
   2c832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2c834:	4d44      	ldr	r5, [pc, #272]	; (2c948 <nct_mqtt_evt_handler+0x19c>)
   2c836:	463a      	mov	r2, r7
   2c838:	f205 21e6 	addw	r1, r5, #742	; 0x2e6
   2c83c:	4630      	mov	r0, r6
   2c83e:	f012 fa0f 	bl	3ec60 <mqtt_readall_publish_payload>
	nct.payload_buf[length] = 0;
   2c842:	19ea      	adds	r2, r5, r7
   2c844:	2500      	movs	r5, #0
   2c846:	f882 52e6 	strb.w	r5, [r2, #742]	; 0x2e6
		if (err < 0) {
   2c84a:	1e02      	subs	r2, r0, #0
   2c84c:	dbea      	blt.n	2c824 <nct_mqtt_evt_handler+0x78>
   2c84e:	4f3f      	ldr	r7, [pc, #252]	; (2c94c <nct_mqtt_evt_handler+0x1a0>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2c850:	68a2      	ldr	r2, [r4, #8]
   2c852:	687b      	ldr	r3, [r7, #4]
   2c854:	6839      	ldr	r1, [r7, #0]
   2c856:	429a      	cmp	r2, r3
   2c858:	bf28      	it	cs
   2c85a:	461a      	movcs	r2, r3
   2c85c:	6860      	ldr	r0, [r4, #4]
   2c85e:	f015 fb52 	bl	41f06 <strncmp>
		if (strings_compare(
   2c862:	bb38      	cbnz	r0, 2c8b4 <nct_mqtt_evt_handler+0x108>
			*opcode = nct_cc_rx_opcode_map[index];
   2c864:	4b3a      	ldr	r3, [pc, #232]	; (2c950 <nct_mqtt_evt_handler+0x1a4>)
   2c866:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2c86a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			cc.message_id = p->message_id;
   2c86e:	8b23      	ldrh	r3, [r4, #24]
   2c870:	f8ad 3020 	strh.w	r3, [sp, #32]
			cc.data.ptr = nct.payload_buf;
   2c874:	4b37      	ldr	r3, [pc, #220]	; (2c954 <nct_mqtt_evt_handler+0x1a8>)
   2c876:	9305      	str	r3, [sp, #20]
			cc.data.len = p->message.payload.len;
   2c878:	6963      	ldr	r3, [r4, #20]
   2c87a:	9304      	str	r3, [sp, #16]
			cc.topic.len = p->message.topic.topic.size;
   2c87c:	68a3      	ldr	r3, [r4, #8]
   2c87e:	9306      	str	r3, [sp, #24]
			cc.topic.ptr = p->message.topic.topic.utf8;
   2c880:	6863      	ldr	r3, [r4, #4]
   2c882:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_CC_RX_DATA;
   2c884:	2303      	movs	r3, #3
   2c886:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.cc = &cc;
   2c88a:	ab04      	add	r3, sp, #16
			evt.param.dc = &dc;
   2c88c:	9302      	str	r3, [sp, #8]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2c88e:	7b23      	ldrb	r3, [r4, #12]
   2c890:	2b01      	cmp	r3, #1
   2c892:	d106      	bne.n	2c8a2 <nct_mqtt_evt_handler+0xf6>
			const struct mqtt_puback_param ack = {
   2c894:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c896:	4669      	mov	r1, sp
   2c898:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   2c89a:	f8ad 3000 	strh.w	r3, [sp]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c89e:	f012 f8b9 	bl	3ea14 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2c8a2:	a801      	add	r0, sp, #4
   2c8a4:	f7ff fba6 	bl	2bff4 <nct_input>
		if (err != 0) {
   2c8a8:	4602      	mov	r2, r0
   2c8aa:	2800      	cmp	r0, #0
   2c8ac:	d0c0      	beq.n	2c830 <nct_mqtt_evt_handler+0x84>
			LOG_ERR("nct_input: failed %d", err);
   2c8ae:	2145      	movs	r1, #69	; 0x45
   2c8b0:	4829      	ldr	r0, [pc, #164]	; (2c958 <nct_mqtt_evt_handler+0x1ac>)
   2c8b2:	e78c      	b.n	2c7ce <nct_mqtt_evt_handler+0x22>
	for (uint32_t index = 0; index < list_size; index++) {
   2c8b4:	3501      	adds	r5, #1
   2c8b6:	2d03      	cmp	r5, #3
   2c8b8:	f107 070c 	add.w	r7, r7, #12
   2c8bc:	d1c8      	bne.n	2c850 <nct_mqtt_evt_handler+0xa4>
			dc.message_id = p->message_id;
   2c8be:	8b23      	ldrh	r3, [r4, #24]
   2c8c0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			dc.data.ptr = nct.payload_buf;
   2c8c4:	4b23      	ldr	r3, [pc, #140]	; (2c954 <nct_mqtt_evt_handler+0x1a8>)
   2c8c6:	930a      	str	r3, [sp, #40]	; 0x28
			dc.data.len = p->message.payload.len;
   2c8c8:	6963      	ldr	r3, [r4, #20]
   2c8ca:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.len = p->message.topic.topic.size;
   2c8cc:	68a3      	ldr	r3, [r4, #8]
   2c8ce:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.topic.ptr = p->message.topic.topic.utf8;
   2c8d0:	6863      	ldr	r3, [r4, #4]
   2c8d2:	930c      	str	r3, [sp, #48]	; 0x30
			evt.type = NCT_EVT_DC_RX_DATA;
   2c8d4:	2306      	movs	r3, #6
   2c8d6:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.dc = &dc;
   2c8da:	ab09      	add	r3, sp, #36	; 0x24
   2c8dc:	e7d6      	b.n	2c88c <nct_mqtt_evt_handler+0xe0>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_SUB) {
   2c8de:	88a3      	ldrh	r3, [r4, #4]
   2c8e0:	2b64      	cmp	r3, #100	; 0x64
   2c8e2:	d111      	bne.n	2c908 <nct_mqtt_evt_handler+0x15c>
			evt.type = NCT_EVT_CC_CONNECTED;
   2c8e4:	2301      	movs	r3, #1
   2c8e6:	e78d      	b.n	2c804 <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_UNSUB) {
   2c8e8:	88a3      	ldrh	r3, [r4, #4]
   2c8ea:	2b96      	cmp	r3, #150	; 0x96
   2c8ec:	d1a0      	bne.n	2c830 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2c8ee:	2308      	movs	r3, #8
   2c8f0:	e788      	b.n	2c804 <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2c8f2:	2304      	movs	r3, #4
   2c8f4:	f88d 300c 	strb.w	r3, [sp, #12]
		evt.param.message_id = _mqtt_evt->param.puback.message_id;
   2c8f8:	88a3      	ldrh	r3, [r4, #4]
   2c8fa:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (event_notify) {
   2c8fe:	e7d0      	b.n	2c8a2 <nct_mqtt_evt_handler+0xf6>
		evt.type = NCT_EVT_PINGRESP;
   2c900:	2305      	movs	r3, #5
   2c902:	e77f      	b.n	2c804 <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_DISCONNECTED;
   2c904:	230a      	movs	r3, #10
   2c906:	e77d      	b.n	2c804 <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_DC_SUB) {
   2c908:	2b65      	cmp	r3, #101	; 0x65
   2c90a:	d191      	bne.n	2c830 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_DC_CONNECTED;
   2c90c:	2302      	movs	r3, #2
			err = nct_save_session_state(1);
   2c90e:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   2c910:	f88d 300c 	strb.w	r3, [sp, #12]
			err = nct_save_session_state(1);
   2c914:	f7ff ff36 	bl	2c784 <nct_save_session_state>
			if (err) {
   2c918:	4602      	mov	r2, r0
   2c91a:	b118      	cbz	r0, 2c924 <nct_mqtt_evt_handler+0x178>
				LOG_ERR("Failed to save session state: %d",
   2c91c:	2145      	movs	r1, #69	; 0x45
   2c91e:	480f      	ldr	r0, [pc, #60]	; (2c95c <nct_mqtt_evt_handler+0x1b0>)
   2c920:	f010 fc6b 	bl	3d1fa <z_log_minimal_printk>
			err = nrf_cloud_fota_subscribe();
   2c924:	f003 fa0c 	bl	2fd40 <nrf_cloud_fota_subscribe>
			if (err) {
   2c928:	4602      	mov	r2, r0
   2c92a:	2800      	cmp	r0, #0
   2c92c:	d0b9      	beq.n	2c8a2 <nct_mqtt_evt_handler+0xf6>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   2c92e:	2145      	movs	r1, #69	; 0x45
   2c930:	480b      	ldr	r0, [pc, #44]	; (2c960 <nct_mqtt_evt_handler+0x1b4>)
   2c932:	f010 fc62 	bl	3d1fa <z_log_minimal_printk>
	if (event_notify) {
   2c936:	e7b4      	b.n	2c8a2 <nct_mqtt_evt_handler+0xf6>
   2c938:	00048f5e 	.word	0x00048f5e
   2c93c:	2001c927 	.word	0x2001c927
   2c940:	00048f8f 	.word	0x00048f8f
   2c944:	00048fc5 	.word	0x00048fc5
   2c948:	20019588 	.word	0x20019588
   2c94c:	2001a0d0 	.word	0x2001a0d0
   2c950:	000437f0 	.word	0x000437f0
   2c954:	2001986e 	.word	0x2001986e
   2c958:	00049033 	.word	0x00049033
   2c95c:	00048fe9 	.word	0x00048fe9
   2c960:	0004900f 	.word	0x0004900f

0002c964 <nct_mqtt_connect>:
{
   2c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!mqtt_client_initialized) {
   2c966:	4e22      	ldr	r6, [pc, #136]	; (2c9f0 <nct_mqtt_connect+0x8c>)
   2c968:	7835      	ldrb	r5, [r6, #0]
   2c96a:	2d00      	cmp	r5, #0
   2c96c:	d13b      	bne.n	2c9e6 <nct_mqtt_connect+0x82>
		mqtt_client_init(&nct.client);
   2c96e:	4c21      	ldr	r4, [pc, #132]	; (2c9f4 <nct_mqtt_connect+0x90>)
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c970:	2701      	movs	r7, #1
		mqtt_client_init(&nct.client);
   2c972:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2c976:	f011 ffb0 	bl	3e8da <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2c97a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   2c97e:	67e3      	str	r3, [r4, #124]	; 0x7c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2c980:	4b1d      	ldr	r3, [pc, #116]	; (2c9f8 <nct_mqtt_connect+0x94>)
   2c982:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2c986:	4b1d      	ldr	r3, [pc, #116]	; (2c9fc <nct_mqtt_connect+0x98>)
   2c988:	6818      	ldr	r0, [r3, #0]
   2c98a:	6760      	str	r0, [r4, #116]	; 0x74
		nct.client.client_id.size = strlen(client_id_buf);
   2c98c:	f7f0 fc59 	bl	1d242 <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2c990:	2304      	movs	r3, #4
   2c992:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		nct.client.keepalive = CONFIG_NRF_CLOUD_MQTT_KEEPALIVE;
   2c996:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   2c99a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c99e:	4b18      	ldr	r3, [pc, #96]	; (2ca00 <nct_mqtt_connect+0x9c>)
   2c9a0:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   2c9a4:	781b      	ldrb	r3, [r3, #0]
		nct.client.user_name = NULL;
   2c9a6:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c9aa:	f083 0301 	eor.w	r3, r3, #1
   2c9ae:	f363 0241 	bfi	r2, r3, #1, #1
		nct.client.rx_buf = nct.rx_buf;
   2c9b2:	f104 03e6 	add.w	r3, r4, #230	; 0xe6
   2c9b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c9ba:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c9be:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
   2c9c2:	f104 0550 	add.w	r5, r4, #80	; 0x50
		nct.client.tx_buf = nct.tx_buf;
   2c9c6:	f504 72f3 	add.w	r2, r4, #486	; 0x1e6
		nct.client.client_id.size = strlen(client_id_buf);
   2c9ca:	67a0      	str	r0, [r4, #120]	; 0x78
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2c9cc:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c9d0:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c9d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		memcpy(tls_config, &nct.tls_config,
   2c9d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c9da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c9dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c9de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c9e0:	6823      	ldr	r3, [r4, #0]
		mqtt_client_initialized = true;
   2c9e2:	7037      	strb	r7, [r6, #0]
   2c9e4:	602b      	str	r3, [r5, #0]
	err = mqtt_connect(&nct.client);
   2c9e6:	4807      	ldr	r0, [pc, #28]	; (2ca04 <nct_mqtt_connect+0xa0>)
}
   2c9e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = mqtt_connect(&nct.client);
   2c9ec:	f011 bf8c 	b.w	3e908 <mqtt_connect>
   2c9f0:	2001c926 	.word	0x2001c926
   2c9f4:	20019588 	.word	0x20019588
   2c9f8:	0002c7ad 	.word	0x0002c7ad
   2c9fc:	20019584 	.word	0x20019584
   2ca00:	2001c927 	.word	0x2001c927
   2ca04:	200195ac 	.word	0x200195ac

0002ca08 <nct_init>:

int nct_init(const char * const client_id)
{
   2ca08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca0c:	4605      	mov	r5, r0
	ret = settings_subsys_init();
   2ca0e:	f7f5 fe45 	bl	2269c <settings_subsys_init>
	if (ret) {
   2ca12:	4604      	mov	r4, r0
   2ca14:	b138      	cbz	r0, 2ca26 <nct_init+0x1e>
		LOG_ERR("Settings init failed: %d", ret);
   2ca16:	2145      	movs	r1, #69	; 0x45
   2ca18:	4602      	mov	r2, r0
   2ca1a:	485c      	ldr	r0, [pc, #368]	; (2cb8c <nct_init+0x184>)
		LOG_ERR("Cannot load settings: %d", ret);
   2ca1c:	f010 fbed 	bl	3d1fa <z_log_minimal_printk>
	if (err) {
		return err;
	}

	return nct_provision();
}
   2ca20:	4620      	mov	r0, r4
   2ca22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   2ca26:	485a      	ldr	r0, [pc, #360]	; (2cb90 <nct_init+0x188>)
   2ca28:	f7f5 fd26 	bl	22478 <settings_load_subtree>
	if (ret) {
   2ca2c:	4604      	mov	r4, r0
   2ca2e:	2800      	cmp	r0, #0
   2ca30:	f000 808d 	beq.w	2cb4e <nct_init+0x146>
		LOG_ERR("Cannot load settings: %d", ret);
   2ca34:	4602      	mov	r2, r0
   2ca36:	2145      	movs	r1, #69	; 0x45
   2ca38:	4856      	ldr	r0, [pc, #344]	; (2cb94 <nct_init+0x18c>)
   2ca3a:	e7ef      	b.n	2ca1c <nct_init+0x14>
	if (client_id_buf) {
   2ca3c:	4d56      	ldr	r5, [pc, #344]	; (2cb98 <nct_init+0x190>)
   2ca3e:	6828      	ldr	r0, [r5, #0]
   2ca40:	b118      	cbz	r0, 2ca4a <nct_init+0x42>
		nrf_cloud_free(client_id_buf);
   2ca42:	f014 ffdc 	bl	419fe <k_free>
		client_id_buf = NULL;
   2ca46:	2300      	movs	r3, #0
   2ca48:	602b      	str	r3, [r5, #0]
	++len;
   2ca4a:	3401      	adds	r4, #1
	client_id_buf = nrf_cloud_calloc(len, 1);
   2ca4c:	2101      	movs	r1, #1
   2ca4e:	4620      	mov	r0, r4
   2ca50:	f014 ffe0 	bl	41a14 <k_calloc>
   2ca54:	6028      	str	r0, [r5, #0]
	if (!client_id_buf) {
   2ca56:	2800      	cmp	r0, #0
   2ca58:	d076      	beq.n	2cb48 <nct_init+0x140>
		ret = nrf_cloud_configured_client_id_get(client_id_buf, len);
   2ca5a:	4621      	mov	r1, r4
   2ca5c:	f7fe ffea 	bl	2ba34 <nrf_cloud_configured_client_id_get>
		if (ret) {
   2ca60:	4604      	mov	r4, r0
   2ca62:	b930      	cbnz	r0, 2ca72 <nct_init+0x6a>
	dc_endpoint_reset();
   2ca64:	f7ff fd1e 	bl	2c4a4 <dc_endpoint_reset>
	if (!client_id_buf) {
   2ca68:	682b      	ldr	r3, [r5, #0]
   2ca6a:	b933      	cbnz	r3, 2ca7a <nct_init+0x72>
		return -ENODEV;
   2ca6c:	f06f 0412 	mvn.w	r4, #18
   2ca70:	e7d6      	b.n	2ca20 <nct_init+0x18>
			LOG_ERR("Could not obtain configured client ID, error: %d", ret);
   2ca72:	4602      	mov	r2, r0
   2ca74:	2145      	movs	r1, #69	; 0x45
   2ca76:	4849      	ldr	r0, [pc, #292]	; (2cb9c <nct_init+0x194>)
   2ca78:	e7d0      	b.n	2ca1c <nct_init+0x14>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2ca7a:	f8df b164 	ldr.w	fp, [pc, #356]	; 2cbe0 <nct_init+0x1d8>
	nct_reset_topics();
   2ca7e:	f7ff fdbf 	bl	2c600 <nct_reset_topics>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2ca82:	4658      	mov	r0, fp
   2ca84:	4946      	ldr	r1, [pc, #280]	; (2cba0 <nct_init+0x198>)
   2ca86:	f7ff fd91 	bl	2c5ac <allocate_and_format_topic>
	if (ret) {
   2ca8a:	4604      	mov	r4, r0
   2ca8c:	2800      	cmp	r0, #0
   2ca8e:	d153      	bne.n	2cb38 <nct_init+0x130>
	ret = allocate_and_format_topic(&rejected_topic, NCT_REJECTED_TOPIC);
   2ca90:	f8df a150 	ldr.w	sl, [pc, #336]	; 2cbe4 <nct_init+0x1dc>
   2ca94:	4943      	ldr	r1, [pc, #268]	; (2cba4 <nct_init+0x19c>)
   2ca96:	4650      	mov	r0, sl
   2ca98:	f7ff fd88 	bl	2c5ac <allocate_and_format_topic>
	if (ret) {
   2ca9c:	4604      	mov	r4, r0
   2ca9e:	2800      	cmp	r0, #0
   2caa0:	d14a      	bne.n	2cb38 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_delta_topic, NCT_UPDATE_DELTA_TOPIC);
   2caa2:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2cbe8 <nct_init+0x1e0>
   2caa6:	4940      	ldr	r1, [pc, #256]	; (2cba8 <nct_init+0x1a0>)
   2caa8:	4648      	mov	r0, r9
   2caaa:	f7ff fd7f 	bl	2c5ac <allocate_and_format_topic>
	if (ret) {
   2caae:	4604      	mov	r4, r0
   2cab0:	2800      	cmp	r0, #0
   2cab2:	d141      	bne.n	2cb38 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_topic, NCT_UPDATE_TOPIC);
   2cab4:	4f3d      	ldr	r7, [pc, #244]	; (2cbac <nct_init+0x1a4>)
   2cab6:	493e      	ldr	r1, [pc, #248]	; (2cbb0 <nct_init+0x1a8>)
   2cab8:	4638      	mov	r0, r7
   2caba:	f7ff fd77 	bl	2c5ac <allocate_and_format_topic>
	if (ret) {
   2cabe:	4604      	mov	r4, r0
   2cac0:	2800      	cmp	r0, #0
   2cac2:	d139      	bne.n	2cb38 <nct_init+0x130>
	ret = allocate_and_format_topic(&shadow_get_topic, NCT_SHADOW_GET);
   2cac4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2cbec <nct_init+0x1e4>
   2cac8:	493a      	ldr	r1, [pc, #232]	; (2cbb4 <nct_init+0x1ac>)
   2caca:	4640      	mov	r0, r8
   2cacc:	f7ff fd6e 	bl	2c5ac <allocate_and_format_topic>
	if (ret) {
   2cad0:	4604      	mov	r4, r0
   2cad2:	2800      	cmp	r0, #0
   2cad4:	d130      	bne.n	2cb38 <nct_init+0x130>
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2cad6:	2601      	movs	r6, #1
   2cad8:	4d37      	ldr	r5, [pc, #220]	; (2cbb8 <nct_init+0x1b0>)
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2cada:	f8db 0000 	ldr.w	r0, [fp]
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2cade:	722e      	strb	r6, [r5, #8]
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2cae0:	6028      	str	r0, [r5, #0]
	nct_cc_rx_list[0].topic.size = strlen(accepted_topic);
   2cae2:	f7f0 fbae 	bl	1d242 <strlen>
   2cae6:	6068      	str	r0, [r5, #4]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2cae8:	f8da 0000 	ldr.w	r0, [sl]
	nct_cc_rx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2caec:	752e      	strb	r6, [r5, #20]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2caee:	60e8      	str	r0, [r5, #12]
	nct_cc_rx_list[1].topic.size = strlen(rejected_topic);
   2caf0:	f7f0 fba7 	bl	1d242 <strlen>
   2caf4:	6128      	str	r0, [r5, #16]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2caf6:	f8d9 0000 	ldr.w	r0, [r9]
	nct_cc_rx_list[2].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2cafa:	f885 6020 	strb.w	r6, [r5, #32]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2cafe:	61a8      	str	r0, [r5, #24]
	nct_cc_rx_list[2].topic.size = strlen(update_delta_topic);
   2cb00:	f7f0 fb9f 	bl	1d242 <strlen>
   2cb04:	61e8      	str	r0, [r5, #28]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2cb06:	4d2d      	ldr	r5, [pc, #180]	; (2cbbc <nct_init+0x1b4>)
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2cb08:	f8d8 0000 	ldr.w	r0, [r8]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2cb0c:	722e      	strb	r6, [r5, #8]
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2cb0e:	6028      	str	r0, [r5, #0]
	nct_cc_tx_list[0].topic.size = strlen(shadow_get_topic);
   2cb10:	f7f0 fb97 	bl	1d242 <strlen>
   2cb14:	6068      	str	r0, [r5, #4]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2cb16:	6838      	ldr	r0, [r7, #0]
	nct_cc_tx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2cb18:	752e      	strb	r6, [r5, #20]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2cb1a:	60e8      	str	r0, [r5, #12]
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2cb1c:	f7f0 fb91 	bl	1d242 <strlen>
	nct.tls_config.peer_verify = 2;
   2cb20:	2202      	movs	r2, #2
   2cb22:	4b27      	ldr	r3, [pc, #156]	; (2cbc0 <nct_init+0x1b8>)
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2cb24:	6128      	str	r0, [r5, #16]
	nct.tls_config.cipher_count = 0;
   2cb26:	e9c3 2400 	strd	r2, r4, [r3]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2cb2a:	4a26      	ldr	r2, [pc, #152]	; (2cbc4 <nct_init+0x1bc>)
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2cb2c:	e9c3 4602 	strd	r4, r6, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2cb30:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2cb32:	4a25      	ldr	r2, [pc, #148]	; (2cbc8 <nct_init+0x1c0>)
   2cb34:	619a      	str	r2, [r3, #24]
	return nct_provision();
   2cb36:	e773      	b.n	2ca20 <nct_init+0x18>
	LOG_ERR("Failed to format MQTT topics, err: %d", ret);
   2cb38:	4622      	mov	r2, r4
   2cb3a:	2145      	movs	r1, #69	; 0x45
   2cb3c:	4823      	ldr	r0, [pc, #140]	; (2cbcc <nct_init+0x1c4>)
   2cb3e:	f010 fb5c 	bl	3d1fa <z_log_minimal_printk>
	nct_reset_topics();
   2cb42:	f7ff fd5d 	bl	2c600 <nct_reset_topics>
	if (err) {
   2cb46:	e76b      	b.n	2ca20 <nct_init+0x18>
		return -ENOMEM;
   2cb48:	f06f 040b 	mvn.w	r4, #11
   2cb4c:	e768      	b.n	2ca20 <nct_init+0x18>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   2cb4e:	4820      	ldr	r0, [pc, #128]	; (2cbd0 <nct_init+0x1c8>)
   2cb50:	f003 f828 	bl	2fba4 <nrf_cloud_fota_init>
	if (err < 0) {
   2cb54:	1e04      	subs	r4, r0, #0
   2cb56:	f6ff af63 	blt.w	2ca20 <nct_init+0x18>
	} else if (err && persistent_session) {
   2cb5a:	d005      	beq.n	2cb68 <nct_init+0x160>
   2cb5c:	4b1d      	ldr	r3, [pc, #116]	; (2cbd4 <nct_init+0x1cc>)
   2cb5e:	781b      	ldrb	r3, [r3, #0]
   2cb60:	b113      	cbz	r3, 2cb68 <nct_init+0x160>
		nct_save_session_state(0);
   2cb62:	2000      	movs	r0, #0
   2cb64:	f7ff fe0e 	bl	2c784 <nct_save_session_state>
		if (client_id) {
   2cb68:	b11d      	cbz	r5, 2cb72 <nct_init+0x16a>
			LOG_WRN("Not configured to for runtime client ID, ignoring");
   2cb6a:	2157      	movs	r1, #87	; 0x57
   2cb6c:	481a      	ldr	r0, [pc, #104]	; (2cbd8 <nct_init+0x1d0>)
   2cb6e:	f010 fb44 	bl	3d1fa <z_log_minimal_printk>
		len = nrf_cloud_configured_client_id_length_get();
   2cb72:	f013 f93f 	bl	3fdf4 <nrf_cloud_configured_client_id_length_get>
	if (!len) {
   2cb76:	4604      	mov	r4, r0
   2cb78:	2800      	cmp	r0, #0
   2cb7a:	f47f af5f 	bne.w	2ca3c <nct_init+0x34>
		LOG_WRN("Could not determine size of client ID");
   2cb7e:	2157      	movs	r1, #87	; 0x57
   2cb80:	4816      	ldr	r0, [pc, #88]	; (2cbdc <nct_init+0x1d4>)
   2cb82:	f010 fb3a 	bl	3d1fa <z_log_minimal_printk>
		return -ENOMSG;
   2cb86:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2cb8a:	e749      	b.n	2ca20 <nct_init+0x18>
   2cb8c:	0004904d 	.word	0x0004904d
   2cb90:	000475dc 	.word	0x000475dc
   2cb94:	0004906b 	.word	0x0004906b
   2cb98:	20019584 	.word	0x20019584
   2cb9c:	000490eb 	.word	0x000490eb
   2cba0:	00049121 	.word	0x00049121
   2cba4:	00049138 	.word	0x00049138
   2cba8:	0004915b 	.word	0x0004915b
   2cbac:	2001a118 	.word	0x2001a118
   2cbb0:	0004917e 	.word	0x0004917e
   2cbb4:	0004919b 	.word	0x0004919b
   2cbb8:	2001a0d0 	.word	0x2001a0d0
   2cbbc:	2001a0f4 	.word	0x2001a0f4
   2cbc0:	20019588 	.word	0x20019588
   2cbc4:	200146b0 	.word	0x200146b0
   2cbc8:	000491b5 	.word	0x000491b5
   2cbcc:	000491c7 	.word	0x000491c7
   2cbd0:	0002c545 	.word	0x0002c545
   2cbd4:	2001c927 	.word	0x2001c927
   2cbd8:	00049089 	.word	0x00049089
   2cbdc:	000490c0 	.word	0x000490c0
   2cbe0:	20019580 	.word	0x20019580
   2cbe4:	2001a10c 	.word	0x2001a10c
   2cbe8:	2001a114 	.word	0x2001a114
   2cbec:	2001a110 	.word	0x2001a110

0002cbf0 <nct_uninit>:

void nct_uninit(void)
{
   2cbf0:	b510      	push	{r4, lr}
	LOG_DBG("Uninitializing nRF Cloud transport");
	dc_endpoint_free();
	nct_reset_topics();

	if (client_id_buf) {
   2cbf2:	4c0a      	ldr	r4, [pc, #40]	; (2cc1c <nct_uninit+0x2c>)
	dc_endpoint_free();
   2cbf4:	f7ff fd42 	bl	2c67c <dc_endpoint_free>
	nct_reset_topics();
   2cbf8:	f7ff fd02 	bl	2c600 <nct_reset_topics>
	if (client_id_buf) {
   2cbfc:	6820      	ldr	r0, [r4, #0]
   2cbfe:	b118      	cbz	r0, 2cc08 <nct_uninit+0x18>
		nrf_cloud_free(client_id_buf);
   2cc00:	f014 fefd 	bl	419fe <k_free>
		client_id_buf = NULL;
   2cc04:	2300      	movs	r3, #0
   2cc06:	6023      	str	r3, [r4, #0]
	}

	memset(&nct, 0, sizeof(nct));
   2cc08:	f640 3248 	movw	r2, #2888	; 0xb48
   2cc0c:	2100      	movs	r1, #0
   2cc0e:	4804      	ldr	r0, [pc, #16]	; (2cc20 <nct_uninit+0x30>)
   2cc10:	f014 ffa6 	bl	41b60 <memset>
	mqtt_client_initialized = false;
   2cc14:	2200      	movs	r2, #0
   2cc16:	4b03      	ldr	r3, [pc, #12]	; (2cc24 <nct_uninit+0x34>)
   2cc18:	701a      	strb	r2, [r3, #0]
}
   2cc1a:	bd10      	pop	{r4, pc}
   2cc1c:	20019584 	.word	0x20019584
   2cc20:	20019588 	.word	0x20019588
   2cc24:	2001c926 	.word	0x2001c926

0002cc28 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   2cc28:	b510      	push	{r4, lr}
   2cc2a:	b09a      	sub	sp, #104	; 0x68
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   2cc2c:	2250      	movs	r2, #80	; 0x50
   2cc2e:	2100      	movs	r1, #0
   2cc30:	a806      	add	r0, sp, #24
   2cc32:	f014 ff95 	bl	41b60 <memset>
   2cc36:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   2cc38:	2100      	movs	r1, #0
   2cc3a:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2cc3e:	4815      	ldr	r0, [pc, #84]	; (2cc94 <nct_connect+0x6c>)
   2cc40:	ab01      	add	r3, sp, #4
   2cc42:	aa06      	add	r2, sp, #24
   2cc44:	f010 fe0b 	bl	3d85e <zsock_getaddrinfo>
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   2cc48:	bb00      	cbnz	r0, 2cc8c <nct_connect+0x64>
		LOG_DBG("getaddrinfo failed %d", err);
		return -ECHILD;
	}

	addr = result;
   2cc4a:	9b01      	ldr	r3, [sp, #4]
	err = -ECHILD;

	/* Look for address of the broker. */
	while (addr != NULL) {
   2cc4c:	b913      	cbnz	r3, 2cc54 <nct_connect+0x2c>
	err = -ECHILD;
   2cc4e:	f06f 0409 	mvn.w	r4, #9
   2cc52:	e013      	b.n	2cc7c <nct_connect+0x54>
		/* IPv4 Address. */
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2cc54:	695a      	ldr	r2, [r3, #20]
   2cc56:	2a08      	cmp	r2, #8
   2cc58:	d116      	bne.n	2cc88 <nct_connect+0x60>
			struct sockaddr_in *broker =
				((struct sockaddr_in *)&nct.broker);

			broker->sin_addr.s_addr =
				((struct sockaddr_in *)addr->ai_addr)
					->sin_addr.s_addr;
   2cc5a:	699b      	ldr	r3, [r3, #24]
			broker->sin_addr.s_addr =
   2cc5c:	490e      	ldr	r1, [pc, #56]	; (2cc98 <nct_connect+0x70>)
					->sin_addr.s_addr;
   2cc5e:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2cc60:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
			broker->sin_family = AF_INET;
   2cc64:	4b0d      	ldr	r3, [pc, #52]	; (2cc9c <nct_connect+0x74>)
   2cc66:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   2cc6a:	2310      	movs	r3, #16
   2cc6c:	aa02      	add	r2, sp, #8
   2cc6e:	31b0      	adds	r1, #176	; 0xb0
   2cc70:	2001      	movs	r0, #1
   2cc72:	f7f7 facb 	bl	2420c <z_impl_net_addr_ntop>
				 addr_str,
				 sizeof(addr_str));

			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));

			err = nct_mqtt_connect();
   2cc76:	f7ff fe75 	bl	2c964 <nct_mqtt_connect>
   2cc7a:	4604      	mov	r4, r0
	zsock_freeaddrinfo(ai);
   2cc7c:	9801      	ldr	r0, [sp, #4]
   2cc7e:	f010 fdf0 	bl	3d862 <zsock_freeaddrinfo>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2cc82:	4620      	mov	r0, r4
   2cc84:	b01a      	add	sp, #104	; 0x68
   2cc86:	bd10      	pop	{r4, pc}
		addr = addr->ai_next;
   2cc88:	681b      	ldr	r3, [r3, #0]
   2cc8a:	e7df      	b.n	2cc4c <nct_connect+0x24>
		return -ECHILD;
   2cc8c:	f06f 0409 	mvn.w	r4, #9
   2cc90:	e7f7      	b.n	2cc82 <nct_connect+0x5a>
   2cc92:	bf00      	nop
   2cc94:	000491b5 	.word	0x000491b5
   2cc98:	20019588 	.word	0x20019588
   2cc9c:	b3220001 	.word	0xb3220001

0002cca0 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   2cca0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");

	const struct mqtt_subscription_list subscription_list = {
   2cca2:	466b      	mov	r3, sp
   2cca4:	4a05      	ldr	r2, [pc, #20]	; (2ccbc <nct_cc_connect+0x1c>)
   2cca6:	e892 0003 	ldmia.w	r2, {r0, r1}
   2ccaa:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_MSG_ID_CC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2ccae:	4619      	mov	r1, r3
   2ccb0:	4803      	ldr	r0, [pc, #12]	; (2ccc0 <nct_cc_connect+0x20>)
   2ccb2:	f011 fefd 	bl	3eab0 <mqtt_subscribe>
}
   2ccb6:	b003      	add	sp, #12
   2ccb8:	f85d fb04 	ldr.w	pc, [sp], #4
   2ccbc:	00042f3c 	.word	0x00042f3c
   2ccc0:	200195ac 	.word	0x200195ac

0002ccc4 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   2ccc4:	b530      	push	{r4, r5, lr}
	if (cc_data == NULL) {
   2ccc6:	4604      	mov	r4, r0
{
   2ccc8:	b087      	sub	sp, #28
	if (cc_data == NULL) {
   2ccca:	b940      	cbnz	r0, 2ccde <nct_cc_send+0x1a>
		LOG_ERR("cc_data == NULL");
   2cccc:	2145      	movs	r1, #69	; 0x45
   2ccce:	481d      	ldr	r0, [pc, #116]	; (2cd44 <nct_cc_send+0x80>)
   2ccd0:	f010 fa93 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2ccd4:	f06f 0415 	mvn.w	r4, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   2ccd8:	4620      	mov	r0, r4
   2ccda:	b007      	add	sp, #28
   2ccdc:	bd30      	pop	{r4, r5, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2ccde:	7c85      	ldrb	r5, [r0, #18]
   2cce0:	2d01      	cmp	r5, #1
   2cce2:	d907      	bls.n	2ccf4 <nct_cc_send+0x30>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2cce4:	462a      	mov	r2, r5
   2cce6:	2145      	movs	r1, #69	; 0x45
   2cce8:	4817      	ldr	r0, [pc, #92]	; (2cd48 <nct_cc_send+0x84>)
   2ccea:	f010 fa86 	bl	3d1fa <z_log_minimal_printk>
		return -ENOTSUP;
   2ccee:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2ccf2:	e7f1      	b.n	2ccd8 <nct_cc_send+0x14>
	struct mqtt_publish_param publish = {
   2ccf4:	2210      	movs	r2, #16
   2ccf6:	2100      	movs	r1, #0
   2ccf8:	a802      	add	r0, sp, #8
   2ccfa:	f014 ff31 	bl	41b60 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2ccfe:	230c      	movs	r3, #12
   2cd00:	435d      	muls	r5, r3
   2cd02:	4a12      	ldr	r2, [pc, #72]	; (2cd4c <nct_cc_send+0x88>)
   2cd04:	1953      	adds	r3, r2, r5
	struct mqtt_publish_param publish = {
   2cd06:	5952      	ldr	r2, [r2, r5]
   2cd08:	9200      	str	r2, [sp, #0]
   2cd0a:	685a      	ldr	r2, [r3, #4]
   2cd0c:	7a1b      	ldrb	r3, [r3, #8]
   2cd0e:	9201      	str	r2, [sp, #4]
   2cd10:	f88d 3008 	strb.w	r3, [sp, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2cd14:	6823      	ldr	r3, [r4, #0]
   2cd16:	b11b      	cbz	r3, 2cd20 <nct_cc_send+0x5c>
   2cd18:	6862      	ldr	r2, [r4, #4]
   2cd1a:	b10a      	cbz	r2, 2cd20 <nct_cc_send+0x5c>
		publish.message.payload.len = cc_data->data.len;
   2cd1c:	e9cd 2303 	strd	r2, r3, [sp, #12]
	publish.message_id = get_message_id(cc_data->message_id);
   2cd20:	8a20      	ldrh	r0, [r4, #16]
   2cd22:	f7ff fbcd 	bl	2c4c0 <get_message_id>
	int err = mqtt_publish(&nct.client, &publish);
   2cd26:	4669      	mov	r1, sp
	publish.message_id = get_message_id(cc_data->message_id);
   2cd28:	f8ad 0014 	strh.w	r0, [sp, #20]
	int err = mqtt_publish(&nct.client, &publish);
   2cd2c:	4808      	ldr	r0, [pc, #32]	; (2cd50 <nct_cc_send+0x8c>)
   2cd2e:	f011 fe2d 	bl	3e98c <mqtt_publish>
	if (err) {
   2cd32:	4604      	mov	r4, r0
   2cd34:	2800      	cmp	r0, #0
   2cd36:	d0cf      	beq.n	2ccd8 <nct_cc_send+0x14>
		LOG_ERR("mqtt_publish failed %d", err);
   2cd38:	4602      	mov	r2, r0
   2cd3a:	2145      	movs	r1, #69	; 0x45
   2cd3c:	4805      	ldr	r0, [pc, #20]	; (2cd54 <nct_cc_send+0x90>)
   2cd3e:	f010 fa5c 	bl	3d1fa <z_log_minimal_printk>
   2cd42:	e7c9      	b.n	2ccd8 <nct_cc_send+0x14>
   2cd44:	000491f2 	.word	0x000491f2
   2cd48:	00049207 	.word	0x00049207
   2cd4c:	2001a0f4 	.word	0x2001a0f4
   2cd50:	200195ac 	.word	0x200195ac
   2cd54:	00049218 	.word	0x00049218

0002cd58 <nct_dc_endpoint_set>:

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *bulk_endp,
			 const struct nrf_cloud_data *m_endp)
{
   2cd58:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   2cd5c:	4680      	mov	r8, r0
   2cd5e:	460f      	mov	r7, r1
   2cd60:	4616      	mov	r6, r2
   2cd62:	461d      	mov	r5, r3
	LOG_DBG("nct_dc_endpoint_set");

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   2cd64:	f7ff fc8a 	bl	2c67c <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2cd68:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2cd6c:	4814      	ldr	r0, [pc, #80]	; (2cdc0 <nct_dc_endpoint_set+0x68>)
   2cd6e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	nct.dc_tx_endp.size = tx_endp->len;
   2cd72:	f8d8 3000 	ldr.w	r3, [r8]
   2cd76:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2cd7a:	687b      	ldr	r3, [r7, #4]
   2cd7c:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	nct.dc_rx_endp.size = rx_endp->len;
   2cd80:	683b      	ldr	r3, [r7, #0]
   2cd82:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	nct.dc_bulk_endp.utf8 = (const uint8_t *)bulk_endp->ptr;
   2cd86:	6873      	ldr	r3, [r6, #4]
   2cd88:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	nct.dc_bulk_endp.size = bulk_endp->len;
   2cd8c:	6833      	ldr	r3, [r6, #0]
   2cd8e:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0

	if (m_endp != NULL) {
   2cd92:	b19d      	cbz	r5, 2cdbc <nct_dc_endpoint_set+0x64>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2cd94:	686b      	ldr	r3, [r5, #4]
		nct.dc_m_endp.size = m_endp->len;
#if defined(CONFIG_NRF_CLOUD_FOTA)
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2cd96:	f100 02d4 	add.w	r2, r0, #212	; 0xd4
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2cd9a:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
		nct.dc_m_endp.size = m_endp->len;
   2cd9e:	682b      	ldr	r3, [r5, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2cda0:	3024      	adds	r0, #36	; 0x24
		nct.dc_m_endp.size = m_endp->len;
   2cda2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2cda6:	4b07      	ldr	r3, [pc, #28]	; (2cdc4 <nct_dc_endpoint_set+0x6c>)
   2cda8:	6819      	ldr	r1, [r3, #0]
   2cdaa:	f002 ffad 	bl	2fd08 <nrf_cloud_fota_endpoint_set_and_report>
			client_id_buf, &nct.dc_m_endp);
		if (persistent_session) {
   2cdae:	4b06      	ldr	r3, [pc, #24]	; (2cdc8 <nct_dc_endpoint_set+0x70>)
   2cdb0:	781b      	ldrb	r3, [r3, #0]
   2cdb2:	b11b      	cbz	r3, 2cdbc <nct_dc_endpoint_set+0x64>
			 */
			(void)nrf_cloud_fota_update_check();
		}
#endif
	}
}
   2cdb4:	e8bd 41e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, lr}
			(void)nrf_cloud_fota_update_check();
   2cdb8:	f003 b818 	b.w	2fdec <nrf_cloud_fota_update_check>
}
   2cdbc:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
   2cdc0:	20019588 	.word	0x20019588
   2cdc4:	20019584 	.word	0x20019584
   2cdc8:	2001c927 	.word	0x2001c927

0002cdcc <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const bulk_endp,
			 struct nrf_cloud_data *const m_endp)
{
   2cdcc:	b530      	push	{r4, r5, lr}
	LOG_DBG("nct_dc_endpoint_get");

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2cdce:	4c0e      	ldr	r4, [pc, #56]	; (2ce08 <nct_dc_endpoint_get+0x3c>)
   2cdd0:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   2cdd4:	6045      	str	r5, [r0, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2cdd6:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
   2cdda:	6005      	str	r5, [r0, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2cddc:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2cde0:	6048      	str	r0, [r1, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2cde2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   2cde6:	6008      	str	r0, [r1, #0]

	if (bulk_endp != NULL) {
   2cde8:	b12a      	cbz	r2, 2cdf6 <nct_dc_endpoint_get+0x2a>
		bulk_endp->ptr = nct.dc_bulk_endp.utf8;
   2cdea:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   2cdee:	6051      	str	r1, [r2, #4]
		bulk_endp->len = nct.dc_bulk_endp.size;
   2cdf0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   2cdf4:	6011      	str	r1, [r2, #0]
	}

	if (m_endp != NULL) {
   2cdf6:	b12b      	cbz	r3, 2ce04 <nct_dc_endpoint_get+0x38>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2cdf8:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
   2cdfc:	605a      	str	r2, [r3, #4]
		m_endp->len = nct.dc_m_endp.size;
   2cdfe:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   2ce02:	601a      	str	r2, [r3, #0]
	}
}
   2ce04:	bd30      	pop	{r4, r5, pc}
   2ce06:	bf00      	nop
   2ce08:	20019588 	.word	0x20019588

0002ce0c <nct_dc_connect>:

int nct_dc_connect(void)
{
   2ce0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2ce0e:	480a      	ldr	r0, [pc, #40]	; (2ce38 <nct_dc_connect+0x2c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2ce10:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2ce12:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ce16:	3024      	adds	r0, #36	; 0x24
	struct mqtt_topic subscribe_topic = {
   2ce18:	9303      	str	r3, [sp, #12]
   2ce1a:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   2ce1e:	9304      	str	r3, [sp, #16]
   2ce20:	2301      	movs	r3, #1
   2ce22:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2ce26:	ab03      	add	r3, sp, #12
   2ce28:	9301      	str	r3, [sp, #4]
   2ce2a:	4b04      	ldr	r3, [pc, #16]	; (2ce3c <nct_dc_connect+0x30>)
   2ce2c:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ce2e:	f011 fe3f 	bl	3eab0 <mqtt_subscribe>
}
   2ce32:	b007      	add	sp, #28
   2ce34:	f85d fb04 	ldr.w	pc, [sp], #4
   2ce38:	20019588 	.word	0x20019588
   2ce3c:	00650001 	.word	0x00650001

0002ce40 <nct_dc_bulk_send>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_bulk_send(const struct nct_dc_data *dc_data, enum mqtt_qos qos)
{
   2ce40:	b530      	push	{r4, r5, lr}
   2ce42:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2ce44:	4604      	mov	r4, r0
{
   2ce46:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2ce48:	b308      	cbz	r0, 2ce8e <nct_dc_bulk_send+0x4e>
	if (qos != MQTT_QOS_0_AT_MOST_ONCE && qos != MQTT_QOS_1_AT_LEAST_ONCE) {
   2ce4a:	2901      	cmp	r1, #1
   2ce4c:	d81f      	bhi.n	2ce8e <nct_dc_bulk_send+0x4e>
	struct mqtt_publish_param publish = {
   2ce4e:	2210      	movs	r2, #16
   2ce50:	2100      	movs	r1, #0
   2ce52:	a802      	add	r0, sp, #8
   2ce54:	f014 fe84 	bl	41b60 <memset>
		.message.topic.topic.utf8 = nct.dc_bulk_endp.utf8,
   2ce58:	4b0e      	ldr	r3, [pc, #56]	; (2ce94 <nct_dc_bulk_send+0x54>)
	struct mqtt_publish_param publish = {
   2ce5a:	f88d 5008 	strb.w	r5, [sp, #8]
   2ce5e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
   2ce62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2ce66:	9200      	str	r2, [sp, #0]
   2ce68:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2ce6a:	6823      	ldr	r3, [r4, #0]
   2ce6c:	b11b      	cbz	r3, 2ce76 <nct_dc_bulk_send+0x36>
   2ce6e:	6862      	ldr	r2, [r4, #4]
   2ce70:	b10a      	cbz	r2, 2ce76 <nct_dc_bulk_send+0x36>
		publish.message.payload.len = dc_data->data.len;
   2ce72:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2ce76:	b125      	cbz	r5, 2ce82 <nct_dc_bulk_send+0x42>
		publish.message_id = get_message_id(dc_data->message_id);
   2ce78:	8a20      	ldrh	r0, [r4, #16]
   2ce7a:	f7ff fb21 	bl	2c4c0 <get_message_id>
   2ce7e:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2ce82:	4669      	mov	r1, sp
   2ce84:	4804      	ldr	r0, [pc, #16]	; (2ce98 <nct_dc_bulk_send+0x58>)
   2ce86:	f011 fd81 	bl	3e98c <mqtt_publish>
	return bulk_send(dc_data, qos);
}
   2ce8a:	b007      	add	sp, #28
   2ce8c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2ce8e:	f06f 0015 	mvn.w	r0, #21
	return bulk_send(dc_data, qos);
   2ce92:	e7fa      	b.n	2ce8a <nct_dc_bulk_send+0x4a>
   2ce94:	20019588 	.word	0x20019588
   2ce98:	200195ac 	.word	0x200195ac

0002ce9c <nct_dc_disconnect>:

int nct_dc_disconnect(void)
{
   2ce9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;

	LOG_DBG("nct_dc_disconnect");

	const struct mqtt_subscription_list subscription_list = {
   2ce9e:	466b      	mov	r3, sp
   2cea0:	4a0c      	ldr	r2, [pc, #48]	; (2ced4 <nct_dc_disconnect+0x38>)
   2cea2:	e892 0003 	ldmia.w	r2, {r0, r1}
   2cea6:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_UNSUB
	};

	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2ceaa:	4619      	mov	r1, r3
   2ceac:	480a      	ldr	r0, [pc, #40]	; (2ced8 <nct_dc_disconnect+0x3c>)
   2ceae:	f011 fe25 	bl	3eafc <mqtt_unsubscribe>
   2ceb2:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_FOTA)
	int err = nrf_cloud_fota_unsubscribe();
   2ceb4:	f002 ff62 	bl	2fd7c <nrf_cloud_fota_unsubscribe>

	if (err) {
   2ceb8:	4605      	mov	r5, r0
   2ceba:	b138      	cbz	r0, 2cecc <nct_dc_disconnect+0x30>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   2cebc:	4602      	mov	r2, r0
   2cebe:	2145      	movs	r1, #69	; 0x45
   2cec0:	4806      	ldr	r0, [pc, #24]	; (2cedc <nct_dc_disconnect+0x40>)
   2cec2:	f010 f99a 	bl	3d1fa <z_log_minimal_printk>
		if (ret == 0) {
   2cec6:	2c00      	cmp	r4, #0
   2cec8:	bf08      	it	eq
   2ceca:	462c      	moveq	r4, r5
		}
	}
#endif

	return ret;
}
   2cecc:	4620      	mov	r0, r4
   2cece:	b003      	add	sp, #12
   2ced0:	bd30      	pop	{r4, r5, pc}
   2ced2:	bf00      	nop
   2ced4:	00042f44 	.word	0x00042f44
   2ced8:	200195ac 	.word	0x200195ac
   2cedc:	00049234 	.word	0x00049234

0002cee0 <nct_disconnect>:

int nct_disconnect(void)
{
   2cee0:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");

	dc_endpoint_free();
   2cee2:	f7ff fbcb 	bl	2c67c <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   2cee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2ceea:	4801      	ldr	r0, [pc, #4]	; (2cef0 <nct_disconnect+0x10>)
   2ceec:	f011 bdb8 	b.w	3ea60 <mqtt_disconnect>
   2cef0:	200195ac 	.word	0x200195ac

0002cef4 <nct_process>:

int nct_process(void)
{
   2cef4:	b530      	push	{r4, r5, lr}
	int err;
	int ret;

	err = mqtt_input(&nct.client);
   2cef6:	4d21      	ldr	r5, [pc, #132]	; (2cf7c <nct_process+0x88>)
{
   2cef8:	b085      	sub	sp, #20
	err = mqtt_input(&nct.client);
   2cefa:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2cefe:	f011 fe8b 	bl	3ec18 <mqtt_input>
	if (err) {
   2cf02:	4604      	mov	r4, r0
   2cf04:	b320      	cbz	r0, 2cf50 <nct_process+0x5c>
		LOG_ERR("MQTT input error: %d", err);
   2cf06:	4602      	mov	r2, r0
   2cf08:	2145      	movs	r1, #69	; 0x45
   2cf0a:	481d      	ldr	r0, [pc, #116]	; (2cf80 <nct_process+0x8c>)
   2cf0c:	f010 f975 	bl	3d1fa <z_log_minimal_printk>
		if (err != -ENOTCONN) {
   2cf10:	f114 0f80 	cmn.w	r4, #128	; 0x80
   2cf14:	d119      	bne.n	2cf4a <nct_process+0x56>
		} else {
			return err;
		}
	}

	ret = nct_disconnect();
   2cf16:	f7ff ffe3 	bl	2cee0 <nct_disconnect>
	if (ret) {
   2cf1a:	4602      	mov	r2, r0
   2cf1c:	b118      	cbz	r0, 2cf26 <nct_process+0x32>
		LOG_ERR("Error disconnecting from cloud: %d", ret);
   2cf1e:	2145      	movs	r1, #69	; 0x45
   2cf20:	4818      	ldr	r0, [pc, #96]	; (2cf84 <nct_process+0x90>)
   2cf22:	f010 f96a 	bl	3d1fa <z_log_minimal_printk>
	}

	struct nct_evt evt = { .status = err };
   2cf26:	2300      	movs	r3, #0
   2cf28:	e9cd 3302 	strd	r3, r3, [sp, #8]

	evt.type = NCT_EVT_DISCONNECTED;
   2cf2c:	230a      	movs	r3, #10
	ret = nct_input(&evt);
   2cf2e:	a801      	add	r0, sp, #4
	struct nct_evt evt = { .status = err };
   2cf30:	9401      	str	r4, [sp, #4]
	evt.type = NCT_EVT_DISCONNECTED;
   2cf32:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = nct_input(&evt);
   2cf36:	f7ff f85d 	bl	2bff4 <nct_input>
	if (ret) {
   2cf3a:	4605      	mov	r5, r0
   2cf3c:	b128      	cbz	r0, 2cf4a <nct_process+0x56>
		LOG_ERR("Error sending event to application: %d", err);
   2cf3e:	4622      	mov	r2, r4
   2cf40:	2145      	movs	r1, #69	; 0x45
   2cf42:	4811      	ldr	r0, [pc, #68]	; (2cf88 <nct_process+0x94>)
   2cf44:	f010 f959 	bl	3d1fa <z_log_minimal_printk>
   2cf48:	462c      	mov	r4, r5
		err = ret;
	}
	return err;
}
   2cf4a:	4620      	mov	r0, r4
   2cf4c:	b005      	add	sp, #20
   2cf4e:	bd30      	pop	{r4, r5, pc}
	} else if (nct.client.unacked_ping) {
   2cf50:	f995 30a7 	ldrsb.w	r3, [r5, #167]	; 0xa7
   2cf54:	b97b      	cbnz	r3, 2cf76 <nct_process+0x82>
		err = mqtt_live(&nct.client);
   2cf56:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2cf5a:	f011 fe1f 	bl	3eb9c <mqtt_live>
		if (err && (err != -EAGAIN)) {
   2cf5e:	4604      	mov	r4, r0
   2cf60:	2800      	cmp	r0, #0
   2cf62:	d0f2      	beq.n	2cf4a <nct_process+0x56>
   2cf64:	f110 0f0b 	cmn.w	r0, #11
   2cf68:	d0ef      	beq.n	2cf4a <nct_process+0x56>
			LOG_ERR("MQTT ping error: %d", err);
   2cf6a:	4602      	mov	r2, r0
   2cf6c:	2145      	movs	r1, #69	; 0x45
   2cf6e:	4807      	ldr	r0, [pc, #28]	; (2cf8c <nct_process+0x98>)
   2cf70:	f010 f943 	bl	3d1fa <z_log_minimal_printk>
   2cf74:	e7cf      	b.n	2cf16 <nct_process+0x22>
		err = -ECONNRESET;
   2cf76:	f06f 0467 	mvn.w	r4, #103	; 0x67
   2cf7a:	e7cc      	b.n	2cf16 <nct_process+0x22>
   2cf7c:	20019588 	.word	0x20019588
   2cf80:	0004925a 	.word	0x0004925a
   2cf84:	0004928d 	.word	0x0004928d
   2cf88:	000492b5 	.word	0x000492b5
   2cf8c:	00049274 	.word	0x00049274

0002cf90 <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return mqtt_keepalive_time_left(&nct.client);
   2cf90:	4801      	ldr	r0, [pc, #4]	; (2cf98 <nct_keepalive_time_left+0x8>)
   2cf92:	f011 be2a 	b.w	3ebea <mqtt_keepalive_time_left>
   2cf96:	bf00      	nop
   2cf98:	200195ac 	.word	0x200195ac

0002cf9c <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   2cf9c:	4b01      	ldr	r3, [pc, #4]	; (2cfa4 <nct_socket_get+0x8>)
   2cf9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2cfa0:	4770      	bx	lr
   2cfa2:	bf00      	nop
   2cfa4:	20019588 	.word	0x20019588

0002cfa8 <send_to_modem>:
	return nrf_cloud_agps_request(&request);
}

static int send_to_modem(void *data, size_t data_len, uint16_t type)
{
	if (agps_print_enabled) {
   2cfa8:	4b08      	ldr	r3, [pc, #32]	; (2cfcc <send_to_modem+0x24>)
{
   2cfaa:	b570      	push	{r4, r5, r6, lr}
	if (agps_print_enabled) {
   2cfac:	781b      	ldrb	r3, [r3, #0]
{
   2cfae:	4604      	mov	r4, r0
   2cfb0:	460e      	mov	r6, r1
   2cfb2:	4615      	mov	r5, r2
	if (agps_print_enabled) {
   2cfb4:	b11b      	cbz	r3, 2cfbe <send_to_modem+0x16>
		agps_print(type, data);
   2cfb6:	4601      	mov	r1, r0
   2cfb8:	b2d0      	uxtb	r0, r2
   2cfba:	f000 fb73 	bl	2d6a4 <agps_print>
	}

	return nrf_modem_gnss_agps_write(data, data_len, type);
   2cfbe:	462a      	mov	r2, r5
   2cfc0:	4631      	mov	r1, r6
   2cfc2:	4620      	mov	r0, r4
}
   2cfc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_modem_gnss_agps_write(data, data_len, type);
   2cfc8:	f014 baf8 	b.w	415bc <nrf_modem_gnss_agps_write>
   2cfcc:	2001c970 	.word	0x2001c970

0002cfd0 <nrf_cloud_agps_request>:
{
   2cfd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2cfd4:	4605      	mov	r5, r0
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2cfd6:	f7fe fdc5 	bl	2bb64 <nfsm_get_current_state>
   2cfda:	2809      	cmp	r0, #9
   2cfdc:	f040 80b5 	bne.w	2d14a <nrf_cloud_agps_request+0x17a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cfe0:	2400      	movs	r4, #0
   2cfe2:	4e5b      	ldr	r6, [pc, #364]	; (2d150 <nrf_cloud_agps_request+0x180>)
   2cfe4:	e8d6 3fef 	ldaex	r3, [r6]
   2cfe8:	e8c6 4fe2 	stlex	r2, r4, [r6]
   2cfec:	2a00      	cmp	r2, #0
   2cfee:	d1f9      	bne.n	2cfe4 <nrf_cloud_agps_request+0x14>
	return z_impl_k_mutex_lock(mutex, timeout);
   2cff0:	f04f 32ff 	mov.w	r2, #4294967295
   2cff4:	f04f 33ff 	mov.w	r3, #4294967295
   2cff8:	4856      	ldr	r0, [pc, #344]	; (2d154 <nrf_cloud_agps_request+0x184>)
   2cffa:	f009 ff77 	bl	36eec <z_impl_k_mutex_lock>
	memset(&processed, 0, sizeof(processed));
   2cffe:	4b56      	ldr	r3, [pc, #344]	; (2d158 <nrf_cloud_agps_request+0x188>)
   2d000:	e9c3 4400 	strd	r4, r4, [r3]
   2d004:	609c      	str	r4, [r3, #8]
	return z_impl_k_mutex_unlock(mutex);
   2d006:	4853      	ldr	r0, [pc, #332]	; (2d154 <nrf_cloud_agps_request+0x184>)
   2d008:	f00a f842 	bl	37090 <z_impl_k_mutex_unlock>
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   2d00c:	68ab      	ldr	r3, [r5, #8]
   2d00e:	f013 0401 	ands.w	r4, r3, #1
		types[type_count++] = NRF_CLOUD_AGPS_UTC_PARAMETERS;
   2d012:	bf1c      	itt	ne
   2d014:	2201      	movne	r2, #1
   2d016:	f88d 2004 	strbne.w	r2, [sp, #4]
	if (ephem) {
   2d01a:	682a      	ldr	r2, [r5, #0]
   2d01c:	b12a      	cbz	r2, 2d02a <nrf_cloud_agps_request+0x5a>
		types[type_count++] = NRF_CLOUD_AGPS_EPHEMERIDES;
   2d01e:	2102      	movs	r1, #2
   2d020:	aa04      	add	r2, sp, #16
   2d022:	4422      	add	r2, r4
   2d024:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2d028:	3401      	adds	r4, #1
	if (request->sv_mask_alm) {
   2d02a:	686a      	ldr	r2, [r5, #4]
   2d02c:	b12a      	cbz	r2, 2d03a <nrf_cloud_agps_request+0x6a>
		types[type_count++] = NRF_CLOUD_AGPS_ALMANAC;
   2d02e:	2103      	movs	r1, #3
   2d030:	aa04      	add	r2, sp, #16
   2d032:	4422      	add	r2, r4
   2d034:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2d038:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   2d03a:	079d      	lsls	r5, r3, #30
   2d03c:	d505      	bpl.n	2d04a <nrf_cloud_agps_request+0x7a>
		types[type_count++] = NRF_CLOUD_AGPS_KLOBUCHAR_CORRECTION;
   2d03e:	2104      	movs	r1, #4
   2d040:	aa04      	add	r2, sp, #16
   2d042:	4422      	add	r2, r4
   2d044:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2d048:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   2d04a:	0758      	lsls	r0, r3, #29
   2d04c:	d505      	bpl.n	2d05a <nrf_cloud_agps_request+0x8a>
		types[type_count++] = NRF_CLOUD_AGPS_NEQUICK_CORRECTION;
   2d04e:	2105      	movs	r1, #5
   2d050:	aa04      	add	r2, sp, #16
   2d052:	4422      	add	r2, r4
   2d054:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2d058:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2d05a:	0719      	lsls	r1, r3, #28
   2d05c:	d50b      	bpl.n	2d076 <nrf_cloud_agps_request+0xa6>
		types[type_count++] = NRF_CLOUD_AGPS_GPS_TOWS;
   2d05e:	2006      	movs	r0, #6
   2d060:	a904      	add	r1, sp, #16
   2d062:	4421      	add	r1, r4
   2d064:	1c62      	adds	r2, r4, #1
   2d066:	f801 0c0c 	strb.w	r0, [r1, #-12]
		types[type_count++] = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2d06a:	a904      	add	r1, sp, #16
   2d06c:	440a      	add	r2, r1
   2d06e:	2107      	movs	r1, #7
   2d070:	3402      	adds	r4, #2
   2d072:	f802 1c0c 	strb.w	r1, [r2, #-12]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2d076:	06da      	lsls	r2, r3, #27
   2d078:	d505      	bpl.n	2d086 <nrf_cloud_agps_request+0xb6>
		types[type_count++] = NRF_CLOUD_AGPS_LOCATION;
   2d07a:	2108      	movs	r1, #8
   2d07c:	aa04      	add	r2, sp, #16
   2d07e:	4422      	add	r2, r4
   2d080:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2d084:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   2d086:	069b      	lsls	r3, r3, #26
   2d088:	d51f      	bpl.n	2d0ca <nrf_cloud_agps_request+0xfa>
		types[type_count++] = NRF_CLOUD_AGPS_INTEGRITY;
   2d08a:	2209      	movs	r2, #9
   2d08c:	ab04      	add	r3, sp, #16
   2d08e:	4423      	add	r3, r4
   2d090:	f803 2c0c 	strb.w	r2, [r3, #-12]
   2d094:	3401      	adds	r4, #1
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2d096:	4931      	ldr	r1, [pc, #196]	; (2d15c <nrf_cloud_agps_request+0x18c>)
   2d098:	4831      	ldr	r0, [pc, #196]	; (2d160 <nrf_cloud_agps_request+0x190>)
   2d09a:	f7fd fb9f 	bl	2a7dc <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d09e:	4931      	ldr	r1, [pc, #196]	; (2d164 <nrf_cloud_agps_request+0x194>)
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2d0a0:	4607      	mov	r7, r0
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d0a2:	f013 f9e0 	bl	40466 <cJSON_AddObjectToObject>
   2d0a6:	4680      	mov	r8, r0
	if (!agps_req_obj || !data_obj) {
   2d0a8:	2f00      	cmp	r7, #0
   2d0aa:	d03d      	beq.n	2d128 <nrf_cloud_agps_request+0x158>
   2d0ac:	2800      	cmp	r0, #0
   2d0ae:	d03b      	beq.n	2d128 <nrf_cloud_agps_request+0x158>
	err = nrf_cloud_json_add_modem_info(data_obj);
   2d0b0:	f7fd fbcc 	bl	2a84c <nrf_cloud_json_add_modem_info>
	if (err) {
   2d0b4:	4605      	mov	r5, r0
   2d0b6:	b198      	cbz	r0, 2d0e0 <nrf_cloud_agps_request+0x110>
		LOG_ERR("Failed to add modem info to A-GPS request: %d", err);
   2d0b8:	4602      	mov	r2, r0
   2d0ba:	2145      	movs	r1, #69	; 0x45
   2d0bc:	482a      	ldr	r0, [pc, #168]	; (2d168 <nrf_cloud_agps_request+0x198>)
   2d0be:	f010 f89c 	bl	3d1fa <z_log_minimal_printk>
	cJSON_Delete(agps_req_obj);
   2d0c2:	4638      	mov	r0, r7
   2d0c4:	f005 fa4e 	bl	32564 <cJSON_Delete>
	return err;
   2d0c8:	e006      	b.n	2d0d8 <nrf_cloud_agps_request+0x108>
	if (type_count == 0) {
   2d0ca:	2c00      	cmp	r4, #0
   2d0cc:	d1e3      	bne.n	2d096 <nrf_cloud_agps_request+0xc6>
		LOG_INF("No A-GPS data types requested");
   2d0ce:	2149      	movs	r1, #73	; 0x49
   2d0d0:	4826      	ldr	r0, [pc, #152]	; (2d16c <nrf_cloud_agps_request+0x19c>)
   2d0d2:	f010 f892 	bl	3d1fa <z_log_minimal_printk>
		return 0;
   2d0d6:	4625      	mov	r5, r4
}
   2d0d8:	4628      	mov	r0, r5
   2d0da:	b004      	add	sp, #16
   2d0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	array = cJSON_AddArrayToObject(obj, AGPS_JSON_TYPES_KEY);
   2d0e0:	4640      	mov	r0, r8
   2d0e2:	4923      	ldr	r1, [pc, #140]	; (2d170 <nrf_cloud_agps_request+0x1a0>)
   2d0e4:	f013 f995 	bl	40412 <cJSON_AddArrayToObject>
	if (!array) {
   2d0e8:	4681      	mov	r9, r0
   2d0ea:	b1b8      	cbz	r0, 2d11c <nrf_cloud_agps_request+0x14c>
   2d0ec:	f10d 0a04 	add.w	sl, sp, #4
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2d0f0:	f81a 0b01 	ldrb.w	r0, [sl], #1
   2d0f4:	f7ef fae6 	bl	1c6c4 <__aeabi_ui2d>
   2d0f8:	f7f1 fb6a 	bl	1e7d0 <cJSON_CreateNumber>
	for (size_t i = 0; i < type_count; i++) {
   2d0fc:	3501      	adds	r5, #1
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2d0fe:	4601      	mov	r1, r0
   2d100:	4648      	mov	r0, r9
   2d102:	f013 f8cf 	bl	402a4 <cJSON_AddItemToArray>
	for (size_t i = 0; i < type_count; i++) {
   2d106:	42a5      	cmp	r5, r4
   2d108:	d3f2      	bcc.n	2d0f0 <nrf_cloud_agps_request+0x120>
	if (cJSON_GetArraySize(array) != type_count) {
   2d10a:	4648      	mov	r0, r9
   2d10c:	f013 f8b2 	bl	40274 <cJSON_GetArraySize>
   2d110:	42a0      	cmp	r0, r4
   2d112:	d00c      	beq.n	2d12e <nrf_cloud_agps_request+0x15e>
		cJSON_DeleteItemFromObject(obj, AGPS_JSON_TYPES_KEY);
   2d114:	4640      	mov	r0, r8
   2d116:	4916      	ldr	r1, [pc, #88]	; (2d170 <nrf_cloud_agps_request+0x1a0>)
   2d118:	f013 f8f2 	bl	40300 <cJSON_DeleteItemFromObject>
		LOG_ERR("Failed to add types array to A-GPS request %d", err);
   2d11c:	f06f 020b 	mvn.w	r2, #11
   2d120:	2145      	movs	r1, #69	; 0x45
   2d122:	4814      	ldr	r0, [pc, #80]	; (2d174 <nrf_cloud_agps_request+0x1a4>)
   2d124:	f010 f869 	bl	3d1fa <z_log_minimal_printk>
		err = -ENOMEM;
   2d128:	f06f 050b 	mvn.w	r5, #11
   2d12c:	e7c9      	b.n	2d0c2 <nrf_cloud_agps_request+0xf2>
	err = json_send_to_cloud(agps_req_obj);
   2d12e:	4638      	mov	r0, r7
   2d130:	f7fd ff18 	bl	2af64 <json_send_to_cloud>
	if (!err) {
   2d134:	4605      	mov	r5, r0
   2d136:	2800      	cmp	r0, #0
   2d138:	d1c3      	bne.n	2d0c2 <nrf_cloud_agps_request+0xf2>
   2d13a:	2301      	movs	r3, #1
   2d13c:	e8d6 2fef 	ldaex	r2, [r6]
   2d140:	e8c6 3fe1 	stlex	r1, r3, [r6]
   2d144:	2900      	cmp	r1, #0
   2d146:	d0bc      	beq.n	2d0c2 <nrf_cloud_agps_request+0xf2>
   2d148:	e7f8      	b.n	2d13c <nrf_cloud_agps_request+0x16c>
		return -EACCES;
   2d14a:	f06f 050c 	mvn.w	r5, #12
   2d14e:	e7c3      	b.n	2d0d8 <nrf_cloud_agps_request+0x108>
   2d150:	2001a128 	.word	0x2001a128
   2d154:	20014f68 	.word	0x20014f68
   2d158:	2001a11c 	.word	0x2001a11c
   2d15c:	00043d5e 	.word	0x00043d5e
   2d160:	00049318 	.word	0x00049318
   2d164:	00043e3a 	.word	0x00043e3a
   2d168:	0004931d 	.word	0x0004931d
   2d16c:	000492f5 	.word	0x000492f5
   2d170:	00049350 	.word	0x00049350
   2d174:	00049356 	.word	0x00049356

0002d178 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len)
{
   2d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d17c:	4607      	mov	r7, r0
   2d17e:	b0cb      	sub	sp, #300	; 0x12c
   2d180:	9100      	str	r1, [sp, #0]
	int err;
	struct nrf_cloud_apgs_element element = {0};
	struct nrf_cloud_agps_system_time sys_time = {0};
   2d182:	228c      	movs	r2, #140	; 0x8c
   2d184:	2100      	movs	r1, #0
   2d186:	a803      	add	r0, sp, #12
   2d188:	f014 fcea 	bl	41b60 <memset>
	uint8_t version;
#if defined(CONFIG_NRF_CLOUD_AGPS_FILTERED)
	bool ephemerides_processed = false;
#endif

	if (!buf || (buf_len == 0)) {
   2d18c:	2f00      	cmp	r7, #0
   2d18e:	f000 8261 	beq.w	2d654 <nrf_cloud_agps_process+0x4dc>
   2d192:	9b00      	ldr	r3, [sp, #0]
   2d194:	2b00      	cmp	r3, #0
   2d196:	f000 825d 	beq.w	2d654 <nrf_cloud_agps_process+0x4dc>
	}

	/* Check for a potential A-GPS JSON error message from nRF Cloud */
	enum nrf_cloud_error nrf_err;

	err = nrf_cloud_handle_error_message(buf, NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2d19a:	4638      	mov	r0, r7
   2d19c:	4abb      	ldr	r2, [pc, #748]	; (2d48c <nrf_cloud_agps_process+0x314>)
   2d19e:	49bc      	ldr	r1, [pc, #752]	; (2d490 <nrf_cloud_agps_process+0x318>)
   2d1a0:	ab02      	add	r3, sp, #8
   2d1a2:	f7fe fae1 	bl	2b768 <nrf_cloud_handle_error_message>
		NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA, &nrf_err);
	if (!err) {
   2d1a6:	b950      	cbnz	r0, 2d1be <nrf_cloud_agps_process+0x46>
		LOG_ERR("nRF Cloud returned A-GPS error: %d", nrf_err);
   2d1a8:	2145      	movs	r1, #69	; 0x45
   2d1aa:	9a02      	ldr	r2, [sp, #8]
   2d1ac:	48b9      	ldr	r0, [pc, #740]	; (2d494 <nrf_cloud_agps_process+0x31c>)
   2d1ae:	f010 f824 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   2d1b2:	f06f 050d 	mvn.w	r5, #13

	LOG_DBG("A-GPS_inject_active UNLOCKED");
	k_sem_give(&agps_injection_active);

	return err;
}
   2d1b6:	4628      	mov	r0, r5
   2d1b8:	b04b      	add	sp, #300	; 0x12c
   2d1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (err == -ENODATA) { /* Not a JSON message, try to parse it as A-GPS data */
   2d1be:	303d      	adds	r0, #61	; 0x3d
   2d1c0:	f040 824b 	bne.w	2d65a <nrf_cloud_agps_process+0x4e2>
	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2d1c4:	783e      	ldrb	r6, [r7, #0]
	if (version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) {
   2d1c6:	2e01      	cmp	r6, #1
   2d1c8:	d007      	beq.n	2d1da <nrf_cloud_agps_process+0x62>
		LOG_ERR("Cannot parse schema version: %d", version);
   2d1ca:	4632      	mov	r2, r6
   2d1cc:	2145      	movs	r1, #69	; 0x45
   2d1ce:	48b2      	ldr	r0, [pc, #712]	; (2d498 <nrf_cloud_agps_process+0x320>)
   2d1d0:	f010 f813 	bl	3d1fa <z_log_minimal_printk>
		return -EBADMSG;
   2d1d4:	f06f 054c 	mvn.w	r5, #76	; 0x4c
   2d1d8:	e7ed      	b.n	2d1b6 <nrf_cloud_agps_process+0x3e>
	return z_impl_k_sem_take(sem, timeout);
   2d1da:	f04f 32ff 	mov.w	r2, #4294967295
   2d1de:	f04f 33ff 	mov.w	r3, #4294967295
   2d1e2:	48ae      	ldr	r0, [pc, #696]	; (2d49c <nrf_cloud_agps_process+0x324>)
   2d1e4:	f00a f910 	bl	37408 <z_impl_k_sem_take>
	if (err) {
   2d1e8:	4605      	mov	r5, r0
   2d1ea:	2800      	cmp	r0, #0
   2d1ec:	f000 822c 	beq.w	2d648 <nrf_cloud_agps_process+0x4d0>
		LOG_ERR("A-GPS injection already active.");
   2d1f0:	2145      	movs	r1, #69	; 0x45
   2d1f2:	48ab      	ldr	r0, [pc, #684]	; (2d4a0 <nrf_cloud_agps_process+0x328>)
   2d1f4:	f010 f801 	bl	3d1fa <z_log_minimal_printk>
		return err;
   2d1f8:	e7dd      	b.n	2d1b6 <nrf_cloud_agps_process+0x3e>
		element->type = element_type;
   2d1fa:	4aaa      	ldr	r2, [pc, #680]	; (2d4a4 <nrf_cloud_agps_process+0x32c>)
		elements_left_to_process -= 1;
   2d1fc:	3b01      	subs	r3, #1
   2d1fe:	f8aa 3000 	strh.w	r3, [sl]
		element->type = element_type;
   2d202:	f892 8000 	ldrb.w	r8, [r2]
	size_t len = 0;
   2d206:	2300      	movs	r3, #0
   2d208:	e02b      	b.n	2d262 <nrf_cloud_agps_process+0xea>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2d20a:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_utc);
   2d20c:	330e      	adds	r3, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2d20e:	f1b8 0f06 	cmp.w	r8, #6
		parsed_len += element_size;
   2d212:	441e      	add	r6, r3
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2d214:	d152      	bne.n	2d2bc <nrf_cloud_agps_process+0x144>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2d216:	7823      	ldrb	r3, [r4, #0]
   2d218:	a84a      	add	r0, sp, #296	; 0x128
   2d21a:	6821      	ldr	r1, [r4, #0]
   2d21c:	1e5a      	subs	r2, r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d21e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2d222:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   2d226:	6019      	str	r1, [r3, #0]
			if (element.tow->flags || element.tow->tlm) {
   2d228:	78e3      	ldrb	r3, [r4, #3]
   2d22a:	b913      	cbnz	r3, 2d232 <nrf_cloud_agps_process+0xba>
   2d22c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2d230:	b11b      	cbz	r3, 2d23a <nrf_cloud_agps_process+0xc2>
				sv_mask |= 1 << (element.tow->sv_id - 1);
   2d232:	2301      	movs	r3, #1
   2d234:	4093      	lsls	r3, r2
   2d236:	ea49 0903 	orr.w	r9, r9, r3
	while (parsed_len < buf_len) {
   2d23a:	9b00      	ldr	r3, [sp, #0]
   2d23c:	42b3      	cmp	r3, r6
   2d23e:	f240 8121 	bls.w	2d484 <nrf_cloud_agps_process+0x30c>
	if (elements_left_to_process == 0) {
   2d242:	f8ba 3000 	ldrh.w	r3, [sl]
			get_next_agps_element(&element, &buf[parsed_len]);
   2d246:	19bc      	adds	r4, r7, r6
	if (elements_left_to_process == 0) {
   2d248:	2b00      	cmp	r3, #0
   2d24a:	d1d6      	bne.n	2d1fa <nrf_cloud_agps_process+0x82>
		element_type = element->type;
   2d24c:	4b95      	ldr	r3, [pc, #596]	; (2d4a4 <nrf_cloud_agps_process+0x32c>)
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2d24e:	f817 8006 	ldrb.w	r8, [r7, r6]
		element_type = element->type;
   2d252:	f883 8000 	strb.w	r8, [r3]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2d256:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2d25a:	3b01      	subs	r3, #1
		elements_left_to_process =
   2d25c:	f8aa 3000 	strh.w	r3, [sl]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2d260:	2303      	movs	r3, #3
	switch (element->type) {
   2d262:	f108 32ff 	add.w	r2, r8, #4294967295
   2d266:	9201      	str	r2, [sp, #4]
   2d268:	2a08      	cmp	r2, #8
   2d26a:	f200 810b 	bhi.w	2d484 <nrf_cloud_agps_process+0x30c>
   2d26e:	a101      	add	r1, pc, #4	; (adr r1, 2d274 <nrf_cloud_agps_process+0xfc>)
   2d270:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2d274:	0002d20b 	.word	0x0002d20b
   2d278:	0002d299 	.word	0x0002d299
   2d27c:	0002d29f 	.word	0x0002d29f
   2d280:	0002d2a5 	.word	0x0002d2a5
   2d284:	0002d485 	.word	0x0002d485
   2d288:	0002d2b7 	.word	0x0002d2b7
   2d28c:	0002d2ab 	.word	0x0002d2ab
   2d290:	0002d2b1 	.word	0x0002d2b1
   2d294:	0002d2b7 	.word	0x0002d2b7
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2d298:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2d29a:	333e      	adds	r3, #62	; 0x3e
		break;
   2d29c:	e7b7      	b.n	2d20e <nrf_cloud_agps_process+0x96>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2d29e:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_almanac);
   2d2a0:	331f      	adds	r3, #31
		break;
   2d2a2:	e7b4      	b.n	2d20e <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2d2a4:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2d2a6:	3308      	adds	r3, #8
		break;
   2d2a8:	e7b1      	b.n	2d20e <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2d2aa:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2d2ac:	3310      	adds	r3, #16
		break;
   2d2ae:	e7ae      	b.n	2d20e <nrf_cloud_agps_process+0x96>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2d2b0:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_location);
   2d2b2:	330f      	adds	r3, #15
		break;
   2d2b4:	e7ab      	b.n	2d20e <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2d2b6:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_integrity);
   2d2b8:	3304      	adds	r3, #4
		break;
   2d2ba:	e7a8      	b.n	2d20e <nrf_cloud_agps_process+0x96>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2d2bc:	f1b8 0f07 	cmp.w	r8, #7
   2d2c0:	d108      	bne.n	2d2d4 <nrf_cloud_agps_process+0x15c>
			memcpy(&sys_time, element.time_and_tow,
   2d2c2:	6820      	ldr	r0, [r4, #0]
   2d2c4:	6861      	ldr	r1, [r4, #4]
   2d2c6:	ab03      	add	r3, sp, #12
   2d2c8:	c303      	stmia	r3!, {r0, r1}
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2d2ca:	68a3      	ldr	r3, [r4, #8]
			element.time_and_tow = &sys_time;
   2d2cc:	ac03      	add	r4, sp, #12
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2d2ce:	ea43 0309 	orr.w	r3, r3, r9
   2d2d2:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   2d2d4:	f04f 32ff 	mov.w	r2, #4294967295
   2d2d8:	f04f 33ff 	mov.w	r3, #4294967295
   2d2dc:	4658      	mov	r0, fp
   2d2de:	f009 fe05 	bl	36eec <z_impl_k_mutex_lock>
   2d2e2:	2300      	movs	r3, #0
   2d2e4:	4a70      	ldr	r2, [pc, #448]	; (2d4a8 <nrf_cloud_agps_process+0x330>)
   2d2e6:	e8d2 1fef 	ldaex	r1, [r2]
   2d2ea:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2d2ee:	2800      	cmp	r0, #0
   2d2f0:	d1f9      	bne.n	2d2e6 <nrf_cloud_agps_process+0x16e>
	switch (agps_data->type) {
   2d2f2:	9a01      	ldr	r2, [sp, #4]
   2d2f4:	2a08      	cmp	r2, #8
   2d2f6:	f200 81a0 	bhi.w	2d63a <nrf_cloud_agps_process+0x4c2>
   2d2fa:	e8df f012 	tbh	[pc, r2, lsl #1]
   2d2fe:	0009      	.short	0x0009
   2d300:	00db002a 	.word	0x00db002a
   2d304:	019e011e 	.word	0x019e011e
   2d308:	013e019e 	.word	0x013e019e
   2d30c:	01950171 	.word	0x01950171
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST;
   2d310:	4a66      	ldr	r2, [pc, #408]	; (2d4ac <nrf_cloud_agps_process+0x334>)
   2d312:	6893      	ldr	r3, [r2, #8]
   2d314:	f043 0301 	orr.w	r3, r3, #1
   2d318:	6093      	str	r3, [r2, #8]
	dst->a1		= src->utc->a1;
   2d31a:	6823      	ldr	r3, [r4, #0]
	dst->delta_tls	= src->utc->delta_tls;
   2d31c:	f994 000a 	ldrsb.w	r0, [r4, #10]
	dst->a1		= src->utc->a1;
   2d320:	9326      	str	r3, [sp, #152]	; 0x98
	dst->a0		= src->utc->a0;
   2d322:	6863      	ldr	r3, [r4, #4]
	dst->delta_tls	= src->utc->delta_tls;
   2d324:	f88d 00a2 	strb.w	r0, [sp, #162]	; 0xa2
	dst->a0		= src->utc->a0;
   2d328:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   2d32a:	7a23      	ldrb	r3, [r4, #8]
   2d32c:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   2d330:	7a63      	ldrb	r3, [r4, #9]
   2d332:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
	dst->wn_lsf	= src->utc->wn_lsf;
   2d336:	7ae3      	ldrb	r3, [r4, #11]
   2d338:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   2d33c:	7b23      	ldrb	r3, [r4, #12]
   2d33e:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2d342:	7b63      	ldrb	r3, [r4, #13]
   2d344:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
		nrf_cloud_pgps_set_leap_seconds(utc.delta_tls);
   2d348:	f001 fee0 	bl	2f10c <nrf_cloud_pgps_set_leap_seconds>
		return send_to_modem(&utc, sizeof(utc),
   2d34c:	2201      	movs	r2, #1
		return send_to_modem(&location, sizeof(location),
   2d34e:	2110      	movs	r1, #16
   2d350:	e088      	b.n	2d464 <nrf_cloud_agps_process+0x2ec>
		processed.sv_mask_ephe |= (1 << (agps_data->ephemeris->sv_id - 1));
   2d352:	2301      	movs	r3, #1
   2d354:	7822      	ldrb	r2, [r4, #0]
   2d356:	4955      	ldr	r1, [pc, #340]	; (2d4ac <nrf_cloud_agps_process+0x334>)
   2d358:	1e50      	subs	r0, r2, #1
   2d35a:	4083      	lsls	r3, r0
   2d35c:	6808      	ldr	r0, [r1, #0]
   2d35e:	4303      	orrs	r3, r0
   2d360:	600b      	str	r3, [r1, #0]
		if (agps_data->ephemeris->health ==
   2d362:	7863      	ldrb	r3, [r4, #1]
   2d364:	2bff      	cmp	r3, #255	; 0xff
   2d366:	f000 816d 	beq.w	2d644 <nrf_cloud_agps_process+0x4cc>
	dst->sv_id	= src->ephemeris->sv_id;
   2d36a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   2d36e:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   2d372:	78e2      	ldrb	r2, [r4, #3]
   2d374:	78a3      	ldrb	r3, [r4, #2]
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2d376:	2148      	movs	r1, #72	; 0x48
	dst->iodc	= src->ephemeris->iodc;
   2d378:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d37c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   2d380:	7962      	ldrb	r2, [r4, #5]
   2d382:	7923      	ldrb	r3, [r4, #4]
   2d384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d388:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   2d38c:	79a3      	ldrb	r3, [r4, #6]
   2d38e:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   2d392:	7a22      	ldrb	r2, [r4, #8]
   2d394:	79e3      	ldrb	r3, [r4, #7]
   2d396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d39a:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   2d39e:	f8d4 3009 	ldr.w	r3, [r4, #9]
   2d3a2:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   2d3a4:	7b63      	ldrb	r3, [r4, #13]
   2d3a6:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   2d3aa:	7ba3      	ldrb	r3, [r4, #14]
   2d3ac:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   2d3b0:	7be3      	ldrb	r3, [r4, #15]
   2d3b2:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   2d3b6:	7c62      	ldrb	r2, [r4, #17]
   2d3b8:	7c23      	ldrb	r3, [r4, #16]
   2d3ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d3be:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   2d3c2:	f8d4 3012 	ldr.w	r3, [r4, #18]
   2d3c6:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   2d3c8:	7de2      	ldrb	r2, [r4, #23]
   2d3ca:	7da3      	ldrb	r3, [r4, #22]
   2d3cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d3d0:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   2d3d4:	69a3      	ldr	r3, [r4, #24]
   2d3d6:	932e      	str	r3, [sp, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   2d3d8:	69e3      	ldr	r3, [r4, #28]
   2d3da:	932f      	str	r3, [sp, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   2d3dc:	6a23      	ldr	r3, [r4, #32]
   2d3de:	9330      	str	r3, [sp, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   2d3e0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   2d3e4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2d3e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d3ec:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2d3f0:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
   2d3f4:	9332      	str	r3, [sp, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   2d3f6:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
   2d3fa:	9333      	str	r3, [sp, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   2d3fc:	f8d4 302e 	ldr.w	r3, [r4, #46]	; 0x2e
   2d400:	9334      	str	r3, [sp, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   2d402:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   2d406:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   2d40a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d40e:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   2d412:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   2d416:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   2d41a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d41e:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   2d422:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   2d426:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   2d42a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d42e:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   2d432:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   2d436:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2d43a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d43e:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   2d442:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   2d446:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   2d44a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d44e:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   2d452:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   2d456:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2d45a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2d45e:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2d460:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2d464:	a826      	add	r0, sp, #152	; 0x98
   2d466:	f7ff fd9f 	bl	2cfa8 <send_to_modem>
   2d46a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2d46c:	4658      	mov	r0, fp
   2d46e:	f009 fe0f 	bl	37090 <z_impl_k_mutex_unlock>
		if (err) {
   2d472:	2c00      	cmp	r4, #0
   2d474:	f43f aee1 	beq.w	2d23a <nrf_cloud_agps_process+0xc2>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2d478:	4622      	mov	r2, r4
   2d47a:	2145      	movs	r1, #69	; 0x45
   2d47c:	480c      	ldr	r0, [pc, #48]	; (2d4b0 <nrf_cloud_agps_process+0x338>)
   2d47e:	f00f febc 	bl	3d1fa <z_log_minimal_printk>
   2d482:	4625      	mov	r5, r4
	z_impl_k_sem_give(sem);
   2d484:	4805      	ldr	r0, [pc, #20]	; (2d49c <nrf_cloud_agps_process+0x324>)
   2d486:	f009 ff83 	bl	37390 <z_impl_k_sem_give>
}
   2d48a:	e694      	b.n	2d1b6 <nrf_cloud_agps_process+0x3e>
   2d48c:	00043d5e 	.word	0x00043d5e
   2d490:	00049318 	.word	0x00049318
   2d494:	00049389 	.word	0x00049389
   2d498:	000493b1 	.word	0x000493b1
   2d49c:	20015000 	.word	0x20015000
   2d4a0:	000493d6 	.word	0x000493d6
   2d4a4:	2001c971 	.word	0x2001c971
   2d4a8:	2001a128 	.word	0x2001a128
   2d4ac:	2001a11c 	.word	0x2001a11c
   2d4b0:	0004941b 	.word	0x0004941b
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2d4b4:	2301      	movs	r3, #1
   2d4b6:	7822      	ldrb	r2, [r4, #0]
   2d4b8:	4969      	ldr	r1, [pc, #420]	; (2d660 <nrf_cloud_agps_process+0x4e8>)
   2d4ba:	1e50      	subs	r0, r2, #1
   2d4bc:	4083      	lsls	r3, r0
   2d4be:	6848      	ldr	r0, [r1, #4]
	dst->sv_id	= src->almanac->sv_id;
   2d4c0:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2d4c4:	4303      	orrs	r3, r0
   2d4c6:	604b      	str	r3, [r1, #4]
	dst->wn		= src->almanac->wn;
   2d4c8:	7863      	ldrb	r3, [r4, #1]
		return send_to_modem(&almanac, sizeof(almanac),
   2d4ca:	2120      	movs	r1, #32
	dst->wn		= src->almanac->wn;
   2d4cc:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   2d4d0:	78a3      	ldrb	r3, [r4, #2]
   2d4d2:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   2d4d6:	78e3      	ldrb	r3, [r4, #3]
   2d4d8:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->e		= src->almanac->e;
   2d4dc:	7962      	ldrb	r2, [r4, #5]
   2d4de:	7923      	ldrb	r3, [r4, #4]
   2d4e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d4e4:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   2d4e8:	79e2      	ldrb	r2, [r4, #7]
   2d4ea:	79a3      	ldrb	r3, [r4, #6]
   2d4ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d4f0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   2d4f4:	7a62      	ldrb	r2, [r4, #9]
   2d4f6:	7a23      	ldrb	r3, [r4, #8]
   2d4f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d4fc:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   2d500:	7aa3      	ldrb	r3, [r4, #10]
   2d502:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   2d506:	f8d4 300b 	ldr.w	r3, [r4, #11]
   2d50a:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   2d50c:	f8d4 300f 	ldr.w	r3, [r4, #15]
   2d510:	932a      	str	r3, [sp, #168]	; 0xa8
	dst->w		= src->almanac->w;
   2d512:	f8d4 3013 	ldr.w	r3, [r4, #19]
   2d516:	932b      	str	r3, [sp, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   2d518:	f8d4 3017 	ldr.w	r3, [r4, #23]
   2d51c:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   2d51e:	7f22      	ldrb	r2, [r4, #28]
   2d520:	7ee3      	ldrb	r3, [r4, #27]
   2d522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d526:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   2d52a:	7f63      	ldrb	r3, [r4, #29]
   2d52c:	7fa2      	ldrb	r2, [r4, #30]
   2d52e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d532:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   2d536:	2203      	movs	r2, #3
   2d538:	e794      	b.n	2d464 <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2d53a:	4a49      	ldr	r2, [pc, #292]	; (2d660 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2d53c:	2108      	movs	r1, #8
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2d53e:	6893      	ldr	r3, [r2, #8]
   2d540:	f043 0302 	orr.w	r3, r3, #2
   2d544:	6093      	str	r3, [r2, #8]
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2d546:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2d548:	2204      	movs	r2, #4
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2d54a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2d54e:	7863      	ldrb	r3, [r4, #1]
   2d550:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2d554:	78a3      	ldrb	r3, [r4, #2]
   2d556:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2d55a:	78e3      	ldrb	r3, [r4, #3]
   2d55c:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2d560:	7923      	ldrb	r3, [r4, #4]
   2d562:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2d566:	7963      	ldrb	r3, [r4, #5]
   2d568:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2d56c:	79a3      	ldrb	r3, [r4, #6]
   2d56e:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2d572:	79e3      	ldrb	r3, [r4, #7]
   2d574:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2d578:	e774      	b.n	2d464 <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2d57a:	4a39      	ldr	r2, [pc, #228]	; (2d660 <nrf_cloud_agps_process+0x4e8>)
   2d57c:	6893      	ldr	r3, [r2, #8]
   2d57e:	f043 0308 	orr.w	r3, r3, #8
   2d582:	6093      	str	r3, [r2, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2d584:	7862      	ldrb	r2, [r4, #1]
   2d586:	7823      	ldrb	r3, [r4, #0]
   2d588:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d58c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2d590:	f8d4 3002 	ldr.w	r3, [r4, #2]
   2d594:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2d596:	79a3      	ldrb	r3, [r4, #6]
   2d598:	79e2      	ldrb	r2, [r4, #7]
   2d59a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d59e:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2d5a2:	68a1      	ldr	r1, [r4, #8]
   2d5a4:	9129      	str	r1, [sp, #164]	; 0xa4
	if (src->time_and_tow->sv_mask == 0U) {
   2d5a6:	b931      	cbnz	r1, 2d5b6 <nrf_cloud_agps_process+0x43e>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2d5a8:	2280      	movs	r2, #128	; 0x80
   2d5aa:	a82a      	add	r0, sp, #168	; 0xa8
   2d5ac:	f014 fad8 	bl	41b60 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2d5b0:	2206      	movs	r2, #6
   2d5b2:	2190      	movs	r1, #144	; 0x90
   2d5b4:	e756      	b.n	2d464 <nrf_cloud_agps_process+0x2ec>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d5b6:	2300      	movs	r3, #0
   2d5b8:	aa26      	add	r2, sp, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2d5ba:	f104 000f 	add.w	r0, r4, #15
   2d5be:	f810 1023 	ldrb.w	r1, [r0, r3, lsl #2]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d5c2:	3204      	adds	r2, #4
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2d5c4:	7391      	strb	r1, [r2, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2d5c6:	1c99      	adds	r1, r3, #2
   2d5c8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   2d5cc:	f891 c005 	ldrb.w	ip, [r1, #5]
   2d5d0:	7989      	ldrb	r1, [r1, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d5d2:	3301      	adds	r3, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2d5d4:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d5d8:	2b20      	cmp	r3, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2d5da:	8191      	strh	r1, [r2, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d5dc:	d1ef      	bne.n	2d5be <nrf_cloud_agps_process+0x446>
   2d5de:	e7e7      	b.n	2d5b0 <nrf_cloud_agps_process+0x438>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2d5e0:	4a1f      	ldr	r2, [pc, #124]	; (2d660 <nrf_cloud_agps_process+0x4e8>)
		struct nrf_modem_gnss_agps_data_location location = {0};
   2d5e2:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2d5e6:	6893      	ldr	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2d5e8:	6820      	ldr	r0, [r4, #0]
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2d5ea:	f043 0310 	orr.w	r3, r3, #16
   2d5ee:	6093      	str	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2d5f0:	9026      	str	r0, [sp, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   2d5f2:	6861      	ldr	r1, [r4, #4]
   2d5f4:	9127      	str	r1, [sp, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   2d5f6:	7a62      	ldrb	r2, [r4, #9]
   2d5f8:	7a23      	ldrb	r3, [r4, #8]
   2d5fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d5fe:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   2d602:	7aa3      	ldrb	r3, [r4, #10]
   2d604:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   2d608:	7ae3      	ldrb	r3, [r4, #11]
   2d60a:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   2d60e:	7b23      	ldrb	r3, [r4, #12]
   2d610:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   2d614:	7b63      	ldrb	r3, [r4, #13]
   2d616:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   2d61a:	7ba3      	ldrb	r3, [r4, #14]
   2d61c:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
		nrf_cloud_pgps_set_location_normalized(location.latitude,
   2d620:	f001 fdd6 	bl	2f1d0 <nrf_cloud_pgps_set_location_normalized>
		return send_to_modem(&location, sizeof(location),
   2d624:	2207      	movs	r2, #7
   2d626:	e692      	b.n	2d34e <nrf_cloud_agps_process+0x1d6>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d628:	4a0d      	ldr	r2, [pc, #52]	; (2d660 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(agps_data->integrity,
   2d62a:	2104      	movs	r1, #4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d62c:	6893      	ldr	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d62e:	4620      	mov	r0, r4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d630:	f043 0320 	orr.w	r3, r3, #32
   2d634:	6093      	str	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d636:	2208      	movs	r2, #8
   2d638:	e715      	b.n	2d466 <nrf_cloud_agps_process+0x2ee>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2d63a:	4642      	mov	r2, r8
   2d63c:	2157      	movs	r1, #87	; 0x57
   2d63e:	4809      	ldr	r0, [pc, #36]	; (2d664 <nrf_cloud_agps_process+0x4ec>)
   2d640:	f00f fddb 	bl	3d1fa <z_log_minimal_printk>
	return 0;
   2d644:	2400      	movs	r4, #0
   2d646:	e711      	b.n	2d46c <nrf_cloud_agps_process+0x2f4>
	uint32_t sv_mask = 0;
   2d648:	4681      	mov	r9, r0
	if (elements_left_to_process == 0) {
   2d64a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 2d668 <nrf_cloud_agps_process+0x4f0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2d64e:	f8df b01c 	ldr.w	fp, [pc, #28]	; 2d66c <nrf_cloud_agps_process+0x4f4>
   2d652:	e5f2      	b.n	2d23a <nrf_cloud_agps_process+0xc2>
		return -EINVAL;
   2d654:	f06f 0515 	mvn.w	r5, #21
   2d658:	e5ad      	b.n	2d1b6 <nrf_cloud_agps_process+0x3e>
		return -ENOMSG;
   2d65a:	f06f 0522 	mvn.w	r5, #34	; 0x22
   2d65e:	e5aa      	b.n	2d1b6 <nrf_cloud_agps_process+0x3e>
   2d660:	2001a11c 	.word	0x2001a11c
   2d664:	000493fb 	.word	0x000493fb
   2d668:	2001a5a8 	.word	0x2001a5a8
   2d66c:	20014f68 	.word	0x20014f68

0002d670 <nrf_cloud_agps_processed>:

void nrf_cloud_agps_processed(struct nrf_modem_gnss_agps_data_frame *received_elements)
{
   2d670:	b510      	push	{r4, lr}
	if (received_elements) {
   2d672:	4604      	mov	r4, r0
   2d674:	b188      	cbz	r0, 2d69a <nrf_cloud_agps_processed+0x2a>
   2d676:	f04f 32ff 	mov.w	r2, #4294967295
   2d67a:	f04f 33ff 	mov.w	r3, #4294967295
   2d67e:	4807      	ldr	r0, [pc, #28]	; (2d69c <nrf_cloud_agps_processed+0x2c>)
   2d680:	f009 fc34 	bl	36eec <z_impl_k_mutex_lock>
   2d684:	4b06      	ldr	r3, [pc, #24]	; (2d6a0 <nrf_cloud_agps_processed+0x30>)
   2d686:	cb03      	ldmia	r3!, {r0, r1}
   2d688:	6020      	str	r0, [r4, #0]
   2d68a:	6061      	str	r1, [r4, #4]
   2d68c:	6818      	ldr	r0, [r3, #0]
   2d68e:	60a0      	str	r0, [r4, #8]
	return z_impl_k_mutex_unlock(mutex);
   2d690:	4802      	ldr	r0, [pc, #8]	; (2d69c <nrf_cloud_agps_processed+0x2c>)
		k_mutex_lock(&processed_lock, K_FOREVER);
		memcpy(received_elements, &processed, sizeof(*received_elements));
		k_mutex_unlock(&processed_lock);
	}
}
   2d692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d696:	f009 bcfb 	b.w	37090 <z_impl_k_mutex_unlock>
   2d69a:	bd10      	pop	{r4, pc}
   2d69c:	20014f68 	.word	0x20014f68
   2d6a0:	2001a11c 	.word	0x2001a11c

0002d6a4 <agps_print>:
}

void agps_print(uint16_t type, void *data)
{

	switch (type) {
   2d6a4:	3801      	subs	r0, #1
{
   2d6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d6aa:	460c      	mov	r4, r1
	switch (type) {
   2d6ac:	2807      	cmp	r0, #7
   2d6ae:	f200 816b 	bhi.w	2d988 <agps_print+0x2e4>
   2d6b2:	e8df f010 	tbh	[pc, r0, lsl #1]
   2d6b6:	0008      	.short	0x0008
   2d6b8:	00a50030 	.word	0x00a50030
   2d6bc:	010d00e3 	.word	0x010d00e3
   2d6c0:	01400112 	.word	0x01400112
   2d6c4:	0163      	.short	0x0163
	printk("utc:\n");
   2d6c6:	48b1      	ldr	r0, [pc, #708]	; (2d98c <agps_print+0x2e8>)
   2d6c8:	f00f fb7a 	bl	3cdc0 <printk>
	printk("\ta1: %d\n", data->a1);
   2d6cc:	6821      	ldr	r1, [r4, #0]
   2d6ce:	48b0      	ldr	r0, [pc, #704]	; (2d990 <agps_print+0x2ec>)
   2d6d0:	f00f fb76 	bl	3cdc0 <printk>
	printk("\ta0: %d\n", data->a0);
   2d6d4:	6861      	ldr	r1, [r4, #4]
   2d6d6:	48af      	ldr	r0, [pc, #700]	; (2d994 <agps_print+0x2f0>)
   2d6d8:	f00f fb72 	bl	3cdc0 <printk>
	printk("\ttot: %d\n", data->tot);
   2d6dc:	7a21      	ldrb	r1, [r4, #8]
   2d6de:	48ae      	ldr	r0, [pc, #696]	; (2d998 <agps_print+0x2f4>)
   2d6e0:	f00f fb6e 	bl	3cdc0 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2d6e4:	7a61      	ldrb	r1, [r4, #9]
   2d6e6:	48ad      	ldr	r0, [pc, #692]	; (2d99c <agps_print+0x2f8>)
   2d6e8:	f00f fb6a 	bl	3cdc0 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2d6ec:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2d6f0:	48ab      	ldr	r0, [pc, #684]	; (2d9a0 <agps_print+0x2fc>)
   2d6f2:	f00f fb65 	bl	3cdc0 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2d6f6:	7ae1      	ldrb	r1, [r4, #11]
   2d6f8:	48aa      	ldr	r0, [pc, #680]	; (2d9a4 <agps_print+0x300>)
   2d6fa:	f00f fb61 	bl	3cdc0 <printk>
	printk("\tdn: %d\n", data->dn);
   2d6fe:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2d702:	48a9      	ldr	r0, [pc, #676]	; (2d9a8 <agps_print+0x304>)
   2d704:	f00f fb5c 	bl	3cdc0 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2d708:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2d70c:	48a7      	ldr	r0, [pc, #668]	; (2d9ac <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2d70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2d712:	f00f bb55 	b.w	3cdc0 <printk>
	printk("ephemeris:\n");
   2d716:	48a6      	ldr	r0, [pc, #664]	; (2d9b0 <agps_print+0x30c>)
   2d718:	f00f fb52 	bl	3cdc0 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d71c:	7821      	ldrb	r1, [r4, #0]
   2d71e:	48a5      	ldr	r0, [pc, #660]	; (2d9b4 <agps_print+0x310>)
   2d720:	f00f fb4e 	bl	3cdc0 <printk>
	printk("\thealth: %d\n", data->health);
   2d724:	7861      	ldrb	r1, [r4, #1]
   2d726:	48a4      	ldr	r0, [pc, #656]	; (2d9b8 <agps_print+0x314>)
   2d728:	f00f fb4a 	bl	3cdc0 <printk>
	printk("\tiodc: %d\n", data->iodc);
   2d72c:	8861      	ldrh	r1, [r4, #2]
   2d72e:	48a3      	ldr	r0, [pc, #652]	; (2d9bc <agps_print+0x318>)
   2d730:	f00f fb46 	bl	3cdc0 <printk>
	printk("\ttoc: %d\n", data->toc);
   2d734:	88a1      	ldrh	r1, [r4, #4]
   2d736:	48a2      	ldr	r0, [pc, #648]	; (2d9c0 <agps_print+0x31c>)
   2d738:	f00f fb42 	bl	3cdc0 <printk>
	printk("\taf2: %d\n", data->af2);
   2d73c:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d740:	48a0      	ldr	r0, [pc, #640]	; (2d9c4 <agps_print+0x320>)
   2d742:	f00f fb3d 	bl	3cdc0 <printk>
	printk("\taf1: %d\n", data->af1);
   2d746:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d74a:	489f      	ldr	r0, [pc, #636]	; (2d9c8 <agps_print+0x324>)
   2d74c:	f00f fb38 	bl	3cdc0 <printk>
	printk("\taf0: %d\n", data->af0);
   2d750:	68e1      	ldr	r1, [r4, #12]
   2d752:	489e      	ldr	r0, [pc, #632]	; (2d9cc <agps_print+0x328>)
   2d754:	f00f fb34 	bl	3cdc0 <printk>
	printk("\ttgd: %d\n", data->tgd);
   2d758:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2d75c:	489c      	ldr	r0, [pc, #624]	; (2d9d0 <agps_print+0x32c>)
   2d75e:	f00f fb2f 	bl	3cdc0 <printk>
	printk("\tura: %d\n", data->ura);
   2d762:	7c61      	ldrb	r1, [r4, #17]
   2d764:	489b      	ldr	r0, [pc, #620]	; (2d9d4 <agps_print+0x330>)
   2d766:	f00f fb2b 	bl	3cdc0 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2d76a:	7ca1      	ldrb	r1, [r4, #18]
   2d76c:	489a      	ldr	r0, [pc, #616]	; (2d9d8 <agps_print+0x334>)
   2d76e:	f00f fb27 	bl	3cdc0 <printk>
	printk("\ttoe: %d\n", data->toe);
   2d772:	8aa1      	ldrh	r1, [r4, #20]
   2d774:	4899      	ldr	r0, [pc, #612]	; (2d9dc <agps_print+0x338>)
   2d776:	f00f fb23 	bl	3cdc0 <printk>
	printk("\tw: %d\n", data->w);
   2d77a:	69a1      	ldr	r1, [r4, #24]
   2d77c:	4898      	ldr	r0, [pc, #608]	; (2d9e0 <agps_print+0x33c>)
   2d77e:	f00f fb1f 	bl	3cdc0 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2d782:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d786:	4897      	ldr	r0, [pc, #604]	; (2d9e4 <agps_print+0x340>)
   2d788:	f00f fb1a 	bl	3cdc0 <printk>
	printk("\tm0: %d\n", data->m0);
   2d78c:	6a21      	ldr	r1, [r4, #32]
   2d78e:	4896      	ldr	r0, [pc, #600]	; (2d9e8 <agps_print+0x344>)
   2d790:	f00f fb16 	bl	3cdc0 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d794:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2d796:	4895      	ldr	r0, [pc, #596]	; (2d9ec <agps_print+0x348>)
   2d798:	f00f fb12 	bl	3cdc0 <printk>
	printk("\te: %d\n", data->e);
   2d79c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2d79e:	4894      	ldr	r0, [pc, #592]	; (2d9f0 <agps_print+0x34c>)
   2d7a0:	f00f fb0e 	bl	3cdc0 <printk>
	printk("\tidot: %d\n", data->idot);
   2d7a4:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2d7a8:	4892      	ldr	r0, [pc, #584]	; (2d9f4 <agps_print+0x350>)
   2d7aa:	f00f fb09 	bl	3cdc0 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d7ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2d7b0:	4891      	ldr	r0, [pc, #580]	; (2d9f8 <agps_print+0x354>)
   2d7b2:	f00f fb05 	bl	3cdc0 <printk>
	printk("\ti0: %d\n", data->i0);
   2d7b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2d7b8:	4890      	ldr	r0, [pc, #576]	; (2d9fc <agps_print+0x358>)
   2d7ba:	f00f fb01 	bl	3cdc0 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d7be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2d7c0:	488f      	ldr	r0, [pc, #572]	; (2da00 <agps_print+0x35c>)
   2d7c2:	f00f fafd 	bl	3cdc0 <printk>
	printk("\tcrs: %d\n", data->crs);
   2d7c6:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2d7ca:	488e      	ldr	r0, [pc, #568]	; (2da04 <agps_print+0x360>)
   2d7cc:	f00f faf8 	bl	3cdc0 <printk>
	printk("\tcis: %d\n", data->cis);
   2d7d0:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2d7d4:	488c      	ldr	r0, [pc, #560]	; (2da08 <agps_print+0x364>)
   2d7d6:	f00f faf3 	bl	3cdc0 <printk>
	printk("\tcus: %d\n", data->cus);
   2d7da:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2d7de:	488b      	ldr	r0, [pc, #556]	; (2da0c <agps_print+0x368>)
   2d7e0:	f00f faee 	bl	3cdc0 <printk>
	printk("\tcrc: %d\n", data->crc);
   2d7e4:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2d7e8:	4889      	ldr	r0, [pc, #548]	; (2da10 <agps_print+0x36c>)
   2d7ea:	f00f fae9 	bl	3cdc0 <printk>
	printk("\tcic: %d\n", data->cic);
   2d7ee:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2d7f2:	4888      	ldr	r0, [pc, #544]	; (2da14 <agps_print+0x370>)
   2d7f4:	f00f fae4 	bl	3cdc0 <printk>
	printk("\tcuc: %d\n", data->cuc);
   2d7f8:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2d7fc:	4886      	ldr	r0, [pc, #536]	; (2da18 <agps_print+0x374>)
   2d7fe:	e786      	b.n	2d70e <agps_print+0x6a>
	printk("almanac\n");
   2d800:	4886      	ldr	r0, [pc, #536]	; (2da1c <agps_print+0x378>)
   2d802:	f00f fadd 	bl	3cdc0 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d806:	7821      	ldrb	r1, [r4, #0]
   2d808:	486a      	ldr	r0, [pc, #424]	; (2d9b4 <agps_print+0x310>)
   2d80a:	f00f fad9 	bl	3cdc0 <printk>
	printk("\twn: %d\n", data->wn);
   2d80e:	7861      	ldrb	r1, [r4, #1]
   2d810:	4883      	ldr	r0, [pc, #524]	; (2da20 <agps_print+0x37c>)
   2d812:	f00f fad5 	bl	3cdc0 <printk>
	printk("\ttoa: %d\n", data->toa);
   2d816:	78a1      	ldrb	r1, [r4, #2]
   2d818:	4882      	ldr	r0, [pc, #520]	; (2da24 <agps_print+0x380>)
   2d81a:	f00f fad1 	bl	3cdc0 <printk>
	printk("\tioda: %d\n", data->ioda);
   2d81e:	78e1      	ldrb	r1, [r4, #3]
   2d820:	4881      	ldr	r0, [pc, #516]	; (2da28 <agps_print+0x384>)
   2d822:	f00f facd 	bl	3cdc0 <printk>
	printk("\te: %d\n", data->e);
   2d826:	88a1      	ldrh	r1, [r4, #4]
   2d828:	4871      	ldr	r0, [pc, #452]	; (2d9f0 <agps_print+0x34c>)
   2d82a:	f00f fac9 	bl	3cdc0 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2d82e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2d832:	487e      	ldr	r0, [pc, #504]	; (2da2c <agps_print+0x388>)
   2d834:	f00f fac4 	bl	3cdc0 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d838:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d83c:	486b      	ldr	r0, [pc, #428]	; (2d9ec <agps_print+0x348>)
   2d83e:	f00f fabf 	bl	3cdc0 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2d842:	7aa1      	ldrb	r1, [r4, #10]
   2d844:	487a      	ldr	r0, [pc, #488]	; (2da30 <agps_print+0x38c>)
   2d846:	f00f fabb 	bl	3cdc0 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d84a:	68e1      	ldr	r1, [r4, #12]
   2d84c:	486a      	ldr	r0, [pc, #424]	; (2d9f8 <agps_print+0x354>)
   2d84e:	f00f fab7 	bl	3cdc0 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d852:	6921      	ldr	r1, [r4, #16]
   2d854:	486a      	ldr	r0, [pc, #424]	; (2da00 <agps_print+0x35c>)
   2d856:	f00f fab3 	bl	3cdc0 <printk>
	printk("\tw: %d\n", data->w);
   2d85a:	6961      	ldr	r1, [r4, #20]
   2d85c:	4860      	ldr	r0, [pc, #384]	; (2d9e0 <agps_print+0x33c>)
   2d85e:	f00f faaf 	bl	3cdc0 <printk>
	printk("\tm0: %d\n", data->m0);
   2d862:	69a1      	ldr	r1, [r4, #24]
   2d864:	4860      	ldr	r0, [pc, #384]	; (2d9e8 <agps_print+0x344>)
   2d866:	f00f faab 	bl	3cdc0 <printk>
	printk("\taf0: %d\n", data->af0);
   2d86a:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d86e:	4857      	ldr	r0, [pc, #348]	; (2d9cc <agps_print+0x328>)
   2d870:	f00f faa6 	bl	3cdc0 <printk>
	printk("\taf1: %d\n", data->af1);
   2d874:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2d878:	4853      	ldr	r0, [pc, #332]	; (2d9c8 <agps_print+0x324>)
   2d87a:	e748      	b.n	2d70e <agps_print+0x6a>
	printk("klobuchar\n");
   2d87c:	486d      	ldr	r0, [pc, #436]	; (2da34 <agps_print+0x390>)
   2d87e:	f00f fa9f 	bl	3cdc0 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2d882:	f994 1000 	ldrsb.w	r1, [r4]
   2d886:	486c      	ldr	r0, [pc, #432]	; (2da38 <agps_print+0x394>)
   2d888:	f00f fa9a 	bl	3cdc0 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2d88c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2d890:	486a      	ldr	r0, [pc, #424]	; (2da3c <agps_print+0x398>)
   2d892:	f00f fa95 	bl	3cdc0 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2d896:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2d89a:	4869      	ldr	r0, [pc, #420]	; (2da40 <agps_print+0x39c>)
   2d89c:	f00f fa90 	bl	3cdc0 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2d8a0:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2d8a4:	4867      	ldr	r0, [pc, #412]	; (2da44 <agps_print+0x3a0>)
   2d8a6:	f00f fa8b 	bl	3cdc0 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2d8aa:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2d8ae:	4866      	ldr	r0, [pc, #408]	; (2da48 <agps_print+0x3a4>)
   2d8b0:	f00f fa86 	bl	3cdc0 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2d8b4:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2d8b8:	4864      	ldr	r0, [pc, #400]	; (2da4c <agps_print+0x3a8>)
   2d8ba:	f00f fa81 	bl	3cdc0 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2d8be:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d8c2:	4863      	ldr	r0, [pc, #396]	; (2da50 <agps_print+0x3ac>)
   2d8c4:	f00f fa7c 	bl	3cdc0 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2d8c8:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2d8cc:	4861      	ldr	r0, [pc, #388]	; (2da54 <agps_print+0x3b0>)
   2d8ce:	e71e      	b.n	2d70e <agps_print+0x6a>
		printk("nequick unhandled\n");
   2d8d0:	4861      	ldr	r0, [pc, #388]	; (2da58 <agps_print+0x3b4>)
}
   2d8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2d8d6:	f00f ba73 	b.w	3cdc0 <printk>
	printk("clock_and_tows\n");
   2d8da:	4860      	ldr	r0, [pc, #384]	; (2da5c <agps_print+0x3b8>)
   2d8dc:	f00f fa70 	bl	3cdc0 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2d8e0:	8821      	ldrh	r1, [r4, #0]
   2d8e2:	485f      	ldr	r0, [pc, #380]	; (2da60 <agps_print+0x3bc>)
   2d8e4:	f00f fa6c 	bl	3cdc0 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2d8e8:	6861      	ldr	r1, [r4, #4]
   2d8ea:	485e      	ldr	r0, [pc, #376]	; (2da64 <agps_print+0x3c0>)
   2d8ec:	f00f fa68 	bl	3cdc0 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2d8f0:	8921      	ldrh	r1, [r4, #8]
   2d8f2:	485d      	ldr	r0, [pc, #372]	; (2da68 <agps_print+0x3c4>)
   2d8f4:	f00f fa64 	bl	3cdc0 <printk>
	printk("\tsv_mask: 0x%08x\n", data->sv_mask);
   2d8f8:	68e1      	ldr	r1, [r4, #12]
   2d8fa:	485c      	ldr	r0, [pc, #368]	; (2da6c <agps_print+0x3c8>)
   2d8fc:	f00f fa60 	bl	3cdc0 <printk>
	printk("\tsv_tow\n");
   2d900:	485b      	ldr	r0, [pc, #364]	; (2da70 <agps_print+0x3cc>)
   2d902:	f00f fa5d 	bl	3cdc0 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d906:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2d908:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2daac <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d90c:	4f59      	ldr	r7, [pc, #356]	; (2da74 <agps_print+0x3d0>)
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d90e:	4e5a      	ldr	r6, [pc, #360]	; (2da78 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2d910:	4629      	mov	r1, r5
   2d912:	4640      	mov	r0, r8
   2d914:	f00f fa54 	bl	3cdc0 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d918:	8a21      	ldrh	r1, [r4, #16]
   2d91a:	4638      	mov	r0, r7
   2d91c:	f00f fa50 	bl	3cdc0 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d920:	3501      	adds	r5, #1
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d922:	7ca1      	ldrb	r1, [r4, #18]
   2d924:	4630      	mov	r0, r6
   2d926:	f00f fa4b 	bl	3cdc0 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d92a:	2d20      	cmp	r5, #32
   2d92c:	f104 0404 	add.w	r4, r4, #4
   2d930:	d1ee      	bne.n	2d910 <agps_print+0x26c>
}
   2d932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2d936:	4851      	ldr	r0, [pc, #324]	; (2da7c <agps_print+0x3d8>)
   2d938:	f00f fa42 	bl	3cdc0 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2d93c:	6821      	ldr	r1, [r4, #0]
   2d93e:	4850      	ldr	r0, [pc, #320]	; (2da80 <agps_print+0x3dc>)
   2d940:	f00f fa3e 	bl	3cdc0 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2d944:	6861      	ldr	r1, [r4, #4]
   2d946:	484f      	ldr	r0, [pc, #316]	; (2da84 <agps_print+0x3e0>)
   2d948:	f00f fa3a 	bl	3cdc0 <printk>
	printk("\taltitude: %d\n", data->altitude);
   2d94c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d950:	484d      	ldr	r0, [pc, #308]	; (2da88 <agps_print+0x3e4>)
   2d952:	f00f fa35 	bl	3cdc0 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2d956:	7aa1      	ldrb	r1, [r4, #10]
   2d958:	484c      	ldr	r0, [pc, #304]	; (2da8c <agps_print+0x3e8>)
   2d95a:	f00f fa31 	bl	3cdc0 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2d95e:	7ae1      	ldrb	r1, [r4, #11]
   2d960:	484b      	ldr	r0, [pc, #300]	; (2da90 <agps_print+0x3ec>)
   2d962:	f00f fa2d 	bl	3cdc0 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2d966:	7b21      	ldrb	r1, [r4, #12]
   2d968:	484a      	ldr	r0, [pc, #296]	; (2da94 <agps_print+0x3f0>)
   2d96a:	f00f fa29 	bl	3cdc0 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2d96e:	7b61      	ldrb	r1, [r4, #13]
   2d970:	4849      	ldr	r0, [pc, #292]	; (2da98 <agps_print+0x3f4>)
   2d972:	f00f fa25 	bl	3cdc0 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2d976:	7ba1      	ldrb	r1, [r4, #14]
   2d978:	4848      	ldr	r0, [pc, #288]	; (2da9c <agps_print+0x3f8>)
   2d97a:	e6c8      	b.n	2d70e <agps_print+0x6a>
	printk("integrity\n");
   2d97c:	4848      	ldr	r0, [pc, #288]	; (2daa0 <agps_print+0x3fc>)
   2d97e:	f00f fa1f 	bl	3cdc0 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2d982:	6821      	ldr	r1, [r4, #0]
   2d984:	4847      	ldr	r0, [pc, #284]	; (2daa4 <agps_print+0x400>)
   2d986:	e6c2      	b.n	2d70e <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2d988:	4847      	ldr	r0, [pc, #284]	; (2daa8 <agps_print+0x404>)
   2d98a:	e7a2      	b.n	2d8d2 <agps_print+0x22e>
   2d98c:	00049457 	.word	0x00049457
   2d990:	0004945d 	.word	0x0004945d
   2d994:	00049466 	.word	0x00049466
   2d998:	0004946f 	.word	0x0004946f
   2d99c:	00049479 	.word	0x00049479
   2d9a0:	00049484 	.word	0x00049484
   2d9a4:	00049494 	.word	0x00049494
   2d9a8:	000494a1 	.word	0x000494a1
   2d9ac:	000494aa 	.word	0x000494aa
   2d9b0:	000494bb 	.word	0x000494bb
   2d9b4:	000494c7 	.word	0x000494c7
   2d9b8:	000494d3 	.word	0x000494d3
   2d9bc:	000494e0 	.word	0x000494e0
   2d9c0:	000494eb 	.word	0x000494eb
   2d9c4:	000494f5 	.word	0x000494f5
   2d9c8:	000494ff 	.word	0x000494ff
   2d9cc:	00049509 	.word	0x00049509
   2d9d0:	00049513 	.word	0x00049513
   2d9d4:	0004951d 	.word	0x0004951d
   2d9d8:	00049527 	.word	0x00049527
   2d9dc:	00049535 	.word	0x00049535
   2d9e0:	0004953f 	.word	0x0004953f
   2d9e4:	00049547 	.word	0x00049547
   2d9e8:	00049555 	.word	0x00049555
   2d9ec:	0004955e 	.word	0x0004955e
   2d9f0:	0004956e 	.word	0x0004956e
   2d9f4:	00049576 	.word	0x00049576
   2d9f8:	00049581 	.word	0x00049581
   2d9fc:	0004958e 	.word	0x0004958e
   2da00:	00049597 	.word	0x00049597
   2da04:	000495a4 	.word	0x000495a4
   2da08:	000495ae 	.word	0x000495ae
   2da0c:	000495b8 	.word	0x000495b8
   2da10:	000495c2 	.word	0x000495c2
   2da14:	000495cc 	.word	0x000495cc
   2da18:	000495d6 	.word	0x000495d6
   2da1c:	000495e0 	.word	0x000495e0
   2da20:	000495e9 	.word	0x000495e9
   2da24:	000495f2 	.word	0x000495f2
   2da28:	000495fc 	.word	0x000495fc
   2da2c:	00049607 	.word	0x00049607
   2da30:	00049615 	.word	0x00049615
   2da34:	00049625 	.word	0x00049625
   2da38:	00049630 	.word	0x00049630
   2da3c:	0004963d 	.word	0x0004963d
   2da40:	0004964a 	.word	0x0004964a
   2da44:	00049657 	.word	0x00049657
   2da48:	00049664 	.word	0x00049664
   2da4c:	00049670 	.word	0x00049670
   2da50:	0004967c 	.word	0x0004967c
   2da54:	00049688 	.word	0x00049688
   2da58:	00049694 	.word	0x00049694
   2da5c:	000496a7 	.word	0x000496a7
   2da60:	000496b7 	.word	0x000496b7
   2da64:	000496c6 	.word	0x000496c6
   2da68:	000496d8 	.word	0x000496d8
   2da6c:	000496eb 	.word	0x000496eb
   2da70:	000496fd 	.word	0x000496fd
   2da74:	00049714 	.word	0x00049714
   2da78:	00049720 	.word	0x00049720
   2da7c:	000475bf 	.word	0x000475bf
   2da80:	00049732 	.word	0x00049732
   2da84:	00049741 	.word	0x00049741
   2da88:	00049751 	.word	0x00049751
   2da8c:	00049760 	.word	0x00049760
   2da90:	00049774 	.word	0x00049774
   2da94:	00049788 	.word	0x00049788
   2da98:	000497a0 	.word	0x000497a0
   2da9c:	000497b3 	.word	0x000497b3
   2daa0:	000497c4 	.word	0x000497c4
   2daa4:	000497cf 	.word	0x000497cf
   2daa8:	000497e4 	.word	0x000497e4
   2daac:	00049706 	.word	0x00049706

0002dab0 <log_pgps_header>:
		return -EINVAL;
	}
}

static void log_pgps_header(const char *msg, const struct nrf_cloud_pgps_header *header)
{
   2dab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2dab2:	460c      	mov	r4, r1
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2dab4:	888b      	ldrh	r3, [r1, #4]
{
   2dab6:	4602      	mov	r2, r0
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2dab8:	9302      	str	r3, [sp, #8]
   2daba:	884b      	ldrh	r3, [r1, #2]
   2dabc:	4809      	ldr	r0, [pc, #36]	; (2dae4 <log_pgps_header+0x34>)
   2dabe:	9301      	str	r3, [sp, #4]
   2dac0:	784b      	ldrb	r3, [r1, #1]
   2dac2:	9300      	str	r3, [sp, #0]
   2dac4:	780b      	ldrb	r3, [r1, #0]
   2dac6:	2149      	movs	r1, #73	; 0x49
   2dac8:	f00f fb97 	bl	3d1fa <z_log_minimal_printk>
		"count:%u", msg ? msg : "",
		header->schema_version & 0xFFU, header->array_type & 0xFFU,
		header->num_items, header->prediction_count);
	LOG_INF("  size:%u, period (minutes):%u, GPS day:%u, GPS time:%u",
   2dacc:	68e3      	ldr	r3, [r4, #12]
   2dace:	2149      	movs	r1, #73	; 0x49
   2dad0:	9301      	str	r3, [sp, #4]
   2dad2:	8963      	ldrh	r3, [r4, #10]
   2dad4:	88e2      	ldrh	r2, [r4, #6]
   2dad6:	9300      	str	r3, [sp, #0]
   2dad8:	4803      	ldr	r0, [pc, #12]	; (2dae8 <log_pgps_header+0x38>)
   2dada:	8923      	ldrh	r3, [r4, #8]
   2dadc:	f00f fb8d 	bl	3d1fa <z_log_minimal_printk>
		header->prediction_size,
		header->prediction_period_min,
		header->gps_day & 0xFFFFU, header->gps_time_of_day);
}
   2dae0:	b004      	add	sp, #16
   2dae2:	bd10      	pop	{r4, pc}
   2dae4:	000497fc 	.word	0x000497fc
   2dae8:	00049830 	.word	0x00049830

0002daec <validate_pgps_header>:

static bool validate_pgps_header(const struct nrf_cloud_pgps_header *header)
{
   2daec:	b510      	push	{r4, lr}
   2daee:	4604      	mov	r4, r0
	log_pgps_header("Checking P-GPS header: ", header);
   2daf0:	4601      	mov	r1, r0
   2daf2:	4811      	ldr	r0, [pc, #68]	; (2db38 <validate_pgps_header+0x4c>)
   2daf4:	f7ff ffdc 	bl	2dab0 <log_pgps_header>
	if ((header->schema_version != NRF_CLOUD_PGPS_BIN_SCHEMA_VERSION) ||
   2daf8:	7823      	ldrb	r3, [r4, #0]
   2dafa:	2b01      	cmp	r3, #1
   2dafc:	d10d      	bne.n	2db1a <validate_pgps_header+0x2e>
   2dafe:	7863      	ldrb	r3, [r4, #1]
   2db00:	2b0a      	cmp	r3, #10
   2db02:	d115      	bne.n	2db30 <validate_pgps_header+0x44>
	    (header->array_type != NRF_CLOUD_PGPS_PREDICTION_HEADER) ||
   2db04:	8860      	ldrh	r0, [r4, #2]
   2db06:	2801      	cmp	r0, #1
   2db08:	d112      	bne.n	2db30 <validate_pgps_header+0x44>
	    (header->num_items != 1) ||
   2db0a:	8923      	ldrh	r3, [r4, #8]
   2db0c:	2bf0      	cmp	r3, #240	; 0xf0
   2db0e:	d10f      	bne.n	2db30 <validate_pgps_header+0x44>
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
	    (header->prediction_count <= 0) ||
   2db10:	88a3      	ldrh	r3, [r4, #4]
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
   2db12:	3b01      	subs	r3, #1
   2db14:	2b29      	cmp	r3, #41	; 0x29
   2db16:	d80b      	bhi.n	2db30 <validate_pgps_header+0x44>
			LOG_WRN("One or more fields are wrong");
		}
		return false;
	}
	return true;
}
   2db18:	bd10      	pop	{r4, pc}
		if ((((uint8_t)header->schema_version) == 0xff) &&
   2db1a:	2bff      	cmp	r3, #255	; 0xff
   2db1c:	d108      	bne.n	2db30 <validate_pgps_header+0x44>
   2db1e:	7863      	ldrb	r3, [r4, #1]
   2db20:	2bff      	cmp	r3, #255	; 0xff
   2db22:	d105      	bne.n	2db30 <validate_pgps_header+0x44>
			LOG_WRN("Flash is erased.");
   2db24:	2157      	movs	r1, #87	; 0x57
   2db26:	4805      	ldr	r0, [pc, #20]	; (2db3c <validate_pgps_header+0x50>)
			LOG_WRN("One or more fields are wrong");
   2db28:	f00f fb67 	bl	3d1fa <z_log_minimal_printk>
		return false;
   2db2c:	2000      	movs	r0, #0
   2db2e:	e7f3      	b.n	2db18 <validate_pgps_header+0x2c>
			LOG_WRN("One or more fields are wrong");
   2db30:	2157      	movs	r1, #87	; 0x57
   2db32:	4803      	ldr	r0, [pc, #12]	; (2db40 <validate_pgps_header+0x54>)
   2db34:	e7f8      	b.n	2db28 <validate_pgps_header+0x3c>
   2db36:	bf00      	nop
   2db38:	0004986d 	.word	0x0004986d
   2db3c:	00049885 	.word	0x00049885
   2db40:	0004989b 	.word	0x0004989b

0002db44 <prediction_timer_handler>:
	}
}

static void prediction_timer_handler(struct k_timer *dummy)
{
	k_work_submit(&prediction_work);
   2db44:	4801      	ldr	r0, [pc, #4]	; (2db4c <prediction_timer_handler+0x8>)
   2db46:	f009 bf3d 	b.w	379c4 <k_work_submit>
   2db4a:	bf00      	nop
   2db4c:	200146b4 	.word	0x200146b4

0002db50 <cache_pgps_header>:
	return 0;
}

static void cache_pgps_header(const struct nrf_cloud_pgps_header *header)
{
	memcpy(&index.header, header, sizeof(*header));
   2db50:	4a10      	ldr	r2, [pc, #64]	; (2db94 <cache_pgps_header+0x44>)
{
   2db52:	b570      	push	{r4, r5, r6, lr}
   2db54:	4603      	mov	r3, r0
   2db56:	4614      	mov	r4, r2
   2db58:	f100 0610 	add.w	r6, r0, #16
   2db5c:	4615      	mov	r5, r2
   2db5e:	6818      	ldr	r0, [r3, #0]
   2db60:	6859      	ldr	r1, [r3, #4]
   2db62:	3308      	adds	r3, #8
   2db64:	c503      	stmia	r5!, {r0, r1}
   2db66:	42b3      	cmp	r3, r6
   2db68:	462a      	mov	r2, r5
   2db6a:	d1f7      	bne.n	2db5c <cache_pgps_header+0xc>

	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2db6c:	68e1      	ldr	r1, [r4, #12]
   2db6e:	8960      	ldrh	r0, [r4, #10]
   2db70:	f001 fada 	bl	2f128 <npgps_gps_day_time_to_sec>
						    index.header.gps_time_of_day);
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2db74:	8923      	ldrh	r3, [r4, #8]
	index.end_sec = index.start_sec +
			index.period_sec * index.header.prediction_count;
   2db76:	88a2      	ldrh	r2, [r4, #4]
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2db78:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   2db7c:	009b      	lsls	r3, r3, #2
   2db7e:	b29b      	uxth	r3, r3
   2db80:	8563      	strh	r3, [r4, #42]	; 0x2a
			index.period_sec * index.header.prediction_count;
   2db82:	4353      	muls	r3, r2
	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2db84:	e9c4 0104 	strd	r0, r1, [r4, #16]
	index.end_sec = index.start_sec +
   2db88:	1818      	adds	r0, r3, r0
   2db8a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2db8e:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
   2db92:	bd70      	pop	{r4, r5, r6, pc}
   2db94:	20015820 	.word	0x20015820

0002db98 <validate_prediction.constprop.0>:
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2db98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db9c:	4699      	mov	r9, r3
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2db9e:	7cc3      	ldrb	r3, [r0, #19]
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2dba0:	4604      	mov	r4, r0
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2dba2:	2b01      	cmp	r3, #1
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2dba4:	460e      	mov	r6, r1
   2dba6:	4617      	mov	r7, r2
   2dba8:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2dbac:	d106      	bne.n	2dbbc <validate_prediction.constprop.0+0x24>
   2dbae:	7803      	ldrb	r3, [r0, #0]
   2dbb0:	2b07      	cmp	r3, #7
   2dbb2:	d103      	bne.n	2dbbc <validate_prediction.constprop.0+0x24>
	    (p->time_type != NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) ||
   2dbb4:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   2dbb8:	2b01      	cmp	r3, #1
   2dbba:	d038      	beq.n	2dc2e <validate_prediction.constprop.0+0x96>
		LOG_ERR("invalid prediction header");
   2dbbc:	2145      	movs	r1, #69	; 0x45
   2dbbe:	4831      	ldr	r0, [pc, #196]	; (2dc84 <validate_prediction.constprop.0+0xec>)
   2dbc0:	f00f fb1b 	bl	3d1fa <z_log_minimal_printk>
		err = -EINVAL;
   2dbc4:	f06f 0515 	mvn.w	r5, #21
	int64_t gps_sec = npgps_gps_day_time_to_sec(gps_day,
   2dbc8:	4639      	mov	r1, r7
   2dbca:	4630      	mov	r0, r6
   2dbcc:	f001 faac 	bl	2f128 <npgps_gps_day_time_to_sec>
   2dbd0:	4680      	mov	r8, r0
   2dbd2:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2dbd4:	f8b4 0003 	ldrh.w	r0, [r4, #3]
   2dbd8:	f8d4 1005 	ldr.w	r1, [r4, #5]
   2dbdc:	f001 faa4 	bl	2f128 <npgps_gps_day_time_to_sec>
   2dbe0:	4602      	mov	r2, r0
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2dbe2:	468c      	mov	ip, r1
   2dbe4:	203c      	movs	r0, #60	; 0x3c
   2dbe6:	4613      	mov	r3, r2
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2dbe8:	4590      	cmp	r8, r2
   2dbea:	eb7b 0101 	sbcs.w	r1, fp, r1
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2dbee:	fbe9 3c00 	umlal	r3, ip, r9, r0
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2dbf2:	db03      	blt.n	2dbfc <validate_prediction.constprop.0+0x64>
   2dbf4:	4543      	cmp	r3, r8
   2dbf6:	eb7c 010b 	sbcs.w	r1, ip, fp
   2dbfa:	da07      	bge.n	2dc0c <validate_prediction.constprop.0+0x74>
		LOG_ERR("prediction does not contain desired time; "
   2dbfc:	9300      	str	r3, [sp, #0]
   2dbfe:	2145      	movs	r1, #69	; 0x45
   2dc00:	4643      	mov	r3, r8
   2dc02:	4821      	ldr	r0, [pc, #132]	; (2dc88 <validate_prediction.constprop.0+0xf0>)
   2dc04:	f00f faf9 	bl	3d1fa <z_log_minimal_printk>
		err = -EINVAL;
   2dc08:	f06f 0515 	mvn.w	r5, #21
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2dc0c:	7d22      	ldrb	r2, [r4, #20]
	    (p->ephemeris_count != NRF_CLOUD_PGPS_NUM_SV)) {
   2dc0e:	f8b4 3015 	ldrh.w	r3, [r4, #21]
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2dc12:	2a02      	cmp	r2, #2
   2dc14:	d101      	bne.n	2dc1a <validate_prediction.constprop.0+0x82>
   2dc16:	2b20      	cmp	r3, #32
   2dc18:	d020      	beq.n	2dc5c <validate_prediction.constprop.0+0xc4>
		LOG_ERR("ephemeris header bad:%u, %u",
   2dc1a:	2145      	movs	r1, #69	; 0x45
   2dc1c:	481b      	ldr	r0, [pc, #108]	; (2dc8c <validate_prediction.constprop.0+0xf4>)
   2dc1e:	f00f faec 	bl	3d1fa <z_log_minimal_printk>
			err = -EINVAL;
   2dc22:	f06f 0515 	mvn.w	r5, #21
}
   2dc26:	4628      	mov	r0, r5
   2dc28:	b003      	add	sp, #12
   2dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (exact && (p->time.date_day != gps_day)) {
   2dc2e:	f1ba 0f00 	cmp.w	sl, #0
   2dc32:	d011      	beq.n	2dc58 <validate_prediction.constprop.0+0xc0>
   2dc34:	f8b0 2003 	ldrh.w	r2, [r0, #3]
   2dc38:	428a      	cmp	r2, r1
   2dc3a:	d005      	beq.n	2dc48 <validate_prediction.constprop.0+0xb0>
		LOG_ERR("prediction day:%u, expected:%u",
   2dc3c:	460b      	mov	r3, r1
   2dc3e:	2145      	movs	r1, #69	; 0x45
   2dc40:	4813      	ldr	r0, [pc, #76]	; (2dc90 <validate_prediction.constprop.0+0xf8>)
		LOG_ERR("prediction time:%u, expected:%u",
   2dc42:	f00f fada 	bl	3d1fa <z_log_minimal_printk>
   2dc46:	e7bd      	b.n	2dbc4 <validate_prediction.constprop.0+0x2c>
	} else if (exact && (p->time.time_full_s != gps_time_of_day)) {
   2dc48:	f8d0 2005 	ldr.w	r2, [r0, #5]
   2dc4c:	42ba      	cmp	r2, r7
   2dc4e:	d003      	beq.n	2dc58 <validate_prediction.constprop.0+0xc0>
		LOG_ERR("prediction time:%u, expected:%u",
   2dc50:	463b      	mov	r3, r7
   2dc52:	2145      	movs	r1, #69	; 0x45
   2dc54:	480f      	ldr	r0, [pc, #60]	; (2dc94 <validate_prediction.constprop.0+0xfc>)
   2dc56:	e7f4      	b.n	2dc42 <validate_prediction.constprop.0+0xaa>
	int err = 0;
   2dc58:	2500      	movs	r5, #0
   2dc5a:	e7b5      	b.n	2dbc8 <validate_prediction.constprop.0+0x30>
	if (exact && !err) {
   2dc5c:	f1ba 0f00 	cmp.w	sl, #0
   2dc60:	d0e1      	beq.n	2dc26 <validate_prediction.constprop.0+0x8e>
   2dc62:	2d00      	cmp	r5, #0
   2dc64:	d1df      	bne.n	2dc26 <validate_prediction.constprop.0+0x8e>
		expected_sentinel = npgps_gps_day_time_to_sec(gps_day,
   2dc66:	4639      	mov	r1, r7
   2dc68:	4630      	mov	r0, r6
   2dc6a:	f001 fa5d 	bl	2f128 <npgps_gps_day_time_to_sec>
		stored_sentinel = p->sentinel;
   2dc6e:	f8d4 37d7 	ldr.w	r3, [r4, #2007]	; 0x7d7
		if (expected_sentinel != stored_sentinel) {
   2dc72:	4298      	cmp	r0, r3
   2dc74:	d0d7      	beq.n	2dc26 <validate_prediction.constprop.0+0x8e>
			LOG_ERR("prediction at:%p has stored_sentinel:0x%08X, "
   2dc76:	9000      	str	r0, [sp, #0]
   2dc78:	4622      	mov	r2, r4
   2dc7a:	2145      	movs	r1, #69	; 0x45
   2dc7c:	4806      	ldr	r0, [pc, #24]	; (2dc98 <validate_prediction.constprop.0+0x100>)
   2dc7e:	f00f fabc 	bl	3d1fa <z_log_minimal_printk>
   2dc82:	e7ce      	b.n	2dc22 <validate_prediction.constprop.0+0x8a>
   2dc84:	000498bd 	.word	0x000498bd
   2dc88:	00049925 	.word	0x00049925
   2dc8c:	0004996d 	.word	0x0004996d
   2dc90:	000498dc 	.word	0x000498dc
   2dc94:	00049900 	.word	0x00049900
   2dc98:	0004998e 	.word	0x0004998e

0002dc9c <open_storage>:
{
   2dc9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2dca0:	4604      	mov	r4, r0
   2dca2:	460f      	mov	r7, r1
   2dca4:	b085      	sub	sp, #20
   2dca6:	4929      	ldr	r1, [pc, #164]	; (2dd4c <open_storage+0xb0>)
   2dca8:	4608      	mov	r0, r1
   2dcaa:	f013 fcd2 	bl	41652 <z_device_is_ready>
	if (!device_is_ready(flash_dev)) {
   2dcae:	4927      	ldr	r1, [pc, #156]	; (2dd4c <open_storage+0xb0>)
   2dcb0:	b950      	cbnz	r0, 2dcc8 <open_storage+0x2c>
		LOG_ERR("Flash device not ready:'%s'", flash_dev->name);
   2dcb2:	680a      	ldr	r2, [r1, #0]
   2dcb4:	4826      	ldr	r0, [pc, #152]	; (2dd50 <open_storage+0xb4>)
   2dcb6:	2145      	movs	r1, #69	; 0x45
   2dcb8:	f00f fa9f 	bl	3d1fa <z_log_minimal_printk>
		return -ENODEV;
   2dcbc:	f06f 0412 	mvn.w	r4, #18
}
   2dcc0:	4620      	mov	r0, r4
   2dcc2:	b005      	add	sp, #20
   2dcc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	block_offset = offset % flash_page_size;
   2dcc8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2dd70 <open_storage+0xd4>
	err = stream_flash_init(&stream, flash_dev,
   2dccc:	4a21      	ldr	r2, [pc, #132]	; (2dd54 <open_storage+0xb8>)
	block_offset = offset % flash_page_size;
   2dcce:	f8d8 3000 	ldr.w	r3, [r8]
	err = stream_flash_init(&stream, flash_dev,
   2dcd2:	6812      	ldr	r2, [r2, #0]
	block_offset = offset % flash_page_size;
   2dcd4:	fbb4 f5f3 	udiv	r5, r4, r3
   2dcd8:	fb03 4515 	mls	r5, r3, r5, r4
	err = stream_flash_init(&stream, flash_dev,
   2dcdc:	9202      	str	r2, [sp, #8]
				((uint32_t)storage) + offset,
   2dcde:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2dd74 <open_storage+0xd8>
	err = stream_flash_init(&stream, flash_dev,
   2dce2:	4a1d      	ldr	r2, [pc, #116]	; (2dd58 <open_storage+0xbc>)
	offset -= block_offset;
   2dce4:	1b66      	subs	r6, r4, r5
	err = stream_flash_init(&stream, flash_dev,
   2dce6:	6810      	ldr	r0, [r2, #0]
   2dce8:	f8d9 2000 	ldr.w	r2, [r9]
   2dcec:	1b2c      	subs	r4, r5, r4
   2dcee:	4432      	add	r2, r6
   2dcf0:	4404      	add	r4, r0
   2dcf2:	9200      	str	r2, [sp, #0]
   2dcf4:	4a19      	ldr	r2, [pc, #100]	; (2dd5c <open_storage+0xc0>)
   2dcf6:	9401      	str	r4, [sp, #4]
   2dcf8:	6812      	ldr	r2, [r2, #0]
   2dcfa:	4819      	ldr	r0, [pc, #100]	; (2dd60 <open_storage+0xc4>)
   2dcfc:	f7f4 fb2e 	bl	2235c <stream_flash_init>
	if (err) {
   2dd00:	4604      	mov	r4, r0
   2dd02:	b148      	cbz	r0, 2dd18 <open_storage+0x7c>
		LOG_ERR("Failed to init flash stream for offset %u: %d",
   2dd04:	4603      	mov	r3, r0
   2dd06:	4632      	mov	r2, r6
   2dd08:	2145      	movs	r1, #69	; 0x45
   2dd0a:	4816      	ldr	r0, [pc, #88]	; (2dd64 <open_storage+0xc8>)
   2dd0c:	f00f fa75 	bl	3d1fa <z_log_minimal_printk>
		state = PGPS_NONE;
   2dd10:	2200      	movs	r2, #0
   2dd12:	4b15      	ldr	r3, [pc, #84]	; (2dd68 <open_storage+0xcc>)
   2dd14:	701a      	strb	r2, [r3, #0]
		return err;
   2dd16:	e7d3      	b.n	2dcc0 <open_storage+0x24>
	if (preserve && (block_offset != 0) && (block_offset < flash_page_size)) {
   2dd18:	2f00      	cmp	r7, #0
   2dd1a:	d0d1      	beq.n	2dcc0 <open_storage+0x24>
   2dd1c:	2d00      	cmp	r5, #0
   2dd1e:	d0cf      	beq.n	2dcc0 <open_storage+0x24>
   2dd20:	f8d8 3000 	ldr.w	r3, [r8]
   2dd24:	42ab      	cmp	r3, r5
   2dd26:	d9cb      	bls.n	2dcc0 <open_storage+0x24>
		uint8_t *p = storage + offset;
   2dd28:	f8d9 1000 	ldr.w	r1, [r9]
		err = stream_flash_buffered_write(&stream, p, block_offset, false);
   2dd2c:	4603      	mov	r3, r0
   2dd2e:	462a      	mov	r2, r5
   2dd30:	480b      	ldr	r0, [pc, #44]	; (2dd60 <open_storage+0xc4>)
   2dd32:	4431      	add	r1, r6
   2dd34:	f00f ff55 	bl	3dbe2 <stream_flash_buffered_write>
		if (err) {
   2dd38:	4604      	mov	r4, r0
   2dd3a:	2800      	cmp	r0, #0
   2dd3c:	d0c0      	beq.n	2dcc0 <open_storage+0x24>
			LOG_ERR("Error writing back %u original bytes", block_offset);
   2dd3e:	462a      	mov	r2, r5
   2dd40:	2145      	movs	r1, #69	; 0x45
   2dd42:	480a      	ldr	r0, [pc, #40]	; (2dd6c <open_storage+0xd0>)
   2dd44:	f00f fa59 	bl	3d1fa <z_log_minimal_printk>
   2dd48:	e7ba      	b.n	2dcc0 <open_storage+0x24>
   2dd4a:	bf00      	nop
   2dd4c:	00042b00 	.word	0x00042b00
   2dd50:	000499d0 	.word	0x000499d0
   2dd54:	2001a130 	.word	0x2001a130
   2dd58:	2001a140 	.word	0x2001a140
   2dd5c:	2001a168 	.word	0x2001a168
   2dd60:	2001a144 	.word	0x2001a144
   2dd64:	000499f1 	.word	0x000499f1
   2dd68:	2001d2d9 	.word	0x2001d2d9
   2dd6c:	00049a24 	.word	0x00049a24
   2dd70:	2001a134 	.word	0x2001a134
   2dd74:	2001a13c 	.word	0x2001a13c

0002dd78 <nrf_cloud_pgps_loading>:
		(state == PGPS_REQUESTING) ||
   2dd78:	4b03      	ldr	r3, [pc, #12]	; (2dd88 <nrf_cloud_pgps_loading+0x10>)
   2dd7a:	7818      	ldrb	r0, [r3, #0]
   2dd7c:	3803      	subs	r0, #3
}
   2dd7e:	2802      	cmp	r0, #2
   2dd80:	bf8c      	ite	hi
   2dd82:	2000      	movhi	r0, #0
   2dd84:	2001      	movls	r0, #1
   2dd86:	4770      	bx	lr
   2dd88:	2001d2d9 	.word	0x2001d2d9

0002dd8c <pgps_request>:
{
   2dd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (state == PGPS_NONE) {
   2dd8e:	4f3f      	ldr	r7, [pc, #252]	; (2de8c <pgps_request+0x100>)
{
   2dd90:	4605      	mov	r5, r0
	if (state == PGPS_NONE) {
   2dd92:	783b      	ldrb	r3, [r7, #0]
   2dd94:	b93b      	cbnz	r3, 2dda6 <pgps_request+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2dd96:	2145      	movs	r1, #69	; 0x45
   2dd98:	483d      	ldr	r0, [pc, #244]	; (2de90 <pgps_request+0x104>)
   2dd9a:	f00f fa2e 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2dd9e:	f06f 0415 	mvn.w	r4, #21
}
   2dda2:	4620      	mov	r0, r4
   2dda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (nrf_cloud_pgps_loading()) {
   2dda6:	f7ff ffe7 	bl	2dd78 <nrf_cloud_pgps_loading>
   2ddaa:	2800      	cmp	r0, #0
   2ddac:	d16c      	bne.n	2de88 <pgps_request+0xfc>
	if (request->prediction_count < index.header.prediction_count) {
   2ddae:	4b39      	ldr	r3, [pc, #228]	; (2de94 <pgps_request+0x108>)
   2ddb0:	882c      	ldrh	r4, [r5, #0]
   2ddb2:	8899      	ldrh	r1, [r3, #4]
   2ddb4:	b2a2      	uxth	r2, r4
   2ddb6:	428a      	cmp	r2, r1
		index.partial_request = true;
   2ddb8:	bf3e      	ittt	cc
   2ddba:	2001      	movcc	r0, #1
		index.pnum_offset = index.header.prediction_count -
   2ddbc:	1a89      	subcc	r1, r1, r2
   2ddbe:	f883 102d 	strbcc.w	r1, [r3, #45]	; 0x2d
	ignore_packets = false;
   2ddc2:	f04f 0100 	mov.w	r1, #0
		index.partial_request = true;
   2ddc6:	bf32      	itee	cc
   2ddc8:	f883 002f 	strbcc.w	r0, [r3, #47]	; 0x2f
		index.partial_request = false;
   2ddcc:	f883 002f 	strbcs.w	r0, [r3, #47]	; 0x2f
		index.pnum_offset = 0;
   2ddd0:	f883 002d 	strbcs.w	r0, [r3, #45]	; 0x2d
	index.expected_count = request->prediction_count;
   2ddd4:	84dc      	strh	r4, [r3, #38]	; 0x26
	ignore_packets = false;
   2ddd6:	4b30      	ldr	r3, [pc, #192]	; (2de98 <pgps_request+0x10c>)
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2ddd8:	4830      	ldr	r0, [pc, #192]	; (2de9c <pgps_request+0x110>)
	ignore_packets = false;
   2ddda:	7019      	strb	r1, [r3, #0]
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2dddc:	2149      	movs	r1, #73	; 0x49
   2ddde:	f00f fa0c 	bl	3d1fa <z_log_minimal_printk>
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2dde2:	492f      	ldr	r1, [pc, #188]	; (2dea0 <pgps_request+0x114>)
   2dde4:	482f      	ldr	r0, [pc, #188]	; (2dea4 <pgps_request+0x118>)
   2dde6:	f7fc fcf9 	bl	2a7dc <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2ddea:	492f      	ldr	r1, [pc, #188]	; (2dea8 <pgps_request+0x11c>)
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2ddec:	4606      	mov	r6, r0
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2ddee:	f012 fb3a 	bl	40466 <cJSON_AddObjectToObject>
   2ddf2:	4604      	mov	r4, r0
	if (!pgps_req_obj || !data_obj) {
   2ddf4:	b17e      	cbz	r6, 2de16 <pgps_request+0x8a>
   2ddf6:	b170      	cbz	r0, 2de16 <pgps_request+0x8a>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_PRED_COUNT,
   2ddf8:	8828      	ldrh	r0, [r5, #0]
   2ddfa:	f7ee fc63 	bl	1c6c4 <__aeabi_ui2d>
   2ddfe:	4602      	mov	r2, r0
   2de00:	460b      	mov	r3, r1
   2de02:	4620      	mov	r0, r4
   2de04:	4929      	ldr	r1, [pc, #164]	; (2deac <pgps_request+0x120>)
   2de06:	f012 faad 	bl	40364 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2de0a:	4602      	mov	r2, r0
   2de0c:	b930      	cbnz	r0, 2de1c <pgps_request+0x90>
		LOG_ERR("Failed to add pred count to P-GPS request:%d", err);
   2de0e:	2145      	movs	r1, #69	; 0x45
   2de10:	4827      	ldr	r0, [pc, #156]	; (2deb0 <pgps_request+0x124>)
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2de12:	f00f f9f2 	bl	3d1fa <z_log_minimal_printk>
		err = -ENOMEM;
   2de16:	f06f 040b 	mvn.w	r4, #11
   2de1a:	e031      	b.n	2de80 <pgps_request+0xf4>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_INT_MIN,
   2de1c:	8868      	ldrh	r0, [r5, #2]
   2de1e:	f7ee fc51 	bl	1c6c4 <__aeabi_ui2d>
   2de22:	4602      	mov	r2, r0
   2de24:	460b      	mov	r3, r1
   2de26:	4620      	mov	r0, r4
   2de28:	4922      	ldr	r1, [pc, #136]	; (2deb4 <pgps_request+0x128>)
   2de2a:	f012 fa9b 	bl	40364 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2de2e:	4602      	mov	r2, r0
   2de30:	b910      	cbnz	r0, 2de38 <pgps_request+0xac>
		LOG_ERR("Failed to add pred int min to P-GPS request:%d", err);
   2de32:	2145      	movs	r1, #69	; 0x45
   2de34:	4820      	ldr	r0, [pc, #128]	; (2deb8 <pgps_request+0x12c>)
   2de36:	e7ec      	b.n	2de12 <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_DAY,
   2de38:	88a8      	ldrh	r0, [r5, #4]
   2de3a:	f7ee fc43 	bl	1c6c4 <__aeabi_ui2d>
   2de3e:	4602      	mov	r2, r0
   2de40:	460b      	mov	r3, r1
   2de42:	4620      	mov	r0, r4
   2de44:	491d      	ldr	r1, [pc, #116]	; (2debc <pgps_request+0x130>)
   2de46:	f012 fa8d 	bl	40364 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2de4a:	4602      	mov	r2, r0
   2de4c:	b910      	cbnz	r0, 2de54 <pgps_request+0xc8>
		LOG_ERR("Failed to add gps day to P-GPS request:%d", err);
   2de4e:	2145      	movs	r1, #69	; 0x45
   2de50:	481b      	ldr	r0, [pc, #108]	; (2dec0 <pgps_request+0x134>)
   2de52:	e7de      	b.n	2de12 <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_TIME,
   2de54:	f8d5 0006 	ldr.w	r0, [r5, #6]
   2de58:	f7ee fc34 	bl	1c6c4 <__aeabi_ui2d>
   2de5c:	4602      	mov	r2, r0
   2de5e:	460b      	mov	r3, r1
   2de60:	4620      	mov	r0, r4
   2de62:	4918      	ldr	r1, [pc, #96]	; (2dec4 <pgps_request+0x138>)
   2de64:	f012 fa7e 	bl	40364 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2de68:	4602      	mov	r2, r0
   2de6a:	b910      	cbnz	r0, 2de72 <pgps_request+0xe6>
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2de6c:	2145      	movs	r1, #69	; 0x45
   2de6e:	4816      	ldr	r0, [pc, #88]	; (2dec8 <pgps_request+0x13c>)
   2de70:	e7cf      	b.n	2de12 <pgps_request+0x86>
	err = json_send_to_cloud(pgps_req_obj);
   2de72:	4630      	mov	r0, r6
   2de74:	f7fd f876 	bl	2af64 <json_send_to_cloud>
	if (!err) {
   2de78:	4604      	mov	r4, r0
   2de7a:	b908      	cbnz	r0, 2de80 <pgps_request+0xf4>
		state = PGPS_REQUESTING;
   2de7c:	2304      	movs	r3, #4
   2de7e:	703b      	strb	r3, [r7, #0]
	cJSON_Delete(pgps_req_obj);
   2de80:	4630      	mov	r0, r6
   2de82:	f004 fb6f 	bl	32564 <cJSON_Delete>
	return err;
   2de86:	e78c      	b.n	2dda2 <pgps_request+0x16>
		return 0;
   2de88:	2400      	movs	r4, #0
   2de8a:	e78a      	b.n	2dda2 <pgps_request+0x16>
   2de8c:	2001d2d9 	.word	0x2001d2d9
   2de90:	00049a4e 	.word	0x00049a4e
   2de94:	20015820 	.word	0x20015820
   2de98:	2001c9f3 	.word	0x2001c9f3
   2de9c:	00049a77 	.word	0x00049a77
   2dea0:	00043d5e 	.word	0x00043d5e
   2dea4:	00048aac 	.word	0x00048aac
   2dea8:	00043e3a 	.word	0x00043e3a
   2deac:	00049a99 	.word	0x00049a99
   2deb0:	00049aa9 	.word	0x00049aa9
   2deb4:	00049adb 	.word	0x00049adb
   2deb8:	00049af5 	.word	0x00049af5
   2debc:	00049b29 	.word	0x00049b29
   2dec0:	00049b35 	.word	0x00049b35
   2dec4:	00049b64 	.word	0x00049b64
   2dec8:	00049b7d 	.word	0x00049b7d

0002decc <pgps_request_all>:
{
   2decc:	b510      	push	{r4, lr}
	if (state == PGPS_NONE) {
   2dece:	4b19      	ldr	r3, [pc, #100]	; (2df34 <pgps_request_all+0x68>)
{
   2ded0:	b086      	sub	sp, #24
	if (state == PGPS_NONE) {
   2ded2:	781b      	ldrb	r3, [r3, #0]
   2ded4:	b93b      	cbnz	r3, 2dee6 <pgps_request_all+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2ded6:	4818      	ldr	r0, [pc, #96]	; (2df38 <pgps_request_all+0x6c>)
   2ded8:	2145      	movs	r1, #69	; 0x45
   2deda:	f00f f98e 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2dede:	f06f 0015 	mvn.w	r0, #21
}
   2dee2:	b006      	add	sp, #24
   2dee4:	bd10      	pop	{r4, pc}
	if (nrf_cloud_pgps_loading()) {
   2dee6:	f7ff ff47 	bl	2dd78 <nrf_cloud_pgps_loading>
   2deea:	4604      	mov	r4, r0
   2deec:	b9f8      	cbnz	r0, 2df2e <pgps_request_all+0x62>
	npgps_reset_block_pool();
   2deee:	f001 f9f9 	bl	2f2e4 <npgps_reset_block_pool>
	index.stale_server_data = false;
   2def2:	4b12      	ldr	r3, [pc, #72]	; (2df3c <pgps_request_all+0x70>)
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2def4:	4620      	mov	r0, r4
   2def6:	aa02      	add	r2, sp, #8
   2def8:	f10d 0106 	add.w	r1, sp, #6
	index.stale_server_data = false;
   2defc:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2df00:	f011 ffc1 	bl	3fe86 <npgps_get_time>
	if (err) {
   2df04:	b110      	cbz	r0, 2df0c <pgps_request_all+0x40>
		gps_day = 0;
   2df06:	f8ad 4006 	strh.w	r4, [sp, #6]
		gps_time_of_day = 0;
   2df0a:	9402      	str	r4, [sp, #8]
	struct gps_pgps_request request = {
   2df0c:	232a      	movs	r3, #42	; 0x2a
   2df0e:	f8ad 300c 	strh.w	r3, [sp, #12]
   2df12:	23f0      	movs	r3, #240	; 0xf0
   2df14:	f8ad 300e 	strh.w	r3, [sp, #14]
   2df18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return pgps_request(&request);
   2df1c:	a803      	add	r0, sp, #12
	struct gps_pgps_request request = {
   2df1e:	f8ad 3010 	strh.w	r3, [sp, #16]
   2df22:	9b02      	ldr	r3, [sp, #8]
   2df24:	f8cd 3012 	str.w	r3, [sp, #18]
	return pgps_request(&request);
   2df28:	f7ff ff30 	bl	2dd8c <pgps_request>
   2df2c:	e7d9      	b.n	2dee2 <pgps_request_all+0x16>
		return 0;
   2df2e:	2000      	movs	r0, #0
   2df30:	e7d7      	b.n	2dee2 <pgps_request_all+0x16>
   2df32:	bf00      	nop
   2df34:	2001d2d9 	.word	0x2001d2d9
   2df38:	00049a4e 	.word	0x00049a4e
   2df3c:	20015820 	.word	0x20015820

0002df40 <nrf_cloud_pgps_find_prediction>:
{
   2df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (state == PGPS_NONE) {
   2df44:	4a9c      	ldr	r2, [pc, #624]	; (2e1b8 <nrf_cloud_pgps_find_prediction+0x278>)
	int64_t start_sec = index.start_sec;
   2df46:	4c9d      	ldr	r4, [pc, #628]	; (2e1bc <nrf_cloud_pgps_find_prediction+0x27c>)
{
   2df48:	b08d      	sub	sp, #52	; 0x34
	int64_t end_sec = index.end_sec;
   2df4a:	e9d4 a306 	ldrd	sl, r3, [r4, #24]
   2df4e:	9307      	str	r3, [sp, #28]
	if (state == PGPS_NONE) {
   2df50:	7813      	ldrb	r3, [r2, #0]
{
   2df52:	4605      	mov	r5, r0
	int64_t start_sec = index.start_sec;
   2df54:	e9d4 8b04 	ldrd	r8, fp, [r4, #16]
	uint16_t start_day = index.header.gps_day;
   2df58:	8966      	ldrh	r6, [r4, #10]
	uint32_t start_time = index.header.gps_time_of_day;
   2df5a:	68e7      	ldr	r7, [r4, #12]
	uint16_t period_min = index.header.prediction_period_min;
   2df5c:	f8b4 9008 	ldrh.w	r9, [r4, #8]
	if (state == PGPS_NONE) {
   2df60:	b933      	cbnz	r3, 2df70 <nrf_cloud_pgps_find_prediction+0x30>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2df62:	2145      	movs	r1, #69	; 0x45
   2df64:	4896      	ldr	r0, [pc, #600]	; (2e1c0 <nrf_cloud_pgps_find_prediction+0x280>)
   2df66:	f00f f948 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2df6a:	f06f 0415 	mvn.w	r4, #21
   2df6e:	e015      	b.n	2df9c <nrf_cloud_pgps_find_prediction+0x5c>
	if (prediction == NULL) {
   2df70:	2800      	cmp	r0, #0
   2df72:	d0fa      	beq.n	2df6a <nrf_cloud_pgps_find_prediction+0x2a>
	*prediction = NULL;
   2df74:	2300      	movs	r3, #0
	if (index.stale_server_data) {
   2df76:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
	*prediction = NULL;
   2df7a:	6003      	str	r3, [r0, #0]
	if (index.stale_server_data) {
   2df7c:	b191      	cbz	r1, 2dfa4 <nrf_cloud_pgps_find_prediction+0x64>
		LOG_ERR("server error: expired data");
   2df7e:	2145      	movs	r1, #69	; 0x45
   2df80:	4890      	ldr	r0, [pc, #576]	; (2e1c4 <nrf_cloud_pgps_find_prediction+0x284>)
   2df82:	f00f f93a 	bl	3d1fa <z_log_minimal_printk>
		index.cur_pnum = 0xff;
   2df86:	21ff      	movs	r1, #255	; 0xff
   2df88:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2df8c:	2102      	movs	r1, #2
		pgps_need_assistance = false; /* make sure we request it */
   2df8e:	2300      	movs	r3, #0
		state = PGPS_EXPIRED;
   2df90:	4a89      	ldr	r2, [pc, #548]	; (2e1b8 <nrf_cloud_pgps_find_prediction+0x278>)
   2df92:	7011      	strb	r1, [r2, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2df94:	4a8c      	ldr	r2, [pc, #560]	; (2e1c8 <nrf_cloud_pgps_find_prediction+0x288>)
   2df96:	6013      	str	r3, [r2, #0]
		return -ENODATA;
   2df98:	f06f 043c 	mvn.w	r4, #60	; 0x3c
}
   2df9c:	4620      	mov	r0, r4
   2df9e:	b00d      	add	sp, #52	; 0x34
   2dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = npgps_get_shifted_time(&cur_gps_sec, &cur_gps_day,
   2dfa4:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2dfa8:	aa09      	add	r2, sp, #36	; 0x24
   2dfaa:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   2dfae:	a80a      	add	r0, sp, #40	; 0x28
   2dfb0:	f001 f8d8 	bl	2f164 <npgps_get_shifted_time>
	if (err < 0) {
   2dfb4:	2800      	cmp	r0, #0
   2dfb6:	da07      	bge.n	2dfc8 <nrf_cloud_pgps_find_prediction+0x88>
		LOG_INF("Unknown current time");
   2dfb8:	2149      	movs	r1, #73	; 0x49
   2dfba:	4884      	ldr	r0, [pc, #528]	; (2e1cc <nrf_cloud_pgps_find_prediction+0x28c>)
   2dfbc:	f00f f91d 	bl	3d1fa <z_log_minimal_printk>
		cur_gps_sec = 0;
   2dfc0:	2200      	movs	r2, #0
   2dfc2:	2300      	movs	r3, #0
   2dfc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2dfc8:	2207      	movs	r2, #7
	print_time_details("Looking for prediction for:",
   2dfca:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
   2dfce:	9c09      	ldr	r4, [sp, #36]	; 0x24
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2dfd0:	fbb0 f2f2 	udiv	r2, r0, r2
   2dfd4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
   2dfd8:	1ac3      	subs	r3, r0, r3
   2dfda:	497d      	ldr	r1, [pc, #500]	; (2e1d0 <nrf_cloud_pgps_find_prediction+0x290>)
   2dfdc:	b29b      	uxth	r3, r3
   2dfde:	fb01 4103 	mla	r1, r1, r3, r4
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2dfe2:	ea4f 1c11 	mov.w	ip, r1, lsr #4
   2dfe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2dfea:	e9cd 1c04 	strd	r1, ip, [sp, #16]
   2dfee:	e9cd 0400 	strd	r0, r4, [sp]
   2dff2:	2149      	movs	r1, #73	; 0x49
   2dff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dff6:	4a77      	ldr	r2, [pc, #476]	; (2e1d4 <nrf_cloud_pgps_find_prediction+0x294>)
   2dff8:	4877      	ldr	r0, [pc, #476]	; (2e1d8 <nrf_cloud_pgps_find_prediction+0x298>)
   2dffa:	f00f f8fe 	bl	3d1fa <z_log_minimal_printk>
	if ((start_day == 0) && (start_time == 0)) {
   2dffe:	b9c6      	cbnz	r6, 2e032 <nrf_cloud_pgps_find_prediction+0xf2>
   2e000:	b9bf      	cbnz	r7, 2e032 <nrf_cloud_pgps_find_prediction+0xf2>
		if (nrf_cloud_pgps_loading()) {
   2e002:	f7ff feb9 	bl	2dd78 <nrf_cloud_pgps_loading>
   2e006:	b130      	cbz	r0, 2e016 <nrf_cloud_pgps_find_prediction+0xd6>
			LOG_WRN("Predictions not loaded yet");
   2e008:	2157      	movs	r1, #87	; 0x57
   2e00a:	4874      	ldr	r0, [pc, #464]	; (2e1dc <nrf_cloud_pgps_find_prediction+0x29c>)
   2e00c:	f00f f8f5 	bl	3d1fa <z_log_minimal_printk>
		return -ELOADING;
   2e010:	f46f 54fa 	mvn.w	r4, #8000	; 0x1f40
   2e014:	e7c2      	b.n	2df9c <nrf_cloud_pgps_find_prediction+0x5c>
		index.cur_pnum = 0xff;
   2e016:	22ff      	movs	r2, #255	; 0xff
   2e018:	4b68      	ldr	r3, [pc, #416]	; (2e1bc <nrf_cloud_pgps_find_prediction+0x27c>)
		LOG_WRN("No data stored");
   2e01a:	2157      	movs	r1, #87	; 0x57
		index.cur_pnum = 0xff;
   2e01c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2e020:	2202      	movs	r2, #2
   2e022:	4b65      	ldr	r3, [pc, #404]	; (2e1b8 <nrf_cloud_pgps_find_prediction+0x278>)
		LOG_WRN("No data stored");
   2e024:	486e      	ldr	r0, [pc, #440]	; (2e1e0 <nrf_cloud_pgps_find_prediction+0x2a0>)
		state = PGPS_EXPIRED;
   2e026:	701a      	strb	r2, [r3, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2e028:	4b67      	ldr	r3, [pc, #412]	; (2e1c8 <nrf_cloud_pgps_find_prediction+0x288>)
   2e02a:	601f      	str	r7, [r3, #0]
		LOG_WRN("No data stored");
   2e02c:	f00f f8e5 	bl	3d1fa <z_log_minimal_printk>
   2e030:	e7b2      	b.n	2df98 <nrf_cloud_pgps_find_prediction+0x58>
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2e032:	2107      	movs	r1, #7
   2e034:	fbb6 f1f1 	udiv	r1, r6, r1
	offset_sec = cur_gps_sec - start_sec;
   2e038:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2e03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2e03c:	ebb4 0408 	subs.w	r4, r4, r8
   2e040:	eb63 0b0b 	sbc.w	fp, r3, fp
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2e044:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
   2e048:	4a61      	ldr	r2, [pc, #388]	; (2e1d0 <nrf_cloud_pgps_find_prediction+0x290>)
   2e04a:	1af3      	subs	r3, r6, r3
   2e04c:	b29b      	uxth	r3, r3
   2e04e:	fb02 7203 	mla	r2, r2, r3, r7
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2e052:	0910      	lsrs	r0, r2, #4
   2e054:	e9cd 2004 	strd	r2, r0, [sp, #16]
   2e058:	e9cd 1302 	strd	r1, r3, [sp, #8]
   2e05c:	4a61      	ldr	r2, [pc, #388]	; (2e1e4 <nrf_cloud_pgps_find_prediction+0x2a4>)
   2e05e:	4643      	mov	r3, r8
   2e060:	2149      	movs	r1, #73	; 0x49
   2e062:	485d      	ldr	r0, [pc, #372]	; (2e1d8 <nrf_cloud_pgps_find_prediction+0x298>)
   2e064:	e9cd 6700 	strd	r6, r7, [sp]
   2e068:	f00f f8c7 	bl	3d1fa <z_log_minimal_printk>
	LOG_INF("current offset into prediction set, sec:%d", (int32_t)offset_sec);
   2e06c:	4622      	mov	r2, r4
   2e06e:	2149      	movs	r1, #73	; 0x49
   2e070:	485d      	ldr	r0, [pc, #372]	; (2e1e8 <nrf_cloud_pgps_find_prediction+0x2a8>)
   2e072:	f00f f8c2 	bl	3d1fa <z_log_minimal_printk>
	if (offset_sec < 0) {
   2e076:	f1bb 0f00 	cmp.w	fp, #0
   2e07a:	da05      	bge.n	2e088 <nrf_cloud_pgps_find_prediction+0x148>
		LOG_WRN("cannot find prediction; real time not known");
   2e07c:	2157      	movs	r1, #87	; 0x57
   2e07e:	485b      	ldr	r0, [pc, #364]	; (2e1ec <nrf_cloud_pgps_find_prediction+0x2ac>)
   2e080:	f00f f8bb 	bl	3d1fa <z_log_minimal_printk>
		return -ETIMEUNKNOWN;
   2e084:	4c5a      	ldr	r4, [pc, #360]	; (2e1f0 <nrf_cloud_pgps_find_prediction+0x2b0>)
   2e086:	e789      	b.n	2df9c <nrf_cloud_pgps_find_prediction+0x5c>
	} else if (cur_gps_sec > end_sec) {
   2e088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e08a:	9a07      	ldr	r2, [sp, #28]
   2e08c:	459a      	cmp	sl, r3
   2e08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2e090:	eb72 0303 	sbcs.w	r3, r2, r3
   2e094:	da06      	bge.n	2e0a4 <nrf_cloud_pgps_find_prediction+0x164>
			LOG_WRN("data expired!");
   2e096:	2157      	movs	r1, #87	; 0x57
   2e098:	4856      	ldr	r0, [pc, #344]	; (2e1f4 <nrf_cloud_pgps_find_prediction+0x2b4>)
   2e09a:	f00f f8ae 	bl	3d1fa <z_log_minimal_printk>
			return -ETIMEDOUT;
   2e09e:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2e0a2:	e77b      	b.n	2df9c <nrf_cloud_pgps_find_prediction+0x5c>
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2e0a4:	223c      	movs	r2, #60	; 0x3c
   2e0a6:	2300      	movs	r3, #0
   2e0a8:	4620      	mov	r0, r4
   2e0aa:	4659      	mov	r1, fp
   2e0ac:	fb02 f209 	mul.w	r2, r2, r9
   2e0b0:	f7ee feca 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum >= index.header.prediction_count) {
   2e0b4:	4e41      	ldr	r6, [pc, #260]	; (2e1bc <nrf_cloud_pgps_find_prediction+0x27c>)
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2e0b6:	4604      	mov	r4, r0
		if (pnum >= index.header.prediction_count) {
   2e0b8:	88b3      	ldrh	r3, [r6, #4]
   2e0ba:	4283      	cmp	r3, r0
   2e0bc:	dc06      	bgt.n	2e0cc <nrf_cloud_pgps_find_prediction+0x18c>
			LOG_WRN("prediction num:%d -- too large", pnum);
   2e0be:	4602      	mov	r2, r0
   2e0c0:	2157      	movs	r1, #87	; 0x57
   2e0c2:	484d      	ldr	r0, [pc, #308]	; (2e1f8 <nrf_cloud_pgps_find_prediction+0x2b8>)
   2e0c4:	f00f f899 	bl	3d1fa <z_log_minimal_printk>
			pnum = index.header.prediction_count - 1;
   2e0c8:	88b4      	ldrh	r4, [r6, #4]
   2e0ca:	3c01      	subs	r4, #1
	LOG_INF("Selected prediction num:%d", pnum);
   2e0cc:	484b      	ldr	r0, [pc, #300]	; (2e1fc <nrf_cloud_pgps_find_prediction+0x2bc>)
   2e0ce:	4622      	mov	r2, r4
   2e0d0:	2149      	movs	r1, #73	; 0x49
   2e0d2:	f00f f892 	bl	3d1fa <z_log_minimal_printk>
	*prediction = index.predictions[pnum];
   2e0d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   2e0da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	index.cur_pnum = pnum;
   2e0dc:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
	*prediction = index.predictions[pnum];
   2e0e0:	6028      	str	r0, [r5, #0]
	if (*prediction) {
   2e0e2:	2800      	cmp	r0, #0
   2e0e4:	d054      	beq.n	2e190 <nrf_cloud_pgps_find_prediction+0x250>
		err = validate_prediction(*prediction,
   2e0e6:	2300      	movs	r3, #0
   2e0e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e0ea:	9300      	str	r3, [sp, #0]
   2e0ec:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   2e0f0:	464b      	mov	r3, r9
   2e0f2:	f7ff fd51 	bl	2db98 <validate_prediction.constprop.0>
		if (!err) {
   2e0f6:	2800      	cmp	r0, #0
   2e0f8:	d15b      	bne.n	2e1b2 <nrf_cloud_pgps_find_prediction+0x272>
			start_expiration_timer(pnum, cur_gps_sec);
   2e0fa:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
	return z_timeout_remaining(&timer->timeout);
   2e0fe:	4840      	ldr	r0, [pc, #256]	; (2e200 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2e100:	f00b f82a 	bl	39158 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2e104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e108:	fba0 0302 	umull	r0, r3, r0, r2
   2e10c:	0bc0      	lsrs	r0, r0, #15
	if (k_timer_remaining_get(&prediction_timer) > 0) {
   2e10e:	ea50 4343 	orrs.w	r3, r0, r3, lsl #17
   2e112:	f47f af43 	bne.w	2df9c <nrf_cloud_pgps_find_prediction+0x5c>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e116:	e9d6 5104 	ldrd	r5, r1, [r6, #16]
   2e11a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2e11c:	8930      	ldrh	r0, [r6, #8]
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e11e:	4363      	muls	r3, r4
   2e120:	195d      	adds	r5, r3, r5
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2e122:	f04f 033c 	mov.w	r3, #60	; 0x3c
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e126:	f141 0100 	adc.w	r1, r1, #0
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2e12a:	fbe0 5103 	umlal	r5, r1, r0, r3
	delta = (end_sec - cur_gps_sec) + 1;
   2e12e:	ebb5 0508 	subs.w	r5, r5, r8
   2e132:	eb61 0107 	sbc.w	r1, r1, r7
   2e136:	3501      	adds	r5, #1
   2e138:	f141 0100 	adc.w	r1, r1, #0
	if (delta > 0) {
   2e13c:	2d01      	cmp	r5, #1
   2e13e:	f171 0300 	sbcs.w	r3, r1, #0
   2e142:	db21      	blt.n	2e188 <nrf_cloud_pgps_find_prediction+0x248>
		k_timer_start(&prediction_timer, K_SECONDS(delta), K_NO_WAIT);
   2e144:	fba5 0302 	umull	r0, r3, r5, r2
   2e148:	fb02 3101 	mla	r1, r2, r1, r3
			return ((t * to_hz + off) / from_hz);
   2e14c:	f240 33e7 	movw	r3, #999	; 0x3e7
   2e150:	03c9      	lsls	r1, r1, #15
   2e152:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2e156:	03c0      	lsls	r0, r0, #15
   2e158:	18c0      	adds	r0, r0, r3
   2e15a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e15e:	f04f 0300 	mov.w	r3, #0
   2e162:	f141 0100 	adc.w	r1, r1, #0
   2e166:	f7ee febf 	bl	1cee8 <__aeabi_uldivmod>
   2e16a:	4602      	mov	r2, r0
   2e16c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2e16e:	2100      	movs	r1, #0
   2e170:	2000      	movs	r0, #0
   2e172:	e9cd 0100 	strd	r0, r1, [sp]
   2e176:	4822      	ldr	r0, [pc, #136]	; (2e200 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2e178:	f00b fa0e 	bl	39598 <z_impl_k_timer_start>
		LOG_INF("injecting next prediction in %d seconds", (int32_t)delta);
   2e17c:	462a      	mov	r2, r5
   2e17e:	2149      	movs	r1, #73	; 0x49
   2e180:	4820      	ldr	r0, [pc, #128]	; (2e204 <nrf_cloud_pgps_find_prediction+0x2c4>)
		LOG_ERR("cannot start prediction expiration timer; delta = %d", (int32_t)delta);
   2e182:	f00f f83a 	bl	3d1fa <z_log_minimal_printk>
   2e186:	e709      	b.n	2df9c <nrf_cloud_pgps_find_prediction+0x5c>
   2e188:	462a      	mov	r2, r5
   2e18a:	2145      	movs	r1, #69	; 0x45
   2e18c:	481e      	ldr	r0, [pc, #120]	; (2e208 <nrf_cloud_pgps_find_prediction+0x2c8>)
   2e18e:	e7f8      	b.n	2e182 <nrf_cloud_pgps_find_prediction+0x242>
	if (nrf_cloud_pgps_loading()) {
   2e190:	f7ff fdf2 	bl	2dd78 <nrf_cloud_pgps_loading>
   2e194:	b128      	cbz	r0, 2e1a2 <nrf_cloud_pgps_find_prediction+0x262>
		LOG_WRN("Prediction num:%u not loaded yet", pnum);
   2e196:	4622      	mov	r2, r4
   2e198:	2157      	movs	r1, #87	; 0x57
   2e19a:	481c      	ldr	r0, [pc, #112]	; (2e20c <nrf_cloud_pgps_find_prediction+0x2cc>)
   2e19c:	f00f f82d 	bl	3d1fa <z_log_minimal_printk>
   2e1a0:	e736      	b.n	2e010 <nrf_cloud_pgps_find_prediction+0xd0>
	LOG_ERR("Prediction num:%u not available; state:%d", pnum, state);
   2e1a2:	4b05      	ldr	r3, [pc, #20]	; (2e1b8 <nrf_cloud_pgps_find_prediction+0x278>)
   2e1a4:	4622      	mov	r2, r4
   2e1a6:	2145      	movs	r1, #69	; 0x45
   2e1a8:	781b      	ldrb	r3, [r3, #0]
   2e1aa:	4819      	ldr	r0, [pc, #100]	; (2e210 <nrf_cloud_pgps_find_prediction+0x2d0>)
   2e1ac:	f00f f825 	bl	3d1fa <z_log_minimal_printk>
	return -EINVAL;
   2e1b0:	e6db      	b.n	2df6a <nrf_cloud_pgps_find_prediction+0x2a>
   2e1b2:	4604      	mov	r4, r0
   2e1b4:	e6f2      	b.n	2df9c <nrf_cloud_pgps_find_prediction+0x5c>
   2e1b6:	bf00      	nop
   2e1b8:	2001d2d9 	.word	0x2001d2d9
   2e1bc:	20015820 	.word	0x20015820
   2e1c0:	00049a4e 	.word	0x00049a4e
   2e1c4:	00049bad 	.word	0x00049bad
   2e1c8:	2001a138 	.word	0x2001a138
   2e1cc:	00049bcd 	.word	0x00049bcd
   2e1d0:	00015180 	.word	0x00015180
   2e1d4:	00049be7 	.word	0x00049be7
   2e1d8:	00049c03 	.word	0x00049c03
   2e1dc:	00049c60 	.word	0x00049c60
   2e1e0:	00049c80 	.word	0x00049c80
   2e1e4:	00049c94 	.word	0x00049c94
   2e1e8:	00049cad 	.word	0x00049cad
   2e1ec:	00049cdd 	.word	0x00049cdd
   2e1f0:	ffffe0c0 	.word	0xffffe0c0
   2e1f4:	00049d0e 	.word	0x00049d0e
   2e1f8:	00049d21 	.word	0x00049d21
   2e1fc:	00049d45 	.word	0x00049d45
   2e200:	20014df8 	.word	0x20014df8
   2e204:	00049d65 	.word	0x00049d65
   2e208:	00049d92 	.word	0x00049d92
   2e20c:	00049dcc 	.word	0x00049dcc
   2e210:	00049df2 	.word	0x00049df2

0002e214 <nrf_cloud_pgps_notify_prediction>:
{
   2e214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_pgps_event evt = {
   2e216:	2303      	movs	r3, #3
   2e218:	2500      	movs	r5, #0
   2e21a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2e21e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (state == PGPS_NONE) {
   2e222:	4b22      	ldr	r3, [pc, #136]	; (2e2ac <nrf_cloud_pgps_notify_prediction+0x98>)
   2e224:	781b      	ldrb	r3, [r3, #0]
   2e226:	b943      	cbnz	r3, 2e23a <nrf_cloud_pgps_notify_prediction+0x26>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e228:	2145      	movs	r1, #69	; 0x45
   2e22a:	4821      	ldr	r0, [pc, #132]	; (2e2b0 <nrf_cloud_pgps_notify_prediction+0x9c>)
   2e22c:	f00e ffe5 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2e230:	f06f 0415 	mvn.w	r4, #21
}
   2e234:	4620      	mov	r0, r4
   2e236:	b004      	add	sp, #16
   2e238:	bd70      	pop	{r4, r5, r6, pc}
	LOG_INF("Searching for prediction");
   2e23a:	2149      	movs	r1, #73	; 0x49
   2e23c:	481d      	ldr	r0, [pc, #116]	; (2e2b4 <nrf_cloud_pgps_notify_prediction+0xa0>)
   2e23e:	f00e ffdc 	bl	3d1fa <z_log_minimal_printk>
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2e242:	a801      	add	r0, sp, #4
   2e244:	f7ff fe7c 	bl	2df40 <nrf_cloud_pgps_find_prediction>
	if (err == -ELOADING) {
   2e248:	f46f 53fa 	mvn.w	r3, #8000	; 0x1f40
   2e24c:	4298      	cmp	r0, r3
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2e24e:	4604      	mov	r4, r0
	if (err == -ELOADING) {
   2e250:	d104      	bne.n	2e25c <nrf_cloud_pgps_notify_prediction+0x48>
		pgps_need_assistance = true;
   2e252:	2201      	movs	r2, #1
   2e254:	4b18      	ldr	r3, [pc, #96]	; (2e2b8 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2e256:	601a      	str	r2, [r3, #0]
		err = 0;
   2e258:	462c      	mov	r4, r5
   2e25a:	e7eb      	b.n	2e234 <nrf_cloud_pgps_notify_prediction+0x20>
	} else if (err < 0) {
   2e25c:	2800      	cmp	r0, #0
   2e25e:	da12      	bge.n	2e286 <nrf_cloud_pgps_notify_prediction+0x72>
		if (!pgps_need_assistance) {
   2e260:	4d15      	ldr	r5, [pc, #84]	; (2e2b8 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2e262:	682e      	ldr	r6, [r5, #0]
   2e264:	b10e      	cbz	r6, 2e26a <nrf_cloud_pgps_notify_prediction+0x56>
			err = 0;
   2e266:	2400      	movs	r4, #0
   2e268:	e7e4      	b.n	2e234 <nrf_cloud_pgps_notify_prediction+0x20>
			pgps_need_assistance = true;
   2e26a:	2301      	movs	r3, #1
   2e26c:	602b      	str	r3, [r5, #0]
			err = pgps_request_all();
   2e26e:	f7ff fe2d 	bl	2decc <pgps_request_all>
			if (err) {
   2e272:	4604      	mov	r4, r0
   2e274:	2800      	cmp	r0, #0
   2e276:	d0dd      	beq.n	2e234 <nrf_cloud_pgps_notify_prediction+0x20>
				LOG_ERR("Error while requesting pgps set: %d", err);
   2e278:	4602      	mov	r2, r0
   2e27a:	2145      	movs	r1, #69	; 0x45
   2e27c:	480f      	ldr	r0, [pc, #60]	; (2e2bc <nrf_cloud_pgps_notify_prediction+0xa8>)
   2e27e:	f00e ffbc 	bl	3d1fa <z_log_minimal_printk>
				pgps_need_assistance = false; /* try again next time */
   2e282:	602e      	str	r6, [r5, #0]
   2e284:	e7d6      	b.n	2e234 <nrf_cloud_pgps_notify_prediction+0x20>
	} else if ((err >= 0) && (err < NUM_PREDICTIONS)) {
   2e286:	2829      	cmp	r0, #41	; 0x29
   2e288:	dcd4      	bgt.n	2e234 <nrf_cloud_pgps_notify_prediction+0x20>
		LOG_INF("Found P-GPS prediction %d", pnum);
   2e28a:	4602      	mov	r2, r0
   2e28c:	2149      	movs	r1, #73	; 0x49
   2e28e:	480c      	ldr	r0, [pc, #48]	; (2e2c0 <nrf_cloud_pgps_notify_prediction+0xac>)
   2e290:	f00e ffb3 	bl	3d1fa <z_log_minimal_printk>
		pgps_need_assistance = false;
   2e294:	4b08      	ldr	r3, [pc, #32]	; (2e2b8 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2e296:	601d      	str	r5, [r3, #0]
		if (evt_handler) {
   2e298:	4b0a      	ldr	r3, [pc, #40]	; (2e2c4 <nrf_cloud_pgps_notify_prediction+0xb0>)
   2e29a:	681b      	ldr	r3, [r3, #0]
   2e29c:	2b00      	cmp	r3, #0
   2e29e:	d0e2      	beq.n	2e266 <nrf_cloud_pgps_notify_prediction+0x52>
			evt.prediction = prediction;
   2e2a0:	9a01      	ldr	r2, [sp, #4]
			evt_handler(&evt);
   2e2a2:	a802      	add	r0, sp, #8
			evt.prediction = prediction;
   2e2a4:	9203      	str	r2, [sp, #12]
			evt_handler(&evt);
   2e2a6:	4798      	blx	r3
   2e2a8:	e7d6      	b.n	2e258 <nrf_cloud_pgps_notify_prediction+0x44>
   2e2aa:	bf00      	nop
   2e2ac:	2001d2d9 	.word	0x2001d2d9
   2e2b0:	00049a4e 	.word	0x00049a4e
   2e2b4:	00049e21 	.word	0x00049e21
   2e2b8:	2001a138 	.word	0x2001a138
   2e2bc:	00049e3f 	.word	0x00049e3f
   2e2c0:	00049e68 	.word	0x00049e68
   2e2c4:	2001a12c 	.word	0x2001a12c

0002e2c8 <process_buffer>:
{
   2e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (index.dl_offset == 0) {
   2e2cc:	4c98      	ldr	r4, [pc, #608]	; (2e530 <process_buffer+0x268>)
{
   2e2ce:	4605      	mov	r5, r0
	if (index.dl_offset == 0) {
   2e2d0:	6a23      	ldr	r3, [r4, #32]
{
   2e2d2:	468a      	mov	sl, r1
   2e2d4:	b08d      	sub	sp, #52	; 0x34
	if (index.dl_offset == 0) {
   2e2d6:	2b00      	cmp	r3, #0
   2e2d8:	d14e      	bne.n	2e378 <process_buffer+0xb0>
		if (len < sizeof(*header)) {
   2e2da:	290f      	cmp	r1, #15
   2e2dc:	d904      	bls.n	2e2e8 <process_buffer+0x20>
	if (!validate_pgps_header(header)) {
   2e2de:	f7ff fc05 	bl	2daec <validate_pgps_header>
   2e2e2:	b920      	cbnz	r0, 2e2ee <process_buffer+0x26>
		state = PGPS_NONE;
   2e2e4:	4b93      	ldr	r3, [pc, #588]	; (2e534 <process_buffer+0x26c>)
   2e2e6:	7018      	strb	r0, [r3, #0]
			return -EINVAL; /* need full header, for now */
   2e2e8:	f06f 0615 	mvn.w	r6, #21
   2e2ec:	e179      	b.n	2e5e2 <process_buffer+0x31a>
	if (index.partial_request) {
   2e2ee:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   2e2f2:	b163      	cbz	r3, 2e30e <process_buffer+0x46>
		LOG_INF("Partial request; starting at prediction num:%u", index.pnum_offset);
   2e2f4:	2149      	movs	r1, #73	; 0x49
   2e2f6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   2e2fa:	488f      	ldr	r0, [pc, #572]	; (2e538 <process_buffer+0x270>)
   2e2fc:	f00e ff7d 	bl	3d1fa <z_log_minimal_printk>
		header->prediction_count = index.header.prediction_count;
   2e300:	88a3      	ldrh	r3, [r4, #4]
   2e302:	80ab      	strh	r3, [r5, #4]
		header->gps_day = index.header.gps_day;
   2e304:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   2e308:	816b      	strh	r3, [r5, #10]
		header->gps_time_of_day = index.header.gps_time_of_day;
   2e30a:	68e3      	ldr	r3, [r4, #12]
   2e30c:	60eb      	str	r3, [r5, #12]
		LOG_INF("Storing P-GPS header");
   2e30e:	2149      	movs	r1, #73	; 0x49
   2e310:	488a      	ldr	r0, [pc, #552]	; (2e53c <process_buffer+0x274>)
   2e312:	f00e ff72 	bl	3d1fa <z_log_minimal_printk>
		cache_pgps_header(header);
   2e316:	4628      	mov	r0, r5
   2e318:	f7ff fc1a 	bl	2db50 <cache_pgps_header>
		err = npgps_get_shifted_time(&gps_sec, NULL, NULL,
   2e31c:	2200      	movs	r2, #0
   2e31e:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2e322:	4611      	mov	r1, r2
   2e324:	a808      	add	r0, sp, #32
   2e326:	f000 ff1d 	bl	2f164 <npgps_get_shifted_time>
		if (!err) {
   2e32a:	2800      	cmp	r0, #0
   2e32c:	d172      	bne.n	2e414 <process_buffer+0x14c>
			if ((index.start_sec <= gps_sec) &&
   2e32e:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2e332:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
   2e336:	4293      	cmp	r3, r2
   2e338:	eb71 0000 	sbcs.w	r0, r1, r0
   2e33c:	db55      	blt.n	2e3ea <process_buffer+0x122>
			    (gps_sec <= index.end_sec)) {
   2e33e:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
			if ((index.start_sec <= gps_sec) &&
   2e342:	429a      	cmp	r2, r3
   2e344:	eb70 0101 	sbcs.w	r1, r0, r1
   2e348:	db60      	blt.n	2e40c <process_buffer+0x144>
				LOG_INF("Received data covers good timeframe");
   2e34a:	2149      	movs	r1, #73	; 0x49
   2e34c:	487c      	ldr	r0, [pc, #496]	; (2e540 <process_buffer+0x278>)
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2e34e:	f00e ff54 	bl	3d1fa <z_log_minimal_printk>
		log_pgps_header("pgps_header: ", header);
   2e352:	4629      	mov	r1, r5
   2e354:	487b      	ldr	r0, [pc, #492]	; (2e544 <process_buffer+0x27c>)
   2e356:	f7ff fbab 	bl	2dab0 <log_pgps_header>
		npgps_save_header(header);
   2e35a:	4628      	mov	r0, r5
   2e35c:	f000 feaa 	bl	2f0b4 <npgps_save_header>
		index.dl_offset += sizeof(*header);
   2e360:	6a23      	ldr	r3, [r4, #32]
		len -= sizeof(*header);
   2e362:	f1aa 0a10 	sub.w	sl, sl, #16
		index.dl_offset += sizeof(*header);
   2e366:	3310      	adds	r3, #16
   2e368:	6223      	str	r3, [r4, #32]
		index.dl_pnum = index.pnum_offset;
   2e36a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		buf += sizeof(*header);
   2e36e:	3510      	adds	r5, #16
		index.dl_pnum = index.pnum_offset;
   2e370:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		index.pred_offset = 0;
   2e374:	2300      	movs	r3, #0
   2e376:	84a3      	strh	r3, [r4, #36]	; 0x24
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2e378:	f240 79d6 	movw	r9, #2006	; 0x7d6
   2e37c:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
	memcpy(&prediction_buf[index.pred_offset], buf, need);
   2e37e:	4f72      	ldr	r7, [pc, #456]	; (2e548 <process_buffer+0x280>)
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2e380:	eba9 0806 	sub.w	r8, r9, r6
   2e384:	45d0      	cmp	r8, sl
   2e386:	bf28      	it	cs
   2e388:	46d0      	movcs	r8, sl
   2e38a:	19b8      	adds	r0, r7, r6
   2e38c:	4642      	mov	r2, r8
   2e38e:	4629      	mov	r1, r5
   2e390:	f013 fbc6 	bl	41b20 <memcpy>
	len -= need;
   2e394:	ebaa 0308 	sub.w	r3, sl, r8
   2e398:	9303      	str	r3, [sp, #12]
	index.pred_offset += need;
   2e39a:	4446      	add	r6, r8
	index.dl_offset += need;
   2e39c:	6a23      	ldr	r3, [r4, #32]
	index.pred_offset += need;
   2e39e:	b2b6      	uxth	r6, r6
	index.dl_offset += need;
   2e3a0:	4443      	add	r3, r8
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2e3a2:	454e      	cmp	r6, r9
	index.pred_offset += need;
   2e3a4:	84a6      	strh	r6, [r4, #36]	; 0x24
	index.dl_offset += need;
   2e3a6:	6223      	str	r3, [r4, #32]
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2e3a8:	d17f      	bne.n	2e4aa <process_buffer+0x1e2>
	struct agps_header *elem = (struct agps_header *)element_ptr;
	size_t parsed_len = 0;
	int64_t gps_sec;
	bool finished = false;

	gps_sec = 0;
   2e3aa:	2600      	movs	r6, #0
	size_t parsed_len = 0;
   2e3ac:	46b1      	mov	r9, r6
		err = consume_pgps_data(index.dl_pnum, prediction_buf,
   2e3ae:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
	gps_sec = 0;
   2e3b2:	9604      	str	r6, [sp, #16]
	if (elements_left_to_process == 0) {
   2e3b4:	4b65      	ldr	r3, [pc, #404]	; (2e54c <process_buffer+0x284>)
   2e3b6:	881a      	ldrh	r2, [r3, #0]
   2e3b8:	bb7a      	cbnz	r2, 2e41a <process_buffer+0x152>
		element_type = element->type;
   2e3ba:	4a65      	ldr	r2, [pc, #404]	; (2e550 <process_buffer+0x288>)
		element->type = (enum nrf_cloud_agps_type)
   2e3bc:	7839      	ldrb	r1, [r7, #0]
		element_type = element->type;
   2e3be:	7011      	strb	r1, [r2, #0]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2e3c0:	f8b7 2001 	ldrh.w	r2, [r7, #1]
   2e3c4:	3a01      	subs	r2, #1
		elements_left_to_process =
   2e3c6:	801a      	strh	r2, [r3, #0]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2e3c8:	2203      	movs	r2, #3
	switch (element->type) {
   2e3ca:	2902      	cmp	r1, #2
   2e3cc:	d02c      	beq.n	2e428 <process_buffer+0x160>
   2e3ce:	2907      	cmp	r1, #7
   2e3d0:	d03c      	beq.n	2e44c <process_buffer+0x184>
	while (parsed_len < buf_len) {
		bool empty;
		size_t element_size = get_next_pgps_element(&element, element_ptr);

		if (element_size == 0) {
			LOG_INF("  End of element");
   2e3d2:	2149      	movs	r1, #73	; 0x49
   2e3d4:	485f      	ldr	r0, [pc, #380]	; (2e554 <process_buffer+0x28c>)
   2e3d6:	f00e ff10 	bl	3d1fa <z_log_minimal_printk>
					return err;
				}
			}
		}
	} else {
		LOG_ERR("Parsing incomplete; aborting.");
   2e3da:	2145      	movs	r1, #69	; 0x45
   2e3dc:	485e      	ldr	r0, [pc, #376]	; (2e558 <process_buffer+0x290>)
   2e3de:	f00e ff0c 	bl	3d1fa <z_log_minimal_printk>
		state = PGPS_NONE;
   2e3e2:	2200      	movs	r2, #0
   2e3e4:	4b53      	ldr	r3, [pc, #332]	; (2e534 <process_buffer+0x26c>)
   2e3e6:	701a      	strb	r2, [r3, #0]
		if (err) {
   2e3e8:	e77e      	b.n	2e2e8 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2e3ea:	2145      	movs	r1, #69	; 0x45
   2e3ec:	485b      	ldr	r0, [pc, #364]	; (2e55c <process_buffer+0x294>)
   2e3ee:	1ad2      	subs	r2, r2, r3
					LOG_ERR("Received data is not within required "
   2e3f0:	f00e ff03 	bl	3d1fa <z_log_minimal_printk>
				index.stale_server_data = true;
   2e3f4:	2301      	movs	r3, #1
__ssp_bos_icheck3(memset, void *, int)
   2e3f6:	2210      	movs	r2, #16
   2e3f8:	2100      	movs	r1, #0
   2e3fa:	4628      	mov	r0, r5
   2e3fc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   2e400:	f013 fbae 	bl	41b60 <memset>
				cache_pgps_header(header);
   2e404:	4628      	mov	r0, r5
   2e406:	f7ff fba3 	bl	2db50 <cache_pgps_header>
				return -EINVAL;
   2e40a:	e76d      	b.n	2e2e8 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2e40c:	2145      	movs	r1, #69	; 0x45
   2e40e:	4854      	ldr	r0, [pc, #336]	; (2e560 <process_buffer+0x298>)
   2e410:	1a9a      	subs	r2, r3, r2
   2e412:	e7ed      	b.n	2e3f0 <process_buffer+0x128>
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2e414:	2157      	movs	r1, #87	; 0x57
   2e416:	4853      	ldr	r0, [pc, #332]	; (2e564 <process_buffer+0x29c>)
   2e418:	e799      	b.n	2e34e <process_buffer+0x86>
		element->type = element_type;
   2e41a:	4b4d      	ldr	r3, [pc, #308]	; (2e550 <process_buffer+0x288>)
		elements_left_to_process -= 1;
   2e41c:	3a01      	subs	r2, #1
		element->type = element_type;
   2e41e:	7819      	ldrb	r1, [r3, #0]
		elements_left_to_process -= 1;
   2e420:	4b4a      	ldr	r3, [pc, #296]	; (2e54c <process_buffer+0x284>)
   2e422:	801a      	strh	r2, [r3, #0]
	size_t len = 0;
   2e424:	2200      	movs	r2, #0
   2e426:	e7d0      	b.n	2e3ca <process_buffer+0x102>
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2e428:	4639      	mov	r1, r7
   2e42a:	f102 0b3e 	add.w	fp, r2, #62	; 0x3e
		switch (element.type) {
   2e42e:	f107 003d 	add.w	r0, r7, #61	; 0x3d
			for (int i = 1; i < sizeof(struct nrf_cloud_agps_ephemeris); i++) {
   2e432:	4288      	cmp	r0, r1
   2e434:	d13f      	bne.n	2e4b6 <process_buffer+0x1ee>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2e436:	18bb      	adds	r3, r7, r2
				LOG_INF("Marking ephemeris:%u as empty",
   2e438:	2149      	movs	r1, #73	; 0x49
   2e43a:	5cba      	ldrb	r2, [r7, r2]
   2e43c:	484a      	ldr	r0, [pc, #296]	; (2e568 <process_buffer+0x2a0>)
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2e43e:	9305      	str	r3, [sp, #20]
				LOG_INF("Marking ephemeris:%u as empty",
   2e440:	f00e fedb 	bl	3d1fa <z_log_minimal_printk>
				element.ephemeris->health = NRF_CLOUD_PGPS_EMPTY_EPHEM_HEALTH;
   2e444:	22ff      	movs	r2, #255	; 0xff
   2e446:	9b05      	ldr	r3, [sp, #20]
   2e448:	705a      	strb	r2, [r3, #1]
   2e44a:	e009      	b.n	2e460 <process_buffer+0x198>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2e44c:	18b9      	adds	r1, r7, r2
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2e44e:	f8d1 1002 	ldr.w	r1, [r1, #2]
   2e452:	5ab8      	ldrh	r0, [r7, r2]
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2e454:	f102 0b10 	add.w	fp, r2, #16
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2e458:	f000 fe66 	bl	2f128 <npgps_gps_day_time_to_sec>
   2e45c:	4606      	mov	r6, r0
   2e45e:	9104      	str	r1, [sp, #16]
	while (parsed_len < buf_len) {
   2e460:	f240 72d5 	movw	r2, #2005	; 0x7d5
		parsed_len += element_size;
   2e464:	44d9      	add	r9, fp
	while (parsed_len < buf_len) {
   2e466:	4591      	cmp	r9, r2
		element_ptr += element_size;
   2e468:	445f      	add	r7, fp
	while (parsed_len < buf_len) {
   2e46a:	d9a3      	bls.n	2e3b4 <process_buffer+0xec>
	if (parsed_len == buf_len) {
   2e46c:	f240 73d6 	movw	r3, #2006	; 0x7d6
   2e470:	4599      	cmp	r9, r3
   2e472:	d1b2      	bne.n	2e3da <process_buffer+0x112>
		if (index.predictions[pnum]) {
   2e474:	f10a 090e 	add.w	r9, sl, #14
   2e478:	eb04 0389 	add.w	r3, r4, r9, lsl #2
   2e47c:	685b      	ldr	r3, [r3, #4]
   2e47e:	b1fb      	cbz	r3, 2e4c0 <process_buffer+0x1f8>
			LOG_WRN("Received duplicate packet; ignoring");
   2e480:	2157      	movs	r1, #87	; 0x57
   2e482:	483a      	ldr	r0, [pc, #232]	; (2e56c <process_buffer+0x2a4>)
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2e484:	f00e feb9 	bl	3d1fa <z_log_minimal_printk>
		if (len) { /* keep extra data for next time */
   2e488:	9b03      	ldr	r3, [sp, #12]
   2e48a:	b13b      	cbz	r3, 2e49c <process_buffer+0x1d4>
			memcpy(prediction_buf, buf, len);
   2e48c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2e490:	9a03      	ldr	r2, [sp, #12]
   2e492:	482d      	ldr	r0, [pc, #180]	; (2e548 <process_buffer+0x280>)
   2e494:	eb05 0108 	add.w	r1, r5, r8
   2e498:	f013 fb4f 	bl	41b3a <__memcpy_chk>
		index.pred_offset = len;
   2e49c:	9b03      	ldr	r3, [sp, #12]
   2e49e:	84a3      	strh	r3, [r4, #36]	; 0x24
		index.dl_pnum++;
   2e4a0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2e4a4:	3301      	adds	r3, #1
   2e4a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	index.dl_offset += len;
   2e4aa:	6a23      	ldr	r3, [r4, #32]
   2e4ac:	9a03      	ldr	r2, [sp, #12]
	return 0;
   2e4ae:	2600      	movs	r6, #0
	index.dl_offset += len;
   2e4b0:	4413      	add	r3, r2
   2e4b2:	6223      	str	r3, [r4, #32]
	return 0;
   2e4b4:	e095      	b.n	2e5e2 <process_buffer+0x31a>
				if (element_ptr[i] != 0) {
   2e4b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2e4ba:	2b00      	cmp	r3, #0
   2e4bc:	d0b9      	beq.n	2e432 <process_buffer+0x16a>
   2e4be:	e7cf      	b.n	2e460 <process_buffer+0x198>
		} else if (gps_sec == 0) {
   2e4c0:	9b04      	ldr	r3, [sp, #16]
   2e4c2:	4333      	orrs	r3, r6
   2e4c4:	d102      	bne.n	2e4cc <process_buffer+0x204>
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2e4c6:	2145      	movs	r1, #69	; 0x45
   2e4c8:	4829      	ldr	r0, [pc, #164]	; (2e570 <process_buffer+0x2a8>)
   2e4ca:	e7db      	b.n	2e484 <process_buffer+0x1bc>
			LOG_INF("Storing prediction num:%u idx:%u for gps sec:%d",
   2e4cc:	4652      	mov	r2, sl
   2e4ce:	2149      	movs	r1, #73	; 0x49
   2e4d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2e4d2:	4828      	ldr	r0, [pc, #160]	; (2e574 <process_buffer+0x2ac>)
   2e4d4:	9600      	str	r6, [sp, #0]
   2e4d6:	f00e fe90 	bl	3d1fa <z_log_minimal_printk>
			index.loading_count++;
   2e4da:	8d27      	ldrh	r7, [r4, #40]	; 0x28
			finished = (index.loading_count == index.expected_count);
   2e4dc:	f8b4 b026 	ldrh.w	fp, [r4, #38]	; 0x26
			index.loading_count++;
   2e4e0:	3701      	adds	r7, #1
   2e4e2:	b2bf      	uxth	r7, r7
					 finished || (index.storage_extent == 1));
   2e4e4:	455f      	cmp	r7, fp
			index.loading_count++;
   2e4e6:	8527      	strh	r7, [r4, #40]	; 0x28
					 finished || (index.storage_extent == 1));
   2e4e8:	d01f      	beq.n	2e52a <process_buffer+0x262>
   2e4ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e4ec:	3b01      	subs	r3, #1
   2e4ee:	f1d3 0a00 	rsbs	sl, r3, #0
   2e4f2:	eb4a 0a03 	adc.w	sl, sl, r3
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e4f6:	2301      	movs	r3, #1
   2e4f8:	960a      	str	r6, [sp, #40]	; 0x28
	if (first) {
   2e4fa:	4e1f      	ldr	r6, [pc, #124]	; (2e578 <process_buffer+0x2b0>)
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e4fc:	f88d 301f 	strb.w	r3, [sp, #31]
	if (first) {
   2e500:	7833      	ldrb	r3, [r6, #0]
   2e502:	b133      	cbz	r3, 2e512 <process_buffer+0x24a>
		memset(pad, 0xff, PGPS_PREDICTION_PAD);
   2e504:	2225      	movs	r2, #37	; 0x25
   2e506:	21ff      	movs	r1, #255	; 0xff
   2e508:	481c      	ldr	r0, [pc, #112]	; (2e57c <process_buffer+0x2b4>)
   2e50a:	f013 fb29 	bl	41b60 <memset>
		first = false;
   2e50e:	2300      	movs	r3, #0
   2e510:	7033      	strb	r3, [r6, #0]
	err = stream_flash_buffered_write(&stream, p, schema_offset, false);
   2e512:	2300      	movs	r3, #0
   2e514:	2213      	movs	r2, #19
   2e516:	490c      	ldr	r1, [pc, #48]	; (2e548 <process_buffer+0x280>)
   2e518:	4819      	ldr	r0, [pc, #100]	; (2e580 <process_buffer+0x2b8>)
   2e51a:	f00f fb62 	bl	3dbe2 <stream_flash_buffered_write>
	if (err) {
   2e51e:	4603      	mov	r3, r0
   2e520:	b390      	cbz	r0, 2e588 <process_buffer+0x2c0>
		LOG_ERR("Error writing pgps prediction:%d", err);
   2e522:	461a      	mov	r2, r3
   2e524:	2145      	movs	r1, #69	; 0x45
   2e526:	4817      	ldr	r0, [pc, #92]	; (2e584 <process_buffer+0x2bc>)
   2e528:	e039      	b.n	2e59e <process_buffer+0x2d6>
					 finished || (index.storage_extent == 1));
   2e52a:	f04f 0a01 	mov.w	sl, #1
   2e52e:	e7e2      	b.n	2e4f6 <process_buffer+0x22e>
   2e530:	20015820 	.word	0x20015820
   2e534:	2001d2d9 	.word	0x2001d2d9
   2e538:	00049e87 	.word	0x00049e87
   2e53c:	00049ebb 	.word	0x00049ebb
   2e540:	00049ed5 	.word	0x00049ed5
   2e544:	0004a00a 	.word	0x0004a00a
   2e548:	2001cad9 	.word	0x2001cad9
   2e54c:	2001a5aa 	.word	0x2001a5aa
   2e550:	2001c972 	.word	0x2001c972
   2e554:	0004a018 	.word	0x0004a018
   2e558:	0004a1dc 	.word	0x0004a1dc
   2e55c:	00049efe 	.word	0x00049efe
   2e560:	00049f68 	.word	0x00049f68
   2e564:	00049fce 	.word	0x00049fce
   2e568:	0004a1ff 	.word	0x0004a1ff
   2e56c:	0004a02e 	.word	0x0004a02e
   2e570:	0004a057 	.word	0x0004a057
   2e574:	0004a099 	.word	0x0004a099
   2e578:	20014c45 	.word	0x20014c45
   2e57c:	2001c9f4 	.word	0x2001c9f4
   2e580:	2001a144 	.word	0x2001a144
   2e584:	0004a0ce 	.word	0x0004a0ce
	err = stream_flash_buffered_write(&stream, &schema, sizeof(schema), false);
   2e588:	2201      	movs	r2, #1
   2e58a:	484d      	ldr	r0, [pc, #308]	; (2e6c0 <process_buffer+0x3f8>)
   2e58c:	f10d 011f 	add.w	r1, sp, #31
   2e590:	f00f fb27 	bl	3dbe2 <stream_flash_buffered_write>
	if (err) {
   2e594:	4603      	mov	r3, r0
   2e596:	b340      	cbz	r0, 2e5ea <process_buffer+0x322>
		LOG_ERR("Error writing schema:%d", err);
   2e598:	2145      	movs	r1, #69	; 0x45
   2e59a:	4602      	mov	r2, r0
   2e59c:	4849      	ldr	r0, [pc, #292]	; (2e6c4 <process_buffer+0x3fc>)
		LOG_ERR("Error writing sentinel:%d", err);
   2e59e:	f00e fe2c 	bl	3d1fa <z_log_minimal_printk>
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2e5a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e5a4:	f000 ff5e 	bl	2f464 <npgps_block_to_pointer>
			if (pgps_need_assistance &&
   2e5a8:	4b47      	ldr	r3, [pc, #284]	; (2e6c8 <process_buffer+0x400>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2e5aa:	eb04 0989 	add.w	r9, r4, r9, lsl #2
			if (pgps_need_assistance &&
   2e5ae:	681b      	ldr	r3, [r3, #0]
   2e5b0:	4e46      	ldr	r6, [pc, #280]	; (2e6cc <process_buffer+0x404>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2e5b2:	f8c9 0004 	str.w	r0, [r9, #4]
			if (pgps_need_assistance &&
   2e5b6:	2b00      	cmp	r3, #0
   2e5b8:	d039      	beq.n	2e62e <process_buffer+0x366>
   2e5ba:	455f      	cmp	r7, fp
   2e5bc:	d035      	beq.n	2e62a <process_buffer+0x362>
			    (finished || (index.loading_count > 1))) {
   2e5be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2e5c0:	2b01      	cmp	r3, #1
   2e5c2:	d832      	bhi.n	2e62a <process_buffer+0x362>
				if (evt_handler) {
   2e5c4:	6833      	ldr	r3, [r6, #0]
   2e5c6:	2b00      	cmp	r3, #0
   2e5c8:	d146      	bne.n	2e658 <process_buffer+0x390>
			index.store_block = npgps_alloc_block();
   2e5ca:	f000 fe49 	bl	2f260 <npgps_alloc_block>
   2e5ce:	4603      	mov	r3, r0
			if (index.store_block == NO_BLOCK) {
   2e5d0:	3301      	adds	r3, #1
			index.store_block = npgps_alloc_block();
   2e5d2:	63a0      	str	r0, [r4, #56]	; 0x38
			if (index.store_block == NO_BLOCK) {
   2e5d4:	d149      	bne.n	2e66a <process_buffer+0x3a2>
				LOG_ERR("No more free blocks!");
   2e5d6:	2145      	movs	r1, #69	; 0x45
   2e5d8:	483d      	ldr	r0, [pc, #244]	; (2e6d0 <process_buffer+0x408>)
   2e5da:	f00e fe0e 	bl	3d1fa <z_log_minimal_printk>
				return -ENOMEM;
   2e5de:	f06f 060b 	mvn.w	r6, #11
}
   2e5e2:	4630      	mov	r0, r6
   2e5e4:	b00d      	add	sp, #52	; 0x34
   2e5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = stream_flash_buffered_write(&stream, p, len, false);
   2e5ea:	f240 72c3 	movw	r2, #1987	; 0x7c3
   2e5ee:	4939      	ldr	r1, [pc, #228]	; (2e6d4 <process_buffer+0x40c>)
   2e5f0:	4833      	ldr	r0, [pc, #204]	; (2e6c0 <process_buffer+0x3f8>)
   2e5f2:	f00f faf6 	bl	3dbe2 <stream_flash_buffered_write>
	if (err) {
   2e5f6:	4603      	mov	r3, r0
   2e5f8:	2800      	cmp	r0, #0
   2e5fa:	d192      	bne.n	2e522 <process_buffer+0x25a>
	err = stream_flash_buffered_write(&stream, (uint8_t *)&sentinel,
   2e5fc:	2204      	movs	r2, #4
   2e5fe:	4830      	ldr	r0, [pc, #192]	; (2e6c0 <process_buffer+0x3f8>)
   2e600:	a90a      	add	r1, sp, #40	; 0x28
   2e602:	f00f faee 	bl	3dbe2 <stream_flash_buffered_write>
	if (err) {
   2e606:	4602      	mov	r2, r0
   2e608:	b118      	cbz	r0, 2e612 <process_buffer+0x34a>
		LOG_ERR("Error writing sentinel:%d", err);
   2e60a:	2145      	movs	r1, #69	; 0x45
   2e60c:	4832      	ldr	r0, [pc, #200]	; (2e6d8 <process_buffer+0x410>)
   2e60e:	f00e fdf4 	bl	3d1fa <z_log_minimal_printk>
	err = stream_flash_buffered_write(&stream, pad, PGPS_PREDICTION_PAD, last);
   2e612:	2225      	movs	r2, #37	; 0x25
   2e614:	4653      	mov	r3, sl
   2e616:	4931      	ldr	r1, [pc, #196]	; (2e6dc <process_buffer+0x414>)
   2e618:	4829      	ldr	r0, [pc, #164]	; (2e6c0 <process_buffer+0x3f8>)
   2e61a:	f00f fae2 	bl	3dbe2 <stream_flash_buffered_write>
	if (err) {
   2e61e:	4602      	mov	r2, r0
   2e620:	2800      	cmp	r0, #0
   2e622:	d0be      	beq.n	2e5a2 <process_buffer+0x2da>
		LOG_ERR("Error writing sentinel:%d", err);
   2e624:	2145      	movs	r1, #69	; 0x45
   2e626:	482c      	ldr	r0, [pc, #176]	; (2e6d8 <process_buffer+0x410>)
   2e628:	e7b9      	b.n	2e59e <process_buffer+0x2d6>
				nrf_cloud_pgps_notify_prediction();
   2e62a:	f7ff fdf3 	bl	2e214 <nrf_cloud_pgps_notify_prediction>
			if (!finished) {
   2e62e:	455f      	cmp	r7, fp
   2e630:	d1c8      	bne.n	2e5c4 <process_buffer+0x2fc>
				LOG_INF("All P-GPS data received. Done.");
   2e632:	2149      	movs	r1, #73	; 0x49
   2e634:	482a      	ldr	r0, [pc, #168]	; (2e6e0 <process_buffer+0x418>)
   2e636:	f00e fde0 	bl	3d1fa <z_log_minimal_printk>
				state = PGPS_READY;
   2e63a:	2206      	movs	r2, #6
   2e63c:	4b29      	ldr	r3, [pc, #164]	; (2e6e4 <process_buffer+0x41c>)
   2e63e:	701a      	strb	r2, [r3, #0]
				if (evt_handler) {
   2e640:	6833      	ldr	r3, [r6, #0]
   2e642:	b133      	cbz	r3, 2e652 <process_buffer+0x38a>
					struct nrf_cloud_pgps_event evt = {
   2e644:	2204      	movs	r2, #4
   2e646:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   2e64a:	2200      	movs	r2, #0
					evt_handler(&evt);
   2e64c:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e64e:	920b      	str	r2, [sp, #44]	; 0x2c
					evt_handler(&evt);
   2e650:	4798      	blx	r3
				npgps_print_blocks();
   2e652:	f000 fe79 	bl	2f348 <npgps_print_blocks>
		if (err) {
   2e656:	e717      	b.n	2e488 <process_buffer+0x1c0>
					struct nrf_cloud_pgps_event evt = {
   2e658:	2200      	movs	r2, #0
   2e65a:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   2e65e:	2202      	movs	r2, #2
					evt_handler(&evt);
   2e660:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e662:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
					evt_handler(&evt);
   2e666:	4798      	blx	r3
   2e668:	e7af      	b.n	2e5ca <process_buffer+0x302>
			index.storage_extent--;
   2e66a:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2e66c:	3e01      	subs	r6, #1
   2e66e:	6366      	str	r6, [r4, #52]	; 0x34
			if (index.storage_extent == 0) {
   2e670:	2e00      	cmp	r6, #0
   2e672:	f47f af09 	bne.w	2e488 <process_buffer+0x1c0>
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e676:	f000 fe1d 	bl	2f2b4 <npgps_get_block_extent>
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e67a:	2149      	movs	r1, #73	; 0x49
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e67c:	4603      	mov	r3, r0
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e67e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e680:	6360      	str	r0, [r4, #52]	; 0x34
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e682:	4819      	ldr	r0, [pc, #100]	; (2e6e8 <process_buffer+0x420>)
   2e684:	f00e fdb9 	bl	3d1fa <z_log_minimal_printk>
	return stream_flash_buffered_write(&stream, NULL, 0, true);
   2e688:	4632      	mov	r2, r6
   2e68a:	4631      	mov	r1, r6
   2e68c:	2301      	movs	r3, #1
   2e68e:	480c      	ldr	r0, [pc, #48]	; (2e6c0 <process_buffer+0x3f8>)
   2e690:	f00f faa7 	bl	3dbe2 <stream_flash_buffered_write>
				if (err) {
   2e694:	4606      	mov	r6, r0
   2e696:	b128      	cbz	r0, 2e6a4 <process_buffer+0x3dc>
					LOG_ERR("Error flushing storage:%d", err);
   2e698:	2145      	movs	r1, #69	; 0x45
   2e69a:	4602      	mov	r2, r0
   2e69c:	4813      	ldr	r0, [pc, #76]	; (2e6ec <process_buffer+0x424>)
					LOG_ERR("Error opening storage again:%d", err);
   2e69e:	f00e fdac 	bl	3d1fa <z_log_minimal_printk>
					return err;
   2e6a2:	e79e      	b.n	2e5e2 <process_buffer+0x31a>
				err = open_storage(npgps_block_to_offset(index.store_block),
   2e6a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e6a6:	f000 feb7 	bl	2f418 <npgps_block_to_offset>
   2e6aa:	4631      	mov	r1, r6
   2e6ac:	f7ff faf6 	bl	2dc9c <open_storage>
				if (err) {
   2e6b0:	4606      	mov	r6, r0
   2e6b2:	2800      	cmp	r0, #0
   2e6b4:	f43f aee8 	beq.w	2e488 <process_buffer+0x1c0>
					LOG_ERR("Error opening storage again:%d", err);
   2e6b8:	4602      	mov	r2, r0
   2e6ba:	2145      	movs	r1, #69	; 0x45
   2e6bc:	480c      	ldr	r0, [pc, #48]	; (2e6f0 <process_buffer+0x428>)
   2e6be:	e7ee      	b.n	2e69e <process_buffer+0x3d6>
   2e6c0:	2001a144 	.word	0x2001a144
   2e6c4:	0004a0f4 	.word	0x0004a0f4
   2e6c8:	2001a138 	.word	0x2001a138
   2e6cc:	2001a12c 	.word	0x2001a12c
   2e6d0:	0004a154 	.word	0x0004a154
   2e6d4:	2001caec 	.word	0x2001caec
   2e6d8:	0004a111 	.word	0x0004a111
   2e6dc:	2001c9f4 	.word	0x2001c9f4
   2e6e0:	0004a130 	.word	0x0004a130
   2e6e4:	2001d2d9 	.word	0x2001d2d9
   2e6e8:	0004a16e 	.word	0x0004a16e
   2e6ec:	0004a199 	.word	0x0004a199
   2e6f0:	0004a1b8 	.word	0x0004a1b8

0002e6f4 <nrf_cloud_pgps_preemptive_updates>:
	uint16_t gps_day = 0;
   2e6f4:	2300      	movs	r3, #0
{
   2e6f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6fa:	b089      	sub	sp, #36	; 0x24
	uint16_t gps_day = 0;
   2e6fc:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint32_t gps_time_of_day = 0;
   2e700:	9304      	str	r3, [sp, #16]
	if (state == PGPS_NONE) {
   2e702:	4b4f      	ldr	r3, [pc, #316]	; (2e840 <nrf_cloud_pgps_preemptive_updates+0x14c>)
	int current = index.cur_pnum;
   2e704:	4c4f      	ldr	r4, [pc, #316]	; (2e844 <nrf_cloud_pgps_preemptive_updates+0x150>)
	if (state == PGPS_NONE) {
   2e706:	781b      	ldrb	r3, [r3, #0]
	int current = index.cur_pnum;
   2e708:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
	uint16_t period_min = index.header.prediction_period_min;
   2e70c:	8927      	ldrh	r7, [r4, #8]
	if (state == PGPS_NONE) {
   2e70e:	b943      	cbnz	r3, 2e722 <nrf_cloud_pgps_preemptive_updates+0x2e>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e710:	484d      	ldr	r0, [pc, #308]	; (2e848 <nrf_cloud_pgps_preemptive_updates+0x154>)
   2e712:	2145      	movs	r1, #69	; 0x45
   2e714:	f00e fd71 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2e718:	f06f 0015 	mvn.w	r0, #21
}
   2e71c:	b009      	add	sp, #36	; 0x24
   2e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (nrf_cloud_pgps_loading()) {
   2e722:	f7ff fb29 	bl	2dd78 <nrf_cloud_pgps_loading>
   2e726:	4606      	mov	r6, r0
   2e728:	b108      	cbz	r0, 2e72e <nrf_cloud_pgps_preemptive_updates+0x3a>
		return 0;
   2e72a:	2000      	movs	r0, #0
   2e72c:	e7f6      	b.n	2e71c <nrf_cloud_pgps_preemptive_updates+0x28>
	if (current == 0xff) {
   2e72e:	2dff      	cmp	r5, #255	; 0xff
   2e730:	d102      	bne.n	2e738 <nrf_cloud_pgps_preemptive_updates+0x44>
		return pgps_request_all();
   2e732:	f7ff fbcb 	bl	2decc <pgps_request_all>
   2e736:	e7f1      	b.n	2e71c <nrf_cloud_pgps_preemptive_updates+0x28>
	if ((current + npgps_num_free()) < n) {
   2e738:	f000 fe3e 	bl	2f3b8 <npgps_num_free>
   2e73c:	4428      	add	r0, r5
   2e73e:	2825      	cmp	r0, #37	; 0x25
   2e740:	ddf3      	ble.n	2e72a <nrf_cloud_pgps_preemptive_updates+0x36>
	if (evt_handler) {
   2e742:	4b42      	ldr	r3, [pc, #264]	; (2e84c <nrf_cloud_pgps_preemptive_updates+0x158>)
   2e744:	681b      	ldr	r3, [r3, #0]
   2e746:	b133      	cbz	r3, 2e756 <nrf_cloud_pgps_preemptive_updates+0x62>
		struct nrf_cloud_pgps_event evt = {
   2e748:	2202      	movs	r2, #2
   2e74a:	e9cd 6605 	strd	r6, r6, [sp, #20]
		evt_handler(&evt);
   2e74e:	a805      	add	r0, sp, #20
		struct nrf_cloud_pgps_event evt = {
   2e750:	f88d 2014 	strb.w	r2, [sp, #20]
		evt_handler(&evt);
   2e754:	4798      	blx	r3
	LOG_INF("Replacing %d oldest predictions; %d already free",
   2e756:	f000 fe2f 	bl	2f3b8 <npgps_num_free>
   2e75a:	462a      	mov	r2, r5
   2e75c:	4603      	mov	r3, r0
   2e75e:	2149      	movs	r1, #73	; 0x49
   2e760:	483b      	ldr	r0, [pc, #236]	; (2e850 <nrf_cloud_pgps_preemptive_updates+0x15c>)
   2e762:	f00e fd4a 	bl	3d1fa <z_log_minimal_printk>
	if (current >= n) {
   2e766:	2d25      	cmp	r5, #37	; 0x25
   2e768:	dd2f      	ble.n	2e7ca <nrf_cloud_pgps_preemptive_updates+0xd6>
	int last = MIN(num, index.header.prediction_count);
   2e76a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   2e76e:	4e39      	ldr	r6, [pc, #228]	; (2e854 <nrf_cloud_pgps_preemptive_updates+0x160>)
   2e770:	45a8      	cmp	r8, r5
   2e772:	bfa8      	it	ge
   2e774:	46a8      	movge	r8, r5
	LOG_INF("discarding %d", last);
   2e776:	2149      	movs	r1, #73	; 0x49
   2e778:	4642      	mov	r2, r8
   2e77a:	4837      	ldr	r0, [pc, #220]	; (2e858 <nrf_cloud_pgps_preemptive_updates+0x164>)
   2e77c:	f00e fd3d 	bl	3d1fa <z_log_minimal_printk>
	for (pnum = 0; pnum < last; pnum++) {
   2e780:	46b1      	mov	r9, r6
   2e782:	2500      	movs	r5, #0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e784:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2e85c <nrf_cloud_pgps_preemptive_updates+0x168>
   2e788:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2e860 <nrf_cloud_pgps_preemptive_updates+0x16c>
	for (pnum = 0; pnum < last; pnum++) {
   2e78c:	45a8      	cmp	r8, r5
   2e78e:	d133      	bne.n	2e7f8 <nrf_cloud_pgps_preemptive_updates+0x104>
	for (i = last; i < index.header.prediction_count; i++) {
   2e790:	462b      	mov	r3, r5
   2e792:	88a2      	ldrh	r2, [r4, #4]
   2e794:	4293      	cmp	r3, r2
   2e796:	db48      	blt.n	2e82a <nrf_cloud_pgps_preemptive_updates+0x136>
		index.predictions[pnum] = NULL;
   2e798:	2100      	movs	r1, #0
	for (pnum = index.header.prediction_count - last; pnum <
   2e79a:	1b53      	subs	r3, r2, r5
   2e79c:	429a      	cmp	r2, r3
   2e79e:	dc4a      	bgt.n	2e836 <nrf_cloud_pgps_preemptive_updates+0x142>
	npgps_print_blocks();
   2e7a0:	f000 fdd2 	bl	2f348 <npgps_print_blocks>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e7a4:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2e7a8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e7aa:	f10d 020e 	add.w	r2, sp, #14
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e7ae:	4368      	muls	r0, r5
   2e7b0:	18c0      	adds	r0, r0, r3
   2e7b2:	f141 0100 	adc.w	r1, r1, #0
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e7b6:	ab05      	add	r3, sp, #20
		*gps_sec = psec;
   2e7b8:	e9c4 0104 	strd	r0, r1, [r4, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e7bc:	f000 fcbe 	bl	2f13c <npgps_gps_sec_to_day_time>
	index.header.gps_day = gps_day;
   2e7c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2e7c4:	8163      	strh	r3, [r4, #10]
	index.header.gps_time_of_day = gps_time_of_day;
   2e7c6:	9b05      	ldr	r3, [sp, #20]
   2e7c8:	60e3      	str	r3, [r4, #12]
	npgps_gps_sec_to_day_time(index.end_sec, &gps_day, &gps_time_of_day);
   2e7ca:	ab04      	add	r3, sp, #16
   2e7cc:	aa03      	add	r2, sp, #12
   2e7ce:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   2e7d2:	f000 fcb3 	bl	2f13c <npgps_gps_sec_to_day_time>
	request.gps_day = gps_day;
   2e7d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2e7da:	f8ad 3018 	strh.w	r3, [sp, #24]
	request.gps_time_of_day = gps_time_of_day;
   2e7de:	9b04      	ldr	r3, [sp, #16]
   2e7e0:	f8cd 301a 	str.w	r3, [sp, #26]
	request.prediction_count = npgps_num_free();
   2e7e4:	f000 fde8 	bl	2f3b8 <npgps_num_free>
   2e7e8:	f8ad 0014 	strh.w	r0, [sp, #20]
	return pgps_request(&request);
   2e7ec:	a805      	add	r0, sp, #20
	request.prediction_period_min = period_min;
   2e7ee:	f8ad 7016 	strh.w	r7, [sp, #22]
	return pgps_request(&request);
   2e7f2:	f7ff facb 	bl	2dd8c <pgps_request>
   2e7f6:	e791      	b.n	2e71c <nrf_cloud_pgps_preemptive_updates+0x28>
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e7f8:	f859 0b04 	ldr.w	r0, [r9], #4
   2e7fc:	f000 fe20 	bl	2f440 <npgps_pointer_to_block>
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e800:	1c42      	adds	r2, r0, #1
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e802:	4603      	mov	r3, r0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e804:	d10c      	bne.n	2e820 <nrf_cloud_pgps_preemptive_updates+0x12c>
   2e806:	f44f 72b1 	mov.w	r2, #354	; 0x162
   2e80a:	4651      	mov	r1, sl
   2e80c:	9001      	str	r0, [sp, #4]
   2e80e:	4658      	mov	r0, fp
   2e810:	f00e fcb9 	bl	3d186 <assert_print>
   2e814:	f44f 71b1 	mov.w	r1, #354	; 0x162
   2e818:	4650      	mov	r0, sl
   2e81a:	f00e fcad 	bl	3d178 <assert_post_action>
   2e81e:	9b01      	ldr	r3, [sp, #4]
		npgps_free_block(block);
   2e820:	4618      	mov	r0, r3
   2e822:	f000 fd3b 	bl	2f29c <npgps_free_block>
	for (pnum = 0; pnum < last; pnum++) {
   2e826:	3501      	adds	r5, #1
   2e828:	e7b0      	b.n	2e78c <nrf_cloud_pgps_preemptive_updates+0x98>
		index.predictions[pnum] = index.predictions[i];
   2e82a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
	for (i = last; i < index.header.prediction_count; i++) {
   2e82e:	3301      	adds	r3, #1
		index.predictions[pnum] = index.predictions[i];
   2e830:	f846 1b04 	str.w	r1, [r6], #4
	for (i = last; i < index.header.prediction_count; i++) {
   2e834:	e7ae      	b.n	2e794 <nrf_cloud_pgps_preemptive_updates+0xa0>
		index.predictions[pnum] = NULL;
   2e836:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   2e83a:	63c1      	str	r1, [r0, #60]	; 0x3c
	      index.header.prediction_count; pnum++) {
   2e83c:	3301      	adds	r3, #1
   2e83e:	e7ad      	b.n	2e79c <nrf_cloud_pgps_preemptive_updates+0xa8>
   2e840:	2001d2d9 	.word	0x2001d2d9
   2e844:	20015820 	.word	0x20015820
   2e848:	00049a4e 	.word	0x00049a4e
   2e84c:	2001a12c 	.word	0x2001a12c
   2e850:	0004a222 	.word	0x0004a222
   2e854:	2001585c 	.word	0x2001585c
   2e858:	0004a258 	.word	0x0004a258
   2e85c:	0004a26b 	.word	0x0004a26b
   2e860:	0004494f 	.word	0x0004494f

0002e864 <nrf_cloud_pgps_inject>:
{
   2e864:	b570      	push	{r4, r5, r6, lr}
	if (state == PGPS_NONE) {
   2e866:	4a64      	ldr	r2, [pc, #400]	; (2e9f8 <nrf_cloud_pgps_inject+0x194>)
{
   2e868:	4606      	mov	r6, r0
	if (state == PGPS_NONE) {
   2e86a:	7812      	ldrb	r2, [r2, #0]
{
   2e86c:	460b      	mov	r3, r1
   2e86e:	b0ae      	sub	sp, #184	; 0xb8
	if (state == PGPS_NONE) {
   2e870:	b942      	cbnz	r2, 2e884 <nrf_cloud_pgps_inject+0x20>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e872:	2145      	movs	r1, #69	; 0x45
   2e874:	4861      	ldr	r0, [pc, #388]	; (2e9fc <nrf_cloud_pgps_inject+0x198>)
   2e876:	f00e fcc0 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2e87a:	f06f 0415 	mvn.w	r4, #21
}
   2e87e:	4620      	mov	r0, r4
   2e880:	b02e      	add	sp, #184	; 0xb8
   2e882:	bd70      	pop	{r4, r5, r6, pc}
	if (request != NULL) {
   2e884:	2900      	cmp	r1, #0
   2e886:	f000 809c 	beq.w	2e9c2 <nrf_cloud_pgps_inject+0x15e>
		memcpy(&remainder, request, sizeof(remainder));
   2e88a:	6808      	ldr	r0, [r1, #0]
   2e88c:	6849      	ldr	r1, [r1, #4]
   2e88e:	aa04      	add	r2, sp, #16
   2e890:	c203      	stmia	r2!, {r0, r1}
   2e892:	6898      	ldr	r0, [r3, #8]
   2e894:	6010      	str	r0, [r2, #0]
	nrf_cloud_agps_processed(&processed);
   2e896:	a807      	add	r0, sp, #28
   2e898:	f7fe feea 	bl	2d670 <nrf_cloud_agps_processed>
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e89c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e89e:	06d4      	lsls	r4, r2, #27
   2e8a0:	d505      	bpl.n	2e8ae <nrf_cloud_pgps_inject+0x4a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2e8a2:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e8a4:	06d8      	lsls	r0, r3, #27
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2e8a6:	bf44      	itt	mi
   2e8a8:	f023 0310 	bicmi.w	r3, r3, #16
   2e8ac:	9306      	strmi	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e8ae:	0711      	lsls	r1, r2, #28
   2e8b0:	d505      	bpl.n	2e8be <nrf_cloud_pgps_inject+0x5a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e8b2:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e8b4:	071a      	lsls	r2, r3, #28
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2e8b6:	bf44      	itt	mi
   2e8b8:	f023 0308 	bicmi.w	r3, r3, #8
   2e8bc:	9306      	strmi	r3, [sp, #24]
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e8be:	9d06      	ldr	r5, [sp, #24]
   2e8c0:	f015 0408 	ands.w	r4, r5, #8
   2e8c4:	f000 8088 	beq.w	2e9d8 <nrf_cloud_pgps_inject+0x174>
		sys_time.time.time_frac_ms = 0;
   2e8c8:	2400      	movs	r4, #0
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e8ca:	2207      	movs	r2, #7
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e8cc:	2301      	movs	r3, #1
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e8ce:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		err = npgps_get_time(NULL, &day, &sec);
   2e8d2:	4620      	mov	r0, r4
   2e8d4:	aa03      	add	r2, sp, #12
   2e8d6:	f10d 010a 	add.w	r1, sp, #10
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e8da:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		sys_time.count = 1;
   2e8de:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		sys_time.time.time_frac_ms = 0;
   2e8e2:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
		sys_time.time.sv_mask = 0;
   2e8e6:	940d      	str	r4, [sp, #52]	; 0x34
		err = npgps_get_time(NULL, &day, &sec);
   2e8e8:	f011 facd 	bl	3fe86 <npgps_get_time>
		if (!err) {
   2e8ec:	2800      	cmp	r0, #0
   2e8ee:	d16e      	bne.n	2e9ce <nrf_cloud_pgps_inject+0x16a>
			sys_time.time.date_day = day;
   2e8f0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
			sys_time.time.time_full_s = sec;
   2e8f4:	9b03      	ldr	r3, [sp, #12]
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e8f6:	2149      	movs	r1, #73	; 0x49
   2e8f8:	4841      	ldr	r0, [pc, #260]	; (2ea00 <nrf_cloud_pgps_inject+0x19c>)
			sys_time.time.date_day = day;
   2e8fa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
			sys_time.time.time_full_s = sec;
   2e8fe:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e902:	f00e fc7a 	bl	3d1fa <z_log_minimal_printk>
			err = nrf_cloud_agps_process((const char *)&sys_time,
   2e906:	2110      	movs	r1, #16
   2e908:	a80a      	add	r0, sp, #40	; 0x28
   2e90a:	f7fe fc35 	bl	2d178 <nrf_cloud_agps_process>
			if (err) {
   2e90e:	4604      	mov	r4, r0
   2e910:	b140      	cbz	r0, 2e924 <nrf_cloud_pgps_inject+0xc0>
				LOG_ERR("Error injecting P-GPS sys_time (%u, %u): %d",
   2e912:	9000      	str	r0, [sp, #0]
   2e914:	2145      	movs	r1, #69	; 0x45
   2e916:	f8dd 302e 	ldr.w	r3, [sp, #46]	; 0x2e
   2e91a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   2e91e:	4839      	ldr	r0, [pc, #228]	; (2ea04 <nrf_cloud_pgps_inject+0x1a0>)
   2e920:	f00e fc6b 	bl	3d1fa <z_log_minimal_printk>
	const struct gps_location *saved_location = npgps_get_saved_location();
   2e924:	f000 fbd2 	bl	2f0cc <npgps_get_saved_location>
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e928:	06eb      	lsls	r3, r5, #27
   2e92a:	d55d      	bpl.n	2e9e8 <nrf_cloud_pgps_inject+0x184>
   2e92c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2e930:	4313      	orrs	r3, r2
   2e932:	d054      	beq.n	2e9de <nrf_cloud_pgps_inject+0x17a>
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e934:	2301      	movs	r3, #1
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e936:	2208      	movs	r2, #8
		location.location.altitude = 0;
   2e938:	2100      	movs	r1, #0
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e93a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e93e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		location.location.latitude = saved_location->latitude;
   2e942:	6802      	ldr	r2, [r0, #0]
		location.count = 1;
   2e944:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		location.location.longitude = saved_location->longitude;
   2e948:	6843      	ldr	r3, [r0, #4]
		location.location.altitude = 0;
   2e94a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
		location.location.orientation_major = 0;
   2e94e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e952:	21ff      	movs	r1, #255	; 0xff
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e954:	2059      	movs	r0, #89	; 0x59
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e956:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e95a:	2144      	movs	r1, #68	; 0x44
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e95c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
		location.location.unc_semiminor = LOCATION_UNC_SEMIMINOR_K;
   2e960:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e964:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e968:	4827      	ldr	r0, [pc, #156]	; (2ea08 <nrf_cloud_pgps_inject+0x1a4>)
   2e96a:	2149      	movs	r1, #73	; 0x49
		location.location.latitude = saved_location->latitude;
   2e96c:	920b      	str	r2, [sp, #44]	; 0x2c
		location.location.longitude = saved_location->longitude;
   2e96e:	930c      	str	r3, [sp, #48]	; 0x30
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e970:	f00e fc43 	bl	3d1fa <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&location, sizeof(location));
   2e974:	2113      	movs	r1, #19
   2e976:	a80a      	add	r0, sp, #40	; 0x28
   2e978:	f7fe fbfe 	bl	2d178 <nrf_cloud_agps_process>
		if (err) {
   2e97c:	4605      	mov	r5, r0
   2e97e:	b138      	cbz	r0, 2e990 <nrf_cloud_pgps_inject+0x12c>
			LOG_ERR("Error injecting P-GPS location (%d, %d): %d",
   2e980:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
   2e984:	9000      	str	r0, [sp, #0]
   2e986:	2145      	movs	r1, #69	; 0x45
   2e988:	4820      	ldr	r0, [pc, #128]	; (2ea0c <nrf_cloud_pgps_inject+0x1a8>)
   2e98a:	f00e fc36 	bl	3d1fa <z_log_minimal_printk>
   2e98e:	462c      	mov	r4, r5
	if (remainder.sv_mask_ephe) {
   2e990:	9b04      	ldr	r3, [sp, #16]
   2e992:	b363      	cbz	r3, 2e9ee <nrf_cloud_pgps_inject+0x18a>
		LOG_INF("GPS unit needs ephemerides. Injecting %u.", p->ephemeris_count);
   2e994:	2149      	movs	r1, #73	; 0x49
   2e996:	f8b6 2015 	ldrh.w	r2, [r6, #21]
   2e99a:	481d      	ldr	r0, [pc, #116]	; (2ea10 <nrf_cloud_pgps_inject+0x1ac>)
   2e99c:	f00e fc2d 	bl	3d1fa <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&p->schema_version,
   2e9a0:	f240 71c4 	movw	r1, #1988	; 0x7c4
   2e9a4:	f106 0013 	add.w	r0, r6, #19
   2e9a8:	f7fe fbe6 	bl	2d178 <nrf_cloud_agps_process>
		if (err) {
   2e9ac:	4605      	mov	r5, r0
   2e9ae:	2800      	cmp	r0, #0
   2e9b0:	f43f af65 	beq.w	2e87e <nrf_cloud_pgps_inject+0x1a>
			LOG_ERR("Error injecting ephermerii:%d", err);
   2e9b4:	4602      	mov	r2, r0
   2e9b6:	2145      	movs	r1, #69	; 0x45
   2e9b8:	4816      	ldr	r0, [pc, #88]	; (2ea14 <nrf_cloud_pgps_inject+0x1b0>)
   2e9ba:	f00e fc1e 	bl	3d1fa <z_log_minimal_printk>
   2e9be:	462c      	mov	r4, r5
   2e9c0:	e75d      	b.n	2e87e <nrf_cloud_pgps_inject+0x1a>
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e9c2:	f04f 33ff 	mov.w	r3, #4294967295
		memset(&remainder, 0, sizeof(remainder));
   2e9c6:	e9cd 1105 	strd	r1, r1, [sp, #20]
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e9ca:	9304      	str	r3, [sp, #16]
   2e9cc:	e763      	b.n	2e896 <nrf_cloud_pgps_inject+0x32>
			LOG_WRN("Current time not known; cannot provide time assistance");
   2e9ce:	2157      	movs	r1, #87	; 0x57
   2e9d0:	4811      	ldr	r0, [pc, #68]	; (2ea18 <nrf_cloud_pgps_inject+0x1b4>)
		LOG_INF("GPS unit does not need time assistance.");
   2e9d2:	f00e fc12 	bl	3d1fa <z_log_minimal_printk>
   2e9d6:	e7a5      	b.n	2e924 <nrf_cloud_pgps_inject+0xc0>
   2e9d8:	2149      	movs	r1, #73	; 0x49
   2e9da:	4810      	ldr	r0, [pc, #64]	; (2ea1c <nrf_cloud_pgps_inject+0x1b8>)
   2e9dc:	e7f9      	b.n	2e9d2 <nrf_cloud_pgps_inject+0x16e>
		LOG_WRN("GPS unit needs location, but it is unknown!");
   2e9de:	2157      	movs	r1, #87	; 0x57
   2e9e0:	480f      	ldr	r0, [pc, #60]	; (2ea20 <nrf_cloud_pgps_inject+0x1bc>)
		LOG_INF("GPS unit does not need location assistance.");
   2e9e2:	f00e fc0a 	bl	3d1fa <z_log_minimal_printk>
   2e9e6:	e7d3      	b.n	2e990 <nrf_cloud_pgps_inject+0x12c>
   2e9e8:	2149      	movs	r1, #73	; 0x49
   2e9ea:	480e      	ldr	r0, [pc, #56]	; (2ea24 <nrf_cloud_pgps_inject+0x1c0>)
   2e9ec:	e7f9      	b.n	2e9e2 <nrf_cloud_pgps_inject+0x17e>
		LOG_INF("GPS unit does not need ephemerides.");
   2e9ee:	2149      	movs	r1, #73	; 0x49
   2e9f0:	480d      	ldr	r0, [pc, #52]	; (2ea28 <nrf_cloud_pgps_inject+0x1c4>)
   2e9f2:	f00e fc02 	bl	3d1fa <z_log_minimal_printk>
   2e9f6:	e742      	b.n	2e87e <nrf_cloud_pgps_inject+0x1a>
   2e9f8:	2001d2d9 	.word	0x2001d2d9
   2e9fc:	00049a4e 	.word	0x00049a4e
   2ea00:	0004a2a9 	.word	0x0004a2a9
   2ea04:	0004a2e8 	.word	0x0004a2e8
   2ea08:	0004a382 	.word	0x0004a382
   2ea0c:	0004a3b9 	.word	0x0004a3b9
   2ea10:	0004a44c 	.word	0x0004a44c
   2ea14:	0004a47b 	.word	0x0004a47b
   2ea18:	0004a319 	.word	0x0004a319
   2ea1c:	0004a355 	.word	0x0004a355
   2ea20:	0004a3ea 	.word	0x0004a3ea
   2ea24:	0004a41b 	.word	0x0004a41b
   2ea28:	0004a49e 	.word	0x0004a49e

0002ea2c <prediction_work_handler>:
{
   2ea2c:	b507      	push	{r0, r1, r2, lr}
	LOG_INF("prediction is expiring; finding next");
   2ea2e:	2149      	movs	r1, #73	; 0x49
   2ea30:	480c      	ldr	r0, [pc, #48]	; (2ea64 <prediction_work_handler+0x38>)
   2ea32:	f00e fbe2 	bl	3d1fa <z_log_minimal_printk>
	ret = nrf_cloud_pgps_find_prediction(&p);
   2ea36:	a801      	add	r0, sp, #4
   2ea38:	f7ff fa82 	bl	2df40 <nrf_cloud_pgps_find_prediction>
	if (ret >= 0) {
   2ea3c:	2800      	cmp	r0, #0
   2ea3e:	db09      	blt.n	2ea54 <prediction_work_handler+0x28>
		ret = nrf_cloud_pgps_inject(p, NULL);
   2ea40:	2100      	movs	r1, #0
   2ea42:	9801      	ldr	r0, [sp, #4]
   2ea44:	f7ff ff0e 	bl	2e864 <nrf_cloud_pgps_inject>
		if (ret) {
   2ea48:	4602      	mov	r2, r0
   2ea4a:	b130      	cbz	r0, 2ea5a <prediction_work_handler+0x2e>
			LOG_ERR("Error injecting prediction:%d", ret);
   2ea4c:	2145      	movs	r1, #69	; 0x45
   2ea4e:	4806      	ldr	r0, [pc, #24]	; (2ea68 <prediction_work_handler+0x3c>)
   2ea50:	f00e fbd3 	bl	3d1fa <z_log_minimal_printk>
}
   2ea54:	b003      	add	sp, #12
   2ea56:	f85d fb04 	ldr.w	pc, [sp], #4
			LOG_INF("Next prediction injected successfully.");
   2ea5a:	2149      	movs	r1, #73	; 0x49
   2ea5c:	4803      	ldr	r0, [pc, #12]	; (2ea6c <prediction_work_handler+0x40>)
   2ea5e:	f00e fbcc 	bl	3d1fa <z_log_minimal_printk>
}
   2ea62:	e7f7      	b.n	2ea54 <prediction_work_handler+0x28>
   2ea64:	0004a4c7 	.word	0x0004a4c7
   2ea68:	0004a4f1 	.word	0x0004a4f1
   2ea6c:	0004a514 	.word	0x0004a514

0002ea70 <nrf_cloud_pgps_process>:
	return 0;
}

/* handle incoming P-GPS packets */
int nrf_cloud_pgps_process(const char *buf, size_t buf_len)
{
   2ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static char host[CONFIG_DOWNLOAD_CLIENT_MAX_HOSTNAME_SIZE];
	static char path[CONFIG_DOWNLOAD_CLIENT_MAX_FILENAME_SIZE];
	static uint8_t prev_pnum;
	uint8_t pnum;
	int err;
	struct nrf_cloud_pgps_result pgps_dl = {
   2ea74:	4b41      	ldr	r3, [pc, #260]	; (2eb7c <nrf_cloud_pgps_process+0x10c>)
		.host_sz = sizeof(host),
		.path = path,
		.path_sz = sizeof(path)
	};

	if (state == PGPS_NONE) {
   2ea76:	4d42      	ldr	r5, [pc, #264]	; (2eb80 <nrf_cloud_pgps_process+0x110>)
{
   2ea78:	b086      	sub	sp, #24
	struct nrf_cloud_pgps_result pgps_dl = {
   2ea7a:	ac02      	add	r4, sp, #8
{
   2ea7c:	4680      	mov	r8, r0
   2ea7e:	460f      	mov	r7, r1
	struct nrf_cloud_pgps_result pgps_dl = {
   2ea80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2ea82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (state == PGPS_NONE) {
   2ea86:	782b      	ldrb	r3, [r5, #0]
   2ea88:	b943      	cbnz	r3, 2ea9c <nrf_cloud_pgps_process+0x2c>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2ea8a:	2145      	movs	r1, #69	; 0x45
   2ea8c:	483d      	ldr	r0, [pc, #244]	; (2eb84 <nrf_cloud_pgps_process+0x114>)
   2ea8e:	f00e fbb4 	bl	3d1fa <z_log_minimal_printk>
	LOG_HEXDUMP_DBG(buf, buf_len, "MQTT packet");
#endif
	if (!buf_len) {
		LOG_ERR("Zero length packet received");
		state = PGPS_NONE;
		return -EINVAL;
   2ea92:	f06f 0015 	mvn.w	r0, #21
	if (err) {
		state = PGPS_NONE;
	}

	return err;
}
   2ea96:	b006      	add	sp, #24
   2ea98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!buf_len) {
   2ea9c:	b92f      	cbnz	r7, 2eaaa <nrf_cloud_pgps_process+0x3a>
		LOG_ERR("Zero length packet received");
   2ea9e:	2145      	movs	r1, #69	; 0x45
   2eaa0:	4839      	ldr	r0, [pc, #228]	; (2eb88 <nrf_cloud_pgps_process+0x118>)
   2eaa2:	f00e fbaa 	bl	3d1fa <z_log_minimal_printk>
		state = PGPS_NONE;
   2eaa6:	702f      	strb	r7, [r5, #0]
   2eaa8:	e7f3      	b.n	2ea92 <nrf_cloud_pgps_process+0x22>
	if (ignore_packets) {
   2eaaa:	4e38      	ldr	r6, [pc, #224]	; (2eb8c <nrf_cloud_pgps_process+0x11c>)
   2eaac:	7833      	ldrb	r3, [r6, #0]
   2eaae:	b173      	cbz	r3, 2eace <nrf_cloud_pgps_process+0x5e>
		LOG_ERR("IGNORING PACKETS");
   2eab0:	2145      	movs	r1, #69	; 0x45
   2eab2:	4837      	ldr	r0, [pc, #220]	; (2eb90 <nrf_cloud_pgps_process+0x120>)
   2eab4:	f00e fba1 	bl	3d1fa <z_log_minimal_printk>
		LOG_HEXDUMP_INF(buf, buf_len, "Unexpected packet");
   2eab8:	2149      	movs	r1, #73	; 0x49
   2eaba:	4a36      	ldr	r2, [pc, #216]	; (2eb94 <nrf_cloud_pgps_process+0x124>)
   2eabc:	4836      	ldr	r0, [pc, #216]	; (2eb98 <nrf_cloud_pgps_process+0x128>)
   2eabe:	f00e fb9c 	bl	3d1fa <z_log_minimal_printk>
   2eac2:	463a      	mov	r2, r7
   2eac4:	4641      	mov	r1, r8
   2eac6:	2003      	movs	r0, #3
   2eac8:	f7f2 ffe2 	bl	21a90 <z_log_minimal_hexdump_print>
		return -EINVAL;
   2eacc:	e7e1      	b.n	2ea92 <nrf_cloud_pgps_process+0x22>
	err = nrf_cloud_parse_pgps_response(buf, &pgps_dl);
   2eace:	4621      	mov	r1, r4
   2ead0:	4640      	mov	r0, r8
   2ead2:	f7fc fe7d 	bl	2b7d0 <nrf_cloud_parse_pgps_response>
	if (err) {
   2ead6:	2800      	cmp	r0, #0
   2ead8:	d1dd      	bne.n	2ea96 <nrf_cloud_pgps_process+0x26>
	state = PGPS_LOADING;
   2eada:	2305      	movs	r3, #5
	if (!index.partial_request) {
   2eadc:	4c2f      	ldr	r4, [pc, #188]	; (2eb9c <nrf_cloud_pgps_process+0x12c>)
	state = PGPS_LOADING;
   2eade:	702b      	strb	r3, [r5, #0]
	if (!index.partial_request) {
   2eae0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2eae4:	b9d9      	cbnz	r1, 2eb1e <nrf_cloud_pgps_process+0xae>
		index.header.prediction_count = NUM_PREDICTIONS;
   2eae6:	232a      	movs	r3, #42	; 0x2a
   2eae8:	80a3      	strh	r3, [r4, #4]
		index.header.prediction_period_min = PREDICTION_PERIOD;
   2eaea:	23f0      	movs	r3, #240	; 0xf0
   2eaec:	8123      	strh	r3, [r4, #8]
		index.period_sec =
   2eaee:	f44f 5361 	mov.w	r3, #14400	; 0x3840
		memset(index.predictions, 0, sizeof(index.predictions));
   2eaf2:	22a8      	movs	r2, #168	; 0xa8
   2eaf4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
		index.period_sec =
   2eaf8:	8563      	strh	r3, [r4, #42]	; 0x2a
		memset(index.predictions, 0, sizeof(index.predictions));
   2eafa:	f013 f831 	bl	41b60 <memset>
	index.loading_count = 0;
   2eafe:	2700      	movs	r7, #0
   2eb00:	8527      	strh	r7, [r4, #40]	; 0x28
	index.store_block = npgps_alloc_block();
   2eb02:	f000 fbad 	bl	2f260 <npgps_alloc_block>
   2eb06:	4603      	mov	r3, r0
	if (index.store_block == NO_BLOCK) {
   2eb08:	3301      	adds	r3, #1
	index.store_block = npgps_alloc_block();
   2eb0a:	63a0      	str	r0, [r4, #56]	; 0x38
	if (index.store_block == NO_BLOCK) {
   2eb0c:	d113      	bne.n	2eb36 <nrf_cloud_pgps_process+0xc6>
		LOG_ERR("No free flash space!");
   2eb0e:	4824      	ldr	r0, [pc, #144]	; (2eba0 <nrf_cloud_pgps_process+0x130>)
   2eb10:	2145      	movs	r1, #69	; 0x45
   2eb12:	f00e fb72 	bl	3d1fa <z_log_minimal_printk>
		return -ENOMEM;
   2eb16:	f06f 000b 	mvn.w	r0, #11
		state = PGPS_NONE;
   2eb1a:	702f      	strb	r7, [r5, #0]
		return -ENOMEM;
   2eb1c:	e7bb      	b.n	2ea96 <nrf_cloud_pgps_process+0x26>
		for (pnum = index.pnum_offset;
   2eb1e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2eb22:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2eb24:	441a      	add	r2, r3
		for (pnum = index.pnum_offset;
   2eb26:	4293      	cmp	r3, r2
   2eb28:	dae9      	bge.n	2eafe <nrf_cloud_pgps_process+0x8e>
			index.predictions[pnum] = NULL;
   2eb2a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2eb2e:	3301      	adds	r3, #1
			index.predictions[pnum] = NULL;
   2eb30:	63c8      	str	r0, [r1, #60]	; 0x3c
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2eb32:	b2db      	uxtb	r3, r3
   2eb34:	e7f7      	b.n	2eb26 <nrf_cloud_pgps_process+0xb6>
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2eb36:	f000 fbbd 	bl	2f2b4 <npgps_get_block_extent>
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2eb3a:	2149      	movs	r1, #73	; 0x49
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2eb3c:	4603      	mov	r3, r0
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2eb3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2eb40:	6360      	str	r0, [r4, #52]	; 0x34
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2eb42:	4818      	ldr	r0, [pc, #96]	; (2eba4 <nrf_cloud_pgps_process+0x134>)
   2eb44:	f00e fb59 	bl	3d1fa <z_log_minimal_printk>
	err = open_storage(npgps_block_to_offset(index.store_block),
   2eb48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2eb4a:	f000 fc65 	bl	2f418 <npgps_block_to_offset>
   2eb4e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2eb52:	f7ff f8a3 	bl	2dc9c <open_storage>
	if (err) {
   2eb56:	b108      	cbz	r0, 2eb5c <nrf_cloud_pgps_process+0xec>
		state = PGPS_NONE;
   2eb58:	702f      	strb	r7, [r5, #0]
   2eb5a:	e79c      	b.n	2ea96 <nrf_cloud_pgps_process+0x26>
	ignore_packets = true;
   2eb5c:	2301      	movs	r3, #1
   2eb5e:	7033      	strb	r3, [r6, #0]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2eb60:	f240 53dc 	movw	r3, #1500	; 0x5dc
	index.dl_offset = 0;
   2eb64:	6220      	str	r0, [r4, #32]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2eb66:	4a10      	ldr	r2, [pc, #64]	; (2eba8 <nrf_cloud_pgps_process+0x138>)
   2eb68:	9300      	str	r3, [sp, #0]
   2eb6a:	9904      	ldr	r1, [sp, #16]
   2eb6c:	4603      	mov	r3, r0
   2eb6e:	9802      	ldr	r0, [sp, #8]
   2eb70:	f000 fcb0 	bl	2f4d4 <npgps_download_start>
	if (err) {
   2eb74:	2800      	cmp	r0, #0
   2eb76:	d08e      	beq.n	2ea96 <nrf_cloud_pgps_process+0x26>
   2eb78:	e7ee      	b.n	2eb58 <nrf_cloud_pgps_process+0xe8>
   2eb7a:	bf00      	nop
   2eb7c:	00042f4c 	.word	0x00042f4c
   2eb80:	2001d2d9 	.word	0x2001d2d9
   2eb84:	00049a4e 	.word	0x00049a4e
   2eb88:	0004a540 	.word	0x0004a540
   2eb8c:	2001c9f3 	.word	0x2001c9f3
   2eb90:	0004a561 	.word	0x0004a561
   2eb94:	0004a577 	.word	0x0004a577
   2eb98:	0004a589 	.word	0x0004a589
   2eb9c:	20015820 	.word	0x20015820
   2eba0:	0004a591 	.word	0x0004a591
   2eba4:	0004a5ab 	.word	0x0004a5ab
   2eba8:	01010001 	.word	0x01010001

0002ebac <nrf_cloud_pgps_init>:

int nrf_cloud_pgps_init(struct nrf_cloud_pgps_init_param *param)
{
	int err = 0;
	struct nrf_cloud_pgps_event evt = {
   2ebac:	2300      	movs	r3, #0
{
   2ebae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ebb2:	b097      	sub	sp, #92	; 0x5c
	struct nrf_cloud_pgps_event evt = {
   2ebb4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44

#if defined(CONFIG_NRF_CLOUD_PGPS_STORAGE_PARTITION)
	BUILD_ASSERT(CONFIG_NRF_CLOUD_PGPS_PARTITION_SIZE >=
		 (CONFIG_NRF_CLOUD_PGPS_NUM_PREDICTIONS * BLOCK_SIZE),
		 "P-GPS partition size is too small");
	if (param->storage_base || param->storage_size) {
   2ebb8:	6843      	ldr	r3, [r0, #4]
{
   2ebba:	4604      	mov	r4, r0
	if (param->storage_base || param->storage_size) {
   2ebbc:	b90b      	cbnz	r3, 2ebc2 <nrf_cloud_pgps_init+0x16>
   2ebbe:	6883      	ldr	r3, [r0, #8]
   2ebc0:	b11b      	cbz	r3, 2ebca <nrf_cloud_pgps_init+0x1e>
		LOG_WRN("Overriding P-GPS storage with P-GPS partition");
   2ebc2:	2157      	movs	r1, #87	; 0x57
   2ebc4:	48ae      	ldr	r0, [pc, #696]	; (2ee80 <nrf_cloud_pgps_init+0x2d4>)
   2ebc6:	f00e fb18 	bl	3d1fa <z_log_minimal_printk>
	}
	param->storage_base = PM_PGPS_ADDRESS;
	param->storage_size = PM_PGPS_SIZE;
   2ebca:	f44f 33a8 	mov.w	r3, #86016	; 0x15000
   2ebce:	f44f 216b 	mov.w	r1, #962560	; 0xeb000
	__ASSERT(param->storage_base != 0u, "P-GPS flash storage must be provided");
	__ASSERT((param->storage_size >= (NUM_BLOCKS * BLOCK_SIZE)),
		 "insufficient storage provided; need at least %u bytes",
		 (NUM_BLOCKS * BLOCK_SIZE));

	evt_handler = param->event_handler;
   2ebd2:	4aac      	ldr	r2, [pc, #688]	; (2ee84 <nrf_cloud_pgps_init+0x2d8>)
	param->storage_size = PM_PGPS_SIZE;
   2ebd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
	evt_handler = param->event_handler;
   2ebd8:	6823      	ldr	r3, [r4, #0]
   2ebda:	6013      	str	r3, [r2, #0]
	if (evt_handler) {
   2ebdc:	b10b      	cbz	r3, 2ebe2 <nrf_cloud_pgps_init+0x36>
		evt_handler(&evt);
   2ebde:	a811      	add	r0, sp, #68	; 0x44
   2ebe0:	4798      	blx	r3
	}

	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2ebe2:	f011 fcf8 	bl	405d6 <nrfx_nvmc_flash_page_size_get>
	if (!flash_page_size) {
   2ebe6:	4aa8      	ldr	r2, [pc, #672]	; (2ee88 <nrf_cloud_pgps_init+0x2dc>)
   2ebe8:	b140      	cbz	r0, 2ebfc <nrf_cloud_pgps_init+0x50>
	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2ebea:	6010      	str	r0, [r2, #0]
		flash_page_size = 4096;
	}

	if (nrf_cloud_pgps_loading()) {
   2ebec:	f7ff f8c4 	bl	2dd78 <nrf_cloud_pgps_loading>
   2ebf0:	b140      	cbz	r0, 2ec04 <nrf_cloud_pgps_init+0x58>
		return 0;
   2ebf2:	2400      	movs	r4, #0
		}
		err = 0;
	}

	return err;
}
   2ebf4:	4620      	mov	r0, r4
   2ebf6:	b017      	add	sp, #92	; 0x5c
   2ebf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		flash_page_size = 4096;
   2ebfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2ec00:	6013      	str	r3, [r2, #0]
   2ec02:	e7f3      	b.n	2ebec <nrf_cloud_pgps_init+0x40>
	if (!write_buf) {
   2ec04:	4da1      	ldr	r5, [pc, #644]	; (2ee8c <nrf_cloud_pgps_init+0x2e0>)
	state = PGPS_NONE;
   2ec06:	4ea2      	ldr	r6, [pc, #648]	; (2ee90 <nrf_cloud_pgps_init+0x2e4>)
	if (!write_buf) {
   2ec08:	682b      	ldr	r3, [r5, #0]
	state = PGPS_NONE;
   2ec0a:	7030      	strb	r0, [r6, #0]
	if (!write_buf) {
   2ec0c:	b1db      	cbz	r3, 2ec46 <nrf_cloud_pgps_init+0x9a>
	storage_size = param->storage_size;
   2ec0e:	4ba1      	ldr	r3, [pc, #644]	; (2ee94 <nrf_cloud_pgps_init+0x2e8>)
   2ec10:	68a2      	ldr	r2, [r4, #8]
	storage = (uint8_t *)param->storage_base;
   2ec12:	6860      	ldr	r0, [r4, #4]
   2ec14:	4fa0      	ldr	r7, [pc, #640]	; (2ee98 <nrf_cloud_pgps_init+0x2ec>)
	memset(&index, 0, sizeof(index));
   2ec16:	4da1      	ldr	r5, [pc, #644]	; (2ee9c <nrf_cloud_pgps_init+0x2f0>)
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2ec18:	212a      	movs	r1, #42	; 0x2a
	storage_size = param->storage_size;
   2ec1a:	601a      	str	r2, [r3, #0]
	storage = (uint8_t *)param->storage_base;
   2ec1c:	6038      	str	r0, [r7, #0]
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2ec1e:	f000 fb15 	bl	2f24c <ngps_block_pool_init>
	memset(&index, 0, sizeof(index));
   2ec22:	22e8      	movs	r2, #232	; 0xe8
   2ec24:	2100      	movs	r1, #0
   2ec26:	4628      	mov	r0, r5
   2ec28:	f012 ff9a 	bl	41b60 <memset>
	(void)npgps_settings_init();
   2ec2c:	f000 fa52 	bl	2f0d4 <npgps_settings_init>
	err = npgps_download_init(process_buffer);
   2ec30:	489b      	ldr	r0, [pc, #620]	; (2eea0 <nrf_cloud_pgps_init+0x2f4>)
   2ec32:	f000 fc2f 	bl	2f494 <npgps_download_init>
	if (err) {
   2ec36:	4604      	mov	r4, r0
   2ec38:	b170      	cbz	r0, 2ec58 <nrf_cloud_pgps_init+0xac>
		LOG_ERR("Error initializing download client:%d", err);
   2ec3a:	4602      	mov	r2, r0
   2ec3c:	2145      	movs	r1, #69	; 0x45
   2ec3e:	4899      	ldr	r0, [pc, #612]	; (2eea4 <nrf_cloud_pgps_init+0x2f8>)
   2ec40:	f00e fadb 	bl	3d1fa <z_log_minimal_printk>
		return err;
   2ec44:	e7d6      	b.n	2ebf4 <nrf_cloud_pgps_init+0x48>
		write_buf = k_malloc(flash_page_size);
   2ec46:	6810      	ldr	r0, [r2, #0]
   2ec48:	f012 fee0 	bl	41a0c <k_malloc>
   2ec4c:	6028      	str	r0, [r5, #0]
		if (!write_buf) {
   2ec4e:	2800      	cmp	r0, #0
   2ec50:	d1dd      	bne.n	2ec0e <nrf_cloud_pgps_init+0x62>
			return -ENOMEM;
   2ec52:	f06f 040b 	mvn.w	r4, #11
   2ec56:	e7cd      	b.n	2ebf4 <nrf_cloud_pgps_init+0x48>
	state = PGPS_INITIALIZING;
   2ec58:	2301      	movs	r3, #1
	uint16_t gps_day = 0;
   2ec5a:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
	state = PGPS_INITIALIZING;
   2ec5e:	7033      	strb	r3, [r6, #0]
	uint32_t gps_time_of_day = 0;
   2ec60:	900f      	str	r0, [sp, #60]	; 0x3c
	saved_header = npgps_get_saved_header();
   2ec62:	f000 fa2f 	bl	2f0c4 <npgps_get_saved_header>
   2ec66:	4606      	mov	r6, r0
	if (validate_pgps_header(saved_header)) {
   2ec68:	f7fe ff40 	bl	2daec <validate_pgps_header>
   2ec6c:	2800      	cmp	r0, #0
   2ec6e:	f000 8103 	beq.w	2ee78 <nrf_cloud_pgps_init+0x2cc>
		cache_pgps_header(saved_header);
   2ec72:	4630      	mov	r0, r6
   2ec74:	f7fe ff6c 	bl	2db50 <cache_pgps_header>
		period_min = index.header.prediction_period_min;
   2ec78:	892b      	ldrh	r3, [r5, #8]
		count = index.header.prediction_count;
   2ec7a:	88ae      	ldrh	r6, [r5, #4]
		period_min = index.header.prediction_period_min;
   2ec7c:	9305      	str	r3, [sp, #20]
		gps_day = index.header.gps_day;
   2ec7e:	896b      	ldrh	r3, [r5, #10]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2ec80:	4632      	mov	r2, r6
		gps_day = index.header.gps_day;
   2ec82:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gps_time_of_day = index.header.gps_time_of_day;
   2ec86:	68eb      	ldr	r3, [r5, #12]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2ec88:	2149      	movs	r1, #73	; 0x49
		gps_time_of_day = index.header.gps_time_of_day;
   2ec8a:	930f      	str	r3, [sp, #60]	; 0x3c
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2ec8c:	4886      	ldr	r0, [pc, #536]	; (2eea8 <nrf_cloud_pgps_init+0x2fc>)
   2ec8e:	9b05      	ldr	r3, [sp, #20]
   2ec90:	f00e fab3 	bl	3d1fa <z_log_minimal_printk>
	uint16_t count = index.header.prediction_count;
   2ec94:	88ab      	ldrh	r3, [r5, #4]
   2ec96:	4621      	mov	r1, r4
   2ec98:	9306      	str	r3, [sp, #24]
	uint16_t period_min = index.header.prediction_period_min;
   2ec9a:	892b      	ldrh	r3, [r5, #8]
   2ec9c:	9308      	str	r3, [sp, #32]
	uint16_t gps_day = index.header.gps_day;
   2ec9e:	896b      	ldrh	r3, [r5, #10]
   2eca0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	uint32_t gps_time_of_day = index.header.gps_time_of_day;
   2eca4:	68eb      	ldr	r3, [r5, #12]
   2eca6:	9313      	str	r3, [sp, #76]	; 0x4c
	uint8_t *p = storage;
   2eca8:	683b      	ldr	r3, [r7, #0]
   2ecaa:	9309      	str	r3, [sp, #36]	; 0x24
	int64_t start_gps_sec = index.start_sec;
   2ecac:	692b      	ldr	r3, [r5, #16]
   2ecae:	930a      	str	r3, [sp, #40]	; 0x28
   2ecb0:	696b      	ldr	r3, [r5, #20]
   2ecb2:	930b      	str	r3, [sp, #44]	; 0x2c
	for (pnum = 0; pnum < count; pnum++) {
   2ecb4:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   2ecb8:	461a      	mov	r2, r3
   2ecba:	9307      	str	r3, [sp, #28]
   2ecbc:	4623      	mov	r3, r4
   2ecbe:	9806      	ldr	r0, [sp, #24]
   2ecc0:	4283      	cmp	r3, r0
   2ecc2:	db5d      	blt.n	2ed80 <nrf_cloud_pgps_init+0x1d4>
	npgps_reset_block_pool();
   2ecc4:	f000 fb0e 	bl	2f2e4 <npgps_reset_block_pool>
	for (i = 0; i < count; i++) {
   2ecc8:	f04f 0900 	mov.w	r9, #0
						      header->gps_time_of_day);
   2eccc:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 2ee9c <nrf_cloud_pgps_init+0x2f0>
   2ecd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ecd2:	eb03 28c9 	add.w	r8, r3, r9, lsl #11
	for (i = 0; i < count; i++) {
   2ecd6:	9b06      	ldr	r3, [sp, #24]
   2ecd8:	454b      	cmp	r3, r9
   2ecda:	dc55      	bgt.n	2ed88 <nrf_cloud_pgps_init+0x1dc>
	for (pnum = 0; pnum < count; pnum++) {
   2ecdc:	2500      	movs	r5, #0
   2ecde:	233c      	movs	r3, #60	; 0x3c
	for (i = 0; i < count; i++) {
   2ece0:	46a8      	mov	r8, r5
	i = -1;
   2ece2:	f04f 37ff 	mov.w	r7, #4294967295
   2ece6:	9a08      	ldr	r2, [sp, #32]
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2ece8:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 2eec4 <nrf_cloud_pgps_init+0x318>
   2ecec:	4353      	muls	r3, r2
   2ecee:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 2eec8 <nrf_cloud_pgps_init+0x31c>
   2ecf2:	9309      	str	r3, [sp, #36]	; 0x24
	for (pnum = 0; pnum < count; pnum++) {
   2ecf4:	9b06      	ldr	r3, [sp, #24]
   2ecf6:	42ab      	cmp	r3, r5
   2ecf8:	dd1b      	ble.n	2ed32 <nrf_cloud_pgps_init+0x186>
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2ecfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2ecfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2ecfe:	eb18 0003 	adds.w	r0, r8, r3
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2ed02:	aa10      	add	r2, sp, #64	; 0x40
   2ed04:	ab13      	add	r3, sp, #76	; 0x4c
   2ed06:	f141 0100 	adc.w	r1, r1, #0
   2ed0a:	f000 fa17 	bl	2f13c <npgps_gps_sec_to_day_time>
		pred = index.predictions[pnum];
   2ed0e:	9b07      	ldr	r3, [sp, #28]
   2ed10:	f853 9b04 	ldr.w	r9, [r3], #4
   2ed14:	9307      	str	r3, [sp, #28]
		if (pred == NULL) {
   2ed16:	f1b9 0f00 	cmp.w	r9, #0
   2ed1a:	d17e      	bne.n	2ee1a <nrf_cloud_pgps_init+0x26e>
			LOG_WRN("Prediction num:%u missing", pnum);
   2ed1c:	462a      	mov	r2, r5
   2ed1e:	2157      	movs	r1, #87	; 0x57
   2ed20:	4862      	ldr	r0, [pc, #392]	; (2eeac <nrf_cloud_pgps_init+0x300>)
   2ed22:	f00e fa6a 	bl	3d1fa <z_log_minimal_printk>
			*first_bad_day = gps_day;
   2ed26:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2ed2a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			*first_bad_time = gps_time_of_day;
   2ed2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ed30:	930f      	str	r3, [sp, #60]	; 0x3c
	if (i != -1) {
   2ed32:	1c7b      	adds	r3, r7, #1
   2ed34:	d002      	beq.n	2ed3c <nrf_cloud_pgps_init+0x190>
		i = npgps_find_first_free(i);
   2ed36:	4638      	mov	r0, r7
   2ed38:	f000 fb52 	bl	2f3e0 <npgps_find_first_free>
	npgps_print_blocks();
   2ed3c:	f000 fb04 	bl	2f348 <npgps_print_blocks>
		num_valid = validate_stored_predictions(&gps_day, &gps_time_of_day);
   2ed40:	b2ad      	uxth	r5, r5
	struct nrf_cloud_pgps_prediction *found_prediction = NULL;
   2ed42:	2300      	movs	r3, #0
   2ed44:	9310      	str	r3, [sp, #64]	; 0x40
	if (num_valid) {
   2ed46:	b17d      	cbz	r5, 2ed68 <nrf_cloud_pgps_init+0x1bc>
		LOG_INF("Checking if P-GPS data is expired...");
   2ed48:	2149      	movs	r1, #73	; 0x49
   2ed4a:	4859      	ldr	r0, [pc, #356]	; (2eeb0 <nrf_cloud_pgps_init+0x304>)
   2ed4c:	f00e fa55 	bl	3d1fa <z_log_minimal_printk>
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2ed50:	a810      	add	r0, sp, #64	; 0x40
   2ed52:	f7ff f8f5 	bl	2df40 <nrf_cloud_pgps_find_prediction>
		if (err == -ETIMEDOUT) {
   2ed56:	f110 0f74 	cmn.w	r0, #116	; 0x74
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2ed5a:	4607      	mov	r7, r0
		if (err == -ETIMEDOUT) {
   2ed5c:	f040 80b6 	bne.w	2eecc <nrf_cloud_pgps_init+0x320>
			LOG_WRN("Predictions expired. Requesting predictions...");
   2ed60:	2157      	movs	r1, #87	; 0x57
   2ed62:	4854      	ldr	r0, [pc, #336]	; (2eeb4 <nrf_cloud_pgps_init+0x308>)
   2ed64:	f00e fa49 	bl	3d1fa <z_log_minimal_printk>
		if (evt_handler) {
   2ed68:	4b46      	ldr	r3, [pc, #280]	; (2ee84 <nrf_cloud_pgps_init+0x2d8>)
   2ed6a:	681b      	ldr	r3, [r3, #0]
   2ed6c:	b123      	cbz	r3, 2ed78 <nrf_cloud_pgps_init+0x1cc>
			evt.type = PGPS_EVT_UNAVAILABLE;
   2ed6e:	2201      	movs	r2, #1
			evt_handler(&evt);
   2ed70:	a811      	add	r0, sp, #68	; 0x44
			evt.type = PGPS_EVT_UNAVAILABLE;
   2ed72:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt_handler(&evt);
   2ed76:	4798      	blx	r3
		err = pgps_request_all();
   2ed78:	f7ff f8a8 	bl	2decc <pgps_request_all>
		err = nrf_cloud_pgps_preemptive_updates();
   2ed7c:	4604      	mov	r4, r0
   2ed7e:	e739      	b.n	2ebf4 <nrf_cloud_pgps_init+0x48>
		index.predictions[pnum] = NULL;
   2ed80:	f842 1b04 	str.w	r1, [r2], #4
	for (pnum = 0; pnum < count; pnum++) {
   2ed84:	3301      	adds	r3, #1
   2ed86:	e79a      	b.n	2ecbe <nrf_cloud_pgps_init+0x112>
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2ed88:	f8da 100c 	ldr.w	r1, [sl, #12]
   2ed8c:	f8ba 000a 	ldrh.w	r0, [sl, #10]
   2ed90:	f000 f9ca 	bl	2f128 <npgps_gps_day_time_to_sec>
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2ed94:	233c      	movs	r3, #60	; 0x3c
   2ed96:	f8ba 2008 	ldrh.w	r2, [sl, #8]
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2ed9a:	f8ba 7004 	ldrh.w	r7, [sl, #4]
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2ed9e:	435a      	muls	r2, r3
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2eda0:	4357      	muls	r7, r2
   2eda2:	183f      	adds	r7, r7, r0
   2eda4:	f141 0300 	adc.w	r3, r1, #0
   2eda8:	930c      	str	r3, [sp, #48]	; 0x30
   2edaa:	920d      	str	r2, [sp, #52]	; 0x34
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2edac:	4605      	mov	r5, r0
   2edae:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2edb0:	f8b8 0003 	ldrh.w	r0, [r8, #3]
   2edb4:	f8d8 1005 	ldr.w	r1, [r8, #5]
   2edb8:	f000 f9b6 	bl	2f128 <npgps_gps_day_time_to_sec>
	if ((start_sec <= pred_sec) && (pred_sec < end_sec)) {
   2edbc:	42a8      	cmp	r0, r5
   2edbe:	eb71 030b 	sbcs.w	r3, r1, fp
   2edc2:	db0d      	blt.n	2ede0 <nrf_cloud_pgps_init+0x234>
   2edc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2edc6:	42b8      	cmp	r0, r7
   2edc8:	eb71 0303 	sbcs.w	r3, r1, r3
   2edcc:	da08      	bge.n	2ede0 <nrf_cloud_pgps_init+0x234>
		return (int)((pred_sec - start_sec) / period_sec);
   2edce:	1b40      	subs	r0, r0, r5
   2edd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2edd2:	eb61 010b 	sbc.w	r1, r1, fp
   2edd6:	2300      	movs	r3, #0
   2edd8:	f7ee f836 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum < 0) {
   2eddc:	1e02      	subs	r2, r0, #0
   2edde:	da0e      	bge.n	2edfe <nrf_cloud_pgps_init+0x252>
			LOG_ERR("prediction idx:%u, ofs:%p, out of expected time range;"
   2ede0:	f8d8 3005 	ldr.w	r3, [r8, #5]
   2ede4:	464a      	mov	r2, r9
   2ede6:	9301      	str	r3, [sp, #4]
   2ede8:	f8b8 3003 	ldrh.w	r3, [r8, #3]
   2edec:	2145      	movs	r1, #69	; 0x45
   2edee:	9300      	str	r3, [sp, #0]
   2edf0:	4831      	ldr	r0, [pc, #196]	; (2eeb8 <nrf_cloud_pgps_init+0x30c>)
   2edf2:	4643      	mov	r3, r8
   2edf4:	f00e fa01 	bl	3d1fa <z_log_minimal_printk>
	for (i = 0; i < count; i++) {
   2edf8:	f109 0901 	add.w	r9, r9, #1
   2edfc:	e768      	b.n	2ecd0 <nrf_cloud_pgps_init+0x124>
		} else if (index.predictions[pnum] == NULL) {
   2edfe:	f102 030e 	add.w	r3, r2, #14
   2ee02:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   2ee06:	6859      	ldr	r1, [r3, #4]
   2ee08:	b911      	cbnz	r1, 2ee10 <nrf_cloud_pgps_init+0x264>
			index.predictions[pnum] = pred;
   2ee0a:	f8c3 8004 	str.w	r8, [r3, #4]
			LOG_DBG("Prediction num:%u stored at idx:%d", pnum, i);
   2ee0e:	e7f3      	b.n	2edf8 <nrf_cloud_pgps_init+0x24c>
			LOG_WRN("Prediction num:%u stored more than once!", pnum);
   2ee10:	2157      	movs	r1, #87	; 0x57
   2ee12:	482a      	ldr	r0, [pc, #168]	; (2eebc <nrf_cloud_pgps_init+0x310>)
   2ee14:	f00e f9f1 	bl	3d1fa <z_log_minimal_printk>
   2ee18:	e7ee      	b.n	2edf8 <nrf_cloud_pgps_init+0x24c>
		err = validate_prediction(pred, gps_day, gps_time_of_day,
   2ee1a:	2301      	movs	r3, #1
   2ee1c:	4648      	mov	r0, r9
   2ee1e:	9300      	str	r3, [sp, #0]
   2ee20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2ee22:	9b08      	ldr	r3, [sp, #32]
   2ee24:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   2ee28:	f7fe feb6 	bl	2db98 <validate_prediction.constprop.0>
		if (err) {
   2ee2c:	b158      	cbz	r0, 2ee46 <nrf_cloud_pgps_init+0x29a>
			LOG_ERR("Prediction num:%u, gps_day:%u, "
   2ee2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ee30:	e9cd 0901 	strd	r0, r9, [sp, #4]
   2ee34:	9300      	str	r3, [sp, #0]
   2ee36:	462a      	mov	r2, r5
   2ee38:	2145      	movs	r1, #69	; 0x45
   2ee3a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2ee3e:	4820      	ldr	r0, [pc, #128]	; (2eec0 <nrf_cloud_pgps_init+0x314>)
   2ee40:	f00e f9db 	bl	3d1fa <z_log_minimal_printk>
   2ee44:	e76f      	b.n	2ed26 <nrf_cloud_pgps_init+0x17a>
		i = npgps_pointer_to_block((uint8_t *)pred);
   2ee46:	4648      	mov	r0, r9
   2ee48:	f000 fafa 	bl	2f440 <npgps_pointer_to_block>
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2ee4c:	1c42      	adds	r2, r0, #1
		i = npgps_pointer_to_block((uint8_t *)pred);
   2ee4e:	4607      	mov	r7, r0
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2ee50:	d10a      	bne.n	2ee68 <nrf_cloud_pgps_init+0x2bc>
   2ee52:	4651      	mov	r1, sl
   2ee54:	4658      	mov	r0, fp
   2ee56:	f44f 7298 	mov.w	r2, #304	; 0x130
   2ee5a:	f00e f994 	bl	3d186 <assert_print>
   2ee5e:	f44f 7198 	mov.w	r1, #304	; 0x130
   2ee62:	4650      	mov	r0, sl
   2ee64:	f00e f988 	bl	3d178 <assert_post_action>
		npgps_mark_block_used(i, true);
   2ee68:	2101      	movs	r1, #1
   2ee6a:	4638      	mov	r0, r7
   2ee6c:	f000 fa4c 	bl	2f308 <npgps_mark_block_used>
	for (pnum = 0; pnum < count; pnum++) {
   2ee70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ee72:	3501      	adds	r5, #1
   2ee74:	4498      	add	r8, r3
   2ee76:	e73d      	b.n	2ecf4 <nrf_cloud_pgps_init+0x148>
	uint16_t count = 0;
   2ee78:	4626      	mov	r6, r4
	uint16_t num_valid = 0;
   2ee7a:	4625      	mov	r5, r4
	uint16_t period_min  = 0;
   2ee7c:	9405      	str	r4, [sp, #20]
   2ee7e:	e760      	b.n	2ed42 <nrf_cloud_pgps_init+0x196>
   2ee80:	0004a5d4 	.word	0x0004a5d4
   2ee84:	2001a12c 	.word	0x2001a12c
   2ee88:	2001a134 	.word	0x2001a134
   2ee8c:	2001a168 	.word	0x2001a168
   2ee90:	2001d2d9 	.word	0x2001d2d9
   2ee94:	2001a140 	.word	0x2001a140
   2ee98:	2001a13c 	.word	0x2001a13c
   2ee9c:	20015820 	.word	0x20015820
   2eea0:	0002e2c9 	.word	0x0002e2c9
   2eea4:	0004a607 	.word	0x0004a607
   2eea8:	0004a632 	.word	0x0004a632
   2eeac:	0004a6e5 	.word	0x0004a6e5
   2eeb0:	0004a74d 	.word	0x0004a74d
   2eeb4:	0004a777 	.word	0x0004a777
   2eeb8:	0004a66b 	.word	0x0004a66b
   2eebc:	0004a6b7 	.word	0x0004a6b7
   2eec0:	0004a704 	.word	0x0004a704
   2eec4:	0004a26b 	.word	0x0004a26b
   2eec8:	0004494f 	.word	0x0004494f
		} else if (err >= 0) {
   2eecc:	2800      	cmp	r0, #0
   2eece:	db46      	blt.n	2ef5e <nrf_cloud_pgps_init+0x3b2>
			LOG_INF("Found valid prediction, day:%u, time:%u",
   2eed0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2eed2:	2149      	movs	r1, #73	; 0x49
   2eed4:	f8d2 3005 	ldr.w	r3, [r2, #5]
   2eed8:	4822      	ldr	r0, [pc, #136]	; (2ef64 <nrf_cloud_pgps_init+0x3b8>)
   2eeda:	f8b2 2003 	ldrh.w	r2, [r2, #3]
   2eede:	f00e f98c 	bl	3d1fa <z_log_minimal_printk>
	} else if (num_valid < count) {
   2eee2:	42ae      	cmp	r6, r5
   2eee4:	d920      	bls.n	2ef28 <nrf_cloud_pgps_init+0x37c>
		LOG_INF("Incomplete P-GPS data; "
   2eee6:	1b76      	subs	r6, r6, r5
   2eee8:	4632      	mov	r2, r6
   2eeea:	2149      	movs	r1, #73	; 0x49
   2eeec:	481e      	ldr	r0, [pc, #120]	; (2ef68 <nrf_cloud_pgps_init+0x3bc>)
   2eeee:	f00e f984 	bl	3d1fa <z_log_minimal_printk>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2eef2:	4b1e      	ldr	r3, [pc, #120]	; (2ef6c <nrf_cloud_pgps_init+0x3c0>)
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2eef4:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2eef8:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
   2eefa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2eefe:	ab0f      	add	r3, sp, #60	; 0x3c
   2ef00:	fbe4 0105 	umlal	r0, r1, r4, r5
   2ef04:	f000 f91a 	bl	2f13c <npgps_gps_sec_to_day_time>
		request.gps_day = gps_day;
   2ef08:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
		err = pgps_request(&request);
   2ef0c:	a813      	add	r0, sp, #76	; 0x4c
		request.gps_day = gps_day;
   2ef0e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
		request.gps_time_of_day = gps_time_of_day;
   2ef12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		request.prediction_count = count - num_valid;
   2ef14:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
		request.gps_time_of_day = gps_time_of_day;
   2ef18:	f8cd 3052 	str.w	r3, [sp, #82]	; 0x52
		request.prediction_period_min = period_min;
   2ef1c:	9b05      	ldr	r3, [sp, #20]
   2ef1e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
		err = pgps_request(&request);
   2ef22:	f7fe ff33 	bl	2dd8c <pgps_request>
   2ef26:	e729      	b.n	2ed7c <nrf_cloud_pgps_init+0x1d0>
	} else if ((count - (pnum + 1)) < REPLACEMENT_THRESHOLD) {
   2ef28:	3701      	adds	r7, #1
   2ef2a:	1bf6      	subs	r6, r6, r7
   2ef2c:	2e03      	cmp	r6, #3
   2ef2e:	dc02      	bgt.n	2ef36 <nrf_cloud_pgps_init+0x38a>
		err = nrf_cloud_pgps_preemptive_updates();
   2ef30:	f7ff fbe0 	bl	2e6f4 <nrf_cloud_pgps_preemptive_updates>
   2ef34:	e722      	b.n	2ed7c <nrf_cloud_pgps_init+0x1d0>
		state = PGPS_READY;
   2ef36:	2206      	movs	r2, #6
   2ef38:	4b0d      	ldr	r3, [pc, #52]	; (2ef70 <nrf_cloud_pgps_init+0x3c4>)
		LOG_INF("P-GPS data is up to date.");
   2ef3a:	2149      	movs	r1, #73	; 0x49
   2ef3c:	480d      	ldr	r0, [pc, #52]	; (2ef74 <nrf_cloud_pgps_init+0x3c8>)
		state = PGPS_READY;
   2ef3e:	701a      	strb	r2, [r3, #0]
		LOG_INF("P-GPS data is up to date.");
   2ef40:	f00e f95b 	bl	3d1fa <z_log_minimal_printk>
		if (evt_handler) {
   2ef44:	4b0c      	ldr	r3, [pc, #48]	; (2ef78 <nrf_cloud_pgps_init+0x3cc>)
   2ef46:	681b      	ldr	r3, [r3, #0]
   2ef48:	2b00      	cmp	r3, #0
   2ef4a:	f43f ae52 	beq.w	2ebf2 <nrf_cloud_pgps_init+0x46>
			evt.type = PGPS_EVT_READY;
   2ef4e:	2204      	movs	r2, #4
   2ef50:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt.prediction = found_prediction;
   2ef54:	9a10      	ldr	r2, [sp, #64]	; 0x40
			evt_handler(&evt);
   2ef56:	a811      	add	r0, sp, #68	; 0x44
			evt.prediction = found_prediction;
   2ef58:	9212      	str	r2, [sp, #72]	; 0x48
			evt_handler(&evt);
   2ef5a:	4798      	blx	r3
   2ef5c:	e64a      	b.n	2ebf4 <nrf_cloud_pgps_init+0x48>
	int pnum = -1;
   2ef5e:	f04f 37ff 	mov.w	r7, #4294967295
   2ef62:	e7be      	b.n	2eee2 <nrf_cloud_pgps_init+0x336>
   2ef64:	0004a7ab 	.word	0x0004a7ab
   2ef68:	0004a7d8 	.word	0x0004a7d8
   2ef6c:	20015820 	.word	0x20015820
   2ef70:	2001d2d9 	.word	0x2001d2d9
   2ef74:	0004a81b 	.word	0x0004a81b
   2ef78:	2001a12c 	.word	0x2001a12c

0002ef7c <settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(nrf_cloud_pgps, SETTINGS_NAME, NULL, settings_set,
			       NULL, NULL);

static int settings_set(const char *key, size_t len_rd,
			settings_read_cb read_cb, void *cb_arg)
{
   2ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef7e:	460c      	mov	r4, r1
   2ef80:	4616      	mov	r6, r2
   2ef82:	461f      	mov	r7, r3
	if (!key) {
   2ef84:	4605      	mov	r5, r0
   2ef86:	2800      	cmp	r0, #0
   2ef88:	d039      	beq.n	2effe <settings_set+0x82>
		return -EINVAL;
	}

	LOG_DBG("Settings key:%s, size:%d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PGPS_HEADER,
   2ef8a:	481e      	ldr	r0, [pc, #120]	; (2f004 <settings_set+0x88>)
   2ef8c:	f7ee f959 	bl	1d242 <strlen>
   2ef90:	491c      	ldr	r1, [pc, #112]	; (2f004 <settings_set+0x88>)
   2ef92:	4602      	mov	r2, r0
   2ef94:	4628      	mov	r0, r5
   2ef96:	f012 ffb6 	bl	41f06 <strncmp>
   2ef9a:	b1a0      	cbz	r0, 2efc6 <settings_set+0x4a>
				saved_header.prediction_count, saved_header.prediction_period_min,
				saved_header.gps_day, saved_header.gps_time_of_day);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LOCATION,
   2ef9c:	481a      	ldr	r0, [pc, #104]	; (2f008 <settings_set+0x8c>)
   2ef9e:	f7ee f950 	bl	1d242 <strlen>
   2efa2:	4919      	ldr	r1, [pc, #100]	; (2f008 <settings_set+0x8c>)
   2efa4:	4602      	mov	r2, r0
   2efa6:	4628      	mov	r0, r5
   2efa8:	f012 ffad 	bl	41f06 <strncmp>
   2efac:	b1a8      	cbz	r0, 2efda <settings_set+0x5e>
				saved_location.latitude, saved_location.longitude,
				(int32_t)saved_location.gps_sec);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LEAP_SEC,
   2efae:	4817      	ldr	r0, [pc, #92]	; (2f00c <settings_set+0x90>)
   2efb0:	f7ee f947 	bl	1d242 <strlen>
   2efb4:	4915      	ldr	r1, [pc, #84]	; (2f00c <settings_set+0x90>)
   2efb6:	4602      	mov	r2, r0
   2efb8:	4628      	mov	r0, r5
   2efba:	f012 ffa4 	bl	41f06 <strncmp>
   2efbe:	b1a8      	cbz	r0, 2efec <settings_set+0x70>
			LOG_DBG("Read gps to utc leap seconds offset:%d",
				gps_leap_seconds);
			return 0;
		}
	}
	return -ENOTSUP;
   2efc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2efc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PGPS_HEADER)) &&
   2efc6:	2c10      	cmp	r4, #16
   2efc8:	d1e8      	bne.n	2ef9c <settings_set+0x20>
		if (read_cb(cb_arg, (void *)&saved_header, len_rd) == len_rd) {
   2efca:	4622      	mov	r2, r4
   2efcc:	4638      	mov	r0, r7
   2efce:	4910      	ldr	r1, [pc, #64]	; (2f010 <settings_set+0x94>)
   2efd0:	47b0      	blx	r6
   2efd2:	2810      	cmp	r0, #16
   2efd4:	d1e2      	bne.n	2ef9c <settings_set+0x20>
			return 0;
   2efd6:	2000      	movs	r0, #0
   2efd8:	e7f4      	b.n	2efc4 <settings_set+0x48>
		     strlen(SETTINGS_KEY_LOCATION)) &&
   2efda:	2c10      	cmp	r4, #16
   2efdc:	d1e7      	bne.n	2efae <settings_set+0x32>
		if (read_cb(cb_arg, (void *)&saved_location, len_rd) == len_rd) {
   2efde:	4622      	mov	r2, r4
   2efe0:	4638      	mov	r0, r7
   2efe2:	490c      	ldr	r1, [pc, #48]	; (2f014 <settings_set+0x98>)
   2efe4:	47b0      	blx	r6
   2efe6:	2810      	cmp	r0, #16
   2efe8:	d1e1      	bne.n	2efae <settings_set+0x32>
   2efea:	e7f4      	b.n	2efd6 <settings_set+0x5a>
		     strlen(SETTINGS_KEY_LEAP_SEC)) &&
   2efec:	2c04      	cmp	r4, #4
   2efee:	d1e7      	bne.n	2efc0 <settings_set+0x44>
		if (read_cb(cb_arg, (void *)&gps_leap_seconds, len_rd) == len_rd) {
   2eff0:	4622      	mov	r2, r4
   2eff2:	4638      	mov	r0, r7
   2eff4:	4908      	ldr	r1, [pc, #32]	; (2f018 <settings_set+0x9c>)
   2eff6:	47b0      	blx	r6
   2eff8:	2804      	cmp	r0, #4
   2effa:	d0ec      	beq.n	2efd6 <settings_set+0x5a>
   2effc:	e7e0      	b.n	2efc0 <settings_set+0x44>
		return -EINVAL;
   2effe:	f06f 0015 	mvn.w	r0, #21
   2f002:	e7df      	b.n	2efc4 <settings_set+0x48>
   2f004:	0004a8d2 	.word	0x0004a8d2
   2f008:	0004a927 	.word	0x0004a927
   2f00c:	0004a93f 	.word	0x0004a93f
   2f010:	2001d2da 	.word	0x2001d2da
   2f014:	20017360 	.word	0x20017360
   2f018:	200146c4 	.word	0x200146c4

0002f01c <download_client_callback>:
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}

static int download_client_callback(const struct download_client_evt *event)
{
   2f01c:	b538      	push	{r3, r4, r5, lr}
	int err = 0;

	if (event == NULL) {
   2f01e:	2800      	cmp	r0, #0
   2f020:	d037      	beq.n	2f092 <download_client_callback+0x76>
		return -EINVAL;
	}

	switch (event->id) {
   2f022:	7803      	ldrb	r3, [r0, #0]
   2f024:	2b01      	cmp	r3, #1
   2f026:	d01f      	beq.n	2f068 <download_client_callback+0x4c>
   2f028:	2b02      	cmp	r3, #2
   2f02a:	d009      	beq.n	2f040 <download_client_callback+0x24>
   2f02c:	bb63      	cbnz	r3, 2f088 <download_client_callback+0x6c>
	case DOWNLOAD_CLIENT_EVT_FRAGMENT:
		err = buffer_handler((uint8_t *)event->fragment.buf,
   2f02e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2f032:	4b19      	ldr	r3, [pc, #100]	; (2f098 <download_client_callback+0x7c>)
   2f034:	681b      	ldr	r3, [r3, #0]
   2f036:	4798      	blx	r3
				     event->fragment.len);
		if (!err) {
   2f038:	4604      	mov	r4, r0
   2f03a:	b930      	cbnz	r0, 2f04a <download_client_callback+0x2e>
		err = ret;
	}
	k_sem_give(&pgps_active);
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}
   2f03c:	4620      	mov	r0, r4
   2f03e:	bd38      	pop	{r3, r4, r5, pc}
		LOG_INF("Download client done");
   2f040:	2149      	movs	r1, #73	; 0x49
   2f042:	4816      	ldr	r0, [pc, #88]	; (2f09c <download_client_callback+0x80>)
   2f044:	f00e f8d9 	bl	3d1fa <z_log_minimal_printk>
	int err = 0;
   2f048:	2400      	movs	r4, #0
	int ret = download_client_disconnect(&dlc);
   2f04a:	4815      	ldr	r0, [pc, #84]	; (2f0a0 <download_client_callback+0x84>)
   2f04c:	f001 fbc6 	bl	307dc <download_client_disconnect>
	if (ret) {
   2f050:	4605      	mov	r5, r0
   2f052:	b128      	cbz	r0, 2f060 <download_client_callback+0x44>
		LOG_ERR("Error disconnecting from "
   2f054:	4602      	mov	r2, r0
   2f056:	2145      	movs	r1, #69	; 0x45
   2f058:	4812      	ldr	r0, [pc, #72]	; (2f0a4 <download_client_callback+0x88>)
   2f05a:	f00e f8ce 	bl	3d1fa <z_log_minimal_printk>
   2f05e:	462c      	mov	r4, r5
	z_impl_k_sem_give(sem);
   2f060:	4811      	ldr	r0, [pc, #68]	; (2f0a8 <download_client_callback+0x8c>)
   2f062:	f008 f995 	bl	37390 <z_impl_k_sem_give>
}
   2f066:	e7e9      	b.n	2f03c <download_client_callback+0x20>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2f068:	4c10      	ldr	r4, [pc, #64]	; (2f0ac <download_client_callback+0x90>)
   2f06a:	6822      	ldr	r2, [r4, #0]
   2f06c:	b172      	cbz	r2, 2f08c <download_client_callback+0x70>
   2f06e:	6843      	ldr	r3, [r0, #4]
   2f070:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2f074:	d001      	beq.n	2f07a <download_client_callback+0x5e>
   2f076:	3368      	adds	r3, #104	; 0x68
   2f078:	d108      	bne.n	2f08c <download_client_callback+0x70>
			LOG_WRN("Download socket error. %d retries left...",
   2f07a:	2157      	movs	r1, #87	; 0x57
   2f07c:	480c      	ldr	r0, [pc, #48]	; (2f0b0 <download_client_callback+0x94>)
   2f07e:	f00e f8bc 	bl	3d1fa <z_log_minimal_printk>
			socket_retries_left--;
   2f082:	6823      	ldr	r3, [r4, #0]
   2f084:	3b01      	subs	r3, #1
   2f086:	6023      	str	r3, [r4, #0]
	switch (event->id) {
   2f088:	2400      	movs	r4, #0
   2f08a:	e7d7      	b.n	2f03c <download_client_callback+0x20>
		err = -EIO;
   2f08c:	f06f 0404 	mvn.w	r4, #4
   2f090:	e7db      	b.n	2f04a <download_client_callback+0x2e>
		return -EINVAL;
   2f092:	f06f 0415 	mvn.w	r4, #21
   2f096:	e7d1      	b.n	2f03c <download_client_callback+0x20>
   2f098:	2001a170 	.word	0x2001a170
   2f09c:	0004a849 	.word	0x0004a849
   2f0a0:	20015908 	.word	0x20015908
   2f0a4:	0004a892 	.word	0x0004a892
   2f0a8:	200150a8 	.word	0x200150a8
   2f0ac:	2001a1ac 	.word	0x2001a1ac
   2f0b0:	0004a863 	.word	0x0004a863

0002f0b4 <npgps_save_header>:
{
   2f0b4:	4601      	mov	r1, r0
	ret = settings_save_one(SETTINGS_FULL_PGPS_HEADER, header, sizeof(*header));
   2f0b6:	2210      	movs	r2, #16
   2f0b8:	4801      	ldr	r0, [pc, #4]	; (2f0c0 <npgps_save_header+0xc>)
   2f0ba:	f7f3 b9a3 	b.w	22404 <settings_save_one>
   2f0be:	bf00      	nop
   2f0c0:	0004a8c3 	.word	0x0004a8c3

0002f0c4 <npgps_get_saved_header>:
}
   2f0c4:	4800      	ldr	r0, [pc, #0]	; (2f0c8 <npgps_get_saved_header+0x4>)
   2f0c6:	4770      	bx	lr
   2f0c8:	2001d2da 	.word	0x2001d2da

0002f0cc <npgps_get_saved_location>:
}
   2f0cc:	4800      	ldr	r0, [pc, #0]	; (2f0d0 <npgps_get_saved_location+0x4>)
   2f0ce:	4770      	bx	lr
   2f0d0:	20017360 	.word	0x20017360

0002f0d4 <npgps_settings_init>:
{
   2f0d4:	b510      	push	{r4, lr}
	ret = settings_subsys_init();
   2f0d6:	f7f3 fae1 	bl	2269c <settings_subsys_init>
	if (ret) {
   2f0da:	4604      	mov	r4, r0
   2f0dc:	b130      	cbz	r0, 2f0ec <npgps_settings_init+0x18>
		LOG_ERR("Settings init failed:%d", ret);
   2f0de:	2145      	movs	r1, #69	; 0x45
   2f0e0:	4602      	mov	r2, r0
   2f0e2:	4807      	ldr	r0, [pc, #28]	; (2f100 <npgps_settings_init+0x2c>)
		LOG_ERR("Cannot load settings:%d", ret);
   2f0e4:	f00e f889 	bl	3d1fa <z_log_minimal_printk>
}
   2f0e8:	4620      	mov	r0, r4
   2f0ea:	bd10      	pop	{r4, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud_pgps.name);
   2f0ec:	4805      	ldr	r0, [pc, #20]	; (2f104 <npgps_settings_init+0x30>)
   2f0ee:	f7f3 f9c3 	bl	22478 <settings_load_subtree>
	if (ret) {
   2f0f2:	4604      	mov	r4, r0
   2f0f4:	2800      	cmp	r0, #0
   2f0f6:	d0f7      	beq.n	2f0e8 <npgps_settings_init+0x14>
		LOG_ERR("Cannot load settings:%d", ret);
   2f0f8:	4602      	mov	r2, r0
   2f0fa:	2145      	movs	r1, #69	; 0x45
   2f0fc:	4802      	ldr	r0, [pc, #8]	; (2f108 <npgps_settings_init+0x34>)
   2f0fe:	e7f1      	b.n	2f0e4 <npgps_settings_init+0x10>
   2f100:	0004a8de 	.word	0x0004a8de
   2f104:	0004a83a 	.word	0x0004a83a
   2f108:	0004a8fb 	.word	0x0004a8fb

0002f10c <nrf_cloud_pgps_set_leap_seconds>:
	if (gps_leap_seconds != leap_seconds) {
   2f10c:	4904      	ldr	r1, [pc, #16]	; (2f120 <nrf_cloud_pgps_set_leap_seconds+0x14>)
   2f10e:	680b      	ldr	r3, [r1, #0]
   2f110:	4283      	cmp	r3, r0
   2f112:	d004      	beq.n	2f11e <nrf_cloud_pgps_set_leap_seconds+0x12>
		gps_leap_seconds = leap_seconds;
   2f114:	6008      	str	r0, [r1, #0]
	ret = settings_save_one(SETTINGS_FULL_LEAP_SEC,
   2f116:	2204      	movs	r2, #4
   2f118:	4802      	ldr	r0, [pc, #8]	; (2f124 <nrf_cloud_pgps_set_leap_seconds+0x18>)
   2f11a:	f7f3 b973 	b.w	22404 <settings_save_one>
}
   2f11e:	4770      	bx	lr
   2f120:	200146c4 	.word	0x200146c4
   2f124:	0004a930 	.word	0x0004a930

0002f128 <npgps_gps_day_time_to_sec>:
	int64_t gps_sec = (int64_t)gps_day * SEC_PER_DAY + gps_time_of_day;
   2f128:	4b03      	ldr	r3, [pc, #12]	; (2f138 <npgps_gps_day_time_to_sec+0x10>)
   2f12a:	fba0 0303 	umull	r0, r3, r0, r3
   2f12e:	1840      	adds	r0, r0, r1
}
   2f130:	f143 0100 	adc.w	r1, r3, #0
   2f134:	4770      	bx	lr
   2f136:	bf00      	nop
   2f138:	00015180 	.word	0x00015180

0002f13c <npgps_gps_sec_to_day_time>:
{
   2f13c:	b570      	push	{r4, r5, r6, lr}
   2f13e:	4616      	mov	r6, r2
   2f140:	461d      	mov	r5, r3
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2f142:	4a07      	ldr	r2, [pc, #28]	; (2f160 <npgps_gps_sec_to_day_time+0x24>)
   2f144:	2300      	movs	r3, #0
{
   2f146:	4604      	mov	r4, r0
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2f148:	f7ed fe7e 	bl	1ce48 <__aeabi_ldivmod>
   2f14c:	b280      	uxth	r0, r0
	if (gps_day) {
   2f14e:	b106      	cbz	r6, 2f152 <npgps_gps_sec_to_day_time+0x16>
		*gps_day = day;
   2f150:	8030      	strh	r0, [r6, #0]
	if (gps_time_of_day) {
   2f152:	b11d      	cbz	r5, 2f15c <npgps_gps_sec_to_day_time+0x20>
	time = (uint32_t)(gps_sec - (day * SEC_PER_DAY));
   2f154:	4b02      	ldr	r3, [pc, #8]	; (2f160 <npgps_gps_sec_to_day_time+0x24>)
   2f156:	fb03 4410 	mls	r4, r3, r0, r4
		*gps_time_of_day = time;
   2f15a:	602c      	str	r4, [r5, #0]
}
   2f15c:	bd70      	pop	{r4, r5, r6, pc}
   2f15e:	bf00      	nop
   2f160:	00015180 	.word	0x00015180

0002f164 <npgps_get_shifted_time>:
{
   2f164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f168:	4606      	mov	r6, r0
	err = date_time_now(&now);
   2f16a:	4668      	mov	r0, sp
{
   2f16c:	460f      	mov	r7, r1
   2f16e:	4690      	mov	r8, r2
   2f170:	461c      	mov	r4, r3
	err = date_time_now(&now);
   2f172:	f7f9 fffb 	bl	2916c <date_time_now>
	if (!err) {
   2f176:	4605      	mov	r5, r0
   2f178:	bb08      	cbnz	r0, 2f1be <npgps_get_shifted_time+0x5a>
		now += shift * MSEC_PER_SEC;
   2f17a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2f17e:	4344      	muls	r4, r0
   2f180:	9800      	ldr	r0, [sp, #0]
	utc_sec = utc / MSEC_PER_SEC;
   2f182:	9901      	ldr	r1, [sp, #4]
		now += shift * MSEC_PER_SEC;
   2f184:	1820      	adds	r0, r4, r0
	utc_sec = utc / MSEC_PER_SEC;
   2f186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f18a:	f04f 0300 	mov.w	r3, #0
   2f18e:	f141 0100 	adc.w	r1, r1, #0
   2f192:	f7ed fe59 	bl	1ce48 <__aeabi_ldivmod>
	gps_sec = (utc_sec - GPS_TO_UNIX_UTC_OFFSET_SECONDS) + gps_leap_seconds;
   2f196:	4b0c      	ldr	r3, [pc, #48]	; (2f1c8 <npgps_get_shifted_time+0x64>)
   2f198:	4c0c      	ldr	r4, [pc, #48]	; (2f1cc <npgps_get_shifted_time+0x68>)
   2f19a:	681b      	ldr	r3, [r3, #0]
   2f19c:	1904      	adds	r4, r0, r4
   2f19e:	f161 0100 	sbc.w	r1, r1, #0
   2f1a2:	18e0      	adds	r0, r4, r3
   2f1a4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2f1a8:	463a      	mov	r2, r7
   2f1aa:	4643      	mov	r3, r8
		now = utc_to_gps_sec(now, NULL);
   2f1ac:	e9cd 0100 	strd	r0, r1, [sp]
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2f1b0:	f7ff ffc4 	bl	2f13c <npgps_gps_sec_to_day_time>
		if (gps_sec != NULL) {
   2f1b4:	b11e      	cbz	r6, 2f1be <npgps_get_shifted_time+0x5a>
			*gps_sec = now;
   2f1b6:	e9dd 2300 	ldrd	r2, r3, [sp]
   2f1ba:	e9c6 2300 	strd	r2, r3, [r6]
}
   2f1be:	4628      	mov	r0, r5
   2f1c0:	b002      	add	sp, #8
   2f1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f1c6:	bf00      	nop
   2f1c8:	200146c4 	.word	0x200146c4
   2f1cc:	ed2ac280 	.word	0xed2ac280

0002f1d0 <nrf_cloud_pgps_set_location_normalized>:
	if (npgps_get_time(&sec, NULL, NULL)) {
   2f1d0:	2200      	movs	r2, #0
{
   2f1d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f1d4:	4605      	mov	r5, r0
   2f1d6:	460e      	mov	r6, r1
	if (npgps_get_time(&sec, NULL, NULL)) {
   2f1d8:	4668      	mov	r0, sp
   2f1da:	4611      	mov	r1, r2
   2f1dc:	f010 fe53 	bl	3fe86 <npgps_get_time>
   2f1e0:	4c18      	ldr	r4, [pc, #96]	; (2f244 <nrf_cloud_pgps_set_location_normalized+0x74>)
   2f1e2:	b118      	cbz	r0, 2f1ec <nrf_cloud_pgps_set_location_normalized+0x1c>
		sec = saved_location.gps_sec; /* could not get time; use prev */
   2f1e4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2f1e8:	e9cd 2300 	strd	r2, r3, [sp]
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2f1ec:	6820      	ldr	r0, [r4, #0]
   2f1ee:	1a28      	subs	r0, r5, r0
   2f1f0:	f012 fc70 	bl	41ad4 <abs>
   2f1f4:	f242 4368 	movw	r3, #9320	; 0x2468
   2f1f8:	4298      	cmp	r0, r3
   2f1fa:	dd0c      	ble.n	2f216 <nrf_cloud_pgps_set_location_normalized+0x46>
		saved_location.gps_sec = sec;
   2f1fc:	e9dd 2300 	ldrd	r2, r3, [sp]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2f200:	4910      	ldr	r1, [pc, #64]	; (2f244 <nrf_cloud_pgps_set_location_normalized+0x74>)
		saved_location.gps_sec = sec;
   2f202:	e9c4 2302 	strd	r2, r3, [r4, #8]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2f206:	4810      	ldr	r0, [pc, #64]	; (2f248 <nrf_cloud_pgps_set_location_normalized+0x78>)
   2f208:	2210      	movs	r2, #16
		saved_location.longitude = longitude;
   2f20a:	e9c4 5600 	strd	r5, r6, [r4]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2f20e:	f7f3 f8f9 	bl	22404 <settings_save_one>
}
   2f212:	b002      	add	sp, #8
   2f214:	bd70      	pop	{r4, r5, r6, pc}
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2f216:	6860      	ldr	r0, [r4, #4]
   2f218:	1a30      	subs	r0, r6, r0
   2f21a:	f012 fc5b 	bl	41ad4 <abs>
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2f21e:	f241 2334 	movw	r3, #4660	; 0x1234
   2f222:	4298      	cmp	r0, r3
   2f224:	dcea      	bgt.n	2f1fc <nrf_cloud_pgps_set_location_normalized+0x2c>
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2f226:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   2f22a:	9b00      	ldr	r3, [sp, #0]
   2f22c:	9a01      	ldr	r2, [sp, #4]
   2f22e:	1a5b      	subs	r3, r3, r1
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2f230:	f64a 01c1 	movw	r1, #43201	; 0xa8c1
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2f234:	eb62 0200 	sbc.w	r2, r2, r0
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2f238:	428b      	cmp	r3, r1
   2f23a:	f172 0300 	sbcs.w	r3, r2, #0
   2f23e:	dadd      	bge.n	2f1fc <nrf_cloud_pgps_set_location_normalized+0x2c>
   2f240:	e7e7      	b.n	2f212 <nrf_cloud_pgps_set_location_normalized+0x42>
   2f242:	bf00      	nop
   2f244:	20017360 	.word	0x20017360
   2f248:	0004a918 	.word	0x0004a918

0002f24c <ngps_block_pool_init>:
	block_pool_base = (uint8_t *)base_address;
   2f24c:	4b02      	ldr	r3, [pc, #8]	; (2f258 <ngps_block_pool_init+0xc>)
   2f24e:	6018      	str	r0, [r3, #0]
	num_blocks = num;
   2f250:	4b02      	ldr	r3, [pc, #8]	; (2f25c <ngps_block_pool_init+0x10>)
}
   2f252:	2000      	movs	r0, #0
	num_blocks = num;
   2f254:	6019      	str	r1, [r3, #0]
}
   2f256:	4770      	bx	lr
   2f258:	2001a16c 	.word	0x2001a16c
   2f25c:	2001a174 	.word	0x2001a174

0002f260 <npgps_alloc_block>:
	if (pool.first_free < 0) {
   2f260:	4a0c      	ldr	r2, [pc, #48]	; (2f294 <npgps_alloc_block+0x34>)
{
   2f262:	b510      	push	{r4, lr}
	if (pool.first_free < 0) {
   2f264:	6810      	ldr	r0, [r2, #0]
   2f266:	2800      	cmp	r0, #0
   2f268:	db11      	blt.n	2f28e <npgps_alloc_block+0x2e>
	pool.block_used[pool.first_free] = true;
   2f26a:	2101      	movs	r1, #1
   2f26c:	1813      	adds	r3, r2, r0
   2f26e:	7219      	strb	r1, [r3, #8]
	pool.first_free = (pool.first_free + 1) % num_blocks;
   2f270:	1843      	adds	r3, r0, r1
   2f272:	4909      	ldr	r1, [pc, #36]	; (2f298 <npgps_alloc_block+0x38>)
   2f274:	6809      	ldr	r1, [r1, #0]
   2f276:	fb93 f4f1 	sdiv	r4, r3, r1
   2f27a:	fb01 3314 	mls	r3, r1, r4, r3
   2f27e:	6013      	str	r3, [r2, #0]
	if (pool.block_used[pool.first_free]) {
   2f280:	4413      	add	r3, r2
   2f282:	7a1b      	ldrb	r3, [r3, #8]
   2f284:	b113      	cbz	r3, 2f28c <npgps_alloc_block+0x2c>
		pool.first_free = NO_BLOCK;
   2f286:	f04f 33ff 	mov.w	r3, #4294967295
   2f28a:	6013      	str	r3, [r2, #0]
}
   2f28c:	bd10      	pop	{r4, pc}
		return NO_BLOCK;
   2f28e:	f04f 30ff 	mov.w	r0, #4294967295
   2f292:	e7fb      	b.n	2f28c <npgps_alloc_block+0x2c>
   2f294:	2001a178 	.word	0x2001a178
   2f298:	2001a174 	.word	0x2001a174

0002f29c <npgps_free_block>:
	if (pool.first_free < 0) {
   2f29c:	4b04      	ldr	r3, [pc, #16]	; (2f2b0 <npgps_free_block+0x14>)
   2f29e:	681a      	ldr	r2, [r3, #0]
   2f2a0:	2a00      	cmp	r2, #0
	pool.block_used[block] = false;
   2f2a2:	f04f 0200 	mov.w	r2, #0
		pool.first_free = block;
   2f2a6:	bfb8      	it	lt
   2f2a8:	6018      	strlt	r0, [r3, #0]
	pool.block_used[block] = false;
   2f2aa:	4403      	add	r3, r0
   2f2ac:	721a      	strb	r2, [r3, #8]
}
   2f2ae:	4770      	bx	lr
   2f2b0:	2001a178 	.word	0x2001a178

0002f2b4 <npgps_get_block_extent>:
	for (i = 0; i < num_blocks; i++) {
   2f2b4:	2200      	movs	r2, #0
   2f2b6:	4b09      	ldr	r3, [pc, #36]	; (2f2dc <npgps_get_block_extent+0x28>)
{
   2f2b8:	b510      	push	{r4, lr}
	for (i = 0; i < num_blocks; i++) {
   2f2ba:	6819      	ldr	r1, [r3, #0]
		if (pool.block_used[block]) {
   2f2bc:	4c08      	ldr	r4, [pc, #32]	; (2f2e0 <npgps_get_block_extent+0x2c>)
	for (i = 0; i < num_blocks; i++) {
   2f2be:	4291      	cmp	r1, r2
   2f2c0:	dc01      	bgt.n	2f2c6 <npgps_get_block_extent+0x12>
}
   2f2c2:	4610      	mov	r0, r2
   2f2c4:	bd10      	pop	{r4, pc}
		if (pool.block_used[block]) {
   2f2c6:	1823      	adds	r3, r4, r0
   2f2c8:	7a1b      	ldrb	r3, [r3, #8]
   2f2ca:	2b00      	cmp	r3, #0
   2f2cc:	d1f9      	bne.n	2f2c2 <npgps_get_block_extent+0xe>
		block = (block + 1) % num_blocks;
   2f2ce:	1c43      	adds	r3, r0, #1
   2f2d0:	fb93 f0f1 	sdiv	r0, r3, r1
		len++;
   2f2d4:	3201      	adds	r2, #1
		block = (block + 1) % num_blocks;
   2f2d6:	fb01 3010 	mls	r0, r1, r0, r3
	for (i = 0; i < num_blocks; i++) {
   2f2da:	e7f0      	b.n	2f2be <npgps_get_block_extent+0xa>
   2f2dc:	2001a174 	.word	0x2001a174
   2f2e0:	2001a178 	.word	0x2001a178

0002f2e4 <npgps_reset_block_pool>:
	pool.first_free = 0;
   2f2e4:	2300      	movs	r3, #0
		pool.block_used[i] = false;
   2f2e6:	4618      	mov	r0, r3
	for (i = 0; i < num_blocks; i++) {
   2f2e8:	4905      	ldr	r1, [pc, #20]	; (2f300 <npgps_reset_block_pool+0x1c>)
	pool.first_free = 0;
   2f2ea:	4a06      	ldr	r2, [pc, #24]	; (2f304 <npgps_reset_block_pool+0x20>)
	for (i = 0; i < num_blocks; i++) {
   2f2ec:	6809      	ldr	r1, [r1, #0]
	pool.first_free = 0;
   2f2ee:	f842 3b08 	str.w	r3, [r2], #8
	for (i = 0; i < num_blocks; i++) {
   2f2f2:	428b      	cmp	r3, r1
   2f2f4:	db00      	blt.n	2f2f8 <npgps_reset_block_pool+0x14>
}
   2f2f6:	4770      	bx	lr
		pool.block_used[i] = false;
   2f2f8:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < num_blocks; i++) {
   2f2fc:	3301      	adds	r3, #1
   2f2fe:	e7f8      	b.n	2f2f2 <npgps_reset_block_pool+0xe>
   2f300:	2001a174 	.word	0x2001a174
   2f304:	2001a178 	.word	0x2001a178

0002f308 <npgps_mark_block_used>:
{
   2f308:	b538      	push	{r3, r4, r5, lr}
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2f30a:	1e04      	subs	r4, r0, #0
{
   2f30c:	460d      	mov	r5, r1
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2f30e:	db03      	blt.n	2f318 <npgps_mark_block_used+0x10>
   2f310:	4b09      	ldr	r3, [pc, #36]	; (2f338 <npgps_mark_block_used+0x30>)
   2f312:	681b      	ldr	r3, [r3, #0]
   2f314:	42a3      	cmp	r3, r4
   2f316:	dc0a      	bgt.n	2f32e <npgps_mark_block_used+0x26>
   2f318:	4908      	ldr	r1, [pc, #32]	; (2f33c <npgps_mark_block_used+0x34>)
   2f31a:	4809      	ldr	r0, [pc, #36]	; (2f340 <npgps_mark_block_used+0x38>)
   2f31c:	f240 1253 	movw	r2, #339	; 0x153
   2f320:	f00d ff31 	bl	3d186 <assert_print>
   2f324:	f240 1153 	movw	r1, #339	; 0x153
   2f328:	4804      	ldr	r0, [pc, #16]	; (2f33c <npgps_mark_block_used+0x34>)
   2f32a:	f00d ff25 	bl	3d178 <assert_post_action>
	pool.block_used[block] = used;
   2f32e:	4805      	ldr	r0, [pc, #20]	; (2f344 <npgps_mark_block_used+0x3c>)
   2f330:	4404      	add	r4, r0
   2f332:	7225      	strb	r5, [r4, #8]
}
   2f334:	bd38      	pop	{r3, r4, r5, pc}
   2f336:	bf00      	nop
   2f338:	2001a174 	.word	0x2001a174
   2f33c:	0004a94c 	.word	0x0004a94c
   2f340:	0004494f 	.word	0x0004494f
   2f344:	2001a178 	.word	0x2001a178

0002f348 <npgps_print_blocks>:
{
   2f348:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f34a:	b083      	sub	sp, #12
	char map[num_blocks + 1];
   2f34c:	4e16      	ldr	r6, [pc, #88]	; (2f3a8 <npgps_print_blocks+0x60>)
{
   2f34e:	af02      	add	r7, sp, #8
	char map[num_blocks + 1];
   2f350:	6832      	ldr	r2, [r6, #0]
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2f352:	4d16      	ldr	r5, [pc, #88]	; (2f3ac <npgps_print_blocks+0x64>)
	char map[num_blocks + 1];
   2f354:	f102 0308 	add.w	r3, r2, #8
   2f358:	f023 0307 	bic.w	r3, r3, #7
   2f35c:	ebad 0d03 	sub.w	sp, sp, r3
   2f360:	466c      	mov	r4, sp
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2f362:	f855 3b08 	ldr.w	r3, [r5], #8
   2f366:	2149      	movs	r1, #73	; 0x49
   2f368:	f844 3b08 	str.w	r3, [r4], #8
   2f36c:	4810      	ldr	r0, [pc, #64]	; (2f3b0 <npgps_print_blocks+0x68>)
   2f36e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2f372:	f00d ff42 	bl	3d1fa <z_log_minimal_printk>
	for (i = 0; i < num_blocks; i++) {
   2f376:	2200      	movs	r2, #0
   2f378:	6833      	ldr	r3, [r6, #0]
   2f37a:	4293      	cmp	r3, r2
   2f37c:	dc0b      	bgt.n	2f396 <npgps_print_blocks+0x4e>
	map[i] = '\0';
   2f37e:	2200      	movs	r2, #0
   2f380:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2f384:	54e2      	strb	r2, [r4, r3]
	LOG_INF("map:%s", log_strdup(map));
   2f386:	2149      	movs	r1, #73	; 0x49
   2f388:	4622      	mov	r2, r4
   2f38a:	480a      	ldr	r0, [pc, #40]	; (2f3b4 <npgps_print_blocks+0x6c>)
   2f38c:	f00d ff35 	bl	3d1fa <z_log_minimal_printk>
}
   2f390:	3704      	adds	r7, #4
   2f392:	46bd      	mov	sp, r7
   2f394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		map[i] = pool.block_used[i] ? '1' : '0';
   2f396:	f815 1b01 	ldrb.w	r1, [r5], #1
   2f39a:	2900      	cmp	r1, #0
   2f39c:	bf14      	ite	ne
   2f39e:	2131      	movne	r1, #49	; 0x31
   2f3a0:	2130      	moveq	r1, #48	; 0x30
   2f3a2:	54a1      	strb	r1, [r4, r2]
	for (i = 0; i < num_blocks; i++) {
   2f3a4:	3201      	adds	r2, #1
   2f3a6:	e7e8      	b.n	2f37a <npgps_print_blocks+0x32>
   2f3a8:	2001a174 	.word	0x2001a174
   2f3ac:	2001a178 	.word	0x2001a178
   2f3b0:	0004a990 	.word	0x0004a990
   2f3b4:	0004a9bb 	.word	0x0004a9bb

0002f3b8 <npgps_num_free>:
	for (int i = 0; i < num_blocks; i++) {
   2f3b8:	4b07      	ldr	r3, [pc, #28]	; (2f3d8 <npgps_num_free+0x20>)
{
   2f3ba:	b510      	push	{r4, lr}
	for (int i = 0; i < num_blocks; i++) {
   2f3bc:	6819      	ldr	r1, [r3, #0]
   2f3be:	2300      	movs	r3, #0
	int num = 0;
   2f3c0:	4618      	mov	r0, r3
   2f3c2:	4a06      	ldr	r2, [pc, #24]	; (2f3dc <npgps_num_free+0x24>)
	for (int i = 0; i < num_blocks; i++) {
   2f3c4:	4299      	cmp	r1, r3
   2f3c6:	dc00      	bgt.n	2f3ca <npgps_num_free+0x12>
}
   2f3c8:	bd10      	pop	{r4, pc}
		if (!pool.block_used[i]) {
   2f3ca:	f812 4b01 	ldrb.w	r4, [r2], #1
   2f3ce:	b904      	cbnz	r4, 2f3d2 <npgps_num_free+0x1a>
			num++;
   2f3d0:	3001      	adds	r0, #1
	for (int i = 0; i < num_blocks; i++) {
   2f3d2:	3301      	adds	r3, #1
   2f3d4:	e7f6      	b.n	2f3c4 <npgps_num_free+0xc>
   2f3d6:	bf00      	nop
   2f3d8:	2001a174 	.word	0x2001a174
   2f3dc:	2001a180 	.word	0x2001a180

0002f3e0 <npgps_find_first_free>:
	pool.first_free = NO_BLOCK;
   2f3e0:	f04f 32ff 	mov.w	r2, #4294967295
   2f3e4:	4b0a      	ldr	r3, [pc, #40]	; (2f410 <npgps_find_first_free+0x30>)
{
   2f3e6:	b510      	push	{r4, lr}
	pool.first_free = NO_BLOCK;
   2f3e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_blocks; i++) {
   2f3ea:	4a0a      	ldr	r2, [pc, #40]	; (2f414 <npgps_find_first_free+0x34>)
   2f3ec:	6811      	ldr	r1, [r2, #0]
   2f3ee:	2200      	movs	r2, #0
   2f3f0:	4291      	cmp	r1, r2
   2f3f2:	dd03      	ble.n	2f3fc <npgps_find_first_free+0x1c>
		if (!pool.block_used[from_block]) {
   2f3f4:	181c      	adds	r4, r3, r0
   2f3f6:	7a24      	ldrb	r4, [r4, #8]
   2f3f8:	b914      	cbnz	r4, 2f400 <npgps_find_first_free+0x20>
			pool.first_free = from_block;
   2f3fa:	6018      	str	r0, [r3, #0]
}
   2f3fc:	6818      	ldr	r0, [r3, #0]
   2f3fe:	bd10      	pop	{r4, pc}
		from_block = (from_block + 1) % num_blocks;
   2f400:	3001      	adds	r0, #1
   2f402:	fb90 f4f1 	sdiv	r4, r0, r1
	for (i = 0; i < num_blocks; i++) {
   2f406:	3201      	adds	r2, #1
		from_block = (from_block + 1) % num_blocks;
   2f408:	fb01 0014 	mls	r0, r1, r4, r0
	for (i = 0; i < num_blocks; i++) {
   2f40c:	e7f0      	b.n	2f3f0 <npgps_find_first_free+0x10>
   2f40e:	bf00      	nop
   2f410:	2001a178 	.word	0x2001a178
   2f414:	2001a174 	.word	0x2001a174

0002f418 <npgps_block_to_offset>:
	if ((block < 0) || (block >= num_blocks)) {
   2f418:	1e02      	subs	r2, r0, #0
{
   2f41a:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2f41c:	db03      	blt.n	2f426 <npgps_block_to_offset+0xe>
   2f41e:	4b06      	ldr	r3, [pc, #24]	; (2f438 <npgps_block_to_offset+0x20>)
   2f420:	681b      	ldr	r3, [r3, #0]
   2f422:	4293      	cmp	r3, r2
   2f424:	dc05      	bgt.n	2f432 <npgps_block_to_offset+0x1a>
		LOG_ERR("invalid block:%d", block);
   2f426:	4805      	ldr	r0, [pc, #20]	; (2f43c <npgps_block_to_offset+0x24>)
   2f428:	2145      	movs	r1, #69	; 0x45
   2f42a:	f00d fee6 	bl	3d1fa <z_log_minimal_printk>
		return 0;
   2f42e:	2000      	movs	r0, #0
}
   2f430:	bd08      	pop	{r3, pc}
	return block * BLOCK_SIZE;
   2f432:	02d0      	lsls	r0, r2, #11
   2f434:	e7fc      	b.n	2f430 <npgps_block_to_offset+0x18>
   2f436:	bf00      	nop
   2f438:	2001a174 	.word	0x2001a174
   2f43c:	0004a9c7 	.word	0x0004a9c7

0002f440 <npgps_pointer_to_block>:
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2f440:	4b06      	ldr	r3, [pc, #24]	; (2f45c <npgps_pointer_to_block+0x1c>)
	if ((ret < 0) || (ret >= num_blocks)) {
   2f442:	4a07      	ldr	r2, [pc, #28]	; (2f460 <npgps_pointer_to_block+0x20>)
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2f444:	681b      	ldr	r3, [r3, #0]
	if ((ret < 0) || (ret >= num_blocks)) {
   2f446:	6812      	ldr	r2, [r2, #0]
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2f448:	1ac0      	subs	r0, r0, r3
   2f44a:	0ac3      	lsrs	r3, r0, #11
		return NO_BLOCK;
   2f44c:	ebb2 2fd0 	cmp.w	r2, r0, lsr #11
}
   2f450:	bfcc      	ite	gt
   2f452:	4618      	movgt	r0, r3
   2f454:	f04f 30ff 	movle.w	r0, #4294967295
   2f458:	4770      	bx	lr
   2f45a:	bf00      	nop
   2f45c:	2001a16c 	.word	0x2001a16c
   2f460:	2001a174 	.word	0x2001a174

0002f464 <npgps_block_to_pointer>:
	if ((block < 0) || (block >= num_blocks)) {
   2f464:	1e02      	subs	r2, r0, #0
{
   2f466:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2f468:	db03      	blt.n	2f472 <npgps_block_to_pointer+0xe>
   2f46a:	4b07      	ldr	r3, [pc, #28]	; (2f488 <npgps_block_to_pointer+0x24>)
   2f46c:	681b      	ldr	r3, [r3, #0]
   2f46e:	4293      	cmp	r3, r2
   2f470:	dc05      	bgt.n	2f47e <npgps_block_to_pointer+0x1a>
		LOG_ERR("invalid block:%d", block);
   2f472:	4806      	ldr	r0, [pc, #24]	; (2f48c <npgps_block_to_pointer+0x28>)
   2f474:	2145      	movs	r1, #69	; 0x45
   2f476:	f00d fec0 	bl	3d1fa <z_log_minimal_printk>
		ret = NULL;
   2f47a:	2000      	movs	r0, #0
}
   2f47c:	bd08      	pop	{r3, pc}
		ret = (void *)(block_pool_base + block * BLOCK_SIZE);
   2f47e:	4b04      	ldr	r3, [pc, #16]	; (2f490 <npgps_block_to_pointer+0x2c>)
   2f480:	6818      	ldr	r0, [r3, #0]
   2f482:	eb00 20c2 	add.w	r0, r0, r2, lsl #11
	return ret;
   2f486:	e7f9      	b.n	2f47c <npgps_block_to_pointer+0x18>
   2f488:	2001a174 	.word	0x2001a174
   2f48c:	0004a9c7 	.word	0x0004a9c7
   2f490:	2001a16c 	.word	0x2001a16c

0002f494 <npgps_download_init>:
{
   2f494:	b510      	push	{r4, lr}
	__ASSERT(handler != NULL, "must specify handler");
   2f496:	4604      	mov	r4, r0
   2f498:	b950      	cbnz	r0, 2f4b0 <npgps_download_init+0x1c>
   2f49a:	4909      	ldr	r1, [pc, #36]	; (2f4c0 <npgps_download_init+0x2c>)
   2f49c:	4809      	ldr	r0, [pc, #36]	; (2f4c4 <npgps_download_init+0x30>)
   2f49e:	f240 12b3 	movw	r2, #435	; 0x1b3
   2f4a2:	f00d fe70 	bl	3d186 <assert_print>
   2f4a6:	f240 11b3 	movw	r1, #435	; 0x1b3
   2f4aa:	4805      	ldr	r0, [pc, #20]	; (2f4c0 <npgps_download_init+0x2c>)
   2f4ac:	f00d fe64 	bl	3d178 <assert_post_action>
	buffer_handler = handler;
   2f4b0:	4b05      	ldr	r3, [pc, #20]	; (2f4c8 <npgps_download_init+0x34>)
	return download_client_init(&dlc, download_client_callback);
   2f4b2:	4906      	ldr	r1, [pc, #24]	; (2f4cc <npgps_download_init+0x38>)
	buffer_handler = handler;
   2f4b4:	601c      	str	r4, [r3, #0]
	return download_client_init(&dlc, download_client_callback);
   2f4b6:	4806      	ldr	r0, [pc, #24]	; (2f4d0 <npgps_download_init+0x3c>)
}
   2f4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return download_client_init(&dlc, download_client_callback);
   2f4bc:	f000 bf7a 	b.w	303b4 <download_client_init>
   2f4c0:	0004a94c 	.word	0x0004a94c
   2f4c4:	0004494f 	.word	0x0004494f
   2f4c8:	2001a170 	.word	0x2001a170
   2f4cc:	0002f01d 	.word	0x0002f01d
   2f4d0:	20015908 	.word	0x20015908

0002f4d4 <npgps_download_start>:
{
   2f4d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2f4d8:	460f      	mov	r7, r1
   2f4da:	4615      	mov	r5, r2
   2f4dc:	4698      	mov	r8, r3
	if (host == NULL || file == NULL) {
   2f4de:	4606      	mov	r6, r0
   2f4e0:	2800      	cmp	r0, #0
   2f4e2:	d033      	beq.n	2f54c <npgps_download_start+0x78>
   2f4e4:	2900      	cmp	r1, #0
   2f4e6:	d031      	beq.n	2f54c <npgps_download_start+0x78>
	return z_impl_k_sem_take(sem, timeout);
   2f4e8:	2200      	movs	r2, #0
   2f4ea:	2300      	movs	r3, #0
   2f4ec:	4819      	ldr	r0, [pc, #100]	; (2f554 <npgps_download_start+0x80>)
   2f4ee:	f007 ff8b 	bl	37408 <z_impl_k_sem_take>
	if (err) {
   2f4f2:	4604      	mov	r4, r0
   2f4f4:	b138      	cbz	r0, 2f506 <npgps_download_start+0x32>
		LOG_ERR("PGPS download already active.");
   2f4f6:	2145      	movs	r1, #69	; 0x45
   2f4f8:	4817      	ldr	r0, [pc, #92]	; (2f558 <npgps_download_start+0x84>)
   2f4fa:	f00d fe7e 	bl	3d1fa <z_log_minimal_printk>
}
   2f4fe:	4620      	mov	r0, r4
   2f500:	b004      	add	sp, #16
   2f502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	socket_retries_left = SOCKET_RETRIES;
   2f506:	2202      	movs	r2, #2
	struct download_client_cfg config = {
   2f508:	9500      	str	r5, [sp, #0]
		.set_tls_hostname = (sec_tag != -1),
   2f50a:	3501      	adds	r5, #1
   2f50c:	bf18      	it	ne
   2f50e:	2501      	movne	r5, #1
	socket_retries_left = SOCKET_RETRIES;
   2f510:	4b12      	ldr	r3, [pc, #72]	; (2f55c <npgps_download_start+0x88>)
	err = download_client_connect(&dlc, host, &config);
   2f512:	4631      	mov	r1, r6
	socket_retries_left = SOCKET_RETRIES;
   2f514:	601a      	str	r2, [r3, #0]
	struct download_client_cfg config = {
   2f516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	err = download_client_connect(&dlc, host, &config);
   2f518:	466a      	mov	r2, sp
   2f51a:	4811      	ldr	r0, [pc, #68]	; (2f560 <npgps_download_start+0x8c>)
	struct download_client_cfg config = {
   2f51c:	f88d 8004 	strb.w	r8, [sp, #4]
   2f520:	9302      	str	r3, [sp, #8]
		.set_tls_hostname = (sec_tag != -1),
   2f522:	f88d 500c 	strb.w	r5, [sp, #12]
	err = download_client_connect(&dlc, host, &config);
   2f526:	f000 ff75 	bl	30414 <download_client_connect>
	if (err != 0) {
   2f52a:	4604      	mov	r4, r0
   2f52c:	b950      	cbnz	r0, 2f544 <npgps_download_start+0x70>
	err = download_client_start(&dlc, file, 0);
   2f52e:	4602      	mov	r2, r0
   2f530:	4639      	mov	r1, r7
   2f532:	480b      	ldr	r0, [pc, #44]	; (2f560 <npgps_download_start+0x8c>)
   2f534:	f001 faae 	bl	30a94 <download_client_start>
	if (err != 0) {
   2f538:	4604      	mov	r4, r0
   2f53a:	2800      	cmp	r0, #0
   2f53c:	d0df      	beq.n	2f4fe <npgps_download_start+0x2a>
		download_client_disconnect(&dlc);
   2f53e:	4808      	ldr	r0, [pc, #32]	; (2f560 <npgps_download_start+0x8c>)
   2f540:	f001 f94c 	bl	307dc <download_client_disconnect>
	z_impl_k_sem_give(sem);
   2f544:	4803      	ldr	r0, [pc, #12]	; (2f554 <npgps_download_start+0x80>)
   2f546:	f007 ff23 	bl	37390 <z_impl_k_sem_give>
}
   2f54a:	e7d8      	b.n	2f4fe <npgps_download_start+0x2a>
		return -EINVAL;
   2f54c:	f06f 0415 	mvn.w	r4, #21
   2f550:	e7d5      	b.n	2f4fe <npgps_download_start+0x2a>
   2f552:	bf00      	nop
   2f554:	200150a8 	.word	0x200150a8
   2f558:	0004a9dd 	.word	0x0004a9dd
   2f55c:	2001a1ac 	.word	0x2001a1ac
   2f560:	20015908 	.word	0x20015908

0002f564 <nrf_cloud_cell_pos_request_json_get>:
	return err;
}

int nrf_cloud_cell_pos_request_json_get(const struct lte_lc_cells_info *const cells_inf,
					const bool request_loc, cJSON **req_obj_out)
{
   2f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f566:	4604      	mov	r4, r0
   2f568:	460f      	mov	r7, r1
	int err = 0;
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2f56a:	4814      	ldr	r0, [pc, #80]	; (2f5bc <nrf_cloud_cell_pos_request_json_get+0x58>)
   2f56c:	4914      	ldr	r1, [pc, #80]	; (2f5c0 <nrf_cloud_cell_pos_request_json_get+0x5c>)
{
   2f56e:	4616      	mov	r6, r2
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2f570:	f7fb f934 	bl	2a7dc <json_create_req_obj>
						      NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA);
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2f574:	4913      	ldr	r1, [pc, #76]	; (2f5c4 <nrf_cloud_cell_pos_request_json_get+0x60>)
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2f576:	6030      	str	r0, [r6, #0]
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2f578:	f010 ff75 	bl	40466 <cJSON_AddObjectToObject>

	if (!data_obj) {
   2f57c:	4605      	mov	r5, r0
   2f57e:	b928      	cbnz	r0, 2f58c <nrf_cloud_cell_pos_request_json_get+0x28>
		err = -ENOMEM;
   2f580:	f06f 040b 	mvn.w	r4, #11
	}

	return 0;

cleanup:
	cJSON_Delete(*req_obj_out);
   2f584:	6830      	ldr	r0, [r6, #0]
   2f586:	f002 ffed 	bl	32564 <cJSON_Delete>
	return err;
   2f58a:	e011      	b.n	2f5b0 <nrf_cloud_cell_pos_request_json_get+0x4c>
	if (cells_inf) {
   2f58c:	b194      	cbz	r4, 2f5b4 <nrf_cloud_cell_pos_request_json_get+0x50>
		err = nrf_cloud_format_cell_pos_req_json(cells_inf, 1, data_obj);
   2f58e:	4602      	mov	r2, r0
   2f590:	2101      	movs	r1, #1
   2f592:	4620      	mov	r0, r4
   2f594:	f7fb ff9a 	bl	2b4cc <nrf_cloud_format_cell_pos_req_json>
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2f598:	4604      	mov	r4, r0
	if (err) {
   2f59a:	2800      	cmp	r0, #0
   2f59c:	d1f2      	bne.n	2f584 <nrf_cloud_cell_pos_request_json_get+0x20>
	if (!request_loc &&
   2f59e:	b93f      	cbnz	r7, 2f5b0 <nrf_cloud_cell_pos_request_json_get+0x4c>
	    !cJSON_AddNumberToObjectCS(data_obj, CELL_POS_JSON_CELL_LOC_KEY_DOREPLY, 0)) {
   2f5a0:	2200      	movs	r2, #0
   2f5a2:	2300      	movs	r3, #0
   2f5a4:	4628      	mov	r0, r5
   2f5a6:	4908      	ldr	r1, [pc, #32]	; (2f5c8 <nrf_cloud_cell_pos_request_json_get+0x64>)
   2f5a8:	f010 fec6 	bl	40338 <cJSON_AddNumberToObjectCS>
	if (!request_loc &&
   2f5ac:	2800      	cmp	r0, #0
   2f5ae:	d0e7      	beq.n	2f580 <nrf_cloud_cell_pos_request_json_get+0x1c>
}
   2f5b0:	4620      	mov	r0, r4
   2f5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2f5b4:	f7fb ff68 	bl	2b488 <nrf_cloud_format_single_cell_pos_req_json>
   2f5b8:	e7ee      	b.n	2f598 <nrf_cloud_cell_pos_request_json_get+0x34>
   2f5ba:	bf00      	nop
   2f5bc:	00048afc 	.word	0x00048afc
   2f5c0:	00043d5e 	.word	0x00043d5e
   2f5c4:	00043e3a 	.word	0x00043e3a
   2f5c8:	0004aa00 	.word	0x0004aa00

0002f5cc <nrf_cloud_cell_pos_process>:

int nrf_cloud_cell_pos_process(const char *buf, struct nrf_cloud_cell_pos_result *result)
{
   2f5cc:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!result) {
   2f5ce:	460d      	mov	r5, r1
   2f5d0:	b191      	cbz	r1, 2f5f8 <nrf_cloud_cell_pos_process+0x2c>
		return -EINVAL;
	}

	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2f5d2:	f7fc f991 	bl	2b8f8 <nrf_cloud_parse_cell_pos_response>
	if (err == -EFAULT) {
   2f5d6:	f110 0f0e 	cmn.w	r0, #14
	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2f5da:	4604      	mov	r4, r0
	if (err == -EFAULT) {
   2f5dc:	d106      	bne.n	2f5ec <nrf_cloud_cell_pos_process+0x20>
		LOG_ERR("nRF Cloud cell-based location error: %d",
   2f5de:	2145      	movs	r1, #69	; 0x45
   2f5e0:	69ea      	ldr	r2, [r5, #28]
   2f5e2:	4807      	ldr	r0, [pc, #28]	; (2f600 <nrf_cloud_cell_pos_process+0x34>)
			result->err);
	} else if (err < 0) {
		LOG_ERR("Error processing cell-based location: %d", err);
   2f5e4:	f00d fe09 	bl	3d1fa <z_log_minimal_printk>
	}

	return err;
}
   2f5e8:	4620      	mov	r0, r4
   2f5ea:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err < 0) {
   2f5ec:	2800      	cmp	r0, #0
   2f5ee:	dafb      	bge.n	2f5e8 <nrf_cloud_cell_pos_process+0x1c>
		LOG_ERR("Error processing cell-based location: %d", err);
   2f5f0:	4602      	mov	r2, r0
   2f5f2:	2145      	movs	r1, #69	; 0x45
   2f5f4:	4803      	ldr	r0, [pc, #12]	; (2f604 <nrf_cloud_cell_pos_process+0x38>)
   2f5f6:	e7f5      	b.n	2f5e4 <nrf_cloud_cell_pos_process+0x18>
		return -EINVAL;
   2f5f8:	f06f 0415 	mvn.w	r4, #21
   2f5fc:	e7f4      	b.n	2f5e8 <nrf_cloud_cell_pos_process+0x1c>
   2f5fe:	bf00      	nop
   2f600:	0004aa08 	.word	0x0004aa08
   2f604:	0004aa35 	.word	0x0004aa35

0002f608 <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, NRF_CLOUD_SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   2f608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f60c:	460d      	mov	r5, r1
   2f60e:	4617      	mov	r7, r2
   2f610:	4698      	mov	r8, r3
	if (!key) {
   2f612:	4604      	mov	r4, r0
   2f614:	2800      	cmp	r0, #0
   2f616:	d036      	beq.n	2f686 <fota_settings_set+0x7e>
		return -EINVAL;
	}

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (strncmp(key, NRF_CLOUD_SETTINGS_FOTA_JOB, strlen(NRF_CLOUD_SETTINGS_FOTA_JOB)) != 0) {
   2f618:	481f      	ldr	r0, [pc, #124]	; (2f698 <fota_settings_set+0x90>)
   2f61a:	f7ed fe12 	bl	1d242 <strlen>
   2f61e:	491e      	ldr	r1, [pc, #120]	; (2f698 <fota_settings_set+0x90>)
   2f620:	4602      	mov	r2, r0
   2f622:	4620      	mov	r0, r4
   2f624:	f012 fc6f 	bl	41f06 <strncmp>
   2f628:	4604      	mov	r4, r0
   2f62a:	bb78      	cbnz	r0, 2f68c <fota_settings_set+0x84>
		return -ENOMSG;
	}

	if (len_rd > sizeof(saved_job)) {
   2f62c:	2d28      	cmp	r5, #40	; 0x28
   2f62e:	d904      	bls.n	2f63a <fota_settings_set+0x32>
		LOG_INF("FOTA settings size larger than expected");
   2f630:	2149      	movs	r1, #73	; 0x49
   2f632:	481a      	ldr	r0, [pc, #104]	; (2f69c <fota_settings_set+0x94>)
   2f634:	f00d fde1 	bl	3d1fa <z_log_minimal_printk>
		len_rd = sizeof(saved_job);
   2f638:	2528      	movs	r5, #40	; 0x28
	}

	ssize_t sz = read_cb(cb_arg, (void *)&saved_job, len_rd);
   2f63a:	4e19      	ldr	r6, [pc, #100]	; (2f6a0 <fota_settings_set+0x98>)
   2f63c:	462a      	mov	r2, r5
   2f63e:	4631      	mov	r1, r6
   2f640:	4640      	mov	r0, r8
   2f642:	47b8      	blx	r7

	if (sz == 0) {
   2f644:	1e02      	subs	r2, r0, #0
   2f646:	d024      	beq.n	2f692 <fota_settings_set+0x8a>
		LOG_DBG("FOTA settings key-value pair has been deleted");
		return -EIDRM;
	} else if (sz < 0) {
   2f648:	da09      	bge.n	2f65e <fota_settings_set+0x56>
		LOG_ERR("FOTA settings read error: %d", sz);
   2f64a:	2145      	movs	r1, #69	; 0x45
   2f64c:	4815      	ldr	r0, [pc, #84]	; (2f6a4 <fota_settings_set+0x9c>)
   2f64e:	f00d fdd4 	bl	3d1fa <z_log_minimal_printk>
		return -EIO;
   2f652:	f06f 0404 	mvn.w	r4, #4
	} else {
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
	}

	return 0;
}
   2f656:	4620      	mov	r0, r4
   2f658:	b002      	add	sp, #8
   2f65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sz == sizeof(saved_job)) {
   2f65e:	2a28      	cmp	r2, #40	; 0x28
   2f660:	d10c      	bne.n	2f67c <fota_settings_set+0x74>
		LOG_INF("Saved job: %s, type: %d, validate: %d, bl: 0x%X",
   2f662:	4632      	mov	r2, r6
   2f664:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   2f668:	2149      	movs	r1, #73	; 0x49
   2f66a:	9301      	str	r3, [sp, #4]
   2f66c:	f812 3b02 	ldrb.w	r3, [r2], #2
   2f670:	480d      	ldr	r0, [pc, #52]	; (2f6a8 <fota_settings_set+0xa0>)
   2f672:	9300      	str	r3, [sp, #0]
   2f674:	7873      	ldrb	r3, [r6, #1]
   2f676:	f00d fdc0 	bl	3d1fa <z_log_minimal_printk>
   2f67a:	e7ec      	b.n	2f656 <fota_settings_set+0x4e>
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
   2f67c:	2149      	movs	r1, #73	; 0x49
   2f67e:	480b      	ldr	r0, [pc, #44]	; (2f6ac <fota_settings_set+0xa4>)
   2f680:	f00d fdbb 	bl	3d1fa <z_log_minimal_printk>
   2f684:	e7e7      	b.n	2f656 <fota_settings_set+0x4e>
		return -EINVAL;
   2f686:	f06f 0415 	mvn.w	r4, #21
   2f68a:	e7e4      	b.n	2f656 <fota_settings_set+0x4e>
		return -ENOMSG;
   2f68c:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2f690:	e7e1      	b.n	2f656 <fota_settings_set+0x4e>
		return -EIDRM;
   2f692:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2f696:	e7de      	b.n	2f656 <fota_settings_set+0x4e>
   2f698:	0004abd2 	.word	0x0004abd2
   2f69c:	0004aa76 	.word	0x0004aa76
   2f6a0:	20014c47 	.word	0x20014c47
   2f6a4:	0004aaa3 	.word	0x0004aaa3
   2f6a8:	0004aac5 	.word	0x0004aac5
   2f6ac:	0004aafa 	.word	0x0004aafa

0002f6b0 <add_number_to_array>:
	}
	return item;
}

static bool add_number_to_array(cJSON *const array, const int number)
{
   2f6b0:	b538      	push	{r3, r4, r5, lr}
   2f6b2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f6b4:	4605      	mov	r5, r0
   2f6b6:	b950      	cbnz	r0, 2f6ce <add_number_to_array+0x1e>
   2f6b8:	490c      	ldr	r1, [pc, #48]	; (2f6ec <add_number_to_array+0x3c>)
   2f6ba:	480d      	ldr	r0, [pc, #52]	; (2f6f0 <add_number_to_array+0x40>)
   2f6bc:	f240 229f 	movw	r2, #671	; 0x29f
   2f6c0:	f00d fd61 	bl	3d186 <assert_print>
   2f6c4:	f240 219f 	movw	r1, #671	; 0x29f
   2f6c8:	4808      	ldr	r0, [pc, #32]	; (2f6ec <add_number_to_array+0x3c>)
   2f6ca:	f00d fd55 	bl	3d178 <assert_post_action>

	cJSON *item = cJSON_CreateNumber(number);
   2f6ce:	4620      	mov	r0, r4
   2f6d0:	f7ed f808 	bl	1c6e4 <__aeabi_i2d>
   2f6d4:	f7ef f87c 	bl	1e7d0 <cJSON_CreateNumber>

	if (item) {
   2f6d8:	4604      	mov	r4, r0
   2f6da:	b118      	cbz	r0, 2f6e4 <add_number_to_array+0x34>
		cJSON_AddItemToArray(array, item);
   2f6dc:	4601      	mov	r1, r0
   2f6de:	4628      	mov	r0, r5
   2f6e0:	f010 fde0 	bl	402a4 <cJSON_AddItemToArray>
	}
	return item;
}
   2f6e4:	1e20      	subs	r0, r4, #0
   2f6e6:	bf18      	it	ne
   2f6e8:	2001      	movne	r0, #1
   2f6ea:	bd38      	pop	{r3, r4, r5, pc}
   2f6ec:	0004ab39 	.word	0x0004ab39
   2f6f0:	0004494f 	.word	0x0004494f

0002f6f4 <add_string_to_array>:
{
   2f6f4:	b538      	push	{r3, r4, r5, lr}
   2f6f6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f6f8:	4605      	mov	r5, r0
   2f6fa:	b950      	cbnz	r0, 2f712 <add_string_to_array+0x1e>
   2f6fc:	490b      	ldr	r1, [pc, #44]	; (2f72c <add_string_to_array+0x38>)
   2f6fe:	480c      	ldr	r0, [pc, #48]	; (2f730 <add_string_to_array+0x3c>)
   2f700:	f240 2293 	movw	r2, #659	; 0x293
   2f704:	f00d fd3f 	bl	3d186 <assert_print>
   2f708:	f240 2193 	movw	r1, #659	; 0x293
   2f70c:	4807      	ldr	r0, [pc, #28]	; (2f72c <add_string_to_array+0x38>)
   2f70e:	f00d fd33 	bl	3d178 <assert_post_action>
	cJSON *item = cJSON_CreateString(string);
   2f712:	4620      	mov	r0, r4
   2f714:	f002 ffc4 	bl	326a0 <cJSON_CreateString>
	if (item) {
   2f718:	4604      	mov	r4, r0
   2f71a:	b118      	cbz	r0, 2f724 <add_string_to_array+0x30>
		cJSON_AddItemToArray(array, item);
   2f71c:	4601      	mov	r1, r0
   2f71e:	4628      	mov	r0, r5
   2f720:	f010 fdc0 	bl	402a4 <cJSON_AddItemToArray>
}
   2f724:	1e20      	subs	r0, r4, #0
   2f726:	bf18      	it	ne
   2f728:	2001      	movne	r0, #1
   2f72a:	bd38      	pop	{r3, r4, r5, pc}
   2f72c:	0004ab39 	.word	0x0004ab39
   2f730:	0004494f 	.word	0x0004494f

0002f734 <publish>:
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   2f734:	4b07      	ldr	r3, [pc, #28]	; (2f754 <publish+0x20>)
{
   2f736:	4601      	mov	r1, r0
   2f738:	b510      	push	{r4, lr}
	ret = mqtt_publish(client_mqtt, pub);
   2f73a:	6818      	ldr	r0, [r3, #0]
   2f73c:	f00f f926 	bl	3e98c <mqtt_publish>
	if (ret) {
   2f740:	4604      	mov	r4, r0
   2f742:	b120      	cbz	r0, 2f74e <publish+0x1a>
		LOG_ERR("Publish failed: %d", ret);
   2f744:	4602      	mov	r2, r0
   2f746:	2145      	movs	r1, #69	; 0x45
   2f748:	4803      	ldr	r0, [pc, #12]	; (2f758 <publish+0x24>)
   2f74a:	f00d fd56 	bl	3d1fa <z_log_minimal_printk>
	}
	return ret;
}
   2f74e:	4620      	mov	r0, r4
   2f750:	bd10      	pop	{r4, pc}
   2f752:	bf00      	nop
   2f754:	2001a1b0 	.word	0x2001a1b0
   2f758:	0004ab77 	.word	0x0004ab77

0002f75c <save_validate_status>:
{
   2f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f75e:	460f      	mov	r7, r1
   2f760:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(job_id != NULL);
   2f762:	4605      	mov	r5, r0
   2f764:	b950      	cbnz	r0, 2f77c <save_validate_status+0x20>
   2f766:	491e      	ldr	r1, [pc, #120]	; (2f7e0 <save_validate_status+0x84>)
   2f768:	481e      	ldr	r0, [pc, #120]	; (2f7e4 <save_validate_status+0x88>)
   2f76a:	f240 2202 	movw	r2, #514	; 0x202
   2f76e:	f00d fd0a 	bl	3d186 <assert_print>
   2f772:	f240 2102 	movw	r1, #514	; 0x202
   2f776:	481a      	ldr	r0, [pc, #104]	; (2f7e0 <save_validate_status+0x84>)
   2f778:	f00d fcfe 	bl	3d178 <assert_post_action>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   2f77c:	2e05      	cmp	r6, #5
   2f77e:	4c1a      	ldr	r4, [pc, #104]	; (2f7e8 <save_validate_status+0x8c>)
   2f780:	d117      	bne.n	2f7b2 <save_validate_status+0x56>
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f782:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f784:	2303      	movs	r3, #3
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f786:	2225      	movs	r2, #37	; 0x25
   2f788:	1ca0      	adds	r0, r4, #2
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f78a:	7063      	strb	r3, [r4, #1]
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f78c:	7021      	strb	r1, [r4, #0]
		saved_job.bl_flags = NRF_CLOUD_FOTA_BL_STATUS_CLEAR;
   2f78e:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f792:	f012 f9e5 	bl	41b60 <memset>
	ret = settings_save_one(NRF_CLOUD_SETTINGS_FULL_FOTA_JOB, &saved_job,
   2f796:	2228      	movs	r2, #40	; 0x28
   2f798:	4913      	ldr	r1, [pc, #76]	; (2f7e8 <save_validate_status+0x8c>)
   2f79a:	4814      	ldr	r0, [pc, #80]	; (2f7ec <save_validate_status+0x90>)
   2f79c:	f7f2 fe32 	bl	22404 <settings_save_one>
	if (ret) {
   2f7a0:	4604      	mov	r4, r0
   2f7a2:	b120      	cbz	r0, 2f7ae <save_validate_status+0x52>
		LOG_ERR("settings_save_one failed: %d", ret);
   2f7a4:	4602      	mov	r2, r0
   2f7a6:	2145      	movs	r1, #69	; 0x45
   2f7a8:	4811      	ldr	r0, [pc, #68]	; (2f7f0 <save_validate_status+0x94>)
   2f7aa:	f00d fd26 	bl	3d1fa <z_log_minimal_printk>
}
   2f7ae:	4620      	mov	r0, r4
   2f7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		saved_job.validate = validate;
   2f7b2:	4620      	mov	r0, r4
   2f7b4:	f800 6b02 	strb.w	r6, [r0], #2
		if (job_id != saved_job.id) {
   2f7b8:	4285      	cmp	r5, r0
		saved_job.type = job_type;
   2f7ba:	7067      	strb	r7, [r4, #1]
		if (job_id != saved_job.id) {
   2f7bc:	d006      	beq.n	2f7cc <save_validate_status+0x70>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id) - 1);
   2f7be:	2224      	movs	r2, #36	; 0x24
   2f7c0:	4629      	mov	r1, r5
   2f7c2:	f012 fbb4 	bl	41f2e <strncpy>
			saved_job.id[sizeof(saved_job.id) - 1] = '\0';
   2f7c6:	2300      	movs	r3, #0
   2f7c8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		ret = nrf_cloud_bootloader_fota_slot_set(&saved_job);
   2f7cc:	4806      	ldr	r0, [pc, #24]	; (2f7e8 <save_validate_status+0x8c>)
   2f7ce:	f000 fcab 	bl	30128 <nrf_cloud_bootloader_fota_slot_set>
		if (ret) {
   2f7d2:	2800      	cmp	r0, #0
   2f7d4:	d0df      	beq.n	2f796 <save_validate_status+0x3a>
			LOG_WRN("Failed to set active bootloader (B1) slot flag");
   2f7d6:	2157      	movs	r1, #87	; 0x57
   2f7d8:	4806      	ldr	r0, [pc, #24]	; (2f7f4 <save_validate_status+0x98>)
   2f7da:	f00d fd0e 	bl	3d1fa <z_log_minimal_printk>
   2f7de:	e7da      	b.n	2f796 <save_validate_status+0x3a>
   2f7e0:	0004ab39 	.word	0x0004ab39
   2f7e4:	0004494f 	.word	0x0004494f
   2f7e8:	20014c47 	.word	0x20014c47
   2f7ec:	0004abc3 	.word	0x0004abc3
   2f7f0:	0004abd6 	.word	0x0004abd6
   2f7f4:	0004ab8f 	.word	0x0004ab8f

0002f7f8 <reset_topics>:
{
   2f7f8:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   2f7fa:	4805      	ldr	r0, [pc, #20]	; (2f810 <reset_topics+0x18>)
   2f7fc:	f010 fb68 	bl	3fed0 <reset_topic>
	reset_topic(&topic_updt.topic);
   2f800:	4804      	ldr	r0, [pc, #16]	; (2f814 <reset_topics+0x1c>)
   2f802:	f010 fb65 	bl	3fed0 <reset_topic>
}
   2f806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2f80a:	4803      	ldr	r0, [pc, #12]	; (2f818 <reset_topics+0x20>)
   2f80c:	f010 bb60 	b.w	3fed0 <reset_topic>
   2f810:	200146c8 	.word	0x200146c8
   2f814:	200146e0 	.word	0x200146e0
   2f818:	200146d4 	.word	0x200146d4

0002f81c <build_topic>:
{
   2f81c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	size_t size = endpoint->size + strlen(client_id) +
   2f820:	684d      	ldr	r5, [r1, #4]
{
   2f822:	4690      	mov	r8, r2
   2f824:	460f      	mov	r7, r1
   2f826:	461e      	mov	r6, r3
   2f828:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   2f82a:	f7ed fd0a 	bl	1d242 <strlen>
   2f82e:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   2f830:	4640      	mov	r0, r8
   2f832:	f7ed fd06 	bl	1d242 <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   2f836:	1c6b      	adds	r3, r5, #1
   2f838:	eb03 050a 	add.w	r5, r3, sl
   2f83c:	182c      	adds	r4, r5, r0
	buf = nrf_cloud_calloc(size, 1);
   2f83e:	2101      	movs	r1, #1
   2f840:	4620      	mov	r0, r4
   2f842:	f012 f8e7 	bl	41a14 <k_calloc>
	if (!buf) {
   2f846:	4605      	mov	r5, r0
   2f848:	b938      	cbnz	r0, 2f85a <build_topic+0x3e>
		reset_topic(topic_out);
   2f84a:	4630      	mov	r0, r6
   2f84c:	f010 fb40 	bl	3fed0 <reset_topic>
		return ret;
   2f850:	f06f 000b 	mvn.w	r0, #11
}
   2f854:	b002      	add	sp, #8
   2f856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintk(buf, size, "%s%s%s",
   2f85a:	4621      	mov	r1, r4
   2f85c:	e9cd 9800 	strd	r9, r8, [sp]
   2f860:	683b      	ldr	r3, [r7, #0]
   2f862:	4a08      	ldr	r2, [pc, #32]	; (2f884 <build_topic+0x68>)
   2f864:	f00d fab9 	bl	3cdda <snprintk>
	if (ret <= 0 || ret >= size) {
   2f868:	2800      	cmp	r0, #0
   2f86a:	dd01      	ble.n	2f870 <build_topic+0x54>
   2f86c:	42a0      	cmp	r0, r4
   2f86e:	d305      	bcc.n	2f87c <build_topic+0x60>
		nrf_cloud_free(buf);
   2f870:	4628      	mov	r0, r5
   2f872:	f012 f8c4 	bl	419fe <k_free>
		return ret;
   2f876:	f06f 0006 	mvn.w	r0, #6
   2f87a:	e7eb      	b.n	2f854 <build_topic+0x38>
	topic_out->size = ret;
   2f87c:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   2f880:	2000      	movs	r0, #0
   2f882:	e7e7      	b.n	2f854 <build_topic+0x38>
   2f884:	0004abf8 	.word	0x0004abf8

0002f888 <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   2f888:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   2f88a:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   2f88c:	f8cd 3003 	str.w	r3, [sp, #3]
   2f890:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   2f894:	4b0b      	ldr	r3, [pc, #44]	; (2f8c4 <send_event.constprop.0+0x3c>)
	switch (id) {
   2f896:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   2f898:	791a      	ldrb	r2, [r3, #4]
   2f89a:	f88d 0000 	strb.w	r0, [sp]
   2f89e:	f88d 2001 	strb.w	r2, [sp, #1]
   2f8a2:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   2f8a4:	bf08      	it	eq
   2f8a6:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   2f8a8:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   2f8ac:	bf08      	it	eq
   2f8ae:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   2f8b2:	4b05      	ldr	r3, [pc, #20]	; (2f8c8 <send_event.constprop.0+0x40>)
   2f8b4:	681b      	ldr	r3, [r3, #0]
   2f8b6:	b10b      	cbz	r3, 2f8bc <send_event.constprop.0+0x34>
		event_cb(&evt);
   2f8b8:	4668      	mov	r0, sp
   2f8ba:	4798      	blx	r3
}
   2f8bc:	b003      	add	sp, #12
   2f8be:	f85d fb04 	ldr.w	pc, [sp], #4
   2f8c2:	bf00      	nop
   2f8c4:	2001a1b4 	.word	0x2001a1b4
   2f8c8:	2001a1dc 	.word	0x2001a1dc

0002f8cc <send_job_update>:
		return false;
	}
}

static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   2f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* ensure shell-invoked fota doesn't crash below */
	if ((job == NULL) || (job->info.id == NULL)) {
   2f8d0:	68c3      	ldr	r3, [r0, #12]
{
   2f8d2:	4604      	mov	r4, r0
   2f8d4:	b086      	sub	sp, #24
	if ((job == NULL) || (job->info.id == NULL)) {
   2f8d6:	2b00      	cmp	r3, #0
   2f8d8:	d065      	beq.n	2f9a6 <send_job_update+0xda>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   2f8da:	4b37      	ldr	r3, [pc, #220]	; (2f9b8 <send_job_update+0xec>)
   2f8dc:	681b      	ldr	r3, [r3, #0]
   2f8de:	2b00      	cmp	r3, #0
   2f8e0:	d064      	beq.n	2f9ac <send_job_update+0xe0>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   2f8e2:	4d36      	ldr	r5, [pc, #216]	; (2f9bc <send_job_update+0xf0>)
   2f8e4:	682b      	ldr	r3, [r5, #0]
   2f8e6:	2b00      	cmp	r3, #0
   2f8e8:	d063      	beq.n	2f9b2 <send_job_update+0xe6>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   2f8ea:	466e      	mov	r6, sp
   2f8ec:	2218      	movs	r2, #24
   2f8ee:	2100      	movs	r1, #0
   2f8f0:	4630      	mov	r0, r6
   2f8f2:	f012 f935 	bl	41b60 <memset>
   2f8f6:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2f8fa:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NCT_MSG_ID_FOTA_REPORT,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   2f8fe:	f002 fee7 	bl	326d0 <cJSON_CreateArray>

	if (!array) {
   2f902:	4680      	mov	r8, r0
   2f904:	b928      	cbnz	r0, 2f912 <send_job_update+0x46>
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_Delete(array);
		return -ENOMEM;
   2f906:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   2f90a:	4628      	mov	r0, r5
   2f90c:	b006      	add	sp, #24
   2f90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = add_string_to_array(array, job->info.id) &&
   2f912:	68e1      	ldr	r1, [r4, #12]
   2f914:	f7ff feee 	bl	2f6f4 <add_string_to_array>
   2f918:	b118      	cbz	r0, 2f922 <send_job_update+0x56>
		 add_number_to_array(array, job->status);
   2f91a:	4640      	mov	r0, r8
   2f91c:	7921      	ldrb	r1, [r4, #4]
   2f91e:	f7ff fec7 	bl	2f6b0 <add_number_to_array>
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f922:	7923      	ldrb	r3, [r4, #4]
	result = add_string_to_array(array, job->info.id) &&
   2f924:	4607      	mov	r7, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f926:	2b07      	cmp	r3, #7
   2f928:	d10c      	bne.n	2f944 <send_job_update+0x78>
		result &= add_number_to_array(array, job->dl_progress);
   2f92a:	4640      	mov	r0, r8
   2f92c:	6a21      	ldr	r1, [r4, #32]
   2f92e:	f7ff febf 	bl	2f6b0 <add_number_to_array>
		result &= add_string_to_array(array,
   2f932:	ea00 0307 	and.w	r3, r0, r7
   2f936:	f003 0301 	and.w	r3, r3, #1
		cJSON_Delete(array);
   2f93a:	4640      	mov	r0, r8
	if (!result) {
   2f93c:	b97b      	cbnz	r3, 2f95e <send_job_update+0x92>
		cJSON_Delete(array);
   2f93e:	f002 fe11 	bl	32564 <cJSON_Delete>
   2f942:	e7e0      	b.n	2f906 <send_job_update+0x3a>
	switch (err) {
   2f944:	7f23      	ldrb	r3, [r4, #28]
		result &= add_string_to_array(array,
   2f946:	4640      	mov	r0, r8
   2f948:	3b01      	subs	r3, #1
   2f94a:	b2db      	uxtb	r3, r3
   2f94c:	2b04      	cmp	r3, #4
   2f94e:	bf96      	itet	ls
   2f950:	4a1b      	ldrls	r2, [pc, #108]	; (2f9c0 <send_job_update+0xf4>)
   2f952:	491c      	ldrhi	r1, [pc, #112]	; (2f9c4 <send_job_update+0xf8>)
   2f954:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   2f958:	f7ff fecc 	bl	2f6f4 <add_string_to_array>
   2f95c:	e7e9      	b.n	2f932 <send_job_update+0x66>
	char *array_str = cJSON_PrintUnformatted(array);
   2f95e:	f010 fc86 	bl	4026e <cJSON_PrintUnformatted>
   2f962:	4607      	mov	r7, r0
	cJSON_Delete(array);
   2f964:	4640      	mov	r0, r8
   2f966:	f002 fdfd 	bl	32564 <cJSON_Delete>
	if (array_str == NULL) {
   2f96a:	2f00      	cmp	r7, #0
   2f96c:	d0cb      	beq.n	2f906 <send_job_update+0x3a>
		pub_param->message.topic = *topic;
   2f96e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2f972:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   2f976:	4638      	mov	r0, r7
		pub_param->message.payload.data = array_str;
   2f978:	9703      	str	r7, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   2f97a:	f7ed fc62 	bl	1d242 <strlen>
   2f97e:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   2f980:	4630      	mov	r0, r6
   2f982:	f7ff fed7 	bl	2f734 <publish>
   2f986:	4605      	mov	r5, r0
	cJSON_FreeString(array_str);
   2f988:	4638      	mov	r0, r7
   2f98a:	f010 fda7 	bl	404dc <cJSON_FreeString>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   2f98e:	2d00      	cmp	r5, #0
   2f990:	d1bb      	bne.n	2f90a <send_job_update+0x3e>
	switch (status) {
   2f992:	7923      	ldrb	r3, [r4, #4]
   2f994:	3b02      	subs	r3, #2
   2f996:	2b04      	cmp	r3, #4
   2f998:	d8b7      	bhi.n	2f90a <send_job_update+0x3e>
		strncpy(last_job, job->info.id, sizeof(last_job));
   2f99a:	2225      	movs	r2, #37	; 0x25
   2f99c:	68e1      	ldr	r1, [r4, #12]
   2f99e:	480a      	ldr	r0, [pc, #40]	; (2f9c8 <send_job_update+0xfc>)
   2f9a0:	f012 fac5 	bl	41f2e <strncpy>
   2f9a4:	e7b1      	b.n	2f90a <send_job_update+0x3e>
		return -EINVAL;
   2f9a6:	f06f 0515 	mvn.w	r5, #21
   2f9aa:	e7ae      	b.n	2f90a <send_job_update+0x3e>
		return -ENXIO;
   2f9ac:	f06f 0505 	mvn.w	r5, #5
   2f9b0:	e7ab      	b.n	2f90a <send_job_update+0x3e>
		return -EHOSTUNREACH;
   2f9b2:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2f9b6:	e7a8      	b.n	2f90a <send_job_update+0x3e>
   2f9b8:	2001a1b0 	.word	0x2001a1b0
   2f9bc:	200146e0 	.word	0x200146e0
   2f9c0:	000437fc 	.word	0x000437fc
   2f9c4:	00045b14 	.word	0x00045b14
   2f9c8:	2001d2ec 	.word	0x2001d2ec

0002f9cc <report_validated_job_status>:
{
   2f9cc:	b530      	push	{r4, r5, lr}
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f9ce:	4c21      	ldr	r4, [pc, #132]	; (2fa54 <report_validated_job_status+0x88>)
{
   2f9d0:	b08b      	sub	sp, #44	; 0x2c
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f9d2:	7865      	ldrb	r5, [r4, #1]
   2f9d4:	2d03      	cmp	r5, #3
   2f9d6:	d03a      	beq.n	2fa4e <report_validated_job_status+0x82>
	struct nrf_cloud_fota_job job = {
   2f9d8:	2228      	movs	r2, #40	; 0x28
   2f9da:	2100      	movs	r1, #0
   2f9dc:	4668      	mov	r0, sp
   2f9de:	f012 f8bf 	bl	41b60 <memset>
	switch (saved_job.validate) {
   2f9e2:	7822      	ldrb	r2, [r4, #0]
	struct nrf_cloud_fota_job job = {
   2f9e4:	1ca3      	adds	r3, r4, #2
	switch (saved_job.validate) {
   2f9e6:	2a03      	cmp	r2, #3
	struct nrf_cloud_fota_job job = {
   2f9e8:	f88d 5008 	strb.w	r5, [sp, #8]
   2f9ec:	9303      	str	r3, [sp, #12]
	switch (saved_job.validate) {
   2f9ee:	d01c      	beq.n	2fa2a <report_validated_job_status+0x5e>
   2f9f0:	2a04      	cmp	r2, #4
   2f9f2:	f04f 0503 	mov.w	r5, #3
   2f9f6:	d015      	beq.n	2fa24 <report_validated_job_status+0x58>
   2f9f8:	2a02      	cmp	r2, #2
   2f9fa:	d11a      	bne.n	2fa32 <report_validated_job_status+0x66>
		job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   2f9fc:	f88d 5004 	strb.w	r5, [sp, #4]
	int ret = 0;
   2fa00:	2400      	movs	r4, #0
	if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   2fa02:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2fa06:	2b03      	cmp	r3, #3
   2fa08:	d009      	beq.n	2fa1e <report_validated_job_status+0x52>
		ret = send_job_update(&job);
   2fa0a:	4668      	mov	r0, sp
   2fa0c:	f7ff ff5e 	bl	2f8cc <send_job_update>
		if (ret) {
   2fa10:	4604      	mov	r4, r0
   2fa12:	b120      	cbz	r0, 2fa1e <report_validated_job_status+0x52>
			LOG_ERR("Error sending job update: %d", ret);
   2fa14:	4602      	mov	r2, r0
   2fa16:	2145      	movs	r1, #69	; 0x45
   2fa18:	480f      	ldr	r0, [pc, #60]	; (2fa58 <report_validated_job_status+0x8c>)
   2fa1a:	f00d fbee 	bl	3d1fa <z_log_minimal_printk>
}
   2fa1e:	4620      	mov	r0, r4
   2fa20:	b00b      	add	sp, #44	; 0x2c
   2fa22:	bd30      	pop	{r4, r5, pc}
		job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   2fa24:	f88d 501c 	strb.w	r5, [sp, #28]
   2fa28:	e7e8      	b.n	2f9fc <report_validated_job_status+0x30>
		job.status = NRF_CLOUD_FOTA_FAILED;
   2fa2a:	2302      	movs	r3, #2
   2fa2c:	f88d 3004 	strb.w	r3, [sp, #4]
   2fa30:	e7e6      	b.n	2fa00 <report_validated_job_status+0x34>
		LOG_ERR("Unexpected job validation status: %d",
   2fa32:	2145      	movs	r1, #69	; 0x45
   2fa34:	4809      	ldr	r0, [pc, #36]	; (2fa5c <report_validated_job_status+0x90>)
   2fa36:	f00d fbe0 	bl	3d1fa <z_log_minimal_printk>
		ret = save_validate_status(job.info.id, job.info.type,
   2fa3a:	2205      	movs	r2, #5
   2fa3c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2fa40:	9803      	ldr	r0, [sp, #12]
   2fa42:	f7ff fe8b 	bl	2f75c <save_validate_status>
		job.info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2fa46:	f88d 5008 	strb.w	r5, [sp, #8]
		ret = save_validate_status(job.info.id, job.info.type,
   2fa4a:	4604      	mov	r4, r0
		break;
   2fa4c:	e7d9      	b.n	2fa02 <report_validated_job_status+0x36>
		return 1;
   2fa4e:	2401      	movs	r4, #1
   2fa50:	e7e5      	b.n	2fa1e <report_validated_job_status+0x52>
   2fa52:	bf00      	nop
   2fa54:	20014c47 	.word	0x20014c47
   2fa58:	0004ac29 	.word	0x0004ac29
   2fa5c:	0004abff 	.word	0x0004abff

0002fa60 <cleanup_job.constprop.0>:
static void cleanup_job(struct nrf_cloud_fota_job *const job)
   2fa60:	b510      	push	{r4, lr}
	if (job->parsed_payload) {
   2fa62:	4c06      	ldr	r4, [pc, #24]	; (2fa7c <cleanup_job.constprop.0+0x1c>)
   2fa64:	6820      	ldr	r0, [r4, #0]
   2fa66:	b108      	cbz	r0, 2fa6c <cleanup_job.constprop.0+0xc>
		cJSON_Delete(job->parsed_payload);
   2fa68:	f002 fd7c 	bl	32564 <cJSON_Delete>
	memset(job, 0, sizeof(*job));
   2fa6c:	2228      	movs	r2, #40	; 0x28
   2fa6e:	2100      	movs	r1, #0
   2fa70:	4802      	ldr	r0, [pc, #8]	; (2fa7c <cleanup_job.constprop.0+0x1c>)
   2fa72:	f012 f875 	bl	41b60 <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2fa76:	2303      	movs	r3, #3
   2fa78:	7223      	strb	r3, [r4, #8]
}
   2fa7a:	bd10      	pop	{r4, pc}
   2fa7c:	2001a1b4 	.word	0x2001a1b4

0002fa80 <http_fota_handler>:
{
   2fa80:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(evt != NULL);
   2fa82:	4605      	mov	r5, r0
   2fa84:	b950      	cbnz	r0, 2fa9c <http_fota_handler+0x1c>
   2fa86:	4941      	ldr	r1, [pc, #260]	; (2fb8c <http_fota_handler+0x10c>)
   2fa88:	4841      	ldr	r0, [pc, #260]	; (2fb90 <http_fota_handler+0x110>)
   2fa8a:	f44f 720a 	mov.w	r2, #552	; 0x228
   2fa8e:	f00d fb7a 	bl	3d186 <assert_print>
   2fa92:	f44f 710a 	mov.w	r1, #552	; 0x228
   2fa96:	483d      	ldr	r0, [pc, #244]	; (2fb8c <http_fota_handler+0x10c>)
   2fa98:	f00d fb6e 	bl	3d178 <assert_post_action>
	switch (evt->id) {
   2fa9c:	782b      	ldrb	r3, [r5, #0]
   2fa9e:	4e3d      	ldr	r6, [pc, #244]	; (2fb94 <http_fota_handler+0x114>)
   2faa0:	2b04      	cmp	r3, #4
   2faa2:	d838      	bhi.n	2fb16 <http_fota_handler+0x96>
   2faa4:	e8df f003 	tbb	[pc, r3]
   2faa8:	341f0359 	.word	0x341f0359
   2faac:	3a          	.byte	0x3a
   2faad:	00          	.byte	0x00
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2faae:	4c3a      	ldr	r4, [pc, #232]	; (2fb98 <http_fota_handler+0x118>)
		LOG_INF("Download complete");
   2fab0:	2149      	movs	r1, #73	; 0x49
   2fab2:	483a      	ldr	r0, [pc, #232]	; (2fb9c <http_fota_handler+0x11c>)
   2fab4:	f00d fba1 	bl	3d1fa <z_log_minimal_printk>
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2fab8:	7923      	ldrb	r3, [r4, #4]
   2faba:	2b07      	cmp	r3, #7
   2fabc:	d108      	bne.n	2fad0 <http_fota_handler+0x50>
   2fabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2fac0:	2b64      	cmp	r3, #100	; 0x64
   2fac2:	d005      	beq.n	2fad0 <http_fota_handler+0x50>
			current_fota.dl_progress = 100;
   2fac4:	2364      	movs	r3, #100	; 0x64
			(void)send_job_update(&current_fota);
   2fac6:	4620      	mov	r0, r4
			current_fota.sent_dl_progress = 100;
   2fac8:	e9c4 3308 	strd	r3, r3, [r4, #32]
			(void)send_job_update(&current_fota);
   2facc:	f7ff fefe 	bl	2f8cc <send_job_update>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2fad0:	2201      	movs	r2, #1
		save_validate_status(current_fota.info.id,
   2fad2:	7a21      	ldrb	r1, [r4, #8]
   2fad4:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2fad6:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2fad8:	f7ff fe40 	bl	2f75c <save_validate_status>
		ret = send_job_update(&current_fota);
   2fadc:	482e      	ldr	r0, [pc, #184]	; (2fb98 <http_fota_handler+0x118>)
   2fade:	f7ff fef5 	bl	2f8cc <send_job_update>
   2fae2:	4604      	mov	r4, r0
		break;
   2fae4:	e00d      	b.n	2fb02 <http_fota_handler+0x82>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2fae6:	2201      	movs	r2, #1
   2fae8:	4c2b      	ldr	r4, [pc, #172]	; (2fb98 <http_fota_handler+0x118>)
		save_validate_status(current_fota.info.id,
   2faea:	7a21      	ldrb	r1, [r4, #8]
   2faec:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2faee:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2faf0:	f7ff fe34 	bl	2f75c <save_validate_status>
		ret = send_job_update(&current_fota);
   2faf4:	4620      	mov	r0, r4
   2faf6:	f7ff fee9 	bl	2f8cc <send_job_update>
   2fafa:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   2fafc:	2003      	movs	r0, #3
   2fafe:	f7ff fec3 	bl	2f888 <send_event.constprop.0>
	if (ret) {
   2fb02:	b144      	cbz	r4, 2fb16 <http_fota_handler+0x96>
		LOG_ERR("Failed to send job update to cloud: %d", ret);
   2fb04:	4622      	mov	r2, r4
   2fb06:	2145      	movs	r1, #69	; 0x45
   2fb08:	4825      	ldr	r0, [pc, #148]	; (2fba0 <http_fota_handler+0x120>)
   2fb0a:	f00d fb76 	bl	3d1fa <z_log_minimal_printk>
   2fb0e:	e002      	b.n	2fb16 <http_fota_handler+0x96>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   2fb10:	2004      	movs	r0, #4
   2fb12:	f7ff feb9 	bl	2f888 <send_event.constprop.0>
	last_fota_dl_evt = evt->id;
   2fb16:	782b      	ldrb	r3, [r5, #0]
   2fb18:	7033      	strb	r3, [r6, #0]
}
   2fb1a:	bd70      	pop	{r4, r5, r6, pc}
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2fb1c:	2202      	movs	r2, #2
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2fb1e:	7831      	ldrb	r1, [r6, #0]
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2fb20:	4b1d      	ldr	r3, [pc, #116]	; (2fb98 <http_fota_handler+0x118>)
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2fb22:	2903      	cmp	r1, #3
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2fb24:	711a      	strb	r2, [r3, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2fb26:	d002      	beq.n	2fb2e <http_fota_handler+0xae>
		    evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE) {
   2fb28:	7929      	ldrb	r1, [r5, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2fb2a:	4291      	cmp	r1, r2
   2fb2c:	d110      	bne.n	2fb50 <http_fota_handler+0xd0>
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   2fb2e:	2206      	movs	r2, #6
   2fb30:	711a      	strb	r2, [r3, #4]
		save_validate_status(current_fota.info.id,
   2fb32:	2205      	movs	r2, #5
   2fb34:	7a19      	ldrb	r1, [r3, #8]
   2fb36:	68d8      	ldr	r0, [r3, #12]
   2fb38:	f7ff fe10 	bl	2f75c <save_validate_status>
		ret = send_job_update(&current_fota);
   2fb3c:	4816      	ldr	r0, [pc, #88]	; (2fb98 <http_fota_handler+0x118>)
   2fb3e:	f7ff fec5 	bl	2f8cc <send_job_update>
   2fb42:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   2fb44:	2002      	movs	r0, #2
   2fb46:	f7ff fe9f 	bl	2f888 <send_event.constprop.0>
		cleanup_job(&current_fota);
   2fb4a:	f7ff ff89 	bl	2fa60 <cleanup_job.constprop.0>
		break;
   2fb4e:	e7d8      	b.n	2fb02 <http_fota_handler+0x82>
		} else if (evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH) {
   2fb50:	2903      	cmp	r1, #3
			current_fota.error = NRF_CLOUD_FOTA_ERROR_MISMATCH;
   2fb52:	bf08      	it	eq
   2fb54:	2205      	moveq	r2, #5
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   2fb56:	771a      	strb	r2, [r3, #28]
   2fb58:	e7eb      	b.n	2fb32 <http_fota_handler+0xb2>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fb5a:	2307      	movs	r3, #7
   2fb5c:	4a0e      	ldr	r2, [pc, #56]	; (2fb98 <http_fota_handler+0x118>)
		if ((current_fota.sent_dl_progress == 100) &&
   2fb5e:	6a51      	ldr	r1, [r2, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fb60:	7113      	strb	r3, [r2, #4]
		current_fota.dl_progress = evt->progress;
   2fb62:	686b      	ldr	r3, [r5, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   2fb64:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   2fb66:	6213      	str	r3, [r2, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   2fb68:	d108      	bne.n	2fb7c <http_fota_handler+0xfc>
   2fb6a:	2b64      	cmp	r3, #100	; 0x64
   2fb6c:	d0d3      	beq.n	2fb16 <http_fota_handler+0x96>
		if (current_fota.sent_dl_progress >
   2fb6e:	2b63      	cmp	r3, #99	; 0x63
   2fb70:	dd06      	ble.n	2fb80 <http_fota_handler+0x100>
		    (((current_fota.dl_progress -
   2fb72:	6a51      	ldr	r1, [r2, #36]	; 0x24
   2fb74:	1a59      	subs	r1, r3, r1
		if (current_fota.dl_progress != 100 &&
   2fb76:	2909      	cmp	r1, #9
   2fb78:	ddcd      	ble.n	2fb16 <http_fota_handler+0x96>
   2fb7a:	e005      	b.n	2fb88 <http_fota_handler+0x108>
		if (current_fota.sent_dl_progress >
   2fb7c:	428b      	cmp	r3, r1
   2fb7e:	da01      	bge.n	2fb84 <http_fota_handler+0x104>
			current_fota.sent_dl_progress = 0;
   2fb80:	2100      	movs	r1, #0
   2fb82:	6251      	str	r1, [r2, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   2fb84:	2b64      	cmp	r3, #100	; 0x64
   2fb86:	d1f4      	bne.n	2fb72 <http_fota_handler+0xf2>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   2fb88:	6253      	str	r3, [r2, #36]	; 0x24
   2fb8a:	e7a7      	b.n	2fadc <http_fota_handler+0x5c>
   2fb8c:	0004ab39 	.word	0x0004ab39
   2fb90:	0004494f 	.word	0x0004494f
   2fb94:	20014c46 	.word	0x20014c46
   2fb98:	2001a1b4 	.word	0x2001a1b4
   2fb9c:	0004ac4b 	.word	0x0004ac4b
   2fba0:	0004ac62 	.word	0x0004ac62

0002fba4 <nrf_cloud_fota_init>:
{
   2fba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool reboot_required = false;
   2fba6:	2400      	movs	r4, #0
   2fba8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (cb == NULL) {
   2fbac:	b940      	cbnz	r0, 2fbc0 <nrf_cloud_fota_init+0x1c>
		LOG_ERR("Invalid parameter");
   2fbae:	2145      	movs	r1, #69	; 0x45
   2fbb0:	482b      	ldr	r0, [pc, #172]	; (2fc60 <nrf_cloud_fota_init+0xbc>)
   2fbb2:	f00d fb22 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   2fbb6:	f06f 0415 	mvn.w	r4, #21
}
   2fbba:	4620      	mov	r0, r4
   2fbbc:	b003      	add	sp, #12
   2fbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event_cb = cb;
   2fbc0:	4b28      	ldr	r3, [pc, #160]	; (2fc64 <nrf_cloud_fota_init+0xc0>)
	if (initialized) {
   2fbc2:	4f29      	ldr	r7, [pc, #164]	; (2fc68 <nrf_cloud_fota_init+0xc4>)
	event_cb = cb;
   2fbc4:	6018      	str	r0, [r3, #0]
	if (initialized) {
   2fbc6:	783b      	ldrb	r3, [r7, #0]
   2fbc8:	2b00      	cmp	r3, #0
   2fbca:	d1f6      	bne.n	2fbba <nrf_cloud_fota_init+0x16>
	if (!fota_dl_initialized) {
   2fbcc:	4d27      	ldr	r5, [pc, #156]	; (2fc6c <nrf_cloud_fota_init+0xc8>)
   2fbce:	782b      	ldrb	r3, [r5, #0]
   2fbd0:	b963      	cbnz	r3, 2fbec <nrf_cloud_fota_init+0x48>
		ret = fota_download_init(http_fota_handler);
   2fbd2:	4827      	ldr	r0, [pc, #156]	; (2fc70 <nrf_cloud_fota_init+0xcc>)
   2fbd4:	f001 fba6 	bl	31324 <fota_download_init>
		if (ret != 0) {
   2fbd8:	4604      	mov	r4, r0
   2fbda:	b128      	cbz	r0, 2fbe8 <nrf_cloud_fota_init+0x44>
			LOG_ERR("fota_download_init error: %d", ret);
   2fbdc:	2145      	movs	r1, #69	; 0x45
   2fbde:	4602      	mov	r2, r0
   2fbe0:	4824      	ldr	r0, [pc, #144]	; (2fc74 <nrf_cloud_fota_init+0xd0>)
		LOG_ERR("Cannot load settings: %d", ret);
   2fbe2:	f00d fb0a 	bl	3d1fa <z_log_minimal_printk>
		return ret;
   2fbe6:	e7e8      	b.n	2fbba <nrf_cloud_fota_init+0x16>
		fota_dl_initialized = true;
   2fbe8:	2301      	movs	r3, #1
   2fbea:	702b      	strb	r3, [r5, #0]
	ret = settings_load_subtree(settings_handler_fota.name);
   2fbec:	4822      	ldr	r0, [pc, #136]	; (2fc78 <nrf_cloud_fota_init+0xd4>)
   2fbee:	f7f2 fc43 	bl	22478 <settings_load_subtree>
	if (ret) {
   2fbf2:	4604      	mov	r4, r0
   2fbf4:	b118      	cbz	r0, 2fbfe <nrf_cloud_fota_init+0x5a>
		LOG_ERR("Cannot load settings: %d", ret);
   2fbf6:	4602      	mov	r2, r0
   2fbf8:	2145      	movs	r1, #69	; 0x45
   2fbfa:	4820      	ldr	r0, [pc, #128]	; (2fc7c <nrf_cloud_fota_init+0xd8>)
   2fbfc:	e7f1      	b.n	2fbe2 <nrf_cloud_fota_init+0x3e>
	ret = nrf_cloud_pending_fota_job_process(&saved_job, &reboot_required);
   2fbfe:	4e20      	ldr	r6, [pc, #128]	; (2fc80 <nrf_cloud_fota_init+0xdc>)
   2fc00:	f10d 0107 	add.w	r1, sp, #7
   2fc04:	4630      	mov	r0, r6
   2fc06:	f000 fabd 	bl	30184 <nrf_cloud_pending_fota_job_process>
	if (ret == 0) {
   2fc0a:	4605      	mov	r5, r0
   2fc0c:	b970      	cbnz	r0, 2fc2c <nrf_cloud_fota_init+0x88>
		save_validate_status(saved_job.id, saved_job.type, saved_job.validate);
   2fc0e:	7832      	ldrb	r2, [r6, #0]
   2fc10:	7871      	ldrb	r1, [r6, #1]
   2fc12:	1cb0      	adds	r0, r6, #2
   2fc14:	f7ff fda2 	bl	2f75c <save_validate_status>
		if (reboot_required) {
   2fc18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fc1c:	b1a3      	cbz	r3, 2fc48 <nrf_cloud_fota_init+0xa4>
			LOG_INF("Rebooting to complete FOTA update...");
   2fc1e:	4819      	ldr	r0, [pc, #100]	; (2fc84 <nrf_cloud_fota_init+0xe0>)
   2fc20:	2149      	movs	r1, #73	; 0x49
   2fc22:	f00d faea 	bl	3d1fa <z_log_minimal_printk>
			sys_reboot(SYS_REBOOT_COLD);
   2fc26:	2001      	movs	r0, #1
   2fc28:	f7f1 ff00 	bl	21a2c <sys_reboot>
	} else if (ret == -ENODEV) {
   2fc2c:	f110 0f13 	cmn.w	r0, #19
   2fc30:	d10c      	bne.n	2fc4c <nrf_cloud_fota_init+0xa8>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2fc32:	7875      	ldrb	r5, [r6, #1]
   2fc34:	2d01      	cmp	r5, #1
   2fc36:	d10f      	bne.n	2fc58 <nrf_cloud_fota_init+0xb4>
		     saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_FAIL ||
   2fc38:	7833      	ldrb	r3, [r6, #0]
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2fc3a:	3b02      	subs	r3, #2
   2fc3c:	2b02      	cmp	r3, #2
   2fc3e:	d80b      	bhi.n	2fc58 <nrf_cloud_fota_init+0xb4>
			LOG_INF("FOTA updated modem");
   2fc40:	2149      	movs	r1, #73	; 0x49
   2fc42:	4811      	ldr	r0, [pc, #68]	; (2fc88 <nrf_cloud_fota_init+0xe4>)
   2fc44:	f00d fad9 	bl	3d1fa <z_log_minimal_printk>
		ret = 1;
   2fc48:	2401      	movs	r4, #1
   2fc4a:	e005      	b.n	2fc58 <nrf_cloud_fota_init+0xb4>
		LOG_ERR("Failed to process pending FOTA job, error: %d", ret);
   2fc4c:	4602      	mov	r2, r0
   2fc4e:	2145      	movs	r1, #69	; 0x45
   2fc50:	480e      	ldr	r0, [pc, #56]	; (2fc8c <nrf_cloud_fota_init+0xe8>)
   2fc52:	f00d fad2 	bl	3d1fa <z_log_minimal_printk>
   2fc56:	462c      	mov	r4, r5
	initialized = true;
   2fc58:	2301      	movs	r3, #1
   2fc5a:	703b      	strb	r3, [r7, #0]
	return ret;
   2fc5c:	e7ad      	b.n	2fbba <nrf_cloud_fota_init+0x16>
   2fc5e:	bf00      	nop
   2fc60:	0004ac8e 	.word	0x0004ac8e
   2fc64:	2001a1dc 	.word	0x2001a1dc
   2fc68:	2001d2eb 	.word	0x2001d2eb
   2fc6c:	2001d2ea 	.word	0x2001d2ea
   2fc70:	0002fa81 	.word	0x0002fa81
   2fc74:	0004aca5 	.word	0x0004aca5
   2fc78:	0004acc7 	.word	0x0004acc7
   2fc7c:	0004906b 	.word	0x0004906b
   2fc80:	20014c47 	.word	0x20014c47
   2fc84:	0004acd6 	.word	0x0004acd6
   2fc88:	0004ad00 	.word	0x0004ad00
   2fc8c:	0004ad18 	.word	0x0004ad18

0002fc90 <nrf_cloud_fota_endpoint_set>:
{
   2fc90:	b570      	push	{r4, r5, r6, lr}
   2fc92:	460e      	mov	r6, r1
   2fc94:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   2fc96:	b328      	cbz	r0, 2fce4 <nrf_cloud_fota_endpoint_set+0x54>
   2fc98:	b322      	cbz	r2, 2fce4 <nrf_cloud_fota_endpoint_set+0x54>
   2fc9a:	6813      	ldr	r3, [r2, #0]
   2fc9c:	b313      	cbz	r3, 2fce4 <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   2fc9e:	6853      	ldr	r3, [r2, #4]
   2fca0:	b303      	cbz	r3, 2fce4 <nrf_cloud_fota_endpoint_set+0x54>
   2fca2:	b1f9      	cbz	r1, 2fce4 <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   2fca4:	4b11      	ldr	r3, [pc, #68]	; (2fcec <nrf_cloud_fota_endpoint_set+0x5c>)
   2fca6:	6018      	str	r0, [r3, #0]
	reset_topics();
   2fca8:	f7ff fda6 	bl	2f7f8 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   2fcac:	4629      	mov	r1, r5
   2fcae:	4630      	mov	r0, r6
   2fcb0:	4b0f      	ldr	r3, [pc, #60]	; (2fcf0 <nrf_cloud_fota_endpoint_set+0x60>)
   2fcb2:	4a10      	ldr	r2, [pc, #64]	; (2fcf4 <nrf_cloud_fota_endpoint_set+0x64>)
   2fcb4:	f7ff fdb2 	bl	2f81c <build_topic>
	if (ret) {
   2fcb8:	4604      	mov	r4, r0
   2fcba:	b978      	cbnz	r0, 2fcdc <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   2fcbc:	4629      	mov	r1, r5
   2fcbe:	4630      	mov	r0, r6
   2fcc0:	4b0d      	ldr	r3, [pc, #52]	; (2fcf8 <nrf_cloud_fota_endpoint_set+0x68>)
   2fcc2:	4a0e      	ldr	r2, [pc, #56]	; (2fcfc <nrf_cloud_fota_endpoint_set+0x6c>)
   2fcc4:	f7ff fdaa 	bl	2f81c <build_topic>
	if (ret) {
   2fcc8:	4604      	mov	r4, r0
   2fcca:	b938      	cbnz	r0, 2fcdc <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   2fccc:	4629      	mov	r1, r5
   2fcce:	4630      	mov	r0, r6
   2fcd0:	4b0b      	ldr	r3, [pc, #44]	; (2fd00 <nrf_cloud_fota_endpoint_set+0x70>)
   2fcd2:	4a0c      	ldr	r2, [pc, #48]	; (2fd04 <nrf_cloud_fota_endpoint_set+0x74>)
   2fcd4:	f7ff fda2 	bl	2f81c <build_topic>
	if (ret) {
   2fcd8:	4604      	mov	r4, r0
   2fcda:	b108      	cbz	r0, 2fce0 <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   2fcdc:	f7ff fd8c 	bl	2f7f8 <reset_topics>
}
   2fce0:	4620      	mov	r0, r4
   2fce2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2fce4:	f06f 0415 	mvn.w	r4, #21
   2fce8:	e7fa      	b.n	2fce0 <nrf_cloud_fota_endpoint_set+0x50>
   2fcea:	bf00      	nop
   2fcec:	2001a1b0 	.word	0x2001a1b0
   2fcf0:	200146c8 	.word	0x200146c8
   2fcf4:	0004ad4b 	.word	0x0004ad4b
   2fcf8:	200146e0 	.word	0x200146e0
   2fcfc:	0004ad55 	.word	0x0004ad55
   2fd00:	200146d4 	.word	0x200146d4
   2fd04:	0004ad62 	.word	0x0004ad62

0002fd08 <nrf_cloud_fota_endpoint_set_and_report>:
{
   2fd08:	b510      	push	{r4, lr}
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   2fd0a:	f7ff ffc1 	bl	2fc90 <nrf_cloud_fota_endpoint_set>
	if (ret) {
   2fd0e:	4604      	mov	r4, r0
   2fd10:	b130      	cbz	r0, 2fd20 <nrf_cloud_fota_endpoint_set_and_report+0x18>
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   2fd12:	4602      	mov	r2, r0
   2fd14:	2145      	movs	r1, #69	; 0x45
   2fd16:	4805      	ldr	r0, [pc, #20]	; (2fd2c <nrf_cloud_fota_endpoint_set_and_report+0x24>)
   2fd18:	f00d fa6f 	bl	3d1fa <z_log_minimal_printk>
}
   2fd1c:	4620      	mov	r0, r4
   2fd1e:	bd10      	pop	{r4, pc}
	ret = report_validated_job_status();
   2fd20:	f7ff fe54 	bl	2f9cc <report_validated_job_status>
	if (ret > 0) {
   2fd24:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2fd28:	e7f8      	b.n	2fd1c <nrf_cloud_fota_endpoint_set_and_report+0x14>
   2fd2a:	bf00      	nop
   2fd2c:	0004ad6c 	.word	0x0004ad6c

0002fd30 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   2fd30:	2200      	movs	r2, #0
   2fd32:	4b02      	ldr	r3, [pc, #8]	; (2fd3c <nrf_cloud_fota_endpoint_clear+0xc>)
   2fd34:	601a      	str	r2, [r3, #0]
	reset_topics();
   2fd36:	f7ff bd5f 	b.w	2f7f8 <reset_topics>
   2fd3a:	bf00      	nop
   2fd3c:	2001a1b0 	.word	0x2001a1b0

0002fd40 <nrf_cloud_fota_subscribe>:
{
   2fd40:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2fd42:	466b      	mov	r3, sp
   2fd44:	4a0a      	ldr	r2, [pc, #40]	; (2fd70 <nrf_cloud_fota_subscribe+0x30>)
   2fd46:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2fd4a:	4a0a      	ldr	r2, [pc, #40]	; (2fd74 <nrf_cloud_fota_subscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2fd4c:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2fd50:	6851      	ldr	r1, [r2, #4]
   2fd52:	b149      	cbz	r1, 2fd68 <nrf_cloud_fota_subscribe+0x28>
   2fd54:	6812      	ldr	r2, [r2, #0]
   2fd56:	b13a      	cbz	r2, 2fd68 <nrf_cloud_fota_subscribe+0x28>
	return mqtt_subscribe(client_mqtt, &sub_list);
   2fd58:	4619      	mov	r1, r3
   2fd5a:	4b07      	ldr	r3, [pc, #28]	; (2fd78 <nrf_cloud_fota_subscribe+0x38>)
   2fd5c:	6818      	ldr	r0, [r3, #0]
   2fd5e:	f00e fea7 	bl	3eab0 <mqtt_subscribe>
}
   2fd62:	b003      	add	sp, #12
   2fd64:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2fd68:	f06f 000d 	mvn.w	r0, #13
   2fd6c:	e7f9      	b.n	2fd62 <nrf_cloud_fota_subscribe+0x22>
   2fd6e:	bf00      	nop
   2fd70:	00042f5c 	.word	0x00042f5c
   2fd74:	200146c8 	.word	0x200146c8
   2fd78:	2001a1b0 	.word	0x2001a1b0

0002fd7c <nrf_cloud_fota_unsubscribe>:
{
   2fd7c:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2fd7e:	466b      	mov	r3, sp
   2fd80:	4a0a      	ldr	r2, [pc, #40]	; (2fdac <nrf_cloud_fota_unsubscribe+0x30>)
   2fd82:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2fd86:	4a0a      	ldr	r2, [pc, #40]	; (2fdb0 <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2fd88:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2fd8c:	6851      	ldr	r1, [r2, #4]
   2fd8e:	b149      	cbz	r1, 2fda4 <nrf_cloud_fota_unsubscribe+0x28>
   2fd90:	6812      	ldr	r2, [r2, #0]
   2fd92:	b13a      	cbz	r2, 2fda4 <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   2fd94:	4619      	mov	r1, r3
   2fd96:	4b07      	ldr	r3, [pc, #28]	; (2fdb4 <nrf_cloud_fota_unsubscribe+0x38>)
   2fd98:	6818      	ldr	r0, [r3, #0]
   2fd9a:	f00e feaf 	bl	3eafc <mqtt_unsubscribe>
}
   2fd9e:	b003      	add	sp, #12
   2fda0:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2fda4:	f06f 000d 	mvn.w	r0, #13
   2fda8:	e7f9      	b.n	2fd9e <nrf_cloud_fota_unsubscribe+0x22>
   2fdaa:	bf00      	nop
   2fdac:	00042f64 	.word	0x00042f64
   2fdb0:	200146c8 	.word	0x200146c8
   2fdb4:	2001a1b0 	.word	0x2001a1b0

0002fdb8 <nrf_cloud_fota_uninit>:
	return current_fota.parsed_payload != NULL;
   2fdb8:	4b09      	ldr	r3, [pc, #36]	; (2fde0 <nrf_cloud_fota_uninit+0x28>)
{
   2fdba:	b510      	push	{r4, lr}
	if (nrf_cloud_fota_is_active()) {
   2fdbc:	681c      	ldr	r4, [r3, #0]
   2fdbe:	b95c      	cbnz	r4, 2fdd8 <nrf_cloud_fota_uninit+0x20>
	event_cb = NULL;
   2fdc0:	4b08      	ldr	r3, [pc, #32]	; (2fde4 <nrf_cloud_fota_uninit+0x2c>)
   2fdc2:	601c      	str	r4, [r3, #0]
	initialized = false;
   2fdc4:	4b08      	ldr	r3, [pc, #32]	; (2fde8 <nrf_cloud_fota_uninit+0x30>)
   2fdc6:	701c      	strb	r4, [r3, #0]
	(void)nrf_cloud_fota_unsubscribe();
   2fdc8:	f7ff ffd8 	bl	2fd7c <nrf_cloud_fota_unsubscribe>
	reset_topics();
   2fdcc:	f7ff fd14 	bl	2f7f8 <reset_topics>
	cleanup_job(&current_fota);
   2fdd0:	f7ff fe46 	bl	2fa60 <cleanup_job.constprop.0>
	return 0;
   2fdd4:	4620      	mov	r0, r4
}
   2fdd6:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2fdd8:	f06f 000f 	mvn.w	r0, #15
   2fddc:	e7fb      	b.n	2fdd6 <nrf_cloud_fota_uninit+0x1e>
   2fdde:	bf00      	nop
   2fde0:	2001a1b4 	.word	0x2001a1b4
   2fde4:	2001a1dc 	.word	0x2001a1dc
   2fde8:	2001d2eb 	.word	0x2001d2eb

0002fdec <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   2fdec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   2fdee:	4b0e      	ldr	r3, [pc, #56]	; (2fe28 <nrf_cloud_fota_update_check+0x3c>)
   2fdf0:	681b      	ldr	r3, [r3, #0]
   2fdf2:	b193      	cbz	r3, 2fe1a <nrf_cloud_fota_update_check+0x2e>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   2fdf4:	4a0d      	ldr	r2, [pc, #52]	; (2fe2c <nrf_cloud_fota_update_check+0x40>)
   2fdf6:	6813      	ldr	r3, [r2, #0]
   2fdf8:	b193      	cbz	r3, 2fe20 <nrf_cloud_fota_update_check+0x34>
		.message_id = NCT_MSG_ID_FOTA_REQUEST,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   2fdfa:	ca07      	ldmia	r2, {r0, r1, r2}
   2fdfc:	466b      	mov	r3, sp
   2fdfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2fe02:	4a0b      	ldr	r2, [pc, #44]	; (2fe30 <nrf_cloud_fota_update_check+0x44>)
	struct mqtt_publish_param param = {
   2fe04:	2104      	movs	r1, #4
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2fe06:	9203      	str	r2, [sp, #12]
	struct mqtt_publish_param param = {
   2fe08:	22c9      	movs	r2, #201	; 0xc9
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   2fe0a:	4618      	mov	r0, r3
	struct mqtt_publish_param param = {
   2fe0c:	e9cd 1204 	strd	r1, r2, [sp, #16]
	return publish(&param);
   2fe10:	f7ff fc90 	bl	2f734 <publish>
}
   2fe14:	b007      	add	sp, #28
   2fe16:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   2fe1a:	f06f 0005 	mvn.w	r0, #5
   2fe1e:	e7f9      	b.n	2fe14 <nrf_cloud_fota_update_check+0x28>
		return -EHOSTUNREACH;
   2fe20:	f06f 0075 	mvn.w	r0, #117	; 0x75
   2fe24:	e7f6      	b.n	2fe14 <nrf_cloud_fota_update_check+0x28>
   2fe26:	bf00      	nop
   2fe28:	2001a1b0 	.word	0x2001a1b0
   2fe2c:	200146d4 	.word	0x200146d4
   2fe30:	0004ad91 	.word	0x0004ad91

0002fe34 <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   2fe34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2fe38:	4ba4      	ldr	r3, [pc, #656]	; (300cc <CONFIG_FLASH_LOAD_SIZE+0xcc>)
{
   2fe3a:	4606      	mov	r6, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2fe3c:	6818      	ldr	r0, [r3, #0]
{
   2fe3e:	b085      	sub	sp, #20
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2fe40:	2800      	cmp	r0, #0
   2fe42:	f000 8141 	beq.w	300c8 <CONFIG_FLASH_LOAD_SIZE+0xc8>
   2fe46:	685b      	ldr	r3, [r3, #4]
   2fe48:	2b00      	cmp	r3, #0
   2fe4a:	f000 813d 	beq.w	300c8 <CONFIG_FLASH_LOAD_SIZE+0xc8>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   2fe4e:	f896 9000 	ldrb.w	r9, [r6]
   2fe52:	f1b9 0f09 	cmp.w	r9, #9
   2fe56:	f200 80e4 	bhi.w	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
   2fe5a:	e8df f019 	tbh	[pc, r9, lsl #1]
   2fe5e:	0135      	.short	0x0135
   2fe60:	000a0135 	.word	0x000a0135
   2fe64:	01350114 	.word	0x01350114
   2fe68:	01350135 	.word	0x01350135
   2fe6c:	010f0109 	.word	0x010f0109
   2fe70:	0135      	.short	0x0135
	struct mqtt_puback_param ack = {
   2fe72:	8b33      	ldrh	r3, [r6, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2fe74:	6871      	ldr	r1, [r6, #4]
	struct mqtt_puback_param ack = {
   2fe76:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2fe7a:	f012 f88b 	bl	41f94 <strstr>
   2fe7e:	2800      	cmp	r0, #0
   2fe80:	f000 8122 	beq.w	300c8 <CONFIG_FLASH_LOAD_SIZE+0xc8>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   2fe84:	2101      	movs	r1, #1
   2fe86:	6970      	ldr	r0, [r6, #20]
   2fe88:	4408      	add	r0, r1
   2fe8a:	f011 fdc3 	bl	41a14 <k_calloc>
	if (!payload) {
   2fe8e:	4680      	mov	r8, r0
   2fe90:	bb38      	cbnz	r0, 2fee2 <nrf_cloud_fota_mqtt_evt_handler+0xae>
		LOG_ERR("Unable to allocate memory for job");
   2fe92:	2145      	movs	r1, #69	; 0x45
   2fe94:	488e      	ldr	r0, [pc, #568]	; (300d0 <CONFIG_FLASH_LOAD_SIZE+0xd0>)
   2fe96:	f00d f9b0 	bl	3d1fa <z_log_minimal_printk>
	bool skip = false;
   2fe9a:	4647      	mov	r7, r8
		ret = -ENOMEM;
   2fe9c:	f06f 040b 	mvn.w	r4, #11
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2fea0:	7b33      	ldrb	r3, [r6, #12]
   2fea2:	b173      	cbz	r3, 2fec2 <nrf_cloud_fota_mqtt_evt_handler+0x8e>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   2fea4:	4b8b      	ldr	r3, [pc, #556]	; (300d4 <CONFIG_FLASH_LOAD_SIZE+0xd4>)
   2fea6:	a903      	add	r1, sp, #12
   2fea8:	6818      	ldr	r0, [r3, #0]
   2feaa:	f00e fdb3 	bl	3ea14 <mqtt_publish_qos1_ack>
		if (ack_res) {
   2feae:	4605      	mov	r5, r0
   2feb0:	b138      	cbz	r0, 2fec2 <nrf_cloud_fota_mqtt_evt_handler+0x8e>
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   2feb2:	4602      	mov	r2, r0
   2feb4:	2145      	movs	r1, #69	; 0x45
   2feb6:	4888      	ldr	r0, [pc, #544]	; (300d8 <CONFIG_FLASH_LOAD_SIZE+0xd8>)
   2feb8:	f00d f99f 	bl	3d1fa <z_log_minimal_printk>
			if (!ret) {
   2febc:	2c00      	cmp	r4, #0
   2febe:	bf08      	it	eq
   2fec0:	462c      	moveq	r4, r5
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2fec2:	b927      	cbnz	r7, 2fece <nrf_cloud_fota_mqtt_evt_handler+0x9a>
   2fec4:	4d85      	ldr	r5, [pc, #532]	; (300dc <CONFIG_FLASH_LOAD_SIZE+0xdc>)
   2fec6:	7a2a      	ldrb	r2, [r5, #8]
   2fec8:	2a03      	cmp	r2, #3
   2feca:	f040 8095 	bne.w	2fff8 <nrf_cloud_fota_mqtt_evt_handler+0x1c4>
		if (payload_array) {
   2fece:	f1b8 0f00 	cmp.w	r8, #0
   2fed2:	d002      	beq.n	2feda <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cJSON_Delete(payload_array);
   2fed4:	4640      	mov	r0, r8
   2fed6:	f002 fb45 	bl	32564 <cJSON_Delete>
		return 1;
	break;
	}

	return 0;
}
   2feda:	4620      	mov	r0, r4
   2fedc:	b005      	add	sp, #20
   2fede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   2fee2:	4b7c      	ldr	r3, [pc, #496]	; (300d4 <CONFIG_FLASH_LOAD_SIZE+0xd4>)
   2fee4:	4601      	mov	r1, r0
   2fee6:	6972      	ldr	r2, [r6, #20]
   2fee8:	6818      	ldr	r0, [r3, #0]
   2feea:	f00e feb9 	bl	3ec60 <mqtt_readall_publish_payload>
	if (ret) {
   2feee:	4604      	mov	r4, r0
   2fef0:	b138      	cbz	r0, 2ff02 <nrf_cloud_fota_mqtt_evt_handler+0xce>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   2fef2:	4602      	mov	r2, r0
   2fef4:	2145      	movs	r1, #69	; 0x45
   2fef6:	487a      	ldr	r0, [pc, #488]	; (300e0 <CONFIG_FLASH_LOAD_SIZE+0xe0>)
   2fef8:	f00d f97f 	bl	3d1fa <z_log_minimal_printk>
		cJSON_Delete(array);
   2fefc:	2500      	movs	r5, #0
	bool skip = false;
   2fefe:	462f      	mov	r7, r5
   2ff00:	e06a      	b.n	2ffd8 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	return current_fota.parsed_payload != NULL;
   2ff02:	4f76      	ldr	r7, [pc, #472]	; (300dc <CONFIG_FLASH_LOAD_SIZE+0xdc>)
   2ff04:	683b      	ldr	r3, [r7, #0]
	if (nrf_cloud_fota_is_active() && !ble_id) {
   2ff06:	b133      	cbz	r3, 2ff16 <nrf_cloud_fota_mqtt_evt_handler+0xe2>
		LOG_INF("Job in progress... skipping");
   2ff08:	2149      	movs	r1, #73	; 0x49
   2ff0a:	4876      	ldr	r0, [pc, #472]	; (300e4 <CONFIG_FLASH_LOAD_SIZE+0xe4>)
   2ff0c:	f00d f975 	bl	3d1fa <z_log_minimal_printk>
	cJSON *payload_array = NULL;
   2ff10:	4625      	mov	r5, r4
		skip = true;
   2ff12:	2701      	movs	r7, #1
   2ff14:	e060      	b.n	2ffd8 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	cJSON *array = cJSON_Parse(payload_in);
   2ff16:	4640      	mov	r0, r8
   2ff18:	f010 f9a5 	bl	40266 <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   2ff1c:	4605      	mov	r5, r0
   2ff1e:	b990      	cbnz	r0, 2ff46 <nrf_cloud_fota_mqtt_evt_handler+0x112>
		LOG_ERR("Invalid JSON array");
   2ff20:	2145      	movs	r1, #69	; 0x45
   2ff22:	4871      	ldr	r0, [pc, #452]	; (300e8 <CONFIG_FLASH_LOAD_SIZE+0xe8>)
   2ff24:	f00d f969 	bl	3d1fa <z_log_minimal_printk>
		err = -EINVAL;
   2ff28:	f06f 0415 	mvn.w	r4, #21
	memset(job_info, 0, sizeof(*job_info));
   2ff2c:	2214      	movs	r2, #20
   2ff2e:	2100      	movs	r1, #0
   2ff30:	486e      	ldr	r0, [pc, #440]	; (300ec <CONFIG_FLASH_LOAD_SIZE+0xec>)
   2ff32:	f011 fe15 	bl	41b60 <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2ff36:	2303      	movs	r3, #3
   2ff38:	723b      	strb	r3, [r7, #8]
	if (array) {
   2ff3a:	2d00      	cmp	r5, #0
   2ff3c:	d0df      	beq.n	2fefe <nrf_cloud_fota_mqtt_evt_handler+0xca>
		cJSON_Delete(array);
   2ff3e:	4628      	mov	r0, r5
   2ff40:	f002 fb10 	bl	32564 <cJSON_Delete>
   2ff44:	e7da      	b.n	2fefc <nrf_cloud_fota_mqtt_evt_handler+0xc8>
	if (!array || !cJSON_IsArray(array)) {
   2ff46:	f010 fabe 	bl	404c6 <cJSON_IsArray>
   2ff4a:	2800      	cmp	r0, #0
   2ff4c:	d0e8      	beq.n	2ff20 <nrf_cloud_fota_mqtt_evt_handler+0xec>
	temp = cJSON_PrintUnformatted(array);
   2ff4e:	4628      	mov	r0, r5
   2ff50:	f010 f98d 	bl	4026e <cJSON_PrintUnformatted>
	if (temp) {
   2ff54:	b108      	cbz	r0, 2ff5a <nrf_cloud_fota_mqtt_evt_handler+0x126>
		cJSON_FreeString(temp);
   2ff56:	f010 fac1 	bl	404dc <cJSON_FreeString>
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   2ff5a:	2100      	movs	r1, #0
   2ff5c:	4628      	mov	r0, r5
   2ff5e:	4a64      	ldr	r2, [pc, #400]	; (300f0 <CONFIG_FLASH_LOAD_SIZE+0xf0>)
   2ff60:	f7fb f9e0 	bl	2b324 <get_string_from_array>
   2ff64:	b130      	cbz	r0, 2ff74 <nrf_cloud_fota_mqtt_evt_handler+0x140>
		LOG_ERR("Error parsing job info");
   2ff66:	2145      	movs	r1, #69	; 0x45
   2ff68:	4862      	ldr	r0, [pc, #392]	; (300f4 <CONFIG_FLASH_LOAD_SIZE+0xf4>)
   2ff6a:	f00d f946 	bl	3d1fa <z_log_minimal_printk>
	int err = -ENOMSG;
   2ff6e:	f06f 0422 	mvn.w	r4, #34	; 0x22
		goto cleanup;
   2ff72:	e7db      	b.n	2ff2c <nrf_cloud_fota_mqtt_evt_handler+0xf8>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   2ff74:	2103      	movs	r1, #3
   2ff76:	4628      	mov	r0, r5
   2ff78:	4a5f      	ldr	r2, [pc, #380]	; (300f8 <CONFIG_FLASH_LOAD_SIZE+0xf8>)
   2ff7a:	f7fb f9d3 	bl	2b324 <get_string_from_array>
				  &job_info->id) ||
   2ff7e:	2800      	cmp	r0, #0
   2ff80:	d1f1      	bne.n	2ff66 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   2ff82:	2104      	movs	r1, #4
   2ff84:	4628      	mov	r0, r5
   2ff86:	4a5d      	ldr	r2, [pc, #372]	; (300fc <CONFIG_FLASH_LOAD_SIZE+0xfc>)
   2ff88:	f7fb f9cc 	bl	2b324 <get_string_from_array>
				  &job_info->host) ||
   2ff8c:	2800      	cmp	r0, #0
   2ff8e:	d1ea      	bne.n	2ff66 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FW_TYPE - offset,
   2ff90:	2101      	movs	r1, #1
   2ff92:	4628      	mov	r0, r5
   2ff94:	4a55      	ldr	r2, [pc, #340]	; (300ec <CONFIG_FLASH_LOAD_SIZE+0xec>)
   2ff96:	f00f ffa6 	bl	3fee6 <get_number_from_array>
				  &job_info->path) ||
   2ff9a:	2800      	cmp	r0, #0
   2ff9c:	d1e3      	bne.n	2ff66 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FILE_SIZE - offset,
   2ff9e:	2102      	movs	r1, #2
   2ffa0:	4628      	mov	r0, r5
   2ffa2:	4a57      	ldr	r2, [pc, #348]	; (30100 <CONFIG_FLASH_LOAD_SIZE+0x100>)
   2ffa4:	f00f ff9f 	bl	3fee6 <get_number_from_array>
				  (int *)&job_info->type) ||
   2ffa8:	4604      	mov	r4, r0
   2ffaa:	2800      	cmp	r0, #0
   2ffac:	d1db      	bne.n	2ff66 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	job_id_len = strlen(job_info->id);
   2ffae:	68f8      	ldr	r0, [r7, #12]
   2ffb0:	f7ed f947 	bl	1d242 <strlen>
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2ffb4:	2824      	cmp	r0, #36	; 0x24
	job_id_len = strlen(job_info->id);
   2ffb6:	4602      	mov	r2, r0
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2ffb8:	d905      	bls.n	2ffc6 <nrf_cloud_fota_mqtt_evt_handler+0x192>
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   2ffba:	2324      	movs	r3, #36	; 0x24
   2ffbc:	2145      	movs	r1, #69	; 0x45
   2ffbe:	4851      	ldr	r0, [pc, #324]	; (30104 <CONFIG_FLASH_LOAD_SIZE+0x104>)
   2ffc0:	f00d f91b 	bl	3d1fa <z_log_minimal_printk>
		goto cleanup;
   2ffc4:	e7d3      	b.n	2ff6e <nrf_cloud_fota_mqtt_evt_handler+0x13a>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   2ffc6:	7a3a      	ldrb	r2, [r7, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   2ffc8:	2a02      	cmp	r2, #2
   2ffca:	d80a      	bhi.n	2ffe2 <nrf_cloud_fota_mqtt_evt_handler+0x1ae>
	if (ret == 0 && strcmp(last_job, job_info->id) == 0) {
   2ffcc:	68f9      	ldr	r1, [r7, #12]
   2ffce:	484e      	ldr	r0, [pc, #312]	; (30108 <CONFIG_FLASH_LOAD_SIZE+0x108>)
   2ffd0:	f7ed f92d 	bl	1d22e <strcmp>
   2ffd4:	b150      	cbz	r0, 2ffec <nrf_cloud_fota_mqtt_evt_handler+0x1b8>
	bool skip = false;
   2ffd6:	4627      	mov	r7, r4
		nrf_cloud_free(payload);
   2ffd8:	4640      	mov	r0, r8
   2ffda:	f011 fd10 	bl	419fe <k_free>
   2ffde:	46a8      	mov	r8, r5
   2ffe0:	e75e      	b.n	2fea0 <nrf_cloud_fota_mqtt_evt_handler+0x6c>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   2ffe2:	2145      	movs	r1, #69	; 0x45
   2ffe4:	4849      	ldr	r0, [pc, #292]	; (3010c <CONFIG_FLASH_LOAD_SIZE+0x10c>)
   2ffe6:	f00d f908 	bl	3d1fa <z_log_minimal_printk>
   2ffea:	e7c0      	b.n	2ff6e <nrf_cloud_fota_mqtt_evt_handler+0x13a>
		LOG_INF("Job %s already completed... skipping",
   2ffec:	2149      	movs	r1, #73	; 0x49
   2ffee:	4a46      	ldr	r2, [pc, #280]	; (30108 <CONFIG_FLASH_LOAD_SIZE+0x108>)
   2fff0:	4847      	ldr	r0, [pc, #284]	; (30110 <CONFIG_FLASH_LOAD_SIZE+0x110>)
   2fff2:	f00d f902 	bl	3d1fa <z_log_minimal_printk>
   2fff6:	e78c      	b.n	2ff12 <nrf_cloud_fota_mqtt_evt_handler+0xde>
	switch (job->info.type) {
   2fff8:	2a01      	cmp	r2, #1
		current_fota.parsed_payload = payload_array;
   2fffa:	f8c5 8000 	str.w	r8, [r5]
	switch (job->info.type) {
   2fffe:	d014      	beq.n	3002a <CONFIG_FLASH_LOAD_SIZE+0x2a>
   30000:	f012 0ffd 	tst.w	r2, #253	; 0xfd
   30004:	d00f      	beq.n	30026 <CONFIG_FLASH_LOAD_SIZE+0x26>
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   30006:	2145      	movs	r1, #69	; 0x45
   30008:	4842      	ldr	r0, [pc, #264]	; (30114 <CONFIG_FLASH_LOAD_SIZE+0x114>)
   3000a:	f00d f8f6 	bl	3d1fa <z_log_minimal_printk>
		return -EFTYPE;
   3000e:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		(void)send_job_update(&current_fota);
   30012:	4832      	ldr	r0, [pc, #200]	; (300dc <CONFIG_FLASH_LOAD_SIZE+0xdc>)
   30014:	f7ff fc5a 	bl	2f8cc <send_job_update>
		if (ret) {
   30018:	2c00      	cmp	r4, #0
   3001a:	f43f af5e 	beq.w	2feda <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cleanup_job(&current_fota);
   3001e:	f7ff fd1f 	bl	2fa60 <cleanup_job.constprop.0>
   30022:	2400      	movs	r4, #0
   30024:	e759      	b.n	2feda <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		img_type = DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   30026:	f04f 0901 	mov.w	r9, #1
	ret = fota_download_start_with_image_type(job->info.host,
   3002a:	f240 63a4 	movw	r3, #1700	; 0x6a4
   3002e:	f8cd 9004 	str.w	r9, [sp, #4]
   30032:	9300      	str	r3, [sp, #0]
   30034:	4a38      	ldr	r2, [pc, #224]	; (30118 <CONFIG_FLASH_LOAD_SIZE+0x118>)
   30036:	2300      	movs	r3, #0
   30038:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   3003c:	f001 f90c 	bl	31258 <fota_download_start_with_image_type>
	if (ret) {
   30040:	4604      	mov	r4, r0
   30042:	b158      	cbz	r0, 3005c <CONFIG_FLASH_LOAD_SIZE+0x5c>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   30044:	4602      	mov	r2, r0
   30046:	2145      	movs	r1, #69	; 0x45
   30048:	4834      	ldr	r0, [pc, #208]	; (3011c <CONFIG_FLASH_LOAD_SIZE+0x11c>)
   3004a:	f00d f8d6 	bl	3d1fa <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_FAILED;
   3004e:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   30050:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   30052:	7128      	strb	r0, [r5, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   30054:	772b      	strb	r3, [r5, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   30056:	f7ff fc17 	bl	2f888 <send_event.constprop.0>
   3005a:	e7da      	b.n	30012 <CONFIG_FLASH_LOAD_SIZE+0x12>
		LOG_INF("Downloading update");
   3005c:	4830      	ldr	r0, [pc, #192]	; (30120 <CONFIG_FLASH_LOAD_SIZE+0x120>)
   3005e:	2149      	movs	r1, #73	; 0x49
   30060:	f00d f8cb 	bl	3d1fa <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   30064:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   30066:	4620      	mov	r0, r4
		job->sent_dl_progress = 0;
   30068:	e9c5 4408 	strd	r4, r4, [r5, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   3006c:	712b      	strb	r3, [r5, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   3006e:	e7f2      	b.n	30056 <CONFIG_FLASH_LOAD_SIZE+0x56>
		if (evt->param.suback.message_id != NCT_MSG_ID_FOTA_SUB) {
   30070:	88b3      	ldrh	r3, [r6, #4]
   30072:	2b67      	cmp	r3, #103	; 0x67
   30074:	d128      	bne.n	300c8 <CONFIG_FLASH_LOAD_SIZE+0xc8>
		nrf_cloud_fota_update_check();
   30076:	f7ff feb9 	bl	2fdec <nrf_cloud_fota_update_check>
		break;
   3007a:	e7d2      	b.n	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
		if (evt->param.unsuback.message_id != NCT_MSG_ID_FOTA_UNSUB) {
   3007c:	88b4      	ldrh	r4, [r6, #4]
   3007e:	3c99      	subs	r4, #153	; 0x99
   30080:	bf18      	it	ne
   30082:	2401      	movne	r4, #1
   30084:	e729      	b.n	2feda <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (evt->param.puback.message_id) {
   30086:	88b4      	ldrh	r4, [r6, #4]
   30088:	f5b4 7f97 	cmp.w	r4, #302	; 0x12e
   3008c:	d00c      	beq.n	300a8 <CONFIG_FLASH_LOAD_SIZE+0xa8>
   3008e:	d805      	bhi.n	3009c <CONFIG_FLASH_LOAD_SIZE+0x9c>
		return 1;
   30090:	3cc9      	subs	r4, #201	; 0xc9
   30092:	2c01      	cmp	r4, #1
   30094:	bf94      	ite	ls
   30096:	2400      	movls	r4, #0
   30098:	2401      	movhi	r4, #1
   3009a:	e71e      	b.n	2feda <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   3009c:	f240 102f 	movw	r0, #303	; 0x12f
   300a0:	1a24      	subs	r4, r4, r0
   300a2:	bf18      	it	ne
   300a4:	2401      	movne	r4, #1
   300a6:	e718      	b.n	2feda <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (saved_job.validate) {
   300a8:	4b1e      	ldr	r3, [pc, #120]	; (30124 <CONFIG_FLASH_LOAD_SIZE+0x124>)
   300aa:	7818      	ldrb	r0, [r3, #0]
   300ac:	2801      	cmp	r0, #1
   300ae:	d008      	beq.n	300c2 <CONFIG_FLASH_LOAD_SIZE+0xc2>
   300b0:	3802      	subs	r0, #2
   300b2:	2802      	cmp	r0, #2
   300b4:	d8b5      	bhi.n	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
			save_validate_status(saved_job.id, saved_job.type,
   300b6:	2205      	movs	r2, #5
   300b8:	7859      	ldrb	r1, [r3, #1]
   300ba:	1c98      	adds	r0, r3, #2
   300bc:	f7ff fb4e 	bl	2f75c <save_validate_status>
			break;
   300c0:	e7af      	b.n	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   300c2:	f7ff fbe1 	bl	2f888 <send_event.constprop.0>
			break;
   300c6:	e7ac      	b.n	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
		return 1;
   300c8:	2401      	movs	r4, #1
   300ca:	e706      	b.n	2feda <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   300cc:	200146c8 	.word	0x200146c8
   300d0:	0004ad96 	.word	0x0004ad96
   300d4:	2001a1b0 	.word	0x2001a1b0
   300d8:	0004aeae 	.word	0x0004aeae
   300dc:	2001a1b4 	.word	0x2001a1b4
   300e0:	0004adbd 	.word	0x0004adbd
   300e4:	0004ade1 	.word	0x0004ade1
   300e8:	0004ae02 	.word	0x0004ae02
   300ec:	2001a1bc 	.word	0x2001a1bc
   300f0:	2001a1c0 	.word	0x2001a1c0
   300f4:	0004ae1a 	.word	0x0004ae1a
   300f8:	2001a1c4 	.word	0x2001a1c4
   300fc:	2001a1c8 	.word	0x2001a1c8
   30100:	2001a1cc 	.word	0x2001a1cc
   30104:	0004ae36 	.word	0x0004ae36
   30108:	2001d2ec 	.word	0x2001d2ec
   3010c:	0004ae69 	.word	0x0004ae69
   30110:	0004ae84 	.word	0x0004ae84
   30114:	0004aec7 	.word	0x0004aec7
   30118:	01010001 	.word	0x01010001
   3011c:	0004aee4 	.word	0x0004aee4
   30120:	0004af0b 	.word	0x0004af0b
   30124:	20014c47 	.word	0x20014c47

00030128 <nrf_cloud_bootloader_fota_slot_set>:
#include <net/nrf_cloud.h>

LOG_MODULE_REGISTER(nrf_cloud_fota_common, CONFIG_NRF_CLOUD_LOG_LEVEL);

int nrf_cloud_bootloader_fota_slot_set(struct nrf_cloud_settings_fota_job * const job)
{
   30128:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -ENOTSUP;

	if (!job) {
   3012a:	4605      	mov	r5, r0
   3012c:	b318      	cbz	r0, 30176 <nrf_cloud_bootloader_fota_slot_set+0x4e>
		return -EINVAL;
	}

	/* Only set the slot flag once for bootloader updates */
	if (job->type == NRF_CLOUD_FOTA_BOOTLOADER &&
   3012e:	7843      	ldrb	r3, [r0, #1]
   30130:	2b02      	cmp	r3, #2
   30132:	d123      	bne.n	3017c <nrf_cloud_bootloader_fota_slot_set+0x54>
   30134:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   30138:	07db      	lsls	r3, r3, #31
   3013a:	d41f      	bmi.n	3017c <nrf_cloud_bootloader_fota_slot_set+0x54>
	    !(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET)) {
		bool s0_active;

#if defined(CONFIG_FOTA_DOWNLOAD)
		err = fota_download_s0_active_get(&s0_active);
   3013c:	f10d 0007 	add.w	r0, sp, #7
   30140:	f00f ff18 	bl	3ff74 <fota_download_s0_active_get>
#endif

		if (err) {
   30144:	4604      	mov	r4, r0
   30146:	b138      	cbz	r0, 30158 <nrf_cloud_bootloader_fota_slot_set+0x30>
			LOG_ERR("Unable to determine active B1 slot, error: %d", err);
   30148:	4602      	mov	r2, r0
   3014a:	2145      	movs	r1, #69	; 0x45
   3014c:	480c      	ldr	r0, [pc, #48]	; (30180 <nrf_cloud_bootloader_fota_slot_set+0x58>)
   3014e:	f00d f854 	bl	3d1fa <z_log_minimal_printk>

		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
	}

	return 0;
}
   30152:	4620      	mov	r0, r4
   30154:	b003      	add	sp, #12
   30156:	bd30      	pop	{r4, r5, pc}
		if (s0_active) {
   30158:	f89d 2007 	ldrb.w	r2, [sp, #7]
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   3015c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
		if (s0_active) {
   30160:	b132      	cbz	r2, 30170 <nrf_cloud_bootloader_fota_slot_set+0x48>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   30162:	f043 0302 	orr.w	r3, r3, #2
		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
   30166:	f043 0301 	orr.w	r3, r3, #1
   3016a:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
   3016e:	e7f0      	b.n	30152 <nrf_cloud_bootloader_fota_slot_set+0x2a>
			job->bl_flags &= ~NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   30170:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   30174:	e7f7      	b.n	30166 <nrf_cloud_bootloader_fota_slot_set+0x3e>
		return -EINVAL;
   30176:	f06f 0415 	mvn.w	r4, #21
   3017a:	e7ea      	b.n	30152 <nrf_cloud_bootloader_fota_slot_set+0x2a>
	return 0;
   3017c:	2400      	movs	r4, #0
   3017e:	e7e8      	b.n	30152 <nrf_cloud_bootloader_fota_slot_set+0x2a>
   30180:	0004afbc 	.word	0x0004afbc

00030184 <nrf_cloud_pending_fota_job_process>:

int nrf_cloud_pending_fota_job_process(struct nrf_cloud_settings_fota_job * const job,
				       bool * const reboot_required)
{
   30184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30188:	460f      	mov	r7, r1
	if (!job || !reboot_required) {
   3018a:	4605      	mov	r5, r0
   3018c:	2800      	cmp	r0, #0
   3018e:	f000 8085 	beq.w	3029c <nrf_cloud_pending_fota_job_process+0x118>
   30192:	2900      	cmp	r1, #0
   30194:	f000 8082 	beq.w	3029c <nrf_cloud_pending_fota_job_process+0x118>
		return -EINVAL;
	}

	if (job->validate != NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   30198:	f890 8000 	ldrb.w	r8, [r0]
   3019c:	f1b8 0f01 	cmp.w	r8, #1
   301a0:	d17f      	bne.n	302a2 <nrf_cloud_pending_fota_job_process+0x11e>
		return -ENODEV;
	}

	int err;

	if (job->type == NRF_CLOUD_FOTA_MODEM) {
   301a2:	7843      	ldrb	r3, [r0, #1]
   301a4:	2b01      	cmp	r3, #1
   301a6:	d124      	bne.n	301f2 <nrf_cloud_pending_fota_job_process+0x6e>
#if defined(CONFIG_NRF_MODEM_LIB)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   301a8:	f7f5 fd80 	bl	25cac <nrf_modem_lib_get_init_ret>

		switch (modem_lib_init_result) {
   301ac:	4b3e      	ldr	r3, [pc, #248]	; (302a8 <nrf_cloud_pending_fota_job_process+0x124>)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   301ae:	4602      	mov	r2, r0
		switch (modem_lib_init_result) {
   301b0:	4298      	cmp	r0, r3
   301b2:	dc08      	bgt.n	301c6 <nrf_cloud_pending_fota_job_process+0x42>
   301b4:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   301b8:	dd15      	ble.n	301e6 <nrf_cloud_pending_fota_job_process+0x62>
			break;
		case MODEM_DFU_RESULT_UUID_ERROR:
		case MODEM_DFU_RESULT_AUTH_ERROR:
		case MODEM_DFU_RESULT_HARDWARE_ERROR:
		case MODEM_DFU_RESULT_INTERNAL_ERROR:
			LOG_ERR("Modem FOTA error: %d", modem_lib_init_result);
   301ba:	2145      	movs	r1, #69	; 0x45
   301bc:	483b      	ldr	r0, [pc, #236]	; (302ac <nrf_cloud_pending_fota_job_process+0x128>)
   301be:	f00d f81c 	bl	3d1fa <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   301c2:	2303      	movs	r3, #3
   301c4:	e007      	b.n	301d6 <nrf_cloud_pending_fota_job_process+0x52>
		switch (modem_lib_init_result) {
   301c6:	4b3a      	ldr	r3, [pc, #232]	; (302b0 <nrf_cloud_pending_fota_job_process+0x12c>)
   301c8:	4298      	cmp	r0, r3
   301ca:	d10c      	bne.n	301e6 <nrf_cloud_pending_fota_job_process+0x62>
			LOG_INF("Modem FOTA update confirmed");
   301cc:	2149      	movs	r1, #73	; 0x49
   301ce:	4839      	ldr	r0, [pc, #228]	; (302b4 <nrf_cloud_pending_fota_job_process+0x130>)
   301d0:	f00d f813 	bl	3d1fa <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   301d4:	2302      	movs	r3, #2
			break;
		default:
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   301d6:	702b      	strb	r3, [r5, #0]
			break;
		}
#else
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
#endif
		*reboot_required = true;
   301d8:	2301      	movs	r3, #1

		LOG_INF("Modem FOTA update complete on reboot");
   301da:	2149      	movs	r1, #73	; 0x49
   301dc:	4836      	ldr	r0, [pc, #216]	; (302b8 <nrf_cloud_pending_fota_job_process+0x134>)
		*reboot_required = true;
   301de:	703b      	strb	r3, [r7, #0]
#endif
		}

		if (err) {
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
			LOG_WRN("Bootloader FOTA update complete but not validated");
   301e0:	f00d f80b 	bl	3d1fa <z_log_minimal_printk>
   301e4:	e00b      	b.n	301fe <nrf_cloud_pending_fota_job_process+0x7a>
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
   301e6:	2149      	movs	r1, #73	; 0x49
   301e8:	4834      	ldr	r0, [pc, #208]	; (302bc <nrf_cloud_pending_fota_job_process+0x138>)
   301ea:	f00d f806 	bl	3d1fa <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   301ee:	2304      	movs	r3, #4
   301f0:	e7f1      	b.n	301d6 <nrf_cloud_pending_fota_job_process+0x52>
	} else if (job->type == NRF_CLOUD_FOTA_APPLICATION) {
   301f2:	b9eb      	cbnz	r3, 30230 <nrf_cloud_pending_fota_job_process+0xac>
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   301f4:	2304      	movs	r3, #4
   301f6:	7003      	strb	r3, [r0, #0]
		if (!boot_is_img_confirmed()) {
   301f8:	f00d fe61 	bl	3debe <boot_is_img_confirmed>
   301fc:	b108      	cbz	r0, 30202 <nrf_cloud_pending_fota_job_process+0x7e>
		}
	}

	return 0;
   301fe:	2400      	movs	r4, #0
   30200:	e027      	b.n	30252 <nrf_cloud_pending_fota_job_process+0xce>
			err = boot_write_img_confirmed();
   30202:	f00d fe73 	bl	3deec <boot_write_img_confirmed>
			if (err) {
   30206:	4604      	mov	r4, r0
   30208:	b158      	cbz	r0, 30222 <nrf_cloud_pending_fota_job_process+0x9e>
				LOG_ERR("Application FOTA update confirmation failed: %d",
   3020a:	4602      	mov	r2, r0
   3020c:	2145      	movs	r1, #69	; 0x45
   3020e:	482c      	ldr	r0, [pc, #176]	; (302c0 <nrf_cloud_pending_fota_job_process+0x13c>)
   30210:	f00c fff3 	bl	3d1fa <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   30214:	2303      	movs	r3, #3
				LOG_INF("Rebooting to revert to previous version...");
   30216:	2149      	movs	r1, #73	; 0x49
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   30218:	702b      	strb	r3, [r5, #0]
				LOG_INF("Rebooting to revert to previous version...");
   3021a:	482a      	ldr	r0, [pc, #168]	; (302c4 <nrf_cloud_pending_fota_job_process+0x140>)
				*reboot_required = true;
   3021c:	f887 8000 	strb.w	r8, [r7]
   30220:	e7de      	b.n	301e0 <nrf_cloud_pending_fota_job_process+0x5c>
				LOG_INF("App FOTA update confirmed");
   30222:	2149      	movs	r1, #73	; 0x49
   30224:	4828      	ldr	r0, [pc, #160]	; (302c8 <nrf_cloud_pending_fota_job_process+0x144>)
				LOG_INF("Bootloader slot changed, FOTA update validated");
   30226:	f00c ffe8 	bl	3d1fa <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   3022a:	2302      	movs	r3, #2
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   3022c:	702b      	strb	r3, [r5, #0]
   3022e:	e010      	b.n	30252 <nrf_cloud_pending_fota_job_process+0xce>
	} else if (job->type == NRF_CLOUD_FOTA_BOOTLOADER) {
   30230:	2b02      	cmp	r3, #2
   30232:	d1e4      	bne.n	301fe <nrf_cloud_pending_fota_job_process+0x7a>
		if (!(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_REBOOTED)) {
   30234:	f890 6027 	ldrb.w	r6, [r0, #39]	; 0x27
   30238:	f016 0404 	ands.w	r4, r6, #4
   3023c:	d10d      	bne.n	3025a <nrf_cloud_pending_fota_job_process+0xd6>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_REBOOTED;
   3023e:	f046 0604 	orr.w	r6, r6, #4
   30242:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
			*reboot_required = true;
   30246:	f881 8000 	strb.w	r8, [r1]
			LOG_INF("Bootloader FOTA update will be processed on reboot");
   3024a:	4820      	ldr	r0, [pc, #128]	; (302cc <nrf_cloud_pending_fota_job_process+0x148>)
   3024c:	2149      	movs	r1, #73	; 0x49
   3024e:	f00c ffd4 	bl	3d1fa <z_log_minimal_printk>
}
   30252:	4620      	mov	r0, r4
   30254:	b002      	add	sp, #8
   30256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET) {
   3025a:	07f3      	lsls	r3, r6, #31
   3025c:	d50a      	bpl.n	30274 <nrf_cloud_pending_fota_job_process+0xf0>
			err = fota_download_s0_active_get(&s0_active);
   3025e:	f10d 0007 	add.w	r0, sp, #7
   30262:	f00f fe87 	bl	3ff74 <fota_download_s0_active_get>
			if (err) {
   30266:	4604      	mov	r4, r0
   30268:	b148      	cbz	r0, 3027e <nrf_cloud_pending_fota_job_process+0xfa>
				LOG_WRN("Active slot unknown, error: %d", err);
   3026a:	4602      	mov	r2, r0
   3026c:	2157      	movs	r1, #87	; 0x57
   3026e:	4818      	ldr	r0, [pc, #96]	; (302d0 <nrf_cloud_pending_fota_job_process+0x14c>)
   30270:	f00c ffc3 	bl	3d1fa <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   30274:	2304      	movs	r3, #4
			LOG_WRN("Bootloader FOTA update complete but not validated");
   30276:	2157      	movs	r1, #87	; 0x57
   30278:	4816      	ldr	r0, [pc, #88]	; (302d4 <nrf_cloud_pending_fota_job_process+0x150>)
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   3027a:	702b      	strb	r3, [r5, #0]
   3027c:	e7b0      	b.n	301e0 <nrf_cloud_pending_fota_job_process+0x5c>
			} else if (s0_active != s0_prev) {
   3027e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   30282:	f3c6 0640 	ubfx	r6, r6, #1, #1
   30286:	42b3      	cmp	r3, r6
   30288:	d002      	beq.n	30290 <nrf_cloud_pending_fota_job_process+0x10c>
				LOG_INF("Bootloader slot changed, FOTA update validated");
   3028a:	2149      	movs	r1, #73	; 0x49
   3028c:	4812      	ldr	r0, [pc, #72]	; (302d8 <nrf_cloud_pending_fota_job_process+0x154>)
   3028e:	e7ca      	b.n	30226 <nrf_cloud_pending_fota_job_process+0xa2>
				LOG_WRN("Bootloader slot unchanged, FOTA update invalidated");
   30290:	2157      	movs	r1, #87	; 0x57
   30292:	4812      	ldr	r0, [pc, #72]	; (302dc <nrf_cloud_pending_fota_job_process+0x158>)
   30294:	f00c ffb1 	bl	3d1fa <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   30298:	2303      	movs	r3, #3
   3029a:	e7c7      	b.n	3022c <nrf_cloud_pending_fota_job_process+0xa8>
		return -EINVAL;
   3029c:	f06f 0415 	mvn.w	r4, #21
   302a0:	e7d7      	b.n	30252 <nrf_cloud_pending_fota_job_process+0xce>
		return -ENODEV;
   302a2:	f06f 0412 	mvn.w	r4, #18
   302a6:	e7d4      	b.n	30252 <nrf_cloud_pending_fota_job_process+0xce>
   302a8:	04400004 	.word	0x04400004
   302ac:	0004b010 	.word	0x0004b010
   302b0:	05500001 	.word	0x05500001
   302b4:	0004afef 	.word	0x0004afef
   302b8:	0004b04d 	.word	0x0004b04d
   302bc:	0004b02a 	.word	0x0004b02a
   302c0:	0004b077 	.word	0x0004b077
   302c4:	0004b0ac 	.word	0x0004b0ac
   302c8:	0004b0dc 	.word	0x0004b0dc
   302cc:	0004b0fb 	.word	0x0004b0fb
   302d0:	0004b133 	.word	0x0004b133
   302d4:	0004b1c3 	.word	0x0004b1c3
   302d8:	0004b157 	.word	0x0004b157
   302dc:	0004b18b 	.word	0x0004b18b

000302e0 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   302e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   302e2:	f640 03fc 	movw	r3, #2300	; 0x8fc
   302e6:	f8d0 2918 	ldr.w	r2, [r0, #2328]	; 0x918
{
   302ea:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   302ec:	429a      	cmp	r2, r3
   302ee:	d90a      	bls.n	30306 <fragment_evt_send+0x26>
   302f0:	490d      	ldr	r1, [pc, #52]	; (30328 <fragment_evt_send+0x48>)
   302f2:	480e      	ldr	r0, [pc, #56]	; (3032c <fragment_evt_send+0x4c>)
   302f4:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   302f8:	f00c ff45 	bl	3d186 <assert_print>
   302fc:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   30300:	4809      	ldr	r0, [pc, #36]	; (30328 <fragment_evt_send+0x48>)
   30302:	f00c ff39 	bl	3d178 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   30306:	2300      	movs	r3, #0
   30308:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   3030c:	f104 031c 	add.w	r3, r4, #28
	const struct download_client_evt evt = {
   30310:	9302      	str	r3, [sp, #8]
   30312:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   30316:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	const struct download_client_evt evt = {
   3031a:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   3031c:	a801      	add	r0, sp, #4
   3031e:	f8d4 3a50 	ldr.w	r3, [r4, #2640]	; 0xa50
   30322:	4798      	blx	r3
}
   30324:	b004      	add	sp, #16
   30326:	bd10      	pop	{r4, pc}
   30328:	0004b210 	.word	0x0004b210
   3032c:	0004494f 	.word	0x0004494f

00030330 <socket_send>:
{
   30330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (timeout_ms <= 0) {
   30334:	2a00      	cmp	r2, #0
{
   30336:	4605      	mov	r5, r0
   30338:	460c      	mov	r4, r1
   3033a:	b086      	sub	sp, #24
	if (timeout_ms <= 0) {
   3033c:	dc06      	bgt.n	3034c <socket_send+0x1c>
	if (err) {
   3033e:	2600      	movs	r6, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   30340:	4637      	mov	r7, r6
		sent = send(client->fd, client->buf + off, len, 0);
   30342:	f105 081c 	add.w	r8, r5, #28
	while (len) {
   30346:	bb24      	cbnz	r4, 30392 <socket_send+0x62>
	return 0;
   30348:	4620      	mov	r0, r4
   3034a:	e01f      	b.n	3038c <socket_send+0x5c>
		.tv_sec = (timeout_ms / 1000),
   3034c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   30350:	fb92 f1f3 	sdiv	r1, r2, r3
		.tv_usec = (timeout_ms % 1000) * 1000,
   30354:	fb03 2211 	mls	r2, r3, r1, r2
   30358:	435a      	muls	r2, r3
		.tv_sec = (timeout_ms / 1000),
   3035a:	17ce      	asrs	r6, r1, #31
   3035c:	e9cd 1602 	strd	r1, r6, [sp, #8]
	err = set_snd_socket_timeout(client->fd, timeout);
   30360:	6800      	ldr	r0, [r0, #0]
	struct timeval timeo = {
   30362:	9204      	str	r2, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30364:	2310      	movs	r3, #16
   30366:	2215      	movs	r2, #21
   30368:	9300      	str	r3, [sp, #0]
   3036a:	2101      	movs	r1, #1
   3036c:	ab02      	add	r3, sp, #8
   3036e:	f00d fb84 	bl	3da7a <z_impl_zsock_setsockopt>
	if (err) {
   30372:	2800      	cmp	r0, #0
   30374:	d0e3      	beq.n	3033e <socket_send+0xe>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   30376:	f00d fd98 	bl	3deaa <__errno>
   3037a:	2157      	movs	r1, #87	; 0x57
   3037c:	6802      	ldr	r2, [r0, #0]
   3037e:	480c      	ldr	r0, [pc, #48]	; (303b0 <socket_send+0x80>)
   30380:	f00c ff3b 	bl	3d1fa <z_log_minimal_printk>
			return -errno;
   30384:	f00d fd91 	bl	3deaa <__errno>
   30388:	6800      	ldr	r0, [r0, #0]
   3038a:	4240      	negs	r0, r0
}
   3038c:	b006      	add	sp, #24
   3038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   30392:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   30394:	2300      	movs	r3, #0
   30396:	4622      	mov	r2, r4
   30398:	e9cd 7700 	strd	r7, r7, [sp]
   3039c:	eb08 0106 	add.w	r1, r8, r6
   303a0:	f00d fabf 	bl	3d922 <z_impl_zsock_sendto>
		if (sent < 0) {
   303a4:	2800      	cmp	r0, #0
   303a6:	dbed      	blt.n	30384 <socket_send+0x54>
		off += sent;
   303a8:	4406      	add	r6, r0
		len -= sent;
   303aa:	1a24      	subs	r4, r4, r0
   303ac:	e7cb      	b.n	30346 <socket_send+0x16>
   303ae:	bf00      	nop
   303b0:	0004b255 	.word	0x0004b255

000303b4 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   303b4:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   303b6:	4604      	mov	r4, r0
{
   303b8:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   303ba:	b318      	cbz	r0, 30404 <download_client_init+0x50>
   303bc:	b311      	cbz	r1, 30404 <download_client_init+0x50>
		return -EINVAL;
	}

	client->fd = -1;
   303be:	f04f 33ff 	mov.w	r3, #4294967295
   303c2:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   303c4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
   303c8:	f8c3 1a50 	str.w	r1, [r3, #2640]	; 0xa50
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   303cc:	2200      	movs	r2, #0
   303ce:	2300      	movs	r3, #0
   303d0:	2500      	movs	r5, #0
   303d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   303d6:	230e      	movs	r3, #14
   303d8:	9000      	str	r0, [sp, #0]
   303da:	e9cd 3503 	strd	r3, r5, [sp, #12]
   303de:	f500 6125 	add.w	r1, r0, #2640	; 0xa50
   303e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   303e6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   303ea:	4b08      	ldr	r3, [pc, #32]	; (3040c <download_client_init+0x58>)
   303ec:	f500 6018 	add.w	r0, r0, #2432	; 0x980
   303f0:	f006 fb3e 	bl	36a70 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   303f4:	f8c4 097c 	str.w	r0, [r4, #2428]	; 0x97c
	return z_impl_k_thread_name_set(thread, str);
   303f8:	4905      	ldr	r1, [pc, #20]	; (30410 <download_client_init+0x5c>)
   303fa:	f011 f951 	bl	416a0 <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   303fe:	4628      	mov	r0, r5
}
   30400:	b009      	add	sp, #36	; 0x24
   30402:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   30404:	f06f 0015 	mvn.w	r0, #21
   30408:	e7fa      	b.n	30400 <download_client_init+0x4c>
   3040a:	bf00      	nop
   3040c:	00030845 	.word	0x00030845
   30410:	0004b281 	.word	0x0004b281

00030414 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   30414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30418:	460f      	mov	r7, r1
   3041a:	4616      	mov	r6, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   3041c:	4604      	mov	r4, r0
{
   3041e:	b0b8      	sub	sp, #224	; 0xe0
	if (client == NULL || host == NULL || config == NULL) {
   30420:	2800      	cmp	r0, #0
   30422:	f000 81d2 	beq.w	307ca <download_client_connect+0x3b6>
   30426:	2900      	cmp	r1, #0
   30428:	f000 81cf 	beq.w	307ca <download_client_connect+0x3b6>
   3042c:	2a00      	cmp	r2, #0
   3042e:	f000 81cc 	beq.w	307ca <download_client_connect+0x3b6>
		return -EINVAL;
	}

	if (client->fd != -1) {
   30432:	6803      	ldr	r3, [r0, #0]
   30434:	3301      	adds	r3, #1
   30436:	d17f      	bne.n	30538 <download_client_connect+0x124>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   30438:	f640 03fc 	movw	r3, #2300	; 0x8fc
   3043c:	6892      	ldr	r2, [r2, #8]
   3043e:	429a      	cmp	r2, r3
   30440:	d909      	bls.n	30456 <download_client_connect+0x42>
		LOG_ERR("The configured fragment size is larger than buffer");
   30442:	2145      	movs	r1, #69	; 0x45
   30444:	48b3      	ldr	r0, [pc, #716]	; (30714 <download_client_connect+0x300>)
   30446:	f00c fed8 	bl	3d1fa <z_log_minimal_printk>
		return -E2BIG;
   3044a:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   3044e:	4628      	mov	r0, r5
   30450:	b038      	add	sp, #224	; 0xe0
   30452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct addrinfo hints = {
   30456:	2250      	movs	r2, #80	; 0x50
   30458:	2100      	movs	r1, #0
   3045a:	a804      	add	r0, sp, #16
		err = host_lookup(host, AF_INET, config->pdn_id, &client->remote_addr);
   3045c:	f896 8004 	ldrb.w	r8, [r6, #4]
	struct addrinfo hints = {
   30460:	f011 fb7e 	bl	41b60 <memset>
   30464:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   30466:	2280      	movs	r2, #128	; 0x80
   30468:	4638      	mov	r0, r7
   3046a:	a918      	add	r1, sp, #96	; 0x60
	struct addrinfo hints = {
   3046c:	9306      	str	r3, [sp, #24]
	err = url_parse_host(host, hostname, sizeof(hostname));
   3046e:	f000 fb73 	bl	30b58 <url_parse_host>
	if (err) {
   30472:	4605      	mov	r5, r0
   30474:	2800      	cmp	r0, #0
   30476:	d1ea      	bne.n	3044e <download_client_connect+0x3a>
	if (pdn_id) {
   30478:	f1b8 0f00 	cmp.w	r8, #0
   3047c:	d019      	beq.n	304b2 <download_client_connect+0x9e>
		hints.ai_flags = AI_PDNSERV;
   3047e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   30482:	2104      	movs	r1, #4
   30484:	4aa4      	ldr	r2, [pc, #656]	; (30718 <download_client_connect+0x304>)
		hints.ai_flags = AI_PDNSERV;
   30486:	9305      	str	r3, [sp, #20]
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   30488:	a802      	add	r0, sp, #8
   3048a:	4643      	mov	r3, r8
   3048c:	f00a fc16 	bl	3acbc <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   30490:	ab03      	add	r3, sp, #12
   30492:	aa04      	add	r2, sp, #16
   30494:	a902      	add	r1, sp, #8
   30496:	a818      	add	r0, sp, #96	; 0x60
   30498:	f00d f9e1 	bl	3d85e <zsock_getaddrinfo>
   3049c:	4605      	mov	r5, r0
	if (err) {
   3049e:	b160      	cbz	r0, 304ba <download_client_connect+0xa6>
		LOG_WRN("Failed to resolve hostname %s on %s",
   304a0:	2157      	movs	r1, #87	; 0x57
   304a2:	4b9e      	ldr	r3, [pc, #632]	; (3071c <download_client_connect+0x308>)
   304a4:	489e      	ldr	r0, [pc, #632]	; (30720 <download_client_connect+0x30c>)
   304a6:	aa18      	add	r2, sp, #96	; 0x60
   304a8:	f00c fea7 	bl	3d1fa <z_log_minimal_printk>
		return -EHOSTUNREACH;
   304ac:	f06f 0575 	mvn.w	r5, #117	; 0x75
   304b0:	e7cd      	b.n	3044e <download_client_connect+0x3a>
   304b2:	4601      	mov	r1, r0
   304b4:	ab03      	add	r3, sp, #12
   304b6:	aa04      	add	r2, sp, #16
   304b8:	e7ed      	b.n	30496 <download_client_connect+0x82>
	*sa = *(ai->ai_addr);
   304ba:	1d22      	adds	r2, r4, #4
   304bc:	4690      	mov	r8, r2
   304be:	9803      	ldr	r0, [sp, #12]
   304c0:	6983      	ldr	r3, [r0, #24]
   304c2:	f103 0118 	add.w	r1, r3, #24
   304c6:	f853 cb04 	ldr.w	ip, [r3], #4
   304ca:	428b      	cmp	r3, r1
   304cc:	f842 cb04 	str.w	ip, [r2], #4
   304d0:	d1f9      	bne.n	304c6 <download_client_connect+0xb2>
	zsock_freeaddrinfo(ai);
   304d2:	f00d f9c6 	bl	3d862 <zsock_freeaddrinfo>
	client->config = *config;
   304d6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   304da:	f604 1c2c 	addw	ip, r4, #2348	; 0x92c
   304de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	err = url_parse_proto(dl->host, &dl->proto, &type);
   304e2:	4638      	mov	r0, r7
	client->host = host;
   304e4:	f8c4 7924 	str.w	r7, [r4, #2340]	; 0x924
	err = url_parse_proto(dl->host, &dl->proto, &type);
   304e8:	aa03      	add	r2, sp, #12
   304ea:	f604 113c 	addw	r1, r4, #2364	; 0x93c
   304ee:	f000 fafd 	bl	30aec <url_parse_proto>
	if (err) {
   304f2:	b150      	cbz	r0, 3050a <download_client_connect+0xf6>
		type = SOCK_STREAM;
   304f4:	2301      	movs	r3, #1
   304f6:	9303      	str	r3, [sp, #12]
		if (dl->config.sec_tag != -1) {
   304f8:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
   304fc:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   304fe:	bf14      	ite	ne
   30500:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   30504:	2306      	moveq	r3, #6
   30506:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   3050a:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
   3050e:	f422 7380 	bic.w	r3, r2, #256	; 0x100
   30512:	2b11      	cmp	r3, #17
   30514:	f000 8153 	beq.w	307be <download_client_connect+0x3aa>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   30518:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
		if (dl->config.sec_tag != -1) {
   3051c:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   30520:	d10c      	bne.n	3053c <download_client_connect+0x128>
		if (dl->config.sec_tag == -1) {
   30522:	3301      	adds	r3, #1
   30524:	d112      	bne.n	3054c <download_client_connect+0x138>
			LOG_WRN("No security tag provided for TLS/DTLS");
   30526:	2157      	movs	r1, #87	; 0x57
   30528:	487e      	ldr	r0, [pc, #504]	; (30724 <download_client_connect+0x310>)
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   3052a:	f00c fe66 	bl	3d1fa <z_log_minimal_printk>
		return -EINVAL;
   3052e:	f06f 0515 	mvn.w	r5, #21
	if (client->fd < 0) {
   30532:	6823      	ldr	r3, [r4, #0]
   30534:	2b00      	cmp	r3, #0
   30536:	db8a      	blt.n	3044e <download_client_connect+0x3a>
	return 0;
   30538:	2500      	movs	r5, #0
   3053a:	e788      	b.n	3044e <download_client_connect+0x3a>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   3053c:	3301      	adds	r3, #1
   3053e:	d105      	bne.n	3054c <download_client_connect+0x138>
   30540:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   30544:	b113      	cbz	r3, 3054c <download_client_connect+0x138>
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   30546:	2157      	movs	r1, #87	; 0x57
   30548:	4877      	ldr	r0, [pc, #476]	; (30728 <download_client_connect+0x314>)
   3054a:	e7ee      	b.n	3052a <download_client_connect+0x116>
	err = url_parse_port(dl->host, &port);
   3054c:	f8d4 0924 	ldr.w	r0, [r4, #2340]	; 0x924
   30550:	a902      	add	r1, sp, #8
   30552:	f000 fb39 	bl	30bc8 <url_parse_port>
	if (err) {
   30556:	b148      	cbz	r0, 3056c <download_client_connect+0x158>
		switch (dl->proto) {
   30558:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   3055c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30560:	d034      	beq.n	305cc <download_client_connect+0x1b8>
   30562:	dc2c      	bgt.n	305be <download_client_connect+0x1aa>
   30564:	2b06      	cmp	r3, #6
   30566:	d036      	beq.n	305d6 <download_client_connect+0x1c2>
   30568:	2b11      	cmp	r3, #17
   3056a:	d036      	beq.n	305da <download_client_connect+0x1c6>
	switch (dl->remote_addr.sa_family) {
   3056c:	88a0      	ldrh	r0, [r4, #4]
   3056e:	2801      	cmp	r0, #1
   30570:	d036      	beq.n	305e0 <download_client_connect+0x1cc>
   30572:	2802      	cmp	r0, #2
   30574:	f040 8126 	bne.w	307c4 <download_client_connect+0x3b0>
		addrlen = sizeof(struct sockaddr_in6);
   30578:	2718      	movs	r7, #24
		SIN6(&dl->remote_addr)->sin6_port = htons(port);
   3057a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   3057e:	ba5b      	rev16	r3, r3
   30580:	80e3      	strh	r3, [r4, #6]
	if (dl->set_native_tls) {
   30582:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
   30586:	f893 3a54 	ldrb.w	r3, [r3, #2644]	; 0xa54
   3058a:	b11b      	cbz	r3, 30594 <download_client_connect+0x180>
		type |= SOCK_NATIVE_TLS;
   3058c:	9b03      	ldr	r3, [sp, #12]
   3058e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   30592:	9303      	str	r3, [sp, #12]
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   30594:	9903      	ldr	r1, [sp, #12]
   30596:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
	return z_impl_zsock_socket(family, type, proto);
   3059a:	f7f1 fc0d 	bl	21db8 <z_impl_zsock_socket>
	if (dl->fd < 0) {
   3059e:	2800      	cmp	r0, #0
   305a0:	4606      	mov	r6, r0
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   305a2:	6020      	str	r0, [r4, #0]
	if (dl->fd < 0) {
   305a4:	da22      	bge.n	305ec <download_client_connect+0x1d8>
		LOG_ERR("Failed to create socket, err %d", errno);
   305a6:	f00d fc80 	bl	3deaa <__errno>
   305aa:	2145      	movs	r1, #69	; 0x45
   305ac:	6802      	ldr	r2, [r0, #0]
   305ae:	485f      	ldr	r0, [pc, #380]	; (3072c <download_client_connect+0x318>)
   305b0:	f00c fe23 	bl	3d1fa <z_log_minimal_printk>
		return -errno;
   305b4:	f00d fc79 	bl	3deaa <__errno>
   305b8:	6805      	ldr	r5, [r0, #0]
   305ba:	426d      	negs	r5, r5
   305bc:	e7b9      	b.n	30532 <download_client_connect+0x11e>
		switch (dl->proto) {
   305be:	f240 1211 	movw	r2, #273	; 0x111
   305c2:	4293      	cmp	r3, r2
   305c4:	d1d2      	bne.n	3056c <download_client_connect+0x158>
			port = 5684;
   305c6:	f241 6334 	movw	r3, #5684	; 0x1634
   305ca:	e001      	b.n	305d0 <download_client_connect+0x1bc>
			port = 443;
   305cc:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   305d0:	f8ad 3008 	strh.w	r3, [sp, #8]
			break;
   305d4:	e7ca      	b.n	3056c <download_client_connect+0x158>
			port = 80;
   305d6:	2350      	movs	r3, #80	; 0x50
   305d8:	e7fa      	b.n	305d0 <download_client_connect+0x1bc>
			port = 5683;
   305da:	f241 6333 	movw	r3, #5683	; 0x1633
   305de:	e7f7      	b.n	305d0 <download_client_connect+0x1bc>
		SIN(&dl->remote_addr)->sin_port = htons(port);
   305e0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		addrlen = sizeof(struct sockaddr_in);
   305e4:	2708      	movs	r7, #8
		SIN(&dl->remote_addr)->sin_port = htons(port);
   305e6:	ba5b      	rev16	r3, r3
   305e8:	80e3      	strh	r3, [r4, #6]
		break;
   305ea:	e7ca      	b.n	30582 <download_client_connect+0x16e>
	if (dl->config.pdn_id) {
   305ec:	f894 9930 	ldrb.w	r9, [r4, #2352]	; 0x930
   305f0:	f1b9 0f00 	cmp.w	r9, #0
   305f4:	d02a      	beq.n	3064c <download_client_connect+0x238>
	char buf[8] = {0};
   305f6:	2300      	movs	r3, #0
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   305f8:	2108      	movs	r1, #8
	char buf[8] = {0};
   305fa:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   305fe:	4a4c      	ldr	r2, [pc, #304]	; (30730 <download_client_connect+0x31c>)
   30600:	464b      	mov	r3, r9
   30602:	a818      	add	r0, sp, #96	; 0x60
   30604:	f00a fb5a 	bl	3acbc <sniprintf>
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   30608:	2149      	movs	r1, #73	; 0x49
   3060a:	aa18      	add	r2, sp, #96	; 0x60
   3060c:	4849      	ldr	r0, [pc, #292]	; (30734 <download_client_connect+0x320>)
   3060e:	f00c fdf4 	bl	3d1fa <z_log_minimal_printk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &buf, strlen(buf));
   30612:	a818      	add	r0, sp, #96	; 0x60
   30614:	f7ec fe15 	bl	1d242 <strlen>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30618:	2219      	movs	r2, #25
   3061a:	9000      	str	r0, [sp, #0]
   3061c:	2101      	movs	r1, #1
   3061e:	4630      	mov	r0, r6
   30620:	ab18      	add	r3, sp, #96	; 0x60
   30622:	f00d fa2a 	bl	3da7a <z_impl_zsock_setsockopt>
	if (err) {
   30626:	b188      	cbz	r0, 3064c <download_client_connect+0x238>
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   30628:	f00d fc3f 	bl	3deaa <__errno>
   3062c:	464a      	mov	r2, r9
   3062e:	6803      	ldr	r3, [r0, #0]
   30630:	2145      	movs	r1, #69	; 0x45
   30632:	4841      	ldr	r0, [pc, #260]	; (30738 <download_client_connect+0x324>)
   30634:	f00c fde1 	bl	3d1fa <z_log_minimal_printk>
		return -ENETDOWN;
   30638:	f06f 0672 	mvn.w	r6, #114	; 0x72
		close(dl->fd);
   3063c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   3063e:	f00d f925 	bl	3d88c <z_impl_zsock_close>
		dl->fd = -1;
   30642:	f04f 33ff 	mov.w	r3, #4294967295
   30646:	4635      	mov	r5, r6
   30648:	6023      	str	r3, [r4, #0]
   3064a:	e772      	b.n	30532 <download_client_connect+0x11e>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   3064c:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   30650:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30654:	d004      	beq.n	30660 <download_client_connect+0x24c>
   30656:	f240 1211 	movw	r2, #273	; 0x111
   3065a:	4293      	cmp	r3, r2
   3065c:	f040 8094 	bne.w	30788 <download_client_connect+0x374>
	     && (dl->config.sec_tag != -1)) {
   30660:	f8d4 692c 	ldr.w	r6, [r4, #2348]	; 0x92c
   30664:	1c73      	adds	r3, r6, #1
   30666:	f000 808f 	beq.w	30788 <download_client_connect+0x374>
	verify = REQUIRED;
   3066a:	2302      	movs	r3, #2
		err = socket_sectag_set(dl->fd, dl->config.sec_tag);
   3066c:	f8d4 9000 	ldr.w	r9, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   30670:	9618      	str	r6, [sp, #96]	; 0x60
	verify = REQUIRED;
   30672:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30674:	f04f 0a04 	mov.w	sl, #4
   30678:	2205      	movs	r2, #5
   3067a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3067e:	4648      	mov	r0, r9
   30680:	f8cd a000 	str.w	sl, [sp]
   30684:	ab04      	add	r3, sp, #16
   30686:	f00d f9f8 	bl	3da7a <z_impl_zsock_setsockopt>
	if (err) {
   3068a:	b360      	cbz	r0, 306e6 <download_client_connect+0x2d2>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   3068c:	f00d fc0d 	bl	3deaa <__errno>
   30690:	2145      	movs	r1, #69	; 0x45
   30692:	6802      	ldr	r2, [r0, #0]
   30694:	4829      	ldr	r0, [pc, #164]	; (3073c <download_client_connect+0x328>)
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   30696:	f00c fdb0 	bl	3d1fa <z_log_minimal_printk>
		return -errno;
   3069a:	f00d fc06 	bl	3deaa <__errno>
   3069e:	6806      	ldr	r6, [r0, #0]
   306a0:	4276      	negs	r6, r6
		if (err) {
   306a2:	2e00      	cmp	r6, #0
   306a4:	d1ca      	bne.n	3063c <download_client_connect+0x228>
		if (dl->config.set_tls_hostname) {
   306a6:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   306aa:	2b00      	cmp	r3, #0
   306ac:	d06c      	beq.n	30788 <download_client_connect+0x374>
			err = socket_tls_hostname_set(dl->fd, dl->host);
   306ae:	f8d4 6924 	ldr.w	r6, [r4, #2340]	; 0x924
   306b2:	f8d4 9000 	ldr.w	r9, [r4]
	__ASSERT_NO_MSG(hostname);
   306b6:	b946      	cbnz	r6, 306ca <download_client_connect+0x2b6>
   306b8:	4921      	ldr	r1, [pc, #132]	; (30740 <download_client_connect+0x32c>)
   306ba:	4822      	ldr	r0, [pc, #136]	; (30744 <download_client_connect+0x330>)
   306bc:	2286      	movs	r2, #134	; 0x86
   306be:	f00c fd62 	bl	3d186 <assert_print>
   306c2:	2186      	movs	r1, #134	; 0x86
   306c4:	481e      	ldr	r0, [pc, #120]	; (30740 <download_client_connect+0x32c>)
   306c6:	f00c fd57 	bl	3d178 <assert_post_action>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   306ca:	4630      	mov	r0, r6
   306cc:	2280      	movs	r2, #128	; 0x80
   306ce:	a918      	add	r1, sp, #96	; 0x60
   306d0:	f000 fa42 	bl	30b58 <url_parse_host>
	if (err) {
   306d4:	4606      	mov	r6, r0
   306d6:	2800      	cmp	r0, #0
   306d8:	d03c      	beq.n	30754 <download_client_connect+0x340>
		LOG_ERR("Failed to parse host, err %d", err);
   306da:	4602      	mov	r2, r0
   306dc:	2145      	movs	r1, #69	; 0x45
   306de:	481a      	ldr	r0, [pc, #104]	; (30748 <download_client_connect+0x334>)
   306e0:	f00c fd8b 	bl	3d1fa <z_log_minimal_printk>
			if (err) {
   306e4:	e7aa      	b.n	3063c <download_client_connect+0x228>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   306e6:	4632      	mov	r2, r6
   306e8:	2149      	movs	r1, #73	; 0x49
   306ea:	4818      	ldr	r0, [pc, #96]	; (3074c <download_client_connect+0x338>)
   306ec:	f00c fd85 	bl	3d1fa <z_log_minimal_printk>
   306f0:	2201      	movs	r2, #1
   306f2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   306f6:	4648      	mov	r0, r9
   306f8:	f8cd a000 	str.w	sl, [sp]
   306fc:	ab18      	add	r3, sp, #96	; 0x60
   306fe:	f00d f9bc 	bl	3da7a <z_impl_zsock_setsockopt>
	if (err) {
   30702:	2800      	cmp	r0, #0
   30704:	d0cf      	beq.n	306a6 <download_client_connect+0x292>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   30706:	f00d fbd0 	bl	3deaa <__errno>
   3070a:	2145      	movs	r1, #69	; 0x45
   3070c:	6802      	ldr	r2, [r0, #0]
   3070e:	4810      	ldr	r0, [pc, #64]	; (30750 <download_client_connect+0x33c>)
   30710:	e7c1      	b.n	30696 <download_client_connect+0x282>
   30712:	bf00      	nop
   30714:	0004b291 	.word	0x0004b291
   30718:	00046d78 	.word	0x00046d78
   3071c:	0004b2c9 	.word	0x0004b2c9
   30720:	0004b2ce 	.word	0x0004b2ce
   30724:	0004b2f7 	.word	0x0004b2f7
   30728:	0004b322 	.word	0x0004b322
   3072c:	0004b35b 	.word	0x0004b35b
   30730:	0004b380 	.word	0x0004b380
   30734:	0004b386 	.word	0x0004b386
   30738:	0004b3a1 	.word	0x0004b3a1
   3073c:	0004b3d1 	.word	0x0004b3d1
   30740:	0004b210 	.word	0x0004b210
   30744:	0004494f 	.word	0x0004494f
   30748:	0004b45d 	.word	0x0004b45d
   3074c:	0004b402 	.word	0x0004b402
   30750:	0004b42a 	.word	0x0004b42a
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   30754:	a818      	add	r0, sp, #96	; 0x60
   30756:	f7ec fd74 	bl	1d242 <strlen>
   3075a:	2202      	movs	r2, #2
   3075c:	9000      	str	r0, [sp, #0]
   3075e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30762:	4648      	mov	r0, r9
   30764:	ab18      	add	r3, sp, #96	; 0x60
   30766:	f00d f988 	bl	3da7a <z_impl_zsock_setsockopt>
	if (err) {
   3076a:	b168      	cbz	r0, 30788 <download_client_connect+0x374>
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   3076c:	f00d fb9d 	bl	3deaa <__errno>
   30770:	2145      	movs	r1, #69	; 0x45
   30772:	6803      	ldr	r3, [r0, #0]
   30774:	aa18      	add	r2, sp, #96	; 0x60
   30776:	4816      	ldr	r0, [pc, #88]	; (307d0 <download_client_connect+0x3bc>)
   30778:	f00c fd3f 	bl	3d1fa <z_log_minimal_printk>
		return -errno;
   3077c:	f00d fb95 	bl	3deaa <__errno>
   30780:	6806      	ldr	r6, [r0, #0]
			if (err) {
   30782:	b10e      	cbz	r6, 30788 <download_client_connect+0x374>
		err = -errno;
   30784:	4276      	negs	r6, r6
   30786:	e759      	b.n	3063c <download_client_connect+0x228>
	LOG_INF("Connecting to %s", log_strdup(dl->host));
   30788:	2149      	movs	r1, #73	; 0x49
   3078a:	f8d4 2924 	ldr.w	r2, [r4, #2340]	; 0x924
   3078e:	4811      	ldr	r0, [pc, #68]	; (307d4 <download_client_connect+0x3c0>)
   30790:	f00c fd33 	bl	3d1fa <z_log_minimal_printk>
	err = connect(dl->fd, &dl->remote_addr, addrlen);
   30794:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   30796:	463a      	mov	r2, r7
   30798:	4641      	mov	r1, r8
   3079a:	f00d f89b 	bl	3d8d4 <z_impl_zsock_connect>
	if (err) {
   3079e:	2800      	cmp	r0, #0
   307a0:	f43f aec7 	beq.w	30532 <download_client_connect+0x11e>
		LOG_ERR("Unable to connect, errno %d", errno);
   307a4:	f00d fb81 	bl	3deaa <__errno>
   307a8:	2145      	movs	r1, #69	; 0x45
   307aa:	6802      	ldr	r2, [r0, #0]
   307ac:	480a      	ldr	r0, [pc, #40]	; (307d8 <download_client_connect+0x3c4>)
   307ae:	f00c fd24 	bl	3d1fa <z_log_minimal_printk>
		err = -errno;
   307b2:	f00d fb7a 	bl	3deaa <__errno>
   307b6:	6806      	ldr	r6, [r0, #0]
	if (err) {
   307b8:	2e00      	cmp	r6, #0
   307ba:	d1e3      	bne.n	30784 <download_client_connect+0x370>
   307bc:	e6b9      	b.n	30532 <download_client_connect+0x11e>
			return -EPROTONOSUPPORT;
   307be:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   307c2:	e6b6      	b.n	30532 <download_client_connect+0x11e>
	switch (dl->remote_addr.sa_family) {
   307c4:	f06f 0569 	mvn.w	r5, #105	; 0x69
   307c8:	e6b3      	b.n	30532 <download_client_connect+0x11e>
		return -EINVAL;
   307ca:	f06f 0515 	mvn.w	r5, #21
   307ce:	e63e      	b.n	3044e <download_client_connect+0x3a>
   307d0:	0004b47f 	.word	0x0004b47f
   307d4:	0004b4b0 	.word	0x0004b4b0
   307d8:	0004b4c6 	.word	0x0004b4c6

000307dc <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   307dc:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   307de:	4604      	mov	r4, r0
   307e0:	b1a8      	cbz	r0, 3080e <download_client_disconnect+0x32>
   307e2:	6800      	ldr	r0, [r0, #0]
   307e4:	2800      	cmp	r0, #0
   307e6:	db12      	blt.n	3080e <download_client_disconnect+0x32>
	return z_impl_zsock_close(sock);
   307e8:	f00d f850 	bl	3d88c <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   307ec:	b158      	cbz	r0, 30806 <download_client_disconnect+0x2a>
		LOG_ERR("Failed to close socket, errno %d", errno);
   307ee:	f00d fb5c 	bl	3deaa <__errno>
   307f2:	2145      	movs	r1, #69	; 0x45
   307f4:	6802      	ldr	r2, [r0, #0]
   307f6:	4807      	ldr	r0, [pc, #28]	; (30814 <download_client_disconnect+0x38>)
   307f8:	f00c fcff 	bl	3d1fa <z_log_minimal_printk>
		return -errno;
   307fc:	f00d fb55 	bl	3deaa <__errno>
   30800:	6800      	ldr	r0, [r0, #0]
   30802:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   30804:	bd10      	pop	{r4, pc}
	client->fd = -1;
   30806:	f04f 33ff 	mov.w	r3, #4294967295
   3080a:	6023      	str	r3, [r4, #0]
	return 0;
   3080c:	e7fa      	b.n	30804 <download_client_disconnect+0x28>
		return -EINVAL;
   3080e:	f06f 0015 	mvn.w	r0, #21
   30812:	e7f7      	b.n	30804 <download_client_disconnect+0x28>
   30814:	0004b4e7 	.word	0x0004b4e7

00030818 <reconnect>:
{
   30818:	b510      	push	{r4, lr}
   3081a:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   3081c:	2149      	movs	r1, #73	; 0x49
   3081e:	4808      	ldr	r0, [pc, #32]	; (30840 <reconnect+0x28>)
   30820:	f00c fceb 	bl	3d1fa <z_log_minimal_printk>
	err = download_client_disconnect(dl);
   30824:	4620      	mov	r0, r4
   30826:	f7ff ffd9 	bl	307dc <download_client_disconnect>
	if (err) {
   3082a:	b940      	cbnz	r0, 3083e <reconnect+0x26>
	err = download_client_connect(dl, dl->host, &dl->config);
   3082c:	4620      	mov	r0, r4
   3082e:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   30832:	f604 122c 	addw	r2, r4, #2348	; 0x92c
}
   30836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   3083a:	f7ff bdeb 	b.w	30414 <download_client_connect>
}
   3083e:	bd10      	pop	{r4, pc}
   30840:	0004b50d 	.word	0x0004b50d

00030844 <download_thread>:
{
   30844:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   30848:	4605      	mov	r5, r0
	int rc = 0;
   3084a:	2400      	movs	r4, #0
	struct timeval timeo = {
   3084c:	f04f 0a1e 	mov.w	sl, #30
   30850:	f04f 0b00 	mov.w	fp, #0
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   30854:	4f84      	ldr	r7, [pc, #528]	; (30a68 <download_thread+0x224>)
{
   30856:	b086      	sub	sp, #24
	k_thread_suspend(dl->tid);
   30858:	f8d5 097c 	ldr.w	r0, [r5, #2428]	; 0x97c
	z_impl_k_thread_suspend(thread);
   3085c:	f007 ffd8 	bl	38810 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   30860:	f8df 822c 	ldr.w	r8, [pc, #556]	; 30a90 <download_thread+0x24c>
   30864:	f640 03fb 	movw	r3, #2299	; 0x8fb
   30868:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   3086c:	429a      	cmp	r2, r3
   3086e:	d90a      	bls.n	30886 <download_thread+0x42>
   30870:	4639      	mov	r1, r7
   30872:	4640      	mov	r0, r8
   30874:	f240 12e7 	movw	r2, #487	; 0x1e7
   30878:	f00c fc85 	bl	3d186 <assert_print>
   3087c:	f240 11e7 	movw	r1, #487	; 0x1e7
   30880:	4638      	mov	r0, r7
   30882:	f00c fc79 	bl	3d178 <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   30886:	f640 03fc 	movw	r3, #2300	; 0x8fc
   3088a:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   3088e:	429a      	cmp	r2, r3
   30890:	d108      	bne.n	308a4 <download_thread+0x60>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   30892:	2145      	movs	r1, #69	; 0x45
   30894:	4875      	ldr	r0, [pc, #468]	; (30a6c <download_thread+0x228>)
   30896:	f00c fcb0 	bl	3d1fa <z_log_minimal_printk>
			error_evt_send(dl, E2BIG);
   3089a:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   3089c:	4628      	mov	r0, r5
   3089e:	f00f fb31 	bl	3ff04 <error_evt_send>
				break;
   308a2:	e7d9      	b.n	30858 <download_thread+0x14>
	switch (dl->proto) {
   308a4:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   308a8:	2b06      	cmp	r3, #6
   308aa:	d002      	beq.n	308b2 <download_thread+0x6e>
   308ac:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   308b0:	d138      	bne.n	30924 <download_thread+0xe0>
	struct timeval timeo = {
   308b2:	2300      	movs	r3, #0
   308b4:	e9cd ab02 	strd	sl, fp, [sp, #8]
	err = set_recv_socket_timeout(dl->fd, timeout);
   308b8:	6828      	ldr	r0, [r5, #0]
	struct timeval timeo = {
   308ba:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   308bc:	2310      	movs	r3, #16
   308be:	2214      	movs	r2, #20
   308c0:	9300      	str	r3, [sp, #0]
   308c2:	2101      	movs	r1, #1
   308c4:	ab02      	add	r3, sp, #8
   308c6:	f00d f8d8 	bl	3da7a <z_impl_zsock_setsockopt>
	if (err) {
   308ca:	4603      	mov	r3, r0
   308cc:	b148      	cbz	r0, 308e2 <download_thread+0x9e>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   308ce:	f00d faec 	bl	3deaa <__errno>
   308d2:	2157      	movs	r1, #87	; 0x57
   308d4:	6802      	ldr	r2, [r0, #0]
   308d6:	4866      	ldr	r0, [pc, #408]	; (30a70 <download_thread+0x22c>)
   308d8:	f00c fc8f 	bl	3d1fa <z_log_minimal_printk>
		return -1;
   308dc:	f04f 36ff 	mov.w	r6, #4294967295
   308e0:	e00d      	b.n	308fe <download_thread+0xba>
	return recv(dl->fd, dl->buf + dl->offset, sizeof(dl->buf) - dl->offset, 0);
   308e2:	6828      	ldr	r0, [r5, #0]
   308e4:	f8d5 6918 	ldr.w	r6, [r5, #2328]	; 0x918
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   308e8:	f5c6 620f 	rsb	r2, r6, #2288	; 0x8f0
   308ec:	f105 011c 	add.w	r1, r5, #28
   308f0:	4431      	add	r1, r6
   308f2:	e9cd 3300 	strd	r3, r3, [sp]
   308f6:	320c      	adds	r2, #12
   308f8:	f00d f86a 	bl	3d9d0 <z_impl_zsock_recvfrom>
   308fc:	4606      	mov	r6, r0
		if ((len == 0) || (len == -1)) {
   308fe:	1e73      	subs	r3, r6, #1
   30900:	3303      	adds	r3, #3
   30902:	d94b      	bls.n	3099c <download_thread+0x158>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   30904:	f8d5 3918 	ldr.w	r3, [r5, #2328]	; 0x918
   30908:	b18b      	cbz	r3, 3092e <download_thread+0xea>
   3090a:	f895 3940 	ldrb.w	r3, [r5, #2368]	; 0x940
   3090e:	b173      	cbz	r3, 3092e <download_thread+0xea>
				rc = fragment_evt_send(dl);
   30910:	4628      	mov	r0, r5
   30912:	f7ff fce5 	bl	302e0 <fragment_evt_send>
				if (rc) {
   30916:	4604      	mov	r4, r0
   30918:	b148      	cbz	r0, 3092e <download_thread+0xea>
			LOG_INF("Fragment refused, download stopped.");
   3091a:	2149      	movs	r1, #73	; 0x49
   3091c:	4855      	ldr	r0, [pc, #340]	; (30a74 <download_thread+0x230>)
   3091e:	f00c fc6c 	bl	3d1fa <z_log_minimal_printk>
   30922:	e799      	b.n	30858 <download_thread+0x14>
		LOG_ERR("unhandled proto");
   30924:	2145      	movs	r1, #69	; 0x45
   30926:	4854      	ldr	r0, [pc, #336]	; (30a78 <download_thread+0x234>)
   30928:	f00c fc67 	bl	3d1fa <z_log_minimal_printk>
   3092c:	e7d6      	b.n	308dc <download_thread+0x98>
			if (len == -1) {
   3092e:	3601      	adds	r6, #1
   30930:	d12e      	bne.n	30990 <download_thread+0x14c>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30932:	f00d faba 	bl	3deaa <__errno>
   30936:	6803      	ldr	r3, [r0, #0]
   30938:	2b74      	cmp	r3, #116	; 0x74
   3093a:	d11d      	bne.n	30978 <download_thread+0x134>
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   3093c:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   30940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   30944:	2b11      	cmp	r3, #17
   30946:	d073      	beq.n	30a30 <download_thread+0x1ec>
					error_cause = ETIMEDOUT;
   30948:	2474      	movs	r4, #116	; 0x74
				LOG_ERR("Error in recv(), errno %d", errno);
   3094a:	f00d faae 	bl	3deaa <__errno>
   3094e:	2145      	movs	r1, #69	; 0x45
   30950:	6802      	ldr	r2, [r0, #0]
   30952:	484a      	ldr	r0, [pc, #296]	; (30a7c <download_thread+0x238>)
   30954:	f00c fc51 	bl	3d1fa <z_log_minimal_printk>
			rc = error_evt_send(dl, error_cause);
   30958:	4621      	mov	r1, r4
   3095a:	4628      	mov	r0, r5
   3095c:	f00f fad2 	bl	3ff04 <error_evt_send>
			if (rc) {
   30960:	4604      	mov	r4, r0
   30962:	2800      	cmp	r0, #0
   30964:	f47f af78 	bne.w	30858 <download_thread+0x14>
			rc = reconnect(dl);
   30968:	4628      	mov	r0, r5
   3096a:	f7ff ff55 	bl	30818 <reconnect>
			if (rc) {
   3096e:	4604      	mov	r4, r0
   30970:	2800      	cmp	r0, #0
   30972:	d05d      	beq.n	30a30 <download_thread+0x1ec>
				error_evt_send(dl, EHOSTDOWN);
   30974:	2175      	movs	r1, #117	; 0x75
   30976:	e791      	b.n	3089c <download_thread+0x58>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30978:	f00d fa97 	bl	3deaa <__errno>
   3097c:	6803      	ldr	r3, [r0, #0]
   3097e:	2b0b      	cmp	r3, #11
   30980:	d0dc      	beq.n	3093c <download_thread+0xf8>
				    (errno == EAGAIN)) {
   30982:	f00d fa92 	bl	3deaa <__errno>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30986:	6803      	ldr	r3, [r0, #0]
   30988:	2b0b      	cmp	r3, #11
   3098a:	d0d7      	beq.n	3093c <download_thread+0xf8>
			error_cause = ECONNRESET;
   3098c:	2468      	movs	r4, #104	; 0x68
   3098e:	e7dc      	b.n	3094a <download_thread+0x106>
				LOG_WRN("Peer closed connection!");
   30990:	2157      	movs	r1, #87	; 0x57
   30992:	483b      	ldr	r0, [pc, #236]	; (30a80 <download_thread+0x23c>)
   30994:	f00c fc31 	bl	3d1fa <z_log_minimal_printk>
			error_cause = ECONNRESET;
   30998:	2468      	movs	r4, #104	; 0x68
   3099a:	e7dd      	b.n	30958 <download_thread+0x114>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   3099c:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   309a0:	2b06      	cmp	r3, #6
   309a2:	d002      	beq.n	309aa <download_thread+0x166>
   309a4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   309a8:	d106      	bne.n	309b8 <download_thread+0x174>
			rc = http_parse(client, len);
   309aa:	4631      	mov	r1, r6
   309ac:	4628      	mov	r0, r5
   309ae:	f000 f9e1 	bl	30d74 <http_parse>
			if (rc > 0) {
   309b2:	1e04      	subs	r4, r0, #0
   309b4:	f73f af56 	bgt.w	30864 <download_thread+0x20>
		if (rc < 0) {
   309b8:	2c00      	cmp	r4, #0
   309ba:	da01      	bge.n	309c0 <download_thread+0x17c>
			error_evt_send(dl, EBADMSG);
   309bc:	214d      	movs	r1, #77	; 0x4d
   309be:	e76d      	b.n	3089c <download_thread+0x58>
		if (dl->file_size) {
   309c0:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   309c4:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
		if (dl->file_size) {
   309c8:	b32b      	cbz	r3, 30a16 <download_thread+0x1d2>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   309ca:	2164      	movs	r1, #100	; 0x64
   309cc:	4351      	muls	r1, r2
   309ce:	fbb1 f1f3 	udiv	r1, r1, r3
   309d2:	482c      	ldr	r0, [pc, #176]	; (30a84 <download_thread+0x240>)
   309d4:	9100      	str	r1, [sp, #0]
   309d6:	2149      	movs	r1, #73	; 0x49
   309d8:	f00c fc0f 	bl	3d1fa <z_log_minimal_printk>
		rc = fragment_evt_send(dl);
   309dc:	4628      	mov	r0, r5
   309de:	f7ff fc7f 	bl	302e0 <fragment_evt_send>
		if (rc) {
   309e2:	4604      	mov	r4, r0
   309e4:	2800      	cmp	r0, #0
   309e6:	d198      	bne.n	3091a <download_thread+0xd6>
		if (dl->progress == dl->file_size) {
   309e8:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
   309ec:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
   309f0:	429a      	cmp	r2, r3
   309f2:	d115      	bne.n	30a20 <download_thread+0x1dc>
			LOG_INF("Download complete");
   309f4:	2149      	movs	r1, #73	; 0x49
   309f6:	4824      	ldr	r0, [pc, #144]	; (30a88 <download_thread+0x244>)
   309f8:	f00c fbff 	bl	3d1fa <z_log_minimal_printk>
			const struct download_client_evt evt = {
   309fc:	2302      	movs	r3, #2
   309fe:	e9cd 4402 	strd	r4, r4, [sp, #8]
   30a02:	f88d 3008 	strb.w	r3, [sp, #8]
			dl->callback(&evt);
   30a06:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
   30a0a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
			const struct download_client_evt evt = {
   30a0e:	9404      	str	r4, [sp, #16]
			dl->callback(&evt);
   30a10:	a802      	add	r0, sp, #8
   30a12:	4798      	blx	r3
			break;
   30a14:	e720      	b.n	30858 <download_thread+0x14>
			LOG_INF("Downloaded %u bytes", dl->progress);
   30a16:	2149      	movs	r1, #73	; 0x49
   30a18:	481c      	ldr	r0, [pc, #112]	; (30a8c <download_thread+0x248>)
   30a1a:	f00c fbee 	bl	3d1fa <z_log_minimal_printk>
   30a1e:	e7dd      	b.n	309dc <download_thread+0x198>
		if (dl->http.connection_close) {
   30a20:	f895 3941 	ldrb.w	r3, [r5, #2369]	; 0x941
   30a24:	b123      	cbz	r3, 30a30 <download_thread+0x1ec>
			dl->http.connection_close = false;
   30a26:	f885 0941 	strb.w	r0, [r5, #2369]	; 0x941
			reconnect(dl);
   30a2a:	4628      	mov	r0, r5
   30a2c:	f7ff fef4 	bl	30818 <reconnect>
		dl->offset = 0;
   30a30:	2600      	movs	r6, #0
			rc = request_send(dl);
   30a32:	4628      	mov	r0, r5
		dl->offset = 0;
   30a34:	f8c5 6918 	str.w	r6, [r5, #2328]	; 0x918
			dl->http.has_header = false;
   30a38:	f885 6940 	strb.w	r6, [r5, #2368]	; 0x940
			rc = request_send(dl);
   30a3c:	f00f fa74 	bl	3ff28 <request_send>
			if (rc) {
   30a40:	4604      	mov	r4, r0
   30a42:	2800      	cmp	r0, #0
   30a44:	f43f af0e 	beq.w	30864 <download_thread+0x20>
				rc = error_evt_send(dl, ECONNRESET);
   30a48:	2168      	movs	r1, #104	; 0x68
   30a4a:	4628      	mov	r0, r5
   30a4c:	f00f fa5a 	bl	3ff04 <error_evt_send>
				if (rc) {
   30a50:	4604      	mov	r4, r0
   30a52:	2800      	cmp	r0, #0
   30a54:	f47f af00 	bne.w	30858 <download_thread+0x14>
				rc = reconnect(dl);
   30a58:	4628      	mov	r0, r5
   30a5a:	f7ff fedd 	bl	30818 <reconnect>
				if (rc) {
   30a5e:	4604      	mov	r4, r0
   30a60:	2800      	cmp	r0, #0
   30a62:	d0e6      	beq.n	30a32 <download_thread+0x1ee>
   30a64:	e786      	b.n	30974 <download_thread+0x130>
   30a66:	bf00      	nop
   30a68:	0004b210 	.word	0x0004b210
   30a6c:	0004b521 	.word	0x0004b521
   30a70:	0004b255 	.word	0x0004b255
   30a74:	0004b568 	.word	0x0004b568
   30a78:	0004b553 	.word	0x0004b553
   30a7c:	0004b591 	.word	0x0004b591
   30a80:	0004b5b0 	.word	0x0004b5b0
   30a84:	0004b5cd 	.word	0x0004b5cd
   30a88:	0004ac4b 	.word	0x0004ac4b
   30a8c:	0004b5f0 	.word	0x0004b5f0
   30a90:	0004494f 	.word	0x0004494f

00030a94 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   30a94:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (client == NULL) {
   30a96:	4604      	mov	r4, r0
   30a98:	b1f8      	cbz	r0, 30ada <download_client_start+0x46>
		return -EINVAL;
	}

	if (client->fd < 0) {
   30a9a:	6803      	ldr	r3, [r0, #0]
   30a9c:	2b00      	cmp	r3, #0
   30a9e:	db1f      	blt.n	30ae0 <download_client_start+0x4c>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   30aa0:	2300      	movs	r3, #0
	client->file = file;
   30aa2:	f8c0 1928 	str.w	r1, [r0, #2344]	; 0x928
	client->file_size = 0;
   30aa6:	f8c0 391c 	str.w	r3, [r0, #2332]	; 0x91c
	client->progress = from;
   30aaa:	f8c0 2920 	str.w	r2, [r0, #2336]	; 0x920

	client->offset = 0;
   30aae:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918
	client->http.has_header = false;
   30ab2:	f880 3940 	strb.w	r3, [r0, #2368]	; 0x940
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   30ab6:	f00f fa37 	bl	3ff28 <request_send>
	if (err) {
   30aba:	4605      	mov	r5, r0
   30abc:	b958      	cbnz	r0, 30ad6 <download_client_start+0x42>
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   30abe:	2149      	movs	r1, #73	; 0x49
   30ac0:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   30ac4:	f8d4 2928 	ldr.w	r2, [r4, #2344]	; 0x928
   30ac8:	4807      	ldr	r0, [pc, #28]	; (30ae8 <download_client_start+0x54>)
   30aca:	f00c fb96 	bl	3d1fa <z_log_minimal_printk>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   30ace:	f8d4 097c 	ldr.w	r0, [r4, #2428]	; 0x97c
	z_impl_k_thread_resume(thread);
   30ad2:	f007 fcc5 	bl	38460 <z_impl_k_thread_resume>

	return 0;
}
   30ad6:	4628      	mov	r0, r5
   30ad8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   30ada:	f06f 0515 	mvn.w	r5, #21
   30ade:	e7fa      	b.n	30ad6 <download_client_start+0x42>
		return -ENOTCONN;
   30ae0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   30ae4:	e7f7      	b.n	30ad6 <download_client_start+0x42>
   30ae6:	bf00      	nop
   30ae8:	0004b609 	.word	0x0004b609

00030aec <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   30aec:	b570      	push	{r4, r5, r6, lr}
   30aee:	460d      	mov	r5, r1
   30af0:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   30af2:	4915      	ldr	r1, [pc, #84]	; (30b48 <url_parse_proto+0x5c>)
   30af4:	2205      	movs	r2, #5
{
   30af6:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   30af8:	f011 fa05 	bl	41f06 <strncmp>
   30afc:	b928      	cbnz	r0, 30b0a <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   30afe:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   30b02:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   30b04:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   30b06:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   30b08:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   30b0a:	2204      	movs	r2, #4
   30b0c:	4630      	mov	r0, r6
   30b0e:	490f      	ldr	r1, [pc, #60]	; (30b4c <url_parse_proto+0x60>)
   30b10:	f011 f9f9 	bl	41f06 <strncmp>
   30b14:	b908      	cbnz	r0, 30b1a <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   30b16:	2306      	movs	r3, #6
   30b18:	e7f3      	b.n	30b02 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   30b1a:	2205      	movs	r2, #5
   30b1c:	4630      	mov	r0, r6
   30b1e:	490c      	ldr	r1, [pc, #48]	; (30b50 <url_parse_proto+0x64>)
   30b20:	f011 f9f1 	bl	41f06 <strncmp>
   30b24:	b920      	cbnz	r0, 30b30 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   30b26:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   30b2a:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   30b2c:	2302      	movs	r3, #2
   30b2e:	e7ea      	b.n	30b06 <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   30b30:	2204      	movs	r2, #4
   30b32:	4630      	mov	r0, r6
   30b34:	4907      	ldr	r1, [pc, #28]	; (30b54 <url_parse_proto+0x68>)
   30b36:	f011 f9e6 	bl	41f06 <strncmp>
   30b3a:	b908      	cbnz	r0, 30b40 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   30b3c:	2311      	movs	r3, #17
   30b3e:	e7f4      	b.n	30b2a <url_parse_proto+0x3e>
		return -EINVAL;
   30b40:	f06f 0015 	mvn.w	r0, #21
   30b44:	e7e0      	b.n	30b08 <url_parse_proto+0x1c>
   30b46:	bf00      	nop
   30b48:	0004b623 	.word	0x0004b623
   30b4c:	0004b629 	.word	0x0004b629
   30b50:	0004b62e 	.word	0x0004b62e
   30b54:	0004b634 	.word	0x0004b634

00030b58 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   30b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30b5a:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   30b5c:	9001      	str	r0, [sp, #4]
{
   30b5e:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   30b60:	a801      	add	r0, sp, #4
   30b62:	4918      	ldr	r1, [pc, #96]	; (30bc4 <url_parse_host+0x6c>)
{
   30b64:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   30b66:	f00f f9f4 	bl	3ff52 <swallow>

	if (cur[0] == '[') {
   30b6a:	9801      	ldr	r0, [sp, #4]
   30b6c:	7803      	ldrb	r3, [r0, #0]
   30b6e:	2b5b      	cmp	r3, #91	; 0x5b
   30b70:	d111      	bne.n	30b96 <url_parse_host+0x3e>
		/* literal IPv6 address */
		end = strchr(cur, ']');
   30b72:	215d      	movs	r1, #93	; 0x5d
   30b74:	f011 f9b2 	bl	41edc <strchr>

		if (!end) {
   30b78:	b1f0      	cbz	r0, 30bb8 <url_parse_host+0x60>
			return -EINVAL;
		}
		++end;
   30b7a:	3001      	adds	r0, #1
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   30b7c:	9901      	ldr	r1, [sp, #4]
   30b7e:	1a44      	subs	r4, r0, r1
   30b80:	1c63      	adds	r3, r4, #1
   30b82:	42b3      	cmp	r3, r6
   30b84:	d81b      	bhi.n	30bbe <url_parse_host+0x66>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30b86:	4622      	mov	r2, r4
   30b88:	4628      	mov	r0, r5
   30b8a:	f010 ffc9 	bl	41b20 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   30b8e:	2000      	movs	r0, #0
   30b90:	5528      	strb	r0, [r5, r4]

	return 0;
}
   30b92:	b002      	add	sp, #8
   30b94:	bd70      	pop	{r4, r5, r6, pc}
		end = strchr(cur, ':');
   30b96:	213a      	movs	r1, #58	; 0x3a
   30b98:	f011 f9a0 	bl	41edc <strchr>
		if (!end) {
   30b9c:	2800      	cmp	r0, #0
   30b9e:	d1ed      	bne.n	30b7c <url_parse_host+0x24>
			end = strchr(cur, '/');
   30ba0:	212f      	movs	r1, #47	; 0x2f
   30ba2:	9801      	ldr	r0, [sp, #4]
   30ba4:	f011 f99a 	bl	41edc <strchr>
			if (!end) {
   30ba8:	2800      	cmp	r0, #0
   30baa:	d1e7      	bne.n	30b7c <url_parse_host+0x24>
				end = url + strlen(url) + 1;
   30bac:	4620      	mov	r0, r4
   30bae:	f7ec fb48 	bl	1d242 <strlen>
   30bb2:	1c43      	adds	r3, r0, #1
   30bb4:	18e0      	adds	r0, r4, r3
   30bb6:	e7e1      	b.n	30b7c <url_parse_host+0x24>
			return -EINVAL;
   30bb8:	f06f 0015 	mvn.w	r0, #21
   30bbc:	e7e9      	b.n	30b92 <url_parse_host+0x3a>
		return -E2BIG;
   30bbe:	f06f 0006 	mvn.w	r0, #6
   30bc2:	e7e6      	b.n	30b92 <url_parse_host+0x3a>
   30bc4:	0004b639 	.word	0x0004b639

00030bc8 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   30bc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   30bca:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   30bcc:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   30bce:	491b      	ldr	r1, [pc, #108]	; (30c3c <url_parse_port+0x74>)
   30bd0:	a801      	add	r0, sp, #4
   30bd2:	f00f f9be 	bl	3ff52 <swallow>

	if (cur[0] == '[') {
   30bd6:	9b01      	ldr	r3, [sp, #4]
   30bd8:	781b      	ldrb	r3, [r3, #0]
   30bda:	2b5b      	cmp	r3, #91	; 0x5b
   30bdc:	d103      	bne.n	30be6 <url_parse_port+0x1e>
		/* literal IPv6 address */
		swallow(&cur, "]");
   30bde:	4918      	ldr	r1, [pc, #96]	; (30c40 <url_parse_port+0x78>)
   30be0:	a801      	add	r0, sp, #4
   30be2:	f00f f9b6 	bl	3ff52 <swallow>
	}

	err = swallow(&cur, ":");
   30be6:	4917      	ldr	r1, [pc, #92]	; (30c44 <url_parse_port+0x7c>)
   30be8:	a801      	add	r0, sp, #4
   30bea:	f00f f9b2 	bl	3ff52 <swallow>
	if (err) {
   30bee:	4605      	mov	r5, r0
   30bf0:	bb08      	cbnz	r0, 30c36 <url_parse_port+0x6e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   30bf2:	212f      	movs	r1, #47	; 0x2f
   30bf4:	9801      	ldr	r0, [sp, #4]
   30bf6:	f011 f971 	bl	41edc <strchr>
	if (!end) {
   30bfa:	4604      	mov	r4, r0
		len = strlen(cur);
   30bfc:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   30bfe:	b9c4      	cbnz	r4, 30c32 <url_parse_port+0x6a>
		len = strlen(cur);
   30c00:	f7ec fb1f 	bl	1d242 <strlen>
   30c04:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MIN(len, sizeof(aport) - 1);
   30c06:	2c07      	cmp	r4, #7
   30c08:	bf28      	it	cs
   30c0a:	2407      	movcs	r4, #7

	memcpy(aport, cur, len);
   30c0c:	2308      	movs	r3, #8
   30c0e:	4622      	mov	r2, r4
   30c10:	9901      	ldr	r1, [sp, #4]
   30c12:	eb0d 0003 	add.w	r0, sp, r3
   30c16:	f010 ff90 	bl	41b3a <__memcpy_chk>
	aport[len] = '\0';
   30c1a:	ab04      	add	r3, sp, #16
   30c1c:	441c      	add	r4, r3
   30c1e:	2300      	movs	r3, #0

	*port = atoi(aport);
   30c20:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   30c22:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   30c26:	f010 ff59 	bl	41adc <atoi>
   30c2a:	8030      	strh	r0, [r6, #0]

	return 0;
}
   30c2c:	4628      	mov	r0, r5
   30c2e:	b004      	add	sp, #16
   30c30:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   30c32:	1a24      	subs	r4, r4, r0
   30c34:	e7e7      	b.n	30c06 <url_parse_port+0x3e>
		return -EINVAL;
   30c36:	f06f 0515 	mvn.w	r5, #21
   30c3a:	e7f7      	b.n	30c2c <url_parse_port+0x64>
   30c3c:	0004b639 	.word	0x0004b639
   30c40:	0004ad94 	.word	0x0004ad94
   30c44:	0004c2aa 	.word	0x0004c2aa

00030c48 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   30c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30c4a:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   30c4c:	4915      	ldr	r1, [pc, #84]	; (30ca4 <url_parse_file+0x5c>)
{
   30c4e:	4614      	mov	r4, r2
	cur = url;
   30c50:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   30c52:	f011 f99f 	bl	41f94 <strstr>
   30c56:	b940      	cbnz	r0, 30c6a <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   30c58:	9801      	ldr	r0, [sp, #4]
   30c5a:	f7ec faf2 	bl	1d242 <strlen>
   30c5e:	3001      	adds	r0, #1
   30c60:	42a0      	cmp	r0, r4
   30c62:	d912      	bls.n	30c8a <url_parse_file+0x42>
		return -E2BIG;
   30c64:	f06f 0006 	mvn.w	r0, #6
   30c68:	e006      	b.n	30c78 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   30c6a:	490f      	ldr	r1, [pc, #60]	; (30ca8 <url_parse_file+0x60>)
   30c6c:	a801      	add	r0, sp, #4
   30c6e:	f00f f970 	bl	3ff52 <swallow>
		if (err) {
   30c72:	b118      	cbz	r0, 30c7c <url_parse_file+0x34>
			return -EINVAL;
   30c74:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   30c78:	b003      	add	sp, #12
   30c7a:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   30c7c:	490b      	ldr	r1, [pc, #44]	; (30cac <url_parse_file+0x64>)
   30c7e:	a801      	add	r0, sp, #4
   30c80:	f00f f967 	bl	3ff52 <swallow>
		if (err) {
   30c84:	2800      	cmp	r0, #0
   30c86:	d0e7      	beq.n	30c58 <url_parse_file+0x10>
   30c88:	e7f4      	b.n	30c74 <url_parse_file+0x2c>
	len = strlen(cur);
   30c8a:	9801      	ldr	r0, [sp, #4]
   30c8c:	f7ec fad9 	bl	1d242 <strlen>
   30c90:	9901      	ldr	r1, [sp, #4]
   30c92:	4604      	mov	r4, r0
   30c94:	4602      	mov	r2, r0
   30c96:	4628      	mov	r0, r5
   30c98:	f010 ff42 	bl	41b20 <memcpy>
	file[len] = '\0';
   30c9c:	2300      	movs	r3, #0
	return 0;
   30c9e:	4618      	mov	r0, r3
	file[len] = '\0';
   30ca0:	552b      	strb	r3, [r5, r4]
	return 0;
   30ca2:	e7e9      	b.n	30c78 <url_parse_file+0x30>
   30ca4:	0004b63a 	.word	0x0004b63a
   30ca8:	0004b639 	.word	0x0004b639
   30cac:	0004b63b 	.word	0x0004b63b

00030cb0 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len, int timeout);

int http_get_request_send(struct download_client *client)
{
   30cb0:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   30cb2:	f8d0 3924 	ldr.w	r3, [r0, #2340]	; 0x924
{
   30cb6:	4605      	mov	r5, r0
   30cb8:	b0d4      	sub	sp, #336	; 0x150
	__ASSERT_NO_MSG(client->host);
   30cba:	b943      	cbnz	r3, 30cce <http_get_request_send+0x1e>
   30cbc:	4929      	ldr	r1, [pc, #164]	; (30d64 <http_get_request_send+0xb4>)
   30cbe:	482a      	ldr	r0, [pc, #168]	; (30d68 <http_get_request_send+0xb8>)
   30cc0:	2237      	movs	r2, #55	; 0x37
   30cc2:	f00c fa60 	bl	3d186 <assert_print>
   30cc6:	2137      	movs	r1, #55	; 0x37
   30cc8:	4826      	ldr	r0, [pc, #152]	; (30d64 <http_get_request_send+0xb4>)
   30cca:	f00c fa55 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   30cce:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   30cd2:	b943      	cbnz	r3, 30ce6 <http_get_request_send+0x36>
   30cd4:	4923      	ldr	r1, [pc, #140]	; (30d64 <http_get_request_send+0xb4>)
   30cd6:	4824      	ldr	r0, [pc, #144]	; (30d68 <http_get_request_send+0xb8>)
   30cd8:	2238      	movs	r2, #56	; 0x38
   30cda:	f00c fa54 	bl	3d186 <assert_print>
   30cde:	2138      	movs	r1, #56	; 0x38
   30ce0:	4820      	ldr	r0, [pc, #128]	; (30d64 <http_get_request_send+0xb4>)
   30ce2:	f00c fa49 	bl	3d178 <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   30ce6:	ae04      	add	r6, sp, #16
   30ce8:	2280      	movs	r2, #128	; 0x80
   30cea:	4631      	mov	r1, r6
   30cec:	f8d5 0924 	ldr.w	r0, [r5, #2340]	; 0x924
   30cf0:	f7ff ff32 	bl	30b58 <url_parse_host>
	if (err) {
   30cf4:	4604      	mov	r4, r0
   30cf6:	bb70      	cbnz	r0, 30d56 <http_get_request_send+0xa6>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   30cf8:	22c0      	movs	r2, #192	; 0xc0
   30cfa:	f8d5 0928 	ldr.w	r0, [r5, #2344]	; 0x928
   30cfe:	a924      	add	r1, sp, #144	; 0x90
   30d00:	f7ff ffa2 	bl	30c48 <url_parse_file>
	if (err) {
   30d04:	4604      	mov	r4, r0
   30d06:	bb30      	cbnz	r0, 30d56 <http_get_request_send+0xa6>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   30d08:	f8d5 3934 	ldr.w	r3, [r5, #2356]	; 0x934
		off = client->progress + client->config.frag_size_override - 1;
   30d0c:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
	if (client->config.frag_size_override) {
   30d10:	b323      	cbz	r3, 30d5c <http_get_request_send+0xac>
		off = client->progress + client->config.frag_size_override - 1;
   30d12:	440b      	add	r3, r1
   30d14:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   30d16:	f8d5 291c 	ldr.w	r2, [r5, #2332]	; 0x91c
   30d1a:	b11a      	cbz	r2, 30d24 <http_get_request_send+0x74>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size - 1);
   30d1c:	3a01      	subs	r2, #1
   30d1e:	4293      	cmp	r3, r2
   30d20:	bf28      	it	cs
   30d22:	4613      	movcs	r3, r2
	}

	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   30d24:	e9cd 1301 	strd	r1, r3, [sp, #4]
   30d28:	4a10      	ldr	r2, [pc, #64]	; (30d6c <http_get_request_send+0xbc>)
   30d2a:	f640 01fc 	movw	r1, #2300	; 0x8fc
   30d2e:	ab24      	add	r3, sp, #144	; 0x90
   30d30:	9600      	str	r6, [sp, #0]
   30d32:	f105 001c 	add.w	r0, r5, #28
   30d36:	f009 ffc1 	bl	3acbc <sniprintf>

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len, 0);
   30d3a:	2200      	movs	r2, #0
		len = snprintf(client->buf,
   30d3c:	4601      	mov	r1, r0
	err = socket_send(client, len, 0);
   30d3e:	4628      	mov	r0, r5
   30d40:	f7ff faf6 	bl	30330 <socket_send>
	if (err) {
   30d44:	4604      	mov	r4, r0
   30d46:	b130      	cbz	r0, 30d56 <http_get_request_send+0xa6>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   30d48:	f00d f8af 	bl	3deaa <__errno>
   30d4c:	2145      	movs	r1, #69	; 0x45
   30d4e:	6802      	ldr	r2, [r0, #0]
   30d50:	4807      	ldr	r0, [pc, #28]	; (30d70 <http_get_request_send+0xc0>)
   30d52:	f00c fa52 	bl	3d1fa <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   30d56:	4620      	mov	r0, r4
   30d58:	b054      	add	sp, #336	; 0x150
   30d5a:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   30d5c:	f201 33ff 	addw	r3, r1, #1023	; 0x3ff
   30d60:	e7d9      	b.n	30d16 <http_get_request_send+0x66>
   30d62:	bf00      	nop
   30d64:	0004b63d 	.word	0x0004b63d
   30d68:	0004494f 	.word	0x0004494f
   30d6c:	0004b677 	.word	0x0004b677
   30d70:	0004b6c2 	.word	0x0004b6c2

00030d74 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   30d74:	f8d0 3918 	ldr.w	r3, [r0, #2328]	; 0x918
{
   30d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	client->offset += len;
   30d7c:	440b      	add	r3, r1
   30d7e:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918

	if (!client->http.has_header) {
   30d82:	f890 3940 	ldrb.w	r3, [r0, #2368]	; 0x940
{
   30d86:	4604      	mov	r4, r0
   30d88:	4688      	mov	r8, r1
	if (!client->http.has_header) {
   30d8a:	2b00      	cmp	r3, #0
   30d8c:	f040 8092 	bne.w	30eb4 <http_parse+0x140>
	p = strstr(client->buf, "\r\n\r\n");
   30d90:	f100 071c 	add.w	r7, r0, #28
   30d94:	4638      	mov	r0, r7
   30d96:	4956      	ldr	r1, [pc, #344]	; (30ef0 <http_parse+0x17c>)
   30d98:	f011 f8fc 	bl	41f94 <strstr>
	if (!p || p > client->buf + client->offset) {
   30d9c:	4605      	mov	r5, r0
   30d9e:	b918      	cbnz	r0, 30da8 <http_parse+0x34>
		rc = http_header_parse(client, &hdr_len);
		if (rc > 0) {
			/* Wait for header */
			return 1;
   30da0:	2001      	movs	r0, #1
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   30da2:	b003      	add	sp, #12
   30da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!p || p > client->buf + client->offset) {
   30da8:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   30dac:	443b      	add	r3, r7
   30dae:	4298      	cmp	r0, r3
   30db0:	d8f6      	bhi.n	30da0 <http_parse+0x2c>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   30db2:	484f      	ldr	r0, [pc, #316]	; (30ef0 <http_parse+0x17c>)
   30db4:	f7ec fa45 	bl	1d242 <strlen>
   30db8:	4405      	add	r5, r0
   30dba:	463b      	mov	r3, r7
   30dbc:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   30dbe:	4e4d      	ldr	r6, [pc, #308]	; (30ef4 <http_parse+0x180>)
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   30dc0:	eba5 0907 	sub.w	r9, r5, r7
	for (size_t i = 0; i < *hdr_len; i++) {
   30dc4:	4298      	cmp	r0, r3
   30dc6:	d10a      	bne.n	30dde <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 ");
   30dc8:	4638      	mov	r0, r7
   30dca:	494b      	ldr	r1, [pc, #300]	; (30ef8 <http_parse+0x184>)
   30dcc:	f011 f8e2 	bl	41f94 <strstr>
	if (!p) {
   30dd0:	4606      	mov	r6, r0
   30dd2:	b970      	cbnz	r0, 30df2 <http_parse+0x7e>
		LOG_ERR("Server response missing HTTP/1.1");
   30dd4:	2145      	movs	r1, #69	; 0x45
   30dd6:	4849      	ldr	r0, [pc, #292]	; (30efc <http_parse+0x188>)
				LOG_ERR("No file size in response");
   30dd8:	f00c fa0f 	bl	3d1fa <z_log_minimal_printk>
   30ddc:	e02b      	b.n	30e36 <http_parse+0xc2>
		client->buf[i] = tolower(client->buf[i]);
   30dde:	781a      	ldrb	r2, [r3, #0]
   30de0:	5d91      	ldrb	r1, [r2, r6]
   30de2:	f001 0103 	and.w	r1, r1, #3
   30de6:	2901      	cmp	r1, #1
   30de8:	bf08      	it	eq
   30dea:	3220      	addeq	r2, #32
   30dec:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   30df0:	e7e8      	b.n	30dc4 <http_parse+0x50>
	p += strlen("http/1.1 ");
   30df2:	4841      	ldr	r0, [pc, #260]	; (30ef8 <http_parse+0x184>)
   30df4:	f7ec fa25 	bl	1d242 <strlen>
   30df8:	4406      	add	r6, r0
	http_status = strtoul(p, &q, 10);
   30dfa:	220a      	movs	r2, #10
   30dfc:	4630      	mov	r0, r6
   30dfe:	a901      	add	r1, sp, #4
   30e00:	f00a f966 	bl	3b0d0 <strtoul>
	if (!q) {
   30e04:	9b01      	ldr	r3, [sp, #4]
   30e06:	b913      	cbnz	r3, 30e0e <http_parse+0x9a>
		LOG_ERR("Server response malformed: status code not found");
   30e08:	2145      	movs	r1, #69	; 0x45
   30e0a:	483d      	ldr	r0, [pc, #244]	; (30f00 <http_parse+0x18c>)
   30e0c:	e7e4      	b.n	30dd8 <http_parse+0x64>
	if (http_status != expected_status) {
   30e0e:	28ce      	cmp	r0, #206	; 0xce
   30e10:	d017      	beq.n	30e42 <http_parse+0xce>
		while ((*q != '\0') && (*q != '\r') && (*q != '\n')) {
   30e12:	f242 4201 	movw	r2, #9217	; 0x2401
   30e16:	9901      	ldr	r1, [sp, #4]
   30e18:	780b      	ldrb	r3, [r1, #0]
   30e1a:	2b0d      	cmp	r3, #13
   30e1c:	d80e      	bhi.n	30e3c <http_parse+0xc8>
   30e1e:	fa22 f303 	lsr.w	r3, r2, r3
   30e22:	43db      	mvns	r3, r3
   30e24:	f013 0301 	ands.w	r3, r3, #1
   30e28:	d108      	bne.n	30e3c <http_parse+0xc8>
		*q = '\0';
   30e2a:	700b      	strb	r3, [r1, #0]
		LOG_ERR("Unexpected HTTP response: %s", log_strdup(p));
   30e2c:	4632      	mov	r2, r6
   30e2e:	2145      	movs	r1, #69	; 0x45
   30e30:	4834      	ldr	r0, [pc, #208]	; (30f04 <http_parse+0x190>)
   30e32:	f00c f9e2 	bl	3d1fa <z_log_minimal_printk>
			return -1;
   30e36:	f04f 30ff 	mov.w	r0, #4294967295
   30e3a:	e7b2      	b.n	30da2 <http_parse+0x2e>
			q++;
   30e3c:	3101      	adds	r1, #1
   30e3e:	9101      	str	r1, [sp, #4]
   30e40:	e7e9      	b.n	30e16 <http_parse+0xa2>
	if (client->file_size == 0) {
   30e42:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   30e46:	b9b3      	cbnz	r3, 30e76 <http_parse+0x102>
			p = strstr(client->buf, "content-range");
   30e48:	4638      	mov	r0, r7
   30e4a:	492f      	ldr	r1, [pc, #188]	; (30f08 <http_parse+0x194>)
   30e4c:	f011 f8a2 	bl	41f94 <strstr>
			if (!p) {
   30e50:	b910      	cbnz	r0, 30e58 <http_parse+0xe4>
				LOG_ERR("Server did not send "
   30e52:	2145      	movs	r1, #69	; 0x45
   30e54:	482d      	ldr	r0, [pc, #180]	; (30f0c <http_parse+0x198>)
   30e56:	e7bf      	b.n	30dd8 <http_parse+0x64>
			p = strstr(p, "/");
   30e58:	492d      	ldr	r1, [pc, #180]	; (30f10 <http_parse+0x19c>)
   30e5a:	f011 f89b 	bl	41f94 <strstr>
			if (!p) {
   30e5e:	b910      	cbnz	r0, 30e66 <http_parse+0xf2>
				LOG_ERR("No file size in response");
   30e60:	2145      	movs	r1, #69	; 0x45
   30e62:	482c      	ldr	r0, [pc, #176]	; (30f14 <http_parse+0x1a0>)
   30e64:	e7b8      	b.n	30dd8 <http_parse+0x64>
		client->file_size += atoi(p + 1);
   30e66:	3001      	adds	r0, #1
   30e68:	f010 fe38 	bl	41adc <atoi>
   30e6c:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   30e70:	4418      	add	r0, r3
   30e72:	f8c4 091c 	str.w	r0, [r4, #2332]	; 0x91c
	p = strstr(client->buf, "connection: close");
   30e76:	4638      	mov	r0, r7
   30e78:	4927      	ldr	r1, [pc, #156]	; (30f18 <http_parse+0x1a4>)
   30e7a:	f011 f88b 	bl	41f94 <strstr>
	if (p) {
   30e7e:	b130      	cbz	r0, 30e8e <http_parse+0x11a>
		LOG_WRN("Peer closed connection, will re-connect");
   30e80:	2157      	movs	r1, #87	; 0x57
   30e82:	4826      	ldr	r0, [pc, #152]	; (30f1c <http_parse+0x1a8>)
   30e84:	f00c f9b9 	bl	3d1fa <z_log_minimal_printk>
		client->http.connection_close = true;
   30e88:	2301      	movs	r3, #1
   30e8a:	f884 3941 	strb.w	r3, [r4, #2369]	; 0x941
	client->http.has_header = true;
   30e8e:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   30e90:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	client->http.has_header = true;
   30e94:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
		if (client->offset != hdr_len) {
   30e98:	454a      	cmp	r2, r9
   30e9a:	d024      	beq.n	30ee6 <http_parse+0x172>
   30e9c:	4629      	mov	r1, r5
   30e9e:	4638      	mov	r0, r7
   30ea0:	eba2 0209 	sub.w	r2, r2, r9
   30ea4:	f010 fe3c 	bl	41b20 <memcpy>
			client->offset -= hdr_len;
   30ea8:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   30eac:	eba3 0309 	sub.w	r3, r3, r9
			client->offset = 0;
   30eb0:	f8c4 3918 	str.w	r3, [r4, #2328]	; 0x918
	client->progress += MIN(client->offset, len);
   30eb4:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   30eb8:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	if (client->progress != client->file_size &&
   30ebc:	f8d4 191c 	ldr.w	r1, [r4, #2332]	; 0x91c
	client->progress += MIN(client->offset, len);
   30ec0:	4590      	cmp	r8, r2
   30ec2:	bf94      	ite	ls
   30ec4:	4443      	addls	r3, r8
   30ec6:	189b      	addhi	r3, r3, r2
	if (client->progress != client->file_size &&
   30ec8:	428b      	cmp	r3, r1
	client->progress += MIN(client->offset, len);
   30eca:	f8c4 3920 	str.w	r3, [r4, #2336]	; 0x920
	if (client->progress != client->file_size &&
   30ece:	d00c      	beq.n	30eea <http_parse+0x176>
	    client->offset < (client->config.frag_size_override != 0 ?
   30ed0:	f8d4 0934 	ldr.w	r0, [r4, #2356]	; 0x934
			      client->config.frag_size_override :
   30ed4:	2800      	cmp	r0, #0
   30ed6:	bf08      	it	eq
   30ed8:	f44f 6080 	moveq.w	r0, #1024	; 0x400
	if (client->progress != client->file_size &&
   30edc:	4290      	cmp	r0, r2
   30ede:	bf94      	ite	ls
   30ee0:	2000      	movls	r0, #0
   30ee2:	2001      	movhi	r0, #1
   30ee4:	e75d      	b.n	30da2 <http_parse+0x2e>
			client->offset = 0;
   30ee6:	2300      	movs	r3, #0
   30ee8:	e7e2      	b.n	30eb0 <http_parse+0x13c>
	return 0;
   30eea:	2000      	movs	r0, #0
   30eec:	e759      	b.n	30da2 <http_parse+0x2e>
   30eee:	bf00      	nop
   30ef0:	0004b6bd 	.word	0x0004b6bd
   30ef4:	0004c62f 	.word	0x0004c62f
   30ef8:	0004b6ed 	.word	0x0004b6ed
   30efc:	0004b6f7 	.word	0x0004b6f7
   30f00:	0004b71d 	.word	0x0004b71d
   30f04:	0004b753 	.word	0x0004b753
   30f08:	0004b775 	.word	0x0004b775
   30f0c:	0004b783 	.word	0x0004b783
   30f10:	0004b63b 	.word	0x0004b63b
   30f14:	0004b7b8 	.word	0x0004b7b8
   30f18:	0004b7d6 	.word	0x0004b7d6
   30f1c:	0004b7e8 	.word	0x0004b7e8

00030f20 <send_error_evt>:
	};
	callback(&evt);
}

static void send_error_evt(enum fota_download_error_cause cause)
{
   30f20:	b507      	push	{r0, r1, r2, lr}
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   30f22:	2300      	movs	r3, #0
   30f24:	2204      	movs	r2, #4
   30f26:	e9cd 3300 	strd	r3, r3, [sp]
   30f2a:	f88d 2000 	strb.w	r2, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	downloading = false;
   30f2e:	4a05      	ldr	r2, [pc, #20]	; (30f44 <send_error_evt+0x24>)
	const struct fota_download_evt evt = {
   30f30:	f88d 0004 	strb.w	r0, [sp, #4]
	downloading = false;
   30f34:	7013      	strb	r3, [r2, #0]
	callback(&evt);
   30f36:	4b04      	ldr	r3, [pc, #16]	; (30f48 <send_error_evt+0x28>)
   30f38:	4668      	mov	r0, sp
   30f3a:	681b      	ldr	r3, [r3, #0]
   30f3c:	4798      	blx	r3
}
   30f3e:	b003      	add	sp, #12
   30f40:	f85d fb04 	ldr.w	pc, [sp], #4
   30f44:	2001d311 	.word	0x2001d311
   30f48:	2001a1e0 	.word	0x2001a1e0

00030f4c <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   30f4c:	b513      	push	{r0, r1, r4, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   30f4e:	a801      	add	r0, sp, #4
   30f50:	f000 fa6a 	bl	31428 <dfu_target_offset_get>
	if (err != 0) {
   30f54:	4603      	mov	r3, r0
   30f56:	b148      	cbz	r0, 30f6c <download_with_offset+0x20>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   30f58:	2145      	movs	r1, #69	; 0x45
   30f5a:	4a16      	ldr	r2, [pc, #88]	; (30fb4 <download_with_offset+0x68>)
   30f5c:	4816      	ldr	r0, [pc, #88]	; (30fb8 <download_with_offset+0x6c>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30f5e:	f00c f94c 	bl	3d1fa <z_log_minimal_printk>
			err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30f62:	2001      	movs	r0, #1
   30f64:	f7ff ffdc 	bl	30f20 <send_error_evt>
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	downloading = true;
	return;
}
   30f68:	b002      	add	sp, #8
   30f6a:	bd10      	pop	{r4, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   30f6c:	4c13      	ldr	r4, [pc, #76]	; (30fbc <download_with_offset+0x70>)
   30f6e:	4620      	mov	r0, r4
   30f70:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   30f74:	f604 122c 	addw	r2, r4, #2348	; 0x92c
   30f78:	f7ff fa4c 	bl	30414 <download_client_connect>
	if (err != 0) {
   30f7c:	4603      	mov	r3, r0
   30f7e:	b118      	cbz	r0, 30f88 <download_with_offset+0x3c>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   30f80:	2145      	movs	r1, #69	; 0x45
   30f82:	4a0c      	ldr	r2, [pc, #48]	; (30fb4 <download_with_offset+0x68>)
   30f84:	480e      	ldr	r0, [pc, #56]	; (30fc0 <download_with_offset+0x74>)
   30f86:	e7ea      	b.n	30f5e <download_with_offset+0x12>
	err = download_client_start(&dlc, dlc.file, offset);
   30f88:	4620      	mov	r0, r4
   30f8a:	9a01      	ldr	r2, [sp, #4]
   30f8c:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
   30f90:	f7ff fd80 	bl	30a94 <download_client_start>
	if (err != 0) {
   30f94:	4603      	mov	r3, r0
   30f96:	b118      	cbz	r0, 30fa0 <download_with_offset+0x54>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30f98:	2145      	movs	r1, #69	; 0x45
   30f9a:	4a06      	ldr	r2, [pc, #24]	; (30fb4 <download_with_offset+0x68>)
   30f9c:	4809      	ldr	r0, [pc, #36]	; (30fc4 <download_with_offset+0x78>)
   30f9e:	e7de      	b.n	30f5e <download_with_offset+0x12>
	LOG_INF("Downloading from offset: 0x%x", offset);
   30fa0:	9a01      	ldr	r2, [sp, #4]
   30fa2:	2149      	movs	r1, #73	; 0x49
   30fa4:	4808      	ldr	r0, [pc, #32]	; (30fc8 <download_with_offset+0x7c>)
   30fa6:	f00c f928 	bl	3d1fa <z_log_minimal_printk>
	downloading = true;
   30faa:	2201      	movs	r2, #1
   30fac:	4b07      	ldr	r3, [pc, #28]	; (30fcc <download_with_offset+0x80>)
   30fae:	701a      	strb	r2, [r3, #0]
	return;
   30fb0:	e7da      	b.n	30f68 <download_with_offset+0x1c>
   30fb2:	bf00      	nop
   30fb4:	0004ba5b 	.word	0x0004ba5b
   30fb8:	0004b815 	.word	0x0004b815
   30fbc:	20017370 	.word	0x20017370
   30fc0:	0004b840 	.word	0x0004b840
   30fc4:	0004b868 	.word	0x0004b868
   30fc8:	0004b898 	.word	0x0004b898
   30fcc:	2001d311 	.word	0x2001d311

00030fd0 <download_client_callback>:
{
   30fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (event == NULL) {
   30fd2:	4605      	mov	r5, r0
   30fd4:	2800      	cmp	r0, #0
   30fd6:	f000 80f2 	beq.w	311be <download_client_callback+0x1ee>
	switch (event->id) {
   30fda:	7803      	ldrb	r3, [r0, #0]
   30fdc:	2b01      	cmp	r3, #1
   30fde:	f000 80bf 	beq.w	31160 <download_client_callback+0x190>
   30fe2:	2b02      	cmp	r3, #2
   30fe4:	f000 8098 	beq.w	31118 <download_client_callback+0x148>
   30fe8:	2b00      	cmp	r3, #0
   30fea:	f040 80eb 	bne.w	311c4 <download_client_callback+0x1f4>
		if (first_fragment) {
   30fee:	4e76      	ldr	r6, [pc, #472]	; (311c8 <download_client_callback+0x1f8>)
   30ff0:	7833      	ldrb	r3, [r6, #0]
   30ff2:	2b00      	cmp	r3, #0
   30ff4:	d05a      	beq.n	310ac <download_client_callback+0xdc>
			err = download_client_file_size_get(&dlc, &file_size);
   30ff6:	4975      	ldr	r1, [pc, #468]	; (311cc <download_client_callback+0x1fc>)
   30ff8:	4875      	ldr	r0, [pc, #468]	; (311d0 <download_client_callback+0x200>)
   30ffa:	f00e ffa0 	bl	3ff3e <download_client_file_size_get>
			if (err != 0) {
   30ffe:	4604      	mov	r4, r0
   31000:	b108      	cbz	r0, 31006 <download_client_callback+0x36>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31002:	2001      	movs	r0, #1
   31004:	e06b      	b.n	310de <download_client_callback+0x10e>
			first_fragment = false;
   31006:	7030      	strb	r0, [r6, #0]
			img_type = dfu_target_img_type(event->fragment.buf,
   31008:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   3100c:	f000 f9c2 	bl	31394 <dfu_target_img_type>
   31010:	4b70      	ldr	r3, [pc, #448]	; (311d4 <download_client_callback+0x204>)
   31012:	b2c0      	uxtb	r0, r0
   31014:	7018      	strb	r0, [r3, #0]
			if ((img_type_expected != DFU_TARGET_IMAGE_TYPE_ANY) &&
   31016:	4b70      	ldr	r3, [pc, #448]	; (311d8 <download_client_callback+0x208>)
   31018:	781b      	ldrb	r3, [r3, #0]
   3101a:	b1e3      	cbz	r3, 31056 <download_client_callback+0x86>
   3101c:	4298      	cmp	r0, r3
   3101e:	d01a      	beq.n	31056 <download_client_callback+0x86>
				LOG_ERR("FOTA image type %d does not match expected type %d",
   31020:	4602      	mov	r2, r0
   31022:	2145      	movs	r1, #69	; 0x45
   31024:	486d      	ldr	r0, [pc, #436]	; (311dc <download_client_callback+0x20c>)
   31026:	f00c f8e8 	bl	3d1fa <z_log_minimal_printk>
				err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH;
   3102a:	2503      	movs	r5, #3
				err = -EPROTOTYPE;
   3102c:	f06f 046a 	mvn.w	r4, #106	; 0x6a
				(void)download_client_disconnect(&dlc);
   31030:	4867      	ldr	r0, [pc, #412]	; (311d0 <download_client_callback+0x200>)
   31032:	f7ff fbd3 	bl	307dc <download_client_disconnect>
				send_error_evt(err_cause);
   31036:	4628      	mov	r0, r5
   31038:	f7ff ff72 	bl	30f20 <send_error_evt>
				int res = dfu_target_reset();
   3103c:	f000 fa20 	bl	31480 <dfu_target_reset>
				if (res != 0) {
   31040:	4602      	mov	r2, r0
   31042:	b118      	cbz	r0, 3104c <download_client_callback+0x7c>
					LOG_ERR("Unable to reset DFU target, err: %d",
   31044:	2145      	movs	r1, #69	; 0x45
   31046:	4866      	ldr	r0, [pc, #408]	; (311e0 <download_client_callback+0x210>)
   31048:	f00c f8d7 	bl	3d1fa <z_log_minimal_printk>
				first_fragment = true;
   3104c:	2301      	movs	r3, #1
   3104e:	7033      	strb	r3, [r6, #0]
}
   31050:	4620      	mov	r0, r4
   31052:	b004      	add	sp, #16
   31054:	bd70      	pop	{r4, r5, r6, pc}
				err = dfu_target_init(img_type, 0, file_size,
   31056:	4a5d      	ldr	r2, [pc, #372]	; (311cc <download_client_callback+0x1fc>)
   31058:	2100      	movs	r1, #0
   3105a:	4b62      	ldr	r3, [pc, #392]	; (311e4 <download_client_callback+0x214>)
   3105c:	6812      	ldr	r2, [r2, #0]
   3105e:	f000 f9b5 	bl	313cc <dfu_target_init>
				if ((err < 0) && (err != -EBUSY)) {
   31062:	1e04      	subs	r4, r0, #0
   31064:	da09      	bge.n	3107a <download_client_callback+0xaa>
   31066:	f114 0f10 	cmn.w	r4, #16
   3106a:	d006      	beq.n	3107a <download_client_callback+0xaa>
					LOG_ERR("dfu_target_init error %d", err);
   3106c:	4622      	mov	r2, r4
   3106e:	2145      	movs	r1, #69	; 0x45
   31070:	485d      	ldr	r0, [pc, #372]	; (311e8 <download_client_callback+0x218>)
   31072:	f00c f8c2 	bl	3d1fa <z_log_minimal_printk>
					err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED;
   31076:	2501      	movs	r5, #1
   31078:	e7da      	b.n	31030 <download_client_callback+0x60>
			err = dfu_target_offset_get(&offset);
   3107a:	a801      	add	r0, sp, #4
   3107c:	f000 f9d4 	bl	31428 <dfu_target_offset_get>
			if (err != 0) {
   31080:	b110      	cbz	r0, 31088 <download_client_callback+0xb8>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31082:	2001      	movs	r0, #1
   31084:	f7ff ff4c 	bl	30f20 <send_error_evt>
			if (offset != 0) {
   31088:	9b01      	ldr	r3, [sp, #4]
   3108a:	b17b      	cbz	r3, 310ac <download_client_callback+0xdc>
				(void)download_client_disconnect(&dlc);
   3108c:	4850      	ldr	r0, [pc, #320]	; (311d0 <download_client_callback+0x200>)
   3108e:	f7ff fba5 	bl	307dc <download_client_disconnect>
				k_work_schedule(&dlc_with_offset_work,
   31092:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   31096:	2300      	movs	r3, #0
   31098:	4854      	ldr	r0, [pc, #336]	; (311ec <download_client_callback+0x21c>)
   3109a:	f006 fde5 	bl	37c68 <k_work_schedule>
				LOG_INF("Refuse fragment, restart with offset");
   3109e:	2149      	movs	r1, #73	; 0x49
   310a0:	4853      	ldr	r0, [pc, #332]	; (311f0 <download_client_callback+0x220>)
   310a2:	f00c f8aa 	bl	3d1fa <z_log_minimal_printk>
				return -1;
   310a6:	f04f 34ff 	mov.w	r4, #4294967295
   310aa:	e7d1      	b.n	31050 <download_client_callback+0x80>
		err = dfu_target_write(event->fragment.buf,
   310ac:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   310b0:	f000 f9c4 	bl	3143c <dfu_target_write>
		if (err != 0) {
   310b4:	4604      	mov	r4, r0
   310b6:	b1a8      	cbz	r0, 310e4 <download_client_callback+0x114>
			LOG_ERR("dfu_target_write error %d", err);
   310b8:	4602      	mov	r2, r0
   310ba:	2145      	movs	r1, #69	; 0x45
   310bc:	484d      	ldr	r0, [pc, #308]	; (311f4 <download_client_callback+0x224>)
   310be:	f00c f89c 	bl	3d1fa <z_log_minimal_printk>
			int res = dfu_target_done(false);
   310c2:	2000      	movs	r0, #0
   310c4:	f000 f9c6 	bl	31454 <dfu_target_done>
			if (res != 0) {
   310c8:	b118      	cbz	r0, 310d2 <download_client_callback+0x102>
				LOG_ERR("Unable to free DFU target resources");
   310ca:	2145      	movs	r1, #69	; 0x45
   310cc:	484a      	ldr	r0, [pc, #296]	; (311f8 <download_client_callback+0x228>)
   310ce:	f00c f894 	bl	3d1fa <z_log_minimal_printk>
			first_fragment = true;
   310d2:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   310d4:	483e      	ldr	r0, [pc, #248]	; (311d0 <download_client_callback+0x200>)
			first_fragment = true;
   310d6:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   310d8:	f7ff fb80 	bl	307dc <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   310dc:	2002      	movs	r0, #2
   310de:	f7ff ff1f 	bl	30f20 <send_error_evt>
			return err;
   310e2:	e7b5      	b.n	31050 <download_client_callback+0x80>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   310e4:	7833      	ldrb	r3, [r6, #0]
   310e6:	2b00      	cmp	r3, #0
   310e8:	d1b2      	bne.n	31050 <download_client_callback+0x80>
			err = dfu_target_offset_get(&offset);
   310ea:	a801      	add	r0, sp, #4
   310ec:	f000 f99c 	bl	31428 <dfu_target_offset_get>
			if (err != 0) {
   310f0:	4604      	mov	r4, r0
   310f2:	2800      	cmp	r0, #0
   310f4:	d185      	bne.n	31002 <download_client_callback+0x32>
			if (file_size == 0) {
   310f6:	4b35      	ldr	r3, [pc, #212]	; (311cc <download_client_callback+0x1fc>)
   310f8:	681a      	ldr	r2, [r3, #0]
   310fa:	2a00      	cmp	r2, #0
   310fc:	d081      	beq.n	31002 <download_client_callback+0x32>
			send_progress((offset * 100) / file_size);
   310fe:	2164      	movs	r1, #100	; 0x64
   31100:	9b01      	ldr	r3, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   31102:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   31106:	434b      	muls	r3, r1
   31108:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   3110c:	9303      	str	r3, [sp, #12]
	callback(&evt);
   3110e:	4b3b      	ldr	r3, [pc, #236]	; (311fc <download_client_callback+0x22c>)
   31110:	a802      	add	r0, sp, #8
   31112:	681b      	ldr	r3, [r3, #0]
   31114:	4798      	blx	r3
}
   31116:	e79b      	b.n	31050 <download_client_callback+0x80>
		err = dfu_target_done(true);
   31118:	2001      	movs	r0, #1
   3111a:	f000 f99b 	bl	31454 <dfu_target_done>
		if (err == 0) {
   3111e:	4604      	mov	r4, r0
   31120:	b918      	cbnz	r0, 3112a <download_client_callback+0x15a>
			err = dfu_target_schedule_update(0);
   31122:	f000 f9c3 	bl	314ac <dfu_target_schedule_update>
		if (err != 0) {
   31126:	4604      	mov	r4, r0
   31128:	b128      	cbz	r0, 31136 <download_client_callback+0x166>
			LOG_ERR("dfu_target_done error: %d", err);
   3112a:	4622      	mov	r2, r4
   3112c:	2145      	movs	r1, #69	; 0x45
   3112e:	4834      	ldr	r0, [pc, #208]	; (31200 <download_client_callback+0x230>)
   31130:	f00c f863 	bl	3d1fa <z_log_minimal_printk>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31134:	e765      	b.n	31002 <download_client_callback+0x32>
		err = download_client_disconnect(&dlc);
   31136:	4826      	ldr	r0, [pc, #152]	; (311d0 <download_client_callback+0x200>)
   31138:	f7ff fb50 	bl	307dc <download_client_disconnect>
		if (err != 0) {
   3113c:	4604      	mov	r4, r0
   3113e:	2800      	cmp	r0, #0
   31140:	f47f af5f 	bne.w	31002 <download_client_callback+0x32>
	const struct fota_download_evt evt = {
   31144:	2501      	movs	r5, #1
	callback(&evt);
   31146:	4b2d      	ldr	r3, [pc, #180]	; (311fc <download_client_callback+0x22c>)
	const struct fota_download_evt evt = {
   31148:	e9cd 0002 	strd	r0, r0, [sp, #8]
	callback(&evt);
   3114c:	681b      	ldr	r3, [r3, #0]
	const struct fota_download_evt evt = {
   3114e:	f88d 5008 	strb.w	r5, [sp, #8]
	callback(&evt);
   31152:	a802      	add	r0, sp, #8
   31154:	4798      	blx	r3
		first_fragment = true;
   31156:	4b1c      	ldr	r3, [pc, #112]	; (311c8 <download_client_callback+0x1f8>)
   31158:	701d      	strb	r5, [r3, #0]
		downloading = false;
   3115a:	4b2a      	ldr	r3, [pc, #168]	; (31204 <download_client_callback+0x234>)
   3115c:	701c      	strb	r4, [r3, #0]
		break;
   3115e:	e777      	b.n	31050 <download_client_callback+0x80>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   31160:	4e29      	ldr	r6, [pc, #164]	; (31208 <download_client_callback+0x238>)
   31162:	6832      	ldr	r2, [r6, #0]
   31164:	b192      	cbz	r2, 3118c <download_client_callback+0x1bc>
   31166:	6844      	ldr	r4, [r0, #4]
   31168:	f104 0380 	add.w	r3, r4, #128	; 0x80
   3116c:	2b18      	cmp	r3, #24
   3116e:	d80d      	bhi.n	3118c <download_client_callback+0x1bc>
   31170:	4c26      	ldr	r4, [pc, #152]	; (3120c <download_client_callback+0x23c>)
   31172:	40dc      	lsrs	r4, r3
   31174:	43e4      	mvns	r4, r4
   31176:	f014 0401 	ands.w	r4, r4, #1
   3117a:	d107      	bne.n	3118c <download_client_callback+0x1bc>
			LOG_WRN("Download socket error. %d retries left...",
   3117c:	2157      	movs	r1, #87	; 0x57
   3117e:	4824      	ldr	r0, [pc, #144]	; (31210 <download_client_callback+0x240>)
   31180:	f00c f83b 	bl	3d1fa <z_log_minimal_printk>
			socket_retries_left--;
   31184:	6833      	ldr	r3, [r6, #0]
   31186:	3b01      	subs	r3, #1
   31188:	6033      	str	r3, [r6, #0]
   3118a:	e761      	b.n	31050 <download_client_callback+0x80>
			download_client_disconnect(&dlc);
   3118c:	4810      	ldr	r0, [pc, #64]	; (311d0 <download_client_callback+0x200>)
   3118e:	f7ff fb25 	bl	307dc <download_client_disconnect>
			LOG_ERR("Download client error");
   31192:	2145      	movs	r1, #69	; 0x45
   31194:	481f      	ldr	r0, [pc, #124]	; (31214 <download_client_callback+0x244>)
   31196:	f00c f830 	bl	3d1fa <z_log_minimal_printk>
			err = dfu_target_done(false);
   3119a:	2000      	movs	r0, #0
   3119c:	f000 f95a 	bl	31454 <dfu_target_done>
			if (err == -EACCES) {
   311a0:	f110 0f0d 	cmn.w	r0, #13
   311a4:	d004      	beq.n	311b0 <download_client_callback+0x1e0>
			} else if (err != 0) {
   311a6:	b118      	cbz	r0, 311b0 <download_client_callback+0x1e0>
				LOG_ERR("Unable to deinitialze resources "
   311a8:	2145      	movs	r1, #69	; 0x45
   311aa:	481b      	ldr	r0, [pc, #108]	; (31218 <download_client_callback+0x248>)
   311ac:	f00c f825 	bl	3d1fa <z_log_minimal_printk>
			first_fragment = true;
   311b0:	2001      	movs	r0, #1
   311b2:	4b05      	ldr	r3, [pc, #20]	; (311c8 <download_client_callback+0x1f8>)
   311b4:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   311b6:	f7ff feb3 	bl	30f20 <send_error_evt>
			return event->error;
   311ba:	686c      	ldr	r4, [r5, #4]
   311bc:	e748      	b.n	31050 <download_client_callback+0x80>
		return -EINVAL;
   311be:	f06f 0415 	mvn.w	r4, #21
   311c2:	e745      	b.n	31050 <download_client_callback+0x80>
	switch (event->id) {
   311c4:	2400      	movs	r4, #0
   311c6:	e743      	b.n	31050 <download_client_callback+0x80>
   311c8:	2001d3d2 	.word	0x2001d3d2
   311cc:	2001a1e4 	.word	0x2001a1e4
   311d0:	20017370 	.word	0x20017370
   311d4:	2001d3d3 	.word	0x2001d3d3
   311d8:	2001d3d4 	.word	0x2001d3d4
   311dc:	0004b8bb 	.word	0x0004b8bb
   311e0:	0004b911 	.word	0x0004b911
   311e4:	0003121d 	.word	0x0003121d
   311e8:	0004b8f3 	.word	0x0004b8f3
   311ec:	20018dc8 	.word	0x20018dc8
   311f0:	0004b93a 	.word	0x0004b93a
   311f4:	0004b964 	.word	0x0004b964
   311f8:	0004b983 	.word	0x0004b983
   311fc:	2001a1e0 	.word	0x2001a1e0
   31200:	0004b9ac 	.word	0x0004b9ac
   31204:	2001d311 	.word	0x2001d311
   31208:	2001a3e8 	.word	0x2001a3e8
   3120c:	01001001 	.word	0x01001001
   31210:	0004a863 	.word	0x0004a863
   31214:	0004b9cb 	.word	0x0004b9cb
   31218:	0004b9e6 	.word	0x0004b9e6

0003121c <dfu_target_callback_handler>:
{
   3121c:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   3121e:	b138      	cbz	r0, 31230 <dfu_target_callback_handler+0x14>
   31220:	2801      	cmp	r0, #1
   31222:	d011      	beq.n	31248 <dfu_target_callback_handler+0x2c>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31224:	2001      	movs	r0, #1
}
   31226:	b003      	add	sp, #12
   31228:	f85d eb04 	ldr.w	lr, [sp], #4
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   3122c:	f7ff be78 	b.w	30f20 <send_error_evt>
	const struct fota_download_evt evt = {
   31230:	2302      	movs	r3, #2
   31232:	e9cd 0000 	strd	r0, r0, [sp]
   31236:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   3123a:	4b06      	ldr	r3, [pc, #24]	; (31254 <dfu_target_callback_handler+0x38>)
   3123c:	4668      	mov	r0, sp
   3123e:	681b      	ldr	r3, [r3, #0]
   31240:	4798      	blx	r3
}
   31242:	b003      	add	sp, #12
   31244:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   31248:	2300      	movs	r3, #0
   3124a:	e9cd 3300 	strd	r3, r3, [sp]
   3124e:	2303      	movs	r3, #3
   31250:	e7f1      	b.n	31236 <dfu_target_callback_handler+0x1a>
   31252:	bf00      	nop
   31254:	2001a1e0 	.word	0x2001a1e0

00031258 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, uint8_t pdn_id, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   31258:	b5f0      	push	{r4, r5, r6, r7, lr}
   3125a:	460d      	mov	r5, r1
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   3125c:	2100      	movs	r1, #0
{
   3125e:	b08b      	sub	sp, #44	; 0x2c
	struct download_client_cfg config = {
   31260:	9101      	str	r1, [sp, #4]
   31262:	f88d 3004 	strb.w	r3, [sp, #4]
   31266:	9b10      	ldr	r3, [sp, #64]	; 0x40
		.sec_tag = sec_tag,
		.pdn_id = pdn_id,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   31268:	4604      	mov	r4, r0
	struct download_client_cfg config = {
   3126a:	9103      	str	r1, [sp, #12]
   3126c:	9200      	str	r2, [sp, #0]
   3126e:	9302      	str	r3, [sp, #8]
	if (host == NULL || file == NULL || callback == NULL) {
   31270:	2800      	cmp	r0, #0
   31272:	d045      	beq.n	31300 <fota_download_start_with_image_type+0xa8>
   31274:	2d00      	cmp	r5, #0
   31276:	d043      	beq.n	31300 <fota_download_start_with_image_type+0xa8>
   31278:	4b24      	ldr	r3, [pc, #144]	; (3130c <fota_download_start_with_image_type+0xb4>)
   3127a:	681b      	ldr	r3, [r3, #0]
   3127c:	2b00      	cmp	r3, #0
   3127e:	d03f      	beq.n	31300 <fota_download_start_with_image_type+0xa8>
		return -EINVAL;
	}

	if (downloading) {
   31280:	4f23      	ldr	r7, [pc, #140]	; (31310 <fota_download_start_with_image_type+0xb8>)
   31282:	783b      	ldrb	r3, [r7, #0]
   31284:	2b00      	cmp	r3, #0
   31286:	d13e      	bne.n	31306 <fota_download_start_with_image_type+0xae>
		return -EALREADY;
	}

	if (sec_tag != -1 && !is_ip_address(host)) {
   31288:	3201      	adds	r2, #1
   3128a:	d012      	beq.n	312b2 <fota_download_start_with_image_type+0x5a>
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   3128c:	4601      	mov	r1, r0
   3128e:	f10d 0212 	add.w	r2, sp, #18
   31292:	2001      	movs	r0, #1
   31294:	f00c fbea 	bl	3da6c <z_impl_zsock_inet_pton>
	if (zsock_inet_pton(AF_INET, host, sa.data) == 1) {
   31298:	2801      	cmp	r0, #1
   3129a:	d00a      	beq.n	312b2 <fota_download_start_with_image_type+0x5a>
   3129c:	2002      	movs	r0, #2
   3129e:	4621      	mov	r1, r4
   312a0:	f10d 0212 	add.w	r2, sp, #18
   312a4:	f00c fbe2 	bl	3da6c <z_impl_zsock_inet_pton>
	} else if (zsock_inet_pton(AF_INET6, host, sa.data) == 1) {
   312a8:	2801      	cmp	r0, #1
		config.set_tls_hostname = true;
   312aa:	bf1c      	itt	ne
   312ac:	2301      	movne	r3, #1
   312ae:	f88d 300c 	strbne.w	r3, [sp, #12]
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   312b2:	2202      	movs	r2, #2
   312b4:	4b17      	ldr	r3, [pc, #92]	; (31314 <fota_download_start_with_image_type+0xbc>)

	strncpy(file_buf, file, sizeof(file_buf) - 1);
   312b6:	4e18      	ldr	r6, [pc, #96]	; (31318 <fota_download_start_with_image_type+0xc0>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   312b8:	601a      	str	r2, [r3, #0]
	strncpy(file_buf, file, sizeof(file_buf) - 1);
   312ba:	4629      	mov	r1, r5
   312bc:	22bf      	movs	r2, #191	; 0xbf
   312be:	4630      	mov	r0, r6
   312c0:	f010 fe35 	bl	41f2e <strncpy>
	file_buf[sizeof(file_buf) - 1] = '\0';
   312c4:	2300      	movs	r3, #0
		LOG_INF("B1 update, selected file:\n%s", log_strdup(update));
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   312c6:	4621      	mov	r1, r4
   312c8:	466a      	mov	r2, sp
   312ca:	4814      	ldr	r0, [pc, #80]	; (3131c <fota_download_start_with_image_type+0xc4>)
	file_buf[sizeof(file_buf) - 1] = '\0';
   312cc:	f886 30bf 	strb.w	r3, [r6, #191]	; 0xbf
	err = download_client_connect(&dlc, host, &config);
   312d0:	f7ff f8a0 	bl	30414 <download_client_connect>
	if (err != 0) {
   312d4:	4604      	mov	r4, r0
   312d6:	b968      	cbnz	r0, 312f4 <fota_download_start_with_image_type+0x9c>
		return err;
	}

	img_type_expected = expected_type;
   312d8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   312dc:	4b10      	ldr	r3, [pc, #64]	; (31320 <fota_download_start_with_image_type+0xc8>)

	err = download_client_start(&dlc, file_buf_ptr, 0);
   312de:	4631      	mov	r1, r6
	img_type_expected = expected_type;
   312e0:	701a      	strb	r2, [r3, #0]
	err = download_client_start(&dlc, file_buf_ptr, 0);
   312e2:	4602      	mov	r2, r0
   312e4:	480d      	ldr	r0, [pc, #52]	; (3131c <fota_download_start_with_image_type+0xc4>)
   312e6:	f7ff fbd5 	bl	30a94 <download_client_start>
	if (err != 0) {
   312ea:	4604      	mov	r4, r0
   312ec:	b128      	cbz	r0, 312fa <fota_download_start_with_image_type+0xa2>
		download_client_disconnect(&dlc);
   312ee:	480b      	ldr	r0, [pc, #44]	; (3131c <fota_download_start_with_image_type+0xc4>)
   312f0:	f7ff fa74 	bl	307dc <download_client_disconnect>
	}

	downloading = true;

	return 0;
}
   312f4:	4620      	mov	r0, r4
   312f6:	b00b      	add	sp, #44	; 0x2c
   312f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	downloading = true;
   312fa:	2301      	movs	r3, #1
   312fc:	703b      	strb	r3, [r7, #0]
	return 0;
   312fe:	e7f9      	b.n	312f4 <fota_download_start_with_image_type+0x9c>
		return -EINVAL;
   31300:	f06f 0415 	mvn.w	r4, #21
   31304:	e7f6      	b.n	312f4 <fota_download_start_with_image_type+0x9c>
		return -EALREADY;
   31306:	f06f 0477 	mvn.w	r4, #119	; 0x77
   3130a:	e7f3      	b.n	312f4 <fota_download_start_with_image_type+0x9c>
   3130c:	2001a1e0 	.word	0x2001a1e0
   31310:	2001d311 	.word	0x2001d311
   31314:	2001a3e8 	.word	0x2001a3e8
   31318:	2001d312 	.word	0x2001d312
   3131c:	20017370 	.word	0x20017370
   31320:	2001d3d4 	.word	0x2001d3d4

00031324 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   31324:	b510      	push	{r4, lr}
	if (client_callback == NULL) {
   31326:	b1f8      	cbz	r0, 31368 <fota_download_init+0x44>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   31328:	4b11      	ldr	r3, [pc, #68]	; (31370 <fota_download_init+0x4c>)
	dlc.set_native_tls = CONFIG_FOTA_DOWNLOAD_NATIVE_TLS;
#endif

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	/* Set the required buffer for MCUboot targets */
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   3132a:	f44f 7100 	mov.w	r1, #512	; 0x200
	callback = client_callback;
   3132e:	6018      	str	r0, [r3, #0]
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   31330:	4810      	ldr	r0, [pc, #64]	; (31374 <fota_download_init+0x50>)
   31332:	f000 fa63 	bl	317fc <dfu_target_mcuboot_set_buf>
	if (err) {
   31336:	4604      	mov	r4, r0
   31338:	b138      	cbz	r0, 3134a <fota_download_init+0x26>
		LOG_ERR("%s failed to set MCUboot flash buffer %d",
   3133a:	4603      	mov	r3, r0
   3133c:	2145      	movs	r1, #69	; 0x45
   3133e:	4a0e      	ldr	r2, [pc, #56]	; (31378 <fota_download_init+0x54>)
   31340:	480e      	ldr	r0, [pc, #56]	; (3137c <fota_download_init+0x58>)
   31342:	f00b ff5a 	bl	3d1fa <z_log_minimal_printk>
		return err;
	}

	first_fragment = true;
	return 0;
}
   31346:	4620      	mov	r0, r4
   31348:	bd10      	pop	{r4, pc}
	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   3134a:	490d      	ldr	r1, [pc, #52]	; (31380 <fota_download_init+0x5c>)
   3134c:	480d      	ldr	r0, [pc, #52]	; (31384 <fota_download_init+0x60>)
   3134e:	f006 fbfd 	bl	37b4c <k_work_init_delayable>
	err = download_client_init(&dlc, download_client_callback);
   31352:	490d      	ldr	r1, [pc, #52]	; (31388 <fota_download_init+0x64>)
   31354:	480d      	ldr	r0, [pc, #52]	; (3138c <fota_download_init+0x68>)
   31356:	f7ff f82d 	bl	303b4 <download_client_init>
	if (err != 0) {
   3135a:	4604      	mov	r4, r0
   3135c:	2800      	cmp	r0, #0
   3135e:	d1f2      	bne.n	31346 <fota_download_init+0x22>
	first_fragment = true;
   31360:	2201      	movs	r2, #1
   31362:	4b0b      	ldr	r3, [pc, #44]	; (31390 <fota_download_init+0x6c>)
   31364:	701a      	strb	r2, [r3, #0]
	return 0;
   31366:	e7ee      	b.n	31346 <fota_download_init+0x22>
		return -EINVAL;
   31368:	f06f 0415 	mvn.w	r4, #21
   3136c:	e7eb      	b.n	31346 <fota_download_init+0x22>
   3136e:	bf00      	nop
   31370:	2001a1e0 	.word	0x2001a1e0
   31374:	2001a1e8 	.word	0x2001a1e8
   31378:	0004ba70 	.word	0x0004ba70
   3137c:	0004ba1f 	.word	0x0004ba1f
   31380:	00030f4d 	.word	0x00030f4d
   31384:	20018dc8 	.word	0x20018dc8
   31388:	00030fd1 	.word	0x00030fd1
   3138c:	20017370 	.word	0x20017370
   31390:	2001d3d2 	.word	0x2001d3d2

00031394 <dfu_target_img_type>:
static const struct dfu_target *current_target;
static int current_img_num = -1;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   31394:	291f      	cmp	r1, #31
{
   31396:	b510      	push	{r4, lr}
   31398:	4604      	mov	r4, r0
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   3139a:	d90d      	bls.n	313b8 <dfu_target_img_type+0x24>
		return -EAGAIN;
	}
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   3139c:	f000 fa26 	bl	317ec <dfu_target_mcuboot_identify>
   313a0:	b968      	cbnz	r0, 313be <_flash_used+0x2>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (dfu_target_modem_delta_identify(buf)) {
   313a2:	4620      	mov	r0, r4
   313a4:	f000 f93e 	bl	31624 <dfu_target_modem_delta_identify>
   313a8:	b958      	cbnz	r0, 313c2 <_flash_used+0x6>
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (dfu_target_full_modem_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
   313aa:	4807      	ldr	r0, [pc, #28]	; (313c8 <_flash_used+0xc>)
   313ac:	2145      	movs	r1, #69	; 0x45
   313ae:	f00b ff24 	bl	3d1fa <z_log_minimal_printk>
	return -ENOTSUP;
   313b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   313b6:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   313b8:	f06f 000a 	mvn.w	r0, #10
   313bc:	e7fb      	b.n	313b6 <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   313be:	2001      	movs	r0, #1
   313c0:	e7f9      	b.n	313b6 <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   313c2:	2002      	movs	r0, #2
   313c4:	e7f7      	b.n	313b6 <dfu_target_img_type+0x22>
   313c6:	bf00      	nop
   313c8:	0004ba83 	.word	0x0004ba83

000313cc <dfu_target_init>:

int dfu_target_init(int img_type, int img_num, size_t file_size, dfu_target_callback_t cb)
{
   313cc:	b570      	push	{r4, r5, r6, lr}
   313ce:	4604      	mov	r4, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   313d0:	2c01      	cmp	r4, #1
{
   313d2:	4610      	mov	r0, r2
   313d4:	461a      	mov	r2, r3
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   313d6:	d008      	beq.n	313ea <dfu_target_init+0x1e>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   313d8:	2c02      	cmp	r4, #2
   313da:	d017      	beq.n	3140c <dfu_target_init+0x40>
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   313dc:	480d      	ldr	r0, [pc, #52]	; (31414 <dfu_target_init+0x48>)
   313de:	2145      	movs	r1, #69	; 0x45
   313e0:	f00b ff0b 	bl	3d1fa <z_log_minimal_printk>
		return -ENOTSUP;
   313e4:	f06f 0085 	mvn.w	r0, #133	; 0x85

	current_target = new_target;
	current_img_num = img_num;

	return current_target->init(file_size, img_num, cb);
}
   313e8:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   313ea:	4d0b      	ldr	r5, [pc, #44]	; (31418 <dfu_target_init+0x4c>)
	if (new_target == current_target
   313ec:	4e0b      	ldr	r6, [pc, #44]	; (3141c <dfu_target_init+0x50>)
   313ee:	6833      	ldr	r3, [r6, #0]
   313f0:	42ab      	cmp	r3, r5
   313f2:	4b0b      	ldr	r3, [pc, #44]	; (31420 <dfu_target_init+0x54>)
   313f4:	d104      	bne.n	31400 <dfu_target_init+0x34>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA
   313f6:	2c02      	cmp	r4, #2
   313f8:	d002      	beq.n	31400 <dfu_target_init+0x34>
	   && current_img_num == img_num) {
   313fa:	681c      	ldr	r4, [r3, #0]
   313fc:	42a1      	cmp	r1, r4
   313fe:	d007      	beq.n	31410 <dfu_target_init+0x44>
	current_target = new_target;
   31400:	6035      	str	r5, [r6, #0]
	current_img_num = img_num;
   31402:	6019      	str	r1, [r3, #0]
	return current_target->init(file_size, img_num, cb);
   31404:	682b      	ldr	r3, [r5, #0]
}
   31406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, img_num, cb);
   3140a:	4718      	bx	r3
		new_target = &dfu_target_modem_delta;
   3140c:	4d05      	ldr	r5, [pc, #20]	; (31424 <dfu_target_init+0x58>)
   3140e:	e7ed      	b.n	313ec <dfu_target_init+0x20>
		return 0;
   31410:	2000      	movs	r0, #0
   31412:	e7e9      	b.n	313e8 <dfu_target_init+0x1c>
   31414:	0004baa6 	.word	0x0004baa6
   31418:	00043810 	.word	0x00043810
   3141c:	2001a3ec 	.word	0x2001a3ec
   31420:	200146ec 	.word	0x200146ec
   31424:	00043824 	.word	0x00043824

00031428 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   31428:	4b03      	ldr	r3, [pc, #12]	; (31438 <dfu_target_offset_get+0x10>)
   3142a:	681b      	ldr	r3, [r3, #0]
   3142c:	b10b      	cbz	r3, 31432 <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   3142e:	685b      	ldr	r3, [r3, #4]
   31430:	4718      	bx	r3
}
   31432:	f06f 000c 	mvn.w	r0, #12
   31436:	4770      	bx	lr
   31438:	2001a3ec 	.word	0x2001a3ec

0003143c <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   3143c:	4a04      	ldr	r2, [pc, #16]	; (31450 <dfu_target_write+0x14>)
   3143e:	6812      	ldr	r2, [r2, #0]
   31440:	b112      	cbz	r2, 31448 <dfu_target_write+0xc>
   31442:	b108      	cbz	r0, 31448 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   31444:	6893      	ldr	r3, [r2, #8]
   31446:	4718      	bx	r3
}
   31448:	f06f 000c 	mvn.w	r0, #12
   3144c:	4770      	bx	lr
   3144e:	bf00      	nop
   31450:	2001a3ec 	.word	0x2001a3ec

00031454 <dfu_target_done>:

int dfu_target_done(bool successful)
{
	int err;

	if (current_target == NULL) {
   31454:	4b08      	ldr	r3, [pc, #32]	; (31478 <dfu_target_done+0x24>)
{
   31456:	b510      	push	{r4, lr}
	if (current_target == NULL) {
   31458:	681b      	ldr	r3, [r3, #0]
   3145a:	b14b      	cbz	r3, 31470 <dfu_target_done+0x1c>
		return -EACCES;
	}

	err = current_target->done(successful);
   3145c:	68db      	ldr	r3, [r3, #12]
   3145e:	4798      	blx	r3
	if (err != 0) {
   31460:	4604      	mov	r4, r0
   31462:	b118      	cbz	r0, 3146c <dfu_target_done+0x18>
		LOG_ERR("Unable to clean up dfu_target");
   31464:	2145      	movs	r1, #69	; 0x45
   31466:	4805      	ldr	r0, [pc, #20]	; (3147c <dfu_target_done+0x28>)
   31468:	f00b fec7 	bl	3d1fa <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   3146c:	4620      	mov	r0, r4
   3146e:	bd10      	pop	{r4, pc}
		return -EACCES;
   31470:	f06f 040c 	mvn.w	r4, #12
   31474:	e7fa      	b.n	3146c <dfu_target_done+0x18>
   31476:	bf00      	nop
   31478:	2001a3ec 	.word	0x2001a3ec
   3147c:	0004babe 	.word	0x0004babe

00031480 <dfu_target_reset>:

int dfu_target_reset(void)
{
   31480:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   31482:	4d08      	ldr	r5, [pc, #32]	; (314a4 <dfu_target_reset+0x24>)
   31484:	682b      	ldr	r3, [r5, #0]
   31486:	b153      	cbz	r3, 3149e <dfu_target_reset+0x1e>
		int err = current_target->done(false);
   31488:	2000      	movs	r0, #0
   3148a:	68db      	ldr	r3, [r3, #12]
   3148c:	4798      	blx	r3

		if (err != 0) {
   3148e:	4604      	mov	r4, r0
   31490:	b128      	cbz	r0, 3149e <dfu_target_reset+0x1e>
			LOG_ERR("Unable to clean up dfu_target");
   31492:	2145      	movs	r1, #69	; 0x45
   31494:	4804      	ldr	r0, [pc, #16]	; (314a8 <dfu_target_reset+0x28>)
   31496:	f00b feb0 	bl	3d1fa <z_log_minimal_printk>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   3149a:	4620      	mov	r0, r4
   3149c:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   3149e:	2400      	movs	r4, #0
   314a0:	602c      	str	r4, [r5, #0]
	return 0;
   314a2:	e7fa      	b.n	3149a <dfu_target_reset+0x1a>
   314a4:	2001a3ec 	.word	0x2001a3ec
   314a8:	0004babe 	.word	0x0004babe

000314ac <dfu_target_schedule_update>:

int dfu_target_schedule_update(int img_num)
{
   314ac:	b510      	push	{r4, lr}
	int err = 0;

	if (current_target == NULL) {
   314ae:	4c05      	ldr	r4, [pc, #20]	; (314c4 <dfu_target_schedule_update+0x18>)
   314b0:	6823      	ldr	r3, [r4, #0]
   314b2:	b123      	cbz	r3, 314be <dfu_target_schedule_update+0x12>
		return -EACCES;
	}

	err = current_target->schedule_update(img_num);
   314b4:	691b      	ldr	r3, [r3, #16]
   314b6:	4798      	blx	r3
	current_target = NULL;
   314b8:	2300      	movs	r3, #0
   314ba:	6023      	str	r3, [r4, #0]

	return err;
}
   314bc:	bd10      	pop	{r4, pc}
		return -EACCES;
   314be:	f06f 000c 	mvn.w	r0, #12
   314c2:	e7fb      	b.n	314bc <dfu_target_schedule_update+0x10>
   314c4:	2001a3ec 	.word	0x2001a3ec

000314c8 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   314c8:	4800      	ldr	r0, [pc, #0]	; (314cc <dfu_target_stream_get_stream+0x4>)
   314ca:	4770      	bx	lr
   314cc:	2001a3f4 	.word	0x2001a3f4

000314d0 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   314d0:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   314d2:	4c12      	ldr	r4, [pc, #72]	; (3151c <dfu_target_stream_init+0x4c>)
{
   314d4:	b085      	sub	sp, #20
	if (current_id != NULL) {
   314d6:	6823      	ldr	r3, [r4, #0]
   314d8:	b9d3      	cbnz	r3, 31510 <dfu_target_stream_init+0x40>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   314da:	b1e0      	cbz	r0, 31516 <dfu_target_stream_init+0x46>
   314dc:	6805      	ldr	r5, [r0, #0]
   314de:	b1d5      	cbz	r5, 31516 <dfu_target_stream_init+0x46>
   314e0:	6841      	ldr	r1, [r0, #4]
   314e2:	b1c1      	cbz	r1, 31516 <dfu_target_stream_init+0x46>
	    init->buf == NULL) {
   314e4:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   314e6:	b1b2      	cbz	r2, 31516 <dfu_target_stream_init+0x46>
		return -EINVAL;
	}

	current_id = init->id;
   314e8:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   314ea:	9302      	str	r3, [sp, #8]
   314ec:	6943      	ldr	r3, [r0, #20]
   314ee:	9301      	str	r3, [sp, #4]
   314f0:	6903      	ldr	r3, [r0, #16]
   314f2:	9300      	str	r3, [sp, #0]
   314f4:	68c3      	ldr	r3, [r0, #12]
   314f6:	480a      	ldr	r0, [pc, #40]	; (31520 <dfu_target_stream_init+0x50>)
   314f8:	f7f0 ff30 	bl	2235c <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   314fc:	4604      	mov	r4, r0
   314fe:	b120      	cbz	r0, 3150a <dfu_target_stream_init+0x3a>
		LOG_ERR("stream_flash_init failed (err %d)", err);
   31500:	4602      	mov	r2, r0
   31502:	2145      	movs	r1, #69	; 0x45
   31504:	4807      	ldr	r0, [pc, #28]	; (31524 <dfu_target_stream_init+0x54>)
   31506:	f00b fe78 	bl	3d1fa <z_log_minimal_printk>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   3150a:	4620      	mov	r0, r4
   3150c:	b005      	add	sp, #20
   3150e:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   31510:	f06f 040d 	mvn.w	r4, #13
   31514:	e7f9      	b.n	3150a <dfu_target_stream_init+0x3a>
		return -EINVAL;
   31516:	f06f 0415 	mvn.w	r4, #21
   3151a:	e7f6      	b.n	3150a <dfu_target_stream_init+0x3a>
   3151c:	2001a3f0 	.word	0x2001a3f0
   31520:	2001a3f4 	.word	0x2001a3f4
   31524:	0004baec 	.word	0x0004baec

00031528 <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   31528:	b510      	push	{r4, lr}
   3152a:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   3152c:	4802      	ldr	r0, [pc, #8]	; (31538 <dfu_target_stream_offset_get+0x10>)
   3152e:	f00c fb9c 	bl	3dc6a <stream_flash_bytes_written>
   31532:	6020      	str	r0, [r4, #0]

	return 0;
}
   31534:	2000      	movs	r0, #0
   31536:	bd10      	pop	{r4, pc}
   31538:	2001a3f4 	.word	0x2001a3f4

0003153c <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   3153c:	460a      	mov	r2, r1
   3153e:	b510      	push	{r4, lr}
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   31540:	4601      	mov	r1, r0
   31542:	2300      	movs	r3, #0
   31544:	4805      	ldr	r0, [pc, #20]	; (3155c <dfu_target_stream_write+0x20>)
   31546:	f00c fb4c 	bl	3dbe2 <stream_flash_buffered_write>

	if (err != 0) {
   3154a:	4604      	mov	r4, r0
   3154c:	b120      	cbz	r0, 31558 <dfu_target_stream_write+0x1c>
		LOG_ERR("stream_flash_buffered_write error %d", err);
   3154e:	4602      	mov	r2, r0
   31550:	2145      	movs	r1, #69	; 0x45
   31552:	4803      	ldr	r0, [pc, #12]	; (31560 <dfu_target_stream_write+0x24>)
   31554:	f00b fe51 	bl	3d1fa <z_log_minimal_printk>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   31558:	4620      	mov	r0, r4
   3155a:	bd10      	pop	{r4, pc}
   3155c:	2001a3f4 	.word	0x2001a3f4
   31560:	0004bb13 	.word	0x0004bb13

00031564 <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   31564:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   31566:	b188      	cbz	r0, 3158c <dfu_target_stream_done+0x28>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   31568:	2200      	movs	r2, #0
   3156a:	2301      	movs	r3, #1
   3156c:	4611      	mov	r1, r2
   3156e:	4808      	ldr	r0, [pc, #32]	; (31590 <dfu_target_stream_done+0x2c>)
   31570:	f00c fb37 	bl	3dbe2 <stream_flash_buffered_write>
		if (err != 0) {
   31574:	4604      	mov	r4, r0
   31576:	b120      	cbz	r0, 31582 <dfu_target_stream_done+0x1e>
			LOG_ERR("stream_flash_buffered_write error %d", err);
   31578:	4602      	mov	r2, r0
   3157a:	2145      	movs	r1, #69	; 0x45
   3157c:	4805      	ldr	r0, [pc, #20]	; (31594 <dfu_target_stream_done+0x30>)
   3157e:	f00b fe3c 	bl	3d1fa <z_log_minimal_printk>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   31582:	2200      	movs	r2, #0
   31584:	4b04      	ldr	r3, [pc, #16]	; (31598 <dfu_target_stream_done+0x34>)

	return err;
}
   31586:	4620      	mov	r0, r4
	current_id = NULL;
   31588:	601a      	str	r2, [r3, #0]
}
   3158a:	bd10      	pop	{r4, pc}
	int err = 0;
   3158c:	4604      	mov	r4, r0
   3158e:	e7f8      	b.n	31582 <dfu_target_stream_done+0x1e>
   31590:	2001a3f4 	.word	0x2001a3f4
   31594:	0004bb13 	.word	0x0004bb13
   31598:	2001a3f0 	.word	0x2001a3f0

0003159c <delete_banked_modem_delta_fw>:

static dfu_target_callback_t callback;

#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
   3159c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int err;
	int offset;
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   3159e:	2149      	movs	r1, #73	; 0x49
   315a0:	481b      	ldr	r0, [pc, #108]	; (31610 <delete_banked_modem_delta_fw+0x74>)
   315a2:	f00b fe2a 	bl	3d1fa <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_erase();
   315a6:	f004 fa93 	bl	35ad0 <nrf_modem_delta_dfu_erase>
	if (err != 0) {
   315aa:	4602      	mov	r2, r0
   315ac:	b140      	cbz	r0, 315c0 <delete_banked_modem_delta_fw+0x24>
		LOG_ERR("Failed to delete backup, error %d", err);
   315ae:	2145      	movs	r1, #69	; 0x45
   315b0:	4818      	ldr	r0, [pc, #96]	; (31614 <delete_banked_modem_delta_fw+0x78>)
   315b2:	f00b fe22 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   315b6:	f06f 040d 	mvn.w	r4, #13
			break;
		}
	}

	return 0;
}
   315ba:	4620      	mov	r0, r4
   315bc:	b003      	add	sp, #12
   315be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   315c0:	253c      	movs	r5, #60	; 0x3c
				callback(DFU_TARGET_EVT_TIMEOUT);
   315c2:	4e15      	ldr	r6, [pc, #84]	; (31618 <delete_banked_modem_delta_fw+0x7c>)
				LOG_ERR("Error during erase, error %d", err);
   315c4:	4f15      	ldr	r7, [pc, #84]	; (3161c <delete_banked_modem_delta_fw+0x80>)
		err = nrf_modem_delta_dfu_offset(&offset);
   315c6:	a801      	add	r0, sp, #4
   315c8:	f004 f97e 	bl	358c8 <nrf_modem_delta_dfu_offset>
		if (err != 0) {
   315cc:	4604      	mov	r4, r0
   315ce:	b1a8      	cbz	r0, 315fc <delete_banked_modem_delta_fw+0x60>
			if (timeout < 0) {
   315d0:	2d00      	cmp	r5, #0
   315d2:	da03      	bge.n	315dc <delete_banked_modem_delta_fw+0x40>
				callback(DFU_TARGET_EVT_TIMEOUT);
   315d4:	2000      	movs	r0, #0
   315d6:	6833      	ldr	r3, [r6, #0]
   315d8:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   315da:	253c      	movs	r5, #60	; 0x3c
			if (err != NRF_MODEM_DELTA_DFU_ERASE_PENDING &&
   315dc:	2c11      	cmp	r4, #17
   315de:	d006      	beq.n	315ee <delete_banked_modem_delta_fw+0x52>
   315e0:	2c05      	cmp	r4, #5
   315e2:	d004      	beq.n	315ee <delete_banked_modem_delta_fw+0x52>
				LOG_ERR("Error during erase, error %d", err);
   315e4:	4622      	mov	r2, r4
   315e6:	2145      	movs	r1, #69	; 0x45
   315e8:	4638      	mov	r0, r7
   315ea:	f00b fe06 	bl	3d1fa <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   315ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   315f2:	2100      	movs	r1, #0
   315f4:	f007 fb18 	bl	38c28 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   315f8:	3d01      	subs	r5, #1
		err = nrf_modem_delta_dfu_offset(&offset);
   315fa:	e7e4      	b.n	315c6 <delete_banked_modem_delta_fw+0x2a>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   315fc:	4b06      	ldr	r3, [pc, #24]	; (31618 <delete_banked_modem_delta_fw+0x7c>)
   315fe:	2001      	movs	r0, #1
   31600:	681b      	ldr	r3, [r3, #0]
   31602:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   31604:	2149      	movs	r1, #73	; 0x49
   31606:	4806      	ldr	r0, [pc, #24]	; (31620 <delete_banked_modem_delta_fw+0x84>)
   31608:	f00b fdf7 	bl	3d1fa <z_log_minimal_printk>
	return 0;
   3160c:	e7d5      	b.n	315ba <delete_banked_modem_delta_fw+0x1e>
   3160e:	bf00      	nop
   31610:	0004bb4f 	.word	0x0004bb4f
   31614:	0004bb8b 	.word	0x0004bb8b
   31618:	2001a418 	.word	0x2001a418
   3161c:	0004bbb2 	.word	0x0004bbb2
   31620:	0004bbd4 	.word	0x0004bbd4

00031624 <dfu_target_modem_delta_identify>:

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   31624:	6840      	ldr	r0, [r0, #4]
}
   31626:	4b02      	ldr	r3, [pc, #8]	; (31630 <dfu_target_modem_delta_identify+0xc>)
   31628:	1ac3      	subs	r3, r0, r3
   3162a:	4258      	negs	r0, r3
   3162c:	4158      	adcs	r0, r3
   3162e:	4770      	bx	lr
   31630:	7544656d 	.word	0x7544656d

00031634 <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, int img_num, dfu_target_callback_t cb)
{
   31634:	b530      	push	{r4, r5, lr}
   31636:	b099      	sub	sp, #100	; 0x64
	int offset;
	size_t scratch_space;
	struct nrf_modem_delta_dfu_uuid version;
	char version_string[NRF_MODEM_DELTA_DFU_UUID_LEN+1];

	callback = cb;
   31638:	4b1f      	ldr	r3, [pc, #124]	; (316b8 <dfu_target_modem_delta_init+0x84>)

	/* Retrieve and print modem firmware UUID */
	err = nrf_modem_delta_dfu_uuid(&version);
   3163a:	ad05      	add	r5, sp, #20
{
   3163c:	4604      	mov	r4, r0
	err = nrf_modem_delta_dfu_uuid(&version);
   3163e:	4628      	mov	r0, r5
	callback = cb;
   31640:	601a      	str	r2, [r3, #0]
	err = nrf_modem_delta_dfu_uuid(&version);
   31642:	f004 f989 	bl	35958 <nrf_modem_delta_dfu_uuid>
	if (err != 0) {
   31646:	4602      	mov	r2, r0
   31648:	b138      	cbz	r0, 3165a <dfu_target_modem_delta_init+0x26>
		LOG_ERR("Firmware version request failed, error %d", err);
   3164a:	2145      	movs	r1, #69	; 0x45
   3164c:	481b      	ldr	r0, [pc, #108]	; (316bc <dfu_target_modem_delta_init+0x88>)
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));

	/* Check if scratch area is big enough for downloaded image */
	err = nrf_modem_delta_dfu_area(&scratch_space);
	if (err != 0) {
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   3164e:	f00b fdd4 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   31652:	f06f 000d 	mvn.w	r0, #13
		err = delete_banked_modem_delta_fw();
		return err;
	}

	return 0;
}
   31656:	b019      	add	sp, #100	; 0x64
   31658:	bd30      	pop	{r4, r5, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   3165a:	2324      	movs	r3, #36	; 0x24
   3165c:	2125      	movs	r1, #37	; 0x25
   3165e:	4a18      	ldr	r2, [pc, #96]	; (316c0 <dfu_target_modem_delta_init+0x8c>)
   31660:	9500      	str	r5, [sp, #0]
   31662:	a80e      	add	r0, sp, #56	; 0x38
   31664:	f009 fb2a 	bl	3acbc <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   31668:	aa0e      	add	r2, sp, #56	; 0x38
   3166a:	2149      	movs	r1, #73	; 0x49
   3166c:	4815      	ldr	r0, [pc, #84]	; (316c4 <dfu_target_modem_delta_init+0x90>)
   3166e:	f00b fdc4 	bl	3d1fa <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_area(&scratch_space);
   31672:	a804      	add	r0, sp, #16
   31674:	f004 f94c 	bl	35910 <nrf_modem_delta_dfu_area>
	if (err != 0) {
   31678:	4602      	mov	r2, r0
   3167a:	b110      	cbz	r0, 31682 <dfu_target_modem_delta_init+0x4e>
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   3167c:	2145      	movs	r1, #69	; 0x45
   3167e:	4812      	ldr	r0, [pc, #72]	; (316c8 <dfu_target_modem_delta_init+0x94>)
   31680:	e7e5      	b.n	3164e <dfu_target_modem_delta_init+0x1a>
	if (file_size > scratch_space) {
   31682:	9b04      	ldr	r3, [sp, #16]
   31684:	42a3      	cmp	r3, r4
   31686:	d207      	bcs.n	31698 <dfu_target_modem_delta_init+0x64>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   31688:	4810      	ldr	r0, [pc, #64]	; (316cc <dfu_target_modem_delta_init+0x98>)
   3168a:	4622      	mov	r2, r4
   3168c:	2145      	movs	r1, #69	; 0x45
   3168e:	f00b fdb4 	bl	3d1fa <z_log_minimal_printk>
		return -EFBIG;
   31692:	f06f 001a 	mvn.w	r0, #26
   31696:	e7de      	b.n	31656 <dfu_target_modem_delta_init+0x22>
	err = nrf_modem_delta_dfu_offset(&offset);
   31698:	a803      	add	r0, sp, #12
   3169a:	f004 f915 	bl	358c8 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   3169e:	b118      	cbz	r0, 316a8 <dfu_target_modem_delta_init+0x74>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   316a0:	4602      	mov	r2, r0
   316a2:	2145      	movs	r1, #69	; 0x45
   316a4:	480a      	ldr	r0, [pc, #40]	; (316d0 <dfu_target_modem_delta_init+0x9c>)
   316a6:	e7d2      	b.n	3164e <dfu_target_modem_delta_init+0x1a>
	if (offset == NRF_MODEM_DELTA_DFU_OFFSET_DIRTY) {
   316a8:	9b03      	ldr	r3, [sp, #12]
   316aa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
   316ae:	d1d2      	bne.n	31656 <dfu_target_modem_delta_init+0x22>
		err = delete_banked_modem_delta_fw();
   316b0:	f7ff ff74 	bl	3159c <delete_banked_modem_delta_fw>
		return err;
   316b4:	e7cf      	b.n	31656 <dfu_target_modem_delta_init+0x22>
   316b6:	bf00      	nop
   316b8:	2001a418 	.word	0x2001a418
   316bc:	0004bbf2 	.word	0x0004bbf2
   316c0:	00048bc5 	.word	0x00048bc5
   316c4:	0004bc21 	.word	0x0004bc21
   316c8:	0004bc41 	.word	0x0004bc41
   316cc:	0004bc7a 	.word	0x0004bc7a
   316d0:	0004bcae 	.word	0x0004bcae

000316d4 <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
   316d4:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_delta_dfu_offset(out);
   316d6:	f004 f8f7 	bl	358c8 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   316da:	b130      	cbz	r0, 316ea <dfu_target_modem_delta_offset_get+0x16>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   316dc:	4602      	mov	r2, r0
   316de:	2145      	movs	r1, #69	; 0x45
   316e0:	4802      	ldr	r0, [pc, #8]	; (316ec <dfu_target_modem_delta_offset_get+0x18>)
   316e2:	f00b fd8a 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   316e6:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   316ea:	bd08      	pop	{r3, pc}
   316ec:	0004bcae 	.word	0x0004bcae

000316f0 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   316f0:	b570      	push	{r4, r5, r6, lr}
   316f2:	4605      	mov	r5, r0
   316f4:	460e      	mov	r6, r1
	int err;

	err = nrf_modem_delta_dfu_write_init();
   316f6:	f004 f959 	bl	359ac <nrf_modem_delta_dfu_write_init>
	if (err != 0 && err != -NRF_EALREADY) {
   316fa:	4602      	mov	r2, r0
   316fc:	b148      	cbz	r0, 31712 <dfu_target_modem_delta_write+0x22>
   316fe:	f110 0f78 	cmn.w	r0, #120	; 0x78
   31702:	d006      	beq.n	31712 <dfu_target_modem_delta_write+0x22>
		LOG_ERR("Failed to ready modem for firmware update receival, error %d", err);
   31704:	2145      	movs	r1, #69	; 0x45
   31706:	4816      	ldr	r0, [pc, #88]	; (31760 <dfu_target_modem_delta_write+0x70>)
		return -EFAULT;
	}

	err = nrf_modem_delta_dfu_write(buf, len);
	if (err < 0) {
		LOG_ERR("Write failed, modem library error %d", err);
   31708:	f00b fd77 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   3170c:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   31710:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_modem_delta_dfu_write(buf, len);
   31712:	4631      	mov	r1, r6
   31714:	4628      	mov	r0, r5
   31716:	f004 f975 	bl	35a04 <nrf_modem_delta_dfu_write>
	if (err < 0) {
   3171a:	1e04      	subs	r4, r0, #0
   3171c:	da03      	bge.n	31726 <dfu_target_modem_delta_write+0x36>
		LOG_ERR("Write failed, modem library error %d", err);
   3171e:	4622      	mov	r2, r4
   31720:	2145      	movs	r1, #69	; 0x45
   31722:	4810      	ldr	r0, [pc, #64]	; (31764 <dfu_target_modem_delta_write+0x74>)
   31724:	e7f0      	b.n	31708 <dfu_target_modem_delta_write+0x18>
	} else if (err > 0) {
   31726:	d016      	beq.n	31756 <dfu_target_modem_delta_write+0x66>
		LOG_ERR("Write failed, modem error %d", err);
   31728:	4622      	mov	r2, r4
   3172a:	2145      	movs	r1, #69	; 0x45
   3172c:	480e      	ldr	r0, [pc, #56]	; (31768 <dfu_target_modem_delta_write+0x78>)
   3172e:	f00b fd64 	bl	3d1fa <z_log_minimal_printk>
		switch (err) {
   31732:	2c0b      	cmp	r4, #11
   31734:	d008      	beq.n	31748 <dfu_target_modem_delta_write+0x58>
   31736:	2c0e      	cmp	r4, #14
   31738:	d006      	beq.n	31748 <dfu_target_modem_delta_write+0x58>
			return -EINVAL;
   3173a:	2c09      	cmp	r4, #9
   3173c:	bf14      	ite	ne
   3173e:	f06f 000d 	mvnne.w	r0, #13
   31742:	f06f 0015 	mvneq.w	r0, #21
   31746:	e7e3      	b.n	31710 <dfu_target_modem_delta_write+0x20>
			delete_banked_modem_delta_fw();
   31748:	f7ff ff28 	bl	3159c <delete_banked_modem_delta_fw>
			err = dfu_target_modem_delta_write(buf, len);
   3174c:	4631      	mov	r1, r6
   3174e:	4628      	mov	r0, r5
   31750:	f7ff ffce 	bl	316f0 <dfu_target_modem_delta_write>
			if (err != 0) {
   31754:	b908      	cbnz	r0, 3175a <dfu_target_modem_delta_write+0x6a>
				return 0;
   31756:	2000      	movs	r0, #0
   31758:	e7da      	b.n	31710 <dfu_target_modem_delta_write+0x20>
				return -EINVAL;
   3175a:	f06f 0015 	mvn.w	r0, #21
   3175e:	e7d7      	b.n	31710 <dfu_target_modem_delta_write+0x20>
   31760:	0004bce7 	.word	0x0004bce7
   31764:	0004bd29 	.word	0x0004bd29
   31768:	0004bd53 	.word	0x0004bd53

0003176c <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   3176c:	b508      	push	{r3, lr}
	int err;

	ARG_UNUSED(successful);

	err = nrf_modem_delta_dfu_write_done();
   3176e:	f004 f975 	bl	35a5c <nrf_modem_delta_dfu_write_done>
	if (err != 0) {
   31772:	b130      	cbz	r0, 31782 <dfu_target_modem_delta_done+0x16>
		LOG_ERR("Failed to stop MFU and release resources, error %d", err);
   31774:	4602      	mov	r2, r0
   31776:	2145      	movs	r1, #69	; 0x45
   31778:	4802      	ldr	r0, [pc, #8]	; (31784 <dfu_target_modem_delta_done+0x18>)
   3177a:	f00b fd3e 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   3177e:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   31782:	bd08      	pop	{r3, pc}
   31784:	0004bd75 	.word	0x0004bd75

00031788 <dfu_target_modem_delta_schedule_update>:

int dfu_target_modem_delta_schedule_update(int img_num)
{
   31788:	b510      	push	{r4, lr}
	int err;

	ARG_UNUSED(img_num);

	err = nrf_modem_delta_dfu_update();
   3178a:	f004 f987 	bl	35a9c <nrf_modem_delta_dfu_update>

	if (err != 0) {
   3178e:	4604      	mov	r4, r0
   31790:	b140      	cbz	r0, 317a4 <dfu_target_modem_delta_schedule_update+0x1c>
		LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
   31792:	4602      	mov	r2, r0
   31794:	2145      	movs	r1, #69	; 0x45
   31796:	4806      	ldr	r0, [pc, #24]	; (317b0 <dfu_target_modem_delta_schedule_update+0x28>)
   31798:	f00b fd2f 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   3179c:	f06f 040d 	mvn.w	r4, #13
	}
	LOG_INF("Scheduling modem firmware upgrade at next boot");

	return err;
}
   317a0:	4620      	mov	r0, r4
   317a2:	bd10      	pop	{r4, pc}
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   317a4:	2149      	movs	r1, #73	; 0x49
   317a6:	4803      	ldr	r0, [pc, #12]	; (317b4 <dfu_target_modem_delta_schedule_update+0x2c>)
   317a8:	f00b fd27 	bl	3d1fa <z_log_minimal_printk>
	return err;
   317ac:	e7f8      	b.n	317a0 <dfu_target_modem_delta_schedule_update+0x18>
   317ae:	bf00      	nop
   317b0:	0004bdad 	.word	0x0004bdad
   317b4:	0004bde5 	.word	0x0004bde5

000317b8 <dfu_target_mcuboot_schedule_one_img.constprop.0>:

static int dfu_target_mcuboot_schedule_one_img(int img_num)
{
	int err = 0;

	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   317b8:	2100      	movs	r1, #0
static int dfu_target_mcuboot_schedule_one_img(int img_num)
   317ba:	b510      	push	{r4, lr}
	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   317bc:	4608      	mov	r0, r1
   317be:	f00c fb76 	bl	3deae <boot_request_upgrade_multi>
	if (err != 0) {
   317c2:	4604      	mov	r4, r0
   317c4:	b138      	cbz	r0, 317d6 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1e>
		LOG_ERR("boot_request_upgrade for image-%d error %d",
   317c6:	4603      	mov	r3, r0
   317c8:	2200      	movs	r2, #0
   317ca:	2145      	movs	r1, #69	; 0x45
   317cc:	4805      	ldr	r0, [pc, #20]	; (317e4 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x2c>)
   317ce:	f00b fd14 	bl	3d1fa <z_log_minimal_printk>
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
			"Reset device to apply", img_num);
	}

	return err;
}
   317d2:	4620      	mov	r0, r4
   317d4:	bd10      	pop	{r4, pc}
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
   317d6:	4602      	mov	r2, r0
   317d8:	2149      	movs	r1, #73	; 0x49
   317da:	4803      	ldr	r0, [pc, #12]	; (317e8 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x30>)
   317dc:	f00b fd0d 	bl	3d1fa <z_log_minimal_printk>
	return err;
   317e0:	e7f7      	b.n	317d2 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1a>
   317e2:	bf00      	nop
   317e4:	0004be30 	.word	0x0004be30
   317e8:	0004be60 	.word	0x0004be60

000317ec <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   317ec:	6800      	ldr	r0, [r0, #0]
}
   317ee:	4b02      	ldr	r3, [pc, #8]	; (317f8 <dfu_target_mcuboot_identify+0xc>)
   317f0:	1ac3      	subs	r3, r0, r3
   317f2:	4258      	negs	r0, r3
   317f4:	4158      	adcs	r0, r3
   317f6:	4770      	bx	lr
   317f8:	96f3b83d 	.word	0x96f3b83d

000317fc <dfu_target_mcuboot_set_buf>:
	if (buf == NULL) {
   317fc:	b140      	cbz	r0, 31810 <dfu_target_mcuboot_set_buf+0x14>
	if (!IS_ALIGNED_32(buf)) {
   317fe:	f010 0303 	ands.w	r3, r0, #3
   31802:	d105      	bne.n	31810 <dfu_target_mcuboot_set_buf+0x14>
	stream_buf = buf;
   31804:	4a04      	ldr	r2, [pc, #16]	; (31818 <dfu_target_mcuboot_set_buf+0x1c>)
   31806:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   31808:	4a04      	ldr	r2, [pc, #16]	; (3181c <dfu_target_mcuboot_set_buf+0x20>)
	return 0;
   3180a:	4618      	mov	r0, r3
	stream_buf_len = len;
   3180c:	6011      	str	r1, [r2, #0]
	return 0;
   3180e:	4770      	bx	lr
		return -EINVAL;
   31810:	f06f 0015 	mvn.w	r0, #21
}
   31814:	4770      	bx	lr
   31816:	bf00      	nop
   31818:	2001a41c 	.word	0x2001a41c
   3181c:	2001a424 	.word	0x2001a424

00031820 <dfu_target_mcuboot_init>:
{
   31820:	b530      	push	{r4, r5, lr}
	stream_buf_bytes = 0;
   31822:	2500      	movs	r5, #0
   31824:	4b21      	ldr	r3, [pc, #132]	; (318ac <dfu_target_mcuboot_init+0x8c>)
	if (stream_buf == NULL) {
   31826:	4c22      	ldr	r4, [pc, #136]	; (318b0 <dfu_target_mcuboot_init+0x90>)
	stream_buf_bytes = 0;
   31828:	601d      	str	r5, [r3, #0]
	if (stream_buf == NULL) {
   3182a:	6823      	ldr	r3, [r4, #0]
{
   3182c:	4602      	mov	r2, r0
   3182e:	b089      	sub	sp, #36	; 0x24
	if (stream_buf == NULL) {
   31830:	b943      	cbnz	r3, 31844 <dfu_target_mcuboot_init+0x24>
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   31832:	2145      	movs	r1, #69	; 0x45
   31834:	481f      	ldr	r0, [pc, #124]	; (318b4 <dfu_target_mcuboot_init+0x94>)
   31836:	f00b fce0 	bl	3d1fa <z_log_minimal_printk>
		return -ENODEV;
   3183a:	f06f 0412 	mvn.w	r4, #18
}
   3183e:	4620      	mov	r0, r4
   31840:	b009      	add	sp, #36	; 0x24
   31842:	bd30      	pop	{r4, r5, pc}
	if (file_size > secondary_size[img_num]) {
   31844:	f5b0 2fd0 	cmp.w	r0, #425984	; 0x68000
   31848:	d908      	bls.n	3185c <dfu_target_mcuboot_init+0x3c>
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   3184a:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   3184e:	2145      	movs	r1, #69	; 0x45
   31850:	4819      	ldr	r0, [pc, #100]	; (318b8 <dfu_target_mcuboot_init+0x98>)
   31852:	f00b fcd2 	bl	3d1fa <z_log_minimal_printk>
		return -EFBIG;
   31856:	f06f 041a 	mvn.w	r4, #26
   3185a:	e7f0      	b.n	3183e <dfu_target_mcuboot_init+0x1e>
   3185c:	4817      	ldr	r0, [pc, #92]	; (318bc <dfu_target_mcuboot_init+0x9c>)
   3185e:	f004 fe41 	bl	364e4 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   31862:	b938      	cbnz	r0, 31874 <dfu_target_mcuboot_init+0x54>
		LOG_ERR("Failed to get device '%s'",
   31864:	2145      	movs	r1, #69	; 0x45
   31866:	4a15      	ldr	r2, [pc, #84]	; (318bc <dfu_target_mcuboot_init+0x9c>)
   31868:	4815      	ldr	r0, [pc, #84]	; (318c0 <dfu_target_mcuboot_init+0xa0>)
   3186a:	f00b fcc6 	bl	3d1fa <z_log_minimal_printk>
		return -EFAULT;
   3186e:	f06f 040d 	mvn.w	r4, #13
   31872:	e7e4      	b.n	3183e <dfu_target_mcuboot_init+0x1e>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   31874:	4b13      	ldr	r3, [pc, #76]	; (318c4 <dfu_target_mcuboot_init+0xa4>)
   31876:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   3187a:	e9cd 3001 	strd	r3, r0, [sp, #4]
   3187e:	6823      	ldr	r3, [r4, #0]
   31880:	a801      	add	r0, sp, #4
   31882:	9303      	str	r3, [sp, #12]
   31884:	4b10      	ldr	r3, [pc, #64]	; (318c8 <dfu_target_mcuboot_init+0xa8>)
   31886:	9507      	str	r5, [sp, #28]
   31888:	681b      	ldr	r3, [r3, #0]
   3188a:	9304      	str	r3, [sp, #16]
   3188c:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   31890:	e9cd 2305 	strd	r2, r3, [sp, #20]
   31894:	f7ff fe1c 	bl	314d0 <dfu_target_stream_init>
	if (err < 0) {
   31898:	1e04      	subs	r4, r0, #0
   3189a:	da05      	bge.n	318a8 <dfu_target_mcuboot_init+0x88>
		LOG_ERR("dfu_target_stream_init failed %d", err);
   3189c:	4622      	mov	r2, r4
   3189e:	2145      	movs	r1, #69	; 0x45
   318a0:	480a      	ldr	r0, [pc, #40]	; (318cc <dfu_target_mcuboot_init+0xac>)
   318a2:	f00b fcaa 	bl	3d1fa <z_log_minimal_printk>
		return err;
   318a6:	e7ca      	b.n	3183e <dfu_target_mcuboot_init+0x1e>
	return 0;
   318a8:	462c      	mov	r4, r5
   318aa:	e7c8      	b.n	3183e <dfu_target_mcuboot_init+0x1e>
   318ac:	2001a420 	.word	0x2001a420
   318b0:	2001a41c 	.word	0x2001a41c
   318b4:	0004be9f 	.word	0x0004be9f
   318b8:	0004bed8 	.word	0x0004bed8
   318bc:	00044d36 	.word	0x00044d36
   318c0:	0004bf0f 	.word	0x0004bf0f
   318c4:	0004bf2e 	.word	0x0004bf2e
   318c8:	2001a424 	.word	0x2001a424
   318cc:	0004bf37 	.word	0x0004bf37

000318d0 <dfu_target_mcuboot_offset_get>:
{
   318d0:	b510      	push	{r4, lr}
   318d2:	4604      	mov	r4, r0
	err = dfu_target_stream_offset_get(out);
   318d4:	f7ff fe28 	bl	31528 <dfu_target_stream_offset_get>
	if (err == 0) {
   318d8:	b920      	cbnz	r0, 318e4 <dfu_target_mcuboot_offset_get+0x14>
		*out += stream_buf_bytes;
   318da:	4a03      	ldr	r2, [pc, #12]	; (318e8 <dfu_target_mcuboot_offset_get+0x18>)
   318dc:	6823      	ldr	r3, [r4, #0]
   318de:	6812      	ldr	r2, [r2, #0]
   318e0:	4413      	add	r3, r2
   318e2:	6023      	str	r3, [r4, #0]
}
   318e4:	bd10      	pop	{r4, pc}
   318e6:	bf00      	nop
   318e8:	2001a420 	.word	0x2001a420

000318ec <dfu_target_mcuboot_write>:
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   318ec:	4a06      	ldr	r2, [pc, #24]	; (31908 <dfu_target_mcuboot_write+0x1c>)
{
   318ee:	b430      	push	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   318f0:	4c06      	ldr	r4, [pc, #24]	; (3190c <dfu_target_mcuboot_write+0x20>)
   318f2:	6813      	ldr	r3, [r2, #0]
   318f4:	6824      	ldr	r4, [r4, #0]
   318f6:	440b      	add	r3, r1
   318f8:	fbb3 f5f4 	udiv	r5, r3, r4
   318fc:	fb04 3315 	mls	r3, r4, r5, r3
}
   31900:	bc30      	pop	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   31902:	6013      	str	r3, [r2, #0]
	return dfu_target_stream_write(buf, len);
   31904:	f7ff be1a 	b.w	3153c <dfu_target_stream_write>
   31908:	2001a420 	.word	0x2001a420
   3190c:	2001a424 	.word	0x2001a424

00031910 <dfu_target_mcuboot_done>:
{
   31910:	b538      	push	{r3, r4, r5, lr}
   31912:	4605      	mov	r5, r0
	err = dfu_target_stream_done(successful);
   31914:	f7ff fe26 	bl	31564 <dfu_target_stream_done>
	if (err != 0) {
   31918:	4604      	mov	r4, r0
   3191a:	b130      	cbz	r0, 3192a <dfu_target_mcuboot_done+0x1a>
		LOG_ERR("dfu_target_stream_done error %d", err);
   3191c:	2145      	movs	r1, #69	; 0x45
   3191e:	4602      	mov	r2, r0
   31920:	480c      	ldr	r0, [pc, #48]	; (31954 <dfu_target_mcuboot_done+0x44>)
			LOG_ERR("Unable to delete last page: %d", err);
   31922:	f00b fc6a 	bl	3d1fa <z_log_minimal_printk>
}
   31926:	4620      	mov	r0, r4
   31928:	bd38      	pop	{r3, r4, r5, pc}
	if (successful) {
   3192a:	b16d      	cbz	r5, 31948 <dfu_target_mcuboot_done+0x38>
		stream_buf_bytes = 0;
   3192c:	4b0a      	ldr	r3, [pc, #40]	; (31958 <dfu_target_mcuboot_done+0x48>)
   3192e:	6018      	str	r0, [r3, #0]
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   31930:	f7ff fdca 	bl	314c8 <dfu_target_stream_get_stream>
   31934:	4909      	ldr	r1, [pc, #36]	; (3195c <dfu_target_mcuboot_done+0x4c>)
   31936:	f7f0 fc77 	bl	22228 <stream_flash_erase_page>
		if (err != 0) {
   3193a:	4604      	mov	r4, r0
   3193c:	2800      	cmp	r0, #0
   3193e:	d0f2      	beq.n	31926 <dfu_target_mcuboot_done+0x16>
			LOG_ERR("Unable to delete last page: %d", err);
   31940:	4602      	mov	r2, r0
   31942:	2145      	movs	r1, #69	; 0x45
   31944:	4806      	ldr	r0, [pc, #24]	; (31960 <dfu_target_mcuboot_done+0x50>)
   31946:	e7ec      	b.n	31922 <dfu_target_mcuboot_done+0x12>
		LOG_INF("MCUBoot image upgrade aborted.");
   31948:	2149      	movs	r1, #73	; 0x49
   3194a:	4806      	ldr	r0, [pc, #24]	; (31964 <dfu_target_mcuboot_done+0x54>)
   3194c:	f00b fc55 	bl	3d1fa <z_log_minimal_printk>
   31950:	e7e9      	b.n	31926 <dfu_target_mcuboot_done+0x16>
   31952:	bf00      	nop
   31954:	0004bf5d 	.word	0x0004bf5d
   31958:	2001a420 	.word	0x2001a420
   3195c:	000dffff 	.word	0x000dffff
   31960:	0004bf82 	.word	0x0004bf82
   31964:	0004bfa6 	.word	0x0004bfa6

00031968 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   31968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3196c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   3196e:	4c21      	ldr	r4, [pc, #132]	; (319f4 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   31970:	4e21      	ldr	r6, [pc, #132]	; (319f8 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31972:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   31976:	f8df 9088 	ldr.w	r9, [pc, #136]	; 31a00 <check_ext_api_requests+0x98>
{
   3197a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3197c:	45a8      	cmp	r8, r5
   3197e:	d803      	bhi.n	31988 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   31980:	2000      	movs	r0, #0
   31982:	b005      	add	sp, #20
   31984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   31988:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3198a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   3198e:	681f      	ldr	r7, [r3, #0]
   31990:	ab01      	add	r3, sp, #4
   31992:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   31996:	220c      	movs	r2, #12
   31998:	4619      	mov	r1, r3
   3199a:	4638      	mov	r0, r7
   3199c:	f010 f8b0 	bl	41b00 <memcmp>
   319a0:	b990      	cbnz	r0, 319c8 <check_ext_api_requests+0x60>
   319a2:	b18f      	cbz	r7, 319c8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   319a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   319a6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   319a8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   319aa:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   319ac:	4291      	cmp	r1, r2
   319ae:	d10b      	bne.n	319c8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   319b0:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   319b2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   319b4:	4291      	cmp	r1, r2
   319b6:	d807      	bhi.n	319c8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   319b8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   319ba:	4291      	cmp	r1, r2
   319bc:	d904      	bls.n	319c8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   319be:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   319c0:	695b      	ldr	r3, [r3, #20]
   319c2:	ea32 0303 	bics.w	r3, r2, r3
   319c6:	d00a      	beq.n	319de <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   319c8:	6a27      	ldr	r7, [r4, #32]
   319ca:	b167      	cbz	r7, 319e6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   319cc:	480b      	ldr	r0, [pc, #44]	; (319fc <check_ext_api_requests+0x94>)
   319ce:	f00b f9f7 	bl	3cdc0 <printk>
			k_panic();
   319d2:	4040      	eors	r0, r0
   319d4:	f380 8811 	msr	BASEPRI, r0
   319d8:	f04f 0004 	mov.w	r0, #4
   319dc:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   319de:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   319e0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   319e2:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   319e4:	e7ca      	b.n	3197c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   319e6:	4648      	mov	r0, r9
   319e8:	f00b f9ea 	bl	3cdc0 <printk>
			*ext_api_req->ext_api = NULL;
   319ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   319ee:	601f      	str	r7, [r3, #0]
   319f0:	e7f5      	b.n	319de <check_ext_api_requests+0x76>
   319f2:	bf00      	nop
   319f4:	0001c43c 	.word	0x0001c43c
   319f8:	00042f6c 	.word	0x00042f6c
   319fc:	0004bfdd 	.word	0x0004bfdd
   31a00:	0004c006 	.word	0x0004c006

00031a04 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   31a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   31a06:	b085      	sub	sp, #20
   31a08:	466e      	mov	r6, sp
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   31a0a:	6881      	ldr	r1, [r0, #8]
{
   31a0c:	4605      	mov	r5, r0
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   31a0e:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
   31a10:	f021 0407 	bic.w	r4, r1, #7

    erased_val = flash_area_erased_val(fap);
   31a14:	f00c f8b8 	bl	3db88 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   31a18:	4632      	mov	r2, r6
   31a1a:	4b0a      	ldr	r3, [pc, #40]	; (31a44 <boot_write_magic+0x40>)
   31a1c:	f103 0c10 	add.w	ip, r3, #16
   31a20:	4637      	mov	r7, r6
   31a22:	6818      	ldr	r0, [r3, #0]
   31a24:	6859      	ldr	r1, [r3, #4]
   31a26:	3308      	adds	r3, #8
   31a28:	c703      	stmia	r7!, {r0, r1}
   31a2a:	4563      	cmp	r3, ip
   31a2c:	463e      	mov	r6, r7
   31a2e:	d1f7      	bne.n	31a20 <boot_write_magic+0x1c>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   31a30:	2310      	movs	r3, #16
   31a32:	4621      	mov	r1, r4
   31a34:	4628      	mov	r0, r5
   31a36:	f00c f86b 	bl	3db10 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   31a3a:	3800      	subs	r0, #0
   31a3c:	bf18      	it	ne
   31a3e:	2001      	movne	r0, #1
   31a40:	b005      	add	sp, #20
   31a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31a44:	00043c14 	.word	0x00043c14

00031a48 <boot_read_swap_state>:
{
   31a48:	b530      	push	{r4, r5, lr}
   31a4a:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   31a4c:	6881      	ldr	r1, [r0, #8]
{
   31a4e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31a50:	2310      	movs	r3, #16
   31a52:	aa02      	add	r2, sp, #8
   31a54:	3910      	subs	r1, #16
{
   31a56:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31a58:	f00c f83e 	bl	3dad8 <flash_area_read>
    if (rc < 0) {
   31a5c:	2800      	cmp	r0, #0
   31a5e:	da02      	bge.n	31a66 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   31a60:	2001      	movs	r0, #1
}
   31a62:	b007      	add	sp, #28
   31a64:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
   31a66:	2210      	movs	r2, #16
   31a68:	4628      	mov	r0, r5
   31a6a:	a902      	add	r1, sp, #8
   31a6c:	f00e fa8d 	bl	3ff8a <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   31a70:	b390      	cbz	r0, 31ad8 <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
   31a72:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   31a74:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
   31a76:	4628      	mov	r0, r5
   31a78:	f00e fa98 	bl	3ffac <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   31a7c:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   31a7e:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   31a80:	f10d 0207 	add.w	r2, sp, #7
   31a84:	4628      	mov	r0, r5
   31a86:	f00c f827 	bl	3dad8 <flash_area_read>
    if (rc < 0) {
   31a8a:	2800      	cmp	r0, #0
   31a8c:	dbe8      	blt.n	31a60 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   31a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   31a92:	4628      	mov	r0, r5
   31a94:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   31a98:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   31a9a:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   31a9c:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   31a9e:	2201      	movs	r2, #1
   31aa0:	f10d 0107 	add.w	r1, sp, #7
   31aa4:	f00e fa71 	bl	3ff8a <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   31aa8:	b910      	cbnz	r0, 31ab0 <boot_read_swap_state+0x68>
   31aaa:	7863      	ldrb	r3, [r4, #1]
   31aac:	2b04      	cmp	r3, #4
   31aae:	d903      	bls.n	31ab8 <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   31ab0:	2301      	movs	r3, #1
   31ab2:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   31ab4:	2300      	movs	r3, #0
   31ab6:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   31ab8:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   31aba:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   31abc:	3a18      	subs	r2, #24
   31abe:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   31ac2:	3a08      	subs	r2, #8
   31ac4:	1ca1      	adds	r1, r4, #2
   31ac6:	f00e fa7d 	bl	3ffc4 <boot_read_flag>
    if (rc) {
   31aca:	2800      	cmp	r0, #0
   31acc:	d1c8      	bne.n	31a60 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
   31ace:	4628      	mov	r0, r5
   31ad0:	1ce1      	adds	r1, r4, #3
   31ad2:	f00e fad2 	bl	4007a <boot_read_image_ok>
   31ad6:	e7c4      	b.n	31a62 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   31ad8:	2210      	movs	r2, #16
   31ada:	4904      	ldr	r1, [pc, #16]	; (31aec <boot_read_swap_state+0xa4>)
   31adc:	a802      	add	r0, sp, #8
   31ade:	f010 f80f 	bl	41b00 <memcmp>
        return BOOT_MAGIC_GOOD;
   31ae2:	2800      	cmp	r0, #0
   31ae4:	bf14      	ite	ne
   31ae6:	2302      	movne	r3, #2
   31ae8:	2301      	moveq	r3, #1
   31aea:	e7c3      	b.n	31a74 <boot_read_swap_state+0x2c>
   31aec:	00043c14 	.word	0x00043c14

00031af0 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   31af0:	2a0e      	cmp	r2, #14
{
   31af2:	b513      	push	{r0, r1, r4, lr}
   31af4:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   31af6:	d906      	bls.n	31b06 <boot_write_swap_info+0x16>
   31af8:	4b0c      	ldr	r3, [pc, #48]	; (31b2c <boot_write_swap_info+0x3c>)
   31afa:	f240 11b1 	movw	r1, #433	; 0x1b1
   31afe:	4a0c      	ldr	r2, [pc, #48]	; (31b30 <boot_write_swap_info+0x40>)
   31b00:	480c      	ldr	r0, [pc, #48]	; (31b34 <boot_write_swap_info+0x44>)
   31b02:	f008 fa8b 	bl	3a01c <__assert_func>
   31b06:	290e      	cmp	r1, #14
   31b08:	d901      	bls.n	31b0e <boot_write_swap_info+0x1e>
   31b0a:	4b0b      	ldr	r3, [pc, #44]	; (31b38 <boot_write_swap_info+0x48>)
   31b0c:	e7f5      	b.n	31afa <boot_write_swap_info+0xa>
   31b0e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   31b12:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   31b16:	f00e fa49 	bl	3ffac <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   31b1a:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   31b1c:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   31b1e:	f10d 0207 	add.w	r2, sp, #7
   31b22:	4620      	mov	r0, r4
   31b24:	f00e fa6b 	bl	3fffe <boot_write_trailer>
}
   31b28:	b002      	add	sp, #8
   31b2a:	bd10      	pop	{r4, pc}
   31b2c:	0004c039 	.word	0x0004c039
   31b30:	0004c0c4 	.word	0x0004c0c4
   31b34:	0004c04b 	.word	0x0004c04b
   31b38:	0004c08e 	.word	0x0004c08e

00031b3c <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   31b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   31b3e:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   31b40:	2009      	movs	r0, #9
   31b42:	a901      	add	r1, sp, #4
   31b44:	f7f0 fb0a 	bl	2215c <flash_area_open>
    if (rc != 0) {
   31b48:	2800      	cmp	r0, #0
   31b4a:	d137      	bne.n	31bbc <boot_set_pending_multi+0x80>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   31b4c:	9801      	ldr	r0, [sp, #4]
   31b4e:	a902      	add	r1, sp, #8
   31b50:	f7ff ff7a 	bl	31a48 <boot_read_swap_state>
    if (rc != 0) {
   31b54:	4604      	mov	r4, r0
   31b56:	b938      	cbnz	r0, 31b68 <boot_set_pending_multi+0x2c>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   31b58:	f89d 5008 	ldrb.w	r5, [sp, #8]
   31b5c:	2d02      	cmp	r5, #2
   31b5e:	d01f      	beq.n	31ba0 <boot_set_pending_multi+0x64>
   31b60:	2d03      	cmp	r5, #3
   31b62:	d007      	beq.n	31b74 <boot_set_pending_multi+0x38>
   31b64:	2d01      	cmp	r5, #1
   31b66:	d122      	bne.n	31bae <boot_set_pending_multi+0x72>
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   31b68:	9801      	ldr	r0, [sp, #4]
   31b6a:	f00b ffb4 	bl	3dad6 <flash_area_close>
    return rc;
}
   31b6e:	4620      	mov	r0, r4
   31b70:	b004      	add	sp, #16
   31b72:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   31b74:	9801      	ldr	r0, [sp, #4]
   31b76:	f7ff ff45 	bl	31a04 <boot_write_magic>
        if (rc == 0 && permanent) {
   31b7a:	4604      	mov	r4, r0
   31b7c:	2800      	cmp	r0, #0
   31b7e:	d1f3      	bne.n	31b68 <boot_set_pending_multi+0x2c>
   31b80:	b166      	cbz	r6, 31b9c <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   31b82:	9801      	ldr	r0, [sp, #4]
   31b84:	f00e fa72 	bl	4006c <boot_write_image_ok>
        if (rc == 0) {
   31b88:	4604      	mov	r4, r0
   31b8a:	2800      	cmp	r0, #0
   31b8c:	d1ec      	bne.n	31b68 <boot_set_pending_multi+0x2c>
            rc = boot_write_swap_info(fap, swap_type, 0);
   31b8e:	2200      	movs	r2, #0
   31b90:	4629      	mov	r1, r5
   31b92:	9801      	ldr	r0, [sp, #4]
   31b94:	f7ff ffac 	bl	31af0 <boot_write_swap_info>
   31b98:	4604      	mov	r4, r0
   31b9a:	e7e5      	b.n	31b68 <boot_set_pending_multi+0x2c>
                swap_type = BOOT_SWAP_TYPE_TEST;
   31b9c:	2502      	movs	r5, #2
   31b9e:	e7f6      	b.n	31b8e <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   31ba0:	9801      	ldr	r0, [sp, #4]
   31ba2:	4621      	mov	r1, r4
   31ba4:	6882      	ldr	r2, [r0, #8]
   31ba6:	f00b ffcf 	bl	3db48 <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   31baa:	2403      	movs	r4, #3
        break;
   31bac:	e7dc      	b.n	31b68 <boot_set_pending_multi+0x2c>
        assert(0);
   31bae:	f240 2146 	movw	r1, #582	; 0x246
   31bb2:	4b03      	ldr	r3, [pc, #12]	; (31bc0 <boot_set_pending_multi+0x84>)
   31bb4:	4a03      	ldr	r2, [pc, #12]	; (31bc4 <boot_set_pending_multi+0x88>)
   31bb6:	4804      	ldr	r0, [pc, #16]	; (31bc8 <boot_set_pending_multi+0x8c>)
   31bb8:	f008 fa30 	bl	3a01c <__assert_func>
        return BOOT_EFLASH;
   31bbc:	2401      	movs	r4, #1
   31bbe:	e7d6      	b.n	31b6e <boot_set_pending_multi+0x32>
   31bc0:	000463dd 	.word	0x000463dd
   31bc4:	0004c0ad 	.word	0x0004c0ad
   31bc8:	0004c04b 	.word	0x0004c04b

00031bcc <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   31bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31bd0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   31bd2:	4b15      	ldr	r3, [pc, #84]	; (31c28 <tfm_ns_interface_dispatch+0x5c>)
   31bd4:	4604      	mov	r4, r0
   31bd6:	f893 8000 	ldrb.w	r8, [r3]
   31bda:	460d      	mov	r5, r1
   31bdc:	4616      	mov	r6, r2
   31bde:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   31be0:	f1b8 0f00 	cmp.w	r8, #0
   31be4:	d115      	bne.n	31c12 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   31be6:	4668      	mov	r0, sp
   31be8:	f7f1 fde0 	bl	237ac <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   31bec:	463a      	mov	r2, r7
   31bee:	4631      	mov	r1, r6
   31bf0:	4628      	mov	r0, r5
   31bf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   31bf4:	47a0      	blx	r4
   31bf6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   31bf8:	4668      	mov	r0, sp
   31bfa:	f00c f8fd 	bl	3ddf8 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   31bfe:	f1b8 0f00 	cmp.w	r8, #0
   31c02:	d002      	beq.n	31c0a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   31c04:	4809      	ldr	r0, [pc, #36]	; (31c2c <tfm_ns_interface_dispatch+0x60>)
   31c06:	f005 fa43 	bl	37090 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   31c0a:	4620      	mov	r0, r4
   31c0c:	b022      	add	sp, #136	; 0x88
   31c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   31c12:	f04f 32ff 	mov.w	r2, #4294967295
   31c16:	f04f 33ff 	mov.w	r3, #4294967295
   31c1a:	4804      	ldr	r0, [pc, #16]	; (31c2c <tfm_ns_interface_dispatch+0x60>)
   31c1c:	f005 f966 	bl	36eec <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   31c20:	2800      	cmp	r0, #0
   31c22:	d0e0      	beq.n	31be6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   31c24:	241f      	movs	r4, #31
   31c26:	e7f0      	b.n	31c0a <tfm_ns_interface_dispatch+0x3e>
   31c28:	2001d3e6 	.word	0x2001d3e6
   31c2c:	20014fb8 	.word	0x20014fb8

00031c30 <parse_string>:
{
   31c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31c34:	680a      	ldr	r2, [r1, #0]
   31c36:	688b      	ldr	r3, [r1, #8]
{
   31c38:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31c3a:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   31c3c:	18d0      	adds	r0, r2, r3
   31c3e:	5cd3      	ldrb	r3, [r2, r3]
{
   31c40:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   31c42:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31c44:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   31c46:	f040 80dd 	bne.w	31e04 <parse_string+0x1d4>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31c4a:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   31c4c:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   31c4e:	684c      	ldr	r4, [r1, #4]
   31c50:	1ab9      	subs	r1, r7, r2
   31c52:	42a1      	cmp	r1, r4
   31c54:	f080 80d6 	bcs.w	31e04 <parse_string+0x1d4>
   31c58:	7839      	ldrb	r1, [r7, #0]
   31c5a:	2922      	cmp	r1, #34	; 0x22
   31c5c:	d10e      	bne.n	31c7c <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   31c5e:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   31c62:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   31c64:	f8da 2010 	ldr.w	r2, [sl, #16]
   31c68:	4418      	add	r0, r3
   31c6a:	4790      	blx	r2
        if (output == NULL)
   31c6c:	4683      	mov	fp, r0
   31c6e:	2800      	cmp	r0, #0
   31c70:	f000 80c8 	beq.w	31e04 <parse_string+0x1d4>
   31c74:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   31c76:	f8df 9198 	ldr.w	r9, [pc, #408]	; 31e10 <parse_string+0x1e0>
   31c7a:	e00f      	b.n	31c9c <parse_string+0x6c>
            if (input_end[0] == '\\')
   31c7c:	295c      	cmp	r1, #92	; 0x5c
   31c7e:	d105      	bne.n	31c8c <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   31c80:	3701      	adds	r7, #1
   31c82:	1ab9      	subs	r1, r7, r2
   31c84:	428c      	cmp	r4, r1
   31c86:	f240 80bd 	bls.w	31e04 <parse_string+0x1d4>
                skipped_bytes++;
   31c8a:	3301      	adds	r3, #1
            input_end++;
   31c8c:	3701      	adds	r7, #1
   31c8e:	e7df      	b.n	31c50 <parse_string+0x20>
        if (*input_pointer != '\\')
   31c90:	782b      	ldrb	r3, [r5, #0]
   31c92:	2b5c      	cmp	r3, #92	; 0x5c
   31c94:	d012      	beq.n	31cbc <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   31c96:	3501      	adds	r5, #1
   31c98:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   31c9c:	42bd      	cmp	r5, r7
   31c9e:	d3f7      	bcc.n	31c90 <parse_string+0x60>
    *output_pointer = '\0';
   31ca0:	2300      	movs	r3, #0
   31ca2:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   31ca4:	2310      	movs	r3, #16
    return true;
   31ca6:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   31ca8:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   31cac:	f8da 3000 	ldr.w	r3, [sl]
   31cb0:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   31cb2:	3301      	adds	r3, #1
   31cb4:	f8ca 3008 	str.w	r3, [sl, #8]
}
   31cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   31cbc:	1b7a      	subs	r2, r7, r5
   31cbe:	2a00      	cmp	r2, #0
   31cc0:	dd0d      	ble.n	31cde <parse_string+0xae>
            switch (input_pointer[1])
   31cc2:	786b      	ldrb	r3, [r5, #1]
   31cc4:	2b75      	cmp	r3, #117	; 0x75
   31cc6:	d80a      	bhi.n	31cde <parse_string+0xae>
   31cc8:	2b6d      	cmp	r3, #109	; 0x6d
   31cca:	d812      	bhi.n	31cf2 <parse_string+0xc2>
   31ccc:	2b62      	cmp	r3, #98	; 0x62
   31cce:	d02b      	beq.n	31d28 <parse_string+0xf8>
   31cd0:	d826      	bhi.n	31d20 <parse_string+0xf0>
   31cd2:	2b2f      	cmp	r3, #47	; 0x2f
   31cd4:	d029      	beq.n	31d2a <parse_string+0xfa>
   31cd6:	2b5c      	cmp	r3, #92	; 0x5c
   31cd8:	d027      	beq.n	31d2a <parse_string+0xfa>
   31cda:	2b22      	cmp	r3, #34	; 0x22
   31cdc:	d025      	beq.n	31d2a <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   31cde:	4658      	mov	r0, fp
   31ce0:	f8da 3014 	ldr.w	r3, [sl, #20]
   31ce4:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   31ce6:	f8da 0000 	ldr.w	r0, [sl]
   31cea:	1a28      	subs	r0, r5, r0
   31cec:	f8ca 0008 	str.w	r0, [sl, #8]
   31cf0:	e08b      	b.n	31e0a <parse_string+0x1da>
            switch (input_pointer[1])
   31cf2:	3b6e      	subs	r3, #110	; 0x6e
   31cf4:	2b07      	cmp	r3, #7
   31cf6:	d8f2      	bhi.n	31cde <parse_string+0xae>
   31cf8:	a101      	add	r1, pc, #4	; (adr r1, 31d00 <parse_string+0xd0>)
   31cfa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   31cfe:	bf00      	nop
   31d00:	00031d35 	.word	0x00031d35
   31d04:	00031cdf 	.word	0x00031cdf
   31d08:	00031cdf 	.word	0x00031cdf
   31d0c:	00031cdf 	.word	0x00031cdf
   31d10:	00031d39 	.word	0x00031d39
   31d14:	00031cdf 	.word	0x00031cdf
   31d18:	00031d3d 	.word	0x00031d3d
   31d1c:	00031d41 	.word	0x00031d41
   31d20:	2b66      	cmp	r3, #102	; 0x66
   31d22:	d1dc      	bne.n	31cde <parse_string+0xae>
                    *output_pointer++ = '\f';
   31d24:	230c      	movs	r3, #12
   31d26:	e000      	b.n	31d2a <parse_string+0xfa>
                    *output_pointer++ = '\b';
   31d28:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   31d2a:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   31d2e:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   31d30:	441d      	add	r5, r3
   31d32:	e7b3      	b.n	31c9c <parse_string+0x6c>
                    *output_pointer++ = '\n';
   31d34:	230a      	movs	r3, #10
   31d36:	e7f8      	b.n	31d2a <parse_string+0xfa>
                    *output_pointer++ = '\r';
   31d38:	230d      	movs	r3, #13
   31d3a:	e7f6      	b.n	31d2a <parse_string+0xfa>
                    *output_pointer++ = '\t';
   31d3c:	2309      	movs	r3, #9
   31d3e:	e7f4      	b.n	31d2a <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   31d40:	2a05      	cmp	r2, #5
   31d42:	ddcc      	ble.n	31cde <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   31d44:	1ca8      	adds	r0, r5, #2
   31d46:	f00e f9c9 	bl	400dc <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   31d4a:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   31d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   31d52:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   31d54:	d3c3      	bcc.n	31cde <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   31d56:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   31d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   31d5e:	d22d      	bcs.n	31dbc <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   31d60:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   31d62:	1afb      	subs	r3, r7, r3
   31d64:	2b05      	cmp	r3, #5
   31d66:	ddba      	ble.n	31cde <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   31d68:	79ab      	ldrb	r3, [r5, #6]
   31d6a:	2b5c      	cmp	r3, #92	; 0x5c
   31d6c:	d1b7      	bne.n	31cde <parse_string+0xae>
   31d6e:	79eb      	ldrb	r3, [r5, #7]
   31d70:	2b75      	cmp	r3, #117	; 0x75
   31d72:	d1b4      	bne.n	31cde <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   31d74:	f105 0008 	add.w	r0, r5, #8
   31d78:	f00e f9b0 	bl	400dc <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   31d7c:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   31d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   31d84:	d2ab      	bcs.n	31cde <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   31d86:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   31d88:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   31d8c:	f3c0 0009 	ubfx	r0, r0, #0, #10
   31d90:	4330      	orrs	r0, r6
   31d92:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   31d96:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   31d9a:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   31d9c:	f100 3eff 	add.w	lr, r0, #4294967295
   31da0:	fa54 fe8e 	uxtab	lr, r4, lr
   31da4:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   31da6:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   31da8:	d124      	bne.n	31df4 <parse_string+0x1c4>
    if (utf8_length > 1)
   31daa:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   31dac:	bf14      	ite	ne
   31dae:	ea42 020c 	orrne.w	r2, r2, ip
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   31db2:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   31db6:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   31db8:	4404      	add	r4, r0
                    if (sequence_length == 0)
   31dba:	e7b9      	b.n	31d30 <parse_string+0x100>
    if (codepoint < 0x80)
   31dbc:	287f      	cmp	r0, #127	; 0x7f
   31dbe:	d90a      	bls.n	31dd6 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   31dc0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   31dc4:	d30c      	bcc.n	31de0 <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   31dc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   31dca:	d30e      	bcc.n	31dea <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   31dcc:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   31dd0:	d285      	bcs.n	31cde <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   31dd2:	2306      	movs	r3, #6
   31dd4:	e7df      	b.n	31d96 <parse_string+0x166>
   31dd6:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   31dd8:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   31ddc:	2001      	movs	r0, #1
   31dde:	e7dd      	b.n	31d9c <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   31de0:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   31de2:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   31de6:	2002      	movs	r0, #2
   31de8:	e7d8      	b.n	31d9c <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   31dea:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   31dec:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   31df0:	2003      	movs	r0, #3
   31df2:	e7d3      	b.n	31d9c <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   31df4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   31df8:	f062 017f 	orn	r1, r2, #127	; 0x7f
   31dfc:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   31e00:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   31e02:	e7cf      	b.n	31da4 <parse_string+0x174>
    if (input_pointer != NULL)
   31e04:	2d00      	cmp	r5, #0
   31e06:	f47f af6e 	bne.w	31ce6 <parse_string+0xb6>
    return false;
   31e0a:	2000      	movs	r0, #0
   31e0c:	e754      	b.n	31cb8 <parse_string+0x88>
   31e0e:	bf00      	nop
   31e10:	000ffc00 	.word	0x000ffc00

00031e14 <compare_double>:
{
   31e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31e18:	4616      	mov	r6, r2
   31e1a:	461f      	mov	r7, r3
   31e1c:	4680      	mov	r8, r0
   31e1e:	4689      	mov	r9, r1
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31e20:	f00f fe55 	bl	41ace <fabs>
   31e24:	4604      	mov	r4, r0
   31e26:	460d      	mov	r5, r1
   31e28:	4630      	mov	r0, r6
   31e2a:	4639      	mov	r1, r7
   31e2c:	f00f fe4f 	bl	41ace <fabs>
   31e30:	4602      	mov	r2, r0
   31e32:	460b      	mov	r3, r1
   31e34:	4620      	mov	r0, r4
   31e36:	4629      	mov	r1, r5
   31e38:	f7ea ff4e 	bl	1ccd8 <__aeabi_dcmpgt>
   31e3c:	b300      	cbz	r0, 31e80 <compare_double+0x6c>
   31e3e:	4640      	mov	r0, r8
   31e40:	4649      	mov	r1, r9
   31e42:	f00f fe44 	bl	41ace <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   31e46:	4632      	mov	r2, r6
   31e48:	463b      	mov	r3, r7
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31e4a:	4604      	mov	r4, r0
   31e4c:	460d      	mov	r5, r1
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   31e4e:	4640      	mov	r0, r8
   31e50:	4649      	mov	r1, r9
   31e52:	f7ea faf9 	bl	1c448 <__aeabi_dsub>
   31e56:	f00f fe3a 	bl	41ace <fabs>
   31e5a:	2200      	movs	r2, #0
   31e5c:	4606      	mov	r6, r0
   31e5e:	460f      	mov	r7, r1
   31e60:	4620      	mov	r0, r4
   31e62:	4629      	mov	r1, r5
   31e64:	4b08      	ldr	r3, [pc, #32]	; (31e88 <compare_double+0x74>)
   31e66:	f7ea fca7 	bl	1c7b8 <__aeabi_dmul>
   31e6a:	4602      	mov	r2, r0
   31e6c:	460b      	mov	r3, r1
   31e6e:	4630      	mov	r0, r6
   31e70:	4639      	mov	r1, r7
   31e72:	f7ea ff1d 	bl	1ccb0 <__aeabi_dcmple>
}
   31e76:	3800      	subs	r0, #0
   31e78:	bf18      	it	ne
   31e7a:	2001      	movne	r0, #1
   31e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31e80:	4630      	mov	r0, r6
   31e82:	4639      	mov	r1, r7
   31e84:	e7dd      	b.n	31e42 <compare_double+0x2e>
   31e86:	bf00      	nop
   31e88:	3cb00000 	.word	0x3cb00000

00031e8c <get_object_item>:
{
   31e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31e8e:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   31e90:	b360      	cbz	r0, 31eec <get_object_item+0x60>
   31e92:	b359      	cbz	r1, 31eec <get_object_item+0x60>
    current_element = object->child;
   31e94:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   31e96:	b9fa      	cbnz	r2, 31ed8 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   31e98:	4e17      	ldr	r6, [pc, #92]	; (31ef8 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   31e9a:	b33c      	cbz	r4, 31eec <get_object_item+0x60>
   31e9c:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   31e9e:	b1c3      	cbz	r3, 31ed2 <get_object_item+0x46>
    if (string1 == string2)
   31ea0:	42ab      	cmp	r3, r5
   31ea2:	d021      	beq.n	31ee8 <get_object_item+0x5c>
   31ea4:	f105 3cff 	add.w	ip, r5, #4294967295
   31ea8:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   31eaa:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   31eae:	460f      	mov	r7, r1
   31eb0:	5d8a      	ldrb	r2, [r1, r6]
   31eb2:	f002 0203 	and.w	r2, r2, #3
   31eb6:	2a01      	cmp	r2, #1
   31eb8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   31ebc:	bf08      	it	eq
   31ebe:	f101 0720 	addeq.w	r7, r1, #32
   31ec2:	5cb0      	ldrb	r0, [r6, r2]
   31ec4:	f000 0003 	and.w	r0, r0, #3
   31ec8:	2801      	cmp	r0, #1
   31eca:	bf08      	it	eq
   31ecc:	3220      	addeq	r2, #32
   31ece:	4297      	cmp	r7, r2
   31ed0:	d00f      	beq.n	31ef2 <get_object_item+0x66>
            current_element = current_element->next;
   31ed2:	6824      	ldr	r4, [r4, #0]
   31ed4:	e7e1      	b.n	31e9a <get_object_item+0xe>
            current_element = current_element->next;
   31ed6:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   31ed8:	b144      	cbz	r4, 31eec <get_object_item+0x60>
   31eda:	6a21      	ldr	r1, [r4, #32]
   31edc:	b121      	cbz	r1, 31ee8 <get_object_item+0x5c>
   31ede:	4628      	mov	r0, r5
   31ee0:	f7eb f9a5 	bl	1d22e <strcmp>
   31ee4:	2800      	cmp	r0, #0
   31ee6:	d1f6      	bne.n	31ed6 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   31ee8:	6a23      	ldr	r3, [r4, #32]
   31eea:	b903      	cbnz	r3, 31eee <get_object_item+0x62>
        return NULL;
   31eec:	2400      	movs	r4, #0
}
   31eee:	4620      	mov	r0, r4
   31ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   31ef2:	2900      	cmp	r1, #0
   31ef4:	d1d9      	bne.n	31eaa <get_object_item+0x1e>
   31ef6:	e7f7      	b.n	31ee8 <get_object_item+0x5c>
   31ef8:	0004c62f 	.word	0x0004c62f

00031efc <print_string_ptr>:
{
   31efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   31f00:	4b52      	ldr	r3, [pc, #328]	; (3204c <print_string_ptr+0x150>)
{
   31f02:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   31f04:	881a      	ldrh	r2, [r3, #0]
   31f06:	789b      	ldrb	r3, [r3, #2]
{
   31f08:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   31f0a:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   31f0c:	f8ad 200c 	strh.w	r2, [sp, #12]
   31f10:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   31f14:	b919      	cbnz	r1, 31f1e <print_string_ptr+0x22>
        return false;
   31f16:	2000      	movs	r0, #0
}
   31f18:	b005      	add	sp, #20
   31f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   31f1e:	b340      	cbz	r0, 31f72 <print_string_ptr+0x76>
   31f20:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   31f22:	f04f 0b00 	mov.w	fp, #0
   31f26:	2001      	movs	r0, #1
   31f28:	4c49      	ldr	r4, [pc, #292]	; (32050 <print_string_ptr+0x154>)
   31f2a:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   31f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   31f30:	bb6b      	cbnz	r3, 31f8e <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   31f32:	ebaa 0a05 	sub.w	sl, sl, r5
   31f36:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   31f38:	4638      	mov	r0, r7
   31f3a:	f10a 0103 	add.w	r1, sl, #3
   31f3e:	f00e f933 	bl	401a8 <ensure>
    if (output == NULL)
   31f42:	4606      	mov	r6, r0
   31f44:	2800      	cmp	r0, #0
   31f46:	d0e6      	beq.n	31f16 <print_string_ptr+0x1a>
    if (escape_characters == 0)
   31f48:	2322      	movs	r3, #34	; 0x22
        output[output_length + 1] = '\"';
   31f4a:	f10a 0901 	add.w	r9, sl, #1
        output[output_length + 2] = '\0';
   31f4e:	f10a 0802 	add.w	r8, sl, #2
        memcpy(output + 1, input, output_length);
   31f52:	1c44      	adds	r4, r0, #1
        output[0] = '\"';
   31f54:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   31f56:	f1bb 0f00 	cmp.w	fp, #0
   31f5a:	d12e      	bne.n	31fba <print_string_ptr+0xbe>
   31f5c:	4652      	mov	r2, sl
   31f5e:	4629      	mov	r1, r5
   31f60:	4620      	mov	r0, r4
   31f62:	f00f fddd 	bl	41b20 <memcpy>
        output[output_length + 1] = '\"';
   31f66:	2322      	movs	r3, #34	; 0x22
   31f68:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   31f6c:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   31f70:	e00b      	b.n	31f8a <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   31f72:	2103      	movs	r1, #3
   31f74:	4638      	mov	r0, r7
   31f76:	f00e f917 	bl	401a8 <ensure>
        if (output == NULL)
   31f7a:	2800      	cmp	r0, #0
   31f7c:	d0cb      	beq.n	31f16 <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   31f7e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   31f82:	a903      	add	r1, sp, #12
   31f84:	1ad2      	subs	r2, r2, r3
   31f86:	f00f ffd2 	bl	41f2e <strncpy>
    return true;
   31f8a:	2001      	movs	r0, #1
   31f8c:	e7c4      	b.n	31f18 <print_string_ptr+0x1c>
        switch (*input_pointer)
   31f8e:	2b22      	cmp	r3, #34	; 0x22
   31f90:	d80b      	bhi.n	31faa <print_string_ptr+0xae>
   31f92:	2b07      	cmp	r3, #7
   31f94:	d90c      	bls.n	31fb0 <print_string_ptr+0xb4>
   31f96:	f1a3 0208 	sub.w	r2, r3, #8
   31f9a:	b2d2      	uxtb	r2, r2
   31f9c:	fa00 f202 	lsl.w	r2, r0, r2
   31fa0:	4222      	tst	r2, r4
   31fa2:	d005      	beq.n	31fb0 <print_string_ptr+0xb4>
                escape_characters++;
   31fa4:	f10b 0b01 	add.w	fp, fp, #1
                break;
   31fa8:	e7bf      	b.n	31f2a <print_string_ptr+0x2e>
        switch (*input_pointer)
   31faa:	2b5c      	cmp	r3, #92	; 0x5c
   31fac:	d1bd      	bne.n	31f2a <print_string_ptr+0x2e>
   31fae:	e7f9      	b.n	31fa4 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   31fb0:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   31fb2:	bf98      	it	ls
   31fb4:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   31fb8:	e7b7      	b.n	31f2a <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   31fba:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   31fbe:	f04f 0b74 	mov.w	fp, #116	; 0x74
   31fc2:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   31fc4:	4a23      	ldr	r2, [pc, #140]	; (32054 <print_string_ptr+0x158>)
   31fc6:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   31fc8:	9901      	ldr	r1, [sp, #4]
   31fca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   31fce:	9101      	str	r1, [sp, #4]
   31fd0:	b92b      	cbnz	r3, 31fde <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   31fd2:	2222      	movs	r2, #34	; 0x22
   31fd4:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   31fd8:	f806 3008 	strb.w	r3, [r6, r8]
   31fdc:	e7d5      	b.n	31f8a <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   31fde:	2b1f      	cmp	r3, #31
   31fe0:	d907      	bls.n	31ff2 <print_string_ptr+0xf6>
   31fe2:	2b22      	cmp	r3, #34	; 0x22
   31fe4:	d005      	beq.n	31ff2 <print_string_ptr+0xf6>
   31fe6:	2b5c      	cmp	r3, #92	; 0x5c
   31fe8:	d003      	beq.n	31ff2 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   31fea:	4620      	mov	r0, r4
   31fec:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   31fee:	1c44      	adds	r4, r0, #1
   31ff0:	e7ea      	b.n	31fc8 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   31ff2:	4620      	mov	r0, r4
            switch (*input_pointer)
   31ff4:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   31ff6:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   31ffa:	781b      	ldrb	r3, [r3, #0]
   31ffc:	2b0d      	cmp	r3, #13
   31ffe:	d80a      	bhi.n	32016 <print_string_ptr+0x11a>
   32000:	2b07      	cmp	r3, #7
   32002:	d919      	bls.n	32038 <print_string_ptr+0x13c>
   32004:	f1a3 0108 	sub.w	r1, r3, #8
   32008:	2905      	cmp	r1, #5
   3200a:	d815      	bhi.n	32038 <print_string_ptr+0x13c>
   3200c:	e8df f001 	tbb	[pc, r1]
   32010:	140d1109 	.word	0x140d1109
   32014:	0f0b      	.short	0x0f0b
   32016:	2b22      	cmp	r3, #34	; 0x22
   32018:	d001      	beq.n	3201e <print_string_ptr+0x122>
   3201a:	2b5c      	cmp	r3, #92	; 0x5c
   3201c:	d10c      	bne.n	32038 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   3201e:	7063      	strb	r3, [r4, #1]
                    break;
   32020:	e7e5      	b.n	31fee <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   32022:	2362      	movs	r3, #98	; 0x62
   32024:	e7fb      	b.n	3201e <print_string_ptr+0x122>
                    *output_pointer = 'f';
   32026:	2366      	movs	r3, #102	; 0x66
   32028:	e7f9      	b.n	3201e <print_string_ptr+0x122>
                    *output_pointer = 'n';
   3202a:	236e      	movs	r3, #110	; 0x6e
   3202c:	e7f7      	b.n	3201e <print_string_ptr+0x122>
                    *output_pointer = 'r';
   3202e:	2372      	movs	r3, #114	; 0x72
   32030:	e7f5      	b.n	3201e <print_string_ptr+0x122>
                    *output_pointer = 't';
   32032:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   32036:	e7da      	b.n	31fee <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   32038:	6839      	ldr	r1, [r7, #0]
   3203a:	687d      	ldr	r5, [r7, #4]
   3203c:	1a41      	subs	r1, r0, r1
   3203e:	1a69      	subs	r1, r5, r1
   32040:	f008 fe3c 	bl	3acbc <sniprintf>
                    output_pointer += 4;
   32044:	4a03      	ldr	r2, [pc, #12]	; (32054 <print_string_ptr+0x158>)
   32046:	1d60      	adds	r0, r4, #5
                    break;
   32048:	e7d1      	b.n	31fee <print_string_ptr+0xf2>
   3204a:	bf00      	nop
   3204c:	0004c0df 	.word	0x0004c0df
   32050:	04000037 	.word	0x04000037
   32054:	0004c0d9 	.word	0x0004c0d9

00032058 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   32058:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   3205a:	4605      	mov	r5, r0
   3205c:	b180      	cbz	r0, 32080 <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   3205e:	f7eb f8f0 	bl	1d242 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   32062:	4b08      	ldr	r3, [pc, #32]	; (32084 <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   32064:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   32066:	4610      	mov	r0, r2
   32068:	681b      	ldr	r3, [r3, #0]
   3206a:	9201      	str	r2, [sp, #4]
   3206c:	4798      	blx	r3
    if (copy == NULL)
   3206e:	4604      	mov	r4, r0
   32070:	b118      	cbz	r0, 3207a <cJSON_strdup.constprop.0+0x22>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32072:	4629      	mov	r1, r5
   32074:	9a01      	ldr	r2, [sp, #4]
   32076:	f00f fd53 	bl	41b20 <memcpy>
}
   3207a:	4620      	mov	r0, r4
   3207c:	b003      	add	sp, #12
   3207e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   32080:	4604      	mov	r4, r0
   32082:	e7fa      	b.n	3207a <cJSON_strdup.constprop.0+0x22>
   32084:	200146f0 	.word	0x200146f0

00032088 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   32088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3208a:	460d      	mov	r5, r1
   3208c:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   3208e:	4607      	mov	r7, r0
   32090:	b300      	cbz	r0, 320d4 <add_item_to_object.constprop.0+0x4c>
   32092:	b1f9      	cbz	r1, 320d4 <add_item_to_object.constprop.0+0x4c>
   32094:	b1f2      	cbz	r2, 320d4 <add_item_to_object.constprop.0+0x4c>
   32096:	4290      	cmp	r0, r2
   32098:	d01c      	beq.n	320d4 <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   3209a:	b193      	cbz	r3, 320c2 <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   3209c:	68d6      	ldr	r6, [r2, #12]
   3209e:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   320a2:	68e3      	ldr	r3, [r4, #12]
   320a4:	059b      	lsls	r3, r3, #22
   320a6:	d404      	bmi.n	320b2 <add_item_to_object.constprop.0+0x2a>
   320a8:	6a20      	ldr	r0, [r4, #32]
   320aa:	b110      	cbz	r0, 320b2 <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   320ac:	4b0a      	ldr	r3, [pc, #40]	; (320d8 <add_item_to_object.constprop.0+0x50>)
   320ae:	685b      	ldr	r3, [r3, #4]
   320b0:	4798      	blx	r3
    return add_item_to_array(object, item);
   320b2:	4621      	mov	r1, r4
   320b4:	4638      	mov	r0, r7
    item->string = new_key;
   320b6:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   320b8:	60e6      	str	r6, [r4, #12]
}
   320ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   320be:	f00e b85f 	b.w	40180 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   320c2:	4608      	mov	r0, r1
   320c4:	f7ff ffc8 	bl	32058 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   320c8:	4605      	mov	r5, r0
   320ca:	b118      	cbz	r0, 320d4 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   320cc:	68e6      	ldr	r6, [r4, #12]
   320ce:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   320d2:	e7e6      	b.n	320a2 <add_item_to_object.constprop.0+0x1a>
}
   320d4:	2000      	movs	r0, #0
   320d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   320d8:	200146f0 	.word	0x200146f0

000320dc <print_value>:
{
   320dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   320e0:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   320e2:	4606      	mov	r6, r0
{
   320e4:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   320e6:	b908      	cbnz	r0, 320ec <print_value+0x10>
    switch ((item->type) & 0xFF)
   320e8:	2500      	movs	r5, #0
   320ea:	e06f      	b.n	321cc <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   320ec:	2900      	cmp	r1, #0
   320ee:	d0fb      	beq.n	320e8 <print_value+0xc>
    switch ((item->type) & 0xFF)
   320f0:	7b05      	ldrb	r5, [r0, #12]
   320f2:	2d10      	cmp	r5, #16
   320f4:	f000 80ea 	beq.w	322cc <print_value+0x1f0>
   320f8:	dc18      	bgt.n	3212c <print_value+0x50>
   320fa:	1e6b      	subs	r3, r5, #1
   320fc:	2b07      	cmp	r3, #7
   320fe:	d8f3      	bhi.n	320e8 <print_value+0xc>
   32100:	2b07      	cmp	r3, #7
   32102:	d8f1      	bhi.n	320e8 <print_value+0xc>
   32104:	a201      	add	r2, pc, #4	; (adr r2, 3210c <print_value+0x30>)
   32106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3210a:	bf00      	nop
   3210c:	000321a9 	.word	0x000321a9
   32110:	000321d5 	.word	0x000321d5
   32114:	000320e9 	.word	0x000320e9
   32118:	00032181 	.word	0x00032181
   3211c:	000320e9 	.word	0x000320e9
   32120:	000320e9 	.word	0x000320e9
   32124:	000320e9 	.word	0x000320e9
   32128:	000321d9 	.word	0x000321d9
   3212c:	2d40      	cmp	r5, #64	; 0x40
   3212e:	f000 80fc 	beq.w	3232a <print_value+0x24e>
   32132:	2d80      	cmp	r5, #128	; 0x80
   32134:	f000 80b6 	beq.w	322a4 <print_value+0x1c8>
   32138:	2d20      	cmp	r5, #32
   3213a:	d1d5      	bne.n	320e8 <print_value+0xc>
            return print_array(item, output_buffer);
   3213c:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   3213e:	2101      	movs	r1, #1
   32140:	4620      	mov	r0, r4
   32142:	f00e f831 	bl	401a8 <ensure>
    if (output_pointer == NULL)
   32146:	2800      	cmp	r0, #0
   32148:	d0ce      	beq.n	320e8 <print_value+0xc>
    *output_pointer = '[';
   3214a:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   3214c:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   3214e:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   32152:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   32154:	68a3      	ldr	r3, [r4, #8]
   32156:	3301      	adds	r3, #1
   32158:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   3215a:	68e3      	ldr	r3, [r4, #12]
   3215c:	3301      	adds	r3, #1
   3215e:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   32160:	2e00      	cmp	r6, #0
   32162:	f040 80b9 	bne.w	322d8 <print_value+0x1fc>
    output_pointer = ensure(output_buffer, 2);
   32166:	2102      	movs	r1, #2
   32168:	4620      	mov	r0, r4
   3216a:	f00e f81d 	bl	401a8 <ensure>
    if (output_pointer == NULL)
   3216e:	2800      	cmp	r0, #0
   32170:	d0ba      	beq.n	320e8 <print_value+0xc>
    *output_pointer++ = ']';
   32172:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   32174:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   32176:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   32178:	68e3      	ldr	r3, [r4, #12]
   3217a:	3b01      	subs	r3, #1
   3217c:	60e3      	str	r3, [r4, #12]
   3217e:	e011      	b.n	321a4 <print_value+0xc8>
            const char buff[] = "null";
   32180:	4b82      	ldr	r3, [pc, #520]	; (3238c <print_value+0x2b0>)
            const char buff[] = "true";
   32182:	6818      	ldr	r0, [r3, #0]
   32184:	791b      	ldrb	r3, [r3, #4]
   32186:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   32188:	2105      	movs	r1, #5
   3218a:	4620      	mov	r0, r4
            const char buff[] = "true";
   3218c:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   32190:	f00e f80a 	bl	401a8 <ensure>
            if (output == NULL)
   32194:	4605      	mov	r5, r0
   32196:	b1c8      	cbz	r0, 321cc <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   32198:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3219c:	a907      	add	r1, sp, #28
   3219e:	1ad2      	subs	r2, r2, r3
   321a0:	f00f fec5 	bl	41f2e <strncpy>
    return true;
   321a4:	2501      	movs	r5, #1
   321a6:	e011      	b.n	321cc <print_value+0xf0>
            const char buff[] = "false";
   321a8:	4b79      	ldr	r3, [pc, #484]	; (32390 <print_value+0x2b4>)
            output = ensure(output_buffer, sizeof(buff));
   321aa:	2106      	movs	r1, #6
            const char buff[] = "false";
   321ac:	6818      	ldr	r0, [r3, #0]
   321ae:	889b      	ldrh	r3, [r3, #4]
   321b0:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   321b2:	4620      	mov	r0, r4
            const char buff[] = "false";
   321b4:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   321b8:	f00d fff6 	bl	401a8 <ensure>
            if (output == NULL)
   321bc:	2800      	cmp	r0, #0
   321be:	d093      	beq.n	320e8 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   321c0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   321c4:	a907      	add	r1, sp, #28
   321c6:	1ad2      	subs	r2, r2, r3
   321c8:	f00f feb1 	bl	41f2e <strncpy>
}
   321cc:	4628      	mov	r0, r5
   321ce:	b00f      	add	sp, #60	; 0x3c
   321d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   321d4:	4b6f      	ldr	r3, [pc, #444]	; (32394 <print_value+0x2b8>)
   321d6:	e7d4      	b.n	32182 <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   321d8:	2100      	movs	r1, #0
    double d = item->valuedouble;
   321da:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   321de:	2216      	movs	r2, #22
   321e0:	a808      	add	r0, sp, #32
   321e2:	9107      	str	r1, [sp, #28]
   321e4:	f00f fcbc 	bl	41b60 <memset>
    double test = 0.0;
   321e8:	2200      	movs	r2, #0
   321ea:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   321ec:	4630      	mov	r0, r6
    double test = 0.0;
   321ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   321f2:	4639      	mov	r1, r7
   321f4:	4632      	mov	r2, r6
   321f6:	463b      	mov	r3, r7
   321f8:	f7ea fd78 	bl	1ccec <__aeabi_dcmpun>
   321fc:	b988      	cbnz	r0, 32222 <print_value+0x146>
   321fe:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   32202:	f04f 32ff 	mov.w	r2, #4294967295
   32206:	4630      	mov	r0, r6
   32208:	4649      	mov	r1, r9
   3220a:	4b63      	ldr	r3, [pc, #396]	; (32398 <print_value+0x2bc>)
   3220c:	f7ea fd6e 	bl	1ccec <__aeabi_dcmpun>
   32210:	b9f0      	cbnz	r0, 32250 <print_value+0x174>
   32212:	f04f 32ff 	mov.w	r2, #4294967295
   32216:	4630      	mov	r0, r6
   32218:	4649      	mov	r1, r9
   3221a:	4b5f      	ldr	r3, [pc, #380]	; (32398 <print_value+0x2bc>)
   3221c:	f7ea fd48 	bl	1ccb0 <__aeabi_dcmple>
   32220:	b9b0      	cbnz	r0, 32250 <print_value+0x174>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   32222:	495a      	ldr	r1, [pc, #360]	; (3238c <print_value+0x2b0>)
   32224:	a807      	add	r0, sp, #28
   32226:	f00f fe66 	bl	41ef6 <strcpy>
   3222a:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   3222c:	4620      	mov	r0, r4
   3222e:	1c69      	adds	r1, r5, #1
   32230:	f00d ffba 	bl	401a8 <ensure>
    if (output_pointer == NULL)
   32234:	2800      	cmp	r0, #0
   32236:	f43f af57 	beq.w	320e8 <print_value+0xc>
   3223a:	4602      	mov	r2, r0
   3223c:	ab07      	add	r3, sp, #28
   3223e:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   32240:	4296      	cmp	r6, r2
   32242:	d129      	bne.n	32298 <print_value+0x1bc>
    output_pointer[i] = '\0';
   32244:	2300      	movs	r3, #0
   32246:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   32248:	68a0      	ldr	r0, [r4, #8]
   3224a:	4428      	add	r0, r5
   3224c:	60a0      	str	r0, [r4, #8]
    return true;
   3224e:	e7a9      	b.n	321a4 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   32250:	211a      	movs	r1, #26
   32252:	4a52      	ldr	r2, [pc, #328]	; (3239c <print_value+0x2c0>)
   32254:	e9cd 6700 	strd	r6, r7, [sp]
   32258:	a807      	add	r0, sp, #28
   3225a:	f008 fd2f 	bl	3acbc <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   3225e:	4950      	ldr	r1, [pc, #320]	; (323a0 <print_value+0x2c4>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   32260:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   32262:	aa04      	add	r2, sp, #16
   32264:	a807      	add	r0, sp, #28
   32266:	f008 fd5d 	bl	3ad24 <siscanf>
   3226a:	2801      	cmp	r0, #1
   3226c:	d00b      	beq.n	32286 <print_value+0x1aa>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   3226e:	211a      	movs	r1, #26
   32270:	e9cd 6700 	strd	r6, r7, [sp]
   32274:	4a4b      	ldr	r2, [pc, #300]	; (323a4 <print_value+0x2c8>)
   32276:	a807      	add	r0, sp, #28
   32278:	f008 fd20 	bl	3acbc <sniprintf>
   3227c:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   3227e:	2d19      	cmp	r5, #25
   32280:	f73f af32 	bgt.w	320e8 <print_value+0xc>
   32284:	e7d2      	b.n	3222c <print_value+0x150>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   32286:	4632      	mov	r2, r6
   32288:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   3228c:	463b      	mov	r3, r7
   3228e:	f7ff fdc1 	bl	31e14 <compare_double>
   32292:	2800      	cmp	r0, #0
   32294:	d0eb      	beq.n	3226e <print_value+0x192>
   32296:	e7f2      	b.n	3227e <print_value+0x1a2>
        if (number_buffer[i] == decimal_point)
   32298:	f813 1b01 	ldrb.w	r1, [r3], #1
   3229c:	3201      	adds	r2, #1
            output_pointer[i] = '.';
   3229e:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (i = 0; i < ((size_t)length); i++)
   322a2:	e7cd      	b.n	32240 <print_value+0x164>
            if (item->valuestring == NULL)
   322a4:	6900      	ldr	r0, [r0, #16]
   322a6:	2800      	cmp	r0, #0
   322a8:	f43f af1e 	beq.w	320e8 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   322ac:	f7ea ffc9 	bl	1d242 <strlen>
   322b0:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   322b2:	4611      	mov	r1, r2
   322b4:	4620      	mov	r0, r4
   322b6:	9203      	str	r2, [sp, #12]
   322b8:	f00d ff76 	bl	401a8 <ensure>
            if (output == NULL)
   322bc:	2800      	cmp	r0, #0
   322be:	f43f af13 	beq.w	320e8 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   322c2:	9a03      	ldr	r2, [sp, #12]
   322c4:	6931      	ldr	r1, [r6, #16]
   322c6:	f00f fc2b 	bl	41b20 <memcpy>
   322ca:	e76b      	b.n	321a4 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   322cc:	6900      	ldr	r0, [r0, #16]
}
   322ce:	b00f      	add	sp, #60	; 0x3c
   322d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   322d4:	f7ff be12 	b.w	31efc <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   322d8:	4621      	mov	r1, r4
   322da:	4630      	mov	r0, r6
   322dc:	f7ff fefe 	bl	320dc <print_value>
   322e0:	2800      	cmp	r0, #0
   322e2:	f43f af01 	beq.w	320e8 <print_value+0xc>
        update_offset(output_buffer);
   322e6:	4620      	mov	r0, r4
   322e8:	f00d ff3d 	bl	40166 <update_offset>
        if (current_element->next)
   322ec:	6833      	ldr	r3, [r6, #0]
   322ee:	b1bb      	cbz	r3, 32320 <print_value+0x244>
            length = (size_t) (output_buffer->format ? 2 : 1);
   322f0:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   322f2:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   322f4:	2b00      	cmp	r3, #0
   322f6:	bf14      	ite	ne
   322f8:	f04f 0902 	movne.w	r9, #2
   322fc:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   32300:	f109 0101 	add.w	r1, r9, #1
   32304:	f00d ff50 	bl	401a8 <ensure>
            if (output_pointer == NULL)
   32308:	2800      	cmp	r0, #0
   3230a:	f43f aeed 	beq.w	320e8 <print_value+0xc>
            *output_pointer++ = ',';
   3230e:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   32310:	6963      	ldr	r3, [r4, #20]
   32312:	b93b      	cbnz	r3, 32324 <print_value+0x248>
            *output_pointer++ = ',';
   32314:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   32316:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   3231a:	68a3      	ldr	r3, [r4, #8]
   3231c:	444b      	add	r3, r9
   3231e:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   32320:	6836      	ldr	r6, [r6, #0]
   32322:	e71d      	b.n	32160 <print_value+0x84>
                *output_pointer++ = ' ';
   32324:	1c83      	adds	r3, r0, #2
   32326:	7045      	strb	r5, [r0, #1]
   32328:	e7f5      	b.n	32316 <print_value+0x23a>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   3232a:	694b      	ldr	r3, [r1, #20]
   3232c:	6885      	ldr	r5, [r0, #8]
   3232e:	2b00      	cmp	r3, #0
   32330:	bf14      	ite	ne
   32332:	2702      	movne	r7, #2
   32334:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   32336:	4620      	mov	r0, r4
   32338:	1c79      	adds	r1, r7, #1
   3233a:	f00d ff35 	bl	401a8 <ensure>
    if (output_pointer == NULL)
   3233e:	2800      	cmp	r0, #0
   32340:	f43f aed2 	beq.w	320e8 <print_value+0xc>
    *output_pointer++ = '{';
   32344:	237b      	movs	r3, #123	; 0x7b
   32346:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   32348:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   3234a:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   3234c:	3201      	adds	r2, #1
   3234e:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   32350:	b10b      	cbz	r3, 32356 <print_value+0x27a>
        *output_pointer++ = '\n';
   32352:	230a      	movs	r3, #10
   32354:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   32356:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   32358:	2609      	movs	r6, #9
    output_buffer->offset += length;
   3235a:	443b      	add	r3, r7
        *output_pointer++ = ':';
   3235c:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   3235e:	60a3      	str	r3, [r4, #8]
        if (output_buffer->format)
   32360:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   32362:	bb0d      	cbnz	r5, 323a8 <print_value+0x2cc>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   32364:	2b00      	cmp	r3, #0
   32366:	d07f      	beq.n	32468 <print_value+0x38c>
   32368:	68e1      	ldr	r1, [r4, #12]
   3236a:	3101      	adds	r1, #1
   3236c:	4620      	mov	r0, r4
   3236e:	f00d ff1b 	bl	401a8 <ensure>
    if (output_pointer == NULL)
   32372:	2800      	cmp	r0, #0
   32374:	f43f aeb8 	beq.w	320e8 <print_value+0xc>
    if (output_buffer->format)
   32378:	6963      	ldr	r3, [r4, #20]
   3237a:	2b00      	cmp	r3, #0
   3237c:	d17e      	bne.n	3247c <print_value+0x3a0>
   3237e:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   32380:	227d      	movs	r2, #125	; 0x7d
   32382:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   32384:	2200      	movs	r2, #0
   32386:	705a      	strb	r2, [r3, #1]
   32388:	e6f6      	b.n	32178 <print_value+0x9c>
   3238a:	bf00      	nop
   3238c:	0004c0e2 	.word	0x0004c0e2
   32390:	0004c0f9 	.word	0x0004c0f9
   32394:	0004c0ff 	.word	0x0004c0ff
   32398:	7fefffff 	.word	0x7fefffff
   3239c:	0004c0e7 	.word	0x0004c0e7
   323a0:	0004c0ee 	.word	0x0004c0ee
   323a4:	0004c0f2 	.word	0x0004c0f2
        if (output_buffer->format)
   323a8:	b173      	cbz	r3, 323c8 <print_value+0x2ec>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   323aa:	4620      	mov	r0, r4
   323ac:	68e1      	ldr	r1, [r4, #12]
   323ae:	f00d fefb 	bl	401a8 <ensure>
            if (output_pointer == NULL)
   323b2:	2800      	cmp	r0, #0
   323b4:	f43f ae98 	beq.w	320e8 <print_value+0xc>
   323b8:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   323ba:	68e1      	ldr	r1, [r4, #12]
   323bc:	1a13      	subs	r3, r2, r0
   323be:	428b      	cmp	r3, r1
   323c0:	d34f      	bcc.n	32462 <print_value+0x386>
            output_buffer->offset += output_buffer->depth;
   323c2:	68a3      	ldr	r3, [r4, #8]
   323c4:	440b      	add	r3, r1
   323c6:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   323c8:	4621      	mov	r1, r4
   323ca:	6a28      	ldr	r0, [r5, #32]
   323cc:	f7ff fd96 	bl	31efc <print_string_ptr>
   323d0:	2800      	cmp	r0, #0
   323d2:	f43f ae89 	beq.w	320e8 <print_value+0xc>
        update_offset(output_buffer);
   323d6:	4620      	mov	r0, r4
   323d8:	f00d fec5 	bl	40166 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   323dc:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   323de:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   323e0:	2b00      	cmp	r3, #0
   323e2:	bf14      	ite	ne
   323e4:	f04f 0802 	movne.w	r8, #2
   323e8:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   323ec:	4641      	mov	r1, r8
   323ee:	f00d fedb 	bl	401a8 <ensure>
        if (output_pointer == NULL)
   323f2:	2800      	cmp	r0, #0
   323f4:	f43f ae78 	beq.w	320e8 <print_value+0xc>
        *output_pointer++ = ':';
   323f8:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   323fa:	6963      	ldr	r3, [r4, #20]
   323fc:	b103      	cbz	r3, 32400 <print_value+0x324>
            *output_pointer++ = '\t';
   323fe:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   32400:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   32402:	4621      	mov	r1, r4
        output_buffer->offset += length;
   32404:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   32406:	4628      	mov	r0, r5
        output_buffer->offset += length;
   32408:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   3240a:	f7ff fe67 	bl	320dc <print_value>
   3240e:	2800      	cmp	r0, #0
   32410:	f43f ae6a 	beq.w	320e8 <print_value+0xc>
        update_offset(output_buffer);
   32414:	4620      	mov	r0, r4
   32416:	f00d fea6 	bl	40166 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   3241a:	682b      	ldr	r3, [r5, #0]
   3241c:	6962      	ldr	r2, [r4, #20]
   3241e:	f1b3 0800 	subs.w	r8, r3, #0
   32422:	bf18      	it	ne
   32424:	f04f 0801 	movne.w	r8, #1
   32428:	2a00      	cmp	r2, #0
   3242a:	bf18      	it	ne
   3242c:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   32430:	4620      	mov	r0, r4
   32432:	f108 0101 	add.w	r1, r8, #1
   32436:	f00d feb7 	bl	401a8 <ensure>
        if (output_pointer == NULL)
   3243a:	2800      	cmp	r0, #0
   3243c:	f43f ae54 	beq.w	320e8 <print_value+0xc>
        if (current_item->next)
   32440:	682b      	ldr	r3, [r5, #0]
   32442:	b113      	cbz	r3, 3244a <print_value+0x36e>
            *output_pointer++ = ',';
   32444:	232c      	movs	r3, #44	; 0x2c
   32446:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   3244a:	6963      	ldr	r3, [r4, #20]
   3244c:	b113      	cbz	r3, 32454 <print_value+0x378>
            *output_pointer++ = '\n';
   3244e:	230a      	movs	r3, #10
   32450:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   32454:	2300      	movs	r3, #0
   32456:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   32458:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   3245a:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   3245c:	4443      	add	r3, r8
   3245e:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   32460:	e77e      	b.n	32360 <print_value+0x284>
                *output_pointer++ = '\t';
   32462:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   32466:	e7a8      	b.n	323ba <print_value+0x2de>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   32468:	2102      	movs	r1, #2
   3246a:	e77f      	b.n	3236c <print_value+0x290>
            *output_pointer++ = '\t';
   3246c:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   32470:	68e2      	ldr	r2, [r4, #12]
   32472:	1a19      	subs	r1, r3, r0
   32474:	3a01      	subs	r2, #1
   32476:	4291      	cmp	r1, r2
   32478:	d3f8      	bcc.n	3246c <print_value+0x390>
   3247a:	e781      	b.n	32380 <print_value+0x2a4>
   3247c:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   3247e:	2509      	movs	r5, #9
   32480:	e7f6      	b.n	32470 <print_value+0x394>
   32482:	bf00      	nop

00032484 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   32484:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   32486:	4d23      	ldr	r5, [pc, #140]	; (32514 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   32488:	b08a      	sub	sp, #40	; 0x28
   3248a:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   3248c:	2224      	movs	r2, #36	; 0x24
   3248e:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   32490:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   32492:	a801      	add	r0, sp, #4
   32494:	f00f fb64 	bl	41b60 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   32498:	682b      	ldr	r3, [r5, #0]
   3249a:	f44f 7080 	mov.w	r0, #256	; 0x100
   3249e:	4798      	blx	r3
    buffer->length = default_buffer_size;
   324a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   324a4:	4603      	mov	r3, r0
    buffer->format = format;
   324a6:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   324a8:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   324aa:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   324ac:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   324ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   324b2:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   324b6:	b17b      	cbz	r3, 324d8 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   324b8:	4620      	mov	r0, r4
   324ba:	a901      	add	r1, sp, #4
   324bc:	f7ff fe0e 	bl	320dc <print_value>
   324c0:	b150      	cbz	r0, 324d8 <print.constprop.0+0x54>
    update_offset(buffer);
   324c2:	a801      	add	r0, sp, #4
   324c4:	f00d fe4f 	bl	40166 <update_offset>
    if (hooks->reallocate != NULL)
   324c8:	68ae      	ldr	r6, [r5, #8]
   324ca:	9903      	ldr	r1, [sp, #12]
   324cc:	b15e      	cbz	r6, 324e6 <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   324ce:	9801      	ldr	r0, [sp, #4]
   324d0:	3101      	adds	r1, #1
   324d2:	47b0      	blx	r6
        if (printed == NULL) {
   324d4:	4604      	mov	r4, r0
   324d6:	b9d0      	cbnz	r0, 3250e <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   324d8:	9c01      	ldr	r4, [sp, #4]
   324da:	b1c4      	cbz	r4, 3250e <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   324dc:	4620      	mov	r0, r4
   324de:	686b      	ldr	r3, [r5, #4]
   324e0:	4798      	blx	r3
    return NULL;
   324e2:	2400      	movs	r4, #0
   324e4:	e013      	b.n	3250e <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   324e6:	682b      	ldr	r3, [r5, #0]
   324e8:	1c48      	adds	r0, r1, #1
   324ea:	4798      	blx	r3
        if (printed == NULL)
   324ec:	4604      	mov	r4, r0
   324ee:	2800      	cmp	r0, #0
   324f0:	d0f2      	beq.n	324d8 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   324f2:	9a03      	ldr	r2, [sp, #12]
   324f4:	9b02      	ldr	r3, [sp, #8]
   324f6:	3201      	adds	r2, #1
   324f8:	429a      	cmp	r2, r3
   324fa:	bf28      	it	cs
   324fc:	461a      	movcs	r2, r3
   324fe:	9901      	ldr	r1, [sp, #4]
   32500:	f00f fb0e 	bl	41b20 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   32504:	9b03      	ldr	r3, [sp, #12]
   32506:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   32508:	686b      	ldr	r3, [r5, #4]
   3250a:	9801      	ldr	r0, [sp, #4]
   3250c:	4798      	blx	r3
}
   3250e:	4620      	mov	r0, r4
   32510:	b00a      	add	sp, #40	; 0x28
   32512:	bd70      	pop	{r4, r5, r6, pc}
   32514:	200146f0 	.word	0x200146f0

00032518 <cJSON_InitHooks>:
{
   32518:	b530      	push	{r4, r5, lr}
   3251a:	4b0e      	ldr	r3, [pc, #56]	; (32554 <cJSON_InitHooks+0x3c>)
   3251c:	490e      	ldr	r1, [pc, #56]	; (32558 <cJSON_InitHooks+0x40>)
   3251e:	4a0f      	ldr	r2, [pc, #60]	; (3255c <cJSON_InitHooks+0x44>)
    if (hooks == NULL)
   32520:	b920      	cbnz	r0, 3252c <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   32522:	e9c3 1200 	strd	r1, r2, [r3]
        global_hooks.reallocate = realloc;
   32526:	4a0e      	ldr	r2, [pc, #56]	; (32560 <cJSON_InitHooks+0x48>)
   32528:	609a      	str	r2, [r3, #8]
   3252a:	e011      	b.n	32550 <cJSON_InitHooks+0x38>
    if (hooks->malloc_fn != NULL)
   3252c:	6805      	ldr	r5, [r0, #0]
        global_hooks.allocate = hooks->malloc_fn;
   3252e:	2d00      	cmp	r5, #0
   32530:	bf14      	ite	ne
   32532:	462c      	movne	r4, r5
   32534:	460c      	moveq	r4, r1
    if (hooks->free_fn != NULL)
   32536:	6845      	ldr	r5, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   32538:	601c      	str	r4, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   3253a:	2d00      	cmp	r5, #0
   3253c:	bf14      	ite	ne
   3253e:	4628      	movne	r0, r5
   32540:	4610      	moveq	r0, r2
    global_hooks.reallocate = NULL;
   32542:	2500      	movs	r5, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   32544:	428c      	cmp	r4, r1
        global_hooks.deallocate = hooks->free_fn;
   32546:	6058      	str	r0, [r3, #4]
    global_hooks.reallocate = NULL;
   32548:	609d      	str	r5, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   3254a:	d101      	bne.n	32550 <cJSON_InitHooks+0x38>
   3254c:	4290      	cmp	r0, r2
   3254e:	d0ea      	beq.n	32526 <cJSON_InitHooks+0xe>
}
   32550:	bd30      	pop	{r4, r5, pc}
   32552:	bf00      	nop
   32554:	200146f0 	.word	0x200146f0
   32558:	0003a1d5 	.word	0x0003a1d5
   3255c:	0003a1e5 	.word	0x0003a1e5
   32560:	0003ac8d 	.word	0x0003ac8d

00032564 <cJSON_Delete>:
{
   32564:	b570      	push	{r4, r5, r6, lr}
   32566:	4604      	mov	r4, r0
   32568:	4d0f      	ldr	r5, [pc, #60]	; (325a8 <cJSON_Delete+0x44>)
    while (item != NULL)
   3256a:	b904      	cbnz	r4, 3256e <cJSON_Delete+0xa>
}
   3256c:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   3256e:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   32570:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   32572:	05d9      	lsls	r1, r3, #23
   32574:	d403      	bmi.n	3257e <cJSON_Delete+0x1a>
   32576:	68a0      	ldr	r0, [r4, #8]
   32578:	b968      	cbnz	r0, 32596 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   3257a:	6920      	ldr	r0, [r4, #16]
   3257c:	b988      	cbnz	r0, 325a2 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   3257e:	68e3      	ldr	r3, [r4, #12]
   32580:	059b      	lsls	r3, r3, #22
   32582:	d403      	bmi.n	3258c <cJSON_Delete+0x28>
   32584:	6a20      	ldr	r0, [r4, #32]
   32586:	b108      	cbz	r0, 3258c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   32588:	686b      	ldr	r3, [r5, #4]
   3258a:	4798      	blx	r3
        global_hooks.deallocate(item);
   3258c:	4620      	mov	r0, r4
   3258e:	686b      	ldr	r3, [r5, #4]
   32590:	4798      	blx	r3
        item = next;
   32592:	4634      	mov	r4, r6
   32594:	e7e9      	b.n	3256a <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   32596:	f7ff ffe5 	bl	32564 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   3259a:	68e3      	ldr	r3, [r4, #12]
   3259c:	05da      	lsls	r2, r3, #23
   3259e:	d5ec      	bpl.n	3257a <cJSON_Delete+0x16>
   325a0:	e7ed      	b.n	3257e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   325a2:	686b      	ldr	r3, [r5, #4]
   325a4:	4798      	blx	r3
   325a6:	e7ea      	b.n	3257e <cJSON_Delete+0x1a>
   325a8:	200146f0 	.word	0x200146f0

000325ac <cJSON_ParseWithLengthOpts>:
{
   325ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   325b0:	4605      	mov	r5, r0
    global_error.json = NULL;
   325b2:	f04f 0900 	mov.w	r9, #0
{
   325b6:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   325b8:	4f30      	ldr	r7, [pc, #192]	; (3267c <cJSON_ParseWithLengthOpts+0xd0>)
{
   325ba:	460c      	mov	r4, r1
   325bc:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   325be:	2100      	movs	r1, #0
   325c0:	221c      	movs	r2, #28
   325c2:	a801      	add	r0, sp, #4
{
   325c4:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   325c6:	f00f facb 	bl	41b60 <memset>
    global_error.position = 0;
   325ca:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   325ce:	2d00      	cmp	r5, #0
   325d0:	d04a      	beq.n	32668 <cJSON_ParseWithLengthOpts+0xbc>
   325d2:	2c00      	cmp	r4, #0
   325d4:	d03d      	beq.n	32652 <cJSON_ParseWithLengthOpts+0xa6>
    buffer.hooks = global_hooks;
   325d6:	4b2a      	ldr	r3, [pc, #168]	; (32680 <cJSON_ParseWithLengthOpts+0xd4>)
    buffer.length = buffer_length; 
   325d8:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   325dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   325e0:	ab08      	add	r3, sp, #32
   325e2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   325e6:	f00d fe20 	bl	4022a <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   325ea:	4604      	mov	r4, r0
   325ec:	2800      	cmp	r0, #0
   325ee:	d030      	beq.n	32652 <cJSON_ParseWithLengthOpts+0xa6>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   325f0:	9801      	ldr	r0, [sp, #4]
   325f2:	b128      	cbz	r0, 32600 <cJSON_ParseWithLengthOpts+0x54>
   325f4:	9b03      	ldr	r3, [sp, #12]
   325f6:	b9e3      	cbnz	r3, 32632 <cJSON_ParseWithLengthOpts+0x86>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   325f8:	9b02      	ldr	r3, [sp, #8]
   325fa:	2b04      	cmp	r3, #4
   325fc:	d80f      	bhi.n	3261e <cJSON_ParseWithLengthOpts+0x72>
    return buffer;
   325fe:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   32600:	f00d fd91 	bl	40126 <buffer_skip_whitespace>
   32604:	4601      	mov	r1, r0
   32606:	4620      	mov	r0, r4
   32608:	f7eb ff52 	bl	1e4b0 <parse_value>
   3260c:	b1f0      	cbz	r0, 3264c <cJSON_ParseWithLengthOpts+0xa0>
    if (require_null_terminated)
   3260e:	f1b8 0f00 	cmp.w	r8, #0
   32612:	d110      	bne.n	32636 <cJSON_ParseWithLengthOpts+0x8a>
    if (return_parse_end)
   32614:	bb56      	cbnz	r6, 3266c <cJSON_ParseWithLengthOpts+0xc0>
}
   32616:	4620      	mov	r0, r4
   32618:	b009      	add	sp, #36	; 0x24
   3261a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   3261e:	2203      	movs	r2, #3
   32620:	4918      	ldr	r1, [pc, #96]	; (32684 <cJSON_ParseWithLengthOpts+0xd8>)
   32622:	f00f fc70 	bl	41f06 <strncmp>
   32626:	2800      	cmp	r0, #0
   32628:	d1e9      	bne.n	325fe <cJSON_ParseWithLengthOpts+0x52>
        buffer->offset += 3;
   3262a:	9b03      	ldr	r3, [sp, #12]
   3262c:	3303      	adds	r3, #3
   3262e:	9303      	str	r3, [sp, #12]
   32630:	e7e5      	b.n	325fe <cJSON_ParseWithLengthOpts+0x52>
        return NULL;
   32632:	4648      	mov	r0, r9
   32634:	e7e4      	b.n	32600 <cJSON_ParseWithLengthOpts+0x54>
        buffer_skip_whitespace(&buffer);
   32636:	a801      	add	r0, sp, #4
   32638:	f00d fd75 	bl	40126 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   3263c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   32640:	4293      	cmp	r3, r2
   32642:	d203      	bcs.n	3264c <cJSON_ParseWithLengthOpts+0xa0>
   32644:	9a01      	ldr	r2, [sp, #4]
   32646:	5cd3      	ldrb	r3, [r2, r3]
   32648:	2b00      	cmp	r3, #0
   3264a:	d0e3      	beq.n	32614 <cJSON_ParseWithLengthOpts+0x68>
        cJSON_Delete(item);
   3264c:	4620      	mov	r0, r4
   3264e:	f7ff ff89 	bl	32564 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   32652:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   32656:	429a      	cmp	r2, r3
   32658:	d30d      	bcc.n	32676 <cJSON_ParseWithLengthOpts+0xca>
        else if (buffer.length > 0)
   3265a:	b103      	cbz	r3, 3265e <cJSON_ParseWithLengthOpts+0xb2>
            local_error.position = buffer.length - 1;
   3265c:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   3265e:	b10e      	cbz	r6, 32664 <cJSON_ParseWithLengthOpts+0xb8>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   32660:	18ea      	adds	r2, r5, r3
   32662:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   32664:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   32668:	2400      	movs	r4, #0
   3266a:	e7d4      	b.n	32616 <cJSON_ParseWithLengthOpts+0x6a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   3266c:	9b01      	ldr	r3, [sp, #4]
   3266e:	9a03      	ldr	r2, [sp, #12]
   32670:	4413      	add	r3, r2
   32672:	6033      	str	r3, [r6, #0]
   32674:	e7cf      	b.n	32616 <cJSON_ParseWithLengthOpts+0x6a>
   32676:	4613      	mov	r3, r2
   32678:	e7f1      	b.n	3265e <cJSON_ParseWithLengthOpts+0xb2>
   3267a:	bf00      	nop
   3267c:	2001a428 	.word	0x2001a428
   32680:	200146f0 	.word	0x200146f0
   32684:	0004c104 	.word	0x0004c104

00032688 <cJSON_CreateNull>:
{
   32688:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   3268a:	4b04      	ldr	r3, [pc, #16]	; (3269c <cJSON_CreateNull+0x14>)
   3268c:	6818      	ldr	r0, [r3, #0]
   3268e:	f00d fdcc 	bl	4022a <cJSON_New_Item.isra.0>
    if(item)
   32692:	b108      	cbz	r0, 32698 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   32694:	2304      	movs	r3, #4
   32696:	60c3      	str	r3, [r0, #12]
}
   32698:	bd08      	pop	{r3, pc}
   3269a:	bf00      	nop
   3269c:	200146f0 	.word	0x200146f0

000326a0 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   326a0:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   326a2:	4b0a      	ldr	r3, [pc, #40]	; (326cc <cJSON_CreateString+0x2c>)
{
   326a4:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   326a6:	6818      	ldr	r0, [r3, #0]
   326a8:	f00d fdbf 	bl	4022a <cJSON_New_Item.isra.0>
    if(item)
   326ac:	4604      	mov	r4, r0
   326ae:	b158      	cbz	r0, 326c8 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   326b0:	2310      	movs	r3, #16
   326b2:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   326b4:	4628      	mov	r0, r5
   326b6:	f7ff fccf 	bl	32058 <cJSON_strdup.constprop.0>
   326ba:	4605      	mov	r5, r0
   326bc:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   326be:	b918      	cbnz	r0, 326c8 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   326c0:	4620      	mov	r0, r4
   326c2:	f7ff ff4f 	bl	32564 <cJSON_Delete>
            return NULL;
   326c6:	462c      	mov	r4, r5
        }
    }

    return item;
}
   326c8:	4620      	mov	r0, r4
   326ca:	bd38      	pop	{r3, r4, r5, pc}
   326cc:	200146f0 	.word	0x200146f0

000326d0 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   326d0:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   326d2:	4b04      	ldr	r3, [pc, #16]	; (326e4 <cJSON_CreateArray+0x14>)
   326d4:	6818      	ldr	r0, [r3, #0]
   326d6:	f00d fda8 	bl	4022a <cJSON_New_Item.isra.0>
    if(item)
   326da:	b108      	cbz	r0, 326e0 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   326dc:	2320      	movs	r3, #32
   326de:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   326e0:	bd08      	pop	{r3, pc}
   326e2:	bf00      	nop
   326e4:	200146f0 	.word	0x200146f0

000326e8 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   326e8:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   326ea:	4b04      	ldr	r3, [pc, #16]	; (326fc <cJSON_CreateObject+0x14>)
   326ec:	6818      	ldr	r0, [r3, #0]
   326ee:	f00d fd9c 	bl	4022a <cJSON_New_Item.isra.0>
    if (item)
   326f2:	b108      	cbz	r0, 326f8 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   326f4:	2340      	movs	r3, #64	; 0x40
   326f6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   326f8:	bd08      	pop	{r3, pc}
   326fa:	bf00      	nop
   326fc:	200146f0 	.word	0x200146f0

00032700 <cJSON_GetNumberValue>:
{
   32700:	b508      	push	{r3, lr}
   32702:	4602      	mov	r2, r0
    if (!cJSON_IsNumber(item)) 
   32704:	f00d feca 	bl	4049c <cJSON_IsNumber>
   32708:	b110      	cbz	r0, 32710 <cJSON_GetNumberValue+0x10>
    return item->valuedouble;
   3270a:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
}
   3270e:	bd08      	pop	{r3, pc}
        return (double) NAN;
   32710:	2000      	movs	r0, #0
   32712:	4901      	ldr	r1, [pc, #4]	; (32718 <cJSON_GetNumberValue+0x18>)
   32714:	e7fb      	b.n	3270e <cJSON_GetNumberValue+0xe>
   32716:	bf00      	nop
   32718:	7ff80000 	.word	0x7ff80000

0003271c <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   3271c:	4b01      	ldr	r3, [pc, #4]	; (32724 <cJSON_free+0x8>)
   3271e:	685b      	ldr	r3, [r3, #4]
   32720:	4718      	bx	r3
   32722:	bf00      	nop
   32724:	200146f0 	.word	0x200146f0

00032728 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   32728:	4803      	ldr	r0, [pc, #12]	; (32738 <cJSON_Init+0x10>)
   3272a:	4b04      	ldr	r3, [pc, #16]	; (3273c <cJSON_Init+0x14>)
   3272c:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   3272e:	4b04      	ldr	r3, [pc, #16]	; (32740 <cJSON_Init+0x18>)
   32730:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   32732:	f7ff bef1 	b.w	32518 <cJSON_InitHooks>
   32736:	bf00      	nop
   32738:	2001a430 	.word	0x2001a430
   3273c:	000404d5 	.word	0x000404d5
   32740:	000404d9 	.word	0x000404d9

00032744 <SystemCoreClockUpdate>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   32744:	4b01      	ldr	r3, [pc, #4]	; (3274c <SystemCoreClockUpdate+0x8>)
   32746:	4a02      	ldr	r2, [pc, #8]	; (32750 <SystemCoreClockUpdate+0xc>)
   32748:	601a      	str	r2, [r3, #0]
}
   3274a:	4770      	bx	lr
   3274c:	200146fc 	.word	0x200146fc
   32750:	03d09000 	.word	0x03d09000

00032754 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   32754:	4a07      	ldr	r2, [pc, #28]	; (32774 <SystemInit+0x20>)
   32756:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3275a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3275e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   32762:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   32766:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3276a:	4b03      	ldr	r3, [pc, #12]	; (32778 <SystemInit+0x24>)
   3276c:	4a03      	ldr	r2, [pc, #12]	; (3277c <SystemInit+0x28>)
   3276e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   32770:	4770      	bx	lr
   32772:	bf00      	nop
   32774:	e000ed00 	.word	0xe000ed00
   32778:	200146fc 	.word	0x200146fc
   3277c:	03d09000 	.word	0x03d09000

00032780 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   32780:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   32782:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   32784:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   32786:	fab2 f382 	clz	r3, r2
   3278a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   3278e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   32790:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   32792:	d010      	beq.n	327b6 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   32794:	fa05 f303 	lsl.w	r3, r5, r3
   32798:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3279c:	e8d0 6fef 	ldaex	r6, [r0]
   327a0:	4296      	cmp	r6, r2
   327a2:	d104      	bne.n	327ae <nrfx_flag32_alloc+0x2e>
   327a4:	e8c0 3fec 	stlex	ip, r3, [r0]
   327a8:	f1bc 0f00 	cmp.w	ip, #0
   327ac:	d1f6      	bne.n	3279c <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   327ae:	d1e9      	bne.n	32784 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   327b0:	4802      	ldr	r0, [pc, #8]	; (327bc <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   327b2:	700c      	strb	r4, [r1, #0]
}
   327b4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   327b6:	4802      	ldr	r0, [pc, #8]	; (327c0 <nrfx_flag32_alloc+0x40>)
   327b8:	e7fc      	b.n	327b4 <nrfx_flag32_alloc+0x34>
   327ba:	bf00      	nop
   327bc:	0bad0000 	.word	0x0bad0000
   327c0:	0bad0002 	.word	0x0bad0002

000327c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   327c4:	6803      	ldr	r3, [r0, #0]
{
   327c6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   327c8:	40cb      	lsrs	r3, r1
   327ca:	07db      	lsls	r3, r3, #31
   327cc:	d411      	bmi.n	327f2 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   327ce:	2301      	movs	r3, #1
   327d0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   327d4:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   327d6:	ea41 0203 	orr.w	r2, r1, r3
   327da:	e8d0 4fef 	ldaex	r4, [r0]
   327de:	429c      	cmp	r4, r3
   327e0:	d104      	bne.n	327ec <nrfx_flag32_free+0x28>
   327e2:	e8c0 2fec 	stlex	ip, r2, [r0]
   327e6:	f1bc 0f00 	cmp.w	ip, #0
   327ea:	d1f6      	bne.n	327da <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   327ec:	d1f2      	bne.n	327d4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   327ee:	4802      	ldr	r0, [pc, #8]	; (327f8 <nrfx_flag32_free+0x34>)
}
   327f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   327f2:	4802      	ldr	r0, [pc, #8]	; (327fc <nrfx_flag32_free+0x38>)
   327f4:	e7fc      	b.n	327f0 <nrfx_flag32_free+0x2c>
   327f6:	bf00      	nop
   327f8:	0bad0000 	.word	0x0bad0000
   327fc:	0bad0004 	.word	0x0bad0004

00032800 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   32800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   32802:	4604      	mov	r4, r0
   32804:	b168      	cbz	r0, 32822 <clock_stop+0x22>
   32806:	2801      	cmp	r0, #1
   32808:	d02e      	beq.n	32868 <clock_stop+0x68>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3280a:	492c      	ldr	r1, [pc, #176]	; (328bc <clock_stop+0xbc>)
   3280c:	482c      	ldr	r0, [pc, #176]	; (328c0 <clock_stop+0xc0>)
   3280e:	22d8      	movs	r2, #216	; 0xd8
   32810:	f00a fcb9 	bl	3d186 <assert_print>
   32814:	21d8      	movs	r1, #216	; 0xd8
   32816:	4829      	ldr	r0, [pc, #164]	; (328bc <clock_stop+0xbc>)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   32818:	b003      	add	sp, #12
   3281a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
   3281e:	f00a bcab 	b.w	3d178 <assert_post_action>
    p_reg->INTENCLR = mask;
   32822:	2202      	movs	r2, #2
   32824:	4b27      	ldr	r3, [pc, #156]	; (328c4 <clock_stop+0xc4>)
   32826:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3282a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   3282e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32832:	2201      	movs	r2, #1
   32834:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   32836:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32838:	429c      	cmp	r4, r3
   3283a:	bf18      	it	ne
   3283c:	2500      	movne	r5, #0
   3283e:	f242 7710 	movw	r7, #10000	; 0x2710
   32842:	4e20      	ldr	r6, [pc, #128]	; (328c4 <clock_stop+0xc4>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   32844:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32848:	bf08      	it	eq
   3284a:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
   3284e:	b1ac      	cbz	r4, 3287c <clock_stop+0x7c>
   32850:	2c01      	cmp	r4, #1
   32852:	d029      	beq.n	328a8 <clock_stop+0xa8>
            NRFX_ASSERT(0);
   32854:	491c      	ldr	r1, [pc, #112]	; (328c8 <clock_stop+0xc8>)
   32856:	481a      	ldr	r0, [pc, #104]	; (328c0 <clock_stop+0xc0>)
   32858:	f44f 724f 	mov.w	r2, #828	; 0x33c
   3285c:	f00a fc93 	bl	3d186 <assert_print>
   32860:	f44f 714f 	mov.w	r1, #828	; 0x33c
   32864:	4818      	ldr	r0, [pc, #96]	; (328c8 <clock_stop+0xc8>)
   32866:	e7d7      	b.n	32818 <clock_stop+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32868:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   3286a:	4b16      	ldr	r3, [pc, #88]	; (328c4 <clock_stop+0xc4>)
   3286c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32870:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   32874:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32878:	6058      	str	r0, [r3, #4]
}
   3287a:	e7dc      	b.n	32836 <clock_stop+0x36>
            if (p_clk_src != NULL)
   3287c:	b125      	cbz	r5, 32888 <clock_stop+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3287e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   32882:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   32886:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32888:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3288c:	03db      	lsls	r3, r3, #15
   3288e:	d509      	bpl.n	328a4 <clock_stop+0xa4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   32890:	b11d      	cbz	r5, 3289a <clock_stop+0x9a>
   32892:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32896:	2b01      	cmp	r3, #1
   32898:	d104      	bne.n	328a4 <clock_stop+0xa4>
   3289a:	2001      	movs	r0, #1
   3289c:	f00d fe21 	bl	404e2 <nrfx_busy_wait>
   328a0:	3f01      	subs	r7, #1
   328a2:	d1d4      	bne.n	3284e <clock_stop+0x4e>
}
   328a4:	b003      	add	sp, #12
   328a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   328a8:	b125      	cbz	r5, 328b4 <clock_stop+0xb4>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   328aa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   328ae:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   328b2:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   328b4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   328b8:	e7e8      	b.n	3288c <clock_stop+0x8c>
   328ba:	bf00      	nop
   328bc:	0004c108 	.word	0x0004c108
   328c0:	0004494f 	.word	0x0004494f
   328c4:	40005000 	.word	0x40005000
   328c8:	0004c145 	.word	0x0004c145

000328cc <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   328cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   328ce:	4604      	mov	r4, r0
   328d0:	b950      	cbnz	r0, 328e8 <nrfx_clock_init+0x1c>
   328d2:	490a      	ldr	r1, [pc, #40]	; (328fc <nrfx_clock_init+0x30>)
   328d4:	480a      	ldr	r0, [pc, #40]	; (32900 <nrfx_clock_init+0x34>)
   328d6:	f240 1215 	movw	r2, #277	; 0x115
   328da:	f00a fc54 	bl	3d186 <assert_print>
   328de:	f240 1115 	movw	r1, #277	; 0x115
   328e2:	4806      	ldr	r0, [pc, #24]	; (328fc <nrfx_clock_init+0x30>)
   328e4:	f00a fc48 	bl	3d178 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   328e8:	4b06      	ldr	r3, [pc, #24]	; (32904 <nrfx_clock_init+0x38>)
   328ea:	791a      	ldrb	r2, [r3, #4]
   328ec:	b922      	cbnz	r2, 328f8 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   328ee:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   328f0:	4805      	ldr	r0, [pc, #20]	; (32908 <nrfx_clock_init+0x3c>)
        m_clock_cb.event_handler = event_handler;
   328f2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   328f4:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   328f6:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   328f8:	4804      	ldr	r0, [pc, #16]	; (3290c <nrfx_clock_init+0x40>)
    return err_code;
   328fa:	e7fc      	b.n	328f6 <nrfx_clock_init+0x2a>
   328fc:	0004c108 	.word	0x0004c108
   32900:	0004494f 	.word	0x0004494f
   32904:	2001a438 	.word	0x2001a438
   32908:	0bad0000 	.word	0x0bad0000
   3290c:	0bad000c 	.word	0x0bad000c

00032910 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   32910:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32912:	4b0d      	ldr	r3, [pc, #52]	; (32948 <nrfx_clock_enable+0x38>)
   32914:	791b      	ldrb	r3, [r3, #4]
   32916:	b953      	cbnz	r3, 3292e <nrfx_clock_enable+0x1e>
   32918:	490c      	ldr	r1, [pc, #48]	; (3294c <nrfx_clock_enable+0x3c>)
   3291a:	480d      	ldr	r0, [pc, #52]	; (32950 <nrfx_clock_enable+0x40>)
   3291c:	f44f 7297 	mov.w	r2, #302	; 0x12e
   32920:	f00a fc31 	bl	3d186 <assert_print>
   32924:	f44f 7197 	mov.w	r1, #302	; 0x12e
   32928:	4808      	ldr	r0, [pc, #32]	; (3294c <nrfx_clock_enable+0x3c>)
   3292a:	f00a fc25 	bl	3d178 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3292e:	2005      	movs	r0, #5
   32930:	f7f0 fbb8 	bl	230a4 <arch_irq_is_enabled>
   32934:	b910      	cbnz	r0, 3293c <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   32936:	2005      	movs	r0, #5
   32938:	f7f0 fb90 	bl	2305c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3293c:	2201      	movs	r2, #1
   3293e:	4b05      	ldr	r3, [pc, #20]	; (32954 <nrfx_clock_enable+0x44>)
   32940:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   32944:	bd08      	pop	{r3, pc}
   32946:	bf00      	nop
   32948:	2001a438 	.word	0x2001a438
   3294c:	0004c108 	.word	0x0004c108
   32950:	0004494f 	.word	0x0004494f
   32954:	40005000 	.word	0x40005000

00032958 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32958:	4b2c      	ldr	r3, [pc, #176]	; (32a0c <nrfx_clock_start+0xb4>)
{
   3295a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3295c:	791b      	ldrb	r3, [r3, #4]
{
   3295e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32960:	b953      	cbnz	r3, 32978 <nrfx_clock_start+0x20>
   32962:	492b      	ldr	r1, [pc, #172]	; (32a10 <nrfx_clock_start+0xb8>)
   32964:	482b      	ldr	r0, [pc, #172]	; (32a14 <nrfx_clock_start+0xbc>)
   32966:	f44f 72b4 	mov.w	r2, #360	; 0x168
   3296a:	f00a fc0c 	bl	3d186 <assert_print>
   3296e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   32972:	4827      	ldr	r0, [pc, #156]	; (32a10 <nrfx_clock_start+0xb8>)
   32974:	f00a fc00 	bl	3d178 <assert_post_action>
    switch (domain)
   32978:	b174      	cbz	r4, 32998 <nrfx_clock_start+0x40>
   3297a:	2c01      	cmp	r4, #1
   3297c:	d03b      	beq.n	329f6 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3297e:	4924      	ldr	r1, [pc, #144]	; (32a10 <nrfx_clock_start+0xb8>)
   32980:	4824      	ldr	r0, [pc, #144]	; (32a14 <nrfx_clock_start+0xbc>)
   32982:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   32986:	f00a fbfe 	bl	3d186 <assert_print>
            break;
    }
}
   3298a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   3298e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   32992:	481f      	ldr	r0, [pc, #124]	; (32a10 <nrfx_clock_start+0xb8>)
   32994:	f00a bbf0 	b.w	3d178 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32998:	4a1f      	ldr	r2, [pc, #124]	; (32a18 <nrfx_clock_start+0xc0>)
   3299a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3299e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   329a2:	03c9      	lsls	r1, r1, #15
   329a4:	d412      	bmi.n	329cc <nrfx_clock_start+0x74>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   329a6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   329aa:	07db      	lsls	r3, r3, #31
   329ac:	d418      	bmi.n	329e0 <nrfx_clock_start+0x88>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   329ae:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   329b0:	4a19      	ldr	r2, [pc, #100]	; (32a18 <nrfx_clock_start+0xc0>)
   329b2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   329b6:	2300      	movs	r3, #0
   329b8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   329bc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   329c0:	2302      	movs	r3, #2
   329c2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   329c6:	2301      	movs	r3, #1
   329c8:	6093      	str	r3, [r2, #8]
}
   329ca:	bd10      	pop	{r4, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   329cc:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   329d0:	2b02      	cmp	r3, #2
   329d2:	d0ed      	beq.n	329b0 <nrfx_clock_start+0x58>
    if (!is_correct_clk)
   329d4:	2b01      	cmp	r3, #1
   329d6:	d0eb      	beq.n	329b0 <nrfx_clock_start+0x58>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   329d8:	2000      	movs	r0, #0
   329da:	f7ff ff11 	bl	32800 <clock_stop>
   329de:	e7e6      	b.n	329ae <nrfx_clock_start+0x56>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   329e0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   329e4:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   329e8:	3b01      	subs	r3, #1
   329ea:	2b01      	cmp	r3, #1
   329ec:	d8f4      	bhi.n	329d8 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   329ee:	2302      	movs	r3, #2
   329f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   329f4:	e7e9      	b.n	329ca <nrfx_clock_start+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   329f6:	2200      	movs	r2, #0
   329f8:	4b07      	ldr	r3, [pc, #28]	; (32a18 <nrfx_clock_start+0xc0>)
   329fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   329fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   32a02:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32a06:	601c      	str	r4, [r3, #0]
}
   32a08:	e7df      	b.n	329ca <nrfx_clock_start+0x72>
   32a0a:	bf00      	nop
   32a0c:	2001a438 	.word	0x2001a438
   32a10:	0004c108 	.word	0x0004c108
   32a14:	0004494f 	.word	0x0004494f
   32a18:	40005000 	.word	0x40005000

00032a1c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32a1c:	4b0a      	ldr	r3, [pc, #40]	; (32a48 <nrfx_clock_stop+0x2c>)
{
   32a1e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32a20:	791b      	ldrb	r3, [r3, #4]
{
   32a22:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32a24:	b953      	cbnz	r3, 32a3c <nrfx_clock_stop+0x20>
   32a26:	4909      	ldr	r1, [pc, #36]	; (32a4c <nrfx_clock_stop+0x30>)
   32a28:	4809      	ldr	r0, [pc, #36]	; (32a50 <nrfx_clock_stop+0x34>)
   32a2a:	f240 12ad 	movw	r2, #429	; 0x1ad
   32a2e:	f00a fbaa 	bl	3d186 <assert_print>
   32a32:	f240 11ad 	movw	r1, #429	; 0x1ad
   32a36:	4805      	ldr	r0, [pc, #20]	; (32a4c <nrfx_clock_stop+0x30>)
   32a38:	f00a fb9e 	bl	3d178 <assert_post_action>
    clock_stop(domain);
   32a3c:	4620      	mov	r0, r4
}
   32a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
   32a42:	f7ff bedd 	b.w	32800 <clock_stop>
   32a46:	bf00      	nop
   32a48:	2001a438 	.word	0x2001a438
   32a4c:	0004c108 	.word	0x0004c108
   32a50:	0004494f 	.word	0x0004494f

00032a54 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   32a54:	4b17      	ldr	r3, [pc, #92]	; (32ab4 <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   32a56:	b510      	push	{r4, lr}
   32a58:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   32a5c:	b152      	cbz	r2, 32a74 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32a5e:	2000      	movs	r0, #0
   32a60:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   32a64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   32a68:	2201      	movs	r2, #1
   32a6a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   32a6e:	4b12      	ldr	r3, [pc, #72]	; (32ab8 <nrfx_power_clock_irq_handler+0x64>)
   32a70:	681b      	ldr	r3, [r3, #0]
   32a72:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   32a74:	4b0f      	ldr	r3, [pc, #60]	; (32ab4 <nrfx_power_clock_irq_handler+0x60>)
   32a76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   32a7a:	b18a      	cbz	r2, 32aa0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32a7c:	2200      	movs	r2, #0
   32a7e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   32a82:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32a86:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32a8a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   32a8e:	f002 0203 	and.w	r2, r2, #3
   32a92:	2a01      	cmp	r2, #1
   32a94:	f04f 0102 	mov.w	r1, #2
   32a98:	d103      	bne.n	32aa2 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   32a9a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32a9e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   32aa0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   32aa2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   32aa6:	4b04      	ldr	r3, [pc, #16]	; (32ab8 <nrfx_power_clock_irq_handler+0x64>)
   32aa8:	2001      	movs	r0, #1
}
   32aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   32aae:	681b      	ldr	r3, [r3, #0]
   32ab0:	4718      	bx	r3
   32ab2:	bf00      	nop
   32ab4:	40005000 	.word	0x40005000
   32ab8:	2001a438 	.word	0x2001a438

00032abc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   32abc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   32abe:	4801      	ldr	r0, [pc, #4]	; (32ac4 <nrfx_dppi_channel_alloc+0x8>)
   32ac0:	f7ff be5e 	b.w	32780 <nrfx_flag32_alloc>
   32ac4:	20014700 	.word	0x20014700

00032ac8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   32ac8:	4b03      	ldr	r3, [pc, #12]	; (32ad8 <pin_in_use_by_te+0x10>)
   32aca:	3008      	adds	r0, #8
   32acc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   32ad0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   32ad4:	4770      	bx	lr
   32ad6:	bf00      	nop
   32ad8:	20014704 	.word	0x20014704

00032adc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   32adc:	4b04      	ldr	r3, [pc, #16]	; (32af0 <pin_has_trigger+0x14>)
   32ade:	3008      	adds	r0, #8
   32ae0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   32ae4:	f010 001c 	ands.w	r0, r0, #28
   32ae8:	bf18      	it	ne
   32aea:	2001      	movne	r0, #1
   32aec:	4770      	bx	lr
   32aee:	bf00      	nop
   32af0:	20014704 	.word	0x20014704

00032af4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   32af4:	4b03      	ldr	r3, [pc, #12]	; (32b04 <pin_is_output+0x10>)
   32af6:	3008      	adds	r0, #8
   32af8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   32afc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   32b00:	4770      	bx	lr
   32b02:	bf00      	nop
   32b04:	20014704 	.word	0x20014704

00032b08 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   32b08:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32b0a:	4c0d      	ldr	r4, [pc, #52]	; (32b40 <call_handler+0x38>)
   32b0c:	f100 0308 	add.w	r3, r0, #8
   32b10:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   32b14:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32b16:	05da      	lsls	r2, r3, #23
{
   32b18:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32b1a:	d507      	bpl.n	32b2c <call_handler+0x24>
   32b1c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   32b20:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   32b24:	6852      	ldr	r2, [r2, #4]
   32b26:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   32b2a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   32b2c:	68a3      	ldr	r3, [r4, #8]
   32b2e:	b12b      	cbz	r3, 32b3c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   32b30:	4631      	mov	r1, r6
   32b32:	4628      	mov	r0, r5
   32b34:	68e2      	ldr	r2, [r4, #12]
    }
}
   32b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   32b3a:	4718      	bx	r3
}
   32b3c:	bd70      	pop	{r4, r5, r6, pc}
   32b3e:	bf00      	nop
   32b40:	20014704 	.word	0x20014704

00032b44 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32b44:	4a19      	ldr	r2, [pc, #100]	; (32bac <release_handler+0x68>)
   32b46:	3008      	adds	r0, #8
   32b48:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
   32b4c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32b4e:	05d9      	lsls	r1, r3, #23
   32b50:	d51d      	bpl.n	32b8e <release_handler+0x4a>
   32b52:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   32b56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   32b5a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   32b5e:	2000      	movs	r0, #0
   32b60:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   32b64:	f834 3b02 	ldrh.w	r3, [r4], #2
   32b68:	f413 7f80 	tst.w	r3, #256	; 0x100
   32b6c:	d003      	beq.n	32b76 <release_handler+0x32>
   32b6e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   32b72:	4299      	cmp	r1, r3
   32b74:	d00b      	beq.n	32b8e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   32b76:	3001      	adds	r0, #1
   32b78:	2820      	cmp	r0, #32
   32b7a:	d1f3      	bne.n	32b64 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   32b7c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   32b7e:	480c      	ldr	r0, [pc, #48]	; (32bb0 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   32b80:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   32b84:	f7ff fe1e 	bl	327c4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32b88:	4b0a      	ldr	r3, [pc, #40]	; (32bb4 <release_handler+0x70>)
   32b8a:	4298      	cmp	r0, r3
   32b8c:	d100      	bne.n	32b90 <release_handler+0x4c>
}
   32b8e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32b90:	4909      	ldr	r1, [pc, #36]	; (32bb8 <release_handler+0x74>)
   32b92:	480a      	ldr	r0, [pc, #40]	; (32bbc <release_handler+0x78>)
   32b94:	f44f 7299 	mov.w	r2, #306	; 0x132
   32b98:	f00a faf5 	bl	3d186 <assert_print>
}
   32b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32ba0:	f44f 7199 	mov.w	r1, #306	; 0x132
   32ba4:	4804      	ldr	r0, [pc, #16]	; (32bb8 <release_handler+0x74>)
   32ba6:	f00a bae7 	b.w	3d178 <assert_post_action>
   32baa:	bf00      	nop
   32bac:	20014704 	.word	0x20014704
   32bb0:	20014758 	.word	0x20014758
   32bb4:	0bad0000 	.word	0x0bad0000
   32bb8:	0004c179 	.word	0x0004c179
   32bbc:	0004494f 	.word	0x0004494f

00032bc0 <pin_handler_trigger_uninit>:
{
   32bc0:	b538      	push	{r3, r4, r5, lr}
   32bc2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   32bc4:	f7ff ff80 	bl	32ac8 <pin_in_use_by_te>
   32bc8:	4c0b      	ldr	r4, [pc, #44]	; (32bf8 <pin_handler_trigger_uninit+0x38>)
   32bca:	f102 0508 	add.w	r5, r2, #8
   32bce:	b160      	cbz	r0, 32bea <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   32bd0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32bd2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   32bd6:	0b5b      	lsrs	r3, r3, #13
   32bd8:	009b      	lsls	r3, r3, #2
   32bda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32bde:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   32be2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   32be6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   32bea:	4610      	mov	r0, r2
   32bec:	f7ff ffaa 	bl	32b44 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   32bf0:	2300      	movs	r3, #0
   32bf2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   32bf6:	bd38      	pop	{r3, r4, r5, pc}
   32bf8:	20014704 	.word	0x20014704

00032bfc <nrf_gpio_pin_port_decode>:
{
   32bfc:	b510      	push	{r4, lr}
   32bfe:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32c00:	6800      	ldr	r0, [r0, #0]
   32c02:	f00d fc70 	bl	404e6 <nrf_gpio_pin_present_check>
   32c06:	b950      	cbnz	r0, 32c1e <nrf_gpio_pin_port_decode+0x22>
   32c08:	490e      	ldr	r1, [pc, #56]	; (32c44 <nrf_gpio_pin_port_decode+0x48>)
   32c0a:	480f      	ldr	r0, [pc, #60]	; (32c48 <nrf_gpio_pin_port_decode+0x4c>)
   32c0c:	f240 2229 	movw	r2, #553	; 0x229
   32c10:	f00a fab9 	bl	3d186 <assert_print>
   32c14:	f240 2129 	movw	r1, #553	; 0x229
   32c18:	480a      	ldr	r0, [pc, #40]	; (32c44 <nrf_gpio_pin_port_decode+0x48>)
   32c1a:	f00a faad 	bl	3d178 <assert_post_action>
    uint32_t pin_number = *p_pin;
   32c1e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   32c20:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32c24:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   32c26:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32c28:	d00a      	beq.n	32c40 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   32c2a:	4906      	ldr	r1, [pc, #24]	; (32c44 <nrf_gpio_pin_port_decode+0x48>)
   32c2c:	4806      	ldr	r0, [pc, #24]	; (32c48 <nrf_gpio_pin_port_decode+0x4c>)
   32c2e:	f240 222e 	movw	r2, #558	; 0x22e
   32c32:	f00a faa8 	bl	3d186 <assert_print>
   32c36:	f240 212e 	movw	r1, #558	; 0x22e
   32c3a:	4802      	ldr	r0, [pc, #8]	; (32c44 <nrf_gpio_pin_port_decode+0x48>)
   32c3c:	f00a fa9c 	bl	3d178 <assert_post_action>
}
   32c40:	4802      	ldr	r0, [pc, #8]	; (32c4c <nrf_gpio_pin_port_decode+0x50>)
   32c42:	bd10      	pop	{r4, pc}
   32c44:	0004556d 	.word	0x0004556d
   32c48:	0004494f 	.word	0x0004494f
   32c4c:	40842500 	.word	0x40842500

00032c50 <nrfx_gpiote_input_configure>:
{
   32c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   32c52:	4604      	mov	r4, r0
   32c54:	4617      	mov	r7, r2
   32c56:	461d      	mov	r5, r3
   32c58:	b085      	sub	sp, #20
    if (p_input_config)
   32c5a:	b1f1      	cbz	r1, 32c9a <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   32c5c:	f00d fc4f 	bl	404fe <pin_is_task_output>
   32c60:	b110      	cbz	r0, 32c68 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   32c62:	484d      	ldr	r0, [pc, #308]	; (32d98 <nrfx_gpiote_input_configure+0x148>)
}
   32c64:	b005      	add	sp, #20
   32c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   32c68:	460b      	mov	r3, r1
   32c6a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   32c6e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   32c72:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   32c76:	f10d 020f 	add.w	r2, sp, #15
   32c7a:	f10d 010e 	add.w	r1, sp, #14
   32c7e:	4620      	mov	r0, r4
   32c80:	f00d fc4c 	bl	4051c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   32c84:	4a45      	ldr	r2, [pc, #276]	; (32d9c <nrfx_gpiote_input_configure+0x14c>)
   32c86:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   32c8a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   32c8e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   32c92:	f043 0301 	orr.w	r3, r3, #1
   32c96:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   32c9a:	b197      	cbz	r7, 32cc2 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   32c9c:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   32c9e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   32ca0:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   32ca2:	f7ff ff27 	bl	32af4 <pin_is_output>
   32ca6:	b180      	cbz	r0, 32cca <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   32ca8:	2a00      	cmp	r2, #0
   32caa:	d1da      	bne.n	32c62 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   32cac:	4a3b      	ldr	r2, [pc, #236]	; (32d9c <nrfx_gpiote_input_configure+0x14c>)
   32cae:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   32cb2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   32cb6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   32cba:	ea43 0686 	orr.w	r6, r3, r6, lsl #2
   32cbe:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
    if (p_handler_config)
   32cc2:	2d00      	cmp	r5, #0
   32cc4:	d13e      	bne.n	32d44 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   32cc6:	4836      	ldr	r0, [pc, #216]	; (32da0 <nrfx_gpiote_input_configure+0x150>)
   32cc8:	e7cc      	b.n	32c64 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   32cca:	4834      	ldr	r0, [pc, #208]	; (32d9c <nrfx_gpiote_input_configure+0x14c>)
   32ccc:	f104 0708 	add.w	r7, r4, #8
   32cd0:	f830 1017 	ldrh.w	r1, [r0, r7, lsl #1]
   32cd4:	f021 0120 	bic.w	r1, r1, #32
   32cd8:	04c9      	lsls	r1, r1, #19
   32cda:	0cc9      	lsrs	r1, r1, #19
   32cdc:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
            if (use_evt)
   32ce0:	2a00      	cmp	r2, #0
   32ce2:	d0e3      	beq.n	32cac <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   32ce4:	2e03      	cmp	r6, #3
   32ce6:	d8bc      	bhi.n	32c62 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   32ce8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   32cec:	4662      	mov	r2, ip
   32cee:	0092      	lsls	r2, r2, #2
   32cf0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   32cf4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   32cf8:	b926      	cbnz	r6, 32d04 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
   32cfa:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   32cfe:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
#endif
}
   32d02:	e7d3      	b.n	32cac <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   32d04:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   32d08:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   32d0c:	f023 0303 	bic.w	r3, r3, #3
   32d10:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   32d14:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   32d18:	f041 0120 	orr.w	r1, r1, #32
   32d1c:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   32d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   32d24:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32d28:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   32d2c:	0223      	lsls	r3, r4, #8
   32d2e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   32d32:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   32d36:	ea43 030e 	orr.w	r3, r3, lr
   32d3a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   32d3e:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
   32d42:	e7b3      	b.n	32cac <nrfx_gpiote_input_configure+0x5c>
    release_handler(pin);
   32d44:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   32d46:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   32d4a:	f7ff fefb 	bl	32b44 <release_handler>
    if (!handler)
   32d4e:	2e00      	cmp	r6, #0
   32d50:	d0b9      	beq.n	32cc6 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   32d52:	4d12      	ldr	r5, [pc, #72]	; (32d9c <nrfx_gpiote_input_configure+0x14c>)
   32d54:	682b      	ldr	r3, [r5, #0]
   32d56:	429e      	cmp	r6, r3
   32d58:	d104      	bne.n	32d64 <nrfx_gpiote_input_configure+0x114>
   32d5a:	686b      	ldr	r3, [r5, #4]
   32d5c:	429f      	cmp	r7, r3
   32d5e:	d101      	bne.n	32d64 <nrfx_gpiote_input_configure+0x114>
   32d60:	2200      	movs	r2, #0
   32d62:	e00a      	b.n	32d7a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   32d64:	480f      	ldr	r0, [pc, #60]	; (32da4 <nrfx_gpiote_input_configure+0x154>)
   32d66:	f10d 010f 	add.w	r1, sp, #15
   32d6a:	f7ff fd09 	bl	32780 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   32d6e:	4b0c      	ldr	r3, [pc, #48]	; (32da0 <nrfx_gpiote_input_configure+0x150>)
   32d70:	4298      	cmp	r0, r3
   32d72:	f47f af77 	bne.w	32c64 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   32d76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   32d7a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32d7e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   32d80:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32d82:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   32d86:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32d8a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   32d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   32d92:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   32d96:	e796      	b.n	32cc6 <nrfx_gpiote_input_configure+0x76>
   32d98:	0bad0004 	.word	0x0bad0004
   32d9c:	20014704 	.word	0x20014704
   32da0:	0bad0000 	.word	0x0bad0000
   32da4:	20014758 	.word	0x20014758

00032da8 <nrfx_gpiote_output_configure>:
{
   32da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   32daa:	4604      	mov	r4, r0
   32dac:	4615      	mov	r5, r2
   32dae:	b085      	sub	sp, #20
    if (p_config)
   32db0:	b321      	cbz	r1, 32dfc <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   32db2:	f7ff fe9f 	bl	32af4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   32db6:	b920      	cbnz	r0, 32dc2 <nrfx_gpiote_output_configure+0x1a>
   32db8:	4620      	mov	r0, r4
   32dba:	f7ff fe85 	bl	32ac8 <pin_in_use_by_te>
   32dbe:	2800      	cmp	r0, #0
   32dc0:	d161      	bne.n	32e86 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   32dc2:	4620      	mov	r0, r4
   32dc4:	f7ff fe8a 	bl	32adc <pin_has_trigger>
   32dc8:	b110      	cbz	r0, 32dd0 <nrfx_gpiote_output_configure+0x28>
   32dca:	784b      	ldrb	r3, [r1, #1]
   32dcc:	2b01      	cmp	r3, #1
   32dce:	d05a      	beq.n	32e86 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   32dd0:	2301      	movs	r3, #1
   32dd2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   32dd6:	2300      	movs	r3, #0
   32dd8:	1c4a      	adds	r2, r1, #1
   32dda:	e9cd 1300 	strd	r1, r3, [sp]
   32dde:	4620      	mov	r0, r4
   32de0:	1c8b      	adds	r3, r1, #2
   32de2:	f10d 010f 	add.w	r1, sp, #15
   32de6:	f00d fb99 	bl	4051c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   32dea:	4a28      	ldr	r2, [pc, #160]	; (32e8c <nrfx_gpiote_output_configure+0xe4>)
   32dec:	f104 0108 	add.w	r1, r4, #8
   32df0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   32df4:	f043 0303 	orr.w	r3, r3, #3
   32df8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   32dfc:	b915      	cbnz	r5, 32e04 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   32dfe:	4824      	ldr	r0, [pc, #144]	; (32e90 <nrfx_gpiote_output_configure+0xe8>)
}
   32e00:	b005      	add	sp, #20
   32e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   32e04:	4620      	mov	r0, r4
   32e06:	f7ff fe75 	bl	32af4 <pin_is_output>
        if (pin_is_input(pin))
   32e0a:	2800      	cmp	r0, #0
   32e0c:	d03b      	beq.n	32e86 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   32e0e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   32e12:	2300      	movs	r3, #0
   32e14:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   32e16:	4e1d      	ldr	r6, [pc, #116]	; (32e8c <nrfx_gpiote_output_configure+0xe4>)
   32e18:	f104 0708 	add.w	r7, r4, #8
   32e1c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   32e20:	0089      	lsls	r1, r1, #2
   32e22:	f020 0020 	bic.w	r0, r0, #32
   32e26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   32e2a:	04c0      	lsls	r0, r0, #19
   32e2c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   32e30:	0cc0      	lsrs	r0, r0, #19
   32e32:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   32e36:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   32e3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   32e3e:	786a      	ldrb	r2, [r5, #1]
   32e40:	2a00      	cmp	r2, #0
   32e42:	d0dc      	beq.n	32dfe <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   32e44:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   32e48:	78ad      	ldrb	r5, [r5, #2]
   32e4a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   32e4e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   32e52:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32e56:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   32e5a:	0223      	lsls	r3, r4, #8
   32e5c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   32e60:	0412      	lsls	r2, r2, #16
   32e62:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32e66:	ea43 030e 	orr.w	r3, r3, lr
   32e6a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   32e6c:	052a      	lsls	r2, r5, #20
   32e6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   32e72:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32e76:	4313      	orrs	r3, r2
   32e78:	f040 0020 	orr.w	r0, r0, #32
   32e7c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   32e80:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   32e84:	e7bb      	b.n	32dfe <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   32e86:	4803      	ldr	r0, [pc, #12]	; (32e94 <nrfx_gpiote_output_configure+0xec>)
   32e88:	e7ba      	b.n	32e00 <nrfx_gpiote_output_configure+0x58>
   32e8a:	bf00      	nop
   32e8c:	20014704 	.word	0x20014704
   32e90:	0bad0000 	.word	0x0bad0000
   32e94:	0bad0004 	.word	0x0bad0004

00032e98 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   32e98:	4b01      	ldr	r3, [pc, #4]	; (32ea0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   32e9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   32e9e:	4770      	bx	lr
   32ea0:	20014704 	.word	0x20014704

00032ea4 <nrfx_gpiote_channel_get>:
{
   32ea4:	b538      	push	{r3, r4, r5, lr}
   32ea6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   32ea8:	460d      	mov	r5, r1
   32eaa:	b951      	cbnz	r1, 32ec2 <nrfx_gpiote_channel_get+0x1e>
   32eac:	490c      	ldr	r1, [pc, #48]	; (32ee0 <nrfx_gpiote_channel_get+0x3c>)
   32eae:	480d      	ldr	r0, [pc, #52]	; (32ee4 <nrfx_gpiote_channel_get+0x40>)
   32eb0:	f240 2235 	movw	r2, #565	; 0x235
   32eb4:	f00a f967 	bl	3d186 <assert_print>
   32eb8:	f240 2135 	movw	r1, #565	; 0x235
   32ebc:	4808      	ldr	r0, [pc, #32]	; (32ee0 <nrfx_gpiote_channel_get+0x3c>)
   32ebe:	f00a f95b 	bl	3d178 <assert_post_action>
    if (pin_in_use_by_te(pin))
   32ec2:	4620      	mov	r0, r4
   32ec4:	f7ff fe00 	bl	32ac8 <pin_in_use_by_te>
   32ec8:	b138      	cbz	r0, 32eda <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32eca:	4b07      	ldr	r3, [pc, #28]	; (32ee8 <nrfx_gpiote_channel_get+0x44>)
   32ecc:	3408      	adds	r4, #8
   32ece:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
        return NRFX_SUCCESS;
   32ed2:	4806      	ldr	r0, [pc, #24]	; (32eec <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32ed4:	0b5b      	lsrs	r3, r3, #13
   32ed6:	702b      	strb	r3, [r5, #0]
}
   32ed8:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   32eda:	4805      	ldr	r0, [pc, #20]	; (32ef0 <nrfx_gpiote_channel_get+0x4c>)
   32edc:	e7fc      	b.n	32ed8 <nrfx_gpiote_channel_get+0x34>
   32ede:	bf00      	nop
   32ee0:	0004c179 	.word	0x0004c179
   32ee4:	0004494f 	.word	0x0004494f
   32ee8:	20014704 	.word	0x20014704
   32eec:	0bad0000 	.word	0x0bad0000
   32ef0:	0bad0004 	.word	0x0bad0004

00032ef4 <nrfx_gpiote_init>:
{
   32ef4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   32ef6:	4c0f      	ldr	r4, [pc, #60]	; (32f34 <nrfx_gpiote_init+0x40>)
   32ef8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   32efc:	b9bd      	cbnz	r5, 32f2e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   32efe:	2240      	movs	r2, #64	; 0x40
   32f00:	4629      	mov	r1, r5
   32f02:	f104 0010 	add.w	r0, r4, #16
   32f06:	f00e fe2b 	bl	41b60 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   32f0a:	2031      	movs	r0, #49	; 0x31
   32f0c:	f7f0 f8a6 	bl	2305c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32f10:	4b09      	ldr	r3, [pc, #36]	; (32f38 <nrfx_gpiote_init+0x44>)
    return err_code;
   32f12:	480a      	ldr	r0, [pc, #40]	; (32f3c <nrfx_gpiote_init+0x48>)
   32f14:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   32f18:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   32f1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   32f20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32f24:	2301      	movs	r3, #1
   32f26:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   32f2a:	6563      	str	r3, [r4, #84]	; 0x54
}
   32f2c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   32f2e:	4804      	ldr	r0, [pc, #16]	; (32f40 <nrfx_gpiote_init+0x4c>)
   32f30:	e7fc      	b.n	32f2c <nrfx_gpiote_init+0x38>
   32f32:	bf00      	nop
   32f34:	20014704 	.word	0x20014704
   32f38:	40031000 	.word	0x40031000
   32f3c:	0bad0000 	.word	0x0bad0000
   32f40:	0bad0005 	.word	0x0bad0005

00032f44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   32f44:	4b03      	ldr	r3, [pc, #12]	; (32f54 <nrfx_gpiote_is_init+0x10>)
   32f46:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   32f4a:	3800      	subs	r0, #0
   32f4c:	bf18      	it	ne
   32f4e:	2001      	movne	r0, #1
   32f50:	4770      	bx	lr
   32f52:	bf00      	nop
   32f54:	20014704 	.word	0x20014704

00032f58 <nrfx_gpiote_channel_free>:
{
   32f58:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   32f5a:	4801      	ldr	r0, [pc, #4]	; (32f60 <nrfx_gpiote_channel_free+0x8>)
   32f5c:	f7ff bc32 	b.w	327c4 <nrfx_flag32_free>
   32f60:	20014754 	.word	0x20014754

00032f64 <nrfx_gpiote_channel_alloc>:
{
   32f64:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   32f66:	4801      	ldr	r0, [pc, #4]	; (32f6c <nrfx_gpiote_channel_alloc+0x8>)
   32f68:	f7ff bc0a 	b.w	32780 <nrfx_flag32_alloc>
   32f6c:	20014754 	.word	0x20014754

00032f70 <nrfx_gpiote_trigger_enable>:
{
   32f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32f72:	4604      	mov	r4, r0
   32f74:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   32f76:	f7ff fdb1 	bl	32adc <pin_has_trigger>
   32f7a:	b950      	cbnz	r0, 32f92 <nrfx_gpiote_trigger_enable+0x22>
   32f7c:	492e      	ldr	r1, [pc, #184]	; (33038 <nrfx_gpiote_trigger_enable+0xc8>)
   32f7e:	482f      	ldr	r0, [pc, #188]	; (3303c <nrfx_gpiote_trigger_enable+0xcc>)
   32f80:	f240 32df 	movw	r2, #991	; 0x3df
   32f84:	f00a f8ff 	bl	3d186 <assert_print>
   32f88:	f240 31df 	movw	r1, #991	; 0x3df
   32f8c:	482a      	ldr	r0, [pc, #168]	; (33038 <nrfx_gpiote_trigger_enable+0xc8>)
   32f8e:	f00a f8f3 	bl	3d178 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32f92:	4620      	mov	r0, r4
   32f94:	f7ff fd98 	bl	32ac8 <pin_in_use_by_te>
   32f98:	4e29      	ldr	r6, [pc, #164]	; (33040 <nrfx_gpiote_trigger_enable+0xd0>)
   32f9a:	f104 0708 	add.w	r7, r4, #8
   32f9e:	b318      	cbz	r0, 32fe8 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   32fa0:	4620      	mov	r0, r4
   32fa2:	f7ff fda7 	bl	32af4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32fa6:	4602      	mov	r2, r0
   32fa8:	b9f0      	cbnz	r0, 32fe8 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32faa:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   32fae:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   32fb0:	4608      	mov	r0, r1
   32fb2:	f00d faaf 	bl	40514 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   32fb6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   32fba:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32fbe:	601a      	str	r2, [r3, #0]
   32fc0:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   32fc2:	008b      	lsls	r3, r1, #2
   32fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32fc8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   32fcc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   32fd0:	f042 0201 	orr.w	r2, r2, #1
   32fd4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   32fd8:	b125      	cbz	r5, 32fe4 <nrfx_gpiote_trigger_enable+0x74>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   32fda:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   32fdc:	4a19      	ldr	r2, [pc, #100]	; (33044 <nrfx_gpiote_trigger_enable+0xd4>)
   32fde:	408b      	lsls	r3, r1
   32fe0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   32fe4:	b003      	add	sp, #12
   32fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   32fe8:	b955      	cbnz	r5, 33000 <nrfx_gpiote_trigger_enable+0x90>
   32fea:	4913      	ldr	r1, [pc, #76]	; (33038 <nrfx_gpiote_trigger_enable+0xc8>)
   32fec:	4813      	ldr	r0, [pc, #76]	; (3303c <nrfx_gpiote_trigger_enable+0xcc>)
   32fee:	f240 32ee 	movw	r2, #1006	; 0x3ee
   32ff2:	f00a f8c8 	bl	3d186 <assert_print>
   32ff6:	f240 31ee 	movw	r1, #1006	; 0x3ee
   32ffa:	480f      	ldr	r0, [pc, #60]	; (33038 <nrfx_gpiote_trigger_enable+0xc8>)
   32ffc:	f00a f8bc 	bl	3d178 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   33000:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   33004:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   33008:	2b04      	cmp	r3, #4
   3300a:	d011      	beq.n	33030 <nrfx_gpiote_trigger_enable+0xc0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   3300c:	2b05      	cmp	r3, #5
   3300e:	d011      	beq.n	33034 <nrfx_gpiote_trigger_enable+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33010:	a801      	add	r0, sp, #4
   33012:	9401      	str	r4, [sp, #4]
   33014:	f7ff fdf2 	bl	32bfc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33018:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   3301a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3301c:	40d9      	lsrs	r1, r3
   3301e:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   33022:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   33024:	4620      	mov	r0, r4
}
   33026:	b003      	add	sp, #12
   33028:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3302c:	f00d bac1 	b.w	405b2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   33030:	2103      	movs	r1, #3
   33032:	e7f7      	b.n	33024 <nrfx_gpiote_trigger_enable+0xb4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   33034:	2102      	movs	r1, #2
   33036:	e7f5      	b.n	33024 <nrfx_gpiote_trigger_enable+0xb4>
   33038:	0004c179 	.word	0x0004c179
   3303c:	0004494f 	.word	0x0004494f
   33040:	20014704 	.word	0x20014704
   33044:	40031000 	.word	0x40031000

00033048 <nrfx_gpiote_trigger_disable>:
{
   33048:	b508      	push	{r3, lr}
   3304a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3304c:	f7ff fd3c 	bl	32ac8 <pin_in_use_by_te>
   33050:	b1c8      	cbz	r0, 33086 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   33052:	4610      	mov	r0, r2
   33054:	f7ff fd4e 	bl	32af4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   33058:	b9a8      	cbnz	r0, 33086 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3305a:	4b0e      	ldr	r3, [pc, #56]	; (33094 <nrfx_gpiote_trigger_disable+0x4c>)
   3305c:	3208      	adds	r2, #8
   3305e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   33062:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   33064:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   33066:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   33068:	490b      	ldr	r1, [pc, #44]	; (33098 <nrfx_gpiote_trigger_disable+0x50>)
   3306a:	009b      	lsls	r3, r3, #2
   3306c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   33070:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   33074:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   33078:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3307c:	f022 0203 	bic.w	r2, r2, #3
   33080:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   33084:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   33086:	2100      	movs	r1, #0
}
   33088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3308c:	4610      	mov	r0, r2
   3308e:	f00d ba90 	b.w	405b2 <nrf_gpio_cfg_sense_set>
   33092:	bf00      	nop
   33094:	20014704 	.word	0x20014704
   33098:	40031000 	.word	0x40031000

0003309c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3309c:	4b0d      	ldr	r3, [pc, #52]	; (330d4 <nrfx_gpiote_pin_uninit+0x38>)
   3309e:	f100 0208 	add.w	r2, r0, #8
   330a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   330a6:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   330a8:	07db      	lsls	r3, r3, #31
{
   330aa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   330ac:	d510      	bpl.n	330d0 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   330ae:	f7ff ffcb 	bl	33048 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   330b2:	4620      	mov	r0, r4
   330b4:	f7ff fd84 	bl	32bc0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   330b8:	a801      	add	r0, sp, #4
   330ba:	9401      	str	r4, [sp, #4]
   330bc:	f7ff fd9e 	bl	32bfc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   330c0:	2202      	movs	r2, #2
   330c2:	9b01      	ldr	r3, [sp, #4]
   330c4:	3380      	adds	r3, #128	; 0x80
   330c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   330ca:	4803      	ldr	r0, [pc, #12]	; (330d8 <nrfx_gpiote_pin_uninit+0x3c>)
}
   330cc:	b002      	add	sp, #8
   330ce:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   330d0:	4802      	ldr	r0, [pc, #8]	; (330dc <nrfx_gpiote_pin_uninit+0x40>)
   330d2:	e7fb      	b.n	330cc <nrfx_gpiote_pin_uninit+0x30>
   330d4:	20014704 	.word	0x20014704
   330d8:	0bad0000 	.word	0x0bad0000
   330dc:	0bad0004 	.word	0x0bad0004

000330e0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   330e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   330e4:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   330e6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   330e8:	4634      	mov	r4, r6
{
   330ea:	4b53      	ldr	r3, [pc, #332]	; (33238 <nrfx_gpiote_irq_handler+0x158>)
    return p_reg->INTENSET & mask;
   330ec:	4853      	ldr	r0, [pc, #332]	; (3323c <nrfx_gpiote_irq_handler+0x15c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   330ee:	4954      	ldr	r1, [pc, #336]	; (33240 <nrfx_gpiote_irq_handler+0x160>)
{
   330f0:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   330f2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   330f4:	b135      	cbz	r5, 33104 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   330f6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   330fa:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   330fc:	bf1e      	ittt	ne
   330fe:	601c      	strne	r4, [r3, #0]
   33100:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   33102:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   33104:	3304      	adds	r3, #4
   33106:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   33108:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3310c:	d1f1      	bne.n	330f2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3310e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 3323c <nrfx_gpiote_irq_handler+0x15c>
   33112:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   33116:	b183      	cbz	r3, 3313a <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   33118:	4f4a      	ldr	r7, [pc, #296]	; (33244 <nrfx_gpiote_irq_handler+0x164>)
   3311a:	6a3b      	ldr	r3, [r7, #32]
   3311c:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   3311e:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   33120:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   33124:	9c02      	ldr	r4, [sp, #8]
   33126:	b954      	cbnz	r4, 3313e <nrfx_gpiote_irq_handler+0x5e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   33128:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   3312c:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   33130:	6a3b      	ldr	r3, [r7, #32]
   33132:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   33134:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   33136:	2b00      	cmp	r3, #0
   33138:	d1f2      	bne.n	33120 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   3313a:	2401      	movs	r4, #1
   3313c:	e076      	b.n	3322c <nrfx_gpiote_irq_handler+0x14c>
                uint32_t pin = NRF_CTZ(latch[i]);
   3313e:	fa94 f4a4 	rbit	r4, r4
   33142:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   33146:	4a40      	ldr	r2, [pc, #256]	; (33248 <nrfx_gpiote_irq_handler+0x168>)
   33148:	f104 0308 	add.w	r3, r4, #8
   3314c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   33150:	08e5      	lsrs	r5, r4, #3
   33152:	089a      	lsrs	r2, r3, #2
   33154:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
   33158:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   3315c:	ab02      	add	r3, sp, #8
   3315e:	fa09 f001 	lsl.w	r0, r9, r1
   33162:	5d59      	ldrb	r1, [r3, r5]
   33164:	9201      	str	r2, [sp, #4]
   33166:	ea21 0100 	bic.w	r1, r1, r0
   3316a:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3316c:	a803      	add	r0, sp, #12
   3316e:	9403      	str	r4, [sp, #12]
   33170:	f7ff fd44 	bl	32bfc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   33174:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
   33176:	9a01      	ldr	r2, [sp, #4]
   33178:	3180      	adds	r1, #128	; 0x80
   3317a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   3317e:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   33180:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   33182:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   33186:	d521      	bpl.n	331cc <nrfx_gpiote_irq_handler+0xec>
        call_handler(pin, trigger);
   33188:	4659      	mov	r1, fp
   3318a:	4620      	mov	r0, r4
   3318c:	f7ff fcbc 	bl	32b08 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33190:	a803      	add	r0, sp, #12
   33192:	9403      	str	r4, [sp, #12]
   33194:	f7ff fd32 	bl	32bfc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   33198:	9b03      	ldr	r3, [sp, #12]
   3319a:	b2ed      	uxtb	r5, r5
   3319c:	3380      	adds	r3, #128	; 0x80
   3319e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   331a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   331a6:	429d      	cmp	r5, r3
   331a8:	d107      	bne.n	331ba <nrfx_gpiote_irq_handler+0xda>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   331aa:	2100      	movs	r1, #0
   331ac:	4620      	mov	r0, r4
   331ae:	f00d fa00 	bl	405b2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   331b2:	4629      	mov	r1, r5
   331b4:	4620      	mov	r0, r4
   331b6:	f00d f9fc 	bl	405b2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   331ba:	a803      	add	r0, sp, #12
   331bc:	9403      	str	r4, [sp, #12]
   331be:	f7ff fd1d 	bl	32bfc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   331c2:	9b03      	ldr	r3, [sp, #12]
   331c4:	fa09 f303 	lsl.w	r3, r9, r3
   331c8:	6203      	str	r3, [r0, #32]
   331ca:	e7ab      	b.n	33124 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   331cc:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   331ce:	bf0c      	ite	eq
   331d0:	2103      	moveq	r1, #3
   331d2:	2102      	movne	r1, #2
   331d4:	4620      	mov	r0, r4
   331d6:	f00d f9ec 	bl	405b2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   331da:	f1bb 0f03 	cmp.w	fp, #3
   331de:	d004      	beq.n	331ea <nrfx_gpiote_irq_handler+0x10a>
   331e0:	2d02      	cmp	r5, #2
   331e2:	d107      	bne.n	331f4 <nrfx_gpiote_irq_handler+0x114>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   331e4:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   331e8:	d1e7      	bne.n	331ba <nrfx_gpiote_irq_handler+0xda>
            call_handler(pin, trigger);
   331ea:	4651      	mov	r1, sl
   331ec:	4620      	mov	r0, r4
   331ee:	f7ff fc8b 	bl	32b08 <call_handler>
   331f2:	e7e2      	b.n	331ba <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   331f4:	2d03      	cmp	r5, #3
   331f6:	d1e0      	bne.n	331ba <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   331f8:	f1bb 0f02 	cmp.w	fp, #2
   331fc:	e7f4      	b.n	331e8 <nrfx_gpiote_irq_handler+0x108>
        uint32_t ch = NRF_CTZ(mask);
   331fe:	fa96 f3a6 	rbit	r3, r6
   33202:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   33206:	fa04 f203 	lsl.w	r2, r4, r3
   3320a:	009b      	lsls	r3, r3, #2
   3320c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   33210:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   33214:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   33218:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3321c:	f3c0 2004 	ubfx	r0, r0, #8, #5
   33220:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   33224:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   33228:	f7ff fc6e 	bl	32b08 <call_handler>
    while (mask)
   3322c:	2e00      	cmp	r6, #0
   3322e:	d1e6      	bne.n	331fe <nrfx_gpiote_irq_handler+0x11e>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   33230:	b005      	add	sp, #20
   33232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33236:	bf00      	nop
   33238:	40031100 	.word	0x40031100
   3323c:	40031000 	.word	0x40031000
   33240:	40031120 	.word	0x40031120
   33244:	40842500 	.word	0x40842500
   33248:	20014704 	.word	0x20014704

0003324c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   3324c:	b570      	push	{r4, r5, r6, lr}
   3324e:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   33250:	460d      	mov	r5, r1
   33252:	b941      	cbnz	r1, 33266 <nrfx_ipc_init+0x1a>
   33254:	490b      	ldr	r1, [pc, #44]	; (33284 <nrfx_ipc_init+0x38>)
   33256:	480c      	ldr	r0, [pc, #48]	; (33288 <nrfx_ipc_init+0x3c>)
   33258:	2234      	movs	r2, #52	; 0x34
   3325a:	f009 ff94 	bl	3d186 <assert_print>
   3325e:	2134      	movs	r1, #52	; 0x34
   33260:	4808      	ldr	r0, [pc, #32]	; (33284 <nrfx_ipc_init+0x38>)
   33262:	f009 ff89 	bl	3d178 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   33266:	4c09      	ldr	r4, [pc, #36]	; (3328c <nrfx_ipc_init+0x40>)
   33268:	7923      	ldrb	r3, [r4, #4]
   3326a:	b943      	cbnz	r3, 3327e <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   3326c:	202a      	movs	r0, #42	; 0x2a
   3326e:	f7ef fef5 	bl	2305c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   33272:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   33274:	4806      	ldr	r0, [pc, #24]	; (33290 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   33276:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   33278:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   3327a:	60a6      	str	r6, [r4, #8]
}
   3327c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   3327e:	4805      	ldr	r0, [pc, #20]	; (33294 <nrfx_ipc_init+0x48>)
   33280:	e7fc      	b.n	3327c <nrfx_ipc_init+0x30>
   33282:	bf00      	nop
   33284:	0004c1b7 	.word	0x0004c1b7
   33288:	0004494f 	.word	0x0004494f
   3328c:	2001a440 	.word	0x2001a440
   33290:	0bad0000 	.word	0x0bad0000
   33294:	0bad000c 	.word	0x0bad000c

00033298 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   33298:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   3329a:	4604      	mov	r4, r0
   3329c:	b940      	cbnz	r0, 332b0 <nrfx_ipc_config_load+0x18>
   3329e:	4919      	ldr	r1, [pc, #100]	; (33304 <nrfx_ipc_config_load+0x6c>)
   332a0:	4819      	ldr	r0, [pc, #100]	; (33308 <nrfx_ipc_config_load+0x70>)
   332a2:	2246      	movs	r2, #70	; 0x46
   332a4:	f009 ff6f 	bl	3d186 <assert_print>
   332a8:	2146      	movs	r1, #70	; 0x46
   332aa:	4816      	ldr	r0, [pc, #88]	; (33304 <nrfx_ipc_config_load+0x6c>)
   332ac:	f009 ff64 	bl	3d178 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   332b0:	4b16      	ldr	r3, [pc, #88]	; (3330c <nrfx_ipc_config_load+0x74>)
   332b2:	791b      	ldrb	r3, [r3, #4]
   332b4:	2b01      	cmp	r3, #1
   332b6:	d008      	beq.n	332ca <nrfx_ipc_config_load+0x32>
   332b8:	4912      	ldr	r1, [pc, #72]	; (33304 <nrfx_ipc_config_load+0x6c>)
   332ba:	4813      	ldr	r0, [pc, #76]	; (33308 <nrfx_ipc_config_load+0x70>)
   332bc:	2247      	movs	r2, #71	; 0x47
   332be:	f009 ff62 	bl	3d186 <assert_print>
   332c2:	2147      	movs	r1, #71	; 0x47
   332c4:	480f      	ldr	r0, [pc, #60]	; (33304 <nrfx_ipc_config_load+0x6c>)
   332c6:	f009 ff57 	bl	3d178 <assert_post_action>
{
   332ca:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   332cc:	4a10      	ldr	r2, [pc, #64]	; (33310 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   332ce:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   332d2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   332d6:	3301      	adds	r3, #1
   332d8:	2b08      	cmp	r3, #8
   332da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   332de:	d1f6      	bne.n	332ce <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   332e0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   332e2:	4a0b      	ldr	r2, [pc, #44]	; (33310 <nrfx_ipc_config_load+0x78>)
   332e4:	f104 0120 	add.w	r1, r4, #32
   332e8:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   332ec:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   332f0:	3301      	adds	r3, #1
   332f2:	2b08      	cmp	r3, #8
   332f4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   332f8:	d1f6      	bne.n	332e8 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   332fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   332fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   33300:	bd38      	pop	{r3, r4, r5, pc}
   33302:	bf00      	nop
   33304:	0004c1b7 	.word	0x0004c1b7
   33308:	0004494f 	.word	0x0004494f
   3330c:	2001a440 	.word	0x2001a440
   33310:	4002a000 	.word	0x4002a000

00033314 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   33314:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   33316:	4c1a      	ldr	r4, [pc, #104]	; (33380 <nrfx_ipc_uninit+0x6c>)
   33318:	7923      	ldrb	r3, [r4, #4]
   3331a:	2b01      	cmp	r3, #1
   3331c:	d008      	beq.n	33330 <nrfx_ipc_uninit+0x1c>
   3331e:	4919      	ldr	r1, [pc, #100]	; (33384 <nrfx_ipc_uninit+0x70>)
   33320:	4819      	ldr	r0, [pc, #100]	; (33388 <nrfx_ipc_uninit+0x74>)
   33322:	2259      	movs	r2, #89	; 0x59
   33324:	f009 ff2f 	bl	3d186 <assert_print>
   33328:	2159      	movs	r1, #89	; 0x59
   3332a:	4816      	ldr	r0, [pc, #88]	; (33384 <nrfx_ipc_uninit+0x70>)
   3332c:	f009 ff24 	bl	3d178 <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   33330:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   33332:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   33336:	4a15      	ldr	r2, [pc, #84]	; (3338c <nrfx_ipc_uninit+0x78>)
   33338:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   3333c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   33340:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   33344:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   33348:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   3334c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   33350:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   33354:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   33358:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   3335c:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   33360:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   33364:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   33368:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   3336c:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   33370:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   33374:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   33378:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   3337c:	7123      	strb	r3, [r4, #4]
}
   3337e:	bd10      	pop	{r4, pc}
   33380:	2001a440 	.word	0x2001a440
   33384:	0004c1b7 	.word	0x0004c1b7
   33388:	0004494f 	.word	0x0004494f
   3338c:	4002a000 	.word	0x4002a000

00033390 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   33390:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   33392:	4b0a      	ldr	r3, [pc, #40]	; (333bc <nrfx_ipc_receive_event_enable+0x2c>)
{
   33394:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   33396:	791b      	ldrb	r3, [r3, #4]
   33398:	2b01      	cmp	r3, #1
   3339a:	d008      	beq.n	333ae <nrfx_ipc_receive_event_enable+0x1e>
   3339c:	4908      	ldr	r1, [pc, #32]	; (333c0 <nrfx_ipc_receive_event_enable+0x30>)
   3339e:	4809      	ldr	r0, [pc, #36]	; (333c4 <nrfx_ipc_receive_event_enable+0x34>)
   333a0:	226c      	movs	r2, #108	; 0x6c
   333a2:	f009 fef0 	bl	3d186 <assert_print>
   333a6:	216c      	movs	r1, #108	; 0x6c
   333a8:	4805      	ldr	r0, [pc, #20]	; (333c0 <nrfx_ipc_receive_event_enable+0x30>)
   333aa:	f009 fee5 	bl	3d178 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   333ae:	2301      	movs	r3, #1
   333b0:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
   333b4:	4b04      	ldr	r3, [pc, #16]	; (333c8 <nrfx_ipc_receive_event_enable+0x38>)
   333b6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   333ba:	bd10      	pop	{r4, pc}
   333bc:	2001a440 	.word	0x2001a440
   333c0:	0004c1b7 	.word	0x0004c1b7
   333c4:	0004494f 	.word	0x0004494f
   333c8:	4002a000 	.word	0x4002a000

000333cc <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   333cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   333ce:	4b0a      	ldr	r3, [pc, #40]	; (333f8 <nrfx_ipc_receive_event_disable+0x2c>)
{
   333d0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   333d2:	791b      	ldrb	r3, [r3, #4]
   333d4:	2b01      	cmp	r3, #1
   333d6:	d008      	beq.n	333ea <nrfx_ipc_receive_event_disable+0x1e>
   333d8:	4908      	ldr	r1, [pc, #32]	; (333fc <nrfx_ipc_receive_event_disable+0x30>)
   333da:	4809      	ldr	r0, [pc, #36]	; (33400 <nrfx_ipc_receive_event_disable+0x34>)
   333dc:	2272      	movs	r2, #114	; 0x72
   333de:	f009 fed2 	bl	3d186 <assert_print>
   333e2:	2172      	movs	r1, #114	; 0x72
   333e4:	4805      	ldr	r0, [pc, #20]	; (333fc <nrfx_ipc_receive_event_disable+0x30>)
   333e6:	f009 fec7 	bl	3d178 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   333ea:	2301      	movs	r3, #1
   333ec:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   333f0:	4b04      	ldr	r3, [pc, #16]	; (33404 <nrfx_ipc_receive_event_disable+0x38>)
   333f2:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   333f6:	bd10      	pop	{r4, pc}
   333f8:	2001a440 	.word	0x2001a440
   333fc:	0004c1b7 	.word	0x0004c1b7
   33400:	0004494f 	.word	0x0004494f
   33404:	4002a000 	.word	0x4002a000

00033408 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   33408:	4b16      	ldr	r3, [pc, #88]	; (33464 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   3340a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3340e:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   33412:	f04f 0801 	mov.w	r8, #1
    uint32_t bitmask = events_map;
   33416:	4635      	mov	r5, r6
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   33418:	4f13      	ldr	r7, [pc, #76]	; (33468 <nrfx_ipc_irq_handler+0x60>)
   3341a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 33474 <nrfx_ipc_irq_handler+0x6c>
    while (bitmask)
   3341e:	b935      	cbnz	r5, 3342e <nrfx_ipc_irq_handler+0x26>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   33420:	4b12      	ldr	r3, [pc, #72]	; (3346c <nrfx_ipc_irq_handler+0x64>)
   33422:	4630      	mov	r0, r6
}
   33424:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   33428:	681a      	ldr	r2, [r3, #0]
   3342a:	6899      	ldr	r1, [r3, #8]
   3342c:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   3342e:	fa95 f4a5 	rbit	r4, r5
   33432:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   33436:	fa08 f304 	lsl.w	r3, r8, r4
   3343a:	2c07      	cmp	r4, #7
   3343c:	ea25 0503 	bic.w	r5, r5, r3
   33440:	dd0a      	ble.n	33458 <nrfx_ipc_irq_handler+0x50>
   33442:	4639      	mov	r1, r7
   33444:	4648      	mov	r0, r9
   33446:	f240 12e7 	movw	r2, #487	; 0x1e7
   3344a:	f009 fe9c 	bl	3d186 <assert_print>
   3344e:	f240 11e7 	movw	r1, #487	; 0x1e7
   33452:	4638      	mov	r0, r7
   33454:	f009 fe90 	bl	3d178 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33458:	2200      	movs	r2, #0
   3345a:	4b05      	ldr	r3, [pc, #20]	; (33470 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   3345c:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3345e:	511a      	str	r2, [r3, r4]
}
   33460:	e7dd      	b.n	3341e <nrfx_ipc_irq_handler+0x16>
   33462:	bf00      	nop
   33464:	4002a000 	.word	0x4002a000
   33468:	0004c1f2 	.word	0x0004c1f2
   3346c:	2001a440 	.word	0x2001a440
   33470:	4002a100 	.word	0x4002a100
   33474:	0004494f 	.word	0x0004494f

00033478 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   33478:	4a04      	ldr	r2, [pc, #16]	; (3348c <nvmc_word_write+0x14>)
   3347a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   3347e:	07db      	lsls	r3, r3, #31
   33480:	d5fb      	bpl.n	3347a <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   33482:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   33484:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   33488:	4770      	bx	lr
   3348a:	bf00      	nop
   3348c:	40039000 	.word	0x40039000

00033490 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   33490:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   33494:	b510      	push	{r4, lr}
   33496:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   33498:	d30a      	bcc.n	334b0 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   3349a:	4910      	ldr	r1, [pc, #64]	; (334dc <nrfx_nvmc_page_erase+0x4c>)
   3349c:	4810      	ldr	r0, [pc, #64]	; (334e0 <nrfx_nvmc_page_erase+0x50>)
   3349e:	f44f 7283 	mov.w	r2, #262	; 0x106
   334a2:	f009 fe70 	bl	3d186 <assert_print>
   334a6:	f44f 7183 	mov.w	r1, #262	; 0x106
   334aa:	480c      	ldr	r0, [pc, #48]	; (334dc <nrfx_nvmc_page_erase+0x4c>)
   334ac:	f009 fe64 	bl	3d178 <assert_post_action>
    return !(addr % flash_page_size_get());
   334b0:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   334b4:	b97b      	cbnz	r3, 334d6 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   334b6:	2202      	movs	r2, #2
   334b8:	4b0a      	ldr	r3, [pc, #40]	; (334e4 <nrfx_nvmc_page_erase+0x54>)
   334ba:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   334be:	f04f 32ff 	mov.w	r2, #4294967295
   334c2:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   334c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   334c8:	07d2      	lsls	r2, r2, #31
   334ca:	d5fb      	bpl.n	334c4 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   334cc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   334ce:	4806      	ldr	r0, [pc, #24]	; (334e8 <nrfx_nvmc_page_erase+0x58>)
   334d0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   334d4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   334d6:	4805      	ldr	r0, [pc, #20]	; (334ec <nrfx_nvmc_page_erase+0x5c>)
   334d8:	e7fc      	b.n	334d4 <nrfx_nvmc_page_erase+0x44>
   334da:	bf00      	nop
   334dc:	0004c224 	.word	0x0004c224
   334e0:	0004494f 	.word	0x0004494f
   334e4:	40039000 	.word	0x40039000
   334e8:	0bad0000 	.word	0x0bad0000
   334ec:	0bad000a 	.word	0x0bad000a

000334f0 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   334f0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   334f4:	b570      	push	{r4, r5, r6, lr}
   334f6:	4604      	mov	r4, r0
   334f8:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   334fa:	d30a      	bcc.n	33512 <nrfx_nvmc_word_write+0x22>
    NRFX_ASSERT(is_valid_address(addr, true));
   334fc:	4911      	ldr	r1, [pc, #68]	; (33544 <nrfx_nvmc_word_write+0x54>)
   334fe:	4812      	ldr	r0, [pc, #72]	; (33548 <nrfx_nvmc_word_write+0x58>)
   33500:	f44f 72ca 	mov.w	r2, #404	; 0x194
   33504:	f009 fe3f 	bl	3d186 <assert_print>
   33508:	f44f 71ca 	mov.w	r1, #404	; 0x194
   3350c:	480d      	ldr	r0, [pc, #52]	; (33544 <nrfx_nvmc_word_write+0x54>)
   3350e:	f009 fe33 	bl	3d178 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   33512:	07a3      	lsls	r3, r4, #30
   33514:	d00a      	beq.n	3352c <nrfx_nvmc_word_write+0x3c>
   33516:	490b      	ldr	r1, [pc, #44]	; (33544 <nrfx_nvmc_word_write+0x54>)
   33518:	480b      	ldr	r0, [pc, #44]	; (33548 <nrfx_nvmc_word_write+0x58>)
   3351a:	f240 1295 	movw	r2, #405	; 0x195
   3351e:	f009 fe32 	bl	3d186 <assert_print>
   33522:	f240 1195 	movw	r1, #405	; 0x195
   33526:	4807      	ldr	r0, [pc, #28]	; (33544 <nrfx_nvmc_word_write+0x54>)
   33528:	f009 fe26 	bl	3d178 <assert_post_action>
   3352c:	2301      	movs	r3, #1
   3352e:	4e07      	ldr	r6, [pc, #28]	; (3354c <nrfx_nvmc_word_write+0x5c>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   33530:	4629      	mov	r1, r5
   33532:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   33536:	4620      	mov	r0, r4
   33538:	f7ff ff9e 	bl	33478 <nvmc_word_write>
   3353c:	2300      	movs	r3, #0
   3353e:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   33542:	bd70      	pop	{r4, r5, r6, pc}
   33544:	0004c224 	.word	0x0004c224
   33548:	0004494f 	.word	0x0004494f
   3354c:	40039000 	.word	0x40039000

00033550 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33550:	6803      	ldr	r3, [r0, #0]
{
   33552:	b510      	push	{r4, lr}
    switch (port)
   33554:	095a      	lsrs	r2, r3, #5
   33556:	bf0c      	ite	eq
   33558:	f04f 32ff 	moveq.w	r2, #4294967295
   3355c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   3355e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   33562:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33566:	07db      	lsls	r3, r3, #31
{
   33568:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3356a:	d40a      	bmi.n	33582 <nrf_gpio_pin_port_decode+0x32>
   3356c:	490e      	ldr	r1, [pc, #56]	; (335a8 <nrf_gpio_pin_port_decode+0x58>)
   3356e:	480f      	ldr	r0, [pc, #60]	; (335ac <nrf_gpio_pin_port_decode+0x5c>)
   33570:	f240 2229 	movw	r2, #553	; 0x229
   33574:	f009 fe07 	bl	3d186 <assert_print>
   33578:	f240 2129 	movw	r1, #553	; 0x229
   3357c:	480a      	ldr	r0, [pc, #40]	; (335a8 <nrf_gpio_pin_port_decode+0x58>)
   3357e:	f009 fdfb 	bl	3d178 <assert_post_action>
    uint32_t pin_number = *p_pin;
   33582:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   33584:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33588:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   3358a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   3358c:	d00a      	beq.n	335a4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   3358e:	4906      	ldr	r1, [pc, #24]	; (335a8 <nrf_gpio_pin_port_decode+0x58>)
   33590:	4806      	ldr	r0, [pc, #24]	; (335ac <nrf_gpio_pin_port_decode+0x5c>)
   33592:	f240 222e 	movw	r2, #558	; 0x22e
   33596:	f009 fdf6 	bl	3d186 <assert_print>
   3359a:	f240 212e 	movw	r1, #558	; 0x22e
   3359e:	4802      	ldr	r0, [pc, #8]	; (335a8 <nrf_gpio_pin_port_decode+0x58>)
   335a0:	f009 fdea 	bl	3d178 <assert_post_action>
}
   335a4:	4802      	ldr	r0, [pc, #8]	; (335b0 <nrf_gpio_pin_port_decode+0x60>)
   335a6:	bd10      	pop	{r4, pc}
   335a8:	0004556d 	.word	0x0004556d
   335ac:	0004494f 	.word	0x0004494f
   335b0:	40842500 	.word	0x40842500

000335b4 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   335b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   335b8:	4606      	mov	r6, r0
   335ba:	4690      	mov	r8, r2
   335bc:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   335be:	460c      	mov	r4, r1
   335c0:	b951      	cbnz	r1, 335d8 <nrfx_twim_init+0x24>
   335c2:	492f      	ldr	r1, [pc, #188]	; (33680 <nrfx_twim_init+0xcc>)
   335c4:	482f      	ldr	r0, [pc, #188]	; (33684 <nrfx_twim_init+0xd0>)
   335c6:	f240 1215 	movw	r2, #277	; 0x115
   335ca:	f009 fddc 	bl	3d186 <assert_print>
   335ce:	f240 1115 	movw	r1, #277	; 0x115
   335d2:	482b      	ldr	r0, [pc, #172]	; (33680 <nrfx_twim_init+0xcc>)
   335d4:	f009 fdd0 	bl	3d178 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   335d8:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   335da:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   335de:	4d2a      	ldr	r5, [pc, #168]	; (33688 <nrfx_twim_init+0xd4>)
   335e0:	fb07 f70a 	mul.w	r7, r7, sl
   335e4:	19e9      	adds	r1, r5, r7
   335e6:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
   335ea:	2800      	cmp	r0, #0
   335ec:	d145      	bne.n	3367a <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   335ee:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   335f0:	f8d6 b000 	ldr.w	fp, [r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   335f4:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   335f8:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
   335fa:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
   335fc:	f845 8007 	str.w	r8, [r5, r7]
    p_cb->p_context       = p_context;
   33600:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
   33604:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
   33608:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   3360c:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   33610:	b1f3      	cbz	r3, 33650 <nrfx_twim_init+0x9c>
   33612:	7be3      	ldrb	r3, [r4, #15]
   33614:	b92b      	cbnz	r3, 33622 <nrfx_twim_init+0x6e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   33616:	e9d4 2300 	ldrd	r2, r3, [r4]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   3361a:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   3361e:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   33622:	68a3      	ldr	r3, [r4, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   33624:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524

    if (p_cb->handler)
   33628:	2334      	movs	r3, #52	; 0x34
   3362a:	fb03 f30a 	mul.w	r3, r3, sl
   3362e:	58eb      	ldr	r3, [r5, r3]
   33630:	b123      	cbz	r3, 3363c <nrfx_twim_init+0x88>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   33632:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   33634:	f340 3007 	sbfx	r0, r0, #12, #8
   33638:	f7ef fd10 	bl	2305c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3363c:	2334      	movs	r3, #52	; 0x34
   3363e:	fb03 550a 	mla	r5, r3, sl, r5
   33642:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   33644:	4811      	ldr	r0, [pc, #68]	; (3368c <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33646:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   3364a:	b003      	add	sp, #12
   3364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   33650:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33652:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   33654:	f240 670c 	movw	r7, #1548	; 0x60c
   33658:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3365a:	f7ff ff79 	bl	33550 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3365e:	9b01      	ldr	r3, [sp, #4]
   33660:	3380      	adds	r3, #128	; 0x80
   33662:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   33666:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33668:	a801      	add	r0, sp, #4
   3366a:	9301      	str	r3, [sp, #4]
   3366c:	f7ff ff70 	bl	33550 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33670:	9b01      	ldr	r3, [sp, #4]
   33672:	3380      	adds	r3, #128	; 0x80
   33674:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   33678:	e7cb      	b.n	33612 <nrfx_twim_init+0x5e>
        return err_code;
   3367a:	4805      	ldr	r0, [pc, #20]	; (33690 <nrfx_twim_init+0xdc>)
   3367c:	e7e5      	b.n	3364a <nrfx_twim_init+0x96>
   3367e:	bf00      	nop
   33680:	0004c260 	.word	0x0004c260
   33684:	0004494f 	.word	0x0004494f
   33688:	2001a44c 	.word	0x2001a44c
   3368c:	0bad0000 	.word	0x0bad0000
   33690:	0bad0005 	.word	0x0bad0005

00033694 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33694:	2334      	movs	r3, #52	; 0x34
{
   33696:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33698:	4c0f      	ldr	r4, [pc, #60]	; (336d8 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3369a:	7906      	ldrb	r6, [r0, #4]
{
   3369c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3369e:	fb03 4306 	mla	r3, r3, r6, r4
   336a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   336a6:	2b01      	cmp	r3, #1
   336a8:	d00a      	beq.n	336c0 <nrfx_twim_enable+0x2c>
   336aa:	490c      	ldr	r1, [pc, #48]	; (336dc <nrfx_twim_enable+0x48>)
   336ac:	480c      	ldr	r0, [pc, #48]	; (336e0 <nrfx_twim_enable+0x4c>)
   336ae:	f240 1279 	movw	r2, #377	; 0x179
   336b2:	f009 fd68 	bl	3d186 <assert_print>
   336b6:	f240 1179 	movw	r1, #377	; 0x179
   336ba:	4808      	ldr	r0, [pc, #32]	; (336dc <nrfx_twim_enable+0x48>)
   336bc:	f009 fd5c 	bl	3d178 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   336c0:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   336c2:	682b      	ldr	r3, [r5, #0]
   336c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   336c8:	2334      	movs	r3, #52	; 0x34
   336ca:	fb03 4406 	mla	r4, r3, r6, r4
   336ce:	2302      	movs	r3, #2
   336d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   336d4:	bd70      	pop	{r4, r5, r6, pc}
   336d6:	bf00      	nop
   336d8:	2001a44c 	.word	0x2001a44c
   336dc:	0004c260 	.word	0x0004c260
   336e0:	0004494f 	.word	0x0004494f

000336e4 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   336e4:	2234      	movs	r2, #52	; 0x34
{
   336e6:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   336e8:	4c14      	ldr	r4, [pc, #80]	; (3373c <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   336ea:	7906      	ldrb	r6, [r0, #4]
{
   336ec:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   336ee:	fb02 4206 	mla	r2, r2, r6, r4
   336f2:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
   336f6:	b953      	cbnz	r3, 3370e <nrfx_twim_disable+0x2a>
   336f8:	4911      	ldr	r1, [pc, #68]	; (33740 <nrfx_twim_disable+0x5c>)
   336fa:	4812      	ldr	r0, [pc, #72]	; (33744 <nrfx_twim_disable+0x60>)
   336fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
   33700:	f009 fd41 	bl	3d186 <assert_print>
   33704:	f44f 71c2 	mov.w	r1, #388	; 0x184
   33708:	480d      	ldr	r0, [pc, #52]	; (33740 <nrfx_twim_disable+0x5c>)
   3370a:	f009 fd35 	bl	3d178 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   3370e:	2334      	movs	r3, #52	; 0x34
   33710:	2100      	movs	r1, #0
   33712:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   33716:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
   33718:	480b      	ldr	r0, [pc, #44]	; (33748 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
   3371a:	6099      	str	r1, [r3, #8]
   3371c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   33720:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   33724:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   33728:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3372c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33730:	2201      	movs	r2, #1
    p_cb->busy = false;
   33732:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33736:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   3373a:	bd70      	pop	{r4, r5, r6, pc}
   3373c:	2001a44c 	.word	0x2001a44c
   33740:	0004c260 	.word	0x0004c260
   33744:	0004494f 	.word	0x0004494f
   33748:	019c0202 	.word	0x019c0202

0003374c <nrfx_twim_uninit>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3374c:	2334      	movs	r3, #52	; 0x34
{
   3374e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33750:	4d23      	ldr	r5, [pc, #140]	; (337e0 <nrfx_twim_uninit+0x94>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   33752:	7906      	ldrb	r6, [r0, #4]
{
   33754:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33756:	fb03 5306 	mla	r3, r3, r6, r5
   3375a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   3375e:	b953      	cbnz	r3, 33776 <nrfx_twim_uninit+0x2a>
   33760:	4920      	ldr	r1, [pc, #128]	; (337e4 <nrfx_twim_uninit+0x98>)
   33762:	4821      	ldr	r0, [pc, #132]	; (337e8 <nrfx_twim_uninit+0x9c>)
   33764:	f44f 72b0 	mov.w	r2, #352	; 0x160
   33768:	f009 fd0d 	bl	3d186 <assert_print>
   3376c:	f44f 71b0 	mov.w	r1, #352	; 0x160
   33770:	481c      	ldr	r0, [pc, #112]	; (337e4 <nrfx_twim_uninit+0x98>)
   33772:	f009 fd01 	bl	3d178 <assert_post_action>
    if (p_cb->handler)
   33776:	2334      	movs	r3, #52	; 0x34
   33778:	4373      	muls	r3, r6
   3377a:	58eb      	ldr	r3, [r5, r3]
   3377c:	b123      	cbz	r3, 33788 <nrfx_twim_uninit+0x3c>
   3377e:	6820      	ldr	r0, [r4, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   33780:	f340 3007 	sbfx	r0, r0, #12, #8
   33784:	f7ef fc7a 	bl	2307c <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   33788:	4620      	mov	r0, r4
   3378a:	f7ff ffab 	bl	336e4 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   3378e:	2334      	movs	r3, #52	; 0x34
   33790:	fb03 5306 	mla	r3, r3, r6, r5
   33794:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   33798:	b9ca      	cbnz	r2, 337ce <nrfx_twim_uninit+0x82>
   3379a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   3379e:	b9b3      	cbnz	r3, 337ce <nrfx_twim_uninit+0x82>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   337a0:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337a2:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SCL;
   337a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   337a8:	2702      	movs	r7, #2
   337aa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337ac:	f7ff fed0 	bl	33550 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   337b0:	9b01      	ldr	r3, [sp, #4]
   337b2:	3380      	adds	r3, #128	; 0x80
   337b4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
   337b8:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337ba:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SDA;
   337bc:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    nrf_gpio_cfg(
   337c0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337c2:	f7ff fec5 	bl	33550 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   337c6:	9b01      	ldr	r3, [sp, #4]
   337c8:	3380      	adds	r3, #128	; 0x80
   337ca:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   337ce:	2334      	movs	r3, #52	; 0x34
   337d0:	fb03 5506 	mla	r5, r3, r6, r5
   337d4:	2300      	movs	r3, #0
   337d6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   337da:	b003      	add	sp, #12
   337dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   337de:	bf00      	nop
   337e0:	2001a44c 	.word	0x2001a44c
   337e4:	0004c260 	.word	0x0004c260
   337e8:	0004494f 	.word	0x0004494f

000337ec <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   337ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   337f0:	7903      	ldrb	r3, [r0, #4]
{
   337f2:	4604      	mov	r4, r0
   337f4:	460d      	mov	r5, r1
   337f6:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   337f8:	b93b      	cbnz	r3, 3380a <nrfx_twim_xfer+0x1e>
   337fa:	684b      	ldr	r3, [r1, #4]
   337fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   33800:	d203      	bcs.n	3380a <nrfx_twim_xfer+0x1e>
   33802:	688b      	ldr	r3, [r1, #8]
   33804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   33808:	d30a      	bcc.n	33820 <nrfx_twim_xfer+0x34>
   3380a:	49ba      	ldr	r1, [pc, #744]	; (33af4 <nrfx_twim_xfer+0x308>)
   3380c:	48ba      	ldr	r0, [pc, #744]	; (33af8 <nrfx_twim_xfer+0x30c>)
   3380e:	f240 2299 	movw	r2, #665	; 0x299
   33812:	f009 fcb8 	bl	3d186 <assert_print>
   33816:	f240 2199 	movw	r1, #665	; 0x299
   3381a:	48b6      	ldr	r0, [pc, #728]	; (33af4 <nrfx_twim_xfer+0x308>)
   3381c:	f009 fcac 	bl	3d178 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33820:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   33822:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33826:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 33b10 <nrfx_twim_xfer+0x324>
   3382a:	fb07 f709 	mul.w	r7, r7, r9
   3382e:	f858 3007 	ldr.w	r3, [r8, r7]
   33832:	bb03      	cbnz	r3, 33876 <nrfx_twim_xfer+0x8a>
   33834:	782b      	ldrb	r3, [r5, #0]
   33836:	2b02      	cmp	r3, #2
   33838:	d00e      	beq.n	33858 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   3383a:	782b      	ldrb	r3, [r5, #0]
   3383c:	2b03      	cmp	r3, #3
   3383e:	d11a      	bne.n	33876 <nrfx_twim_xfer+0x8a>
   33840:	f240 22a2 	movw	r2, #674	; 0x2a2
   33844:	49ab      	ldr	r1, [pc, #684]	; (33af4 <nrfx_twim_xfer+0x308>)
   33846:	48ac      	ldr	r0, [pc, #688]	; (33af8 <nrfx_twim_xfer+0x30c>)
   33848:	f009 fc9d 	bl	3d186 <assert_print>
   3384c:	f240 21a2 	movw	r1, #674	; 0x2a2
   33850:	48a8      	ldr	r0, [pc, #672]	; (33af4 <nrfx_twim_xfer+0x308>)
   33852:	f009 fc91 	bl	3d178 <assert_post_action>
   33856:	e00e      	b.n	33876 <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33858:	f240 22a1 	movw	r2, #673	; 0x2a1
   3385c:	49a5      	ldr	r1, [pc, #660]	; (33af4 <nrfx_twim_xfer+0x308>)
   3385e:	48a6      	ldr	r0, [pc, #664]	; (33af8 <nrfx_twim_xfer+0x30c>)
   33860:	f009 fc91 	bl	3d186 <assert_print>
   33864:	f240 21a1 	movw	r1, #673	; 0x2a1
   33868:	48a2      	ldr	r0, [pc, #648]	; (33af4 <nrfx_twim_xfer+0x308>)
   3386a:	f009 fc85 	bl	3d178 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   3386e:	f858 3007 	ldr.w	r3, [r8, r7]
   33872:	2b00      	cmp	r3, #0
   33874:	d0e1      	beq.n	3383a <nrfx_twim_xfer+0x4e>
    p_cb->error = false;
   33876:	2334      	movs	r3, #52	; 0x34
   33878:	2200      	movs	r2, #0
   3387a:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   3387e:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   33880:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   33884:	686b      	ldr	r3, [r5, #4]
   33886:	b14b      	cbz	r3, 3389c <nrfx_twim_xfer+0xb0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   33888:	68eb      	ldr	r3, [r5, #12]
   3388a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   3388e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   33892:	d003      	beq.n	3389c <nrfx_twim_xfer+0xb0>
        return err_code;
   33894:	4f99      	ldr	r7, [pc, #612]	; (33afc <nrfx_twim_xfer+0x310>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   33896:	4638      	mov	r0, r7
   33898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   3389c:	2734      	movs	r7, #52	; 0x34
   3389e:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
   338a2:	4b97      	ldr	r3, [pc, #604]	; (33b00 <nrfx_twim_xfer+0x314>)
   338a4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   338a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   338ac:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   338b0:	b123      	cbz	r3, 338bc <nrfx_twim_xfer+0xd0>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   338b2:	68bb      	ldr	r3, [r7, #8]
        return err_code;
   338b4:	4f93      	ldr	r7, [pc, #588]	; (33b04 <nrfx_twim_xfer+0x318>)
    p_reg->INTENSET = mask;
   338b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   338ba:	e7ec      	b.n	33896 <nrfx_twim_xfer+0xaa>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   338bc:	f016 0f14 	tst.w	r6, #20
   338c0:	bf0c      	ite	eq
   338c2:	2301      	moveq	r3, #1
   338c4:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   338c6:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   338c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   338cc:	f107 0c0c 	add.w	ip, r7, #12
   338d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   338d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   338d8:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   338dc:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   338de:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   338e2:	f3c6 1300 	ubfx	r3, r6, #4, #1
   338e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   338ea:	786b      	ldrb	r3, [r5, #1]
   338ec:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   338f0:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   338f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   338f8:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   338fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   33900:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   33904:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   33908:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   3390c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   33910:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   33914:	bf18      	it	ne
   33916:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   33918:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   3391c:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   33920:	bf18      	it	ne
   33922:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   33924:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   33928:	782b      	ldrb	r3, [r5, #0]
   3392a:	2b03      	cmp	r3, #3
   3392c:	f200 80df 	bhi.w	33aee <nrfx_twim_xfer+0x302>
   33930:	e8df f003 	tbb	[pc, r3]
   33934:	0293caae 	.word	0x0293caae
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   33938:	06f3      	lsls	r3, r6, #27
   3393a:	d50a      	bpl.n	33952 <nrfx_twim_xfer+0x166>
   3393c:	496d      	ldr	r1, [pc, #436]	; (33af4 <nrfx_twim_xfer+0x308>)
   3393e:	486e      	ldr	r0, [pc, #440]	; (33af8 <nrfx_twim_xfer+0x30c>)
   33940:	f240 12dd 	movw	r2, #477	; 0x1dd
   33944:	f009 fc1f 	bl	3d186 <assert_print>
   33948:	f240 11dd 	movw	r1, #477	; 0x1dd
   3394c:	4869      	ldr	r0, [pc, #420]	; (33af4 <nrfx_twim_xfer+0x308>)
   3394e:	f009 fc13 	bl	3d178 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   33952:	0737      	lsls	r7, r6, #28
   33954:	d50a      	bpl.n	3396c <nrfx_twim_xfer+0x180>
   33956:	4967      	ldr	r1, [pc, #412]	; (33af4 <nrfx_twim_xfer+0x308>)
   33958:	4867      	ldr	r0, [pc, #412]	; (33af8 <nrfx_twim_xfer+0x30c>)
   3395a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   3395e:	f009 fc12 	bl	3d186 <assert_print>
   33962:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   33966:	4863      	ldr	r0, [pc, #396]	; (33af4 <nrfx_twim_xfer+0x308>)
   33968:	f009 fc06 	bl	3d178 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   3396c:	0770      	lsls	r0, r6, #29
   3396e:	d50a      	bpl.n	33986 <nrfx_twim_xfer+0x19a>
   33970:	4960      	ldr	r1, [pc, #384]	; (33af4 <nrfx_twim_xfer+0x308>)
   33972:	4861      	ldr	r0, [pc, #388]	; (33af8 <nrfx_twim_xfer+0x30c>)
   33974:	f240 12df 	movw	r2, #479	; 0x1df
   33978:	f009 fc05 	bl	3d186 <assert_print>
   3397c:	f240 11df 	movw	r1, #479	; 0x1df
   33980:	485c      	ldr	r0, [pc, #368]	; (33af4 <nrfx_twim_xfer+0x308>)
   33982:	f009 fbf9 	bl	3d178 <assert_post_action>
   33986:	692b      	ldr	r3, [r5, #16]
   33988:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   3398c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33990:	d180      	bne.n	33894 <nrfx_twim_xfer+0xa8>
    p_reg->SHORTS = mask;
   33992:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33996:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   33998:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   3399c:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3399e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   339a2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   339a6:	2200      	movs	r2, #0
   339a8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   339ac:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   339b0:	2101      	movs	r1, #1
   339b2:	6221      	str	r1, [r4, #32]
   339b4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   339b6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   339ba:	2900      	cmp	r1, #0
   339bc:	d0fb      	beq.n	339b6 <nrfx_twim_xfer+0x1ca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   339be:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   339c2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   339c6:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   339c8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   339cc:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
   339ce:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
   339d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   339d6:	fb03 8309 	mla	r3, r3, r9, r8
   339da:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   339dc:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   339de:	4f4a      	ldr	r7, [pc, #296]	; (33b08 <nrfx_twim_xfer+0x31c>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   339e0:	0731      	lsls	r1, r6, #28
   339e2:	d407      	bmi.n	339f4 <nrfx_twim_xfer+0x208>
   339e4:	782a      	ldrb	r2, [r5, #0]
   339e6:	2a03      	cmp	r2, #3
   339e8:	d004      	beq.n	339f4 <nrfx_twim_xfer+0x208>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   339ea:	2201      	movs	r2, #1
   339ec:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   339ee:	686b      	ldr	r3, [r5, #4]
   339f0:	b903      	cbnz	r3, 339f4 <nrfx_twim_xfer+0x208>
   339f2:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   339f4:	2334      	movs	r3, #52	; 0x34
   339f6:	fb03 f309 	mul.w	r3, r3, r9
   339fa:	f858 2003 	ldr.w	r2, [r8, r3]
   339fe:	eb08 0103 	add.w	r1, r8, r3
   33a02:	2a00      	cmp	r2, #0
   33a04:	f040 8086 	bne.w	33b14 <nrfx_twim_xfer+0x328>
                transmission_finished = true;
   33a08:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33a0a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   33a0e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   33a12:	2800      	cmp	r0, #0
   33a14:	f040 8099 	bne.w	33b4a <nrfx_twim_xfer+0x35e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   33a18:	3b00      	subs	r3, #0
   33a1a:	bf18      	it	ne
   33a1c:	2301      	movne	r3, #1
   33a1e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   33a22:	2800      	cmp	r0, #0
   33a24:	f000 8097 	beq.w	33b56 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33a28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   33a2c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33a30:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   33a34:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   33a38:	b115      	cbz	r5, 33a40 <nrfx_twim_xfer+0x254>
   33a3a:	f410 7f00 	tst.w	r0, #512	; 0x200
   33a3e:	d104      	bne.n	33a4a <nrfx_twim_xfer+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33a40:	6221      	str	r1, [r4, #32]
   33a42:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   33a44:	2d00      	cmp	r5, #0
   33a46:	d0e0      	beq.n	33a0a <nrfx_twim_xfer+0x21e>
                    transmission_finished = false;
   33a48:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   33a4a:	05c0      	lsls	r0, r0, #23
   33a4c:	f140 8083 	bpl.w	33b56 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33a50:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   33a54:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   33a58:	e7d7      	b.n	33a0a <nrfx_twim_xfer+0x21e>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33a5a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33a5c:	68ea      	ldr	r2, [r5, #12]
   33a5e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   33a62:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   33a66:	692b      	ldr	r3, [r5, #16]
   33a68:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   33a6c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33a70:	f47f af10 	bne.w	33894 <nrfx_twim_xfer+0xa8>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   33a74:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   33a76:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   33a7a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   33a7e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   33a82:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33a86:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33a88:	2202      	movs	r2, #2
   33a8a:	fb03 8309 	mla	r3, r3, r9, r8
   33a8e:	e012      	b.n	33ab6 <nrfx_twim_xfer+0x2ca>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33a90:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33a92:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   33a94:	f016 0f20 	tst.w	r6, #32
   33a98:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   33a9c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   33aa0:	f04f 0334 	mov.w	r3, #52	; 0x34
   33aa4:	d00b      	beq.n	33abe <nrfx_twim_xfer+0x2d2>
    p_reg->SHORTS = mask;
   33aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
   33aaa:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   33aae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   33ab2:	fb03 8309 	mla	r3, r3, r9, r8
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33ab6:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33ab8:	2301      	movs	r3, #1
   33aba:	6223      	str	r3, [r4, #32]
   33abc:	e78e      	b.n	339dc <nrfx_twim_xfer+0x1f0>
    p_reg->SHORTS = mask;
   33abe:	f44f 7200 	mov.w	r2, #512	; 0x200
   33ac2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   33ac6:	e7df      	b.n	33a88 <nrfx_twim_xfer+0x29c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33ac8:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   33aca:	68ea      	ldr	r2, [r5, #12]
   33acc:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   33ad0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   33ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   33ad8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33adc:	2334      	movs	r3, #52	; 0x34
   33ade:	2202      	movs	r2, #2
   33ae0:	fb03 8309 	mla	r3, r3, r9, r8
   33ae4:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33ae6:	2301      	movs	r3, #1
   33ae8:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   33aea:	2300      	movs	r3, #0
   33aec:	e777      	b.n	339de <nrfx_twim_xfer+0x1f2>
    switch (p_xfer_desc->type)
   33aee:	2308      	movs	r3, #8
   33af0:	4f06      	ldr	r7, [pc, #24]	; (33b0c <nrfx_twim_xfer+0x320>)
   33af2:	e775      	b.n	339e0 <nrfx_twim_xfer+0x1f4>
   33af4:	0004c260 	.word	0x0004c260
   33af8:	0004494f 	.word	0x0004494f
   33afc:	0bad000a 	.word	0x0bad000a
   33b00:	019c0202 	.word	0x019c0202
   33b04:	0bad000b 	.word	0x0bad000b
   33b08:	0bad0000 	.word	0x0bad0000
   33b0c:	0bad0004 	.word	0x0bad0004
   33b10:	2001a44c 	.word	0x2001a44c
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   33b14:	0772      	lsls	r2, r6, #29
            p_cb->int_mask = 0;
   33b16:	bf44      	itt	mi
   33b18:	2300      	movmi	r3, #0
   33b1a:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   33b1c:	0673      	lsls	r3, r6, #25
   33b1e:	d406      	bmi.n	33b2e <nrfx_twim_xfer+0x342>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   33b20:	2334      	movs	r3, #52	; 0x34
   33b22:	fb03 8309 	mla	r3, r3, r9, r8
   33b26:	689a      	ldr	r2, [r3, #8]
   33b28:	f042 0202 	orr.w	r2, r2, #2
   33b2c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   33b2e:	2334      	movs	r3, #52	; 0x34
   33b30:	fb03 8809 	mla	r8, r3, r9, r8
   33b34:	f8d8 3008 	ldr.w	r3, [r8, #8]
   33b38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   33b3c:	f8c8 3008 	str.w	r3, [r8, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   33b40:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->INTENSET = mask;
   33b44:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   33b48:	e6a5      	b.n	33896 <nrfx_twim_xfer+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33b4a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   33b4e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   33b52:	2301      	movs	r3, #1
   33b54:	e763      	b.n	33a1e <nrfx_twim_xfer+0x232>
        } while (!transmission_finished);
   33b56:	2b00      	cmp	r3, #0
   33b58:	f43f af57 	beq.w	33a0a <nrfx_twim_xfer+0x21e>
        p_cb->busy = false;
   33b5c:	2134      	movs	r1, #52	; 0x34
   33b5e:	2000      	movs	r0, #0
   33b60:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
   33b64:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   33b68:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   33b6c:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   33b70:	b18b      	cbz	r3, 33b96 <nrfx_twim_xfer+0x3aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   33b72:	4a0f      	ldr	r2, [pc, #60]	; (33bb0 <nrfx_twim_xfer+0x3c4>)
   33b74:	f013 0f01 	tst.w	r3, #1
   33b78:	4f0e      	ldr	r7, [pc, #56]	; (33bb4 <nrfx_twim_xfer+0x3c8>)
   33b7a:	bf18      	it	ne
   33b7c:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   33b7e:	f013 0f02 	tst.w	r3, #2
   33b82:	f102 0201 	add.w	r2, r2, #1
   33b86:	bf18      	it	ne
   33b88:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   33b8a:	f013 0f04 	tst.w	r3, #4
   33b8e:	4b0a      	ldr	r3, [pc, #40]	; (33bb8 <nrfx_twim_xfer+0x3cc>)
   33b90:	bf18      	it	ne
   33b92:	461f      	movne	r7, r3
   33b94:	e67f      	b.n	33896 <nrfx_twim_xfer+0xaa>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   33b96:	0673      	lsls	r3, r6, #25
   33b98:	f53f ae7d 	bmi.w	33896 <nrfx_twim_xfer+0xaa>
                !xfer_completeness_check(p_twim, p_cb))
   33b9c:	4620      	mov	r0, r4
   33b9e:	fb09 8101 	mla	r1, r9, r1, r8
   33ba2:	f00c fd1e 	bl	405e2 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   33ba6:	4b03      	ldr	r3, [pc, #12]	; (33bb4 <nrfx_twim_xfer+0x3c8>)
   33ba8:	2800      	cmp	r0, #0
   33baa:	bf08      	it	eq
   33bac:	461f      	moveq	r7, r3
   33bae:	e672      	b.n	33896 <nrfx_twim_xfer+0xaa>
   33bb0:	0bae0000 	.word	0x0bae0000
   33bb4:	0bad0001 	.word	0x0bad0001
   33bb8:	0bae0002 	.word	0x0bae0002

00033bbc <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   33bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   33bbe:	4c61      	ldr	r4, [pc, #388]	; (33d44 <nrfx_twim_2_irq_handler+0x188>)
{
   33bc0:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   33bc2:	6823      	ldr	r3, [r4, #0]
   33bc4:	b953      	cbnz	r3, 33bdc <nrfx_twim_2_irq_handler+0x20>
   33bc6:	4960      	ldr	r1, [pc, #384]	; (33d48 <nrfx_twim_2_irq_handler+0x18c>)
   33bc8:	4860      	ldr	r0, [pc, #384]	; (33d4c <nrfx_twim_2_irq_handler+0x190>)
   33bca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   33bce:	f009 fada 	bl	3d186 <assert_print>
   33bd2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   33bd6:	485c      	ldr	r0, [pc, #368]	; (33d48 <nrfx_twim_2_irq_handler+0x18c>)
   33bd8:	f009 face 	bl	3d178 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33bdc:	4d5c      	ldr	r5, [pc, #368]	; (33d50 <nrfx_twim_2_irq_handler+0x194>)
   33bde:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   33be2:	b1fb      	cbz	r3, 33c24 <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33be4:	2300      	movs	r3, #0
   33be6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   33bea:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33bee:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   33bf2:	b9bb      	cbnz	r3, 33c24 <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   33bf4:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   33bf6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33bfa:	2302      	movs	r3, #2
   33bfc:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   33bfe:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   33c00:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33c04:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   33c08:	b11b      	cbz	r3, 33c12 <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
   33c0a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   33c0e:	059e      	lsls	r6, r3, #22
   33c10:	d403      	bmi.n	33c1a <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33c12:	2201      	movs	r2, #1
   33c14:	4b4e      	ldr	r3, [pc, #312]	; (33d50 <nrfx_twim_2_irq_handler+0x194>)
   33c16:	621a      	str	r2, [r3, #32]
   33c18:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   33c1a:	2301      	movs	r3, #1
   33c1c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   33c20:	b007      	add	sp, #28
   33c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33c24:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   33c28:	2b00      	cmp	r3, #0
   33c2a:	d054      	beq.n	33cd6 <nrfx_twim_2_irq_handler+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33c2c:	2300      	movs	r3, #0
   33c2e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   33c32:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   33c36:	6a23      	ldr	r3, [r4, #32]
   33c38:	065d      	lsls	r5, r3, #25
   33c3a:	d40a      	bmi.n	33c52 <nrfx_twim_2_irq_handler+0x96>
   33c3c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33c40:	b93b      	cbnz	r3, 33c52 <nrfx_twim_2_irq_handler+0x96>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   33c42:	4940      	ldr	r1, [pc, #256]	; (33d44 <nrfx_twim_2_irq_handler+0x188>)
   33c44:	4842      	ldr	r0, [pc, #264]	; (33d50 <nrfx_twim_2_irq_handler+0x194>)
   33c46:	f00c fccc 	bl	405e2 <xfer_completeness_check>
   33c4a:	f080 0001 	eor.w	r0, r0, #1
   33c4e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   33c52:	6a23      	ldr	r3, [r4, #32]
   33c54:	f013 0704 	ands.w	r7, r3, #4
   33c58:	d122      	bne.n	33ca0 <nrfx_twim_2_irq_handler+0xe4>
            event.xfer_desc = p_cb->xfer_desc;
   33c5a:	4e3e      	ldr	r6, [pc, #248]	; (33d54 <nrfx_twim_2_irq_handler+0x198>)
   33c5c:	ad01      	add	r5, sp, #4
   33c5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   33c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   33c62:	6833      	ldr	r3, [r6, #0]
            if (!p_cb->repeated || p_cb->error)
   33c64:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   33c68:	602b      	str	r3, [r5, #0]
   33c6a:	4b39      	ldr	r3, [pc, #228]	; (33d50 <nrfx_twim_2_irq_handler+0x194>)
   33c6c:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   33c70:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   33c74:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   33c78:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   33c7c:	f1bc 0f00 	cmp.w	ip, #0
   33c80:	d002      	beq.n	33c88 <nrfx_twim_2_irq_handler+0xcc>
   33c82:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   33c86:	b15a      	cbz	r2, 33ca0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   33c88:	2200      	movs	r2, #0
   33c8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   33c8e:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   33c90:	4a31      	ldr	r2, [pc, #196]	; (33d58 <nrfx_twim_2_irq_handler+0x19c>)
   33c92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   33c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
   33c9a:	4b30      	ldr	r3, [pc, #192]	; (33d5c <nrfx_twim_2_irq_handler+0x1a0>)
   33c9c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   33ca0:	4a2b      	ldr	r2, [pc, #172]	; (33d50 <nrfx_twim_2_irq_handler+0x194>)
   33ca2:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   33ca6:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   33ca8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   33cac:	d53c      	bpl.n	33d28 <nrfx_twim_2_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   33cae:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   33cb0:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   33cb4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   33cb8:	b90b      	cbnz	r3, 33cbe <nrfx_twim_2_irq_handler+0x102>
        p_cb->busy = false;
   33cba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   33cbe:	6a23      	ldr	r3, [r4, #32]
   33cc0:	075b      	lsls	r3, r3, #29
   33cc2:	d503      	bpl.n	33ccc <nrfx_twim_2_irq_handler+0x110>
   33cc4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33cc8:	2b00      	cmp	r3, #0
   33cca:	d0a9      	beq.n	33c20 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   33ccc:	e9d4 3100 	ldrd	r3, r1, [r4]
   33cd0:	4668      	mov	r0, sp
   33cd2:	4798      	blx	r3
}
   33cd4:	e7a4      	b.n	33c20 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33cd6:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   33cda:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   33cde:	7b23      	ldrb	r3, [r4, #12]
   33ce0:	b983      	cbnz	r3, 33d04 <nrfx_twim_2_irq_handler+0x148>
            event.xfer_desc = p_cb->xfer_desc;
   33ce2:	4f1c      	ldr	r7, [pc, #112]	; (33d54 <nrfx_twim_2_irq_handler+0x198>)
   33ce4:	ae01      	add	r6, sp, #4
   33ce6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   33ce8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   33cea:	683b      	ldr	r3, [r7, #0]
   33cec:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   33cee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   33cf2:	2b00      	cmp	r3, #0
   33cf4:	d1d4      	bne.n	33ca0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   33cf6:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   33cfa:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   33cfc:	4b16      	ldr	r3, [pc, #88]	; (33d58 <nrfx_twim_2_irq_handler+0x19c>)
   33cfe:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   33d02:	e7c8      	b.n	33c96 <nrfx_twim_2_irq_handler+0xda>
    p_reg->SHORTS = mask;
   33d04:	f44f 7300 	mov.w	r3, #512	; 0x200
   33d08:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   33d0c:	f240 2302 	movw	r3, #514	; 0x202
   33d10:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   33d12:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   33d16:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   33d1a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   33d1c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33d20:	2301      	movs	r3, #1
   33d22:	60ab      	str	r3, [r5, #8]
   33d24:	622b      	str	r3, [r5, #32]
            return;
   33d26:	e77b      	b.n	33c20 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   33d28:	0759      	lsls	r1, r3, #29
   33d2a:	d501      	bpl.n	33d30 <nrfx_twim_2_irq_handler+0x174>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   33d2c:	2302      	movs	r3, #2
   33d2e:	e7bf      	b.n	33cb0 <nrfx_twim_2_irq_handler+0xf4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   33d30:	07da      	lsls	r2, r3, #31
   33d32:	d501      	bpl.n	33d38 <nrfx_twim_2_irq_handler+0x17c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   33d34:	2303      	movs	r3, #3
   33d36:	e7bb      	b.n	33cb0 <nrfx_twim_2_irq_handler+0xf4>
    else if (p_cb->error)
   33d38:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33d3c:	2b00      	cmp	r3, #0
   33d3e:	d0b7      	beq.n	33cb0 <nrfx_twim_2_irq_handler+0xf4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   33d40:	2304      	movs	r3, #4
   33d42:	e7b5      	b.n	33cb0 <nrfx_twim_2_irq_handler+0xf4>
   33d44:	2001a44c 	.word	0x2001a44c
   33d48:	0004c260 	.word	0x0004c260
   33d4c:	0004494f 	.word	0x0004494f
   33d50:	4000a000 	.word	0x4000a000
   33d54:	2001a458 	.word	0x2001a458
   33d58:	019c0202 	.word	0x019c0202
   33d5c:	e000e100 	.word	0xe000e100

00033d60 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33d60:	6803      	ldr	r3, [r0, #0]
{
   33d62:	b510      	push	{r4, lr}
    switch (port)
   33d64:	095a      	lsrs	r2, r3, #5
   33d66:	bf0c      	ite	eq
   33d68:	f04f 32ff 	moveq.w	r2, #4294967295
   33d6c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   33d6e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   33d72:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33d76:	07db      	lsls	r3, r3, #31
{
   33d78:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33d7a:	d40a      	bmi.n	33d92 <nrf_gpio_pin_port_decode+0x32>
   33d7c:	490e      	ldr	r1, [pc, #56]	; (33db8 <nrf_gpio_pin_port_decode+0x58>)
   33d7e:	480f      	ldr	r0, [pc, #60]	; (33dbc <nrf_gpio_pin_port_decode+0x5c>)
   33d80:	f240 2229 	movw	r2, #553	; 0x229
   33d84:	f009 f9ff 	bl	3d186 <assert_print>
   33d88:	f240 2129 	movw	r1, #553	; 0x229
   33d8c:	480a      	ldr	r0, [pc, #40]	; (33db8 <nrf_gpio_pin_port_decode+0x58>)
   33d8e:	f009 f9f3 	bl	3d178 <assert_post_action>
    uint32_t pin_number = *p_pin;
   33d92:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   33d94:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33d98:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   33d9a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33d9c:	d00a      	beq.n	33db4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   33d9e:	4906      	ldr	r1, [pc, #24]	; (33db8 <nrf_gpio_pin_port_decode+0x58>)
   33da0:	4806      	ldr	r0, [pc, #24]	; (33dbc <nrf_gpio_pin_port_decode+0x5c>)
   33da2:	f240 222e 	movw	r2, #558	; 0x22e
   33da6:	f009 f9ee 	bl	3d186 <assert_print>
   33daa:	f240 212e 	movw	r1, #558	; 0x22e
   33dae:	4802      	ldr	r0, [pc, #8]	; (33db8 <nrf_gpio_pin_port_decode+0x58>)
   33db0:	f009 f9e2 	bl	3d178 <assert_post_action>
}
   33db4:	4802      	ldr	r0, [pc, #8]	; (33dc0 <nrf_gpio_pin_port_decode+0x60>)
   33db6:	bd10      	pop	{r4, pc}
   33db8:	0004556d 	.word	0x0004556d
   33dbc:	0004494f 	.word	0x0004494f
   33dc0:	40842500 	.word	0x40842500

00033dc4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   33dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33dc6:	460c      	mov	r4, r1
   33dc8:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   33dca:	f00c fc3a 	bl	40642 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   33dce:	4620      	mov	r0, r4
   33dd0:	f00c fc37 	bl	40642 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33dd4:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   33dd6:	f240 650d 	movw	r5, #1549	; 0x60d
   33dda:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33ddc:	f7ff ffc0 	bl	33d60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33de0:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   33de2:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   33de4:	3380      	adds	r3, #128	; 0x80
   33de6:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33dea:	a801      	add	r0, sp, #4
   33dec:	9401      	str	r4, [sp, #4]
   33dee:	f7ff ffb7 	bl	33d60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33df2:	9b01      	ldr	r3, [sp, #4]
   33df4:	3380      	adds	r3, #128	; 0x80
   33df6:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   33dfa:	2004      	movs	r0, #4
   33dfc:	f00c fb71 	bl	404e2 <nrfx_busy_wait>
   33e00:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33e02:	a801      	add	r0, sp, #4
   33e04:	9401      	str	r4, [sp, #4]
   33e06:	f7ff ffab 	bl	33d60 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33e0a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   33e0c:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33e0e:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   33e10:	07db      	lsls	r3, r3, #31
   33e12:	d414      	bmi.n	33e3e <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33e14:	a801      	add	r0, sp, #4
   33e16:	9601      	str	r6, [sp, #4]
   33e18:	f7ff ffa2 	bl	33d60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   33e1c:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
   33e1e:	3d01      	subs	r5, #1
   33e20:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   33e24:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   33e26:	2004      	movs	r0, #4
   33e28:	f00c fb5b 	bl	404e2 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   33e2c:	4630      	mov	r0, r6
   33e2e:	f00c fc08 	bl	40642 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   33e32:	2004      	movs	r0, #4
   33e34:	f00c fb55 	bl	404e2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   33e38:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   33e3c:	d1e1      	bne.n	33e02 <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33e3e:	a801      	add	r0, sp, #4
   33e40:	9401      	str	r4, [sp, #4]
   33e42:	f7ff ff8d 	bl	33d60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   33e46:	2301      	movs	r3, #1
   33e48:	9a01      	ldr	r2, [sp, #4]
   33e4a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   33e4c:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   33e4e:	2004      	movs	r0, #4
   33e50:	f00c fb47 	bl	404e2 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   33e54:	4620      	mov	r0, r4
   33e56:	f00c fbf4 	bl	40642 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   33e5a:	2004      	movs	r0, #4
   33e5c:	f00c fb41 	bl	404e2 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33e60:	a801      	add	r0, sp, #4
   33e62:	9401      	str	r4, [sp, #4]
   33e64:	f7ff ff7c 	bl	33d60 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33e68:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   33e6a:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   33e6c:	4803      	ldr	r0, [pc, #12]	; (33e7c <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33e6e:	40d3      	lsrs	r3, r2
   33e70:	f003 0301 	and.w	r3, r3, #1
   33e74:	1ac0      	subs	r0, r0, r3
   33e76:	b003      	add	sp, #12
   33e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33e7a:	bf00      	nop
   33e7c:	0bad0001 	.word	0x0bad0001

00033e80 <rpc_handle_data_message>:
   33e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33e84:	4680      	mov	r8, r0
   33e86:	4605      	mov	r5, r0
   33e88:	2404      	movs	r4, #4
   33e8a:	f858 7b08 	ldr.w	r7, [r8], #8
   33e8e:	4e0c      	ldr	r6, [pc, #48]	; (33ec0 <rpc_handle_data_message+0x40>)
   33e90:	b2ff      	uxtb	r7, r7
   33e92:	7833      	ldrb	r3, [r6, #0]
   33e94:	42bb      	cmp	r3, r7
   33e96:	d009      	beq.n	33eac <rpc_handle_data_message+0x2c>
   33e98:	3c01      	subs	r4, #1
   33e9a:	f106 060c 	add.w	r6, r6, #12
   33e9e:	d1f8      	bne.n	33e92 <rpc_handle_data_message+0x12>
   33ea0:	68a8      	ldr	r0, [r5, #8]
   33ea2:	b108      	cbz	r0, 33ea8 <rpc_handle_data_message+0x28>
   33ea4:	f00c fc1d 	bl	406e2 <rpc_transport_peer_data_free>
   33ea8:	4620      	mov	r0, r4
   33eaa:	e006      	b.n	33eba <rpc_handle_data_message+0x3a>
   33eac:	6829      	ldr	r1, [r5, #0]
   33eae:	4640      	mov	r0, r8
   33eb0:	6873      	ldr	r3, [r6, #4]
   33eb2:	0c09      	lsrs	r1, r1, #16
   33eb4:	4798      	blx	r3
   33eb6:	2802      	cmp	r0, #2
   33eb8:	d0ee      	beq.n	33e98 <rpc_handle_data_message+0x18>
   33eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33ebe:	bf00      	nop
   33ec0:	00043838 	.word	0x00043838

00033ec4 <trace_write>:
   33ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ec8:	7803      	ldrb	r3, [r0, #0]
   33eca:	4605      	mov	r5, r0
   33ecc:	2b62      	cmp	r3, #98	; 0x62
   33ece:	d045      	beq.n	33f5c <trace_write+0x98>
   33ed0:	2b63      	cmp	r3, #99	; 0x63
   33ed2:	d048      	beq.n	33f66 <trace_write+0xa2>
   33ed4:	2b61      	cmp	r3, #97	; 0x61
   33ed6:	f040 8083 	bne.w	33fe0 <trace_write+0x11c>
   33eda:	4b42      	ldr	r3, [pc, #264]	; (33fe4 <trace_write+0x120>)
   33edc:	8819      	ldrh	r1, [r3, #0]
   33ede:	4b42      	ldr	r3, [pc, #264]	; (33fe8 <trace_write+0x124>)
   33ee0:	b289      	uxth	r1, r1
   33ee2:	6928      	ldr	r0, [r5, #16]
   33ee4:	f8d5 800c 	ldr.w	r8, [r5, #12]
   33ee8:	68aa      	ldr	r2, [r5, #8]
   33eea:	eba0 0708 	sub.w	r7, r0, r8
   33eee:	eba2 0208 	sub.w	r2, r2, r8
   33ef2:	b2bf      	uxth	r7, r7
   33ef4:	fa11 f282 	uxtah	r2, r1, r2
   33ef8:	fbb2 f1f7 	udiv	r1, r2, r7
   33efc:	681b      	ldr	r3, [r3, #0]
   33efe:	fb07 2211 	mls	r2, r7, r1, r2
   33f02:	eba3 0308 	sub.w	r3, r3, r8
   33f06:	b29b      	uxth	r3, r3
   33f08:	1a9b      	subs	r3, r3, r2
   33f0a:	443b      	add	r3, r7
   33f0c:	fb93 f1f7 	sdiv	r1, r3, r7
   33f10:	fb07 3311 	mls	r3, r7, r1, r3
   33f14:	fa1f f983 	uxth.w	r9, r3
   33f18:	fa12 f383 	uxtah	r3, r2, r3
   33f1c:	429f      	cmp	r7, r3
   33f1e:	4490      	add	r8, r2
   33f20:	bfbf      	itttt	lt
   33f22:	eba0 0008 	sublt.w	r0, r0, r8
   33f26:	b280      	uxthlt	r0, r0
   33f28:	eba9 0400 	sublt.w	r4, r9, r0
   33f2c:	4681      	movlt	r9, r0
   33f2e:	bfac      	ite	ge
   33f30:	2400      	movge	r4, #0
   33f32:	b2a4      	uxthlt	r4, r4
   33f34:	f1b9 0f00 	cmp.w	r9, #0
   33f38:	d052      	beq.n	33fe0 <trace_write+0x11c>
   33f3a:	2005      	movs	r0, #5
   33f3c:	f7f2 f89e 	bl	2607c <nrf_modem_os_trace_alloc>
   33f40:	4607      	mov	r7, r0
   33f42:	2800      	cmp	r0, #0
   33f44:	d04c      	beq.n	33fe0 <trace_write+0x11c>
   33f46:	b19c      	cbz	r4, 33f70 <trace_write+0xac>
   33f48:	2005      	movs	r0, #5
   33f4a:	f7f2 f897 	bl	2607c <nrf_modem_os_trace_alloc>
   33f4e:	4606      	mov	r6, r0
   33f50:	b970      	cbnz	r0, 33f70 <trace_write+0xac>
   33f52:	4638      	mov	r0, r7
   33f54:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33f58:	f7f2 b898 	b.w	2608c <nrf_modem_os_trace_free>
   33f5c:	4b23      	ldr	r3, [pc, #140]	; (33fec <trace_write+0x128>)
   33f5e:	8819      	ldrh	r1, [r3, #0]
   33f60:	4b23      	ldr	r3, [pc, #140]	; (33ff0 <trace_write+0x12c>)
   33f62:	b289      	uxth	r1, r1
   33f64:	e7bd      	b.n	33ee2 <trace_write+0x1e>
   33f66:	4b23      	ldr	r3, [pc, #140]	; (33ff4 <trace_write+0x130>)
   33f68:	8819      	ldrh	r1, [r3, #0]
   33f6a:	4b23      	ldr	r3, [pc, #140]	; (33ff8 <trace_write+0x134>)
   33f6c:	b289      	uxth	r1, r1
   33f6e:	e7b8      	b.n	33ee2 <trace_write+0x1e>
   33f70:	782a      	ldrb	r2, [r5, #0]
   33f72:	2a62      	cmp	r2, #98	; 0x62
   33f74:	d030      	beq.n	33fd8 <trace_write+0x114>
   33f76:	2a63      	cmp	r2, #99	; 0x63
   33f78:	d030      	beq.n	33fdc <trace_write+0x118>
   33f7a:	2a61      	cmp	r2, #97	; 0x61
   33f7c:	d107      	bne.n	33f8e <trace_write+0xca>
   33f7e:	4919      	ldr	r1, [pc, #100]	; (33fe4 <trace_write+0x120>)
   33f80:	880b      	ldrh	r3, [r1, #0]
   33f82:	eb09 0004 	add.w	r0, r9, r4
   33f86:	fa10 f383 	uxtah	r3, r0, r3
   33f8a:	b29b      	uxth	r3, r3
   33f8c:	800b      	strh	r3, [r1, #0]
   33f8e:	f06f 0b10 	mvn.w	fp, #16
   33f92:	f06f 0a41 	mvn.w	sl, #65	; 0x41
   33f96:	2105      	movs	r1, #5
   33f98:	4638      	mov	r0, r7
   33f9a:	f887 b000 	strb.w	fp, [r7]
   33f9e:	f887 a001 	strb.w	sl, [r7, #1]
   33fa2:	713a      	strb	r2, [r7, #4]
   33fa4:	f8a7 9002 	strh.w	r9, [r7, #2]
   33fa8:	f00b fa69 	bl	3f47e <nrf_modem_os_trace_put>
   33fac:	4649      	mov	r1, r9
   33fae:	4640      	mov	r0, r8
   33fb0:	f00b fa65 	bl	3f47e <nrf_modem_os_trace_put>
   33fb4:	b1a4      	cbz	r4, 33fe0 <trace_write+0x11c>
   33fb6:	f886 b000 	strb.w	fp, [r6]
   33fba:	f886 a001 	strb.w	sl, [r6, #1]
   33fbe:	782b      	ldrb	r3, [r5, #0]
   33fc0:	2105      	movs	r1, #5
   33fc2:	4630      	mov	r0, r6
   33fc4:	7133      	strb	r3, [r6, #4]
   33fc6:	8074      	strh	r4, [r6, #2]
   33fc8:	f00b fa59 	bl	3f47e <nrf_modem_os_trace_put>
   33fcc:	4621      	mov	r1, r4
   33fce:	68e8      	ldr	r0, [r5, #12]
   33fd0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33fd4:	f00b ba53 	b.w	3f47e <nrf_modem_os_trace_put>
   33fd8:	4904      	ldr	r1, [pc, #16]	; (33fec <trace_write+0x128>)
   33fda:	e7d1      	b.n	33f80 <trace_write+0xbc>
   33fdc:	4905      	ldr	r1, [pc, #20]	; (33ff4 <trace_write+0x130>)
   33fde:	e7cf      	b.n	33f80 <trace_write+0xbc>
   33fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33fe4:	2001a5b0 	.word	0x2001a5b0
   33fe8:	2001a488 	.word	0x2001a488
   33fec:	2001a5ac 	.word	0x2001a5ac
   33ff0:	2001a480 	.word	0x2001a480
   33ff4:	2001a5ae 	.word	0x2001a5ae
   33ff8:	2001a484 	.word	0x2001a484

00033ffc <ipc_trace_init>:
   33ffc:	2300      	movs	r3, #0
   33ffe:	4a04      	ldr	r2, [pc, #16]	; (34010 <ipc_trace_init+0x14>)
   34000:	8013      	strh	r3, [r2, #0]
   34002:	4a04      	ldr	r2, [pc, #16]	; (34014 <ipc_trace_init+0x18>)
   34004:	8013      	strh	r3, [r2, #0]
   34006:	4a04      	ldr	r2, [pc, #16]	; (34018 <ipc_trace_init+0x1c>)
   34008:	8013      	strh	r3, [r2, #0]
   3400a:	4b04      	ldr	r3, [pc, #16]	; (3401c <ipc_trace_init+0x20>)
   3400c:	6018      	str	r0, [r3, #0]
   3400e:	4770      	bx	lr
   34010:	2001a5b0 	.word	0x2001a5b0
   34014:	2001a5ac 	.word	0x2001a5ac
   34018:	2001a5ae 	.word	0x2001a5ae
   3401c:	2001a498 	.word	0x2001a498

00034020 <nrf_modem_trace_irq_handler>:
   34020:	b508      	push	{r3, lr}
   34022:	4b10      	ldr	r3, [pc, #64]	; (34064 <nrf_modem_trace_irq_handler+0x44>)
   34024:	781b      	ldrb	r3, [r3, #0]
   34026:	b90b      	cbnz	r3, 3402c <nrf_modem_trace_irq_handler+0xc>
   34028:	f7f1 fffc 	bl	26024 <nrf_modem_os_trace_irq_clear>
   3402c:	4b0e      	ldr	r3, [pc, #56]	; (34068 <nrf_modem_trace_irq_handler+0x48>)
   3402e:	6818      	ldr	r0, [r3, #0]
   34030:	6842      	ldr	r2, [r0, #4]
   34032:	6883      	ldr	r3, [r0, #8]
   34034:	429a      	cmp	r2, r3
   34036:	d001      	beq.n	3403c <nrf_modem_trace_irq_handler+0x1c>
   34038:	f7ff ff44 	bl	33ec4 <trace_write>
   3403c:	4b0b      	ldr	r3, [pc, #44]	; (3406c <nrf_modem_trace_irq_handler+0x4c>)
   3403e:	6818      	ldr	r0, [r3, #0]
   34040:	6882      	ldr	r2, [r0, #8]
   34042:	6843      	ldr	r3, [r0, #4]
   34044:	429a      	cmp	r2, r3
   34046:	d001      	beq.n	3404c <nrf_modem_trace_irq_handler+0x2c>
   34048:	f7ff ff3c 	bl	33ec4 <trace_write>
   3404c:	4b08      	ldr	r3, [pc, #32]	; (34070 <nrf_modem_trace_irq_handler+0x50>)
   3404e:	6818      	ldr	r0, [r3, #0]
   34050:	6882      	ldr	r2, [r0, #8]
   34052:	6843      	ldr	r3, [r0, #4]
   34054:	429a      	cmp	r2, r3
   34056:	d003      	beq.n	34060 <nrf_modem_trace_irq_handler+0x40>
   34058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3405c:	f7ff bf32 	b.w	33ec4 <trace_write>
   34060:	bd08      	pop	{r3, pc}
   34062:	bf00      	nop
   34064:	2001d3d5 	.word	0x2001d3d5
   34068:	2001a494 	.word	0x2001a494
   3406c:	2001a48c 	.word	0x2001a48c
   34070:	2001a490 	.word	0x2001a490

00034074 <ipc_trace_handle>:
   34074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34078:	4b55      	ldr	r3, [pc, #340]	; (341d0 <ipc_trace_handle+0x15c>)
   3407a:	681b      	ldr	r3, [r3, #0]
   3407c:	6919      	ldr	r1, [r3, #16]
   3407e:	f8d3 b014 	ldr.w	fp, [r3, #20]
   34082:	7c1a      	ldrb	r2, [r3, #16]
   34084:	2200      	movs	r2, #0
   34086:	741a      	strb	r2, [r3, #16]
   34088:	7c58      	ldrb	r0, [r3, #17]
   3408a:	745a      	strb	r2, [r3, #17]
   3408c:	7c98      	ldrb	r0, [r3, #18]
   3408e:	749a      	strb	r2, [r3, #18]
   34090:	7cd8      	ldrb	r0, [r3, #19]
   34092:	74da      	strb	r2, [r3, #19]
   34094:	7d18      	ldrb	r0, [r3, #20]
   34096:	751a      	strb	r2, [r3, #20]
   34098:	7d58      	ldrb	r0, [r3, #21]
   3409a:	755a      	strb	r2, [r3, #21]
   3409c:	7d98      	ldrb	r0, [r3, #22]
   3409e:	759a      	strb	r2, [r3, #22]
   340a0:	7dd8      	ldrb	r0, [r3, #23]
   340a2:	75da      	strb	r2, [r3, #23]
   340a4:	2900      	cmp	r1, #0
   340a6:	d047      	beq.n	34138 <ipc_trace_handle+0xc4>
   340a8:	3901      	subs	r1, #1
   340aa:	2903      	cmp	r1, #3
   340ac:	d844      	bhi.n	34138 <ipc_trace_handle+0xc4>
   340ae:	e8df f001 	tbb	[pc, r1]
   340b2:	7b02      	.short	0x7b02
   340b4:	6962      	.short	0x6962
   340b6:	4a47      	ldr	r2, [pc, #284]	; (341d4 <ipc_trace_handle+0x160>)
   340b8:	7811      	ldrb	r1, [r2, #0]
   340ba:	b109      	cbz	r1, 340c0 <ipc_trace_handle+0x4c>
   340bc:	2100      	movs	r1, #0
   340be:	7011      	strb	r1, [r2, #0]
   340c0:	2100      	movs	r1, #0
   340c2:	468e      	mov	lr, r1
   340c4:	468a      	mov	sl, r1
   340c6:	4608      	mov	r0, r1
   340c8:	f8db 2008 	ldr.w	r2, [fp, #8]
   340cc:	4d42      	ldr	r5, [pc, #264]	; (341d8 <ipc_trace_handle+0x164>)
   340ce:	9201      	str	r2, [sp, #4]
   340d0:	4a42      	ldr	r2, [pc, #264]	; (341dc <ipc_trace_handle+0x168>)
   340d2:	682e      	ldr	r6, [r5, #0]
   340d4:	6812      	ldr	r2, [r2, #0]
   340d6:	9200      	str	r2, [sp, #0]
   340d8:	4a41      	ldr	r2, [pc, #260]	; (341e0 <ipc_trace_handle+0x16c>)
   340da:	f8d2 c000 	ldr.w	ip, [r2]
   340de:	4a41      	ldr	r2, [pc, #260]	; (341e4 <ipc_trace_handle+0x170>)
   340e0:	6817      	ldr	r7, [r2, #0]
   340e2:	4a41      	ldr	r2, [pc, #260]	; (341e8 <ipc_trace_handle+0x174>)
   340e4:	f8d2 9000 	ldr.w	r9, [r2]
   340e8:	4a40      	ldr	r2, [pc, #256]	; (341ec <ipc_trace_handle+0x178>)
   340ea:	f8d2 8000 	ldr.w	r8, [r2]
   340ee:	9a01      	ldr	r2, [sp, #4]
   340f0:	4282      	cmp	r2, r0
   340f2:	d124      	bne.n	3413e <ipc_trace_handle+0xca>
   340f4:	f1ba 0f00 	cmp.w	sl, #0
   340f8:	d005      	beq.n	34106 <ipc_trace_handle+0x92>
   340fa:	4a3b      	ldr	r2, [pc, #236]	; (341e8 <ipc_trace_handle+0x174>)
   340fc:	f8c2 9000 	str.w	r9, [r2]
   34100:	4a3a      	ldr	r2, [pc, #232]	; (341ec <ipc_trace_handle+0x178>)
   34102:	f8c2 8000 	str.w	r8, [r2]
   34106:	f1be 0f00 	cmp.w	lr, #0
   3410a:	d004      	beq.n	34116 <ipc_trace_handle+0xa2>
   3410c:	4a34      	ldr	r2, [pc, #208]	; (341e0 <ipc_trace_handle+0x16c>)
   3410e:	f8c2 c000 	str.w	ip, [r2]
   34112:	4a34      	ldr	r2, [pc, #208]	; (341e4 <ipc_trace_handle+0x170>)
   34114:	6017      	str	r7, [r2, #0]
   34116:	b119      	cbz	r1, 34120 <ipc_trace_handle+0xac>
   34118:	4a30      	ldr	r2, [pc, #192]	; (341dc <ipc_trace_handle+0x168>)
   3411a:	9900      	ldr	r1, [sp, #0]
   3411c:	602e      	str	r6, [r5, #0]
   3411e:	6011      	str	r1, [r2, #0]
   34120:	7a1a      	ldrb	r2, [r3, #8]
   34122:	2101      	movs	r1, #1
   34124:	2200      	movs	r2, #0
   34126:	7219      	strb	r1, [r3, #8]
   34128:	7a59      	ldrb	r1, [r3, #9]
   3412a:	725a      	strb	r2, [r3, #9]
   3412c:	7a99      	ldrb	r1, [r3, #10]
   3412e:	729a      	strb	r2, [r3, #10]
   34130:	7ada      	ldrb	r2, [r3, #11]
   34132:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   34136:	72da      	strb	r2, [r3, #11]
   34138:	b003      	add	sp, #12
   3413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3413e:	1c82      	adds	r2, r0, #2
   34140:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
   34144:	6852      	ldr	r2, [r2, #4]
   34146:	7814      	ldrb	r4, [r2, #0]
   34148:	2c62      	cmp	r4, #98	; 0x62
   3414a:	d00a      	beq.n	34162 <ipc_trace_handle+0xee>
   3414c:	2c63      	cmp	r4, #99	; 0x63
   3414e:	d00d      	beq.n	3416c <ipc_trace_handle+0xf8>
   34150:	2c61      	cmp	r4, #97	; 0x61
   34152:	d104      	bne.n	3415e <ipc_trace_handle+0xea>
   34154:	4691      	mov	r9, r2
   34156:	f04f 0a01 	mov.w	sl, #1
   3415a:	f8d2 8004 	ldr.w	r8, [r2, #4]
   3415e:	3001      	adds	r0, #1
   34160:	e7c5      	b.n	340ee <ipc_trace_handle+0x7a>
   34162:	4694      	mov	ip, r2
   34164:	f04f 0e01 	mov.w	lr, #1
   34168:	6857      	ldr	r7, [r2, #4]
   3416a:	e7f8      	b.n	3415e <ipc_trace_handle+0xea>
   3416c:	6851      	ldr	r1, [r2, #4]
   3416e:	4616      	mov	r6, r2
   34170:	9100      	str	r1, [sp, #0]
   34172:	2101      	movs	r1, #1
   34174:	e7f3      	b.n	3415e <ipc_trace_handle+0xea>
   34176:	2101      	movs	r1, #1
   34178:	4a16      	ldr	r2, [pc, #88]	; (341d4 <ipc_trace_handle+0x160>)
   3417a:	7011      	strb	r1, [r2, #0]
   3417c:	7a1a      	ldrb	r2, [r3, #8]
   3417e:	2103      	movs	r1, #3
   34180:	2200      	movs	r2, #0
   34182:	e7d0      	b.n	34126 <ipc_trace_handle+0xb2>
   34184:	7a19      	ldrb	r1, [r3, #8]
   34186:	2104      	movs	r1, #4
   34188:	7219      	strb	r1, [r3, #8]
   3418a:	7a59      	ldrb	r1, [r3, #9]
   3418c:	725a      	strb	r2, [r3, #9]
   3418e:	7a99      	ldrb	r1, [r3, #10]
   34190:	729a      	strb	r2, [r3, #10]
   34192:	7ad9      	ldrb	r1, [r3, #11]
   34194:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   34198:	72d9      	strb	r1, [r3, #11]
   3419a:	4b0e      	ldr	r3, [pc, #56]	; (341d4 <ipc_trace_handle+0x160>)
   3419c:	701a      	strb	r2, [r3, #0]
   3419e:	b003      	add	sp, #12
   341a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   341a4:	f7ff bf3c 	b.w	34020 <nrf_modem_trace_irq_handler>
   341a8:	4b0f      	ldr	r3, [pc, #60]	; (341e8 <ipc_trace_handle+0x174>)
   341aa:	681b      	ldr	r3, [r3, #0]
   341ac:	685a      	ldr	r2, [r3, #4]
   341ae:	4b0f      	ldr	r3, [pc, #60]	; (341ec <ipc_trace_handle+0x178>)
   341b0:	601a      	str	r2, [r3, #0]
   341b2:	4b0b      	ldr	r3, [pc, #44]	; (341e0 <ipc_trace_handle+0x16c>)
   341b4:	681b      	ldr	r3, [r3, #0]
   341b6:	685a      	ldr	r2, [r3, #4]
   341b8:	4b0a      	ldr	r3, [pc, #40]	; (341e4 <ipc_trace_handle+0x170>)
   341ba:	601a      	str	r2, [r3, #0]
   341bc:	4b06      	ldr	r3, [pc, #24]	; (341d8 <ipc_trace_handle+0x164>)
   341be:	681b      	ldr	r3, [r3, #0]
   341c0:	685a      	ldr	r2, [r3, #4]
   341c2:	4b06      	ldr	r3, [pc, #24]	; (341dc <ipc_trace_handle+0x168>)
   341c4:	601a      	str	r2, [r3, #0]
   341c6:	b003      	add	sp, #12
   341c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   341cc:	f7f1 bf22 	b.w	26014 <nrf_modem_os_trace_irq_set>
   341d0:	2001a498 	.word	0x2001a498
   341d4:	2001d3d5 	.word	0x2001d3d5
   341d8:	2001a490 	.word	0x2001a490
   341dc:	2001a484 	.word	0x2001a484
   341e0:	2001a48c 	.word	0x2001a48c
   341e4:	2001a480 	.word	0x2001a480
   341e8:	2001a494 	.word	0x2001a494
   341ec:	2001a488 	.word	0x2001a488

000341f0 <rpc_trace_coredump_in_progress>:
   341f0:	4b01      	ldr	r3, [pc, #4]	; (341f8 <rpc_trace_coredump_in_progress+0x8>)
   341f2:	7818      	ldrb	r0, [r3, #0]
   341f4:	4770      	bx	lr
   341f6:	bf00      	nop
   341f8:	2001d3d5 	.word	0x2001d3d5

000341fc <rpc_transport_ipc_msg_alloc>:
   341fc:	b570      	push	{r4, r5, r6, lr}
   341fe:	4616      	mov	r6, r2
   34200:	2400      	movs	r4, #0
   34202:	6803      	ldr	r3, [r0, #0]
   34204:	42a3      	cmp	r3, r4
   34206:	d101      	bne.n	3420c <rpc_transport_ipc_msg_alloc+0x10>
   34208:	2300      	movs	r3, #0
   3420a:	e01c      	b.n	34246 <rpc_transport_ipc_msg_alloc+0x4a>
   3420c:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   34210:	6855      	ldr	r5, [r2, #4]
   34212:	b2ed      	uxtb	r5, r5
   34214:	2d03      	cmp	r5, #3
   34216:	d118      	bne.n	3424a <rpc_transport_ipc_msg_alloc+0x4e>
   34218:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   3421c:	6093      	str	r3, [r2, #8]
   3421e:	6851      	ldr	r1, [r2, #4]
   34220:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   34224:	6051      	str	r1, [r2, #4]
   34226:	490c      	ldr	r1, [pc, #48]	; (34258 <rpc_transport_ipc_msg_alloc+0x5c>)
   34228:	8808      	ldrh	r0, [r1, #0]
   3422a:	1c44      	adds	r4, r0, #1
   3422c:	800c      	strh	r4, [r1, #0]
   3422e:	6851      	ldr	r1, [r2, #4]
   34230:	b289      	uxth	r1, r1
   34232:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   34236:	6051      	str	r1, [r2, #4]
   34238:	4618      	mov	r0, r3
   3423a:	2240      	movs	r2, #64	; 0x40
   3423c:	2100      	movs	r1, #0
   3423e:	f00d fc8f 	bl	41b60 <memset>
   34242:	4603      	mov	r3, r0
   34244:	6046      	str	r6, [r0, #4]
   34246:	4618      	mov	r0, r3
   34248:	bd70      	pop	{r4, r5, r6, pc}
   3424a:	b915      	cbnz	r5, 34252 <rpc_transport_ipc_msg_alloc+0x56>
   3424c:	6895      	ldr	r5, [r2, #8]
   3424e:	2d00      	cmp	r5, #0
   34250:	d0e2      	beq.n	34218 <rpc_transport_ipc_msg_alloc+0x1c>
   34252:	3401      	adds	r4, #1
   34254:	e7d6      	b.n	34204 <rpc_transport_ipc_msg_alloc+0x8>
   34256:	bf00      	nop
   34258:	2001a5b4 	.word	0x2001a5b4

0003425c <handle_modem_rpc_msg.part.0>:
   3425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34260:	4606      	mov	r6, r0
   34262:	460f      	mov	r7, r1
   34264:	2500      	movs	r5, #0
   34266:	f8df 8074 	ldr.w	r8, [pc, #116]	; 342dc <handle_modem_rpc_msg.part.0+0x80>
   3426a:	6833      	ldr	r3, [r6, #0]
   3426c:	429d      	cmp	r5, r3
   3426e:	d301      	bcc.n	34274 <handle_modem_rpc_msg.part.0+0x18>
   34270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34274:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   34278:	68a3      	ldr	r3, [r4, #8]
   3427a:	b1fb      	cbz	r3, 342bc <handle_modem_rpc_msg.part.0+0x60>
   3427c:	6863      	ldr	r3, [r4, #4]
   3427e:	b2db      	uxtb	r3, r3
   34280:	2b01      	cmp	r3, #1
   34282:	d11b      	bne.n	342bc <handle_modem_rpc_msg.part.0+0x60>
   34284:	6862      	ldr	r2, [r4, #4]
   34286:	f8b8 3000 	ldrh.w	r3, [r8]
   3428a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   3428e:	d115      	bne.n	342bc <handle_modem_rpc_msg.part.0+0x60>
   34290:	2f02      	cmp	r7, #2
   34292:	68a0      	ldr	r0, [r4, #8]
   34294:	d114      	bne.n	342c0 <handle_modem_rpc_msg.part.0+0x64>
   34296:	f7ff fdf3 	bl	33e80 <rpc_handle_data_message>
   3429a:	2802      	cmp	r0, #2
   3429c:	d00e      	beq.n	342bc <handle_modem_rpc_msg.part.0+0x60>
   3429e:	2801      	cmp	r0, #1
   342a0:	d113      	bne.n	342ca <handle_modem_rpc_msg.part.0+0x6e>
   342a2:	6863      	ldr	r3, [r4, #4]
   342a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   342a8:	f043 0302 	orr.w	r3, r3, #2
   342ac:	6063      	str	r3, [r4, #4]
   342ae:	f8b8 3000 	ldrh.w	r3, [r8]
   342b2:	3301      	adds	r3, #1
   342b4:	f8a8 3000 	strh.w	r3, [r8]
   342b8:	f7f1 fe9c 	bl	25ff4 <nrf_modem_os_application_irq_set>
   342bc:	3501      	adds	r5, #1
   342be:	e7d4      	b.n	3426a <handle_modem_rpc_msg.part.0+0xe>
   342c0:	6801      	ldr	r1, [r0, #0]
   342c2:	0c09      	lsrs	r1, r1, #16
   342c4:	f00c f9c9 	bl	4065a <rpc_handle_ctrl_message>
   342c8:	e7e7      	b.n	3429a <handle_modem_rpc_msg.part.0+0x3e>
   342ca:	2800      	cmp	r0, #0
   342cc:	d1ef      	bne.n	342ae <handle_modem_rpc_msg.part.0+0x52>
   342ce:	6863      	ldr	r3, [r4, #4]
   342d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   342d4:	f043 0303 	orr.w	r3, r3, #3
   342d8:	e7e8      	b.n	342ac <handle_modem_rpc_msg.part.0+0x50>
   342da:	bf00      	nop
   342dc:	2001a5b2 	.word	0x2001a5b2

000342e0 <ipc_irq_handler>:
   342e0:	b538      	push	{r3, r4, r5, lr}
   342e2:	4604      	mov	r4, r0
   342e4:	0620      	lsls	r0, r4, #24
   342e6:	d50c      	bpl.n	34302 <ipc_irq_handler+0x22>
   342e8:	f7ff fec4 	bl	34074 <ipc_trace_handle>
   342ec:	f7ff ff80 	bl	341f0 <rpc_trace_coredump_in_progress>
   342f0:	b138      	cbz	r0, 34302 <ipc_irq_handler+0x22>
   342f2:	22e0      	movs	r2, #224	; 0xe0
   342f4:	4b37      	ldr	r3, [pc, #220]	; (343d4 <ipc_irq_handler+0xf4>)
   342f6:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   342fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   342fe:	605a      	str	r2, [r3, #4]
   34300:	bd38      	pop	{r3, r4, r5, pc}
   34302:	07e1      	lsls	r1, r4, #31
   34304:	d539      	bpl.n	3437a <ipc_irq_handler+0x9a>
   34306:	2203      	movs	r2, #3
   34308:	4b33      	ldr	r3, [pc, #204]	; (343d8 <ipc_irq_handler+0xf8>)
   3430a:	701a      	strb	r2, [r3, #0]
   3430c:	4b33      	ldr	r3, [pc, #204]	; (343dc <ipc_irq_handler+0xfc>)
   3430e:	4a34      	ldr	r2, [pc, #208]	; (343e0 <ipc_irq_handler+0x100>)
   34310:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
   34314:	4290      	cmp	r0, r2
   34316:	d02c      	beq.n	34372 <ipc_irq_handler+0x92>
   34318:	d80c      	bhi.n	34334 <ipc_irq_handler+0x54>
   3431a:	3a02      	subs	r2, #2
   3431c:	4290      	cmp	r0, r2
   3431e:	d020      	beq.n	34362 <ipc_irq_handler+0x82>
   34320:	3201      	adds	r2, #1
   34322:	4290      	cmp	r0, r2
   34324:	d021      	beq.n	3436a <ipc_irq_handler+0x8a>
   34326:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
   3432a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   3432e:	f002 f893 	bl	36458 <nrf_modem_fault_handler_internal>
   34332:	e012      	b.n	3435a <ipc_irq_handler+0x7a>
   34334:	4a2b      	ldr	r2, [pc, #172]	; (343e4 <ipc_irq_handler+0x104>)
   34336:	4290      	cmp	r0, r2
   34338:	d80a      	bhi.n	34350 <ipc_irq_handler+0x70>
   3433a:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   3433e:	d80a      	bhi.n	34356 <ipc_irq_handler+0x76>
   34340:	4a29      	ldr	r2, [pc, #164]	; (343e8 <ipc_irq_handler+0x108>)
   34342:	4290      	cmp	r0, r2
   34344:	d1ef      	bne.n	34326 <ipc_irq_handler+0x46>
   34346:	f06f 0204 	mvn.w	r2, #4
   3434a:	4b28      	ldr	r3, [pc, #160]	; (343ec <ipc_irq_handler+0x10c>)
   3434c:	601a      	str	r2, [r3, #0]
   3434e:	e004      	b.n	3435a <ipc_irq_handler+0x7a>
   34350:	4a27      	ldr	r2, [pc, #156]	; (343f0 <ipc_irq_handler+0x110>)
   34352:	4290      	cmp	r0, r2
   34354:	d1e7      	bne.n	34326 <ipc_irq_handler+0x46>
   34356:	4b25      	ldr	r3, [pc, #148]	; (343ec <ipc_irq_handler+0x10c>)
   34358:	6018      	str	r0, [r3, #0]
   3435a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3435e:	f7f1 be69 	b.w	26034 <nrf_modem_os_event_notify>
   34362:	f06f 0215 	mvn.w	r2, #21
   34366:	4b21      	ldr	r3, [pc, #132]	; (343ec <ipc_irq_handler+0x10c>)
   34368:	e7f0      	b.n	3434c <ipc_irq_handler+0x6c>
   3436a:	f06f 025e 	mvn.w	r2, #94	; 0x5e
   3436e:	4b1f      	ldr	r3, [pc, #124]	; (343ec <ipc_irq_handler+0x10c>)
   34370:	e7ec      	b.n	3434c <ipc_irq_handler+0x6c>
   34372:	f06f 020b 	mvn.w	r2, #11
   34376:	4b1d      	ldr	r3, [pc, #116]	; (343ec <ipc_irq_handler+0x10c>)
   34378:	e7e8      	b.n	3434c <ipc_irq_handler+0x6c>
   3437a:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   3437e:	d003      	beq.n	34388 <ipc_irq_handler+0xa8>
   34380:	2202      	movs	r2, #2
   34382:	4b15      	ldr	r3, [pc, #84]	; (343d8 <ipc_irq_handler+0xf8>)
   34384:	701a      	strb	r2, [r3, #0]
   34386:	e7e8      	b.n	3435a <ipc_irq_handler+0x7a>
   34388:	0762      	lsls	r2, r4, #29
   3438a:	d504      	bpl.n	34396 <ipc_irq_handler+0xb6>
   3438c:	4b12      	ldr	r3, [pc, #72]	; (343d8 <ipc_irq_handler+0xf8>)
   3438e:	781a      	ldrb	r2, [r3, #0]
   34390:	b93a      	cbnz	r2, 343a2 <ipc_irq_handler+0xc2>
   34392:	f7f1 fe2f 	bl	25ff4 <nrf_modem_os_application_irq_set>
   34396:	06e3      	lsls	r3, r4, #27
   34398:	d5b2      	bpl.n	34300 <ipc_irq_handler+0x20>
   3439a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3439e:	f7f1 be29 	b.w	25ff4 <nrf_modem_os_application_irq_set>
   343a2:	781a      	ldrb	r2, [r3, #0]
   343a4:	2a01      	cmp	r2, #1
   343a6:	d1f6      	bne.n	34396 <ipc_irq_handler+0xb6>
   343a8:	4a12      	ldr	r2, [pc, #72]	; (343f4 <ipc_irq_handler+0x114>)
   343aa:	4813      	ldr	r0, [pc, #76]	; (343f8 <ipc_irq_handler+0x118>)
   343ac:	6812      	ldr	r2, [r2, #0]
   343ae:	6891      	ldr	r1, [r2, #8]
   343b0:	6041      	str	r1, [r0, #4]
   343b2:	6852      	ldr	r2, [r2, #4]
   343b4:	6002      	str	r2, [r0, #0]
   343b6:	b121      	cbz	r1, 343c2 <ipc_irq_handler+0xe2>
   343b8:	b11a      	cbz	r2, 343c2 <ipc_irq_handler+0xe2>
   343ba:	6809      	ldr	r1, [r1, #0]
   343bc:	b109      	cbz	r1, 343c2 <ipc_irq_handler+0xe2>
   343be:	6812      	ldr	r2, [r2, #0]
   343c0:	b932      	cbnz	r2, 343d0 <ipc_irq_handler+0xf0>
   343c2:	f06f 0104 	mvn.w	r1, #4
   343c6:	4a09      	ldr	r2, [pc, #36]	; (343ec <ipc_irq_handler+0x10c>)
   343c8:	6011      	str	r1, [r2, #0]
   343ca:	2203      	movs	r2, #3
   343cc:	701a      	strb	r2, [r3, #0]
   343ce:	e7e2      	b.n	34396 <ipc_irq_handler+0xb6>
   343d0:	701d      	strb	r5, [r3, #0]
   343d2:	e7e0      	b.n	34396 <ipc_irq_handler+0xb6>
   343d4:	e000e100 	.word	0xe000e100
   343d8:	2001d3d6 	.word	0x2001d3d6
   343dc:	4002a000 	.word	0x4002a000
   343e0:	00010022 	.word	0x00010022
   343e4:	04400004 	.word	0x04400004
   343e8:	00013032 	.word	0x00013032
   343ec:	2001a49c 	.word	0x2001a49c
   343f0:	05500001 	.word	0x05500001
   343f4:	2001a4a8 	.word	0x2001a4a8
   343f8:	2001a4a0 	.word	0x2001a4a0

000343fc <rpc_transport_ipc_data_msg_send>:
   343fc:	b508      	push	{r3, lr}
   343fe:	4b0b      	ldr	r3, [pc, #44]	; (3442c <rpc_transport_ipc_data_msg_send+0x30>)
   34400:	681b      	ldr	r3, [r3, #0]
   34402:	1ac0      	subs	r0, r0, r3
   34404:	4b0a      	ldr	r3, [pc, #40]	; (34430 <rpc_transport_ipc_data_msg_send+0x34>)
   34406:	f3c0 1089 	ubfx	r0, r0, #6, #10
   3440a:	681b      	ldr	r3, [r3, #0]
   3440c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   34410:	6843      	ldr	r3, [r0, #4]
   34412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   34416:	f043 0301 	orr.w	r3, r3, #1
   3441a:	6043      	str	r3, [r0, #4]
   3441c:	2003      	movs	r0, #3
   3441e:	f00b f80c 	bl	3f43a <nrf_modem_os_busywait>
   34422:	2201      	movs	r2, #1
   34424:	4b03      	ldr	r3, [pc, #12]	; (34434 <rpc_transport_ipc_data_msg_send+0x38>)
   34426:	60da      	str	r2, [r3, #12]
   34428:	bd08      	pop	{r3, pc}
   3442a:	bf00      	nop
   3442c:	2001a4b4 	.word	0x2001a4b4
   34430:	2001a4b8 	.word	0x2001a4b8
   34434:	4002a000 	.word	0x4002a000

00034438 <rpc_transport_ipc_ctrl_msg_send>:
   34438:	b508      	push	{r3, lr}
   3443a:	4b0b      	ldr	r3, [pc, #44]	; (34468 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   3443c:	681b      	ldr	r3, [r3, #0]
   3443e:	1ac0      	subs	r0, r0, r3
   34440:	4b0a      	ldr	r3, [pc, #40]	; (3446c <rpc_transport_ipc_ctrl_msg_send+0x34>)
   34442:	f3c0 1089 	ubfx	r0, r0, #6, #10
   34446:	681b      	ldr	r3, [r3, #0]
   34448:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   3444c:	6843      	ldr	r3, [r0, #4]
   3444e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   34452:	f043 0301 	orr.w	r3, r3, #1
   34456:	6043      	str	r3, [r0, #4]
   34458:	2003      	movs	r0, #3
   3445a:	f00a ffee 	bl	3f43a <nrf_modem_os_busywait>
   3445e:	2201      	movs	r2, #1
   34460:	4b03      	ldr	r3, [pc, #12]	; (34470 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   34462:	605a      	str	r2, [r3, #4]
   34464:	bd08      	pop	{r3, pc}
   34466:	bf00      	nop
   34468:	2001a4ac 	.word	0x2001a4ac
   3446c:	2001a4b0 	.word	0x2001a4b0
   34470:	4002a000 	.word	0x4002a000

00034474 <rpc_transport_ipc_data_msg_alloc>:
   34474:	4b05      	ldr	r3, [pc, #20]	; (3448c <rpc_transport_ipc_data_msg_alloc+0x18>)
   34476:	781b      	ldrb	r3, [r3, #0]
   34478:	b933      	cbnz	r3, 34488 <rpc_transport_ipc_data_msg_alloc+0x14>
   3447a:	4b05      	ldr	r3, [pc, #20]	; (34490 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   3447c:	2202      	movs	r2, #2
   3447e:	6819      	ldr	r1, [r3, #0]
   34480:	4b04      	ldr	r3, [pc, #16]	; (34494 <rpc_transport_ipc_data_msg_alloc+0x20>)
   34482:	6818      	ldr	r0, [r3, #0]
   34484:	f7ff beba 	b.w	341fc <rpc_transport_ipc_msg_alloc>
   34488:	2000      	movs	r0, #0
   3448a:	4770      	bx	lr
   3448c:	2001d3d7 	.word	0x2001d3d7
   34490:	2001a4b4 	.word	0x2001a4b4
   34494:	2001a4b8 	.word	0x2001a4b8

00034498 <rpc_transport_ipc_ctrl_msg_alloc>:
   34498:	230a      	movs	r3, #10
   3449a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3449c:	4d0d      	ldr	r5, [pc, #52]	; (344d4 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   3449e:	4e0e      	ldr	r6, [pc, #56]	; (344d8 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   344a0:	9301      	str	r3, [sp, #4]
   344a2:	2201      	movs	r2, #1
   344a4:	6829      	ldr	r1, [r5, #0]
   344a6:	6830      	ldr	r0, [r6, #0]
   344a8:	f7ff fea8 	bl	341fc <rpc_transport_ipc_msg_alloc>
   344ac:	4604      	mov	r4, r0
   344ae:	b938      	cbnz	r0, 344c0 <rpc_transport_ipc_ctrl_msg_alloc+0x28>
   344b0:	f00a ffc5 	bl	3f43e <nrf_modem_os_is_in_isr>
   344b4:	b938      	cbnz	r0, 344c6 <rpc_transport_ipc_ctrl_msg_alloc+0x2e>
   344b6:	a901      	add	r1, sp, #4
   344b8:	f7f1 fc34 	bl	25d24 <nrf_modem_os_timedwait>
   344bc:	306e      	adds	r0, #110	; 0x6e
   344be:	d1f0      	bne.n	344a2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   344c0:	4620      	mov	r0, r4
   344c2:	b002      	add	sp, #8
   344c4:	bd70      	pop	{r4, r5, r6, pc}
   344c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   344ca:	9b01      	ldr	r3, [sp, #4]
   344cc:	4358      	muls	r0, r3
   344ce:	f00a ffb4 	bl	3f43a <nrf_modem_os_busywait>
   344d2:	e7e6      	b.n	344a2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   344d4:	2001a4ac 	.word	0x2001a4ac
   344d8:	2001a4b0 	.word	0x2001a4b0

000344dc <rpc_transport_ipc_data_alloc>:
   344dc:	4b03      	ldr	r3, [pc, #12]	; (344ec <rpc_transport_ipc_data_alloc+0x10>)
   344de:	781b      	ldrb	r3, [r3, #0]
   344e0:	b90b      	cbnz	r3, 344e6 <rpc_transport_ipc_data_alloc+0xa>
   344e2:	f7f1 bdd9 	b.w	26098 <nrf_modem_os_shm_tx_alloc>
   344e6:	2000      	movs	r0, #0
   344e8:	4770      	bx	lr
   344ea:	bf00      	nop
   344ec:	2001d3d7 	.word	0x2001d3d7

000344f0 <nrf_modem_application_irq_handler>:
   344f0:	b510      	push	{r4, lr}
   344f2:	4c08      	ldr	r4, [pc, #32]	; (34514 <nrf_modem_application_irq_handler+0x24>)
   344f4:	f7f1 fd86 	bl	26004 <nrf_modem_os_application_irq_clear>
   344f8:	6820      	ldr	r0, [r4, #0]
   344fa:	b110      	cbz	r0, 34502 <nrf_modem_application_irq_handler+0x12>
   344fc:	2101      	movs	r1, #1
   344fe:	f7ff fead 	bl	3425c <handle_modem_rpc_msg.part.0>
   34502:	6860      	ldr	r0, [r4, #4]
   34504:	b120      	cbz	r0, 34510 <nrf_modem_application_irq_handler+0x20>
   34506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3450a:	2102      	movs	r1, #2
   3450c:	f7ff bea6 	b.w	3425c <handle_modem_rpc_msg.part.0>
   34510:	bd10      	pop	{r4, pc}
   34512:	bf00      	nop
   34514:	2001a4a0 	.word	0x2001a4a0

00034518 <rpc_transport_ipc_msg_free>:
   34518:	2300      	movs	r3, #0
   3451a:	4911      	ldr	r1, [pc, #68]	; (34560 <rpc_transport_ipc_msg_free+0x48>)
   3451c:	b530      	push	{r4, r5, lr}
   3451e:	680a      	ldr	r2, [r1, #0]
   34520:	6814      	ldr	r4, [r2, #0]
   34522:	42a3      	cmp	r3, r4
   34524:	d10b      	bne.n	3453e <rpc_transport_ipc_msg_free+0x26>
   34526:	2300      	movs	r3, #0
   34528:	684a      	ldr	r2, [r1, #4]
   3452a:	6811      	ldr	r1, [r2, #0]
   3452c:	428b      	cmp	r3, r1
   3452e:	d015      	beq.n	3455c <rpc_transport_ipc_msg_free+0x44>
   34530:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   34534:	68a4      	ldr	r4, [r4, #8]
   34536:	42a0      	cmp	r0, r4
   34538:	d008      	beq.n	3454c <rpc_transport_ipc_msg_free+0x34>
   3453a:	3301      	adds	r3, #1
   3453c:	e7f6      	b.n	3452c <rpc_transport_ipc_msg_free+0x14>
   3453e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   34542:	68ad      	ldr	r5, [r5, #8]
   34544:	42a8      	cmp	r0, r5
   34546:	d001      	beq.n	3454c <rpc_transport_ipc_msg_free+0x34>
   34548:	3301      	adds	r3, #1
   3454a:	e7ea      	b.n	34522 <rpc_transport_ipc_msg_free+0xa>
   3454c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   34550:	685a      	ldr	r2, [r3, #4]
   34552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   34556:	f042 0203 	orr.w	r2, r2, #3
   3455a:	605a      	str	r2, [r3, #4]
   3455c:	bd30      	pop	{r4, r5, pc}
   3455e:	bf00      	nop
   34560:	2001a4a0 	.word	0x2001a4a0

00034564 <rpc_transport_ipc_peer_data_free>:
   34564:	b510      	push	{r4, lr}
   34566:	4b0b      	ldr	r3, [pc, #44]	; (34594 <rpc_transport_ipc_peer_data_free+0x30>)
   34568:	4604      	mov	r4, r0
   3456a:	781b      	ldrb	r3, [r3, #0]
   3456c:	2b03      	cmp	r3, #3
   3456e:	d010      	beq.n	34592 <rpc_transport_ipc_peer_data_free+0x2e>
   34570:	f7ff ff92 	bl	34498 <rpc_transport_ipc_ctrl_msg_alloc>
   34574:	b168      	cbz	r0, 34592 <rpc_transport_ipc_peer_data_free+0x2e>
   34576:	2101      	movs	r1, #1
   34578:	2200      	movs	r2, #0
   3457a:	7001      	strb	r1, [r0, #0]
   3457c:	2102      	movs	r1, #2
   3457e:	6084      	str	r4, [r0, #8]
   34580:	7042      	strb	r2, [r0, #1]
   34582:	7081      	strb	r1, [r0, #2]
   34584:	70c2      	strb	r2, [r0, #3]
   34586:	f7ff ff57 	bl	34438 <rpc_transport_ipc_ctrl_msg_send>
   3458a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3458e:	f7f1 bd31 	b.w	25ff4 <nrf_modem_os_application_irq_set>
   34592:	bd10      	pop	{r4, pc}
   34594:	2001d3d6 	.word	0x2001d3d6

00034598 <rpc_transport_ipc_init>:
   34598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3459c:	2200      	movs	r2, #0
   3459e:	b095      	sub	sp, #84	; 0x54
   345a0:	4605      	mov	r5, r0
   345a2:	4957      	ldr	r1, [pc, #348]	; (34700 <rpc_transport_ipc_init+0x168>)
   345a4:	7900      	ldrb	r0, [r0, #4]
   345a6:	f7fe fe51 	bl	3324c <nrfx_ipc_init>
   345aa:	2238      	movs	r2, #56	; 0x38
   345ac:	2100      	movs	r1, #0
   345ae:	a803      	add	r0, sp, #12
   345b0:	f00d fad6 	bl	41b60 <memset>
   345b4:	2302      	movs	r3, #2
   345b6:	9304      	str	r3, [sp, #16]
   345b8:	2308      	movs	r3, #8
   345ba:	9306      	str	r3, [sp, #24]
   345bc:	2320      	movs	r3, #32
   345be:	9308      	str	r3, [sp, #32]
   345c0:	2301      	movs	r3, #1
   345c2:	930b      	str	r3, [sp, #44]	; 0x2c
   345c4:	2304      	movs	r3, #4
   345c6:	930d      	str	r3, [sp, #52]	; 0x34
   345c8:	2310      	movs	r3, #16
   345ca:	f04f 0c40 	mov.w	ip, #64	; 0x40
   345ce:	930f      	str	r3, [sp, #60]	; 0x3c
   345d0:	2380      	movs	r3, #128	; 0x80
   345d2:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   345d6:	23d5      	movs	r3, #213	; 0xd5
   345d8:	a803      	add	r0, sp, #12
   345da:	9313      	str	r3, [sp, #76]	; 0x4c
   345dc:	f7fe fe5c 	bl	33298 <nrfx_ipc_config_load>
   345e0:	6828      	ldr	r0, [r5, #0]
   345e2:	6842      	ldr	r2, [r0, #4]
   345e4:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   345e8:	f040 8085 	bne.w	346f6 <rpc_transport_ipc_init+0x15e>
   345ec:	6941      	ldr	r1, [r0, #20]
   345ee:	68c3      	ldr	r3, [r0, #12]
   345f0:	440b      	add	r3, r1
   345f2:	69c1      	ldr	r1, [r0, #28]
   345f4:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   345f8:	440b      	add	r3, r1
   345fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   345fe:	d87a      	bhi.n	346f6 <rpc_transport_ipc_init+0x15e>
   34600:	2100      	movs	r1, #0
   34602:	6800      	ldr	r0, [r0, #0]
   34604:	f00d faac 	bl	41b60 <memset>
   34608:	682a      	ldr	r2, [r5, #0]
   3460a:	6814      	ldr	r4, [r2, #0]
   3460c:	69d3      	ldr	r3, [r2, #28]
   3460e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   34612:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   34616:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   3461a:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   3461e:	f104 0920 	add.w	r9, r4, #32
   34622:	2b00      	cmp	r3, #0
   34624:	d05c      	beq.n	346e0 <rpc_transport_ipc_init+0x148>
   34626:	f104 0840 	add.w	r8, r4, #64	; 0x40
   3462a:	4936      	ldr	r1, [pc, #216]	; (34704 <rpc_transport_ipc_init+0x16c>)
   3462c:	f8c1 9000 	str.w	r9, [r1]
   34630:	b13b      	cbz	r3, 34642 <rpc_transport_ipc_init+0xaa>
   34632:	6992      	ldr	r2, [r2, #24]
   34634:	4640      	mov	r0, r8
   34636:	f8c8 2004 	str.w	r2, [r8, #4]
   3463a:	f8c8 3000 	str.w	r3, [r8]
   3463e:	f7ff fcdd 	bl	33ffc <ipc_trace_init>
   34642:	6828      	ldr	r0, [r5, #0]
   34644:	2300      	movs	r3, #0
   34646:	6902      	ldr	r2, [r0, #16]
   34648:	2101      	movs	r1, #1
   3464a:	6062      	str	r2, [r4, #4]
   3464c:	6942      	ldr	r2, [r0, #20]
   3464e:	7023      	strb	r3, [r4, #0]
   34650:	60a2      	str	r2, [r4, #8]
   34652:	4a2d      	ldr	r2, [pc, #180]	; (34708 <rpc_transport_ipc_init+0x170>)
   34654:	60e6      	str	r6, [r4, #12]
   34656:	6017      	str	r7, [r2, #0]
   34658:	4a2c      	ldr	r2, [pc, #176]	; (3470c <rpc_transport_ipc_init+0x174>)
   3465a:	6127      	str	r7, [r4, #16]
   3465c:	6016      	str	r6, [r2, #0]
   3465e:	2208      	movs	r2, #8
   34660:	7063      	strb	r3, [r4, #1]
   34662:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   34666:	70a1      	strb	r1, [r4, #2]
   34668:	70e3      	strb	r3, [r4, #3]
   3466a:	f8c4 9014 	str.w	r9, [r4, #20]
   3466e:	f8c4 8018 	str.w	r8, [r4, #24]
   34672:	707b      	strb	r3, [r7, #1]
   34674:	70bb      	strb	r3, [r7, #2]
   34676:	70fb      	strb	r3, [r7, #3]
   34678:	270a      	movs	r7, #10
   3467a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   3467e:	4a24      	ldr	r2, [pc, #144]	; (34710 <rpc_transport_ipc_init+0x178>)
   34680:	7073      	strb	r3, [r6, #1]
   34682:	f8c2 b000 	str.w	fp, [r2]
   34686:	4a23      	ldr	r2, [pc, #140]	; (34714 <rpc_transport_ipc_init+0x17c>)
   34688:	70b3      	strb	r3, [r6, #2]
   3468a:	f8c2 a000 	str.w	sl, [r2]
   3468e:	4a22      	ldr	r2, [pc, #136]	; (34718 <rpc_transport_ipc_init+0x180>)
   34690:	70f3      	strb	r3, [r6, #3]
   34692:	4d22      	ldr	r5, [pc, #136]	; (3471c <rpc_transport_ipc_init+0x184>)
   34694:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   34698:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   3469c:	4c20      	ldr	r4, [pc, #128]	; (34720 <rpc_transport_ipc_init+0x188>)
   3469e:	4a21      	ldr	r2, [pc, #132]	; (34724 <rpc_transport_ipc_init+0x18c>)
   346a0:	7021      	strb	r1, [r4, #0]
   346a2:	602b      	str	r3, [r5, #0]
   346a4:	9302      	str	r3, [sp, #8]
   346a6:	6113      	str	r3, [r2, #16]
   346a8:	6913      	ldr	r3, [r2, #16]
   346aa:	4e1f      	ldr	r6, [pc, #124]	; (34728 <rpc_transport_ipc_init+0x190>)
   346ac:	9302      	str	r3, [sp, #8]
   346ae:	9b02      	ldr	r3, [sp, #8]
   346b0:	7823      	ldrb	r3, [r4, #0]
   346b2:	2b01      	cmp	r3, #1
   346b4:	d100      	bne.n	346b8 <rpc_transport_ipc_init+0x120>
   346b6:	b9ae      	cbnz	r6, 346e4 <rpc_transport_ipc_init+0x14c>
   346b8:	7823      	ldrb	r3, [r4, #0]
   346ba:	2b01      	cmp	r3, #1
   346bc:	bf01      	itttt	eq
   346be:	f06f 0373 	mvneq.w	r3, #115	; 0x73
   346c2:	602b      	streq	r3, [r5, #0]
   346c4:	2303      	moveq	r3, #3
   346c6:	7023      	strbeq	r3, [r4, #0]
   346c8:	682c      	ldr	r4, [r5, #0]
   346ca:	b9b4      	cbnz	r4, 346fa <rpc_transport_ipc_init+0x162>
   346cc:	4b17      	ldr	r3, [pc, #92]	; (3472c <rpc_transport_ipc_init+0x194>)
   346ce:	701c      	strb	r4, [r3, #0]
   346d0:	4b17      	ldr	r3, [pc, #92]	; (34730 <rpc_transport_ipc_init+0x198>)
   346d2:	801c      	strh	r4, [r3, #0]
   346d4:	4b17      	ldr	r3, [pc, #92]	; (34734 <rpc_transport_ipc_init+0x19c>)
   346d6:	801c      	strh	r4, [r3, #0]
   346d8:	4620      	mov	r0, r4
   346da:	b015      	add	sp, #84	; 0x54
   346dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   346e0:	4698      	mov	r8, r3
   346e2:	e7a2      	b.n	3462a <rpc_transport_ipc_init+0x92>
   346e4:	2000      	movs	r0, #0
   346e6:	a901      	add	r1, sp, #4
   346e8:	9701      	str	r7, [sp, #4]
   346ea:	f7f1 fb1b 	bl	25d24 <nrf_modem_os_timedwait>
   346ee:	9b01      	ldr	r3, [sp, #4]
   346f0:	3b0a      	subs	r3, #10
   346f2:	441e      	add	r6, r3
   346f4:	e7dc      	b.n	346b0 <rpc_transport_ipc_init+0x118>
   346f6:	f06f 0415 	mvn.w	r4, #21
   346fa:	f7fe fe0b 	bl	33314 <nrfx_ipc_uninit>
   346fe:	e7eb      	b.n	346d8 <rpc_transport_ipc_init+0x140>
   34700:	000342e1 	.word	0x000342e1
   34704:	2001a4a8 	.word	0x2001a4a8
   34708:	2001a4b8 	.word	0x2001a4b8
   3470c:	2001a4b0 	.word	0x2001a4b0
   34710:	2001a4b4 	.word	0x2001a4b4
   34714:	2001a4ac 	.word	0x2001a4ac
   34718:	4002a000 	.word	0x4002a000
   3471c:	2001a49c 	.word	0x2001a49c
   34720:	2001d3d6 	.word	0x2001d3d6
   34724:	40005600 	.word	0x40005600
   34728:	000249f0 	.word	0x000249f0
   3472c:	2001d3d7 	.word	0x2001d3d7
   34730:	2001a5b4 	.word	0x2001a5b4
   34734:	2001a5b2 	.word	0x2001a5b2

00034738 <sock_init>:
   34738:	f44f 7240 	mov.w	r2, #768	; 0x300
   3473c:	2100      	movs	r1, #0
   3473e:	b508      	push	{r3, lr}
   34740:	4808      	ldr	r0, [pc, #32]	; (34764 <sock_init+0x2c>)
   34742:	f00d fa0d 	bl	41b60 <memset>
   34746:	2100      	movs	r1, #0
   34748:	2208      	movs	r2, #8
   3474a:	4b07      	ldr	r3, [pc, #28]	; (34768 <sock_init+0x30>)
   3474c:	4807      	ldr	r0, [pc, #28]	; (3476c <sock_init+0x34>)
   3474e:	7019      	strb	r1, [r3, #0]
   34750:	4b04      	ldr	r3, [pc, #16]	; (34764 <sock_init+0x2c>)
   34752:	3a01      	subs	r2, #1
   34754:	e9c3 0100 	strd	r0, r1, [r3]
   34758:	6099      	str	r1, [r3, #8]
   3475a:	f103 0360 	add.w	r3, r3, #96	; 0x60
   3475e:	d1f8      	bne.n	34752 <sock_init+0x1a>
   34760:	bd08      	pop	{r3, pc}
   34762:	bf00      	nop
   34764:	20014760 	.word	0x20014760
   34768:	2001d3d8 	.word	0x2001d3d8
   3476c:	1badf11e 	.word	0x1badf11e

00034770 <sock_open>:
   34770:	2300      	movs	r3, #0
   34772:	2060      	movs	r0, #96	; 0x60
   34774:	b530      	push	{r4, r5, lr}
   34776:	4a0d      	ldr	r2, [pc, #52]	; (347ac <sock_open+0x3c>)
   34778:	4c0d      	ldr	r4, [pc, #52]	; (347b0 <sock_open+0x40>)
   3477a:	fb00 f103 	mul.w	r1, r0, r3
   3477e:	588d      	ldr	r5, [r1, r2]
   34780:	42a5      	cmp	r5, r4
   34782:	d10e      	bne.n	347a2 <sock_open+0x32>
   34784:	f04f 33ff 	mov.w	r3, #4294967295
   34788:	1850      	adds	r0, r2, r1
   3478a:	5053      	str	r3, [r2, r1]
   3478c:	4a09      	ldr	r2, [pc, #36]	; (347b4 <sock_open+0x44>)
   3478e:	7f03      	ldrb	r3, [r0, #28]
   34790:	7812      	ldrb	r2, [r2, #0]
   34792:	f362 1386 	bfi	r3, r2, #6, #1
   34796:	7703      	strb	r3, [r0, #28]
   34798:	2302      	movs	r3, #2
   3479a:	8783      	strh	r3, [r0, #60]	; 0x3c
   3479c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   347a0:	bd30      	pop	{r4, r5, pc}
   347a2:	3301      	adds	r3, #1
   347a4:	2b08      	cmp	r3, #8
   347a6:	d1e8      	bne.n	3477a <sock_open+0xa>
   347a8:	2000      	movs	r0, #0
   347aa:	e7f9      	b.n	347a0 <sock_open+0x30>
   347ac:	20014760 	.word	0x20014760
   347b0:	1badf11e 	.word	0x1badf11e
   347b4:	2001d3d8 	.word	0x2001d3d8

000347b8 <sock_find>:
   347b8:	b530      	push	{r4, r5, lr}
   347ba:	2200      	movs	r2, #0
   347bc:	2460      	movs	r4, #96	; 0x60
   347be:	4b06      	ldr	r3, [pc, #24]	; (347d8 <sock_find+0x20>)
   347c0:	fb04 f102 	mul.w	r1, r4, r2
   347c4:	58cd      	ldr	r5, [r1, r3]
   347c6:	4285      	cmp	r5, r0
   347c8:	d101      	bne.n	347ce <sock_find+0x16>
   347ca:	1858      	adds	r0, r3, r1
   347cc:	bd30      	pop	{r4, r5, pc}
   347ce:	3201      	adds	r2, #1
   347d0:	2a08      	cmp	r2, #8
   347d2:	d1f5      	bne.n	347c0 <sock_find+0x8>
   347d4:	2000      	movs	r0, #0
   347d6:	e7f9      	b.n	347cc <sock_find+0x14>
   347d8:	20014760 	.word	0x20014760

000347dc <_sock_close>:
   347dc:	b538      	push	{r3, r4, r5, lr}
   347de:	f7ff ffeb 	bl	347b8 <sock_find>
   347e2:	4604      	mov	r4, r0
   347e4:	1d05      	adds	r5, r0, #4
   347e6:	4628      	mov	r0, r5
   347e8:	f00c f9ec 	bl	40bc4 <pkt_flush>
   347ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   347ee:	b108      	cbz	r0, 347f4 <_sock_close+0x18>
   347f0:	f7f1 fc3e 	bl	26070 <nrf_modem_os_free>
   347f4:	225c      	movs	r2, #92	; 0x5c
   347f6:	2100      	movs	r1, #0
   347f8:	4628      	mov	r0, r5
   347fa:	f00d f9b1 	bl	41b60 <memset>
   347fe:	4b01      	ldr	r3, [pc, #4]	; (34804 <_sock_close+0x28>)
   34800:	6023      	str	r3, [r4, #0]
   34802:	bd38      	pop	{r3, r4, r5, pc}
   34804:	1badf11e 	.word	0x1badf11e

00034808 <sock_flow_control_set>:
   34808:	1e02      	subs	r2, r0, #0
   3480a:	bf18      	it	ne
   3480c:	2201      	movne	r2, #1
   3480e:	4b0a      	ldr	r3, [pc, #40]	; (34838 <sock_flow_control_set+0x30>)
   34810:	b570      	push	{r4, r5, r6, lr}
   34812:	701a      	strb	r2, [r3, #0]
   34814:	2560      	movs	r5, #96	; 0x60
   34816:	2200      	movs	r2, #0
   34818:	4908      	ldr	r1, [pc, #32]	; (3483c <sock_flow_control_set+0x34>)
   3481a:	4e09      	ldr	r6, [pc, #36]	; (34840 <sock_flow_control_set+0x38>)
   3481c:	fb05 f302 	mul.w	r3, r5, r2
   34820:	585c      	ldr	r4, [r3, r1]
   34822:	3201      	adds	r2, #1
   34824:	42b4      	cmp	r4, r6
   34826:	bf1f      	itttt	ne
   34828:	185b      	addne	r3, r3, r1
   3482a:	7f1c      	ldrbne	r4, [r3, #28]
   3482c:	f360 1486 	bfine	r4, r0, #6, #1
   34830:	771c      	strbne	r4, [r3, #28]
   34832:	2a08      	cmp	r2, #8
   34834:	d1f2      	bne.n	3481c <sock_flow_control_set+0x14>
   34836:	bd70      	pop	{r4, r5, r6, pc}
   34838:	2001d3d8 	.word	0x2001d3d8
   3483c:	20014760 	.word	0x20014760
   34840:	1badf11e 	.word	0x1badf11e

00034844 <on_getaddrinfo_res>:
   34844:	2301      	movs	r3, #1
   34846:	4a03      	ldr	r2, [pc, #12]	; (34854 <on_getaddrinfo_res+0x10>)
   34848:	7013      	strb	r3, [r2, #0]
   3484a:	4a03      	ldr	r2, [pc, #12]	; (34858 <on_getaddrinfo_res+0x14>)
   3484c:	6010      	str	r0, [r2, #0]
   3484e:	4618      	mov	r0, r3
   34850:	4770      	bx	lr
   34852:	bf00      	nop
   34854:	2001d3d9 	.word	0x2001d3d9
   34858:	2001a4cc 	.word	0x2001a4cc

0003485c <addrinfo_init>:
   3485c:	2201      	movs	r2, #1
   3485e:	4802      	ldr	r0, [pc, #8]	; (34868 <addrinfo_init+0xc>)
   34860:	4611      	mov	r1, r2
   34862:	f7f1 bb35 	b.w	25ed0 <nrf_modem_os_sem_init>
   34866:	bf00      	nop
   34868:	2001a4bc 	.word	0x2001a4bc

0003486c <nrf_getaddrinfo>:
   3486c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34870:	4604      	mov	r4, r0
   34872:	460e      	mov	r6, r1
   34874:	4617      	mov	r7, r2
   34876:	461d      	mov	r5, r3
   34878:	f001 fe04 	bl	36484 <nrf_modem_state_is_initialized>
   3487c:	b940      	cbnz	r0, 34890 <nrf_getaddrinfo+0x24>
   3487e:	2001      	movs	r0, #1
   34880:	f7f1 fb12 	bl	25ea8 <nrf_modem_os_errno_set>
   34884:	f04f 34ff 	mov.w	r4, #4294967295
   34888:	4620      	mov	r0, r4
   3488a:	b003      	add	sp, #12
   3488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34890:	ea54 0306 	orrs.w	r3, r4, r6
   34894:	f000 817c 	beq.w	34b90 <nrf_getaddrinfo+0x324>
   34898:	b327      	cbz	r7, 348e4 <nrf_getaddrinfo+0x78>
   3489a:	683b      	ldr	r3, [r7, #0]
   3489c:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   348a0:	f023 0302 	bic.w	r3, r3, #2
   348a4:	2b00      	cmp	r3, #0
   348a6:	f040 8176 	bne.w	34b96 <nrf_getaddrinfo+0x32a>
   348aa:	6878      	ldr	r0, [r7, #4]
   348ac:	b938      	cbnz	r0, 348be <nrf_getaddrinfo+0x52>
   348ae:	68b8      	ldr	r0, [r7, #8]
   348b0:	b160      	cbz	r0, 348cc <nrf_getaddrinfo+0x60>
   348b2:	f00c f916 	bl	40ae2 <sock_type_is_valid>
   348b6:	b948      	cbnz	r0, 348cc <nrf_getaddrinfo+0x60>
   348b8:	f240 1413 	movw	r4, #275	; 0x113
   348bc:	e7e4      	b.n	34888 <nrf_getaddrinfo+0x1c>
   348be:	f00c f907 	bl	40ad0 <sock_family_is_valid>
   348c2:	2800      	cmp	r0, #0
   348c4:	d1f3      	bne.n	348ae <nrf_getaddrinfo+0x42>
   348c6:	f44f 7487 	mov.w	r4, #270	; 0x10e
   348ca:	e7dd      	b.n	34888 <nrf_getaddrinfo+0x1c>
   348cc:	68f8      	ldr	r0, [r7, #12]
   348ce:	b148      	cbz	r0, 348e4 <nrf_getaddrinfo+0x78>
   348d0:	68b9      	ldr	r1, [r7, #8]
   348d2:	f00c f91a 	bl	40b0a <sock_proto_supports_type>
   348d6:	b928      	cbnz	r0, 348e4 <nrf_getaddrinfo+0x78>
   348d8:	206b      	movs	r0, #107	; 0x6b
   348da:	f7f1 fae5 	bl	25ea8 <nrf_modem_os_errno_set>
   348de:	f240 1415 	movw	r4, #277	; 0x115
   348e2:	e7d1      	b.n	34888 <nrf_getaddrinfo+0x1c>
   348e4:	4baf      	ldr	r3, [pc, #700]	; (34ba4 <nrf_getaddrinfo+0x338>)
   348e6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   348ea:	6818      	ldr	r0, [r3, #0]
   348ec:	f7f1 fb48 	bl	25f80 <nrf_modem_os_sem_take>
   348f0:	4680      	mov	r8, r0
   348f2:	2800      	cmp	r0, #0
   348f4:	f040 8152 	bne.w	34b9c <nrf_getaddrinfo+0x330>
   348f8:	2e00      	cmp	r6, #0
   348fa:	d042      	beq.n	34982 <nrf_getaddrinfo+0x116>
   348fc:	b31f      	cbz	r7, 34946 <nrf_getaddrinfo+0xda>
   348fe:	683b      	ldr	r3, [r7, #0]
   34900:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   34904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   34908:	d11d      	bne.n	34946 <nrf_getaddrinfo+0xda>
   3490a:	683b      	ldr	r3, [r7, #0]
   3490c:	04db      	lsls	r3, r3, #19
   3490e:	d53c      	bpl.n	3498a <nrf_getaddrinfo+0x11e>
   34910:	213a      	movs	r1, #58	; 0x3a
   34912:	4630      	mov	r0, r6
   34914:	f00d fae2 	bl	41edc <strchr>
   34918:	4681      	mov	r9, r0
   3491a:	b120      	cbz	r0, 34926 <nrf_getaddrinfo+0xba>
   3491c:	48a2      	ldr	r0, [pc, #648]	; (34ba8 <nrf_getaddrinfo+0x33c>)
   3491e:	f7e8 fc90 	bl	1d242 <strlen>
   34922:	eb09 0600 	add.w	r6, r9, r0
   34926:	4630      	mov	r0, r6
   34928:	49a0      	ldr	r1, [pc, #640]	; (34bac <nrf_getaddrinfo+0x340>)
   3492a:	f00d fb33 	bl	41f94 <strstr>
   3492e:	4681      	mov	r9, r0
   34930:	b318      	cbz	r0, 3497a <nrf_getaddrinfo+0x10e>
   34932:	489e      	ldr	r0, [pc, #632]	; (34bac <nrf_getaddrinfo+0x340>)
   34934:	f7e8 fc85 	bl	1d242 <strlen>
   34938:	220a      	movs	r2, #10
   3493a:	2100      	movs	r1, #0
   3493c:	4448      	add	r0, r9
   3493e:	f006 faab 	bl	3ae98 <strtol>
   34942:	4606      	mov	r6, r0
   34944:	e023      	b.n	3498e <nrf_getaddrinfo+0x122>
   34946:	220a      	movs	r2, #10
   34948:	2100      	movs	r1, #0
   3494a:	4630      	mov	r0, r6
   3494c:	f006 fbc0 	bl	3b0d0 <strtoul>
   34950:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   34954:	1e42      	subs	r2, r0, #1
   34956:	429a      	cmp	r2, r3
   34958:	f200 8114 	bhi.w	34b84 <nrf_getaddrinfo+0x318>
   3495c:	0203      	lsls	r3, r0, #8
   3495e:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   34962:	4b93      	ldr	r3, [pc, #588]	; (34bb0 <nrf_getaddrinfo+0x344>)
   34964:	8018      	strh	r0, [r3, #0]
   34966:	2f00      	cmp	r7, #0
   34968:	d1cf      	bne.n	3490a <nrf_getaddrinfo+0x9e>
   3496a:	f04f 36ff 	mov.w	r6, #4294967295
   3496e:	2200      	movs	r2, #0
   34970:	4b90      	ldr	r3, [pc, #576]	; (34bb4 <nrf_getaddrinfo+0x348>)
   34972:	601a      	str	r2, [r3, #0]
   34974:	b997      	cbnz	r7, 3499c <nrf_getaddrinfo+0x130>
   34976:	2301      	movs	r3, #1
   34978:	e014      	b.n	349a4 <nrf_getaddrinfo+0x138>
   3497a:	4601      	mov	r1, r0
   3497c:	220a      	movs	r2, #10
   3497e:	4630      	mov	r0, r6
   34980:	e7dd      	b.n	3493e <nrf_getaddrinfo+0xd2>
   34982:	4b8b      	ldr	r3, [pc, #556]	; (34bb0 <nrf_getaddrinfo+0x344>)
   34984:	8018      	strh	r0, [r3, #0]
   34986:	2f00      	cmp	r7, #0
   34988:	d0ef      	beq.n	3496a <nrf_getaddrinfo+0xfe>
   3498a:	f04f 36ff 	mov.w	r6, #4294967295
   3498e:	6878      	ldr	r0, [r7, #4]
   34990:	2800      	cmp	r0, #0
   34992:	d0ec      	beq.n	3496e <nrf_getaddrinfo+0x102>
   34994:	f00c fdaf 	bl	414f6 <nrf_af_to_rpc_af>
   34998:	4b86      	ldr	r3, [pc, #536]	; (34bb4 <nrf_getaddrinfo+0x348>)
   3499a:	6018      	str	r0, [r3, #0]
   3499c:	68bb      	ldr	r3, [r7, #8]
   3499e:	2b00      	cmp	r3, #0
   349a0:	bf08      	it	eq
   349a2:	2301      	moveq	r3, #1
   349a4:	f8df b210 	ldr.w	fp, [pc, #528]	; 34bb8 <nrf_getaddrinfo+0x34c>
   349a8:	f8cb 3000 	str.w	r3, [fp]
   349ac:	2f00      	cmp	r7, #0
   349ae:	d049      	beq.n	34a44 <nrf_getaddrinfo+0x1d8>
   349b0:	68fb      	ldr	r3, [r7, #12]
   349b2:	2b00      	cmp	r3, #0
   349b4:	bf08      	it	eq
   349b6:	2306      	moveq	r3, #6
   349b8:	f8df a200 	ldr.w	sl, [pc, #512]	; 34bbc <nrf_getaddrinfo+0x350>
   349bc:	f8ca 3000 	str.w	r3, [sl]
   349c0:	b10f      	cbz	r7, 349c6 <nrf_getaddrinfo+0x15a>
   349c2:	f8d7 8000 	ldr.w	r8, [r7]
   349c6:	4f7e      	ldr	r7, [pc, #504]	; (34bc0 <nrf_getaddrinfo+0x354>)
   349c8:	4620      	mov	r0, r4
   349ca:	f8c7 8000 	str.w	r8, [r7]
   349ce:	b10c      	cbz	r4, 349d4 <nrf_getaddrinfo+0x168>
   349d0:	f7e8 fc37 	bl	1d242 <strlen>
   349d4:	f00b fe9a 	bl	4070c <rpc_client_request_alloc>
   349d8:	4680      	mov	r8, r0
   349da:	2800      	cmp	r0, #0
   349dc:	f000 80d5 	beq.w	34b8a <nrf_getaddrinfo+0x31e>
   349e0:	6106      	str	r6, [r0, #16]
   349e2:	b144      	cbz	r4, 349f6 <nrf_getaddrinfo+0x18a>
   349e4:	6806      	ldr	r6, [r0, #0]
   349e6:	4620      	mov	r0, r4
   349e8:	f7e8 fc2b 	bl	1d242 <strlen>
   349ec:	4621      	mov	r1, r4
   349ee:	4602      	mov	r2, r0
   349f0:	4630      	mov	r0, r6
   349f2:	f00d f895 	bl	41b20 <memcpy>
   349f6:	4b6f      	ldr	r3, [pc, #444]	; (34bb4 <nrf_getaddrinfo+0x348>)
   349f8:	4642      	mov	r2, r8
   349fa:	681b      	ldr	r3, [r3, #0]
   349fc:	f247 010d 	movw	r1, #28685	; 0x700d
   34a00:	f8c8 3018 	str.w	r3, [r8, #24]
   34a04:	f8db 3000 	ldr.w	r3, [fp]
   34a08:	2004      	movs	r0, #4
   34a0a:	f8c8 301c 	str.w	r3, [r8, #28]
   34a0e:	f8da 3000 	ldr.w	r3, [sl]
   34a12:	4e6c      	ldr	r6, [pc, #432]	; (34bc4 <nrf_getaddrinfo+0x358>)
   34a14:	f8c8 3020 	str.w	r3, [r8, #32]
   34a18:	683b      	ldr	r3, [r7, #0]
   34a1a:	f8c8 3014 	str.w	r3, [r8, #20]
   34a1e:	f00b fe7b 	bl	40718 <rpc_client_request_send>
   34a22:	2300      	movs	r3, #0
   34a24:	7033      	strb	r3, [r6, #0]
   34a26:	f04f 33ff 	mov.w	r3, #4294967295
   34a2a:	9301      	str	r3, [sp, #4]
   34a2c:	2000      	movs	r0, #0
   34a2e:	a901      	add	r1, sp, #4
   34a30:	f7f1 f978 	bl	25d24 <nrf_modem_os_timedwait>
   34a34:	4604      	mov	r4, r0
   34a36:	b138      	cbz	r0, 34a48 <nrf_getaddrinfo+0x1dc>
   34a38:	206e      	movs	r0, #110	; 0x6e
   34a3a:	f7f1 fa35 	bl	25ea8 <nrf_modem_os_errno_set>
   34a3e:	f46f 748a 	mvn.w	r4, #276	; 0x114
   34a42:	e721      	b.n	34888 <nrf_getaddrinfo+0x1c>
   34a44:	2306      	movs	r3, #6
   34a46:	e7b7      	b.n	349b8 <nrf_getaddrinfo+0x14c>
   34a48:	7833      	ldrb	r3, [r6, #0]
   34a4a:	2b01      	cmp	r3, #1
   34a4c:	d1ee      	bne.n	34a2c <nrf_getaddrinfo+0x1c0>
   34a4e:	4b5e      	ldr	r3, [pc, #376]	; (34bc8 <nrf_getaddrinfo+0x35c>)
   34a50:	681b      	ldr	r3, [r3, #0]
   34a52:	6958      	ldr	r0, [r3, #20]
   34a54:	2800      	cmp	r0, #0
   34a56:	f040 8091 	bne.w	34b7c <nrf_getaddrinfo+0x310>
   34a5a:	2020      	movs	r0, #32
   34a5c:	681e      	ldr	r6, [r3, #0]
   34a5e:	f7f1 faff 	bl	26060 <nrf_modem_os_alloc>
   34a62:	6028      	str	r0, [r5, #0]
   34a64:	b300      	cbz	r0, 34aa8 <nrf_getaddrinfo+0x23c>
   34a66:	f8d6 8008 	ldr.w	r8, [r6, #8]
   34a6a:	f1b8 0f01 	cmp.w	r8, #1
   34a6e:	d013      	beq.n	34a98 <nrf_getaddrinfo+0x22c>
   34a70:	f1b8 0f02 	cmp.w	r8, #2
   34a74:	d03a      	beq.n	34aec <nrf_getaddrinfo+0x280>
   34a76:	f44f 7487 	mov.w	r4, #270	; 0x10e
   34a7a:	4b53      	ldr	r3, [pc, #332]	; (34bc8 <nrf_getaddrinfo+0x35c>)
   34a7c:	681b      	ldr	r3, [r3, #0]
   34a7e:	6818      	ldr	r0, [r3, #0]
   34a80:	b108      	cbz	r0, 34a86 <nrf_getaddrinfo+0x21a>
   34a82:	f00b fe53 	bl	4072c <rpc_client_data_free>
   34a86:	4b50      	ldr	r3, [pc, #320]	; (34bc8 <nrf_getaddrinfo+0x35c>)
   34a88:	6818      	ldr	r0, [r3, #0]
   34a8a:	f00b fe4c 	bl	40726 <rpc_client_message_free>
   34a8e:	4b45      	ldr	r3, [pc, #276]	; (34ba4 <nrf_getaddrinfo+0x338>)
   34a90:	6818      	ldr	r0, [r3, #0]
   34a92:	f7f1 fa55 	bl	25f40 <nrf_modem_os_sem_give>
   34a96:	e6f7      	b.n	34888 <nrf_getaddrinfo+0x1c>
   34a98:	2010      	movs	r0, #16
   34a9a:	f7f1 fae1 	bl	26060 <nrf_modem_os_alloc>
   34a9e:	4681      	mov	r9, r0
   34aa0:	b928      	cbnz	r0, 34aae <nrf_getaddrinfo+0x242>
   34aa2:	6828      	ldr	r0, [r5, #0]
   34aa4:	f7f1 fae4 	bl	26070 <nrf_modem_os_free>
   34aa8:	f240 140f 	movw	r4, #271	; 0x10f
   34aac:	e7e5      	b.n	34a7a <nrf_getaddrinfo+0x20e>
   34aae:	2210      	movs	r2, #16
   34ab0:	493f      	ldr	r1, [pc, #252]	; (34bb0 <nrf_getaddrinfo+0x344>)
   34ab2:	7002      	strb	r2, [r0, #0]
   34ab4:	8809      	ldrh	r1, [r1, #0]
   34ab6:	f8c0 8004 	str.w	r8, [r0, #4]
   34aba:	8101      	strh	r1, [r0, #8]
   34abc:	69b1      	ldr	r1, [r6, #24]
   34abe:	60c1      	str	r1, [r0, #12]
   34ac0:	6829      	ldr	r1, [r5, #0]
   34ac2:	610a      	str	r2, [r1, #16]
   34ac4:	683a      	ldr	r2, [r7, #0]
   34ac6:	f8d5 8000 	ldr.w	r8, [r5]
   34aca:	f012 0202 	ands.w	r2, r2, #2
   34ace:	d052      	beq.n	34b76 <nrf_getaddrinfo+0x30a>
   34ad0:	8af0      	ldrh	r0, [r6, #22]
   34ad2:	3001      	adds	r0, #1
   34ad4:	f7f1 fac4 	bl	26060 <nrf_modem_os_alloc>
   34ad8:	682a      	ldr	r2, [r5, #0]
   34ada:	f8c8 0018 	str.w	r0, [r8, #24]
   34ade:	6990      	ldr	r0, [r2, #24]
   34ae0:	bb38      	cbnz	r0, 34b32 <nrf_getaddrinfo+0x2c6>
   34ae2:	4628      	mov	r0, r5
   34ae4:	f7f1 fac4 	bl	26070 <nrf_modem_os_free>
   34ae8:	4648      	mov	r0, r9
   34aea:	e7db      	b.n	34aa4 <nrf_getaddrinfo+0x238>
   34aec:	2024      	movs	r0, #36	; 0x24
   34aee:	f7f1 fab7 	bl	26060 <nrf_modem_os_alloc>
   34af2:	4681      	mov	r9, r0
   34af4:	2800      	cmp	r0, #0
   34af6:	d0d4      	beq.n	34aa2 <nrf_getaddrinfo+0x236>
   34af8:	2224      	movs	r2, #36	; 0x24
   34afa:	4621      	mov	r1, r4
   34afc:	f00d f830 	bl	41b60 <memset>
   34b00:	2224      	movs	r2, #36	; 0x24
   34b02:	f889 2000 	strb.w	r2, [r9]
   34b06:	4a2a      	ldr	r2, [pc, #168]	; (34bb0 <nrf_getaddrinfo+0x344>)
   34b08:	f8c9 8004 	str.w	r8, [r9, #4]
   34b0c:	8812      	ldrh	r2, [r2, #0]
   34b0e:	f109 0110 	add.w	r1, r9, #16
   34b12:	f8a9 2008 	strh.w	r2, [r9, #8]
   34b16:	f106 0028 	add.w	r0, r6, #40	; 0x28
   34b1a:	f106 0218 	add.w	r2, r6, #24
   34b1e:	f852 cb04 	ldr.w	ip, [r2], #4
   34b22:	4282      	cmp	r2, r0
   34b24:	f841 cb04 	str.w	ip, [r1], #4
   34b28:	d1f9      	bne.n	34b1e <nrf_getaddrinfo+0x2b2>
   34b2a:	2124      	movs	r1, #36	; 0x24
   34b2c:	682a      	ldr	r2, [r5, #0]
   34b2e:	6111      	str	r1, [r2, #16]
   34b30:	e7c8      	b.n	34ac4 <nrf_getaddrinfo+0x258>
   34b32:	f8b6 c014 	ldrh.w	ip, [r6, #20]
   34b36:	f106 0118 	add.w	r1, r6, #24
   34b3a:	8af2      	ldrh	r2, [r6, #22]
   34b3c:	4461      	add	r1, ip
   34b3e:	f00c ffef 	bl	41b20 <memcpy>
   34b42:	2000      	movs	r0, #0
   34b44:	6829      	ldr	r1, [r5, #0]
   34b46:	8af2      	ldrh	r2, [r6, #22]
   34b48:	6989      	ldr	r1, [r1, #24]
   34b4a:	5488      	strb	r0, [r1, r2]
   34b4c:	68b0      	ldr	r0, [r6, #8]
   34b4e:	f8d5 8000 	ldr.w	r8, [r5]
   34b52:	f00c fcd1 	bl	414f8 <rpc_af_to_nrf_af>
   34b56:	2300      	movs	r3, #0
   34b58:	682a      	ldr	r2, [r5, #0]
   34b5a:	f8db 1000 	ldr.w	r1, [fp]
   34b5e:	f8c8 0004 	str.w	r0, [r8, #4]
   34b62:	6091      	str	r1, [r2, #8]
   34b64:	f8da 1000 	ldr.w	r1, [sl]
   34b68:	f8c2 9014 	str.w	r9, [r2, #20]
   34b6c:	60d1      	str	r1, [r2, #12]
   34b6e:	6839      	ldr	r1, [r7, #0]
   34b70:	61d3      	str	r3, [r2, #28]
   34b72:	6011      	str	r1, [r2, #0]
   34b74:	e781      	b.n	34a7a <nrf_getaddrinfo+0x20e>
   34b76:	f8c8 2018 	str.w	r2, [r8, #24]
   34b7a:	e7e7      	b.n	34b4c <nrf_getaddrinfo+0x2e0>
   34b7c:	f00c fcfe 	bl	4157c <rpc_error_to_nrf_gai_errno>
   34b80:	4604      	mov	r4, r0
   34b82:	e77a      	b.n	34a7a <nrf_getaddrinfo+0x20e>
   34b84:	f44f 7489 	mov.w	r4, #274	; 0x112
   34b88:	e781      	b.n	34a8e <nrf_getaddrinfo+0x222>
   34b8a:	f240 140f 	movw	r4, #271	; 0x10f
   34b8e:	e77e      	b.n	34a8e <nrf_getaddrinfo+0x222>
   34b90:	f240 1411 	movw	r4, #273	; 0x111
   34b94:	e678      	b.n	34888 <nrf_getaddrinfo+0x1c>
   34b96:	f240 1403 	movw	r4, #259	; 0x103
   34b9a:	e675      	b.n	34888 <nrf_getaddrinfo+0x1c>
   34b9c:	f44f 7481 	mov.w	r4, #258	; 0x102
   34ba0:	e672      	b.n	34888 <nrf_getaddrinfo+0x1c>
   34ba2:	bf00      	nop
   34ba4:	2001a4bc 	.word	0x2001a4bc
   34ba8:	0004c2aa 	.word	0x0004c2aa
   34bac:	0004c29c 	.word	0x0004c29c
   34bb0:	2001a5b6 	.word	0x2001a5b6
   34bb4:	2001a4c0 	.word	0x2001a4c0
   34bb8:	2001a4d0 	.word	0x2001a4d0
   34bbc:	2001a4c8 	.word	0x2001a4c8
   34bc0:	2001a4c4 	.word	0x2001a4c4
   34bc4:	2001d3d9 	.word	0x2001d3d9
   34bc8:	2001a4cc 	.word	0x2001a4cc

00034bcc <rpc_ip_event_handler>:
   34bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34bce:	f248 030f 	movw	r3, #32783	; 0x800f
   34bd2:	4299      	cmp	r1, r3
   34bd4:	4605      	mov	r5, r0
   34bd6:	460e      	mov	r6, r1
   34bd8:	d00b      	beq.n	34bf2 <rpc_ip_event_handler+0x26>
   34bda:	f249 0304 	movw	r3, #36868	; 0x9004
   34bde:	4299      	cmp	r1, r3
   34be0:	d00a      	beq.n	34bf8 <rpc_ip_event_handler+0x2c>
   34be2:	f248 030d 	movw	r3, #32781	; 0x800d
   34be6:	4299      	cmp	r1, r3
   34be8:	d117      	bne.n	34c1a <rpc_ip_event_handler+0x4e>
   34bea:	f7ff fe2b 	bl	34844 <on_getaddrinfo_res>
   34bee:	b2c0      	uxtb	r0, r0
   34bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34bf2:	f00b fff5 	bl	40be0 <on_conf_dnssrv_res>
   34bf6:	e7fa      	b.n	34bee <rpc_ip_event_handler+0x22>
   34bf8:	6903      	ldr	r3, [r0, #16]
   34bfa:	2b03      	cmp	r3, #3
   34bfc:	d806      	bhi.n	34c0c <rpc_ip_event_handler+0x40>
   34bfe:	e8df f003 	tbb	[pc, r3]
   34c02:	0a02      	.short	0x0a02
   34c04:	0702      	.short	0x0702
   34c06:	2000      	movs	r0, #0
   34c08:	f7ff fdfe 	bl	34808 <sock_flow_control_set>
   34c0c:	2000      	movs	r0, #0
   34c0e:	e7ef      	b.n	34bf0 <rpc_ip_event_handler+0x24>
   34c10:	2201      	movs	r2, #1
   34c12:	4b71      	ldr	r3, [pc, #452]	; (34dd8 <rpc_ip_event_handler+0x20c>)
   34c14:	701a      	strb	r2, [r3, #0]
   34c16:	2001      	movs	r0, #1
   34c18:	e7f6      	b.n	34c08 <rpc_ip_event_handler+0x3c>
   34c1a:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   34c1e:	bf8c      	ite	hi
   34c20:	68c0      	ldrhi	r0, [r0, #12]
   34c22:	6928      	ldrls	r0, [r5, #16]
   34c24:	f7ff fdc8 	bl	347b8 <sock_find>
   34c28:	4604      	mov	r4, r0
   34c2a:	b928      	cbnz	r0, 34c38 <rpc_ip_event_handler+0x6c>
   34c2c:	6828      	ldr	r0, [r5, #0]
   34c2e:	2800      	cmp	r0, #0
   34c30:	d0ec      	beq.n	34c0c <rpc_ip_event_handler+0x40>
   34c32:	f00b fd7b 	bl	4072c <rpc_client_data_free>
   34c36:	e7e9      	b.n	34c0c <rpc_ip_event_handler+0x40>
   34c38:	f248 030c 	movw	r3, #32780	; 0x800c
   34c3c:	429e      	cmp	r6, r3
   34c3e:	d823      	bhi.n	34c88 <rpc_ip_event_handler+0xbc>
   34c40:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   34c44:	d9f2      	bls.n	34c2c <rpc_ip_event_handler+0x60>
   34c46:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   34c4a:	3e01      	subs	r6, #1
   34c4c:	2e0b      	cmp	r6, #11
   34c4e:	d8ed      	bhi.n	34c2c <rpc_ip_event_handler+0x60>
   34c50:	a301      	add	r3, pc, #4	; (adr r3, 34c58 <rpc_ip_event_handler+0x8c>)
   34c52:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   34c56:	bf00      	nop
   34c58:	00034cfb 	.word	0x00034cfb
   34c5c:	00034d17 	.word	0x00034d17
   34c60:	00034cfb 	.word	0x00034cfb
   34c64:	00034cfb 	.word	0x00034cfb
   34c68:	00034cfb 	.word	0x00034cfb
   34c6c:	00034cfb 	.word	0x00034cfb
   34c70:	00034cfb 	.word	0x00034cfb
   34c74:	00034cfb 	.word	0x00034cfb
   34c78:	00034cf3 	.word	0x00034cf3
   34c7c:	00034c2d 	.word	0x00034c2d
   34c80:	00034c2d 	.word	0x00034c2d
   34c84:	00034d5b 	.word	0x00034d5b
   34c88:	f249 0302 	movw	r3, #36866	; 0x9002
   34c8c:	429e      	cmp	r6, r3
   34c8e:	d068      	beq.n	34d62 <rpc_ip_event_handler+0x196>
   34c90:	d822      	bhi.n	34cd8 <rpc_ip_event_handler+0x10c>
   34c92:	f248 0381 	movw	r3, #32897	; 0x8081
   34c96:	429e      	cmp	r6, r3
   34c98:	f000 8098 	beq.w	34dcc <rpc_ip_event_handler+0x200>
   34c9c:	f249 0301 	movw	r3, #36865	; 0x9001
   34ca0:	429e      	cmp	r6, r3
   34ca2:	d1c3      	bne.n	34c2c <rpc_ip_event_handler+0x60>
   34ca4:	2010      	movs	r0, #16
   34ca6:	f7f1 f9db 	bl	26060 <nrf_modem_os_alloc>
   34caa:	4606      	mov	r6, r0
   34cac:	2800      	cmp	r0, #0
   34cae:	d065      	beq.n	34d7c <rpc_ip_event_handler+0x1b0>
   34cb0:	2710      	movs	r7, #16
   34cb2:	2100      	movs	r1, #0
   34cb4:	463a      	mov	r2, r7
   34cb6:	f00c ff53 	bl	41b60 <memset>
   34cba:	682b      	ldr	r3, [r5, #0]
   34cbc:	6073      	str	r3, [r6, #4]
   34cbe:	686b      	ldr	r3, [r5, #4]
   34cc0:	8133      	strh	r3, [r6, #8]
   34cc2:	8a6b      	ldrh	r3, [r5, #18]
   34cc4:	2b04      	cmp	r3, #4
   34cc6:	d051      	beq.n	34d6c <rpc_ip_event_handler+0x1a0>
   34cc8:	42bb      	cmp	r3, r7
   34cca:	d064      	beq.n	34d96 <rpc_ip_event_handler+0x1ca>
   34ccc:	4620      	mov	r0, r4
   34cce:	4631      	mov	r1, r6
   34cd0:	f00b fe45 	bl	4095e <sock_pkt_append>
   34cd4:	2000      	movs	r0, #0
   34cd6:	e78a      	b.n	34bee <rpc_ip_event_handler+0x22>
   34cd8:	f249 0303 	movw	r3, #36867	; 0x9003
   34cdc:	429e      	cmp	r6, r3
   34cde:	d010      	beq.n	34d02 <rpc_ip_event_handler+0x136>
   34ce0:	f249 0382 	movw	r3, #36994	; 0x9082
   34ce4:	429e      	cmp	r6, r3
   34ce6:	d1a1      	bne.n	34c2c <rpc_ip_event_handler+0x60>
   34ce8:	4601      	mov	r1, r0
   34cea:	4628      	mov	r0, r5
   34cec:	f000 fb36 	bl	3535c <on_tls_handshake_ntf>
   34cf0:	e77d      	b.n	34bee <rpc_ip_event_handler+0x22>
   34cf2:	7f03      	ldrb	r3, [r0, #28]
   34cf4:	f043 0302 	orr.w	r3, r3, #2
   34cf8:	7723      	strb	r3, [r4, #28]
   34cfa:	4628      	mov	r0, r5
   34cfc:	f00c fc58 	bl	415b0 <res_forward>
   34d00:	e775      	b.n	34bee <rpc_ip_event_handler+0x22>
   34d02:	7f03      	ldrb	r3, [r0, #28]
   34d04:	f043 0302 	orr.w	r3, r3, #2
   34d08:	7703      	strb	r3, [r0, #28]
   34d0a:	6928      	ldr	r0, [r5, #16]
   34d0c:	2869      	cmp	r0, #105	; 0x69
   34d0e:	d109      	bne.n	34d24 <rpc_ip_event_handler+0x158>
   34d10:	2368      	movs	r3, #104	; 0x68
   34d12:	61a3      	str	r3, [r4, #24]
   34d14:	e77a      	b.n	34c0c <rpc_ip_event_handler+0x40>
   34d16:	7f03      	ldrb	r3, [r0, #28]
   34d18:	68ee      	ldr	r6, [r5, #12]
   34d1a:	f36f 0382 	bfc	r3, #2, #1
   34d1e:	7703      	strb	r3, [r0, #28]
   34d20:	6968      	ldr	r0, [r5, #20]
   34d22:	b118      	cbz	r0, 34d2c <rpc_ip_event_handler+0x160>
   34d24:	f000 fba8 	bl	35478 <rpc_error_to_nrf_errno>
   34d28:	61a0      	str	r0, [r4, #24]
   34d2a:	e76f      	b.n	34c0c <rpc_ip_event_handler+0x40>
   34d2c:	61a0      	str	r0, [r4, #24]
   34d2e:	4620      	mov	r0, r4
   34d30:	f00b fe46 	bl	409c0 <sock_proto_is_secure>
   34d34:	b918      	cbnz	r0, 34d3e <rpc_ip_event_handler+0x172>
   34d36:	7f23      	ldrb	r3, [r4, #28]
   34d38:	f043 0308 	orr.w	r3, r3, #8
   34d3c:	7723      	strb	r3, [r4, #28]
   34d3e:	4620      	mov	r0, r4
   34d40:	f00b fe3e 	bl	409c0 <sock_proto_is_secure>
   34d44:	2800      	cmp	r0, #0
   34d46:	f43f af61 	beq.w	34c0c <rpc_ip_event_handler+0x40>
   34d4a:	2e00      	cmp	r6, #0
   34d4c:	f43f af5e 	beq.w	34c0c <rpc_ip_event_handler+0x40>
   34d50:	2100      	movs	r1, #0
   34d52:	4620      	mov	r0, r4
   34d54:	f000 fb18 	bl	35388 <tls_attach>
   34d58:	e758      	b.n	34c0c <rpc_ip_event_handler+0x40>
   34d5a:	7f03      	ldrb	r3, [r0, #28]
   34d5c:	f36f 1345 	bfc	r3, #5, #1
   34d60:	e7ca      	b.n	34cf8 <rpc_ip_event_handler+0x12c>
   34d62:	7f03      	ldrb	r3, [r0, #28]
   34d64:	f043 0320 	orr.w	r3, r3, #32
   34d68:	7703      	strb	r3, [r0, #28]
   34d6a:	e74f      	b.n	34c0c <rpc_ip_event_handler+0x40>
   34d6c:	4638      	mov	r0, r7
   34d6e:	f7f1 f977 	bl	26060 <nrf_modem_os_alloc>
   34d72:	60f0      	str	r0, [r6, #12]
   34d74:	b920      	cbnz	r0, 34d80 <rpc_ip_event_handler+0x1b4>
   34d76:	4630      	mov	r0, r6
   34d78:	f7f1 f97a 	bl	26070 <nrf_modem_os_free>
   34d7c:	2002      	movs	r0, #2
   34d7e:	e736      	b.n	34bee <rpc_ip_event_handler+0x22>
   34d80:	2301      	movs	r3, #1
   34d82:	7007      	strb	r7, [r0, #0]
   34d84:	7c6a      	ldrb	r2, [r5, #17]
   34d86:	6043      	str	r3, [r0, #4]
   34d88:	7c2b      	ldrb	r3, [r5, #16]
   34d8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   34d8e:	8103      	strh	r3, [r0, #8]
   34d90:	696b      	ldr	r3, [r5, #20]
   34d92:	60c3      	str	r3, [r0, #12]
   34d94:	e79a      	b.n	34ccc <rpc_ip_event_handler+0x100>
   34d96:	2024      	movs	r0, #36	; 0x24
   34d98:	f7f1 f962 	bl	26060 <nrf_modem_os_alloc>
   34d9c:	60f0      	str	r0, [r6, #12]
   34d9e:	2800      	cmp	r0, #0
   34da0:	d0e9      	beq.n	34d76 <rpc_ip_event_handler+0x1aa>
   34da2:	2324      	movs	r3, #36	; 0x24
   34da4:	7003      	strb	r3, [r0, #0]
   34da6:	2302      	movs	r3, #2
   34da8:	7c6a      	ldrb	r2, [r5, #17]
   34daa:	6043      	str	r3, [r0, #4]
   34dac:	7c2b      	ldrb	r3, [r5, #16]
   34dae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   34db2:	8103      	strh	r3, [r0, #8]
   34db4:	f105 0214 	add.w	r2, r5, #20
   34db8:	f100 0310 	add.w	r3, r0, #16
   34dbc:	3524      	adds	r5, #36	; 0x24
   34dbe:	f852 1b04 	ldr.w	r1, [r2], #4
   34dc2:	42aa      	cmp	r2, r5
   34dc4:	f843 1b04 	str.w	r1, [r3], #4
   34dc8:	d1f9      	bne.n	34dbe <rpc_ip_event_handler+0x1f2>
   34dca:	e77f      	b.n	34ccc <rpc_ip_event_handler+0x100>
   34dcc:	4601      	mov	r1, r0
   34dce:	4628      	mov	r0, r5
   34dd0:	f000 fab4 	bl	3533c <on_tls_attach_res>
   34dd4:	e70b      	b.n	34bee <rpc_ip_event_handler+0x22>
   34dd6:	bf00      	nop
   34dd8:	2001d3da 	.word	0x2001d3da

00034ddc <ip_interface_init>:
   34ddc:	b508      	push	{r3, lr}
   34dde:	f7ff fcab 	bl	34738 <sock_init>
   34de2:	f7ff fd3b 	bl	3485c <addrinfo_init>
   34de6:	2200      	movs	r2, #0
   34de8:	4b04      	ldr	r3, [pc, #16]	; (34dfc <ip_interface_init+0x20>)
   34dea:	4805      	ldr	r0, [pc, #20]	; (34e00 <ip_interface_init+0x24>)
   34dec:	701a      	strb	r2, [r3, #0]
   34dee:	2201      	movs	r2, #1
   34df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   34df4:	4611      	mov	r1, r2
   34df6:	f7f1 b86b 	b.w	25ed0 <nrf_modem_os_sem_init>
   34dfa:	bf00      	nop
   34dfc:	2001d3da 	.word	0x2001d3da
   34e00:	2001a4d4 	.word	0x2001a4d4

00034e04 <nrf_connect>:
   34e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34e08:	4607      	mov	r7, r0
   34e0a:	460c      	mov	r4, r1
   34e0c:	4690      	mov	r8, r2
   34e0e:	f7ff fcd3 	bl	347b8 <sock_find>
   34e12:	4605      	mov	r5, r0
   34e14:	b940      	cbnz	r0, 34e28 <nrf_connect+0x24>
   34e16:	2009      	movs	r0, #9
   34e18:	f7f1 f846 	bl	25ea8 <nrf_modem_os_errno_set>
   34e1c:	f04f 34ff 	mov.w	r4, #4294967295
   34e20:	4620      	mov	r0, r4
   34e22:	b002      	add	sp, #8
   34e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34e28:	f00b fdda 	bl	409e0 <sock_is_connected>
   34e2c:	b108      	cbz	r0, 34e32 <nrf_connect+0x2e>
   34e2e:	207f      	movs	r0, #127	; 0x7f
   34e30:	e7f2      	b.n	34e18 <nrf_connect+0x14>
   34e32:	4628      	mov	r0, r5
   34e34:	f00b fdd0 	bl	409d8 <sock_is_connecting>
   34e38:	4606      	mov	r6, r0
   34e3a:	b108      	cbz	r0, 34e40 <nrf_connect+0x3c>
   34e3c:	2078      	movs	r0, #120	; 0x78
   34e3e:	e7eb      	b.n	34e18 <nrf_connect+0x14>
   34e40:	b90c      	cbnz	r4, 34e46 <nrf_connect+0x42>
   34e42:	200e      	movs	r0, #14
   34e44:	e7e8      	b.n	34e18 <nrf_connect+0x14>
   34e46:	4641      	mov	r1, r8
   34e48:	4620      	mov	r0, r4
   34e4a:	f00b fe78 	bl	40b3e <sock_sockaddr_len_is_valid>
   34e4e:	b908      	cbnz	r0, 34e54 <nrf_connect+0x50>
   34e50:	2016      	movs	r0, #22
   34e52:	e7e1      	b.n	34e18 <nrf_connect+0x14>
   34e54:	4621      	mov	r1, r4
   34e56:	4628      	mov	r0, r5
   34e58:	f00b fe85 	bl	40b66 <sock_sockaddr_fam_is_valid>
   34e5c:	b908      	cbnz	r0, 34e62 <nrf_connect+0x5e>
   34e5e:	206a      	movs	r0, #106	; 0x6a
   34e60:	e7da      	b.n	34e18 <nrf_connect+0x14>
   34e62:	4628      	mov	r0, r5
   34e64:	f00b fdc4 	bl	409f0 <sock_is_nonblock>
   34e68:	b1a8      	cbz	r0, 34e96 <nrf_connect+0x92>
   34e6a:	696b      	ldr	r3, [r5, #20]
   34e6c:	2b11      	cmp	r3, #17
   34e6e:	d00b      	beq.n	34e88 <nrf_connect+0x84>
   34e70:	4628      	mov	r0, r5
   34e72:	f00b fda5 	bl	409c0 <sock_proto_is_secure>
   34e76:	b130      	cbz	r0, 34e86 <nrf_connect+0x82>
   34e78:	4b32      	ldr	r3, [pc, #200]	; (34f44 <nrf_connect+0x140>)
   34e7a:	6818      	ldr	r0, [r3, #0]
   34e7c:	f00a fae1 	bl	3f442 <nrf_modem_os_sem_count_get>
   34e80:	b908      	cbnz	r0, 34e86 <nrf_connect+0x82>
   34e82:	2010      	movs	r0, #16
   34e84:	e7c8      	b.n	34e18 <nrf_connect+0x14>
   34e86:	2601      	movs	r6, #1
   34e88:	2000      	movs	r0, #0
   34e8a:	f00b fc3f 	bl	4070c <rpc_client_request_alloc>
   34e8e:	4602      	mov	r2, r0
   34e90:	b918      	cbnz	r0, 34e9a <nrf_connect+0x96>
   34e92:	2069      	movs	r0, #105	; 0x69
   34e94:	e7c0      	b.n	34e18 <nrf_connect+0x14>
   34e96:	4606      	mov	r6, r0
   34e98:	e7f6      	b.n	34e88 <nrf_connect+0x84>
   34e9a:	2114      	movs	r1, #20
   34e9c:	2300      	movs	r3, #0
   34e9e:	7201      	strb	r1, [r0, #8]
   34ea0:	6861      	ldr	r1, [r4, #4]
   34ea2:	6107      	str	r7, [r0, #16]
   34ea4:	2901      	cmp	r1, #1
   34ea6:	7243      	strb	r3, [r0, #9]
   34ea8:	7283      	strb	r3, [r0, #10]
   34eaa:	72c3      	strb	r3, [r0, #11]
   34eac:	d00e      	beq.n	34ecc <nrf_connect+0xc8>
   34eae:	2902      	cmp	r1, #2
   34eb0:	d014      	beq.n	34edc <nrf_connect+0xd8>
   34eb2:	7f2b      	ldrb	r3, [r5, #28]
   34eb4:	f247 0102 	movw	r1, #28674	; 0x7002
   34eb8:	f043 0304 	orr.w	r3, r3, #4
   34ebc:	772b      	strb	r3, [r5, #28]
   34ebe:	2004      	movs	r0, #4
   34ec0:	60d6      	str	r6, [r2, #12]
   34ec2:	f00b fc29 	bl	40718 <rpc_client_request_send>
   34ec6:	b1ce      	cbz	r6, 34efc <nrf_connect+0xf8>
   34ec8:	2077      	movs	r0, #119	; 0x77
   34eca:	e7a5      	b.n	34e18 <nrf_connect+0x14>
   34ecc:	8921      	ldrh	r1, [r4, #8]
   34ece:	75c3      	strb	r3, [r0, #23]
   34ed0:	8281      	strh	r1, [r0, #20]
   34ed2:	2104      	movs	r1, #4
   34ed4:	7581      	strb	r1, [r0, #22]
   34ed6:	68e3      	ldr	r3, [r4, #12]
   34ed8:	6183      	str	r3, [r0, #24]
   34eda:	e7ea      	b.n	34eb2 <nrf_connect+0xae>
   34edc:	8921      	ldrh	r1, [r4, #8]
   34ede:	75c3      	strb	r3, [r0, #23]
   34ee0:	8281      	strh	r1, [r0, #20]
   34ee2:	2110      	movs	r1, #16
   34ee4:	1863      	adds	r3, r4, r1
   34ee6:	7581      	strb	r1, [r0, #22]
   34ee8:	3420      	adds	r4, #32
   34eea:	f100 0118 	add.w	r1, r0, #24
   34eee:	f853 0b04 	ldr.w	r0, [r3], #4
   34ef2:	42a3      	cmp	r3, r4
   34ef4:	f841 0b04 	str.w	r0, [r1], #4
   34ef8:	d1f9      	bne.n	34eee <nrf_connect+0xea>
   34efa:	e7da      	b.n	34eb2 <nrf_connect+0xae>
   34efc:	4628      	mov	r0, r5
   34efe:	f00b fdd5 	bl	40aac <sock_sndtimeo_ms_get>
   34f02:	9001      	str	r0, [sp, #4]
   34f04:	4628      	mov	r0, r5
   34f06:	f00b fd67 	bl	409d8 <sock_is_connecting>
   34f0a:	b918      	cbnz	r0, 34f14 <nrf_connect+0x110>
   34f0c:	69ac      	ldr	r4, [r5, #24]
   34f0e:	b16c      	cbz	r4, 34f2c <nrf_connect+0x128>
   34f10:	4620      	mov	r0, r4
   34f12:	e781      	b.n	34e18 <nrf_connect+0x14>
   34f14:	2000      	movs	r0, #0
   34f16:	a901      	add	r1, sp, #4
   34f18:	f7f0 ff04 	bl	25d24 <nrf_modem_os_timedwait>
   34f1c:	2800      	cmp	r0, #0
   34f1e:	d0f1      	beq.n	34f04 <nrf_connect+0x100>
   34f20:	f110 0f0b 	cmn.w	r0, #11
   34f24:	bf0c      	ite	eq
   34f26:	2074      	moveq	r0, #116	; 0x74
   34f28:	206e      	movne	r0, #110	; 0x6e
   34f2a:	e775      	b.n	34e18 <nrf_connect+0x14>
   34f2c:	4628      	mov	r0, r5
   34f2e:	f00b fd47 	bl	409c0 <sock_proto_is_secure>
   34f32:	2800      	cmp	r0, #0
   34f34:	f43f af74 	beq.w	34e20 <nrf_connect+0x1c>
   34f38:	4628      	mov	r0, r5
   34f3a:	9901      	ldr	r1, [sp, #4]
   34f3c:	f000 fa24 	bl	35388 <tls_attach>
   34f40:	4604      	mov	r4, r0
   34f42:	e76d      	b.n	34e20 <nrf_connect+0x1c>
   34f44:	2001a4d4 	.word	0x2001a4d4

00034f48 <nrf_sendto>:
   34f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   34f4e:	4682      	mov	sl, r0
   34f50:	4689      	mov	r9, r1
   34f52:	4617      	mov	r7, r2
   34f54:	461e      	mov	r6, r3
   34f56:	f7ff fc2f 	bl	347b8 <sock_find>
   34f5a:	4604      	mov	r4, r0
   34f5c:	b928      	cbnz	r0, 34f6a <nrf_sendto+0x22>
   34f5e:	2009      	movs	r0, #9
   34f60:	f7f0 ffa2 	bl	25ea8 <nrf_modem_os_errno_set>
   34f64:	f04f 34ff 	mov.w	r4, #4294967295
   34f68:	e096      	b.n	35098 <nrf_sendto+0x150>
   34f6a:	f036 0340 	bics.w	r3, r6, #64	; 0x40
   34f6e:	d001      	beq.n	34f74 <nrf_sendto+0x2c>
   34f70:	205f      	movs	r0, #95	; 0x5f
   34f72:	e7f5      	b.n	34f60 <nrf_sendto+0x18>
   34f74:	2d00      	cmp	r5, #0
   34f76:	f000 80dc 	beq.w	35132 <nrf_sendto+0x1ea>
   34f7a:	f00b fd12 	bl	409a2 <sock_is_stream>
   34f7e:	b9b8      	cbnz	r0, 34fb0 <nrf_sendto+0x68>
   34f80:	4629      	mov	r1, r5
   34f82:	4620      	mov	r0, r4
   34f84:	f00b fdef 	bl	40b66 <sock_sockaddr_fam_is_valid>
   34f88:	b908      	cbnz	r0, 34f8e <nrf_sendto+0x46>
   34f8a:	206a      	movs	r0, #106	; 0x6a
   34f8c:	e7e8      	b.n	34f60 <nrf_sendto+0x18>
   34f8e:	4628      	mov	r0, r5
   34f90:	990d      	ldr	r1, [sp, #52]	; 0x34
   34f92:	f00b fdd4 	bl	40b3e <sock_sockaddr_len_is_valid>
   34f96:	b908      	cbnz	r0, 34f9c <nrf_sendto+0x54>
   34f98:	2016      	movs	r0, #22
   34f9a:	e7e1      	b.n	34f60 <nrf_sendto+0x18>
   34f9c:	4620      	mov	r0, r4
   34f9e:	f00b fd05 	bl	409ac <sock_is_datagram>
   34fa2:	b128      	cbz	r0, 34fb0 <nrf_sendto+0x68>
   34fa4:	4620      	mov	r0, r4
   34fa6:	f00b fd0b 	bl	409c0 <sock_proto_is_secure>
   34faa:	b108      	cbz	r0, 34fb0 <nrf_sendto+0x68>
   34fac:	207f      	movs	r0, #127	; 0x7f
   34fae:	e7d7      	b.n	34f60 <nrf_sendto+0x18>
   34fb0:	4620      	mov	r0, r4
   34fb2:	f00b fd25 	bl	40a00 <sock_is_closed>
   34fb6:	b108      	cbz	r0, 34fbc <nrf_sendto+0x74>
   34fb8:	69a0      	ldr	r0, [r4, #24]
   34fba:	e7d1      	b.n	34f60 <nrf_sendto+0x18>
   34fbc:	4620      	mov	r0, r4
   34fbe:	f00b fd75 	bl	40aac <sock_sndtimeo_ms_get>
   34fc2:	9000      	str	r0, [sp, #0]
   34fc4:	4620      	mov	r0, r4
   34fc6:	f00b fd13 	bl	409f0 <sock_is_nonblock>
   34fca:	bb18      	cbnz	r0, 35014 <nrf_sendto+0xcc>
   34fcc:	f3c6 1880 	ubfx	r8, r6, #6, #1
   34fd0:	4620      	mov	r0, r4
   34fd2:	f00b fce6 	bl	409a2 <sock_is_stream>
   34fd6:	b140      	cbz	r0, 34fea <nrf_sendto+0xa2>
   34fd8:	4620      	mov	r0, r4
   34fda:	f00b fcf1 	bl	409c0 <sock_proto_is_secure>
   34fde:	b120      	cbz	r0, 34fea <nrf_sendto+0xa2>
   34fe0:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   34fe4:	bf28      	it	cs
   34fe6:	f44f 6700 	movcs.w	r7, #2048	; 0x800
   34fea:	4620      	mov	r0, r4
   34fec:	f00b fd13 	bl	40a16 <sock_has_flow_control>
   34ff0:	b118      	cbz	r0, 34ffa <nrf_sendto+0xb2>
   34ff2:	4620      	mov	r0, r4
   34ff4:	f00b fd04 	bl	40a00 <sock_is_closed>
   34ff8:	b178      	cbz	r0, 3501a <nrf_sendto+0xd2>
   34ffa:	4638      	mov	r0, r7
   34ffc:	f00b fb86 	bl	4070c <rpc_client_request_alloc>
   35000:	4683      	mov	fp, r0
   35002:	b9b8      	cbnz	r0, 35034 <nrf_sendto+0xec>
   35004:	4669      	mov	r1, sp
   35006:	f7f0 fe8d 	bl	25d24 <nrf_modem_os_timedwait>
   3500a:	b980      	cbnz	r0, 3502e <nrf_sendto+0xe6>
   3500c:	f1b8 0f00 	cmp.w	r8, #0
   35010:	d0f3      	beq.n	34ffa <nrf_sendto+0xb2>
   35012:	e005      	b.n	35020 <nrf_sendto+0xd8>
   35014:	f04f 0801 	mov.w	r8, #1
   35018:	e7da      	b.n	34fd0 <nrf_sendto+0x88>
   3501a:	f1b8 0f00 	cmp.w	r8, #0
   3501e:	d001      	beq.n	35024 <nrf_sendto+0xdc>
   35020:	200b      	movs	r0, #11
   35022:	e79d      	b.n	34f60 <nrf_sendto+0x18>
   35024:	4669      	mov	r1, sp
   35026:	f7f0 fe7d 	bl	25d24 <nrf_modem_os_timedwait>
   3502a:	2800      	cmp	r0, #0
   3502c:	d0dd      	beq.n	34fea <nrf_sendto+0xa2>
   3502e:	f00c fd51 	bl	41ad4 <abs>
   35032:	e795      	b.n	34f60 <nrf_sendto+0x18>
   35034:	f8c0 a010 	str.w	sl, [r0, #16]
   35038:	f1b9 0f00 	cmp.w	r9, #0
   3503c:	d004      	beq.n	35048 <nrf_sendto+0x100>
   3503e:	463a      	mov	r2, r7
   35040:	4649      	mov	r1, r9
   35042:	6800      	ldr	r0, [r0, #0]
   35044:	f00c fd6c 	bl	41b20 <memcpy>
   35048:	6b22      	ldr	r2, [r4, #48]	; 0x30
   3504a:	b112      	cbz	r2, 35052 <nrf_sendto+0x10a>
   3504c:	4316      	orrs	r6, r2
   3504e:	2200      	movs	r2, #0
   35050:	6322      	str	r2, [r4, #48]	; 0x30
   35052:	2d00      	cmp	r5, #0
   35054:	d044      	beq.n	350e0 <nrf_sendto+0x198>
   35056:	4620      	mov	r0, r4
   35058:	f00b fca3 	bl	409a2 <sock_is_stream>
   3505c:	2800      	cmp	r0, #0
   3505e:	d13f      	bne.n	350e0 <nrf_sendto+0x198>
   35060:	2218      	movs	r2, #24
   35062:	f88b 2008 	strb.w	r2, [fp, #8]
   35066:	686a      	ldr	r2, [r5, #4]
   35068:	f88b 0009 	strb.w	r0, [fp, #9]
   3506c:	2a01      	cmp	r2, #1
   3506e:	f88b 000a 	strb.w	r0, [fp, #10]
   35072:	f88b 000b 	strb.w	r0, [fp, #11]
   35076:	f8cb 6014 	str.w	r6, [fp, #20]
   3507a:	d011      	beq.n	350a0 <nrf_sendto+0x158>
   3507c:	2a02      	cmp	r2, #2
   3507e:	d01b      	beq.n	350b8 <nrf_sendto+0x170>
   35080:	f247 0007 	movw	r0, #28679	; 0x7007
   35084:	4659      	mov	r1, fp
   35086:	aa01      	add	r2, sp, #4
   35088:	f000 fa02 	bl	35490 <req_forward>
   3508c:	4603      	mov	r3, r0
   3508e:	bbb0      	cbnz	r0, 350fe <nrf_sendto+0x1b6>
   35090:	9801      	ldr	r0, [sp, #4]
   35092:	6984      	ldr	r4, [r0, #24]
   35094:	f00b fb47 	bl	40726 <rpc_client_message_free>
   35098:	4620      	mov	r0, r4
   3509a:	b003      	add	sp, #12
   3509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350a0:	892a      	ldrh	r2, [r5, #8]
   350a2:	f88b 001b 	strb.w	r0, [fp, #27]
   350a6:	f8ab 2018 	strh.w	r2, [fp, #24]
   350aa:	2204      	movs	r2, #4
   350ac:	f88b 201a 	strb.w	r2, [fp, #26]
   350b0:	68ea      	ldr	r2, [r5, #12]
   350b2:	f8cb 201c 	str.w	r2, [fp, #28]
   350b6:	e7e3      	b.n	35080 <nrf_sendto+0x138>
   350b8:	892a      	ldrh	r2, [r5, #8]
   350ba:	f10b 011c 	add.w	r1, fp, #28
   350be:	f8ab 2018 	strh.w	r2, [fp, #24]
   350c2:	2210      	movs	r2, #16
   350c4:	f88b 001b 	strb.w	r0, [fp, #27]
   350c8:	f88b 201a 	strb.w	r2, [fp, #26]
   350cc:	f105 0020 	add.w	r0, r5, #32
   350d0:	18aa      	adds	r2, r5, r2
   350d2:	f852 cb04 	ldr.w	ip, [r2], #4
   350d6:	4282      	cmp	r2, r0
   350d8:	f841 cb04 	str.w	ip, [r1], #4
   350dc:	d1f9      	bne.n	350d2 <nrf_sendto+0x18a>
   350de:	e7cf      	b.n	35080 <nrf_sendto+0x138>
   350e0:	2200      	movs	r2, #0
   350e2:	2104      	movs	r1, #4
   350e4:	f247 0006 	movw	r0, #28678	; 0x7006
   350e8:	f88b 1008 	strb.w	r1, [fp, #8]
   350ec:	f88b 2009 	strb.w	r2, [fp, #9]
   350f0:	f88b 200a 	strb.w	r2, [fp, #10]
   350f4:	f88b 200b 	strb.w	r2, [fp, #11]
   350f8:	f8cb 6014 	str.w	r6, [fp, #20]
   350fc:	e7c2      	b.n	35084 <nrf_sendto+0x13c>
   350fe:	286e      	cmp	r0, #110	; 0x6e
   35100:	f43f af2e 	beq.w	34f60 <nrf_sendto+0x18>
   35104:	280c      	cmp	r0, #12
   35106:	dc09      	bgt.n	3511c <nrf_sendto+0x1d4>
   35108:	280a      	cmp	r0, #10
   3510a:	dd0a      	ble.n	35122 <nrf_sendto+0x1da>
   3510c:	4b0f      	ldr	r3, [pc, #60]	; (3514c <nrf_sendto+0x204>)
   3510e:	7818      	ldrb	r0, [r3, #0]
   35110:	b148      	cbz	r0, 35126 <nrf_sendto+0x1de>
   35112:	f1b8 0f00 	cmp.w	r8, #0
   35116:	f43f af68 	beq.w	34fea <nrf_sendto+0xa2>
   3511a:	e781      	b.n	35020 <nrf_sendto+0xd8>
   3511c:	288c      	cmp	r0, #140	; 0x8c
   3511e:	f43f af1f 	beq.w	34f60 <nrf_sendto+0x18>
   35122:	4618      	mov	r0, r3
   35124:	e71c      	b.n	34f60 <nrf_sendto+0x18>
   35126:	4669      	mov	r1, sp
   35128:	f7f0 fdfc 	bl	25d24 <nrf_modem_os_timedwait>
   3512c:	2800      	cmp	r0, #0
   3512e:	d0f0      	beq.n	35112 <nrf_sendto+0x1ca>
   35130:	e77d      	b.n	3502e <nrf_sendto+0xe6>
   35132:	f00b fc3b 	bl	409ac <sock_is_datagram>
   35136:	2800      	cmp	r0, #0
   35138:	f43f af3a 	beq.w	34fb0 <nrf_sendto+0x68>
   3513c:	4620      	mov	r0, r4
   3513e:	f00b fc4f 	bl	409e0 <sock_is_connected>
   35142:	2800      	cmp	r0, #0
   35144:	f47f af34 	bne.w	34fb0 <nrf_sendto+0x68>
   35148:	2079      	movs	r0, #121	; 0x79
   3514a:	e709      	b.n	34f60 <nrf_sendto+0x18>
   3514c:	2001d3da 	.word	0x2001d3da

00035150 <nrf_setsockopt>:
   35150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35154:	b085      	sub	sp, #20
   35156:	4680      	mov	r8, r0
   35158:	4689      	mov	r9, r1
   3515a:	4617      	mov	r7, r2
   3515c:	461d      	mov	r5, r3
   3515e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   35160:	f7ff fb2a 	bl	347b8 <sock_find>
   35164:	b928      	cbnz	r0, 35172 <nrf_setsockopt+0x22>
   35166:	2009      	movs	r0, #9
   35168:	f7f0 fe9e 	bl	25ea8 <nrf_modem_os_errno_set>
   3516c:	f04f 34ff 	mov.w	r4, #4294967295
   35170:	e06d      	b.n	3524e <nrf_setsockopt+0xfe>
   35172:	b915      	cbnz	r5, 3517a <nrf_setsockopt+0x2a>
   35174:	b10c      	cbz	r4, 3517a <nrf_setsockopt+0x2a>
   35176:	2016      	movs	r0, #22
   35178:	e7f6      	b.n	35168 <nrf_setsockopt+0x18>
   3517a:	f5b9 7f8d 	cmp.w	r9, #282	; 0x11a
   3517e:	d12c      	bne.n	351da <nrf_setsockopt+0x8a>
   35180:	1e7b      	subs	r3, r7, #1
   35182:	2b08      	cmp	r3, #8
   35184:	d829      	bhi.n	351da <nrf_setsockopt+0x8a>
   35186:	e8df f003 	tbb	[pc, r3]
   3518a:	0c05      	.short	0x0c05
   3518c:	a7211a13 	.word	0xa7211a13
   35190:	a728      	.short	0xa728
   35192:	a7          	.byte	0xa7
   35193:	00          	.byte	0x00
   35194:	4622      	mov	r2, r4
   35196:	4629      	mov	r1, r5
   35198:	b005      	add	sp, #20
   3519a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3519e:	f00c b88c 	b.w	412ba <tls_setopt_role>
   351a2:	4622      	mov	r2, r4
   351a4:	4629      	mov	r1, r5
   351a6:	b005      	add	sp, #20
   351a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   351ac:	f00c b89c 	b.w	412e8 <tls_setopt_taglist>
   351b0:	4622      	mov	r2, r4
   351b2:	4629      	mov	r1, r5
   351b4:	b005      	add	sp, #20
   351b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   351ba:	f00c b8a8 	b.w	4130e <tls_setopt_sess_cache>
   351be:	4622      	mov	r2, r4
   351c0:	4629      	mov	r1, r5
   351c2:	b005      	add	sp, #20
   351c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   351c8:	f00c b8b3 	b.w	41332 <tls_setopt_peer_verify>
   351cc:	4622      	mov	r2, r4
   351ce:	4629      	mov	r1, r5
   351d0:	b005      	add	sp, #20
   351d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   351d6:	f00c b8bb 	b.w	41350 <tls_setopt_hostname>
   351da:	2f37      	cmp	r7, #55	; 0x37
   351dc:	dc07      	bgt.n	351ee <nrf_setsockopt+0x9e>
   351de:	2f31      	cmp	r7, #49	; 0x31
   351e0:	dc07      	bgt.n	351f2 <nrf_setsockopt+0xa2>
   351e2:	2f02      	cmp	r7, #2
   351e4:	d078      	beq.n	352d8 <nrf_setsockopt+0x188>
   351e6:	f1a7 0314 	sub.w	r3, r7, #20
   351ea:	2b0c      	cmp	r3, #12
   351ec:	d90a      	bls.n	35204 <nrf_setsockopt+0xb4>
   351ee:	206d      	movs	r0, #109	; 0x6d
   351f0:	e7ba      	b.n	35168 <nrf_setsockopt+0x18>
   351f2:	f1a7 0333 	sub.w	r3, r7, #51	; 0x33
   351f6:	2b04      	cmp	r3, #4
   351f8:	d849      	bhi.n	3528e <nrf_setsockopt+0x13e>
   351fa:	e8df f003 	tbb	[pc, r3]
   351fe:	3f3b      	.short	0x3f3b
   35200:	4542      	.short	0x4542
   35202:	6d          	.byte	0x6d
   35203:	00          	.byte	0x00
   35204:	2b0c      	cmp	r3, #12
   35206:	d8f2      	bhi.n	351ee <nrf_setsockopt+0x9e>
   35208:	a201      	add	r2, pc, #4	; (adr r2, 35210 <nrf_setsockopt+0xc0>)
   3520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3520e:	bf00      	nop
   35210:	00035245 	.word	0x00035245
   35214:	00035257 	.word	0x00035257
   35218:	000351ef 	.word	0x000351ef
   3521c:	000351ef 	.word	0x000351ef
   35220:	000351ef 	.word	0x000351ef
   35224:	000352a9 	.word	0x000352a9
   35228:	000351ef 	.word	0x000351ef
   3522c:	000351ef 	.word	0x000351ef
   35230:	000351ef 	.word	0x000351ef
   35234:	000351ef 	.word	0x000351ef
   35238:	000352d9 	.word	0x000352d9
   3523c:	000352d9 	.word	0x000352d9
   35240:	000352d9 	.word	0x000352d9
   35244:	f100 0320 	add.w	r3, r0, #32
   35248:	b954      	cbnz	r4, 35260 <nrf_setsockopt+0x110>
   3524a:	6204      	str	r4, [r0, #32]
   3524c:	605c      	str	r4, [r3, #4]
   3524e:	4620      	mov	r0, r4
   35250:	b005      	add	sp, #20
   35252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35256:	f100 0328 	add.w	r3, r0, #40	; 0x28
   3525a:	b90c      	cbnz	r4, 35260 <nrf_setsockopt+0x110>
   3525c:	6284      	str	r4, [r0, #40]	; 0x28
   3525e:	e7f5      	b.n	3524c <nrf_setsockopt+0xfc>
   35260:	2c08      	cmp	r4, #8
   35262:	4622      	mov	r2, r4
   35264:	4629      	mov	r1, r5
   35266:	bf28      	it	cs
   35268:	2208      	movcs	r2, #8
   3526a:	4618      	mov	r0, r3
   3526c:	f00c fc58 	bl	41b20 <memcpy>
   35270:	2400      	movs	r4, #0
   35272:	e7ec      	b.n	3524e <nrf_setsockopt+0xfe>
   35274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   35278:	6303      	str	r3, [r0, #48]	; 0x30
   3527a:	e7f9      	b.n	35270 <nrf_setsockopt+0x120>
   3527c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   35280:	e7fa      	b.n	35278 <nrf_setsockopt+0x128>
   35282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   35286:	e7f7      	b.n	35278 <nrf_setsockopt+0x128>
   35288:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3528c:	e7f4      	b.n	35278 <nrf_setsockopt+0x128>
   3528e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   35292:	6303      	str	r3, [r0, #48]	; 0x30
   35294:	2300      	movs	r3, #0
   35296:	4640      	mov	r0, r8
   35298:	461a      	mov	r2, r3
   3529a:	4619      	mov	r1, r3
   3529c:	e9cd 3300 	strd	r3, r3, [sp]
   352a0:	f7ff fe52 	bl	34f48 <nrf_sendto>
   352a4:	4604      	mov	r4, r0
   352a6:	e7d2      	b.n	3524e <nrf_setsockopt+0xfe>
   352a8:	2d00      	cmp	r5, #0
   352aa:	f43f af64 	beq.w	35176 <nrf_setsockopt+0x26>
   352ae:	4822      	ldr	r0, [pc, #136]	; (35338 <nrf_setsockopt+0x1e8>)
   352b0:	f7e7 ffc7 	bl	1d242 <strlen>
   352b4:	4920      	ldr	r1, [pc, #128]	; (35338 <nrf_setsockopt+0x1e8>)
   352b6:	4602      	mov	r2, r0
   352b8:	4628      	mov	r0, r5
   352ba:	f00c fc21 	bl	41b00 <memcmp>
   352be:	4604      	mov	r4, r0
   352c0:	b988      	cbnz	r0, 352e6 <nrf_setsockopt+0x196>
   352c2:	481d      	ldr	r0, [pc, #116]	; (35338 <nrf_setsockopt+0x1e8>)
   352c4:	f7e7 ffbd 	bl	1d242 <strlen>
   352c8:	220a      	movs	r2, #10
   352ca:	4621      	mov	r1, r4
   352cc:	4428      	add	r0, r5
   352ce:	f005 feff 	bl	3b0d0 <strtoul>
   352d2:	2404      	movs	r4, #4
   352d4:	9003      	str	r0, [sp, #12]
   352d6:	ad03      	add	r5, sp, #12
   352d8:	4620      	mov	r0, r4
   352da:	f00b fa17 	bl	4070c <rpc_client_request_alloc>
   352de:	4606      	mov	r6, r0
   352e0:	b928      	cbnz	r0, 352ee <nrf_setsockopt+0x19e>
   352e2:	2069      	movs	r0, #105	; 0x69
   352e4:	e740      	b.n	35168 <nrf_setsockopt+0x18>
   352e6:	220a      	movs	r2, #10
   352e8:	2100      	movs	r1, #0
   352ea:	4628      	mov	r0, r5
   352ec:	e7ef      	b.n	352ce <nrf_setsockopt+0x17e>
   352ee:	2308      	movs	r3, #8
   352f0:	f8c0 8010 	str.w	r8, [r0, #16]
   352f4:	f04f 0800 	mov.w	r8, #0
   352f8:	7203      	strb	r3, [r0, #8]
   352fa:	f880 8009 	strb.w	r8, [r0, #9]
   352fe:	f880 800a 	strb.w	r8, [r0, #10]
   35302:	f880 800b 	strb.w	r8, [r0, #11]
   35306:	4648      	mov	r0, r9
   35308:	f00c f919 	bl	4153e <nrf_sol_to_rpc_sol>
   3530c:	6170      	str	r0, [r6, #20]
   3530e:	4638      	mov	r0, r7
   35310:	f000 f8a6 	bl	35460 <nrf_so_to_rpc_so>
   35314:	4622      	mov	r2, r4
   35316:	4629      	mov	r1, r5
   35318:	61b0      	str	r0, [r6, #24]
   3531a:	6830      	ldr	r0, [r6, #0]
   3531c:	f00c fc00 	bl	41b20 <memcpy>
   35320:	6074      	str	r4, [r6, #4]
   35322:	4642      	mov	r2, r8
   35324:	4631      	mov	r1, r6
   35326:	f247 0003 	movw	r0, #28675	; 0x7003
   3532a:	f000 f8b1 	bl	35490 <req_forward>
   3532e:	4604      	mov	r4, r0
   35330:	2800      	cmp	r0, #0
   35332:	d08c      	beq.n	3524e <nrf_setsockopt+0xfe>
   35334:	e718      	b.n	35168 <nrf_setsockopt+0x18>
   35336:	bf00      	nop
   35338:	0004c29c 	.word	0x0004c29c

0003533c <on_tls_attach_res>:
   3533c:	b510      	push	{r4, lr}
   3533e:	6940      	ldr	r0, [r0, #20]
   35340:	460c      	mov	r4, r1
   35342:	b130      	cbz	r0, 35352 <on_tls_attach_res+0x16>
   35344:	f000 f898 	bl	35478 <rpc_error_to_nrf_errno>
   35348:	4b03      	ldr	r3, [pc, #12]	; (35358 <on_tls_attach_res+0x1c>)
   3534a:	61a0      	str	r0, [r4, #24]
   3534c:	6818      	ldr	r0, [r3, #0]
   3534e:	f7f0 fdf7 	bl	25f40 <nrf_modem_os_sem_give>
   35352:	2000      	movs	r0, #0
   35354:	bd10      	pop	{r4, pc}
   35356:	bf00      	nop
   35358:	2001a4d4 	.word	0x2001a4d4

0003535c <on_tls_handshake_ntf>:
   3535c:	b510      	push	{r4, lr}
   3535e:	6900      	ldr	r0, [r0, #16]
   35360:	460c      	mov	r4, r1
   35362:	b958      	cbnz	r0, 3537c <on_tls_handshake_ntf+0x20>
   35364:	7f0b      	ldrb	r3, [r1, #28]
   35366:	f023 0318 	bic.w	r3, r3, #24
   3536a:	f043 0318 	orr.w	r3, r3, #24
   3536e:	770b      	strb	r3, [r1, #28]
   35370:	4b04      	ldr	r3, [pc, #16]	; (35384 <on_tls_handshake_ntf+0x28>)
   35372:	6818      	ldr	r0, [r3, #0]
   35374:	f7f0 fde4 	bl	25f40 <nrf_modem_os_sem_give>
   35378:	2000      	movs	r0, #0
   3537a:	bd10      	pop	{r4, pc}
   3537c:	f000 f87c 	bl	35478 <rpc_error_to_nrf_errno>
   35380:	61a0      	str	r0, [r4, #24]
   35382:	e7f5      	b.n	35370 <on_tls_handshake_ntf+0x14>
   35384:	2001a4d4 	.word	0x2001a4d4

00035388 <tls_attach>:
   35388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3538c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 3545c <tls_attach+0xd4>
   35390:	4606      	mov	r6, r0
   35392:	f8d8 0000 	ldr.w	r0, [r8]
   35396:	9101      	str	r1, [sp, #4]
   35398:	f7f0 fdf2 	bl	25f80 <nrf_modem_os_sem_take>
   3539c:	4607      	mov	r7, r0
   3539e:	b120      	cbz	r0, 353aa <tls_attach+0x22>
   353a0:	2310      	movs	r3, #16
   353a2:	61b3      	str	r3, [r6, #24]
   353a4:	f04f 37ff 	mov.w	r7, #4294967295
   353a8:	e054      	b.n	35454 <tls_attach+0xcc>
   353aa:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   353ac:	b1a8      	cbz	r0, 353da <tls_attach+0x52>
   353ae:	f7e7 ff48 	bl	1d242 <strlen>
   353b2:	1c45      	adds	r5, r0, #1
   353b4:	4628      	mov	r0, r5
   353b6:	f00b f9a9 	bl	4070c <rpc_client_request_alloc>
   353ba:	4604      	mov	r4, r0
   353bc:	b978      	cbnz	r0, 353de <tls_attach+0x56>
   353be:	4630      	mov	r0, r6
   353c0:	f00b fb16 	bl	409f0 <sock_is_nonblock>
   353c4:	b108      	cbz	r0, 353ca <tls_attach+0x42>
   353c6:	2369      	movs	r3, #105	; 0x69
   353c8:	61b3      	str	r3, [r6, #24]
   353ca:	f8d8 0000 	ldr.w	r0, [r8]
   353ce:	f7f0 fdb7 	bl	25f40 <nrf_modem_os_sem_give>
   353d2:	2069      	movs	r0, #105	; 0x69
   353d4:	f7f0 fd68 	bl	25ea8 <nrf_modem_os_errno_set>
   353d8:	e7e4      	b.n	353a4 <tls_attach+0x1c>
   353da:	463d      	mov	r5, r7
   353dc:	e7ea      	b.n	353b4 <tls_attach+0x2c>
   353de:	6833      	ldr	r3, [r6, #0]
   353e0:	f106 013c 	add.w	r1, r6, #60	; 0x3c
   353e4:	6103      	str	r3, [r0, #16]
   353e6:	f896 203f 	ldrb.w	r2, [r6, #63]	; 0x3f
   353ea:	3014      	adds	r0, #20
   353ec:	3201      	adds	r2, #1
   353ee:	0092      	lsls	r2, r2, #2
   353f0:	f840 2c0c 	str.w	r2, [r0, #-12]
   353f4:	f00c fb94 	bl	41b20 <memcpy>
   353f8:	b1b5      	cbz	r5, 35428 <tls_attach+0xa0>
   353fa:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   353fc:	6820      	ldr	r0, [r4, #0]
   353fe:	f00c fd7a 	bl	41ef6 <strcpy>
   35402:	6065      	str	r5, [r4, #4]
   35404:	2004      	movs	r0, #4
   35406:	4622      	mov	r2, r4
   35408:	f247 0181 	movw	r1, #28801	; 0x7081
   3540c:	f00b f984 	bl	40718 <rpc_client_request_send>
   35410:	4630      	mov	r0, r6
   35412:	f00b faed 	bl	409f0 <sock_is_nonblock>
   35416:	b9e8      	cbnz	r0, 35454 <tls_attach+0xcc>
   35418:	4630      	mov	r0, r6
   3541a:	f00b fae5 	bl	409e8 <sock_is_secured>
   3541e:	69b3      	ldr	r3, [r6, #24]
   35420:	b9b0      	cbnz	r0, 35450 <tls_attach+0xc8>
   35422:	b153      	cbz	r3, 3543a <tls_attach+0xb2>
   35424:	4618      	mov	r0, r3
   35426:	e7d5      	b.n	353d4 <tls_attach+0x4c>
   35428:	7025      	strb	r5, [r4, #0]
   3542a:	7065      	strb	r5, [r4, #1]
   3542c:	70a5      	strb	r5, [r4, #2]
   3542e:	70e5      	strb	r5, [r4, #3]
   35430:	7125      	strb	r5, [r4, #4]
   35432:	7165      	strb	r5, [r4, #5]
   35434:	71a5      	strb	r5, [r4, #6]
   35436:	71e5      	strb	r5, [r4, #7]
   35438:	e7e4      	b.n	35404 <tls_attach+0x7c>
   3543a:	a901      	add	r1, sp, #4
   3543c:	f7f0 fc72 	bl	25d24 <nrf_modem_os_timedwait>
   35440:	2800      	cmp	r0, #0
   35442:	d0e9      	beq.n	35418 <tls_attach+0x90>
   35444:	f110 0f0b 	cmn.w	r0, #11
   35448:	bf0c      	ite	eq
   3544a:	2074      	moveq	r0, #116	; 0x74
   3544c:	206e      	movne	r0, #110	; 0x6e
   3544e:	e7c1      	b.n	353d4 <tls_attach+0x4c>
   35450:	2b00      	cmp	r3, #0
   35452:	d1e7      	bne.n	35424 <tls_attach+0x9c>
   35454:	4638      	mov	r0, r7
   35456:	b002      	add	sp, #8
   35458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3545c:	2001a4d4 	.word	0x2001a4d4

00035460 <nrf_so_to_rpc_so>:
   35460:	3802      	subs	r0, #2
   35462:	2835      	cmp	r0, #53	; 0x35
   35464:	bf9a      	itte	ls
   35466:	4b03      	ldrls	r3, [pc, #12]	; (35474 <nrf_so_to_rpc_so+0x14>)
   35468:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   3546c:	f04f 30ff 	movhi.w	r0, #4294967295
   35470:	4770      	bx	lr
   35472:	bf00      	nop
   35474:	00043868 	.word	0x00043868

00035478 <rpc_error_to_nrf_errno>:
   35478:	286c      	cmp	r0, #108	; 0x6c
   3547a:	bf9a      	itte	ls
   3547c:	4b02      	ldrls	r3, [pc, #8]	; (35488 <rpc_error_to_nrf_errno+0x10>)
   3547e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   35482:	4802      	ldrhi	r0, [pc, #8]	; (3548c <rpc_error_to_nrf_errno+0x14>)
   35484:	4770      	bx	lr
   35486:	bf00      	nop
   35488:	00043940 	.word	0x00043940
   3548c:	baadbaad 	.word	0xbaadbaad

00035490 <req_forward>:
   35490:	b573      	push	{r0, r1, r4, r5, r6, lr}
   35492:	4616      	mov	r6, r2
   35494:	b9aa      	cbnz	r2, 354c2 <req_forward+0x32>
   35496:	ad01      	add	r5, sp, #4
   35498:	2300      	movs	r3, #0
   3549a:	460a      	mov	r2, r1
   3549c:	602b      	str	r3, [r5, #0]
   3549e:	60cd      	str	r5, [r1, #12]
   354a0:	b281      	uxth	r1, r0
   354a2:	2004      	movs	r0, #4
   354a4:	f00b f938 	bl	40718 <rpc_client_request_send>
   354a8:	4c0c      	ldr	r4, [pc, #48]	; (354dc <req_forward+0x4c>)
   354aa:	6828      	ldr	r0, [r5, #0]
   354ac:	b158      	cbz	r0, 354c6 <req_forward+0x36>
   354ae:	6940      	ldr	r0, [r0, #20]
   354b0:	f7ff ffe2 	bl	35478 <rpc_error_to_nrf_errno>
   354b4:	4604      	mov	r4, r0
   354b6:	b106      	cbz	r6, 354ba <req_forward+0x2a>
   354b8:	b168      	cbz	r0, 354d6 <req_forward+0x46>
   354ba:	6828      	ldr	r0, [r5, #0]
   354bc:	f00b f933 	bl	40726 <rpc_client_message_free>
   354c0:	e009      	b.n	354d6 <req_forward+0x46>
   354c2:	4615      	mov	r5, r2
   354c4:	e7e8      	b.n	35498 <req_forward+0x8>
   354c6:	4621      	mov	r1, r4
   354c8:	f7f0 fc2c 	bl	25d24 <nrf_modem_os_timedwait>
   354cc:	2800      	cmp	r0, #0
   354ce:	d0ec      	beq.n	354aa <req_forward+0x1a>
   354d0:	f00c fb00 	bl	41ad4 <abs>
   354d4:	4604      	mov	r4, r0
   354d6:	4620      	mov	r0, r4
   354d8:	b002      	add	sp, #8
   354da:	bd70      	pop	{r4, r5, r6, pc}
   354dc:	20014a60 	.word	0x20014a60

000354e0 <at_cmd_send>:
   354e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   354e2:	4614      	mov	r4, r2
   354e4:	f06f 0258 	mvn.w	r2, #88	; 0x58
   354e8:	2300      	movs	r3, #0
   354ea:	7302      	strb	r2, [r0, #12]
   354ec:	2204      	movs	r2, #4
   354ee:	4d0f      	ldr	r5, [pc, #60]	; (3552c <at_cmd_send+0x4c>)
   354f0:	7343      	strb	r3, [r0, #13]
   354f2:	7383      	strb	r3, [r0, #14]
   354f4:	73c3      	strb	r3, [r0, #15]
   354f6:	7202      	strb	r2, [r0, #8]
   354f8:	7243      	strb	r3, [r0, #9]
   354fa:	7283      	strb	r3, [r0, #10]
   354fc:	72c3      	strb	r3, [r0, #11]
   354fe:	4602      	mov	r2, r0
   35500:	b289      	uxth	r1, r1
   35502:	2003      	movs	r0, #3
   35504:	702b      	strb	r3, [r5, #0]
   35506:	f00b f907 	bl	40718 <rpc_client_request_send>
   3550a:	f04f 33ff 	mov.w	r3, #4294967295
   3550e:	9301      	str	r3, [sp, #4]
   35510:	782b      	ldrb	r3, [r5, #0]
   35512:	42a3      	cmp	r3, r4
   35514:	d101      	bne.n	3551a <at_cmd_send+0x3a>
   35516:	2000      	movs	r0, #0
   35518:	e005      	b.n	35526 <at_cmd_send+0x46>
   3551a:	2000      	movs	r0, #0
   3551c:	a901      	add	r1, sp, #4
   3551e:	f7f0 fc01 	bl	25d24 <nrf_modem_os_timedwait>
   35522:	2800      	cmp	r0, #0
   35524:	d0f4      	beq.n	35510 <at_cmd_send+0x30>
   35526:	b003      	add	sp, #12
   35528:	bd30      	pop	{r4, r5, pc}
   3552a:	bf00      	nop
   3552c:	2001d3db 	.word	0x2001d3db

00035530 <at_response_match>:
   35530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35532:	4605      	mov	r5, r0
   35534:	2400      	movs	r4, #0
   35536:	4f10      	ldr	r7, [pc, #64]	; (35578 <at_response_match+0x48>)
   35538:	f857 6b04 	ldr.w	r6, [r7], #4
   3553c:	4628      	mov	r0, r5
   3553e:	4631      	mov	r1, r6
   35540:	f00c fd28 	bl	41f94 <strstr>
   35544:	b928      	cbnz	r0, 35552 <at_response_match+0x22>
   35546:	3401      	adds	r4, #1
   35548:	2c04      	cmp	r4, #4
   3554a:	d1f5      	bne.n	35538 <at_response_match+0x8>
   3554c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   35550:	e00e      	b.n	35570 <at_response_match+0x40>
   35552:	2c01      	cmp	r4, #1
   35554:	d0fa      	beq.n	3554c <at_response_match+0x1c>
   35556:	1ea3      	subs	r3, r4, #2
   35558:	2b01      	cmp	r3, #1
   3555a:	d80a      	bhi.n	35572 <at_response_match+0x42>
   3555c:	4630      	mov	r0, r6
   3555e:	f7e7 fe70 	bl	1d242 <strlen>
   35562:	220a      	movs	r2, #10
   35564:	2100      	movs	r1, #0
   35566:	4428      	add	r0, r5
   35568:	f005 fc96 	bl	3ae98 <strtol>
   3556c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   35570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35572:	2000      	movs	r0, #0
   35574:	e7fc      	b.n	35570 <at_response_match+0x40>
   35576:	bf00      	nop
   35578:	00043af4 	.word	0x00043af4

0003557c <at_vprintf>:
   3557c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   35580:	4607      	mov	r7, r0
   35582:	460e      	mov	r6, r1
   35584:	481e      	ldr	r0, [pc, #120]	; (35600 <at_vprintf+0x84>)
   35586:	2100      	movs	r1, #0
   35588:	4690      	mov	r8, r2
   3558a:	461d      	mov	r5, r3
   3558c:	9301      	str	r3, [sp, #4]
   3558e:	f005 fda9 	bl	3b0e4 <vsniprintf>
   35592:	3001      	adds	r0, #1
   35594:	f00b f8ba 	bl	4070c <rpc_client_request_alloc>
   35598:	4604      	mov	r4, r0
   3559a:	b368      	cbz	r0, 355f8 <at_vprintf+0x7c>
   3559c:	9501      	str	r5, [sp, #4]
   3559e:	6841      	ldr	r1, [r0, #4]
   355a0:	462b      	mov	r3, r5
   355a2:	4642      	mov	r2, r8
   355a4:	6800      	ldr	r0, [r0, #0]
   355a6:	f005 fd9d 	bl	3b0e4 <vsniprintf>
   355aa:	4620      	mov	r0, r4
   355ac:	2202      	movs	r2, #2
   355ae:	2101      	movs	r1, #1
   355b0:	f7ff ff96 	bl	354e0 <at_cmd_send>
   355b4:	4604      	mov	r4, r0
   355b6:	b970      	cbnz	r0, 355d6 <at_vprintf+0x5a>
   355b8:	4d12      	ldr	r5, [pc, #72]	; (35604 <at_vprintf+0x88>)
   355ba:	682c      	ldr	r4, [r5, #0]
   355bc:	6821      	ldr	r1, [r4, #0]
   355be:	b977      	cbnz	r7, 355de <at_vprintf+0x62>
   355c0:	6820      	ldr	r0, [r4, #0]
   355c2:	f7ff ffb5 	bl	35530 <at_response_match>
   355c6:	4604      	mov	r4, r0
   355c8:	682b      	ldr	r3, [r5, #0]
   355ca:	6818      	ldr	r0, [r3, #0]
   355cc:	f00b f8ae 	bl	4072c <rpc_client_data_free>
   355d0:	6828      	ldr	r0, [r5, #0]
   355d2:	f00b f8a8 	bl	40726 <rpc_client_message_free>
   355d6:	4620      	mov	r0, r4
   355d8:	b002      	add	sp, #8
   355da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   355de:	6862      	ldr	r2, [r4, #4]
   355e0:	4638      	mov	r0, r7
   355e2:	42b2      	cmp	r2, r6
   355e4:	bf28      	it	cs
   355e6:	4632      	movcs	r2, r6
   355e8:	f00c fa9a 	bl	41b20 <memcpy>
   355ec:	6863      	ldr	r3, [r4, #4]
   355ee:	42b3      	cmp	r3, r6
   355f0:	d9e6      	bls.n	355c0 <at_vprintf+0x44>
   355f2:	f06f 0406 	mvn.w	r4, #6
   355f6:	e7e7      	b.n	355c8 <at_vprintf+0x4c>
   355f8:	f06f 040b 	mvn.w	r4, #11
   355fc:	e7eb      	b.n	355d6 <at_vprintf+0x5a>
   355fe:	bf00      	nop
   35600:	00042f94 	.word	0x00042f94
   35604:	2001a4e8 	.word	0x2001a4e8

00035608 <nrf_modem_at_init>:
   35608:	2201      	movs	r2, #1
   3560a:	b508      	push	{r3, lr}
   3560c:	4611      	mov	r1, r2
   3560e:	4808      	ldr	r0, [pc, #32]	; (35630 <nrf_modem_at_init+0x28>)
   35610:	f7f0 fc5e 	bl	25ed0 <nrf_modem_os_sem_init>
   35614:	2000      	movs	r0, #0
   35616:	f00b f879 	bl	4070c <rpc_client_request_alloc>
   3561a:	b128      	cbz	r0, 35628 <nrf_modem_at_init+0x20>
   3561c:	2201      	movs	r2, #1
   3561e:	2105      	movs	r1, #5
   35620:	f7ff ff5e 	bl	354e0 <at_cmd_send>
   35624:	2000      	movs	r0, #0
   35626:	bd08      	pop	{r3, pc}
   35628:	f06f 000b 	mvn.w	r0, #11
   3562c:	e7fb      	b.n	35626 <nrf_modem_at_init+0x1e>
   3562e:	bf00      	nop
   35630:	2001a4d8 	.word	0x2001a4d8

00035634 <nrf_modem_at_notif_handler_set>:
   35634:	4b01      	ldr	r3, [pc, #4]	; (3563c <nrf_modem_at_notif_handler_set+0x8>)
   35636:	6018      	str	r0, [r3, #0]
   35638:	2000      	movs	r0, #0
   3563a:	4770      	bx	lr
   3563c:	2001a4e4 	.word	0x2001a4e4

00035640 <nrf_modem_at_printf>:
   35640:	b40f      	push	{r0, r1, r2, r3}
   35642:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35644:	9c06      	ldr	r4, [sp, #24]
   35646:	f000 ff1d 	bl	36484 <nrf_modem_state_is_initialized>
   3564a:	b1b8      	cbz	r0, 3567c <nrf_modem_at_printf+0x3c>
   3564c:	b1cc      	cbz	r4, 35682 <nrf_modem_at_printf+0x42>
   3564e:	4d0e      	ldr	r5, [pc, #56]	; (35688 <nrf_modem_at_printf+0x48>)
   35650:	f04f 31ff 	mov.w	r1, #4294967295
   35654:	6828      	ldr	r0, [r5, #0]
   35656:	f7f0 fc93 	bl	25f80 <nrf_modem_os_sem_take>
   3565a:	2100      	movs	r1, #0
   3565c:	4622      	mov	r2, r4
   3565e:	ab07      	add	r3, sp, #28
   35660:	4608      	mov	r0, r1
   35662:	9301      	str	r3, [sp, #4]
   35664:	f7ff ff8a 	bl	3557c <at_vprintf>
   35668:	4604      	mov	r4, r0
   3566a:	6828      	ldr	r0, [r5, #0]
   3566c:	f7f0 fc68 	bl	25f40 <nrf_modem_os_sem_give>
   35670:	4620      	mov	r0, r4
   35672:	b003      	add	sp, #12
   35674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   35678:	b004      	add	sp, #16
   3567a:	4770      	bx	lr
   3567c:	f04f 34ff 	mov.w	r4, #4294967295
   35680:	e7f6      	b.n	35670 <nrf_modem_at_printf+0x30>
   35682:	f06f 040d 	mvn.w	r4, #13
   35686:	e7f3      	b.n	35670 <nrf_modem_at_printf+0x30>
   35688:	2001a4d8 	.word	0x2001a4d8

0003568c <nrf_modem_at_cmd>:
   3568c:	b40c      	push	{r2, r3}
   3568e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   35692:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   35694:	4605      	mov	r5, r0
   35696:	460e      	mov	r6, r1
   35698:	f000 fef4 	bl	36484 <nrf_modem_state_is_initialized>
   3569c:	2800      	cmp	r0, #0
   3569e:	d051      	beq.n	35744 <nrf_modem_at_cmd+0xb8>
   356a0:	2d00      	cmp	r5, #0
   356a2:	d052      	beq.n	3574a <nrf_modem_at_cmd+0xbe>
   356a4:	2f00      	cmp	r7, #0
   356a6:	d050      	beq.n	3574a <nrf_modem_at_cmd+0xbe>
   356a8:	2e00      	cmp	r6, #0
   356aa:	d051      	beq.n	35750 <nrf_modem_at_cmd+0xc4>
   356ac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 35758 <nrf_modem_at_cmd+0xcc>
   356b0:	f8d9 3000 	ldr.w	r3, [r9]
   356b4:	b1fb      	cbz	r3, 356f6 <nrf_modem_at_cmd+0x6a>
   356b6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 3575c <nrf_modem_at_cmd+0xd0>
   356ba:	f8d8 3000 	ldr.w	r3, [r8]
   356be:	b1d3      	cbz	r3, 356f6 <nrf_modem_at_cmd+0x6a>
   356c0:	2400      	movs	r4, #0
   356c2:	f8d9 3000 	ldr.w	r3, [r9]
   356c6:	429c      	cmp	r4, r3
   356c8:	d215      	bcs.n	356f6 <nrf_modem_at_cmd+0x6a>
   356ca:	f8d8 3000 	ldr.w	r3, [r8]
   356ce:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   356d2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   356d6:	f7e7 fdb4 	bl	1d242 <strlen>
   356da:	f8d8 3000 	ldr.w	r3, [r8]
   356de:	4602      	mov	r2, r0
   356e0:	4639      	mov	r1, r7
   356e2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   356e6:	f00c fc0e 	bl	41f06 <strncmp>
   356ea:	b9c8      	cbnz	r0, 35720 <nrf_modem_at_cmd+0x94>
   356ec:	f8d8 3000 	ldr.w	r3, [r8]
   356f0:	4453      	add	r3, sl
   356f2:	685b      	ldr	r3, [r3, #4]
   356f4:	b9b3      	cbnz	r3, 35724 <nrf_modem_at_cmd+0x98>
   356f6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 35760 <nrf_modem_at_cmd+0xd4>
   356fa:	f04f 31ff 	mov.w	r1, #4294967295
   356fe:	f8d8 0000 	ldr.w	r0, [r8]
   35702:	f7f0 fc3d 	bl	25f80 <nrf_modem_os_sem_take>
   35706:	ab0b      	add	r3, sp, #44	; 0x2c
   35708:	463a      	mov	r2, r7
   3570a:	4631      	mov	r1, r6
   3570c:	4628      	mov	r0, r5
   3570e:	9301      	str	r3, [sp, #4]
   35710:	f7ff ff34 	bl	3557c <at_vprintf>
   35714:	4604      	mov	r4, r0
   35716:	f8d8 0000 	ldr.w	r0, [r8]
   3571a:	f7f0 fc11 	bl	25f40 <nrf_modem_os_sem_give>
   3571e:	e00b      	b.n	35738 <nrf_modem_at_cmd+0xac>
   35720:	3401      	adds	r4, #1
   35722:	e7ce      	b.n	356c2 <nrf_modem_at_cmd+0x36>
   35724:	463a      	mov	r2, r7
   35726:	4631      	mov	r1, r6
   35728:	4628      	mov	r0, r5
   3572a:	4798      	blx	r3
   3572c:	1e04      	subs	r4, r0, #0
   3572e:	db03      	blt.n	35738 <nrf_modem_at_cmd+0xac>
   35730:	4628      	mov	r0, r5
   35732:	f7ff fefd 	bl	35530 <at_response_match>
   35736:	4604      	mov	r4, r0
   35738:	4620      	mov	r0, r4
   3573a:	b002      	add	sp, #8
   3573c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35740:	b002      	add	sp, #8
   35742:	4770      	bx	lr
   35744:	f04f 34ff 	mov.w	r4, #4294967295
   35748:	e7f6      	b.n	35738 <nrf_modem_at_cmd+0xac>
   3574a:	f06f 040d 	mvn.w	r4, #13
   3574e:	e7f3      	b.n	35738 <nrf_modem_at_cmd+0xac>
   35750:	f06f 0415 	mvn.w	r4, #21
   35754:	e7f0      	b.n	35738 <nrf_modem_at_cmd+0xac>
   35756:	bf00      	nop
   35758:	2001a4e0 	.word	0x2001a4e0
   3575c:	2001a4dc 	.word	0x2001a4dc
   35760:	2001a4d8 	.word	0x2001a4d8

00035764 <nrf_modem_at_scanf>:
   35764:	b40e      	push	{r1, r2, r3}
   35766:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   35768:	9f07      	ldr	r7, [sp, #28]
   3576a:	4605      	mov	r5, r0
   3576c:	f000 fe8a 	bl	36484 <nrf_modem_state_is_initialized>
   35770:	2800      	cmp	r0, #0
   35772:	d03b      	beq.n	357ec <nrf_modem_at_scanf+0x88>
   35774:	2d00      	cmp	r5, #0
   35776:	d03c      	beq.n	357f2 <nrf_modem_at_scanf+0x8e>
   35778:	2f00      	cmp	r7, #0
   3577a:	d03a      	beq.n	357f2 <nrf_modem_at_scanf+0x8e>
   3577c:	4e1e      	ldr	r6, [pc, #120]	; (357f8 <nrf_modem_at_scanf+0x94>)
   3577e:	f04f 31ff 	mov.w	r1, #4294967295
   35782:	6830      	ldr	r0, [r6, #0]
   35784:	f7f0 fbfc 	bl	25f80 <nrf_modem_os_sem_take>
   35788:	4628      	mov	r0, r5
   3578a:	f7e7 fd5a 	bl	1d242 <strlen>
   3578e:	3001      	adds	r0, #1
   35790:	f00a ffbc 	bl	4070c <rpc_client_request_alloc>
   35794:	4604      	mov	r4, r0
   35796:	b330      	cbz	r0, 357e6 <nrf_modem_at_scanf+0x82>
   35798:	4629      	mov	r1, r5
   3579a:	6800      	ldr	r0, [r0, #0]
   3579c:	f00c fbab 	bl	41ef6 <strcpy>
   357a0:	4620      	mov	r0, r4
   357a2:	2202      	movs	r2, #2
   357a4:	2101      	movs	r1, #1
   357a6:	f7ff fe9b 	bl	354e0 <at_cmd_send>
   357aa:	4604      	mov	r4, r0
   357ac:	b990      	cbnz	r0, 357d4 <nrf_modem_at_scanf+0x70>
   357ae:	4d13      	ldr	r5, [pc, #76]	; (357fc <nrf_modem_at_scanf+0x98>)
   357b0:	aa08      	add	r2, sp, #32
   357b2:	682b      	ldr	r3, [r5, #0]
   357b4:	4639      	mov	r1, r7
   357b6:	6818      	ldr	r0, [r3, #0]
   357b8:	9201      	str	r2, [sp, #4]
   357ba:	f005 fce5 	bl	3b188 <vsiscanf>
   357be:	682b      	ldr	r3, [r5, #0]
   357c0:	1e04      	subs	r4, r0, #0
   357c2:	6818      	ldr	r0, [r3, #0]
   357c4:	bf08      	it	eq
   357c6:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   357ca:	f00a ffaf 	bl	4072c <rpc_client_data_free>
   357ce:	6828      	ldr	r0, [r5, #0]
   357d0:	f00a ffa9 	bl	40726 <rpc_client_message_free>
   357d4:	6830      	ldr	r0, [r6, #0]
   357d6:	f7f0 fbb3 	bl	25f40 <nrf_modem_os_sem_give>
   357da:	4620      	mov	r0, r4
   357dc:	b002      	add	sp, #8
   357de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   357e2:	b003      	add	sp, #12
   357e4:	4770      	bx	lr
   357e6:	f06f 040b 	mvn.w	r4, #11
   357ea:	e7f3      	b.n	357d4 <nrf_modem_at_scanf+0x70>
   357ec:	f04f 34ff 	mov.w	r4, #4294967295
   357f0:	e7f3      	b.n	357da <nrf_modem_at_scanf+0x76>
   357f2:	f06f 040d 	mvn.w	r4, #13
   357f6:	e7f0      	b.n	357da <nrf_modem_at_scanf+0x76>
   357f8:	2001a4d8 	.word	0x2001a4d8
   357fc:	2001a4e8 	.word	0x2001a4e8

00035800 <rpc_at_event_handler>:
   35800:	b570      	push	{r4, r5, r6, lr}
   35802:	68c3      	ldr	r3, [r0, #12]
   35804:	4605      	mov	r5, r0
   35806:	2ba7      	cmp	r3, #167	; 0xa7
   35808:	d003      	beq.n	35812 <rpc_at_event_handler+0x12>
   3580a:	6828      	ldr	r0, [r5, #0]
   3580c:	f00a ff8e 	bl	4072c <rpc_client_data_free>
   35810:	e008      	b.n	35824 <rpc_at_event_handler+0x24>
   35812:	2903      	cmp	r1, #3
   35814:	d008      	beq.n	35828 <rpc_at_event_handler+0x28>
   35816:	2904      	cmp	r1, #4
   35818:	d019      	beq.n	3584e <rpc_at_event_handler+0x4e>
   3581a:	2902      	cmp	r1, #2
   3581c:	d102      	bne.n	35824 <rpc_at_event_handler+0x24>
   3581e:	2201      	movs	r2, #1
   35820:	4b0e      	ldr	r3, [pc, #56]	; (3585c <rpc_at_event_handler+0x5c>)
   35822:	701a      	strb	r2, [r3, #0]
   35824:	2000      	movs	r0, #0
   35826:	e00a      	b.n	3583e <rpc_at_event_handler+0x3e>
   35828:	4e0d      	ldr	r6, [pc, #52]	; (35860 <rpc_at_event_handler+0x60>)
   3582a:	6833      	ldr	r3, [r6, #0]
   3582c:	b143      	cbz	r3, 35840 <rpc_at_event_handler+0x40>
   3582e:	2400      	movs	r4, #0
   35830:	6800      	ldr	r0, [r0, #0]
   35832:	4798      	blx	r3
   35834:	6828      	ldr	r0, [r5, #0]
   35836:	6034      	str	r4, [r6, #0]
   35838:	f00a ff78 	bl	4072c <rpc_client_data_free>
   3583c:	b2e0      	uxtb	r0, r4
   3583e:	bd70      	pop	{r4, r5, r6, pc}
   35840:	2202      	movs	r2, #2
   35842:	4b08      	ldr	r3, [pc, #32]	; (35864 <rpc_at_event_handler+0x64>)
   35844:	2401      	movs	r4, #1
   35846:	6018      	str	r0, [r3, #0]
   35848:	4b04      	ldr	r3, [pc, #16]	; (3585c <rpc_at_event_handler+0x5c>)
   3584a:	701a      	strb	r2, [r3, #0]
   3584c:	e7f6      	b.n	3583c <rpc_at_event_handler+0x3c>
   3584e:	4b06      	ldr	r3, [pc, #24]	; (35868 <rpc_at_event_handler+0x68>)
   35850:	681b      	ldr	r3, [r3, #0]
   35852:	2b00      	cmp	r3, #0
   35854:	d0d9      	beq.n	3580a <rpc_at_event_handler+0xa>
   35856:	6800      	ldr	r0, [r0, #0]
   35858:	4798      	blx	r3
   3585a:	e7d6      	b.n	3580a <rpc_at_event_handler+0xa>
   3585c:	2001d3db 	.word	0x2001d3db
   35860:	2001a4ec 	.word	0x2001a4ec
   35864:	2001a4e8 	.word	0x2001a4e8
   35868:	2001a4e4 	.word	0x2001a4e4

0003586c <mfu_client_send>:
   3586c:	f04f 33ff 	mov.w	r3, #4294967295
   35870:	b513      	push	{r0, r1, r4, lr}
   35872:	9301      	str	r3, [sp, #4]
   35874:	231a      	movs	r3, #26
   35876:	7303      	strb	r3, [r0, #12]
   35878:	f06f 031e 	mvn.w	r3, #30
   3587c:	7343      	strb	r3, [r0, #13]
   3587e:	f06f 0354 	mvn.w	r3, #84	; 0x54
   35882:	7383      	strb	r3, [r0, #14]
   35884:	2315      	movs	r3, #21
   35886:	2903      	cmp	r1, #3
   35888:	73c3      	strb	r3, [r0, #15]
   3588a:	bf14      	ite	ne
   3588c:	2304      	movne	r3, #4
   3588e:	2308      	moveq	r3, #8
   35890:	6083      	str	r3, [r0, #8]
   35892:	2300      	movs	r3, #0
   35894:	4c0a      	ldr	r4, [pc, #40]	; (358c0 <mfu_client_send+0x54>)
   35896:	4602      	mov	r2, r0
   35898:	2006      	movs	r0, #6
   3589a:	7023      	strb	r3, [r4, #0]
   3589c:	f00a ff3c 	bl	40718 <rpc_client_request_send>
   358a0:	7823      	ldrb	r3, [r4, #0]
   358a2:	2b01      	cmp	r3, #1
   358a4:	d104      	bne.n	358b0 <mfu_client_send+0x44>
   358a6:	4b07      	ldr	r3, [pc, #28]	; (358c4 <mfu_client_send+0x58>)
   358a8:	681b      	ldr	r3, [r3, #0]
   358aa:	6918      	ldr	r0, [r3, #16]
   358ac:	4240      	negs	r0, r0
   358ae:	e005      	b.n	358bc <mfu_client_send+0x50>
   358b0:	2000      	movs	r0, #0
   358b2:	a901      	add	r1, sp, #4
   358b4:	f7f0 fa36 	bl	25d24 <nrf_modem_os_timedwait>
   358b8:	2800      	cmp	r0, #0
   358ba:	d0f1      	beq.n	358a0 <mfu_client_send+0x34>
   358bc:	b002      	add	sp, #8
   358be:	bd10      	pop	{r4, pc}
   358c0:	2001d3dc 	.word	0x2001d3dc
   358c4:	2001a4f0 	.word	0x2001a4f0

000358c8 <nrf_modem_delta_dfu_offset>:
   358c8:	b538      	push	{r3, r4, r5, lr}
   358ca:	4605      	mov	r5, r0
   358cc:	f000 fdda 	bl	36484 <nrf_modem_state_is_initialized>
   358d0:	b190      	cbz	r0, 358f8 <nrf_modem_delta_dfu_offset+0x30>
   358d2:	b1a5      	cbz	r5, 358fe <nrf_modem_delta_dfu_offset+0x36>
   358d4:	2000      	movs	r0, #0
   358d6:	f00a ff19 	bl	4070c <rpc_client_request_alloc>
   358da:	b198      	cbz	r0, 35904 <nrf_modem_delta_dfu_offset+0x3c>
   358dc:	2109      	movs	r1, #9
   358de:	f7ff ffc5 	bl	3586c <mfu_client_send>
   358e2:	4b0a      	ldr	r3, [pc, #40]	; (3590c <nrf_modem_delta_dfu_offset+0x44>)
   358e4:	4604      	mov	r4, r0
   358e6:	b910      	cbnz	r0, 358ee <nrf_modem_delta_dfu_offset+0x26>
   358e8:	681a      	ldr	r2, [r3, #0]
   358ea:	6952      	ldr	r2, [r2, #20]
   358ec:	602a      	str	r2, [r5, #0]
   358ee:	6818      	ldr	r0, [r3, #0]
   358f0:	f00a ff19 	bl	40726 <rpc_client_message_free>
   358f4:	4620      	mov	r0, r4
   358f6:	bd38      	pop	{r3, r4, r5, pc}
   358f8:	f04f 34ff 	mov.w	r4, #4294967295
   358fc:	e7fa      	b.n	358f4 <nrf_modem_delta_dfu_offset+0x2c>
   358fe:	f06f 040d 	mvn.w	r4, #13
   35902:	e7f7      	b.n	358f4 <nrf_modem_delta_dfu_offset+0x2c>
   35904:	f06f 040b 	mvn.w	r4, #11
   35908:	e7f4      	b.n	358f4 <nrf_modem_delta_dfu_offset+0x2c>
   3590a:	bf00      	nop
   3590c:	2001a4f0 	.word	0x2001a4f0

00035910 <nrf_modem_delta_dfu_area>:
   35910:	b538      	push	{r3, r4, r5, lr}
   35912:	4605      	mov	r5, r0
   35914:	f000 fdb6 	bl	36484 <nrf_modem_state_is_initialized>
   35918:	b190      	cbz	r0, 35940 <nrf_modem_delta_dfu_area+0x30>
   3591a:	b1a5      	cbz	r5, 35946 <nrf_modem_delta_dfu_area+0x36>
   3591c:	2000      	movs	r0, #0
   3591e:	f00a fef5 	bl	4070c <rpc_client_request_alloc>
   35922:	b198      	cbz	r0, 3594c <nrf_modem_delta_dfu_area+0x3c>
   35924:	2102      	movs	r1, #2
   35926:	f7ff ffa1 	bl	3586c <mfu_client_send>
   3592a:	4b0a      	ldr	r3, [pc, #40]	; (35954 <nrf_modem_delta_dfu_area+0x44>)
   3592c:	4604      	mov	r4, r0
   3592e:	b910      	cbnz	r0, 35936 <nrf_modem_delta_dfu_area+0x26>
   35930:	681a      	ldr	r2, [r3, #0]
   35932:	6952      	ldr	r2, [r2, #20]
   35934:	602a      	str	r2, [r5, #0]
   35936:	6818      	ldr	r0, [r3, #0]
   35938:	f00a fef5 	bl	40726 <rpc_client_message_free>
   3593c:	4620      	mov	r0, r4
   3593e:	bd38      	pop	{r3, r4, r5, pc}
   35940:	f04f 34ff 	mov.w	r4, #4294967295
   35944:	e7fa      	b.n	3593c <nrf_modem_delta_dfu_area+0x2c>
   35946:	f06f 040d 	mvn.w	r4, #13
   3594a:	e7f7      	b.n	3593c <nrf_modem_delta_dfu_area+0x2c>
   3594c:	f06f 040b 	mvn.w	r4, #11
   35950:	e7f4      	b.n	3593c <nrf_modem_delta_dfu_area+0x2c>
   35952:	bf00      	nop
   35954:	2001a4f0 	.word	0x2001a4f0

00035958 <nrf_modem_delta_dfu_uuid>:
   35958:	b538      	push	{r3, r4, r5, lr}
   3595a:	4605      	mov	r5, r0
   3595c:	f000 fd92 	bl	36484 <nrf_modem_state_is_initialized>
   35960:	b1c8      	cbz	r0, 35996 <nrf_modem_delta_dfu_uuid+0x3e>
   35962:	b1dd      	cbz	r5, 3599c <nrf_modem_delta_dfu_uuid+0x44>
   35964:	2000      	movs	r0, #0
   35966:	f00a fed1 	bl	4070c <rpc_client_request_alloc>
   3596a:	b1d0      	cbz	r0, 359a2 <nrf_modem_delta_dfu_uuid+0x4a>
   3596c:	2101      	movs	r1, #1
   3596e:	f7ff ff7d 	bl	3586c <mfu_client_send>
   35972:	490d      	ldr	r1, [pc, #52]	; (359a8 <nrf_modem_delta_dfu_uuid+0x50>)
   35974:	4604      	mov	r4, r0
   35976:	b948      	cbnz	r0, 3598c <nrf_modem_delta_dfu_uuid+0x34>
   35978:	680b      	ldr	r3, [r1, #0]
   3597a:	f103 0214 	add.w	r2, r3, #20
   3597e:	3338      	adds	r3, #56	; 0x38
   35980:	f852 0b04 	ldr.w	r0, [r2], #4
   35984:	429a      	cmp	r2, r3
   35986:	f845 0b04 	str.w	r0, [r5], #4
   3598a:	d1f9      	bne.n	35980 <nrf_modem_delta_dfu_uuid+0x28>
   3598c:	6808      	ldr	r0, [r1, #0]
   3598e:	f00a feca 	bl	40726 <rpc_client_message_free>
   35992:	4620      	mov	r0, r4
   35994:	bd38      	pop	{r3, r4, r5, pc}
   35996:	f04f 34ff 	mov.w	r4, #4294967295
   3599a:	e7fa      	b.n	35992 <nrf_modem_delta_dfu_uuid+0x3a>
   3599c:	f06f 040d 	mvn.w	r4, #13
   359a0:	e7f7      	b.n	35992 <nrf_modem_delta_dfu_uuid+0x3a>
   359a2:	f06f 040b 	mvn.w	r4, #11
   359a6:	e7f4      	b.n	35992 <nrf_modem_delta_dfu_uuid+0x3a>
   359a8:	2001a4f0 	.word	0x2001a4f0

000359ac <nrf_modem_delta_dfu_write_init>:
   359ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   359ae:	f000 fd69 	bl	36484 <nrf_modem_state_is_initialized>
   359b2:	b1d0      	cbz	r0, 359ea <nrf_modem_delta_dfu_write_init+0x3e>
   359b4:	4d11      	ldr	r5, [pc, #68]	; (359fc <nrf_modem_delta_dfu_write_init+0x50>)
   359b6:	782b      	ldrb	r3, [r5, #0]
   359b8:	b9d3      	cbnz	r3, 359f0 <nrf_modem_delta_dfu_write_init+0x44>
   359ba:	a801      	add	r0, sp, #4
   359bc:	f7ff ff84 	bl	358c8 <nrf_modem_delta_dfu_offset>
   359c0:	4604      	mov	r4, r0
   359c2:	b978      	cbnz	r0, 359e4 <nrf_modem_delta_dfu_write_init+0x38>
   359c4:	f00a fea2 	bl	4070c <rpc_client_request_alloc>
   359c8:	b1a8      	cbz	r0, 359f6 <nrf_modem_delta_dfu_write_init+0x4a>
   359ca:	9a01      	ldr	r2, [sp, #4]
   359cc:	2103      	movs	r1, #3
   359ce:	6102      	str	r2, [r0, #16]
   359d0:	f7ff ff4c 	bl	3586c <mfu_client_send>
   359d4:	4604      	mov	r4, r0
   359d6:	4b0a      	ldr	r3, [pc, #40]	; (35a00 <nrf_modem_delta_dfu_write_init+0x54>)
   359d8:	6818      	ldr	r0, [r3, #0]
   359da:	f00a fea4 	bl	40726 <rpc_client_message_free>
   359de:	b90c      	cbnz	r4, 359e4 <nrf_modem_delta_dfu_write_init+0x38>
   359e0:	2301      	movs	r3, #1
   359e2:	702b      	strb	r3, [r5, #0]
   359e4:	4620      	mov	r0, r4
   359e6:	b003      	add	sp, #12
   359e8:	bd30      	pop	{r4, r5, pc}
   359ea:	f04f 34ff 	mov.w	r4, #4294967295
   359ee:	e7f9      	b.n	359e4 <nrf_modem_delta_dfu_write_init+0x38>
   359f0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   359f4:	e7f6      	b.n	359e4 <nrf_modem_delta_dfu_write_init+0x38>
   359f6:	f06f 040b 	mvn.w	r4, #11
   359fa:	e7f3      	b.n	359e4 <nrf_modem_delta_dfu_write_init+0x38>
   359fc:	2001d3dd 	.word	0x2001d3dd
   35a00:	2001a4f0 	.word	0x2001a4f0

00035a04 <nrf_modem_delta_dfu_write>:
   35a04:	b570      	push	{r4, r5, r6, lr}
   35a06:	4606      	mov	r6, r0
   35a08:	460d      	mov	r5, r1
   35a0a:	f000 fd3b 	bl	36484 <nrf_modem_state_is_initialized>
   35a0e:	b1b0      	cbz	r0, 35a3e <nrf_modem_delta_dfu_write+0x3a>
   35a10:	b1c6      	cbz	r6, 35a44 <nrf_modem_delta_dfu_write+0x40>
   35a12:	b1d5      	cbz	r5, 35a4a <nrf_modem_delta_dfu_write+0x46>
   35a14:	4628      	mov	r0, r5
   35a16:	f00a fe79 	bl	4070c <rpc_client_request_alloc>
   35a1a:	4604      	mov	r4, r0
   35a1c:	b1c0      	cbz	r0, 35a50 <nrf_modem_delta_dfu_write+0x4c>
   35a1e:	462a      	mov	r2, r5
   35a20:	4631      	mov	r1, r6
   35a22:	6800      	ldr	r0, [r0, #0]
   35a24:	f00c f87c 	bl	41b20 <memcpy>
   35a28:	4620      	mov	r0, r4
   35a2a:	2104      	movs	r1, #4
   35a2c:	f7ff ff1e 	bl	3586c <mfu_client_send>
   35a30:	4b09      	ldr	r3, [pc, #36]	; (35a58 <nrf_modem_delta_dfu_write+0x54>)
   35a32:	4604      	mov	r4, r0
   35a34:	6818      	ldr	r0, [r3, #0]
   35a36:	f00a fe76 	bl	40726 <rpc_client_message_free>
   35a3a:	4620      	mov	r0, r4
   35a3c:	bd70      	pop	{r4, r5, r6, pc}
   35a3e:	f04f 34ff 	mov.w	r4, #4294967295
   35a42:	e7fa      	b.n	35a3a <nrf_modem_delta_dfu_write+0x36>
   35a44:	f06f 040d 	mvn.w	r4, #13
   35a48:	e7f7      	b.n	35a3a <nrf_modem_delta_dfu_write+0x36>
   35a4a:	f06f 0415 	mvn.w	r4, #21
   35a4e:	e7f4      	b.n	35a3a <nrf_modem_delta_dfu_write+0x36>
   35a50:	f06f 040b 	mvn.w	r4, #11
   35a54:	e7f1      	b.n	35a3a <nrf_modem_delta_dfu_write+0x36>
   35a56:	bf00      	nop
   35a58:	2001a4f0 	.word	0x2001a4f0

00035a5c <nrf_modem_delta_dfu_write_done>:
   35a5c:	b510      	push	{r4, lr}
   35a5e:	f000 fd11 	bl	36484 <nrf_modem_state_is_initialized>
   35a62:	b180      	cbz	r0, 35a86 <nrf_modem_delta_dfu_write_done+0x2a>
   35a64:	2000      	movs	r0, #0
   35a66:	f00a fe51 	bl	4070c <rpc_client_request_alloc>
   35a6a:	b178      	cbz	r0, 35a8c <nrf_modem_delta_dfu_write_done+0x30>
   35a6c:	2106      	movs	r1, #6
   35a6e:	f7ff fefd 	bl	3586c <mfu_client_send>
   35a72:	4b08      	ldr	r3, [pc, #32]	; (35a94 <nrf_modem_delta_dfu_write_done+0x38>)
   35a74:	4604      	mov	r4, r0
   35a76:	6818      	ldr	r0, [r3, #0]
   35a78:	f00a fe55 	bl	40726 <rpc_client_message_free>
   35a7c:	2200      	movs	r2, #0
   35a7e:	4b06      	ldr	r3, [pc, #24]	; (35a98 <nrf_modem_delta_dfu_write_done+0x3c>)
   35a80:	701a      	strb	r2, [r3, #0]
   35a82:	4620      	mov	r0, r4
   35a84:	bd10      	pop	{r4, pc}
   35a86:	f04f 34ff 	mov.w	r4, #4294967295
   35a8a:	e7fa      	b.n	35a82 <nrf_modem_delta_dfu_write_done+0x26>
   35a8c:	f06f 040b 	mvn.w	r4, #11
   35a90:	e7f7      	b.n	35a82 <nrf_modem_delta_dfu_write_done+0x26>
   35a92:	bf00      	nop
   35a94:	2001a4f0 	.word	0x2001a4f0
   35a98:	2001d3dd 	.word	0x2001d3dd

00035a9c <nrf_modem_delta_dfu_update>:
   35a9c:	b510      	push	{r4, lr}
   35a9e:	f000 fcf1 	bl	36484 <nrf_modem_state_is_initialized>
   35aa2:	b168      	cbz	r0, 35ac0 <nrf_modem_delta_dfu_update+0x24>
   35aa4:	2000      	movs	r0, #0
   35aa6:	f00a fe31 	bl	4070c <rpc_client_request_alloc>
   35aaa:	b160      	cbz	r0, 35ac6 <nrf_modem_delta_dfu_update+0x2a>
   35aac:	2105      	movs	r1, #5
   35aae:	f7ff fedd 	bl	3586c <mfu_client_send>
   35ab2:	4b06      	ldr	r3, [pc, #24]	; (35acc <nrf_modem_delta_dfu_update+0x30>)
   35ab4:	4604      	mov	r4, r0
   35ab6:	6818      	ldr	r0, [r3, #0]
   35ab8:	f00a fe35 	bl	40726 <rpc_client_message_free>
   35abc:	4620      	mov	r0, r4
   35abe:	bd10      	pop	{r4, pc}
   35ac0:	f04f 34ff 	mov.w	r4, #4294967295
   35ac4:	e7fa      	b.n	35abc <nrf_modem_delta_dfu_update+0x20>
   35ac6:	f06f 040b 	mvn.w	r4, #11
   35aca:	e7f7      	b.n	35abc <nrf_modem_delta_dfu_update+0x20>
   35acc:	2001a4f0 	.word	0x2001a4f0

00035ad0 <nrf_modem_delta_dfu_erase>:
   35ad0:	b510      	push	{r4, lr}
   35ad2:	f000 fcd7 	bl	36484 <nrf_modem_state_is_initialized>
   35ad6:	b168      	cbz	r0, 35af4 <nrf_modem_delta_dfu_erase+0x24>
   35ad8:	2000      	movs	r0, #0
   35ada:	f00a fe17 	bl	4070c <rpc_client_request_alloc>
   35ade:	b160      	cbz	r0, 35afa <nrf_modem_delta_dfu_erase+0x2a>
   35ae0:	2108      	movs	r1, #8
   35ae2:	f7ff fec3 	bl	3586c <mfu_client_send>
   35ae6:	4b06      	ldr	r3, [pc, #24]	; (35b00 <nrf_modem_delta_dfu_erase+0x30>)
   35ae8:	4604      	mov	r4, r0
   35aea:	6818      	ldr	r0, [r3, #0]
   35aec:	f00a fe1b 	bl	40726 <rpc_client_message_free>
   35af0:	4620      	mov	r0, r4
   35af2:	bd10      	pop	{r4, pc}
   35af4:	f04f 34ff 	mov.w	r4, #4294967295
   35af8:	e7fa      	b.n	35af0 <nrf_modem_delta_dfu_erase+0x20>
   35afa:	f06f 040b 	mvn.w	r4, #11
   35afe:	e7f7      	b.n	35af0 <nrf_modem_delta_dfu_erase+0x20>
   35b00:	2001a4f0 	.word	0x2001a4f0

00035b04 <rpc_dfu_event_handler>:
   35b04:	b510      	push	{r4, lr}
   35b06:	4604      	mov	r4, r0
   35b08:	6800      	ldr	r0, [r0, #0]
   35b0a:	b108      	cbz	r0, 35b10 <rpc_dfu_event_handler+0xc>
   35b0c:	f00a fe0e 	bl	4072c <rpc_client_data_free>
   35b10:	4b05      	ldr	r3, [pc, #20]	; (35b28 <rpc_dfu_event_handler+0x24>)
   35b12:	68e2      	ldr	r2, [r4, #12]
   35b14:	429a      	cmp	r2, r3
   35b16:	bf05      	ittet	eq
   35b18:	2001      	moveq	r0, #1
   35b1a:	4b04      	ldreq	r3, [pc, #16]	; (35b2c <rpc_dfu_event_handler+0x28>)
   35b1c:	2000      	movne	r0, #0
   35b1e:	7018      	strbeq	r0, [r3, #0]
   35b20:	bf04      	itt	eq
   35b22:	4b03      	ldreq	r3, [pc, #12]	; (35b30 <rpc_dfu_event_handler+0x2c>)
   35b24:	601c      	streq	r4, [r3, #0]
   35b26:	bd10      	pop	{r4, pc}
   35b28:	15abe11a 	.word	0x15abe11a
   35b2c:	2001d3dc 	.word	0x2001d3dc
   35b30:	2001a4f0 	.word	0x2001a4f0

00035b34 <send_message>:
   35b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   35b38:	4607      	mov	r7, r0
   35b3a:	4688      	mov	r8, r1
   35b3c:	4616      	mov	r6, r2
   35b3e:	f000 fca1 	bl	36484 <nrf_modem_state_is_initialized>
   35b42:	2800      	cmp	r0, #0
   35b44:	d053      	beq.n	35bee <send_message+0xba>
   35b46:	4d2b      	ldr	r5, [pc, #172]	; (35bf4 <send_message+0xc0>)
   35b48:	782b      	ldrb	r3, [r5, #0]
   35b4a:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   35b4e:	2b00      	cmp	r3, #0
   35b50:	d14d      	bne.n	35bee <send_message+0xba>
   35b52:	2301      	movs	r3, #1
   35b54:	4630      	mov	r0, r6
   35b56:	702b      	strb	r3, [r5, #0]
   35b58:	f00a fdd8 	bl	4070c <rpc_client_request_alloc>
   35b5c:	4604      	mov	r4, r0
   35b5e:	2800      	cmp	r0, #0
   35b60:	d03c      	beq.n	35bdc <send_message+0xa8>
   35b62:	4a25      	ldr	r2, [pc, #148]	; (35bf8 <send_message+0xc4>)
   35b64:	4641      	mov	r1, r8
   35b66:	8813      	ldrh	r3, [r2, #0]
   35b68:	3301      	adds	r3, #1
   35b6a:	b29b      	uxth	r3, r3
   35b6c:	8013      	strh	r3, [r2, #0]
   35b6e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   35b72:	f8c8 3000 	str.w	r3, [r8]
   35b76:	2343      	movs	r3, #67	; 0x43
   35b78:	7303      	strb	r3, [r0, #12]
   35b7a:	2354      	movs	r3, #84	; 0x54
   35b7c:	7343      	strb	r3, [r0, #13]
   35b7e:	2376      	movs	r3, #118	; 0x76
   35b80:	7383      	strb	r3, [r0, #14]
   35b82:	2349      	movs	r3, #73	; 0x49
   35b84:	4632      	mov	r2, r6
   35b86:	73c3      	strb	r3, [r0, #15]
   35b88:	6046      	str	r6, [r0, #4]
   35b8a:	f880 9008 	strb.w	r9, [r0, #8]
   35b8e:	f880 9009 	strb.w	r9, [r0, #9]
   35b92:	f880 900a 	strb.w	r9, [r0, #10]
   35b96:	f880 900b 	strb.w	r9, [r0, #11]
   35b9a:	6800      	ldr	r0, [r0, #0]
   35b9c:	f00b ffc0 	bl	41b20 <memcpy>
   35ba0:	4622      	mov	r2, r4
   35ba2:	4639      	mov	r1, r7
   35ba4:	2007      	movs	r0, #7
   35ba6:	f00a fdb7 	bl	40718 <rpc_client_request_send>
   35baa:	f04f 33ff 	mov.w	r3, #4294967295
   35bae:	4c13      	ldr	r4, [pc, #76]	; (35bfc <send_message+0xc8>)
   35bb0:	9301      	str	r3, [sp, #4]
   35bb2:	4620      	mov	r0, r4
   35bb4:	a901      	add	r1, sp, #4
   35bb6:	f7f0 f8b5 	bl	25d24 <nrf_modem_os_timedwait>
   35bba:	782b      	ldrb	r3, [r5, #0]
   35bbc:	2b01      	cmp	r3, #1
   35bbe:	d102      	bne.n	35bc6 <send_message+0x92>
   35bc0:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   35bc4:	d1f5      	bne.n	35bb2 <send_message+0x7e>
   35bc6:	782b      	ldrb	r3, [r5, #0]
   35bc8:	2b02      	cmp	r3, #2
   35bca:	d00d      	beq.n	35be8 <send_message+0xb4>
   35bcc:	782b      	ldrb	r3, [r5, #0]
   35bce:	2b03      	cmp	r3, #3
   35bd0:	bf08      	it	eq
   35bd2:	f06f 005e 	mvneq.w	r0, #94	; 0x5e
   35bd6:	2300      	movs	r3, #0
   35bd8:	702b      	strb	r3, [r5, #0]
   35bda:	e002      	b.n	35be2 <send_message+0xae>
   35bdc:	7028      	strb	r0, [r5, #0]
   35bde:	f06f 000b 	mvn.w	r0, #11
   35be2:	b003      	add	sp, #12
   35be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35be8:	f06f 0015 	mvn.w	r0, #21
   35bec:	e7f3      	b.n	35bd6 <send_message+0xa2>
   35bee:	f04f 30ff 	mov.w	r0, #4294967295
   35bf2:	e7f6      	b.n	35be2 <send_message+0xae>
   35bf4:	2001d3e0 	.word	0x2001d3e0
   35bf8:	2001a5b8 	.word	0x2001a5b8
   35bfc:	49765443 	.word	0x49765443

00035c00 <rpc_gnss_event_handler>:
   35c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35c04:	6804      	ldr	r4, [r0, #0]
   35c06:	4607      	mov	r7, r0
   35c08:	460d      	mov	r5, r1
   35c0a:	2c00      	cmp	r4, #0
   35c0c:	f000 8086 	beq.w	35d1c <rpc_gnss_event_handler+0x11c>
   35c10:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   35c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   35c18:	d142      	bne.n	35ca0 <rpc_gnss_event_handler+0xa0>
   35c1a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 35d98 <rpc_gnss_event_handler+0x198>
   35c1e:	f898 3000 	ldrb.w	r3, [r8]
   35c22:	2b01      	cmp	r3, #1
   35c24:	d131      	bne.n	35c8a <rpc_gnss_event_handler+0x8a>
   35c26:	4b5d      	ldr	r3, [pc, #372]	; (35d9c <rpc_gnss_event_handler+0x19c>)
   35c28:	6822      	ldr	r2, [r4, #0]
   35c2a:	881b      	ldrh	r3, [r3, #0]
   35c2c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   35c30:	d12b      	bne.n	35c8a <rpc_gnss_event_handler+0x8a>
   35c32:	6863      	ldr	r3, [r4, #4]
   35c34:	bb6b      	cbnz	r3, 35c92 <rpc_gnss_event_handler+0x92>
   35c36:	4b5a      	ldr	r3, [pc, #360]	; (35da0 <rpc_gnss_event_handler+0x1a0>)
   35c38:	681e      	ldr	r6, [r3, #0]
   35c3a:	b31e      	cbz	r6, 35c84 <rpc_gnss_event_handler+0x84>
   35c3c:	f242 0309 	movw	r3, #8201	; 0x2009
   35c40:	4299      	cmp	r1, r3
   35c42:	d11f      	bne.n	35c84 <rpc_gnss_event_handler+0x84>
   35c44:	4630      	mov	r0, r6
   35c46:	8923      	ldrh	r3, [r4, #8]
   35c48:	2280      	movs	r2, #128	; 0x80
   35c4a:	f840 3b04 	str.w	r3, [r0], #4
   35c4e:	f104 010a 	add.w	r1, r4, #10
   35c52:	f00b ff65 	bl	41b20 <memcpy>
   35c56:	2280      	movs	r2, #128	; 0x80
   35c58:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   35c5c:	f106 0084 	add.w	r0, r6, #132	; 0x84
   35c60:	f00b ff5e 	bl	41b20 <memcpy>
   35c64:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   35c68:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   35c6c:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   35c70:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   35c74:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   35c78:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   35c7c:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   35c80:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   35c84:	2300      	movs	r3, #0
   35c86:	f888 3000 	strb.w	r3, [r8]
   35c8a:	6838      	ldr	r0, [r7, #0]
   35c8c:	f00a fd4e 	bl	4072c <rpc_client_data_free>
   35c90:	e044      	b.n	35d1c <rpc_gnss_event_handler+0x11c>
   35c92:	f647 72ff 	movw	r2, #32767	; 0x7fff
   35c96:	4293      	cmp	r3, r2
   35c98:	bf0c      	ite	eq
   35c9a:	2303      	moveq	r3, #3
   35c9c:	2302      	movne	r3, #2
   35c9e:	e7f2      	b.n	35c86 <rpc_gnss_event_handler+0x86>
   35ca0:	4e40      	ldr	r6, [pc, #256]	; (35da4 <rpc_gnss_event_handler+0x1a4>)
   35ca2:	6833      	ldr	r3, [r6, #0]
   35ca4:	2b00      	cmp	r3, #0
   35ca6:	d0f0      	beq.n	35c8a <rpc_gnss_event_handler+0x8a>
   35ca8:	f244 0204 	movw	r2, #16388	; 0x4004
   35cac:	4291      	cmp	r1, r2
   35cae:	d80b      	bhi.n	35cc8 <rpc_gnss_event_handler+0xc8>
   35cb0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   35cb4:	d9e9      	bls.n	35c8a <rpc_gnss_event_handler+0x8a>
   35cb6:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   35cba:	3a02      	subs	r2, #2
   35cbc:	2a02      	cmp	r2, #2
   35cbe:	d80b      	bhi.n	35cd8 <rpc_gnss_event_handler+0xd8>
   35cc0:	e8df f002 	tbb	[pc, r2]
   35cc4:	4f45      	.short	0x4f45
   35cc6:	59          	.byte	0x59
   35cc7:	00          	.byte	0x00
   35cc8:	f244 1301 	movw	r3, #16641	; 0x4101
   35ccc:	4299      	cmp	r1, r3
   35cce:	d003      	beq.n	35cd8 <rpc_gnss_event_handler+0xd8>
   35cd0:	f244 2301 	movw	r3, #16897	; 0x4201
   35cd4:	4299      	cmp	r1, r3
   35cd6:	d1d8      	bne.n	35c8a <rpc_gnss_event_handler+0x8a>
   35cd8:	4f33      	ldr	r7, [pc, #204]	; (35da8 <rpc_gnss_event_handler+0x1a8>)
   35cda:	6838      	ldr	r0, [r7, #0]
   35cdc:	b108      	cbz	r0, 35ce2 <rpc_gnss_event_handler+0xe2>
   35cde:	f00a fd25 	bl	4072c <rpc_client_data_free>
   35ce2:	f244 2301 	movw	r3, #16897	; 0x4201
   35ce6:	429d      	cmp	r5, r3
   35ce8:	4b30      	ldr	r3, [pc, #192]	; (35dac <rpc_gnss_event_handler+0x1ac>)
   35cea:	d11a      	bne.n	35d22 <rpc_gnss_event_handler+0x122>
   35cec:	2202      	movs	r2, #2
   35cee:	603c      	str	r4, [r7, #0]
   35cf0:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   35cf4:	701a      	strb	r2, [r3, #0]
   35cf6:	4d2e      	ldr	r5, [pc, #184]	; (35db0 <rpc_gnss_event_handler+0x1b0>)
   35cf8:	f014 0718 	ands.w	r7, r4, #24
   35cfc:	6833      	ldr	r3, [r6, #0]
   35cfe:	782a      	ldrb	r2, [r5, #0]
   35d00:	d01f      	beq.n	35d42 <rpc_gnss_event_handler+0x142>
   35d02:	b91a      	cbnz	r2, 35d0c <rpc_gnss_event_handler+0x10c>
   35d04:	2005      	movs	r0, #5
   35d06:	4798      	blx	r3
   35d08:	2301      	movs	r3, #1
   35d0a:	702b      	strb	r3, [r5, #0]
   35d0c:	07e3      	lsls	r3, r4, #31
   35d0e:	d502      	bpl.n	35d16 <rpc_gnss_event_handler+0x116>
   35d10:	2002      	movs	r0, #2
   35d12:	6833      	ldr	r3, [r6, #0]
   35d14:	4798      	blx	r3
   35d16:	2001      	movs	r0, #1
   35d18:	6833      	ldr	r3, [r6, #0]
   35d1a:	4798      	blx	r3
   35d1c:	2000      	movs	r0, #0
   35d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35d22:	f244 1201 	movw	r2, #16641	; 0x4101
   35d26:	4295      	cmp	r5, r2
   35d28:	bf0b      	itete	eq
   35d2a:	2201      	moveq	r2, #1
   35d2c:	2200      	movne	r2, #0
   35d2e:	603c      	streq	r4, [r7, #0]
   35d30:	603c      	strne	r4, [r7, #0]
   35d32:	bf0b      	itete	eq
   35d34:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   35d38:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   35d3c:	701a      	strbeq	r2, [r3, #0]
   35d3e:	701a      	strbne	r2, [r3, #0]
   35d40:	e7d9      	b.n	35cf6 <rpc_gnss_event_handler+0xf6>
   35d42:	2a00      	cmp	r2, #0
   35d44:	d0e2      	beq.n	35d0c <rpc_gnss_event_handler+0x10c>
   35d46:	2006      	movs	r0, #6
   35d48:	4798      	blx	r3
   35d4a:	702f      	strb	r7, [r5, #0]
   35d4c:	e7de      	b.n	35d0c <rpc_gnss_event_handler+0x10c>
   35d4e:	4c19      	ldr	r4, [pc, #100]	; (35db4 <rpc_gnss_event_handler+0x1b4>)
   35d50:	6820      	ldr	r0, [r4, #0]
   35d52:	b108      	cbz	r0, 35d58 <rpc_gnss_event_handler+0x158>
   35d54:	f00a fcea 	bl	4072c <rpc_client_data_free>
   35d58:	683b      	ldr	r3, [r7, #0]
   35d5a:	2003      	movs	r0, #3
   35d5c:	6023      	str	r3, [r4, #0]
   35d5e:	6833      	ldr	r3, [r6, #0]
   35d60:	e7db      	b.n	35d1a <rpc_gnss_event_handler+0x11a>
   35d62:	4c15      	ldr	r4, [pc, #84]	; (35db8 <rpc_gnss_event_handler+0x1b8>)
   35d64:	6820      	ldr	r0, [r4, #0]
   35d66:	b108      	cbz	r0, 35d6c <rpc_gnss_event_handler+0x16c>
   35d68:	f00a fce0 	bl	4072c <rpc_client_data_free>
   35d6c:	683b      	ldr	r3, [r7, #0]
   35d6e:	2004      	movs	r0, #4
   35d70:	6023      	str	r3, [r4, #0]
   35d72:	6833      	ldr	r3, [r6, #0]
   35d74:	e7d1      	b.n	35d1a <rpc_gnss_event_handler+0x11a>
   35d76:	7822      	ldrb	r2, [r4, #0]
   35d78:	2a03      	cmp	r2, #3
   35d7a:	d886      	bhi.n	35c8a <rpc_gnss_event_handler+0x8a>
   35d7c:	e8df f002 	tbb	[pc, r2]
   35d80:	09070502 	.word	0x09070502
   35d84:	2007      	movs	r0, #7
   35d86:	4798      	blx	r3
   35d88:	e77f      	b.n	35c8a <rpc_gnss_event_handler+0x8a>
   35d8a:	2008      	movs	r0, #8
   35d8c:	e7fb      	b.n	35d86 <rpc_gnss_event_handler+0x186>
   35d8e:	2009      	movs	r0, #9
   35d90:	e7f9      	b.n	35d86 <rpc_gnss_event_handler+0x186>
   35d92:	200a      	movs	r0, #10
   35d94:	e7f7      	b.n	35d86 <rpc_gnss_event_handler+0x186>
   35d96:	bf00      	nop
   35d98:	2001d3e0 	.word	0x2001d3e0
   35d9c:	2001a5b8 	.word	0x2001a5b8
   35da0:	2001a504 	.word	0x2001a504
   35da4:	2001a4f4 	.word	0x2001a4f4
   35da8:	2001a4f8 	.word	0x2001a4f8
   35dac:	2001d3df 	.word	0x2001d3df
   35db0:	2001d3de 	.word	0x2001d3de
   35db4:	2001a500 	.word	0x2001a500
   35db8:	2001a4fc 	.word	0x2001a4fc

00035dbc <nrf_modem_gnss_read>:
   35dbc:	b570      	push	{r4, r5, r6, lr}
   35dbe:	4604      	mov	r4, r0
   35dc0:	2800      	cmp	r0, #0
   35dc2:	f000 817d 	beq.w	360c0 <nrf_modem_gnss_read+0x304>
   35dc6:	2a02      	cmp	r2, #2
   35dc8:	f000 815a 	beq.w	36080 <nrf_modem_gnss_read+0x2c4>
   35dcc:	2a03      	cmp	r2, #3
   35dce:	f000 8166 	beq.w	3609e <nrf_modem_gnss_read+0x2e2>
   35dd2:	2a01      	cmp	r2, #1
   35dd4:	f040 8174 	bne.w	360c0 <nrf_modem_gnss_read+0x304>
   35dd8:	29e7      	cmp	r1, #231	; 0xe7
   35dda:	f240 8174 	bls.w	360c6 <nrf_modem_gnss_read+0x30a>
   35dde:	f00a fc84 	bl	406ea <rpc_transport_rx_data_suspend>
   35de2:	4bba      	ldr	r3, [pc, #744]	; (360cc <nrf_modem_gnss_read+0x310>)
   35de4:	681d      	ldr	r5, [r3, #0]
   35de6:	b925      	cbnz	r5, 35df2 <nrf_modem_gnss_read+0x36>
   35de8:	f00a fc81 	bl	406ee <rpc_transport_rx_data_resume>
   35dec:	f06f 0022 	mvn.w	r0, #34	; 0x22
   35df0:	e083      	b.n	35efa <nrf_modem_gnss_read+0x13e>
   35df2:	2100      	movs	r1, #0
   35df4:	22e8      	movs	r2, #232	; 0xe8
   35df6:	4620      	mov	r0, r4
   35df8:	f00b feb2 	bl	41b60 <memset>
   35dfc:	4bb4      	ldr	r3, [pc, #720]	; (360d0 <nrf_modem_gnss_read+0x314>)
   35dfe:	68a9      	ldr	r1, [r5, #8]
   35e00:	781b      	ldrb	r3, [r3, #0]
   35e02:	2b01      	cmp	r3, #1
   35e04:	d07a      	beq.n	35efc <nrf_modem_gnss_read+0x140>
   35e06:	2b02      	cmp	r3, #2
   35e08:	460b      	mov	r3, r1
   35e0a:	686a      	ldr	r2, [r5, #4]
   35e0c:	e9c4 2300 	strd	r2, r3, [r4]
   35e10:	692b      	ldr	r3, [r5, #16]
   35e12:	68ea      	ldr	r2, [r5, #12]
   35e14:	e9c4 2302 	strd	r2, r3, [r4, #8]
   35e18:	696b      	ldr	r3, [r5, #20]
   35e1a:	6123      	str	r3, [r4, #16]
   35e1c:	69ab      	ldr	r3, [r5, #24]
   35e1e:	6163      	str	r3, [r4, #20]
   35e20:	69eb      	ldr	r3, [r5, #28]
   35e22:	f040 80d4 	bne.w	35fce <nrf_modem_gnss_read+0x212>
   35e26:	61a3      	str	r3, [r4, #24]
   35e28:	6a2b      	ldr	r3, [r5, #32]
   35e2a:	260a      	movs	r6, #10
   35e2c:	61e3      	str	r3, [r4, #28]
   35e2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35e30:	6223      	str	r3, [r4, #32]
   35e32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   35e34:	6263      	str	r3, [r4, #36]	; 0x24
   35e36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   35e38:	62a3      	str	r3, [r4, #40]	; 0x28
   35e3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   35e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
   35e3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   35e40:	6323      	str	r3, [r4, #48]	; 0x30
   35e42:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
   35e46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35e4a:	f8d5 3041 	ldr.w	r3, [r5, #65]	; 0x41
   35e4e:	6423      	str	r3, [r4, #64]	; 0x40
   35e50:	f8d5 3045 	ldr.w	r3, [r5, #69]	; 0x45
   35e54:	6463      	str	r3, [r4, #68]	; 0x44
   35e56:	f8d5 3049 	ldr.w	r3, [r5, #73]	; 0x49
   35e5a:	64a3      	str	r3, [r4, #72]	; 0x48
   35e5c:	f8d5 304d 	ldr.w	r3, [r5, #77]	; 0x4d
   35e60:	64e3      	str	r3, [r4, #76]	; 0x4c
   35e62:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   35e66:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   35e6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35e6e:	86a3      	strh	r3, [r4, #52]	; 0x34
   35e70:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   35e74:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35e78:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   35e7c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35e80:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   35e84:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35e88:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   35e8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35e90:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   35e94:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35e98:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   35e9c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   35ea0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35ea4:	87a3      	strh	r3, [r4, #60]	; 0x3c
   35ea6:	f8d5 30ca 	ldr.w	r3, [r5, #202]	; 0xca
   35eaa:	462a      	mov	r2, r5
   35eac:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   35eb0:	2300      	movs	r3, #0
   35eb2:	fb06 5103 	mla	r1, r6, r3, r5
   35eb6:	f8b1 0052 	ldrh.w	r0, [r1, #82]	; 0x52
   35eba:	3301      	adds	r3, #1
   35ebc:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35ec0:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
   35ec4:	2b0c      	cmp	r3, #12
   35ec6:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   35eca:	f8b1 0055 	ldrh.w	r0, [r1, #85]	; 0x55
   35ece:	f104 040c 	add.w	r4, r4, #12
   35ed2:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35ed6:	f9b1 0057 	ldrsh.w	r0, [r1, #87]	; 0x57
   35eda:	f102 020a 	add.w	r2, r2, #10
   35ede:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   35ee2:	f9b1 1059 	ldrsh.w	r1, [r1, #89]	; 0x59
   35ee6:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   35eea:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
   35eee:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   35ef2:	d1de      	bne.n	35eb2 <nrf_modem_gnss_read+0xf6>
   35ef4:	f00a fbfb 	bl	406ee <rpc_transport_rx_data_resume>
   35ef8:	2000      	movs	r0, #0
   35efa:	bd70      	pop	{r4, r5, r6, pc}
   35efc:	460b      	mov	r3, r1
   35efe:	686a      	ldr	r2, [r5, #4]
   35f00:	260a      	movs	r6, #10
   35f02:	e9c4 2300 	strd	r2, r3, [r4]
   35f06:	68ea      	ldr	r2, [r5, #12]
   35f08:	692b      	ldr	r3, [r5, #16]
   35f0a:	e9c4 2302 	strd	r2, r3, [r4, #8]
   35f0e:	696b      	ldr	r3, [r5, #20]
   35f10:	6123      	str	r3, [r4, #16]
   35f12:	69ab      	ldr	r3, [r5, #24]
   35f14:	6163      	str	r3, [r4, #20]
   35f16:	69eb      	ldr	r3, [r5, #28]
   35f18:	61e3      	str	r3, [r4, #28]
   35f1a:	6a2b      	ldr	r3, [r5, #32]
   35f1c:	6223      	str	r3, [r4, #32]
   35f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35f20:	62e3      	str	r3, [r4, #44]	; 0x2c
   35f22:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   35f26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35f2a:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   35f2e:	6423      	str	r3, [r4, #64]	; 0x40
   35f30:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   35f34:	6463      	str	r3, [r4, #68]	; 0x44
   35f36:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   35f3a:	64a3      	str	r3, [r4, #72]	; 0x48
   35f3c:	f8d5 303d 	ldr.w	r3, [r5, #61]	; 0x3d
   35f40:	64e3      	str	r3, [r4, #76]	; 0x4c
   35f42:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   35f46:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35f4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35f4e:	86a3      	strh	r3, [r4, #52]	; 0x34
   35f50:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   35f54:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35f58:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   35f5c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35f60:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   35f64:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35f68:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   35f6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35f70:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   35f74:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35f78:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   35f7c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   35f80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35f84:	87a3      	strh	r3, [r4, #60]	; 0x3c
   35f86:	462a      	mov	r2, r5
   35f88:	2300      	movs	r3, #0
   35f8a:	fb06 5103 	mla	r1, r6, r3, r5
   35f8e:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
   35f92:	3301      	adds	r3, #1
   35f94:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35f98:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   35f9c:	2b0c      	cmp	r3, #12
   35f9e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   35fa2:	f8b1 0045 	ldrh.w	r0, [r1, #69]	; 0x45
   35fa6:	f104 040c 	add.w	r4, r4, #12
   35faa:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35fae:	f9b1 0047 	ldrsh.w	r0, [r1, #71]	; 0x47
   35fb2:	f102 020a 	add.w	r2, r2, #10
   35fb6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   35fba:	f9b1 1049 	ldrsh.w	r1, [r1, #73]	; 0x49
   35fbe:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   35fc2:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   35fc6:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   35fca:	d1de      	bne.n	35f8a <nrf_modem_gnss_read+0x1ce>
   35fcc:	e792      	b.n	35ef4 <nrf_modem_gnss_read+0x138>
   35fce:	61e3      	str	r3, [r4, #28]
   35fd0:	6a2b      	ldr	r3, [r5, #32]
   35fd2:	260a      	movs	r6, #10
   35fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
   35fd6:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   35fda:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35fde:	f8d5 302d 	ldr.w	r3, [r5, #45]	; 0x2d
   35fe2:	6423      	str	r3, [r4, #64]	; 0x40
   35fe4:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   35fe8:	6463      	str	r3, [r4, #68]	; 0x44
   35fea:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   35fee:	64a3      	str	r3, [r4, #72]	; 0x48
   35ff0:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   35ff4:	64e3      	str	r3, [r4, #76]	; 0x4c
   35ff6:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   35ffa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   35ffe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   36002:	86a3      	strh	r3, [r4, #52]	; 0x34
   36004:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   36008:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   3600c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   36010:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   36014:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   36018:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   3601c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   36020:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   36024:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   36028:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   3602c:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   36030:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   36034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   36038:	87a3      	strh	r3, [r4, #60]	; 0x3c
   3603a:	462a      	mov	r2, r5
   3603c:	2300      	movs	r3, #0
   3603e:	fb06 5103 	mla	r1, r6, r3, r5
   36042:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
   36044:	3301      	adds	r3, #1
   36046:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   3604a:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
   3604e:	2b0c      	cmp	r3, #12
   36050:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   36054:	f8b1 0041 	ldrh.w	r0, [r1, #65]	; 0x41
   36058:	f104 040c 	add.w	r4, r4, #12
   3605c:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   36060:	f9b1 0043 	ldrsh.w	r0, [r1, #67]	; 0x43
   36064:	f102 020a 	add.w	r2, r2, #10
   36068:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   3606c:	f9b1 1045 	ldrsh.w	r1, [r1, #69]	; 0x45
   36070:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   36074:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   36078:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   3607c:	d1df      	bne.n	3603e <nrf_modem_gnss_read+0x282>
   3607e:	e739      	b.n	35ef4 <nrf_modem_gnss_read+0x138>
   36080:	2952      	cmp	r1, #82	; 0x52
   36082:	d920      	bls.n	360c6 <nrf_modem_gnss_read+0x30a>
   36084:	4d13      	ldr	r5, [pc, #76]	; (360d4 <nrf_modem_gnss_read+0x318>)
   36086:	682b      	ldr	r3, [r5, #0]
   36088:	2b00      	cmp	r3, #0
   3608a:	f43f aeaf 	beq.w	35dec <nrf_modem_gnss_read+0x30>
   3608e:	f00a fb2c 	bl	406ea <rpc_transport_rx_data_suspend>
   36092:	2253      	movs	r2, #83	; 0x53
   36094:	4620      	mov	r0, r4
   36096:	6829      	ldr	r1, [r5, #0]
   36098:	f00b fd42 	bl	41b20 <memcpy>
   3609c:	e72a      	b.n	35ef4 <nrf_modem_gnss_read+0x138>
   3609e:	290b      	cmp	r1, #11
   360a0:	d911      	bls.n	360c6 <nrf_modem_gnss_read+0x30a>
   360a2:	4d0d      	ldr	r5, [pc, #52]	; (360d8 <nrf_modem_gnss_read+0x31c>)
   360a4:	682b      	ldr	r3, [r5, #0]
   360a6:	2b00      	cmp	r3, #0
   360a8:	f43f aea0 	beq.w	35dec <nrf_modem_gnss_read+0x30>
   360ac:	f00a fb1d 	bl	406ea <rpc_transport_rx_data_suspend>
   360b0:	682b      	ldr	r3, [r5, #0]
   360b2:	681a      	ldr	r2, [r3, #0]
   360b4:	6022      	str	r2, [r4, #0]
   360b6:	685a      	ldr	r2, [r3, #4]
   360b8:	6062      	str	r2, [r4, #4]
   360ba:	891b      	ldrh	r3, [r3, #8]
   360bc:	60a3      	str	r3, [r4, #8]
   360be:	e719      	b.n	35ef4 <nrf_modem_gnss_read+0x138>
   360c0:	f06f 0015 	mvn.w	r0, #21
   360c4:	e719      	b.n	35efa <nrf_modem_gnss_read+0x13e>
   360c6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   360ca:	e716      	b.n	35efa <nrf_modem_gnss_read+0x13e>
   360cc:	2001a4f8 	.word	0x2001a4f8
   360d0:	2001d3df 	.word	0x2001d3df
   360d4:	2001a500 	.word	0x2001a500
   360d8:	2001a4fc 	.word	0x2001a4fc

000360dc <nrf_modem_gnss_start>:
   360dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   360e0:	4f27      	ldr	r7, [pc, #156]	; (36180 <nrf_modem_gnss_start+0xa4>)
   360e2:	b087      	sub	sp, #28
   360e4:	783b      	ldrb	r3, [r7, #0]
   360e6:	2b00      	cmp	r3, #0
   360e8:	d146      	bne.n	36178 <nrf_modem_gnss_start+0x9c>
   360ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 36184 <nrf_modem_gnss_start+0xa8>
   360ee:	f898 3000 	ldrb.w	r3, [r8]
   360f2:	bb63      	cbnz	r3, 3614e <nrf_modem_gnss_start+0x72>
   360f4:	2502      	movs	r5, #2
   360f6:	f04f 0905 	mov.w	r9, #5
   360fa:	462e      	mov	r6, r5
   360fc:	2214      	movs	r2, #20
   360fe:	2100      	movs	r1, #0
   36100:	a801      	add	r0, sp, #4
   36102:	f00b fd2d 	bl	41b60 <memset>
   36106:	2214      	movs	r2, #20
   36108:	f241 0004 	movw	r0, #4100	; 0x1004
   3610c:	a901      	add	r1, sp, #4
   3610e:	f88d 9008 	strb.w	r9, [sp, #8]
   36112:	f8cd 6009 	str.w	r6, [sp, #9]
   36116:	f7ff fd0d 	bl	35b34 <send_message>
   3611a:	4604      	mov	r4, r0
   3611c:	b110      	cbz	r0, 36124 <nrf_modem_gnss_start+0x48>
   3611e:	2601      	movs	r6, #1
   36120:	42b5      	cmp	r5, r6
   36122:	d127      	bne.n	36174 <nrf_modem_gnss_start+0x98>
   36124:	2214      	movs	r2, #20
   36126:	2100      	movs	r1, #0
   36128:	a801      	add	r0, sp, #4
   3612a:	f00b fd19 	bl	41b60 <memset>
   3612e:	2501      	movs	r5, #1
   36130:	2380      	movs	r3, #128	; 0x80
   36132:	2214      	movs	r2, #20
   36134:	f241 2003 	movw	r0, #4611	; 0x1203
   36138:	a901      	add	r1, sp, #4
   3613a:	9302      	str	r3, [sp, #8]
   3613c:	f88d 5016 	strb.w	r5, [sp, #22]
   36140:	f7ff fcf8 	bl	35b34 <send_message>
   36144:	ea54 0300 	orrs.w	r3, r4, r0
   36148:	bf08      	it	eq
   3614a:	f888 5000 	strbeq.w	r5, [r8]
   3614e:	2401      	movs	r4, #1
   36150:	2214      	movs	r2, #20
   36152:	2100      	movs	r1, #0
   36154:	a801      	add	r0, sp, #4
   36156:	f00b fd03 	bl	41b60 <memset>
   3615a:	2214      	movs	r2, #20
   3615c:	f241 0004 	movw	r0, #4100	; 0x1004
   36160:	a901      	add	r1, sp, #4
   36162:	f88d 4008 	strb.w	r4, [sp, #8]
   36166:	f7ff fce5 	bl	35b34 <send_message>
   3616a:	b900      	cbnz	r0, 3616e <nrf_modem_gnss_start+0x92>
   3616c:	703c      	strb	r4, [r7, #0]
   3616e:	b007      	add	sp, #28
   36170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36174:	4635      	mov	r5, r6
   36176:	e7c1      	b.n	360fc <nrf_modem_gnss_start+0x20>
   36178:	f04f 30ff 	mov.w	r0, #4294967295
   3617c:	e7f7      	b.n	3616e <nrf_modem_gnss_start+0x92>
   3617e:	bf00      	nop
   36180:	2001d3e2 	.word	0x2001d3e2
   36184:	2001d3e1 	.word	0x2001d3e1

00036188 <nrf_modem_gnss_stop>:
   36188:	b510      	push	{r4, lr}
   3618a:	4c0b      	ldr	r4, [pc, #44]	; (361b8 <nrf_modem_gnss_stop+0x30>)
   3618c:	b086      	sub	sp, #24
   3618e:	7823      	ldrb	r3, [r4, #0]
   36190:	2b01      	cmp	r3, #1
   36192:	d10e      	bne.n	361b2 <nrf_modem_gnss_stop+0x2a>
   36194:	2214      	movs	r2, #20
   36196:	2100      	movs	r1, #0
   36198:	a801      	add	r0, sp, #4
   3619a:	f00b fce1 	bl	41b60 <memset>
   3619e:	2214      	movs	r2, #20
   361a0:	f241 0004 	movw	r0, #4100	; 0x1004
   361a4:	a901      	add	r1, sp, #4
   361a6:	f7ff fcc5 	bl	35b34 <send_message>
   361aa:	b900      	cbnz	r0, 361ae <nrf_modem_gnss_stop+0x26>
   361ac:	7020      	strb	r0, [r4, #0]
   361ae:	b006      	add	sp, #24
   361b0:	bd10      	pop	{r4, pc}
   361b2:	f04f 30ff 	mov.w	r0, #4294967295
   361b6:	e7fa      	b.n	361ae <nrf_modem_gnss_stop+0x26>
   361b8:	2001d3e2 	.word	0x2001d3e2

000361bc <nrf_modem_gnss_use_case_set>:
   361bc:	b510      	push	{r4, lr}
   361be:	4b0d      	ldr	r3, [pc, #52]	; (361f4 <nrf_modem_gnss_use_case_set+0x38>)
   361c0:	4604      	mov	r4, r0
   361c2:	781b      	ldrb	r3, [r3, #0]
   361c4:	b086      	sub	sp, #24
   361c6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   361ca:	b97b      	cbnz	r3, 361ec <nrf_modem_gnss_use_case_set+0x30>
   361cc:	2214      	movs	r2, #20
   361ce:	a801      	add	r0, sp, #4
   361d0:	f00b fcc6 	bl	41b60 <memset>
   361d4:	2302      	movs	r3, #2
   361d6:	2214      	movs	r2, #20
   361d8:	f241 1003 	movw	r0, #4355	; 0x1103
   361dc:	a901      	add	r1, sp, #4
   361de:	9302      	str	r3, [sp, #8]
   361e0:	f88d 400d 	strb.w	r4, [sp, #13]
   361e4:	f7ff fca6 	bl	35b34 <send_message>
   361e8:	b006      	add	sp, #24
   361ea:	bd10      	pop	{r4, pc}
   361ec:	f04f 30ff 	mov.w	r0, #4294967295
   361f0:	e7fa      	b.n	361e8 <nrf_modem_gnss_use_case_set+0x2c>
   361f2:	bf00      	nop
   361f4:	2001d3e2 	.word	0x2001d3e2

000361f8 <nrf_modem_gnss_fix_interval_set>:
   361f8:	b510      	push	{r4, lr}
   361fa:	4b0d      	ldr	r3, [pc, #52]	; (36230 <nrf_modem_gnss_fix_interval_set+0x38>)
   361fc:	4604      	mov	r4, r0
   361fe:	781b      	ldrb	r3, [r3, #0]
   36200:	b086      	sub	sp, #24
   36202:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   36206:	b97b      	cbnz	r3, 36228 <nrf_modem_gnss_fix_interval_set+0x30>
   36208:	2214      	movs	r2, #20
   3620a:	a801      	add	r0, sp, #4
   3620c:	f00b fca8 	bl	41b60 <memset>
   36210:	2308      	movs	r3, #8
   36212:	2214      	movs	r2, #20
   36214:	f241 1003 	movw	r0, #4355	; 0x1103
   36218:	a901      	add	r1, sp, #4
   3621a:	9302      	str	r3, [sp, #8]
   3621c:	f8ad 400f 	strh.w	r4, [sp, #15]
   36220:	f7ff fc88 	bl	35b34 <send_message>
   36224:	b006      	add	sp, #24
   36226:	bd10      	pop	{r4, pc}
   36228:	f04f 30ff 	mov.w	r0, #4294967295
   3622c:	e7fa      	b.n	36224 <nrf_modem_gnss_fix_interval_set+0x2c>
   3622e:	bf00      	nop
   36230:	2001d3e2 	.word	0x2001d3e2

00036234 <nrf_modem_gnss_event_handler_set>:
   36234:	4a05      	ldr	r2, [pc, #20]	; (3624c <nrf_modem_gnss_event_handler_set+0x18>)
   36236:	4603      	mov	r3, r0
   36238:	7812      	ldrb	r2, [r2, #0]
   3623a:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   3623e:	b912      	cbnz	r2, 36246 <nrf_modem_gnss_event_handler_set+0x12>
   36240:	4a03      	ldr	r2, [pc, #12]	; (36250 <nrf_modem_gnss_event_handler_set+0x1c>)
   36242:	6013      	str	r3, [r2, #0]
   36244:	4770      	bx	lr
   36246:	f04f 30ff 	mov.w	r0, #4294967295
   3624a:	4770      	bx	lr
   3624c:	2001d3e2 	.word	0x2001d3e2
   36250:	2001a4f4 	.word	0x2001a4f4

00036254 <full_dfu_ipc_irq_handler>:
   36254:	b510      	push	{r4, lr}
   36256:	4604      	mov	r4, r0
   36258:	4b04      	ldr	r3, [pc, #16]	; (3626c <full_dfu_ipc_irq_handler+0x18>)
   3625a:	6818      	ldr	r0, [r3, #0]
   3625c:	f7ef fe70 	bl	25f40 <nrf_modem_os_sem_give>
   36260:	07e3      	lsls	r3, r4, #31
   36262:	bf42      	ittt	mi
   36264:	2201      	movmi	r2, #1
   36266:	4b02      	ldrmi	r3, [pc, #8]	; (36270 <full_dfu_ipc_irq_handler+0x1c>)
   36268:	701a      	strbmi	r2, [r3, #0]
   3626a:	bd10      	pop	{r4, pc}
   3626c:	2001a508 	.word	0x2001a508
   36270:	2001d3e3 	.word	0x2001d3e3

00036274 <modem_ipc_wait_for_event>:
   36274:	b508      	push	{r3, lr}
   36276:	4b08      	ldr	r3, [pc, #32]	; (36298 <modem_ipc_wait_for_event+0x24>)
   36278:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   3627c:	6818      	ldr	r0, [r3, #0]
   3627e:	f7ef fe7f 	bl	25f80 <nrf_modem_os_sem_take>
   36282:	b930      	cbnz	r0, 36292 <modem_ipc_wait_for_event+0x1e>
   36284:	4b05      	ldr	r3, [pc, #20]	; (3629c <modem_ipc_wait_for_event+0x28>)
   36286:	781b      	ldrb	r3, [r3, #0]
   36288:	2b01      	cmp	r3, #1
   3628a:	bf08      	it	eq
   3628c:	f06f 0004 	mvneq.w	r0, #4
   36290:	bd08      	pop	{r3, pc}
   36292:	f06f 0073 	mvn.w	r0, #115	; 0x73
   36296:	e7fb      	b.n	36290 <modem_ipc_wait_for_event+0x1c>
   36298:	2001a508 	.word	0x2001a508
   3629c:	2001d3e3 	.word	0x2001d3e3

000362a0 <nrf_modem_full_dfu_setup>:
   362a0:	2200      	movs	r2, #0
   362a2:	2300      	movs	r3, #0
   362a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   362a6:	4d2d      	ldr	r5, [pc, #180]	; (3635c <nrf_modem_full_dfu_setup+0xbc>)
   362a8:	4f2d      	ldr	r7, [pc, #180]	; (36360 <nrf_modem_full_dfu_setup+0xc0>)
   362aa:	e9c5 2302 	strd	r2, r3, [r5, #8]
   362ae:	e9c5 2304 	strd	r2, r3, [r5, #16]
   362b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   362b6:	4b2b      	ldr	r3, [pc, #172]	; (36364 <nrf_modem_full_dfu_setup+0xc4>)
   362b8:	2400      	movs	r4, #0
   362ba:	601a      	str	r2, [r3, #0]
   362bc:	f100 031c 	add.w	r3, r0, #28
   362c0:	603b      	str	r3, [r7, #0]
   362c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   362c6:	6043      	str	r3, [r0, #4]
   362c8:	231c      	movs	r3, #28
   362ca:	7203      	strb	r3, [r0, #8]
   362cc:	2320      	movs	r3, #32
   362ce:	2601      	movs	r6, #1
   362d0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   362d4:	7243      	strb	r3, [r0, #9]
   362d6:	4b24      	ldr	r3, [pc, #144]	; (36368 <nrf_modem_full_dfu_setup+0xc8>)
   362d8:	7004      	strb	r4, [r0, #0]
   362da:	7044      	strb	r4, [r0, #1]
   362dc:	70c2      	strb	r2, [r0, #3]
   362de:	7284      	strb	r4, [r0, #10]
   362e0:	72c4      	strb	r4, [r0, #11]
   362e2:	7086      	strb	r6, [r0, #2]
   362e4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   362e8:	702c      	strb	r4, [r5, #0]
   362ea:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   362ee:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   362f2:	4b1e      	ldr	r3, [pc, #120]	; (3636c <nrf_modem_full_dfu_setup+0xcc>)
   362f4:	b093      	sub	sp, #76	; 0x4c
   362f6:	4622      	mov	r2, r4
   362f8:	4620      	mov	r0, r4
   362fa:	491d      	ldr	r1, [pc, #116]	; (36370 <nrf_modem_full_dfu_setup+0xd0>)
   362fc:	701c      	strb	r4, [r3, #0]
   362fe:	f7fc ffa5 	bl	3324c <nrfx_ipc_init>
   36302:	4621      	mov	r1, r4
   36304:	2240      	movs	r2, #64	; 0x40
   36306:	a801      	add	r0, sp, #4
   36308:	f00b fc2a 	bl	41b60 <memset>
   3630c:	2302      	movs	r3, #2
   3630e:	9302      	str	r3, [sp, #8]
   36310:	2304      	movs	r3, #4
   36312:	930b      	str	r3, [sp, #44]	; 0x2c
   36314:	2305      	movs	r3, #5
   36316:	a801      	add	r0, sp, #4
   36318:	9311      	str	r3, [sp, #68]	; 0x44
   3631a:	9609      	str	r6, [sp, #36]	; 0x24
   3631c:	f7fc ffbc 	bl	33298 <nrfx_ipc_config_load>
   36320:	4621      	mov	r1, r4
   36322:	4632      	mov	r2, r6
   36324:	4813      	ldr	r0, [pc, #76]	; (36374 <nrf_modem_full_dfu_setup+0xd4>)
   36326:	683f      	ldr	r7, [r7, #0]
   36328:	f7ef fdd2 	bl	25ed0 <nrf_modem_os_sem_init>
   3632c:	4b12      	ldr	r3, [pc, #72]	; (36378 <nrf_modem_full_dfu_setup+0xd8>)
   3632e:	9400      	str	r4, [sp, #0]
   36330:	611c      	str	r4, [r3, #16]
   36332:	691b      	ldr	r3, [r3, #16]
   36334:	9300      	str	r3, [sp, #0]
   36336:	9b00      	ldr	r3, [sp, #0]
   36338:	f7ff ff9c 	bl	36274 <modem_ipc_wait_for_event>
   3633c:	4604      	mov	r4, r0
   3633e:	b130      	cbz	r0, 3634e <nrf_modem_full_dfu_setup+0xae>
   36340:	2303      	movs	r3, #3
   36342:	702b      	strb	r3, [r5, #0]
   36344:	f7fc ffe6 	bl	33314 <nrfx_ipc_uninit>
   36348:	4620      	mov	r0, r4
   3634a:	b013      	add	sp, #76	; 0x4c
   3634c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3634e:	683a      	ldr	r2, [r7, #0]
   36350:	4b0a      	ldr	r3, [pc, #40]	; (3637c <nrf_modem_full_dfu_setup+0xdc>)
   36352:	429a      	cmp	r2, r3
   36354:	d0f8      	beq.n	36348 <nrf_modem_full_dfu_setup+0xa8>
   36356:	f06f 0404 	mvn.w	r4, #4
   3635a:	e7f3      	b.n	36344 <nrf_modem_full_dfu_setup+0xa4>
   3635c:	20018df8 	.word	0x20018df8
   36360:	2001a50c 	.word	0x2001a50c
   36364:	2001a510 	.word	0x2001a510
   36368:	4002a000 	.word	0x4002a000
   3636c:	2001d3e3 	.word	0x2001d3e3
   36370:	00036255 	.word	0x00036255
   36374:	2001a508 	.word	0x2001a508
   36378:	40005600 	.word	0x40005600
   3637c:	a5000001 	.word	0xa5000001

00036380 <modem_off>:
   36380:	b537      	push	{r0, r1, r2, r4, r5, lr}
   36382:	2501      	movs	r5, #1
   36384:	4c07      	ldr	r4, [pc, #28]	; (363a4 <modem_off+0x24>)
   36386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   3638a:	6165      	str	r5, [r4, #20]
   3638c:	f009 f855 	bl	3f43a <nrf_modem_os_busywait>
   36390:	2300      	movs	r3, #0
   36392:	6163      	str	r3, [r4, #20]
   36394:	9301      	str	r3, [sp, #4]
   36396:	6125      	str	r5, [r4, #16]
   36398:	6923      	ldr	r3, [r4, #16]
   3639a:	9301      	str	r3, [sp, #4]
   3639c:	9b01      	ldr	r3, [sp, #4]
   3639e:	b003      	add	sp, #12
   363a0:	bd30      	pop	{r4, r5, pc}
   363a2:	bf00      	nop
   363a4:	40005600 	.word	0x40005600

000363a8 <nrf_modem_init>:
   363a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   363aa:	4604      	mov	r4, r0
   363ac:	460d      	mov	r5, r1
   363ae:	f000 f871 	bl	36494 <nrf_modem_state_is_uninitialized>
   363b2:	2800      	cmp	r0, #0
   363b4:	d03b      	beq.n	3642e <nrf_modem_init+0x86>
   363b6:	2c00      	cmp	r4, #0
   363b8:	d03c      	beq.n	36434 <nrf_modem_init+0x8c>
   363ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   363bc:	2800      	cmp	r0, #0
   363be:	d03c      	beq.n	3643a <nrf_modem_init+0x92>
   363c0:	f000 f844 	bl	3644c <nrf_modem_fault_handler_set>
   363c4:	b9ed      	cbnz	r5, 36402 <nrf_modem_init+0x5a>
   363c6:	f7ef fe75 	bl	260b4 <nrf_modem_os_init>
   363ca:	2001      	movs	r0, #1
   363cc:	f000 f854 	bl	36478 <nrf_modem_state_set>
   363d0:	6a23      	ldr	r3, [r4, #32]
   363d2:	4668      	mov	r0, sp
   363d4:	9400      	str	r4, [sp, #0]
   363d6:	f88d 3004 	strb.w	r3, [sp, #4]
   363da:	f7fe f8dd 	bl	34598 <rpc_transport_ipc_init>
   363de:	4604      	mov	r4, r0
   363e0:	b938      	cbnz	r0, 363f2 <nrf_modem_init+0x4a>
   363e2:	f7ff f911 	bl	35608 <nrf_modem_at_init>
   363e6:	4604      	mov	r4, r0
   363e8:	b918      	cbnz	r0, 363f2 <nrf_modem_init+0x4a>
   363ea:	f7fe fcf7 	bl	34ddc <ip_interface_init>
   363ee:	4604      	mov	r4, r0
   363f0:	b1c8      	cbz	r0, 36426 <nrf_modem_init+0x7e>
   363f2:	2000      	movs	r0, #0
   363f4:	f000 f840 	bl	36478 <nrf_modem_state_set>
   363f8:	f7ff ffc2 	bl	36380 <modem_off>
   363fc:	4620      	mov	r0, r4
   363fe:	b003      	add	sp, #12
   36400:	bd30      	pop	{r4, r5, pc}
   36402:	68e2      	ldr	r2, [r4, #12]
   36404:	6863      	ldr	r3, [r4, #4]
   36406:	4413      	add	r3, r2
   36408:	6962      	ldr	r2, [r4, #20]
   3640a:	4413      	add	r3, r2
   3640c:	69e2      	ldr	r2, [r4, #28]
   3640e:	4413      	add	r3, r2
   36410:	f242 021b 	movw	r2, #8219	; 0x201b
   36414:	4293      	cmp	r3, r2
   36416:	d913      	bls.n	36440 <nrf_modem_init+0x98>
   36418:	2002      	movs	r0, #2
   3641a:	f000 f82d 	bl	36478 <nrf_modem_state_set>
   3641e:	6820      	ldr	r0, [r4, #0]
   36420:	f7ff ff3e 	bl	362a0 <nrf_modem_full_dfu_setup>
   36424:	e7e3      	b.n	363ee <nrf_modem_init+0x46>
   36426:	4b08      	ldr	r3, [pc, #32]	; (36448 <nrf_modem_init+0xa0>)
   36428:	2400      	movs	r4, #0
   3642a:	701d      	strb	r5, [r3, #0]
   3642c:	e7e6      	b.n	363fc <nrf_modem_init+0x54>
   3642e:	f04f 34ff 	mov.w	r4, #4294967295
   36432:	e7e3      	b.n	363fc <nrf_modem_init+0x54>
   36434:	f06f 040d 	mvn.w	r4, #13
   36438:	e7e0      	b.n	363fc <nrf_modem_init+0x54>
   3643a:	f06f 0415 	mvn.w	r4, #21
   3643e:	e7dd      	b.n	363fc <nrf_modem_init+0x54>
   36440:	f06f 040b 	mvn.w	r4, #11
   36444:	e7da      	b.n	363fc <nrf_modem_init+0x54>
   36446:	bf00      	nop
   36448:	2001d3e4 	.word	0x2001d3e4

0003644c <nrf_modem_fault_handler_set>:
   3644c:	4b01      	ldr	r3, [pc, #4]	; (36454 <nrf_modem_fault_handler_set+0x8>)
   3644e:	6018      	str	r0, [r3, #0]
   36450:	4770      	bx	lr
   36452:	bf00      	nop
   36454:	2001a514 	.word	0x2001a514

00036458 <nrf_modem_fault_handler_internal>:
   36458:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3645a:	460c      	mov	r4, r1
   3645c:	4605      	mov	r5, r0
   3645e:	2003      	movs	r0, #3
   36460:	f000 f80a 	bl	36478 <nrf_modem_state_set>
   36464:	4b03      	ldr	r3, [pc, #12]	; (36474 <nrf_modem_fault_handler_internal+0x1c>)
   36466:	4668      	mov	r0, sp
   36468:	e9cd 5400 	strd	r5, r4, [sp]
   3646c:	681b      	ldr	r3, [r3, #0]
   3646e:	4798      	blx	r3
   36470:	b003      	add	sp, #12
   36472:	bd30      	pop	{r4, r5, pc}
   36474:	2001a514 	.word	0x2001a514

00036478 <nrf_modem_state_set>:
   36478:	4b01      	ldr	r3, [pc, #4]	; (36480 <nrf_modem_state_set+0x8>)
   3647a:	7018      	strb	r0, [r3, #0]
   3647c:	4770      	bx	lr
   3647e:	bf00      	nop
   36480:	2001d3e5 	.word	0x2001d3e5

00036484 <nrf_modem_state_is_initialized>:
   36484:	4b02      	ldr	r3, [pc, #8]	; (36490 <nrf_modem_state_is_initialized+0xc>)
   36486:	7818      	ldrb	r0, [r3, #0]
   36488:	1e43      	subs	r3, r0, #1
   3648a:	4258      	negs	r0, r3
   3648c:	4158      	adcs	r0, r3
   3648e:	4770      	bx	lr
   36490:	2001d3e5 	.word	0x2001d3e5

00036494 <nrf_modem_state_is_uninitialized>:
   36494:	4b02      	ldr	r3, [pc, #8]	; (364a0 <nrf_modem_state_is_uninitialized+0xc>)
   36496:	7818      	ldrb	r0, [r3, #0]
   36498:	fab0 f080 	clz	r0, r0
   3649c:	0940      	lsrs	r0, r0, #5
   3649e:	4770      	bx	lr
   364a0:	2001d3e5 	.word	0x2001d3e5

000364a4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   364a4:	4b0e      	ldr	r3, [pc, #56]	; (364e0 <z_sys_init_run_level+0x3c>)
{
   364a6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   364a8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   364ac:	3001      	adds	r0, #1
   364ae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   364b2:	42a6      	cmp	r6, r4
   364b4:	d800      	bhi.n	364b8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   364b6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   364b8:	e9d4 3500 	ldrd	r3, r5, [r4]
   364bc:	4628      	mov	r0, r5
   364be:	4798      	blx	r3
		if (dev != NULL) {
   364c0:	b165      	cbz	r5, 364dc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   364c2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   364c4:	b130      	cbz	r0, 364d4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   364c6:	2800      	cmp	r0, #0
   364c8:	bfb8      	it	lt
   364ca:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   364cc:	28ff      	cmp	r0, #255	; 0xff
   364ce:	bfa8      	it	ge
   364d0:	20ff      	movge	r0, #255	; 0xff
   364d2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   364d4:	785a      	ldrb	r2, [r3, #1]
   364d6:	f042 0201 	orr.w	r2, r2, #1
   364da:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   364dc:	3408      	adds	r4, #8
   364de:	e7e8      	b.n	364b2 <z_sys_init_run_level+0xe>
   364e0:	00043b04 	.word	0x00043b04

000364e4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   364e4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   364e6:	4605      	mov	r5, r0
   364e8:	b910      	cbnz	r0, 364f0 <z_impl_device_get_binding+0xc>
		return NULL;
   364ea:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   364ec:	4620      	mov	r0, r4
   364ee:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   364f0:	7803      	ldrb	r3, [r0, #0]
   364f2:	2b00      	cmp	r3, #0
   364f4:	d0f9      	beq.n	364ea <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   364f6:	4c0e      	ldr	r4, [pc, #56]	; (36530 <z_impl_device_get_binding+0x4c>)
   364f8:	4e0e      	ldr	r6, [pc, #56]	; (36534 <z_impl_device_get_binding+0x50>)
   364fa:	42b4      	cmp	r4, r6
   364fc:	d108      	bne.n	36510 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   364fe:	4c0c      	ldr	r4, [pc, #48]	; (36530 <z_impl_device_get_binding+0x4c>)
   36500:	42b4      	cmp	r4, r6
   36502:	d0f2      	beq.n	364ea <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   36504:	4620      	mov	r0, r4
   36506:	f00b f8a4 	bl	41652 <z_device_is_ready>
   3650a:	b950      	cbnz	r0, 36522 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   3650c:	3418      	adds	r4, #24
   3650e:	e7f7      	b.n	36500 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   36510:	4620      	mov	r0, r4
   36512:	f00b f89e 	bl	41652 <z_device_is_ready>
   36516:	b110      	cbz	r0, 3651e <z_impl_device_get_binding+0x3a>
   36518:	6823      	ldr	r3, [r4, #0]
   3651a:	42ab      	cmp	r3, r5
   3651c:	d0e6      	beq.n	364ec <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   3651e:	3418      	adds	r4, #24
   36520:	e7eb      	b.n	364fa <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   36522:	4628      	mov	r0, r5
   36524:	6821      	ldr	r1, [r4, #0]
   36526:	f7e6 fe82 	bl	1d22e <strcmp>
   3652a:	2800      	cmp	r0, #0
   3652c:	d1ee      	bne.n	3650c <z_impl_device_get_binding+0x28>
   3652e:	e7dd      	b.n	364ec <z_impl_device_get_binding+0x8>
   36530:	00042a70 	.word	0x00042a70
   36534:	00042b18 	.word	0x00042b18

00036538 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   36538:	4b01      	ldr	r3, [pc, #4]	; (36540 <z_impl_z_errno+0x8>)
   3653a:	6898      	ldr	r0, [r3, #8]
}
   3653c:	3070      	adds	r0, #112	; 0x70
   3653e:	4770      	bx	lr
   36540:	2001a518 	.word	0x2001a518

00036544 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   36544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36546:	4604      	mov	r4, r0
   36548:	460e      	mov	r6, r1
	__asm__ volatile(
   3654a:	f04f 0320 	mov.w	r3, #32
   3654e:	f3ef 8711 	mrs	r7, BASEPRI
   36552:	f383 8812 	msr	BASEPRI_MAX, r3
   36556:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   3655a:	f002 fb95 	bl	38c88 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3655e:	2200      	movs	r2, #0
   36560:	2c04      	cmp	r4, #4
   36562:	bf98      	it	ls
   36564:	4b1d      	ldrls	r3, [pc, #116]	; (365dc <z_fatal_error+0x98>)
   36566:	4605      	mov	r5, r0
	switch (reason) {
   36568:	bf94      	ite	ls
   3656a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   3656e:	4b1c      	ldrhi	r3, [pc, #112]	; (365e0 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   36570:	9200      	str	r2, [sp, #0]
   36572:	2145      	movs	r1, #69	; 0x45
   36574:	4622      	mov	r2, r4
   36576:	481b      	ldr	r0, [pc, #108]	; (365e4 <z_fatal_error+0xa0>)
   36578:	f006 fe3f 	bl	3d1fa <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3657c:	b13e      	cbz	r6, 3658e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3657e:	69f3      	ldr	r3, [r6, #28]
   36580:	f3c3 0308 	ubfx	r3, r3, #0, #9
   36584:	b11b      	cbz	r3, 3658e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   36586:	2145      	movs	r1, #69	; 0x45
   36588:	4817      	ldr	r0, [pc, #92]	; (365e8 <z_fatal_error+0xa4>)
   3658a:	f006 fe36 	bl	3d1fa <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   3658e:	b12d      	cbz	r5, 3659c <z_fatal_error+0x58>
   36590:	4628      	mov	r0, r5
   36592:	f00b f888 	bl	416a6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   36596:	b108      	cbz	r0, 3659c <z_fatal_error+0x58>
   36598:	7803      	ldrb	r3, [r0, #0]
   3659a:	b903      	cbnz	r3, 3659e <z_fatal_error+0x5a>
		thread_name = "unknown";
   3659c:	4813      	ldr	r0, [pc, #76]	; (365ec <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3659e:	4603      	mov	r3, r0
   365a0:	462a      	mov	r2, r5
   365a2:	2145      	movs	r1, #69	; 0x45
   365a4:	4812      	ldr	r0, [pc, #72]	; (365f0 <z_fatal_error+0xac>)
   365a6:	f006 fe28 	bl	3d1fa <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   365aa:	4631      	mov	r1, r6
   365ac:	4620      	mov	r0, r4
   365ae:	f7f2 fcff 	bl	28fb0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   365b2:	2c04      	cmp	r4, #4
   365b4:	d108      	bne.n	365c8 <z_fatal_error+0x84>
   365b6:	490f      	ldr	r1, [pc, #60]	; (365f4 <z_fatal_error+0xb0>)
   365b8:	480f      	ldr	r0, [pc, #60]	; (365f8 <z_fatal_error+0xb4>)
   365ba:	228f      	movs	r2, #143	; 0x8f
   365bc:	f006 fde3 	bl	3d186 <assert_print>
   365c0:	218f      	movs	r1, #143	; 0x8f
   365c2:	480c      	ldr	r0, [pc, #48]	; (365f4 <z_fatal_error+0xb0>)
   365c4:	f006 fdd8 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   365c8:	f387 8811 	msr	BASEPRI, r7
   365cc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   365d0:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   365d2:	b003      	add	sp, #12
   365d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   365d8:	f7ed b994 	b.w	23904 <z_impl_k_thread_abort>
   365dc:	00043b1c 	.word	0x00043b1c
   365e0:	0004c2b8 	.word	0x0004c2b8
   365e4:	0004c2ce 	.word	0x0004c2ce
   365e8:	0004c2fb 	.word	0x0004c2fb
   365ec:	0004c2c6 	.word	0x0004c2c6
   365f0:	0004c321 	.word	0x0004c321
   365f4:	0004c33e 	.word	0x0004c33e
   365f8:	0004494f 	.word	0x0004494f

000365fc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   365fc:	2201      	movs	r2, #1
{
   365fe:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   36600:	4b09      	ldr	r3, [pc, #36]	; (36628 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   36602:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   36604:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   36606:	f7ff ff4d 	bl	364a4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   3660a:	f003 fc87 	bl	39f1c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   3660e:	2003      	movs	r0, #3
   36610:	f7ff ff48 	bl	364a4 <z_sys_init_run_level>

	z_init_static_threads();
   36614:	f000 fa74 	bl	36b00 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   36618:	f7e9 fd72 	bl	20100 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3661c:	4a03      	ldr	r2, [pc, #12]	; (3662c <bg_thread_main+0x30>)
   3661e:	7b13      	ldrb	r3, [r2, #12]
   36620:	f023 0301 	bic.w	r3, r3, #1
   36624:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   36626:	bd08      	pop	{r3, pc}
   36628:	2001d3e6 	.word	0x2001d3e6
   3662c:	20018ee0 	.word	0x20018ee0

00036630 <z_bss_zero>:
{
   36630:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   36632:	4803      	ldr	r0, [pc, #12]	; (36640 <z_bss_zero+0x10>)
   36634:	4a03      	ldr	r2, [pc, #12]	; (36644 <z_bss_zero+0x14>)
   36636:	2100      	movs	r1, #0
   36638:	1a12      	subs	r2, r2, r0
   3663a:	f00b f814 	bl	41666 <z_early_memset>
}
   3663e:	bd08      	pop	{r3, pc}
   36640:	20015150 	.word	0x20015150
   36644:	2001d3e8 	.word	0x2001d3e8

00036648 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   36648:	23d0      	movs	r3, #208	; 0xd0
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   3664a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   3664c:	4e13      	ldr	r6, [pc, #76]	; (3669c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   3664e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   36650:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   36654:	2300      	movs	r3, #0
{
   36656:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   36658:	e9cd 2304 	strd	r2, r3, [sp, #16]
   3665c:	220f      	movs	r2, #15
   3665e:	9301      	str	r3, [sp, #4]
   36660:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   36664:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   36666:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3666a:	4d0d      	ldr	r5, [pc, #52]	; (366a0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   3666c:	490d      	ldr	r1, [pc, #52]	; (366a4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3666e:	fb03 5500 	mla	r5, r3, r0, r5
{
   36672:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   36674:	fb02 1100 	mla	r1, r2, r0, r1
   36678:	4b0b      	ldr	r3, [pc, #44]	; (366a8 <z_init_cpu+0x60>)
   3667a:	4630      	mov	r0, r6
   3667c:	9500      	str	r5, [sp, #0]
   3667e:	f000 f9a1 	bl	369c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   36682:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   36684:	4809      	ldr	r0, [pc, #36]	; (366ac <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   36686:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   36688:	3401      	adds	r4, #1
   3668a:	f023 0304 	bic.w	r3, r3, #4
   3668e:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   36692:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   36694:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   36696:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   36698:	b006      	add	sp, #24
   3669a:	bd70      	pop	{r4, r5, r6, pc}
   3669c:	20018e10 	.word	0x20018e10
   366a0:	2001a518 	.word	0x2001a518
   366a4:	20021a18 	.word	0x20021a18
   366a8:	00036c45 	.word	0x00036c45
   366ac:	20021b58 	.word	0x20021b58

000366b0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   366b0:	b500      	push	{lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   366b2:	4b2e      	ldr	r3, [pc, #184]	; (3676c <z_cstart+0xbc>)
   366b4:	b0bd      	sub	sp, #244	; 0xf4
	uint32_t msp =
   366b6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   366ba:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   366be:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   366c2:	2400      	movs	r4, #0
   366c4:	23e0      	movs	r3, #224	; 0xe0
   366c6:	4d2a      	ldr	r5, [pc, #168]	; (36770 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   366c8:	4e2a      	ldr	r6, [pc, #168]	; (36774 <z_cstart+0xc4>)
   366ca:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   366ce:	77ec      	strb	r4, [r5, #31]
   366d0:	762c      	strb	r4, [r5, #24]
   366d2:	766c      	strb	r4, [r5, #25]
   366d4:	76ac      	strb	r4, [r5, #26]
   366d6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   366da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   366dc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   366e0:	626b      	str	r3, [r5, #36]	; 0x24
   366e2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   366e6:	f7ed f84b 	bl	23780 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   366ea:	f7ec fc33 	bl	22f54 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   366ee:	f04f 33ff 	mov.w	r3, #4294967295
   366f2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   366f4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   366f6:	f7ed fb27 	bl	23d48 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   366fa:	f7ed f967 	bl	239cc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   366fe:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   36702:	ad08      	add	r5, sp, #32
   36704:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   36706:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	dummy_thread->stack_info.size = 0U;
   3670a:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
	k_thread_system_pool_assign(dummy_thread);
   3670e:	f003 fbe3 	bl	39ed8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   36712:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   36714:	f00a ff9c 	bl	41650 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   36718:	4620      	mov	r0, r4
   3671a:	f7ff fec3 	bl	364a4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3671e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   36720:	4d15      	ldr	r5, [pc, #84]	; (36778 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   36722:	f7ff febf 	bl	364a4 <z_sys_init_run_level>
	z_sched_init();
   36726:	f002 f965 	bl	389f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3672a:	4b14      	ldr	r3, [pc, #80]	; (3677c <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   3672c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3672e:	9305      	str	r3, [sp, #20]
   36730:	2301      	movs	r3, #1
   36732:	4e13      	ldr	r6, [pc, #76]	; (36780 <z_cstart+0xd0>)
   36734:	4913      	ldr	r1, [pc, #76]	; (36784 <z_cstart+0xd4>)
   36736:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3673a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   3673e:	4628      	mov	r0, r5
   36740:	4633      	mov	r3, r6
   36742:	e9cd 4401 	strd	r4, r4, [sp, #4]
   36746:	9400      	str	r4, [sp, #0]
   36748:	f000 f93c 	bl	369c4 <z_setup_new_thread>
   3674c:	7b6a      	ldrb	r2, [r5, #13]
   3674e:	9007      	str	r0, [sp, #28]
   36750:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   36754:	4628      	mov	r0, r5
   36756:	736a      	strb	r2, [r5, #13]
   36758:	f001 fe0a 	bl	38370 <z_ready_thread>
	z_init_cpu(0);
   3675c:	4620      	mov	r0, r4
   3675e:	f7ff ff73 	bl	36648 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   36762:	4632      	mov	r2, r6
   36764:	4628      	mov	r0, r5
   36766:	9907      	ldr	r1, [sp, #28]
   36768:	f7ec fda8 	bl	232bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3676c:	20021b58 	.word	0x20021b58
   36770:	e000ed00 	.word	0xe000ed00
   36774:	2001a518 	.word	0x2001a518
   36778:	20018ee0 	.word	0x20018ee0
   3677c:	00043c7c 	.word	0x00043c7c
   36780:	000365fd 	.word	0x000365fd
   36784:	20021618 	.word	0x20021618

00036788 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   36788:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   3678a:	4c0c      	ldr	r4, [pc, #48]	; (367bc <statics_init+0x34>)
   3678c:	4d0c      	ldr	r5, [pc, #48]	; (367c0 <statics_init+0x38>)
   3678e:	4e0d      	ldr	r6, [pc, #52]	; (367c4 <statics_init+0x3c>)
   36790:	42ac      	cmp	r4, r5
   36792:	d908      	bls.n	367a6 <statics_init+0x1e>
   36794:	4631      	mov	r1, r6
   36796:	480c      	ldr	r0, [pc, #48]	; (367c8 <statics_init+0x40>)
   36798:	2218      	movs	r2, #24
   3679a:	f006 fcf4 	bl	3d186 <assert_print>
   3679e:	2118      	movs	r1, #24
   367a0:	4630      	mov	r0, r6
   367a2:	f006 fce9 	bl	3d178 <assert_post_action>
   367a6:	42ac      	cmp	r4, r5
   367a8:	d301      	bcc.n	367ae <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   367aa:	2000      	movs	r0, #0
   367ac:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   367ae:	4620      	mov	r0, r4
   367b0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   367b4:	f00a ff5b 	bl	4166e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   367b8:	3418      	adds	r4, #24
   367ba:	e7e9      	b.n	36790 <statics_init+0x8>
   367bc:	20014e68 	.word	0x20014e68
   367c0:	20014ec8 	.word	0x20014ec8
   367c4:	0004c3aa 	.word	0x0004c3aa
   367c8:	0004494f 	.word	0x0004494f

000367cc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   367cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   367d0:	b085      	sub	sp, #20
   367d2:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   367d6:	4606      	mov	r6, r0
   367d8:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   367da:	4648      	mov	r0, r9
   367dc:	4639      	mov	r1, r7
{
   367de:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   367e0:	f00b f834 	bl	4184c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   367e4:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   367e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   367ec:	f04f 0320 	mov.w	r3, #32
   367f0:	f3ef 8411 	mrs	r4, BASEPRI
   367f4:	f383 8812 	msr	BASEPRI_MAX, r3
   367f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367fc:	4628      	mov	r0, r5
   367fe:	f000 f9fb 	bl	36bf8 <z_spin_lock_valid>
   36802:	b940      	cbnz	r0, 36816 <k_heap_aligned_alloc+0x4a>
   36804:	4932      	ldr	r1, [pc, #200]	; (368d0 <k_heap_aligned_alloc+0x104>)
   36806:	4833      	ldr	r0, [pc, #204]	; (368d4 <k_heap_aligned_alloc+0x108>)
   36808:	228e      	movs	r2, #142	; 0x8e
   3680a:	f006 fcbc 	bl	3d186 <assert_print>
   3680e:	218e      	movs	r1, #142	; 0x8e
   36810:	482f      	ldr	r0, [pc, #188]	; (368d0 <k_heap_aligned_alloc+0x104>)
   36812:	f006 fcb1 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   36816:	4628      	mov	r0, r5
   36818:	f000 fa0c 	bl	36c34 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3681c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36820:	b15b      	cbz	r3, 3683a <k_heap_aligned_alloc+0x6e>
   36822:	ea59 0307 	orrs.w	r3, r9, r7
   36826:	d008      	beq.n	3683a <k_heap_aligned_alloc+0x6e>
   36828:	492b      	ldr	r1, [pc, #172]	; (368d8 <k_heap_aligned_alloc+0x10c>)
   3682a:	482a      	ldr	r0, [pc, #168]	; (368d4 <k_heap_aligned_alloc+0x108>)
   3682c:	2249      	movs	r2, #73	; 0x49
   3682e:	f006 fcaa 	bl	3d186 <assert_print>
   36832:	2149      	movs	r1, #73	; 0x49
   36834:	4828      	ldr	r0, [pc, #160]	; (368d8 <k_heap_aligned_alloc+0x10c>)
   36836:	f006 fc9f 	bl	3d178 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3683a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 368d0 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3683e:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   36842:	4642      	mov	r2, r8
   36844:	4659      	mov	r1, fp
   36846:	4630      	mov	r0, r6
   36848:	f7ea ff96 	bl	21778 <sys_heap_aligned_alloc>
   3684c:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   3684e:	f002 fdcf 	bl	393f0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   36852:	b1a7      	cbz	r7, 3687e <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36854:	4628      	mov	r0, r5
   36856:	f000 f9dd 	bl	36c14 <z_spin_unlock_valid>
   3685a:	b940      	cbnz	r0, 3686e <k_heap_aligned_alloc+0xa2>
   3685c:	491c      	ldr	r1, [pc, #112]	; (368d0 <k_heap_aligned_alloc+0x104>)
   3685e:	481d      	ldr	r0, [pc, #116]	; (368d4 <k_heap_aligned_alloc+0x108>)
   36860:	22b9      	movs	r2, #185	; 0xb9
   36862:	f006 fc90 	bl	3d186 <assert_print>
   36866:	21b9      	movs	r1, #185	; 0xb9
   36868:	4819      	ldr	r0, [pc, #100]	; (368d0 <k_heap_aligned_alloc+0x104>)
   3686a:	f006 fc85 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3686e:	f384 8811 	msr	BASEPRI, r4
   36872:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   36876:	4638      	mov	r0, r7
   36878:	b005      	add	sp, #20
   3687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   3687e:	9b02      	ldr	r3, [sp, #8]
   36880:	1a18      	subs	r0, r3, r0
   36882:	9b03      	ldr	r3, [sp, #12]
   36884:	eb63 0101 	sbc.w	r1, r3, r1
   36888:	2801      	cmp	r0, #1
   3688a:	f171 0300 	sbcs.w	r3, r1, #0
   3688e:	dbe1      	blt.n	36854 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36890:	e9cd 0100 	strd	r0, r1, [sp]
   36894:	4652      	mov	r2, sl
   36896:	4621      	mov	r1, r4
   36898:	4628      	mov	r0, r5
   3689a:	f001 ff11 	bl	386c0 <z_pend_curr>
	__asm__ volatile(
   3689e:	f04f 0320 	mov.w	r3, #32
   368a2:	f3ef 8411 	mrs	r4, BASEPRI
   368a6:	f383 8812 	msr	BASEPRI_MAX, r3
   368aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   368ae:	4628      	mov	r0, r5
   368b0:	f000 f9a2 	bl	36bf8 <z_spin_lock_valid>
   368b4:	b940      	cbnz	r0, 368c8 <k_heap_aligned_alloc+0xfc>
   368b6:	4649      	mov	r1, r9
   368b8:	4806      	ldr	r0, [pc, #24]	; (368d4 <k_heap_aligned_alloc+0x108>)
   368ba:	228e      	movs	r2, #142	; 0x8e
   368bc:	f006 fc63 	bl	3d186 <assert_print>
   368c0:	218e      	movs	r1, #142	; 0x8e
   368c2:	4648      	mov	r0, r9
   368c4:	f006 fc58 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   368c8:	4628      	mov	r0, r5
   368ca:	f000 f9b3 	bl	36c34 <z_spin_lock_set_owner>
	return k;
   368ce:	e7b8      	b.n	36842 <k_heap_aligned_alloc+0x76>
   368d0:	00044989 	.word	0x00044989
   368d4:	0004494f 	.word	0x0004494f
   368d8:	0004c3aa 	.word	0x0004c3aa

000368dc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   368dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   368de:	4604      	mov	r4, r0
   368e0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   368e2:	f100 0514 	add.w	r5, r0, #20
   368e6:	f04f 0320 	mov.w	r3, #32
   368ea:	f3ef 8711 	mrs	r7, BASEPRI
   368ee:	f383 8812 	msr	BASEPRI_MAX, r3
   368f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   368f6:	4628      	mov	r0, r5
   368f8:	f000 f97e 	bl	36bf8 <z_spin_lock_valid>
   368fc:	b940      	cbnz	r0, 36910 <k_heap_free+0x34>
   368fe:	4916      	ldr	r1, [pc, #88]	; (36958 <k_heap_free+0x7c>)
   36900:	4816      	ldr	r0, [pc, #88]	; (3695c <k_heap_free+0x80>)
   36902:	228e      	movs	r2, #142	; 0x8e
   36904:	f006 fc3f 	bl	3d186 <assert_print>
   36908:	218e      	movs	r1, #142	; 0x8e
   3690a:	4813      	ldr	r0, [pc, #76]	; (36958 <k_heap_free+0x7c>)
   3690c:	f006 fc34 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   36910:	4628      	mov	r0, r5
   36912:	f000 f98f 	bl	36c34 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   36916:	4620      	mov	r0, r4
   36918:	4631      	mov	r1, r6
   3691a:	f7ea fef5 	bl	21708 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   3691e:	f104 000c 	add.w	r0, r4, #12
   36922:	f00a ff79 	bl	41818 <z_unpend_all>
   36926:	b128      	cbz	r0, 36934 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   36928:	4639      	mov	r1, r7
   3692a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3692c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   36930:	f001 baee 	b.w	37f10 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36934:	4628      	mov	r0, r5
   36936:	f000 f96d 	bl	36c14 <z_spin_unlock_valid>
   3693a:	b940      	cbnz	r0, 3694e <k_heap_free+0x72>
   3693c:	4906      	ldr	r1, [pc, #24]	; (36958 <k_heap_free+0x7c>)
   3693e:	4807      	ldr	r0, [pc, #28]	; (3695c <k_heap_free+0x80>)
   36940:	22b9      	movs	r2, #185	; 0xb9
   36942:	f006 fc20 	bl	3d186 <assert_print>
   36946:	21b9      	movs	r1, #185	; 0xb9
   36948:	4803      	ldr	r0, [pc, #12]	; (36958 <k_heap_free+0x7c>)
   3694a:	f006 fc15 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3694e:	f387 8811 	msr	BASEPRI, r7
   36952:	f3bf 8f6f 	isb	sy
}
   36956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36958:	00044989 	.word	0x00044989
   3695c:	0004494f 	.word	0x0004494f

00036960 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   36960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   36962:	4c14      	ldr	r4, [pc, #80]	; (369b4 <init_mem_slab_module+0x54>)
   36964:	4d14      	ldr	r5, [pc, #80]	; (369b8 <init_mem_slab_module+0x58>)
   36966:	4e15      	ldr	r6, [pc, #84]	; (369bc <init_mem_slab_module+0x5c>)
   36968:	42ac      	cmp	r4, r5
   3696a:	d908      	bls.n	3697e <init_mem_slab_module+0x1e>
   3696c:	4631      	mov	r1, r6
   3696e:	4814      	ldr	r0, [pc, #80]	; (369c0 <init_mem_slab_module+0x60>)
   36970:	223d      	movs	r2, #61	; 0x3d
   36972:	f006 fc08 	bl	3d186 <assert_print>
   36976:	213d      	movs	r1, #61	; 0x3d
   36978:	4630      	mov	r0, r6
   3697a:	f006 fbfd 	bl	3d178 <assert_post_action>
   3697e:	42ac      	cmp	r4, r5
   36980:	d301      	bcc.n	36986 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   36982:	2000      	movs	r0, #0
	return rc;
}
   36984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   36986:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   3698a:	ea42 0301 	orr.w	r3, r2, r1
   3698e:	f013 0303 	ands.w	r3, r3, #3
   36992:	d10b      	bne.n	369ac <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   36994:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   36996:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   36998:	4283      	cmp	r3, r0
   3699a:	d101      	bne.n	369a0 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3699c:	3420      	adds	r4, #32
   3699e:	e7e3      	b.n	36968 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   369a0:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   369a2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   369a4:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   369a6:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   369a8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   369aa:	e7f5      	b.n	36998 <init_mem_slab_module+0x38>
	return rc;
   369ac:	f06f 0015 	mvn.w	r0, #21
   369b0:	e7e8      	b.n	36984 <init_mem_slab_module+0x24>
   369b2:	bf00      	nop
   369b4:	20014e68 	.word	0x20014e68
   369b8:	20014e68 	.word	0x20014e68
   369bc:	0004c3cc 	.word	0x0004c3cc
   369c0:	0004494f 	.word	0x0004494f

000369c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   369c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   369c8:	b085      	sub	sp, #20
   369ca:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   369ce:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   369d0:	f1b9 0f0f 	cmp.w	r9, #15
{
   369d4:	460f      	mov	r7, r1
   369d6:	4615      	mov	r5, r2
   369d8:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   369da:	d130      	bne.n	36a3e <z_setup_new_thread+0x7a>
   369dc:	4b20      	ldr	r3, [pc, #128]	; (36a60 <z_setup_new_thread+0x9c>)
   369de:	4598      	cmp	r8, r3
   369e0:	d131      	bne.n	36a46 <z_setup_new_thread+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   369e2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   369e6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   369ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   369ec:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   369ee:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   369f0:	2304      	movs	r3, #4
   369f2:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   369f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   369f6:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   369f8:	9302      	str	r3, [sp, #8]
   369fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   369fc:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   36a00:	9301      	str	r3, [sp, #4]
   36a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   36a04:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   36a06:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   36a0a:	9300      	str	r3, [sp, #0]
   36a0c:	462a      	mov	r2, r5
   36a0e:	4643      	mov	r3, r8
   36a10:	4639      	mov	r1, r7
   36a12:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   36a14:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   36a18:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   36a1a:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   36a1e:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   36a20:	67e6      	str	r6, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   36a22:	f7ec fc2b 	bl	2327c <arch_new_thread>
	if (!_current) {
   36a26:	4b0f      	ldr	r3, [pc, #60]	; (36a64 <z_setup_new_thread+0xa0>)
	new_thread->init_data = NULL;
   36a28:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   36a2a:	689b      	ldr	r3, [r3, #8]
   36a2c:	b10b      	cbz	r3, 36a32 <z_setup_new_thread+0x6e>
	new_thread->resource_pool = _current->resource_pool;
   36a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   36a32:	4628      	mov	r0, r5
   36a34:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   36a38:	b005      	add	sp, #20
   36a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   36a3e:	f109 0310 	add.w	r3, r9, #16
   36a42:	2b1e      	cmp	r3, #30
   36a44:	d9cd      	bls.n	369e2 <z_setup_new_thread+0x1e>
   36a46:	f240 12ff 	movw	r2, #511	; 0x1ff
   36a4a:	4907      	ldr	r1, [pc, #28]	; (36a68 <z_setup_new_thread+0xa4>)
   36a4c:	4807      	ldr	r0, [pc, #28]	; (36a6c <z_setup_new_thread+0xa8>)
   36a4e:	f006 fb9a 	bl	3d186 <assert_print>
   36a52:	f240 11ff 	movw	r1, #511	; 0x1ff
   36a56:	4804      	ldr	r0, [pc, #16]	; (36a68 <z_setup_new_thread+0xa4>)
   36a58:	f006 fb8e 	bl	3d178 <assert_post_action>
   36a5c:	e7c1      	b.n	369e2 <z_setup_new_thread+0x1e>
   36a5e:	bf00      	nop
   36a60:	00036c45 	.word	0x00036c45
   36a64:	2001a518 	.word	0x2001a518
   36a68:	0004c3f1 	.word	0x0004c3f1
   36a6c:	0004494f 	.word	0x0004494f

00036a70 <z_impl_k_thread_create>:
{
   36a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36a74:	b088      	sub	sp, #32
   36a76:	4604      	mov	r4, r0
   36a78:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   36a7c:	460f      	mov	r7, r1
   36a7e:	4690      	mov	r8, r2
   36a80:	f3ef 8205 	mrs	r2, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   36a84:	b162      	cbz	r2, 36aa0 <z_impl_k_thread_create+0x30>
   36a86:	f240 226e 	movw	r2, #622	; 0x26e
   36a8a:	491a      	ldr	r1, [pc, #104]	; (36af4 <z_impl_k_thread_create+0x84>)
   36a8c:	481a      	ldr	r0, [pc, #104]	; (36af8 <z_impl_k_thread_create+0x88>)
   36a8e:	9307      	str	r3, [sp, #28]
   36a90:	f006 fb79 	bl	3d186 <assert_print>
   36a94:	f240 216e 	movw	r1, #622	; 0x26e
   36a98:	4816      	ldr	r0, [pc, #88]	; (36af4 <z_impl_k_thread_create+0x84>)
   36a9a:	f006 fb6d 	bl	3d178 <assert_post_action>
   36a9e:	9b07      	ldr	r3, [sp, #28]
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   36aa0:	2200      	movs	r2, #0
   36aa2:	9205      	str	r2, [sp, #20]
   36aa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   36aa6:	4639      	mov	r1, r7
   36aa8:	9204      	str	r2, [sp, #16]
   36aaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   36aac:	4620      	mov	r0, r4
   36aae:	9203      	str	r2, [sp, #12]
   36ab0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   36ab2:	9202      	str	r2, [sp, #8]
   36ab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   36ab6:	9201      	str	r2, [sp, #4]
   36ab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   36aba:	9200      	str	r2, [sp, #0]
   36abc:	4642      	mov	r2, r8
   36abe:	f7ff ff81 	bl	369c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   36ac2:	f1b5 3fff 	cmp.w	r5, #4294967295
   36ac6:	bf08      	it	eq
   36ac8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   36acc:	d005      	beq.n	36ada <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36ace:	ea55 0306 	orrs.w	r3, r5, r6
   36ad2:	d106      	bne.n	36ae2 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   36ad4:	4620      	mov	r0, r4
   36ad6:	f001 fc81 	bl	383dc <z_sched_start>
}
   36ada:	4620      	mov	r0, r4
   36adc:	b008      	add	sp, #32
   36ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   36ae2:	4632      	mov	r2, r6
   36ae4:	462b      	mov	r3, r5
   36ae6:	4905      	ldr	r1, [pc, #20]	; (36afc <z_impl_k_thread_create+0x8c>)
   36ae8:	f104 0018 	add.w	r0, r4, #24
   36aec:	f002 fa4a 	bl	38f84 <z_add_timeout>
   36af0:	e7f3      	b.n	36ada <z_impl_k_thread_create+0x6a>
   36af2:	bf00      	nop
   36af4:	0004c3f1 	.word	0x0004c3f1
   36af8:	0004494f 	.word	0x0004494f
   36afc:	000384e5 	.word	0x000384e5

00036b00 <z_init_static_threads>:
{
   36b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36b04:	4c37      	ldr	r4, [pc, #220]	; (36be4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   36b06:	4d38      	ldr	r5, [pc, #224]	; (36be8 <z_init_static_threads+0xe8>)
   36b08:	4f38      	ldr	r7, [pc, #224]	; (36bec <z_init_static_threads+0xec>)
{
   36b0a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   36b0c:	42ac      	cmp	r4, r5
   36b0e:	4626      	mov	r6, r4
   36b10:	d90a      	bls.n	36b28 <z_init_static_threads+0x28>
   36b12:	4639      	mov	r1, r7
   36b14:	4836      	ldr	r0, [pc, #216]	; (36bf0 <z_init_static_threads+0xf0>)
   36b16:	f240 22d5 	movw	r2, #725	; 0x2d5
   36b1a:	f006 fb34 	bl	3d186 <assert_print>
   36b1e:	f240 21d5 	movw	r1, #725	; 0x2d5
   36b22:	4638      	mov	r0, r7
   36b24:	f006 fb28 	bl	3d178 <assert_post_action>
   36b28:	42ae      	cmp	r6, r5
   36b2a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   36b2e:	d31b      	bcc.n	36b68 <z_init_static_threads+0x68>
	k_sched_lock();
   36b30:	f001 fa24 	bl	37f7c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   36b34:	4c2b      	ldr	r4, [pc, #172]	; (36be4 <z_init_static_threads+0xe4>)
   36b36:	4e2d      	ldr	r6, [pc, #180]	; (36bec <z_init_static_threads+0xec>)
   36b38:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 36bf0 <z_init_static_threads+0xf0>
   36b3c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 36bf4 <z_init_static_threads+0xf4>
   36b40:	42ac      	cmp	r4, r5
   36b42:	d90a      	bls.n	36b5a <z_init_static_threads+0x5a>
   36b44:	4631      	mov	r1, r6
   36b46:	4640      	mov	r0, r8
   36b48:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   36b4c:	f006 fb1b 	bl	3d186 <assert_print>
   36b50:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   36b54:	4630      	mov	r0, r6
   36b56:	f006 fb0f 	bl	3d178 <assert_post_action>
   36b5a:	42ac      	cmp	r4, r5
   36b5c:	d320      	bcc.n	36ba0 <z_init_static_threads+0xa0>
}
   36b5e:	b007      	add	sp, #28
   36b60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   36b64:	f001 beac 	b.w	388c0 <k_sched_unlock>
		z_setup_new_thread(
   36b68:	f854 3c04 	ldr.w	r3, [r4, #-4]
   36b6c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   36b70:	9305      	str	r3, [sp, #20]
   36b72:	f854 3c10 	ldr.w	r3, [r4, #-16]
   36b76:	9304      	str	r3, [sp, #16]
   36b78:	f854 3c14 	ldr.w	r3, [r4, #-20]
   36b7c:	9303      	str	r3, [sp, #12]
   36b7e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   36b82:	9302      	str	r3, [sp, #8]
   36b84:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   36b88:	9301      	str	r3, [sp, #4]
   36b8a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   36b8e:	9300      	str	r3, [sp, #0]
   36b90:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   36b94:	f7ff ff16 	bl	369c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   36b98:	f854 3c30 	ldr.w	r3, [r4, #-48]
   36b9c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   36b9e:	e7b5      	b.n	36b0c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   36ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36ba2:	1c5a      	adds	r2, r3, #1
   36ba4:	d00f      	beq.n	36bc6 <z_init_static_threads+0xc6>
   36ba6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   36baa:	f240 30e7 	movw	r0, #999	; 0x3e7
   36bae:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   36bb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   36bb4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36bb8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   36bbc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36bbe:	d104      	bne.n	36bca <z_init_static_threads+0xca>
	z_sched_start(thread);
   36bc0:	4638      	mov	r0, r7
   36bc2:	f001 fc0b 	bl	383dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   36bc6:	3430      	adds	r4, #48	; 0x30
   36bc8:	e7ba      	b.n	36b40 <z_init_static_threads+0x40>
   36bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36bce:	2300      	movs	r3, #0
   36bd0:	f7e6 f98a 	bl	1cee8 <__aeabi_uldivmod>
   36bd4:	4602      	mov	r2, r0
   36bd6:	460b      	mov	r3, r1
   36bd8:	f107 0018 	add.w	r0, r7, #24
   36bdc:	4649      	mov	r1, r9
   36bde:	f002 f9d1 	bl	38f84 <z_add_timeout>
   36be2:	e7f0      	b.n	36bc6 <z_init_static_threads+0xc6>
   36be4:	20014d08 	.word	0x20014d08
   36be8:	20014df8 	.word	0x20014df8
   36bec:	0004c3f1 	.word	0x0004c3f1
   36bf0:	0004494f 	.word	0x0004494f
   36bf4:	000384e5 	.word	0x000384e5

00036bf8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   36bf8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   36bfa:	b138      	cbz	r0, 36c0c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   36bfc:	4b04      	ldr	r3, [pc, #16]	; (36c10 <z_spin_lock_valid+0x18>)
   36bfe:	f000 0003 	and.w	r0, r0, #3
   36c02:	7d1b      	ldrb	r3, [r3, #20]
   36c04:	1ac0      	subs	r0, r0, r3
   36c06:	bf18      	it	ne
   36c08:	2001      	movne	r0, #1
   36c0a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   36c0c:	2001      	movs	r0, #1
}
   36c0e:	4770      	bx	lr
   36c10:	2001a518 	.word	0x2001a518

00036c14 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   36c14:	4a06      	ldr	r2, [pc, #24]	; (36c30 <z_spin_unlock_valid+0x1c>)
   36c16:	7d11      	ldrb	r1, [r2, #20]
   36c18:	6893      	ldr	r3, [r2, #8]
   36c1a:	6802      	ldr	r2, [r0, #0]
   36c1c:	430b      	orrs	r3, r1
   36c1e:	429a      	cmp	r2, r3
   36c20:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   36c24:	bf06      	itte	eq
   36c26:	6003      	streq	r3, [r0, #0]
	return true;
   36c28:	2001      	moveq	r0, #1
		return false;
   36c2a:	4618      	movne	r0, r3
}
   36c2c:	4770      	bx	lr
   36c2e:	bf00      	nop
   36c30:	2001a518 	.word	0x2001a518

00036c34 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   36c34:	4a02      	ldr	r2, [pc, #8]	; (36c40 <z_spin_lock_set_owner+0xc>)
   36c36:	7d11      	ldrb	r1, [r2, #20]
   36c38:	6893      	ldr	r3, [r2, #8]
   36c3a:	430b      	orrs	r3, r1
   36c3c:	6003      	str	r3, [r0, #0]
}
   36c3e:	4770      	bx	lr
   36c40:	2001a518 	.word	0x2001a518

00036c44 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   36c44:	4c12      	ldr	r4, [pc, #72]	; (36c90 <idle+0x4c>)
{
   36c46:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   36c48:	68a3      	ldr	r3, [r4, #8]
   36c4a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   36c4e:	2b00      	cmp	r3, #0
   36c50:	da08      	bge.n	36c64 <idle+0x20>
   36c52:	4910      	ldr	r1, [pc, #64]	; (36c94 <idle+0x50>)
   36c54:	4810      	ldr	r0, [pc, #64]	; (36c98 <idle+0x54>)
   36c56:	2227      	movs	r2, #39	; 0x27
   36c58:	f006 fa95 	bl	3d186 <assert_print>
   36c5c:	2127      	movs	r1, #39	; 0x27
   36c5e:	480d      	ldr	r0, [pc, #52]	; (36c94 <idle+0x50>)
   36c60:	f006 fa8a 	bl	3d178 <assert_post_action>
   36c64:	4d0d      	ldr	r5, [pc, #52]	; (36c9c <idle+0x58>)
	__asm__ volatile(
   36c66:	f04f 0220 	mov.w	r2, #32
   36c6a:	f3ef 8311 	mrs	r3, BASEPRI
   36c6e:	f382 8812 	msr	BASEPRI_MAX, r2
   36c72:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   36c76:	f002 faa9 	bl	391cc <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   36c7a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   36c7c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   36c7e:	b913      	cbnz	r3, 36c86 <idle+0x42>
	arch_cpu_idle();
   36c80:	f7ec f96e 	bl	22f60 <arch_cpu_idle>
}
   36c84:	e7ef      	b.n	36c66 <idle+0x22>
   36c86:	f7ec f893 	bl	22db0 <pm_system_suspend>
   36c8a:	2800      	cmp	r0, #0
   36c8c:	d1eb      	bne.n	36c66 <idle+0x22>
   36c8e:	e7f7      	b.n	36c80 <idle+0x3c>
   36c90:	2001a518 	.word	0x2001a518
   36c94:	0004c414 	.word	0x0004c414
   36c98:	0004494f 	.word	0x0004494f
   36c9c:	2001d3e6 	.word	0x2001d3e6

00036ca0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   36ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36ca4:	4604      	mov	r4, r0
   36ca6:	4689      	mov	r9, r1
   36ca8:	4690      	mov	r8, r2
   36caa:	461d      	mov	r5, r3
   36cac:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36cb0:	b15b      	cbz	r3, 36cca <z_impl_k_msgq_put+0x2a>
   36cb2:	ea52 0305 	orrs.w	r3, r2, r5
   36cb6:	d008      	beq.n	36cca <z_impl_k_msgq_put+0x2a>
   36cb8:	493d      	ldr	r1, [pc, #244]	; (36db0 <z_impl_k_msgq_put+0x110>)
   36cba:	483e      	ldr	r0, [pc, #248]	; (36db4 <z_impl_k_msgq_put+0x114>)
   36cbc:	2276      	movs	r2, #118	; 0x76
   36cbe:	f006 fa62 	bl	3d186 <assert_print>
   36cc2:	2176      	movs	r1, #118	; 0x76
   36cc4:	483a      	ldr	r0, [pc, #232]	; (36db0 <z_impl_k_msgq_put+0x110>)
   36cc6:	f006 fa57 	bl	3d178 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   36cca:	f104 0608 	add.w	r6, r4, #8
   36cce:	f04f 0320 	mov.w	r3, #32
   36cd2:	f3ef 8711 	mrs	r7, BASEPRI
   36cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   36cda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36cde:	4630      	mov	r0, r6
   36ce0:	f7ff ff8a 	bl	36bf8 <z_spin_lock_valid>
   36ce4:	b940      	cbnz	r0, 36cf8 <z_impl_k_msgq_put+0x58>
   36ce6:	4934      	ldr	r1, [pc, #208]	; (36db8 <z_impl_k_msgq_put+0x118>)
   36ce8:	4832      	ldr	r0, [pc, #200]	; (36db4 <z_impl_k_msgq_put+0x114>)
   36cea:	228e      	movs	r2, #142	; 0x8e
   36cec:	f006 fa4b 	bl	3d186 <assert_print>
   36cf0:	218e      	movs	r1, #142	; 0x8e
   36cf2:	4831      	ldr	r0, [pc, #196]	; (36db8 <z_impl_k_msgq_put+0x118>)
   36cf4:	f006 fa40 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   36cf8:	4630      	mov	r0, r6
   36cfa:	f7ff ff9b 	bl	36c34 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   36cfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   36d00:	6923      	ldr	r3, [r4, #16]
   36d02:	429a      	cmp	r2, r3
   36d04:	d240      	bcs.n	36d88 <z_impl_k_msgq_put+0xe8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36d06:	4620      	mov	r0, r4
   36d08:	f001 fe36 	bl	38978 <z_unpend_first_thread>
   36d0c:	4649      	mov	r1, r9
		if (pending_thread != NULL) {
   36d0e:	4605      	mov	r5, r0
   36d10:	68e2      	ldr	r2, [r4, #12]
   36d12:	b180      	cbz	r0, 36d36 <z_impl_k_msgq_put+0x96>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   36d14:	2400      	movs	r4, #0
   36d16:	6940      	ldr	r0, [r0, #20]
   36d18:	f00a ff02 	bl	41b20 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   36d1c:	4628      	mov	r0, r5
   36d1e:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
   36d22:	f001 fb25 	bl	38370 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   36d26:	4639      	mov	r1, r7
   36d28:	4630      	mov	r0, r6
   36d2a:	f001 f8f1 	bl	37f10 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   36d2e:	4620      	mov	r0, r4
   36d30:	b003      	add	sp, #12
   36d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36d36:	6a20      	ldr	r0, [r4, #32]
   36d38:	f00a fef2 	bl	41b20 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   36d3c:	6a23      	ldr	r3, [r4, #32]
   36d3e:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36d40:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   36d44:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   36d46:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   36d48:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36d4a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   36d4c:	bf08      	it	eq
   36d4e:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36d50:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   36d54:	bf08      	it	eq
   36d56:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36d5a:	3301      	adds	r3, #1
   36d5c:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36d5e:	f00a fe2e 	bl	419be <z_handle_obj_poll_events>
		result = 0;
   36d62:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d64:	4630      	mov	r0, r6
   36d66:	f7ff ff55 	bl	36c14 <z_spin_unlock_valid>
   36d6a:	b940      	cbnz	r0, 36d7e <z_impl_k_msgq_put+0xde>
   36d6c:	4912      	ldr	r1, [pc, #72]	; (36db8 <z_impl_k_msgq_put+0x118>)
   36d6e:	4811      	ldr	r0, [pc, #68]	; (36db4 <z_impl_k_msgq_put+0x114>)
   36d70:	22b9      	movs	r2, #185	; 0xb9
   36d72:	f006 fa08 	bl	3d186 <assert_print>
   36d76:	21b9      	movs	r1, #185	; 0xb9
   36d78:	480f      	ldr	r0, [pc, #60]	; (36db8 <z_impl_k_msgq_put+0x118>)
   36d7a:	f006 f9fd 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   36d7e:	f387 8811 	msr	BASEPRI, r7
   36d82:	f3bf 8f6f 	isb	sy
	return result;
   36d86:	e7d2      	b.n	36d2e <z_impl_k_msgq_put+0x8e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36d88:	ea58 0305 	orrs.w	r3, r8, r5
   36d8c:	d00c      	beq.n	36da8 <z_impl_k_msgq_put+0x108>
		_current->base.swap_data = (void *) data;
   36d8e:	4b0b      	ldr	r3, [pc, #44]	; (36dbc <z_impl_k_msgq_put+0x11c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36d90:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   36d92:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36d94:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   36d96:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36d9a:	4630      	mov	r0, r6
   36d9c:	e9cd 8500 	strd	r8, r5, [sp]
   36da0:	f001 fc8e 	bl	386c0 <z_pend_curr>
   36da4:	4604      	mov	r4, r0
		return result;
   36da6:	e7c2      	b.n	36d2e <z_impl_k_msgq_put+0x8e>
		result = -ENOMSG;
   36da8:	f06f 0422 	mvn.w	r4, #34	; 0x22
   36dac:	e7da      	b.n	36d64 <z_impl_k_msgq_put+0xc4>
   36dae:	bf00      	nop
   36db0:	0004c435 	.word	0x0004c435
   36db4:	0004494f 	.word	0x0004494f
   36db8:	00044989 	.word	0x00044989
   36dbc:	2001a518 	.word	0x2001a518

00036dc0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   36dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36dc4:	4604      	mov	r4, r0
   36dc6:	4688      	mov	r8, r1
   36dc8:	4617      	mov	r7, r2
   36dca:	461d      	mov	r5, r3
   36dcc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36dd0:	b15b      	cbz	r3, 36dea <z_impl_k_msgq_get+0x2a>
   36dd2:	ea52 0305 	orrs.w	r3, r2, r5
   36dd6:	d008      	beq.n	36dea <z_impl_k_msgq_get+0x2a>
   36dd8:	4940      	ldr	r1, [pc, #256]	; (36edc <z_impl_k_msgq_get+0x11c>)
   36dda:	4841      	ldr	r0, [pc, #260]	; (36ee0 <z_impl_k_msgq_get+0x120>)
   36ddc:	22d0      	movs	r2, #208	; 0xd0
   36dde:	f006 f9d2 	bl	3d186 <assert_print>
   36de2:	21d0      	movs	r1, #208	; 0xd0
   36de4:	483d      	ldr	r0, [pc, #244]	; (36edc <z_impl_k_msgq_get+0x11c>)
   36de6:	f006 f9c7 	bl	3d178 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   36dea:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   36dee:	f04f 0320 	mov.w	r3, #32
   36df2:	f3ef 8911 	mrs	r9, BASEPRI
   36df6:	f383 8812 	msr	BASEPRI_MAX, r3
   36dfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36dfe:	4630      	mov	r0, r6
   36e00:	f7ff fefa 	bl	36bf8 <z_spin_lock_valid>
   36e04:	b940      	cbnz	r0, 36e18 <z_impl_k_msgq_get+0x58>
   36e06:	4937      	ldr	r1, [pc, #220]	; (36ee4 <z_impl_k_msgq_get+0x124>)
   36e08:	4835      	ldr	r0, [pc, #212]	; (36ee0 <z_impl_k_msgq_get+0x120>)
   36e0a:	228e      	movs	r2, #142	; 0x8e
   36e0c:	f006 f9bb 	bl	3d186 <assert_print>
   36e10:	218e      	movs	r1, #142	; 0x8e
   36e12:	4834      	ldr	r0, [pc, #208]	; (36ee4 <z_impl_k_msgq_get+0x124>)
   36e14:	f006 f9b0 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   36e18:	4630      	mov	r0, r6
   36e1a:	f7ff ff0b 	bl	36c34 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   36e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36e20:	2b00      	cmp	r3, #0
   36e22:	d036      	beq.n	36e92 <z_impl_k_msgq_get+0xd2>
   36e24:	68e2      	ldr	r2, [r4, #12]
   36e26:	69e1      	ldr	r1, [r4, #28]
   36e28:	4640      	mov	r0, r8
   36e2a:	f00a fe79 	bl	41b20 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   36e2e:	69e3      	ldr	r3, [r4, #28]
   36e30:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36e32:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   36e34:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   36e36:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   36e38:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   36e3a:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   36e3c:	bf04      	itt	eq
   36e3e:	6963      	ldreq	r3, [r4, #20]
   36e40:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   36e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36e44:	3b01      	subs	r3, #1
   36e46:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36e48:	f001 fd96 	bl	38978 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   36e4c:	4605      	mov	r5, r0
   36e4e:	2800      	cmp	r0, #0
   36e50:	d031      	beq.n	36eb6 <z_impl_k_msgq_get+0xf6>
   36e52:	6941      	ldr	r1, [r0, #20]
   36e54:	68e2      	ldr	r2, [r4, #12]
   36e56:	6a20      	ldr	r0, [r4, #32]
   36e58:	f00a fe62 	bl	41b20 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   36e5c:	6a23      	ldr	r3, [r4, #32]
   36e5e:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   36e60:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   36e62:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   36e64:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   36e66:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36e68:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   36e6a:	bf04      	itt	eq
   36e6c:	6963      	ldreq	r3, [r4, #20]
   36e6e:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36e72:	3301      	adds	r3, #1
   36e74:	6263      	str	r3, [r4, #36]	; 0x24
   36e76:	2400      	movs	r4, #0
   36e78:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
			z_ready_thread(pending_thread);
   36e7c:	f001 fa78 	bl	38370 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   36e80:	4649      	mov	r1, r9
   36e82:	4630      	mov	r0, r6
   36e84:	f001 f844 	bl	37f10 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   36e88:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   36e8a:	4628      	mov	r0, r5
   36e8c:	b003      	add	sp, #12
   36e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36e92:	ea57 0305 	orrs.w	r3, r7, r5
   36e96:	d00c      	beq.n	36eb2 <z_impl_k_msgq_get+0xf2>
		_current->base.swap_data = data;
   36e98:	4b13      	ldr	r3, [pc, #76]	; (36ee8 <z_impl_k_msgq_get+0x128>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36e9a:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   36e9c:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36e9e:	4649      	mov	r1, r9
		_current->base.swap_data = data;
   36ea0:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36ea4:	4630      	mov	r0, r6
   36ea6:	e9cd 7500 	strd	r7, r5, [sp]
   36eaa:	f001 fc09 	bl	386c0 <z_pend_curr>
   36eae:	4605      	mov	r5, r0
		return result;
   36eb0:	e7eb      	b.n	36e8a <z_impl_k_msgq_get+0xca>
		result = -ENOMSG;
   36eb2:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36eb6:	4630      	mov	r0, r6
   36eb8:	f7ff feac 	bl	36c14 <z_spin_unlock_valid>
   36ebc:	b940      	cbnz	r0, 36ed0 <z_impl_k_msgq_get+0x110>
   36ebe:	4909      	ldr	r1, [pc, #36]	; (36ee4 <z_impl_k_msgq_get+0x124>)
   36ec0:	4807      	ldr	r0, [pc, #28]	; (36ee0 <z_impl_k_msgq_get+0x120>)
   36ec2:	22b9      	movs	r2, #185	; 0xb9
   36ec4:	f006 f95f 	bl	3d186 <assert_print>
   36ec8:	21b9      	movs	r1, #185	; 0xb9
   36eca:	4806      	ldr	r0, [pc, #24]	; (36ee4 <z_impl_k_msgq_get+0x124>)
   36ecc:	f006 f954 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   36ed0:	f389 8811 	msr	BASEPRI, r9
   36ed4:	f3bf 8f6f 	isb	sy
	return result;
   36ed8:	e7d7      	b.n	36e8a <z_impl_k_msgq_get+0xca>
   36eda:	bf00      	nop
   36edc:	0004c435 	.word	0x0004c435
   36ee0:	0004494f 	.word	0x0004494f
   36ee4:	00044989 	.word	0x00044989
   36ee8:	2001a518 	.word	0x2001a518

00036eec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   36eec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   36ef0:	4604      	mov	r4, r0
   36ef2:	4617      	mov	r7, r2
   36ef4:	461e      	mov	r6, r3
   36ef6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   36efa:	b143      	cbz	r3, 36f0e <z_impl_k_mutex_lock+0x22>
   36efc:	495f      	ldr	r1, [pc, #380]	; (3707c <z_impl_k_mutex_lock+0x190>)
   36efe:	4860      	ldr	r0, [pc, #384]	; (37080 <z_impl_k_mutex_lock+0x194>)
   36f00:	2265      	movs	r2, #101	; 0x65
   36f02:	f006 f940 	bl	3d186 <assert_print>
   36f06:	2165      	movs	r1, #101	; 0x65
   36f08:	485c      	ldr	r0, [pc, #368]	; (3707c <z_impl_k_mutex_lock+0x190>)
   36f0a:	f006 f935 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   36f0e:	f04f 0320 	mov.w	r3, #32
   36f12:	f3ef 8811 	mrs	r8, BASEPRI
   36f16:	f383 8812 	msr	BASEPRI_MAX, r3
   36f1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36f1e:	4859      	ldr	r0, [pc, #356]	; (37084 <z_impl_k_mutex_lock+0x198>)
   36f20:	f7ff fe6a 	bl	36bf8 <z_spin_lock_valid>
   36f24:	b940      	cbnz	r0, 36f38 <z_impl_k_mutex_lock+0x4c>
   36f26:	4958      	ldr	r1, [pc, #352]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   36f28:	4855      	ldr	r0, [pc, #340]	; (37080 <z_impl_k_mutex_lock+0x194>)
   36f2a:	228e      	movs	r2, #142	; 0x8e
   36f2c:	f006 f92b 	bl	3d186 <assert_print>
   36f30:	218e      	movs	r1, #142	; 0x8e
   36f32:	4855      	ldr	r0, [pc, #340]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   36f34:	f006 f920 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   36f38:	4852      	ldr	r0, [pc, #328]	; (37084 <z_impl_k_mutex_lock+0x198>)
   36f3a:	f7ff fe7b 	bl	36c34 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   36f3e:	68e3      	ldr	r3, [r4, #12]
   36f40:	4a52      	ldr	r2, [pc, #328]	; (3708c <z_impl_k_mutex_lock+0x1a0>)
   36f42:	b1d3      	cbz	r3, 36f7a <z_impl_k_mutex_lock+0x8e>
   36f44:	68a0      	ldr	r0, [r4, #8]
   36f46:	6891      	ldr	r1, [r2, #8]
   36f48:	4288      	cmp	r0, r1
   36f4a:	d033      	beq.n	36fb4 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   36f4c:	ea57 0306 	orrs.w	r3, r7, r6
   36f50:	d132      	bne.n	36fb8 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36f52:	484c      	ldr	r0, [pc, #304]	; (37084 <z_impl_k_mutex_lock+0x198>)
   36f54:	f7ff fe5e 	bl	36c14 <z_spin_unlock_valid>
   36f58:	b940      	cbnz	r0, 36f6c <z_impl_k_mutex_lock+0x80>
   36f5a:	494b      	ldr	r1, [pc, #300]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   36f5c:	4848      	ldr	r0, [pc, #288]	; (37080 <z_impl_k_mutex_lock+0x194>)
   36f5e:	22b9      	movs	r2, #185	; 0xb9
   36f60:	f006 f911 	bl	3d186 <assert_print>
   36f64:	21b9      	movs	r1, #185	; 0xb9
   36f66:	4848      	ldr	r0, [pc, #288]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   36f68:	f006 f906 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   36f6c:	f388 8811 	msr	BASEPRI, r8
   36f70:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   36f74:	f06f 000f 	mvn.w	r0, #15
   36f78:	e019      	b.n	36fae <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   36f7a:	6891      	ldr	r1, [r2, #8]
   36f7c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   36f80:	3301      	adds	r3, #1
   36f82:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   36f84:	6893      	ldr	r3, [r2, #8]
   36f86:	483f      	ldr	r0, [pc, #252]	; (37084 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   36f88:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   36f8a:	60a3      	str	r3, [r4, #8]
   36f8c:	f7ff fe42 	bl	36c14 <z_spin_unlock_valid>
   36f90:	b940      	cbnz	r0, 36fa4 <z_impl_k_mutex_lock+0xb8>
   36f92:	493d      	ldr	r1, [pc, #244]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   36f94:	483a      	ldr	r0, [pc, #232]	; (37080 <z_impl_k_mutex_lock+0x194>)
   36f96:	22b9      	movs	r2, #185	; 0xb9
   36f98:	f006 f8f5 	bl	3d186 <assert_print>
   36f9c:	21b9      	movs	r1, #185	; 0xb9
   36f9e:	483a      	ldr	r0, [pc, #232]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   36fa0:	f006 f8ea 	bl	3d178 <assert_post_action>
   36fa4:	f388 8811 	msr	BASEPRI, r8
   36fa8:	f3bf 8f6f 	isb	sy
		return 0;
   36fac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   36fae:	b002      	add	sp, #8
   36fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   36fb4:	6921      	ldr	r1, [r4, #16]
   36fb6:	e7e3      	b.n	36f80 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   36fb8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   36fbc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   36fc0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   36fc4:	4299      	cmp	r1, r3
   36fc6:	bfa8      	it	ge
   36fc8:	4619      	movge	r1, r3
   36fca:	4291      	cmp	r1, r2
   36fcc:	bfb8      	it	lt
   36fce:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   36fd0:	428b      	cmp	r3, r1
   36fd2:	dd3e      	ble.n	37052 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   36fd4:	f00a fb72 	bl	416bc <adjust_owner_prio.isra.0>
   36fd8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   36fda:	4622      	mov	r2, r4
   36fdc:	4641      	mov	r1, r8
   36fde:	e9cd 7600 	strd	r7, r6, [sp]
   36fe2:	4828      	ldr	r0, [pc, #160]	; (37084 <z_impl_k_mutex_lock+0x198>)
   36fe4:	f001 fb6c 	bl	386c0 <z_pend_curr>
	if (got_mutex == 0) {
   36fe8:	2800      	cmp	r0, #0
   36fea:	d0e0      	beq.n	36fae <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   36fec:	f04f 0320 	mov.w	r3, #32
   36ff0:	f3ef 8611 	mrs	r6, BASEPRI
   36ff4:	f383 8812 	msr	BASEPRI_MAX, r3
   36ff8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ffc:	4821      	ldr	r0, [pc, #132]	; (37084 <z_impl_k_mutex_lock+0x198>)
   36ffe:	f7ff fdfb 	bl	36bf8 <z_spin_lock_valid>
   37002:	b940      	cbnz	r0, 37016 <z_impl_k_mutex_lock+0x12a>
   37004:	4920      	ldr	r1, [pc, #128]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   37006:	481e      	ldr	r0, [pc, #120]	; (37080 <z_impl_k_mutex_lock+0x194>)
   37008:	228e      	movs	r2, #142	; 0x8e
   3700a:	f006 f8bc 	bl	3d186 <assert_print>
   3700e:	218e      	movs	r1, #142	; 0x8e
   37010:	481d      	ldr	r0, [pc, #116]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   37012:	f006 f8b1 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37016:	481b      	ldr	r0, [pc, #108]	; (37084 <z_impl_k_mutex_lock+0x198>)
   37018:	f7ff fe0c 	bl	36c34 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   3701c:	6823      	ldr	r3, [r4, #0]
   3701e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37020:	429c      	cmp	r4, r3
   37022:	d00a      	beq.n	3703a <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   37024:	b14b      	cbz	r3, 3703a <z_impl_k_mutex_lock+0x14e>
   37026:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3702a:	4299      	cmp	r1, r3
   3702c:	bfa8      	it	ge
   3702e:	4619      	movge	r1, r3
   37030:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   37034:	4299      	cmp	r1, r3
   37036:	bfb8      	it	lt
   37038:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3703a:	68a0      	ldr	r0, [r4, #8]
   3703c:	f00a fb3e 	bl	416bc <adjust_owner_prio.isra.0>
   37040:	b900      	cbnz	r0, 37044 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   37042:	b145      	cbz	r5, 37056 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   37044:	4631      	mov	r1, r6
   37046:	480f      	ldr	r0, [pc, #60]	; (37084 <z_impl_k_mutex_lock+0x198>)
   37048:	f000 ff62 	bl	37f10 <z_reschedule>
	return -EAGAIN;
   3704c:	f06f 000a 	mvn.w	r0, #10
   37050:	e7ad      	b.n	36fae <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   37052:	2500      	movs	r5, #0
   37054:	e7c1      	b.n	36fda <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37056:	480b      	ldr	r0, [pc, #44]	; (37084 <z_impl_k_mutex_lock+0x198>)
   37058:	f7ff fddc 	bl	36c14 <z_spin_unlock_valid>
   3705c:	b940      	cbnz	r0, 37070 <z_impl_k_mutex_lock+0x184>
   3705e:	490a      	ldr	r1, [pc, #40]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   37060:	4807      	ldr	r0, [pc, #28]	; (37080 <z_impl_k_mutex_lock+0x194>)
   37062:	22b9      	movs	r2, #185	; 0xb9
   37064:	f006 f88f 	bl	3d186 <assert_print>
   37068:	21b9      	movs	r1, #185	; 0xb9
   3706a:	4807      	ldr	r0, [pc, #28]	; (37088 <z_impl_k_mutex_lock+0x19c>)
   3706c:	f006 f884 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37070:	f386 8811 	msr	BASEPRI, r6
   37074:	f3bf 8f6f 	isb	sy
   37078:	e7e8      	b.n	3704c <z_impl_k_mutex_lock+0x160>
   3707a:	bf00      	nop
   3707c:	0004c457 	.word	0x0004c457
   37080:	0004494f 	.word	0x0004494f
   37084:	2001a544 	.word	0x2001a544
   37088:	00044989 	.word	0x00044989
   3708c:	2001a518 	.word	0x2001a518

00037090 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   37090:	b538      	push	{r3, r4, r5, lr}
   37092:	4604      	mov	r4, r0
   37094:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   37098:	b143      	cbz	r3, 370ac <z_impl_k_mutex_unlock+0x1c>
   3709a:	4944      	ldr	r1, [pc, #272]	; (371ac <z_impl_k_mutex_unlock+0x11c>)
   3709c:	4844      	ldr	r0, [pc, #272]	; (371b0 <z_impl_k_mutex_unlock+0x120>)
   3709e:	22c7      	movs	r2, #199	; 0xc7
   370a0:	f006 f871 	bl	3d186 <assert_print>
   370a4:	21c7      	movs	r1, #199	; 0xc7
   370a6:	4841      	ldr	r0, [pc, #260]	; (371ac <z_impl_k_mutex_unlock+0x11c>)
   370a8:	f006 f866 	bl	3d178 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   370ac:	68a3      	ldr	r3, [r4, #8]
   370ae:	2b00      	cmp	r3, #0
   370b0:	d075      	beq.n	3719e <z_impl_k_mutex_unlock+0x10e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   370b2:	4d40      	ldr	r5, [pc, #256]	; (371b4 <z_impl_k_mutex_unlock+0x124>)
   370b4:	68aa      	ldr	r2, [r5, #8]
   370b6:	4293      	cmp	r3, r2
   370b8:	d174      	bne.n	371a4 <z_impl_k_mutex_unlock+0x114>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   370ba:	68e3      	ldr	r3, [r4, #12]
   370bc:	b943      	cbnz	r3, 370d0 <z_impl_k_mutex_unlock+0x40>
   370be:	493b      	ldr	r1, [pc, #236]	; (371ac <z_impl_k_mutex_unlock+0x11c>)
   370c0:	483b      	ldr	r0, [pc, #236]	; (371b0 <z_impl_k_mutex_unlock+0x120>)
   370c2:	22df      	movs	r2, #223	; 0xdf
   370c4:	f006 f85f 	bl	3d186 <assert_print>
   370c8:	21df      	movs	r1, #223	; 0xdf
   370ca:	4838      	ldr	r0, [pc, #224]	; (371ac <z_impl_k_mutex_unlock+0x11c>)
   370cc:	f006 f854 	bl	3d178 <assert_post_action>
   370d0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   370d4:	b143      	cbz	r3, 370e8 <z_impl_k_mutex_unlock+0x58>
   370d6:	4938      	ldr	r1, [pc, #224]	; (371b8 <z_impl_k_mutex_unlock+0x128>)
   370d8:	4835      	ldr	r0, [pc, #212]	; (371b0 <z_impl_k_mutex_unlock+0x120>)
   370da:	22fd      	movs	r2, #253	; 0xfd
   370dc:	f006 f853 	bl	3d186 <assert_print>
   370e0:	21fd      	movs	r1, #253	; 0xfd
   370e2:	4835      	ldr	r0, [pc, #212]	; (371b8 <z_impl_k_mutex_unlock+0x128>)
   370e4:	f006 f848 	bl	3d178 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   370e8:	68ab      	ldr	r3, [r5, #8]
   370ea:	7bdb      	ldrb	r3, [r3, #15]
   370ec:	2b01      	cmp	r3, #1
   370ee:	d108      	bne.n	37102 <z_impl_k_mutex_unlock+0x72>
   370f0:	4931      	ldr	r1, [pc, #196]	; (371b8 <z_impl_k_mutex_unlock+0x128>)
   370f2:	482f      	ldr	r0, [pc, #188]	; (371b0 <z_impl_k_mutex_unlock+0x120>)
   370f4:	22fe      	movs	r2, #254	; 0xfe
   370f6:	f006 f846 	bl	3d186 <assert_print>
   370fa:	21fe      	movs	r1, #254	; 0xfe
   370fc:	482e      	ldr	r0, [pc, #184]	; (371b8 <z_impl_k_mutex_unlock+0x128>)
   370fe:	f006 f83b 	bl	3d178 <assert_post_action>

	--_current->base.sched_locked;
   37102:	68aa      	ldr	r2, [r5, #8]
   37104:	7bd3      	ldrb	r3, [r2, #15]
   37106:	3b01      	subs	r3, #1
   37108:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   3710a:	68e3      	ldr	r3, [r4, #12]
   3710c:	2b01      	cmp	r3, #1
   3710e:	d905      	bls.n	3711c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   37110:	3b01      	subs	r3, #1
   37112:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   37114:	f001 fbd4 	bl	388c0 <k_sched_unlock>

	return 0;
   37118:	2000      	movs	r0, #0
}
   3711a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   3711c:	f04f 0320 	mov.w	r3, #32
   37120:	f3ef 8511 	mrs	r5, BASEPRI
   37124:	f383 8812 	msr	BASEPRI_MAX, r3
   37128:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3712c:	4823      	ldr	r0, [pc, #140]	; (371bc <z_impl_k_mutex_unlock+0x12c>)
   3712e:	f7ff fd63 	bl	36bf8 <z_spin_lock_valid>
   37132:	b940      	cbnz	r0, 37146 <z_impl_k_mutex_unlock+0xb6>
   37134:	4922      	ldr	r1, [pc, #136]	; (371c0 <z_impl_k_mutex_unlock+0x130>)
   37136:	481e      	ldr	r0, [pc, #120]	; (371b0 <z_impl_k_mutex_unlock+0x120>)
   37138:	228e      	movs	r2, #142	; 0x8e
   3713a:	f006 f824 	bl	3d186 <assert_print>
   3713e:	218e      	movs	r1, #142	; 0x8e
   37140:	481f      	ldr	r0, [pc, #124]	; (371c0 <z_impl_k_mutex_unlock+0x130>)
   37142:	f006 f819 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37146:	481d      	ldr	r0, [pc, #116]	; (371bc <z_impl_k_mutex_unlock+0x12c>)
   37148:	f7ff fd74 	bl	36c34 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3714c:	6921      	ldr	r1, [r4, #16]
   3714e:	68a0      	ldr	r0, [r4, #8]
   37150:	f00a fab4 	bl	416bc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   37154:	4620      	mov	r0, r4
   37156:	f001 fc0f 	bl	38978 <z_unpend_first_thread>
	mutex->owner = new_owner;
   3715a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3715c:	b160      	cbz	r0, 37178 <z_impl_k_mutex_unlock+0xe8>
		mutex->owner_orig_prio = new_owner->base.prio;
   3715e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   37162:	6122      	str	r2, [r4, #16]
   37164:	2200      	movs	r2, #0
   37166:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   3716a:	f001 f901 	bl	38370 <z_ready_thread>
		z_reschedule(&lock, key);
   3716e:	4629      	mov	r1, r5
   37170:	4812      	ldr	r0, [pc, #72]	; (371bc <z_impl_k_mutex_unlock+0x12c>)
   37172:	f000 fecd 	bl	37f10 <z_reschedule>
   37176:	e7cd      	b.n	37114 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   37178:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3717a:	4810      	ldr	r0, [pc, #64]	; (371bc <z_impl_k_mutex_unlock+0x12c>)
   3717c:	f7ff fd4a 	bl	36c14 <z_spin_unlock_valid>
   37180:	b940      	cbnz	r0, 37194 <z_impl_k_mutex_unlock+0x104>
   37182:	490f      	ldr	r1, [pc, #60]	; (371c0 <z_impl_k_mutex_unlock+0x130>)
   37184:	480a      	ldr	r0, [pc, #40]	; (371b0 <z_impl_k_mutex_unlock+0x120>)
   37186:	22b9      	movs	r2, #185	; 0xb9
   37188:	f005 fffd 	bl	3d186 <assert_print>
   3718c:	21b9      	movs	r1, #185	; 0xb9
   3718e:	480c      	ldr	r0, [pc, #48]	; (371c0 <z_impl_k_mutex_unlock+0x130>)
   37190:	f005 fff2 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37194:	f385 8811 	msr	BASEPRI, r5
   37198:	f3bf 8f6f 	isb	sy
   3719c:	e7ba      	b.n	37114 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   3719e:	f06f 0015 	mvn.w	r0, #21
   371a2:	e7ba      	b.n	3711a <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   371a4:	f04f 30ff 	mov.w	r0, #4294967295
   371a8:	e7b7      	b.n	3711a <z_impl_k_mutex_unlock+0x8a>
   371aa:	bf00      	nop
   371ac:	0004c457 	.word	0x0004c457
   371b0:	0004494f 	.word	0x0004494f
   371b4:	2001a518 	.word	0x2001a518
   371b8:	0004c479 	.word	0x0004c479
   371bc:	2001a544 	.word	0x2001a544
   371c0:	00044989 	.word	0x00044989

000371c4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   371c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   371c8:	4604      	mov	r4, r0
   371ca:	460d      	mov	r5, r1
   371cc:	4690      	mov	r8, r2
   371ce:	4699      	mov	r9, r3
   371d0:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   371d4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   371d8:	f04f 0320 	mov.w	r3, #32
   371dc:	f3ef 8711 	mrs	r7, BASEPRI
   371e0:	f383 8812 	msr	BASEPRI_MAX, r3
   371e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   371e8:	4630      	mov	r0, r6
   371ea:	f7ff fd05 	bl	36bf8 <z_spin_lock_valid>
   371ee:	b940      	cbnz	r0, 37202 <queue_insert+0x3e>
   371f0:	4937      	ldr	r1, [pc, #220]	; (372d0 <queue_insert+0x10c>)
   371f2:	4838      	ldr	r0, [pc, #224]	; (372d4 <queue_insert+0x110>)
   371f4:	228e      	movs	r2, #142	; 0x8e
   371f6:	f005 ffc6 	bl	3d186 <assert_print>
   371fa:	218e      	movs	r1, #142	; 0x8e
   371fc:	4834      	ldr	r0, [pc, #208]	; (372d0 <queue_insert+0x10c>)
   371fe:	f005 ffbb 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37202:	4630      	mov	r0, r6
   37204:	f7ff fd16 	bl	36c34 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   37208:	f1ba 0f00 	cmp.w	sl, #0
   3720c:	d000      	beq.n	37210 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   3720e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   37210:	f104 000c 	add.w	r0, r4, #12
   37214:	f001 fbb0 	bl	38978 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   37218:	b160      	cbz	r0, 37234 <queue_insert+0x70>
   3721a:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3721c:	f8c0 8014 	str.w	r8, [r0, #20]
   37220:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   37224:	f001 f8a4 	bl	38370 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   37228:	4630      	mov	r0, r6
   3722a:	4639      	mov	r1, r7
   3722c:	f000 fe70 	bl	37f10 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   37230:	2000      	movs	r0, #0
   37232:	e019      	b.n	37268 <queue_insert+0xa4>
	if (alloc) {
   37234:	f1b9 0f00 	cmp.w	r9, #0
   37238:	d028      	beq.n	3728c <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   3723a:	2108      	movs	r1, #8
   3723c:	f002 fe52 	bl	39ee4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   37240:	b9a0      	cbnz	r0, 3726c <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37242:	4630      	mov	r0, r6
   37244:	f7ff fce6 	bl	36c14 <z_spin_unlock_valid>
   37248:	b940      	cbnz	r0, 3725c <queue_insert+0x98>
   3724a:	4921      	ldr	r1, [pc, #132]	; (372d0 <queue_insert+0x10c>)
   3724c:	4821      	ldr	r0, [pc, #132]	; (372d4 <queue_insert+0x110>)
   3724e:	22b9      	movs	r2, #185	; 0xb9
   37250:	f005 ff99 	bl	3d186 <assert_print>
   37254:	21b9      	movs	r1, #185	; 0xb9
   37256:	481e      	ldr	r0, [pc, #120]	; (372d0 <queue_insert+0x10c>)
   37258:	f005 ff8e 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3725c:	f387 8811 	msr	BASEPRI, r7
   37260:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   37264:	f06f 000b 	mvn.w	r0, #11
}
   37268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3726c:	2301      	movs	r3, #1
		anode->data = data;
   3726e:	f8c0 8004 	str.w	r8, [r0, #4]
   37272:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   37274:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   37276:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   3727a:	b95d      	cbnz	r5, 37294 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3727c:	6823      	ldr	r3, [r4, #0]
   3727e:	4313      	orrs	r3, r2
   37280:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   37282:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   37284:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   37286:	b973      	cbnz	r3, 372a6 <queue_insert+0xe2>
	list->tail = node;
   37288:	6060      	str	r0, [r4, #4]
}
   3728a:	e00c      	b.n	372a6 <queue_insert+0xe2>
}
   3728c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   3728e:	f8c8 9000 	str.w	r9, [r8]
}
   37292:	e7ef      	b.n	37274 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   37294:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   37296:	f033 0303 	bics.w	r3, r3, #3
   3729a:	d110      	bne.n	372be <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3729c:	6002      	str	r2, [r0, #0]
	return list->tail;
   3729e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   372a0:	b93a      	cbnz	r2, 372b2 <queue_insert+0xee>
	list->head = node;
   372a2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   372a6:	2104      	movs	r1, #4
   372a8:	f104 0014 	add.w	r0, r4, #20
   372ac:	f00a fb87 	bl	419be <z_handle_obj_poll_events>
   372b0:	e7ba      	b.n	37228 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   372b2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   372b4:	f003 0303 	and.w	r3, r3, #3
   372b8:	4303      	orrs	r3, r0
   372ba:	6013      	str	r3, [r2, #0]
   372bc:	e7e4      	b.n	37288 <queue_insert+0xc4>
   372be:	4313      	orrs	r3, r2
   372c0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   372c2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   372c4:	f003 0303 	and.w	r3, r3, #3
   372c8:	4303      	orrs	r3, r0
   372ca:	602b      	str	r3, [r5, #0]
}
   372cc:	e7eb      	b.n	372a6 <queue_insert+0xe2>
   372ce:	bf00      	nop
   372d0:	00044989 	.word	0x00044989
   372d4:	0004494f 	.word	0x0004494f

000372d8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   372d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   372dc:	4605      	mov	r5, r0
   372de:	4690      	mov	r8, r2
   372e0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   372e2:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   372e6:	f04f 0320 	mov.w	r3, #32
   372ea:	f3ef 8911 	mrs	r9, BASEPRI
   372ee:	f383 8812 	msr	BASEPRI_MAX, r3
   372f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   372f6:	4630      	mov	r0, r6
   372f8:	f7ff fc7e 	bl	36bf8 <z_spin_lock_valid>
   372fc:	b940      	cbnz	r0, 37310 <z_impl_k_queue_get+0x38>
   372fe:	4921      	ldr	r1, [pc, #132]	; (37384 <z_impl_k_queue_get+0xac>)
   37300:	4821      	ldr	r0, [pc, #132]	; (37388 <z_impl_k_queue_get+0xb0>)
   37302:	228e      	movs	r2, #142	; 0x8e
   37304:	f005 ff3f 	bl	3d186 <assert_print>
   37308:	218e      	movs	r1, #142	; 0x8e
   3730a:	481e      	ldr	r0, [pc, #120]	; (37384 <z_impl_k_queue_get+0xac>)
   3730c:	f005 ff34 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37310:	4630      	mov	r0, r6
   37312:	f7ff fc8f 	bl	36c34 <z_spin_lock_set_owner>
	return list->head;
   37316:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   37318:	b314      	cbz	r4, 37360 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3731a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3731c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3731e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   37322:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   37324:	4620      	mov	r0, r4
   37326:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   3732a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   3732c:	bf08      	it	eq
   3732e:	606b      	streq	r3, [r5, #4]
   37330:	f00a f9d3 	bl	416da <z_queue_node_peek>
   37334:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37336:	4630      	mov	r0, r6
   37338:	f7ff fc6c 	bl	36c14 <z_spin_unlock_valid>
   3733c:	b940      	cbnz	r0, 37350 <z_impl_k_queue_get+0x78>
   3733e:	4911      	ldr	r1, [pc, #68]	; (37384 <z_impl_k_queue_get+0xac>)
   37340:	4811      	ldr	r0, [pc, #68]	; (37388 <z_impl_k_queue_get+0xb0>)
   37342:	22b9      	movs	r2, #185	; 0xb9
   37344:	f005 ff1f 	bl	3d186 <assert_print>
   37348:	21b9      	movs	r1, #185	; 0xb9
   3734a:	480e      	ldr	r0, [pc, #56]	; (37384 <z_impl_k_queue_get+0xac>)
   3734c:	f005 ff14 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37350:	f389 8811 	msr	BASEPRI, r9
   37354:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   37358:	4620      	mov	r0, r4
   3735a:	b003      	add	sp, #12
   3735c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37360:	ea58 0307 	orrs.w	r3, r8, r7
   37364:	d0e7      	beq.n	37336 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   37366:	4649      	mov	r1, r9
   37368:	4630      	mov	r0, r6
   3736a:	e9cd 8700 	strd	r8, r7, [sp]
   3736e:	f105 020c 	add.w	r2, r5, #12
   37372:	f001 f9a5 	bl	386c0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   37376:	2800      	cmp	r0, #0
   37378:	d1ee      	bne.n	37358 <z_impl_k_queue_get+0x80>
   3737a:	4b04      	ldr	r3, [pc, #16]	; (3738c <z_impl_k_queue_get+0xb4>)
   3737c:	689b      	ldr	r3, [r3, #8]
   3737e:	695c      	ldr	r4, [r3, #20]
   37380:	e7ea      	b.n	37358 <z_impl_k_queue_get+0x80>
   37382:	bf00      	nop
   37384:	00044989 	.word	0x00044989
   37388:	0004494f 	.word	0x0004494f
   3738c:	2001a518 	.word	0x2001a518

00037390 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   37390:	b538      	push	{r3, r4, r5, lr}
   37392:	4604      	mov	r4, r0
	__asm__ volatile(
   37394:	f04f 0320 	mov.w	r3, #32
   37398:	f3ef 8511 	mrs	r5, BASEPRI
   3739c:	f383 8812 	msr	BASEPRI_MAX, r3
   373a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   373a4:	4815      	ldr	r0, [pc, #84]	; (373fc <z_impl_k_sem_give+0x6c>)
   373a6:	f7ff fc27 	bl	36bf8 <z_spin_lock_valid>
   373aa:	b940      	cbnz	r0, 373be <z_impl_k_sem_give+0x2e>
   373ac:	4914      	ldr	r1, [pc, #80]	; (37400 <z_impl_k_sem_give+0x70>)
   373ae:	4815      	ldr	r0, [pc, #84]	; (37404 <z_impl_k_sem_give+0x74>)
   373b0:	228e      	movs	r2, #142	; 0x8e
   373b2:	f005 fee8 	bl	3d186 <assert_print>
   373b6:	218e      	movs	r1, #142	; 0x8e
   373b8:	4811      	ldr	r0, [pc, #68]	; (37400 <z_impl_k_sem_give+0x70>)
   373ba:	f005 fedd 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   373be:	480f      	ldr	r0, [pc, #60]	; (373fc <z_impl_k_sem_give+0x6c>)
   373c0:	f7ff fc38 	bl	36c34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   373c4:	4620      	mov	r0, r4
   373c6:	f001 fad7 	bl	38978 <z_unpend_first_thread>

	if (thread != NULL) {
   373ca:	b150      	cbz	r0, 373e2 <z_impl_k_sem_give+0x52>
   373cc:	2200      	movs	r2, #0
   373ce:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   373d2:	f000 ffcd 	bl	38370 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   373d6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   373d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   373dc:	4807      	ldr	r0, [pc, #28]	; (373fc <z_impl_k_sem_give+0x6c>)
   373de:	f000 bd97 	b.w	37f10 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   373e2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   373e6:	429a      	cmp	r2, r3
   373e8:	bf18      	it	ne
   373ea:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   373ec:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   373ee:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   373f0:	f104 0010 	add.w	r0, r4, #16
   373f4:	f00a fae3 	bl	419be <z_handle_obj_poll_events>
}
   373f8:	e7ed      	b.n	373d6 <z_impl_k_sem_give+0x46>
   373fa:	bf00      	nop
   373fc:	2001a548 	.word	0x2001a548
   37400:	00044989 	.word	0x00044989
   37404:	0004494f 	.word	0x0004494f

00037408 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   37408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3740a:	4604      	mov	r4, r0
   3740c:	4616      	mov	r6, r2
   3740e:	461d      	mov	r5, r3
   37410:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   37414:	b15b      	cbz	r3, 3742e <z_impl_k_sem_take+0x26>
   37416:	ea52 0305 	orrs.w	r3, r2, r5
   3741a:	d008      	beq.n	3742e <z_impl_k_sem_take+0x26>
   3741c:	492b      	ldr	r1, [pc, #172]	; (374cc <z_impl_k_sem_take+0xc4>)
   3741e:	482c      	ldr	r0, [pc, #176]	; (374d0 <z_impl_k_sem_take+0xc8>)
   37420:	2279      	movs	r2, #121	; 0x79
   37422:	f005 feb0 	bl	3d186 <assert_print>
   37426:	2179      	movs	r1, #121	; 0x79
   37428:	4828      	ldr	r0, [pc, #160]	; (374cc <z_impl_k_sem_take+0xc4>)
   3742a:	f005 fea5 	bl	3d178 <assert_post_action>
   3742e:	f04f 0320 	mov.w	r3, #32
   37432:	f3ef 8711 	mrs	r7, BASEPRI
   37436:	f383 8812 	msr	BASEPRI_MAX, r3
   3743a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3743e:	4825      	ldr	r0, [pc, #148]	; (374d4 <z_impl_k_sem_take+0xcc>)
   37440:	f7ff fbda 	bl	36bf8 <z_spin_lock_valid>
   37444:	b940      	cbnz	r0, 37458 <z_impl_k_sem_take+0x50>
   37446:	4924      	ldr	r1, [pc, #144]	; (374d8 <z_impl_k_sem_take+0xd0>)
   37448:	4821      	ldr	r0, [pc, #132]	; (374d0 <z_impl_k_sem_take+0xc8>)
   3744a:	228e      	movs	r2, #142	; 0x8e
   3744c:	f005 fe9b 	bl	3d186 <assert_print>
   37450:	218e      	movs	r1, #142	; 0x8e
   37452:	4821      	ldr	r0, [pc, #132]	; (374d8 <z_impl_k_sem_take+0xd0>)
   37454:	f005 fe90 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37458:	481e      	ldr	r0, [pc, #120]	; (374d4 <z_impl_k_sem_take+0xcc>)
   3745a:	f7ff fbeb 	bl	36c34 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   3745e:	68a3      	ldr	r3, [r4, #8]
   37460:	b1ab      	cbz	r3, 3748e <z_impl_k_sem_take+0x86>
		sem->count--;
   37462:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37464:	481b      	ldr	r0, [pc, #108]	; (374d4 <z_impl_k_sem_take+0xcc>)
   37466:	60a3      	str	r3, [r4, #8]
   37468:	f7ff fbd4 	bl	36c14 <z_spin_unlock_valid>
   3746c:	b940      	cbnz	r0, 37480 <z_impl_k_sem_take+0x78>
   3746e:	491a      	ldr	r1, [pc, #104]	; (374d8 <z_impl_k_sem_take+0xd0>)
   37470:	4817      	ldr	r0, [pc, #92]	; (374d0 <z_impl_k_sem_take+0xc8>)
   37472:	22b9      	movs	r2, #185	; 0xb9
   37474:	f005 fe87 	bl	3d186 <assert_print>
   37478:	21b9      	movs	r1, #185	; 0xb9
   3747a:	4817      	ldr	r0, [pc, #92]	; (374d8 <z_impl_k_sem_take+0xd0>)
   3747c:	f005 fe7c 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37480:	f387 8811 	msr	BASEPRI, r7
   37484:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   37488:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   3748a:	b003      	add	sp, #12
   3748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3748e:	ea56 0305 	orrs.w	r3, r6, r5
   37492:	d113      	bne.n	374bc <z_impl_k_sem_take+0xb4>
   37494:	480f      	ldr	r0, [pc, #60]	; (374d4 <z_impl_k_sem_take+0xcc>)
   37496:	f7ff fbbd 	bl	36c14 <z_spin_unlock_valid>
   3749a:	b940      	cbnz	r0, 374ae <z_impl_k_sem_take+0xa6>
   3749c:	490e      	ldr	r1, [pc, #56]	; (374d8 <z_impl_k_sem_take+0xd0>)
   3749e:	480c      	ldr	r0, [pc, #48]	; (374d0 <z_impl_k_sem_take+0xc8>)
   374a0:	22b9      	movs	r2, #185	; 0xb9
   374a2:	f005 fe70 	bl	3d186 <assert_print>
   374a6:	21b9      	movs	r1, #185	; 0xb9
   374a8:	480b      	ldr	r0, [pc, #44]	; (374d8 <z_impl_k_sem_take+0xd0>)
   374aa:	f005 fe65 	bl	3d178 <assert_post_action>
   374ae:	f387 8811 	msr	BASEPRI, r7
   374b2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   374b6:	f06f 000f 	mvn.w	r0, #15
   374ba:	e7e6      	b.n	3748a <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   374bc:	4622      	mov	r2, r4
   374be:	4639      	mov	r1, r7
   374c0:	e9cd 6500 	strd	r6, r5, [sp]
   374c4:	4803      	ldr	r0, [pc, #12]	; (374d4 <z_impl_k_sem_take+0xcc>)
   374c6:	f001 f8fb 	bl	386c0 <z_pend_curr>
	return ret;
   374ca:	e7de      	b.n	3748a <z_impl_k_sem_take+0x82>
   374cc:	0004c4a4 	.word	0x0004c4a4
   374d0:	0004494f 	.word	0x0004494f
   374d4:	2001a548 	.word	0x2001a548
   374d8:	00044989 	.word	0x00044989

000374dc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   374dc:	b570      	push	{r4, r5, r6, lr}
   374de:	4604      	mov	r4, r0
	__asm__ volatile(
   374e0:	f04f 0320 	mov.w	r3, #32
   374e4:	f3ef 8511 	mrs	r5, BASEPRI
   374e8:	f383 8812 	msr	BASEPRI_MAX, r3
   374ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   374f0:	4813      	ldr	r0, [pc, #76]	; (37540 <z_impl_k_sem_reset+0x64>)
   374f2:	f7ff fb81 	bl	36bf8 <z_spin_lock_valid>
   374f6:	b940      	cbnz	r0, 3750a <z_impl_k_sem_reset+0x2e>
   374f8:	4912      	ldr	r1, [pc, #72]	; (37544 <z_impl_k_sem_reset+0x68>)
   374fa:	4813      	ldr	r0, [pc, #76]	; (37548 <z_impl_k_sem_reset+0x6c>)
   374fc:	228e      	movs	r2, #142	; 0x8e
   374fe:	f005 fe42 	bl	3d186 <assert_print>
   37502:	218e      	movs	r1, #142	; 0x8e
   37504:	480f      	ldr	r0, [pc, #60]	; (37544 <z_impl_k_sem_reset+0x68>)
   37506:	f005 fe37 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3750a:	480d      	ldr	r0, [pc, #52]	; (37540 <z_impl_k_sem_reset+0x64>)
   3750c:	f7ff fb92 	bl	36c34 <z_spin_lock_set_owner>
   37510:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   37514:	4620      	mov	r0, r4
   37516:	f001 fa2f 	bl	38978 <z_unpend_first_thread>
		if (thread == NULL) {
   3751a:	b120      	cbz	r0, 37526 <z_impl_k_sem_reset+0x4a>
   3751c:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   37520:	f000 ff26 	bl	38370 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   37524:	e7f6      	b.n	37514 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   37526:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   37528:	2102      	movs	r1, #2
   3752a:	f104 0010 	add.w	r0, r4, #16
   3752e:	f00a fa46 	bl	419be <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   37532:	4629      	mov	r1, r5
}
   37534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   37538:	4801      	ldr	r0, [pc, #4]	; (37540 <z_impl_k_sem_reset+0x64>)
   3753a:	f000 bce9 	b.w	37f10 <z_reschedule>
   3753e:	bf00      	nop
   37540:	2001a548 	.word	0x2001a548
   37544:	00044989 	.word	0x00044989
   37548:	0004494f 	.word	0x0004494f

0003754c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   3754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37550:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37552:	4e70      	ldr	r6, [pc, #448]	; (37714 <work_queue_main+0x1c8>)
	return list->head;
   37554:	4f70      	ldr	r7, [pc, #448]	; (37718 <work_queue_main+0x1cc>)
   37556:	b085      	sub	sp, #20
   37558:	f04f 0320 	mov.w	r3, #32
   3755c:	f3ef 8811 	mrs	r8, BASEPRI
   37560:	f383 8812 	msr	BASEPRI_MAX, r3
   37564:	f3bf 8f6f 	isb	sy
   37568:	4630      	mov	r0, r6
   3756a:	f7ff fb45 	bl	36bf8 <z_spin_lock_valid>
   3756e:	b940      	cbnz	r0, 37582 <work_queue_main+0x36>
   37570:	496a      	ldr	r1, [pc, #424]	; (3771c <work_queue_main+0x1d0>)
   37572:	486b      	ldr	r0, [pc, #428]	; (37720 <work_queue_main+0x1d4>)
   37574:	228e      	movs	r2, #142	; 0x8e
   37576:	f005 fe06 	bl	3d186 <assert_print>
   3757a:	218e      	movs	r1, #142	; 0x8e
   3757c:	4867      	ldr	r0, [pc, #412]	; (3771c <work_queue_main+0x1d0>)
   3757e:	f005 fdfb 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37582:	4630      	mov	r0, r6
   37584:	f7ff fb56 	bl	36c34 <z_spin_lock_set_owner>
   37588:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
Z_GENLIST_GET(slist, snode)
   3758c:	b9b5      	cbnz	r5, 375bc <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   3758e:	2102      	movs	r1, #2
   37590:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   37594:	f00a f8c8 	bl	41728 <flag_test_and_clear>
   37598:	2800      	cmp	r0, #0
   3759a:	f040 8084 	bne.w	376a6 <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   3759e:	2300      	movs	r3, #0
   375a0:	f04f 32ff 	mov.w	r2, #4294967295
   375a4:	9302      	str	r3, [sp, #8]
   375a6:	f04f 33ff 	mov.w	r3, #4294967295
   375aa:	4641      	mov	r1, r8
   375ac:	e9cd 2300 	strd	r2, r3, [sp]
   375b0:	4630      	mov	r0, r6
   375b2:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
   375b6:	f001 fc49 	bl	38e4c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   375ba:	e7cd      	b.n	37558 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   375bc:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
	return node->next;
   375c0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   375c2:	4295      	cmp	r5, r2
	list->head = node;
   375c4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   375c8:	d101      	bne.n	375ce <work_queue_main+0x82>
	list->tail = node;
   375ca:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	*flagp |= BIT(bit);
   375ce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   375d2:	4630      	mov	r0, r6
   375d4:	f043 0302 	orr.w	r3, r3, #2
   375d8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	*flagp &= ~BIT(bit);
   375dc:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   375de:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   375e2:	f023 0304 	bic.w	r3, r3, #4
   375e6:	f043 0301 	orr.w	r3, r3, #1
   375ea:	60eb      	str	r3, [r5, #12]
   375ec:	f7ff fb12 	bl	36c14 <z_spin_unlock_valid>
   375f0:	b940      	cbnz	r0, 37604 <work_queue_main+0xb8>
   375f2:	494a      	ldr	r1, [pc, #296]	; (3771c <work_queue_main+0x1d0>)
   375f4:	484a      	ldr	r0, [pc, #296]	; (37720 <work_queue_main+0x1d4>)
   375f6:	22b9      	movs	r2, #185	; 0xb9
   375f8:	f005 fdc5 	bl	3d186 <assert_print>
   375fc:	21b9      	movs	r1, #185	; 0xb9
   375fe:	4847      	ldr	r0, [pc, #284]	; (3771c <work_queue_main+0x1d0>)
   37600:	f005 fdba 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37604:	f388 8811 	msr	BASEPRI, r8
   37608:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   3760c:	f1b9 0f00 	cmp.w	r9, #0
   37610:	d10a      	bne.n	37628 <work_queue_main+0xdc>
   37612:	4944      	ldr	r1, [pc, #272]	; (37724 <work_queue_main+0x1d8>)
   37614:	4842      	ldr	r0, [pc, #264]	; (37720 <work_queue_main+0x1d4>)
   37616:	f44f 7222 	mov.w	r2, #648	; 0x288
   3761a:	f005 fdb4 	bl	3d186 <assert_print>
   3761e:	f44f 7122 	mov.w	r1, #648	; 0x288
   37622:	4840      	ldr	r0, [pc, #256]	; (37724 <work_queue_main+0x1d8>)
   37624:	f005 fda8 	bl	3d178 <assert_post_action>
		handler(work);
   37628:	4628      	mov	r0, r5
   3762a:	47c8      	blx	r9
	__asm__ volatile(
   3762c:	f04f 0320 	mov.w	r3, #32
   37630:	f3ef 8a11 	mrs	sl, BASEPRI
   37634:	f383 8812 	msr	BASEPRI_MAX, r3
   37638:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3763c:	4630      	mov	r0, r6
   3763e:	f7ff fadb 	bl	36bf8 <z_spin_lock_valid>
   37642:	b940      	cbnz	r0, 37656 <work_queue_main+0x10a>
   37644:	4935      	ldr	r1, [pc, #212]	; (3771c <work_queue_main+0x1d0>)
   37646:	4836      	ldr	r0, [pc, #216]	; (37720 <work_queue_main+0x1d4>)
   37648:	228e      	movs	r2, #142	; 0x8e
   3764a:	f005 fd9c 	bl	3d186 <assert_print>
   3764e:	218e      	movs	r1, #142	; 0x8e
   37650:	4832      	ldr	r0, [pc, #200]	; (3771c <work_queue_main+0x1d0>)
   37652:	f005 fd91 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37656:	4630      	mov	r0, r6
   37658:	f7ff faec 	bl	36c34 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   3765c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3765e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   37660:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   37664:	d429      	bmi.n	376ba <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   37666:	60ea      	str	r2, [r5, #12]
   37668:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3766c:	4630      	mov	r0, r6
   3766e:	f023 0302 	bic.w	r3, r3, #2
   37672:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return (*flagp & BIT(bit)) != 0U;
   37676:	f3c3 2500 	ubfx	r5, r3, #8, #1
   3767a:	f7ff facb 	bl	36c14 <z_spin_unlock_valid>
   3767e:	b940      	cbnz	r0, 37692 <work_queue_main+0x146>
   37680:	4926      	ldr	r1, [pc, #152]	; (3771c <work_queue_main+0x1d0>)
   37682:	4827      	ldr	r0, [pc, #156]	; (37720 <work_queue_main+0x1d4>)
   37684:	22b9      	movs	r2, #185	; 0xb9
   37686:	f005 fd7e 	bl	3d186 <assert_print>
   3768a:	21b9      	movs	r1, #185	; 0xb9
   3768c:	4823      	ldr	r0, [pc, #140]	; (3771c <work_queue_main+0x1d0>)
   3768e:	f005 fd73 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37692:	f38a 8811 	msr	BASEPRI, sl
   37696:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   3769a:	2d00      	cmp	r5, #0
   3769c:	f47f af5c 	bne.w	37558 <work_queue_main+0xc>
	z_impl_k_yield();
   376a0:	f001 f9b4 	bl	38a0c <z_impl_k_yield>
}
   376a4:	e758      	b.n	37558 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   376a6:	f104 05e0 	add.w	r5, r4, #224	; 0xe0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   376aa:	2200      	movs	r2, #0
   376ac:	2101      	movs	r1, #1
   376ae:	4628      	mov	r0, r5
   376b0:	f001 fb84 	bl	38dbc <z_sched_wake>
   376b4:	2800      	cmp	r0, #0
   376b6:	d1f8      	bne.n	376aa <work_queue_main+0x15e>
   376b8:	e771      	b.n	3759e <work_queue_main+0x52>
	return list->head;
   376ba:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   376bc:	f023 0303 	bic.w	r3, r3, #3
   376c0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   376c2:	2800      	cmp	r0, #0
   376c4:	d0d0      	beq.n	37668 <work_queue_main+0x11c>
	return node->next;
   376c6:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   376ca:	46c3      	mov	fp, r8
	return node->next;
   376cc:	f8d0 9000 	ldr.w	r9, [r0]
		if (wc->work == work) {
   376d0:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   376d2:	4602      	mov	r2, r0
		if (wc->work == work) {
   376d4:	429d      	cmp	r5, r3
   376d6:	d10d      	bne.n	376f4 <work_queue_main+0x1a8>
   376d8:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   376da:	f1b8 0f00 	cmp.w	r8, #0
   376de:	d111      	bne.n	37704 <work_queue_main+0x1b8>
   376e0:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   376e2:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   376e4:	4283      	cmp	r3, r0
   376e6:	d100      	bne.n	376ea <work_queue_main+0x19e>
	list->tail = node;
   376e8:	607a      	str	r2, [r7, #4]
	parent->next = child;
   376ea:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   376ee:	f7ff fe4f 	bl	37390 <z_impl_k_sem_give>
}
   376f2:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   376f4:	f1b9 0f00 	cmp.w	r9, #0
   376f8:	d0b6      	beq.n	37668 <work_queue_main+0x11c>
	return node->next;
   376fa:	4648      	mov	r0, r9
   376fc:	4690      	mov	r8, r2
   376fe:	f8d9 9000 	ldr.w	r9, [r9]
   37702:	e7e5      	b.n	376d0 <work_queue_main+0x184>
	return list->tail;
   37704:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   37706:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   3770a:	4298      	cmp	r0, r3
	list->tail = node;
   3770c:	bf08      	it	eq
   3770e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   37712:	e7ea      	b.n	376ea <work_queue_main+0x19e>
   37714:	2001a54c 	.word	0x2001a54c
   37718:	2001a550 	.word	0x2001a550
   3771c:	00044989 	.word	0x00044989
   37720:	0004494f 	.word	0x0004494f
   37724:	0004c4c4 	.word	0x0004c4c4

00037728 <submit_to_queue_locked>:
{
   37728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   3772a:	68c3      	ldr	r3, [r0, #12]
{
   3772c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3772e:	079a      	lsls	r2, r3, #30
{
   37730:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   37732:	f3c3 0540 	ubfx	r5, r3, #1, #1
   37736:	d42a      	bmi.n	3778e <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   37738:	075f      	lsls	r7, r3, #29
   3773a:	d42a      	bmi.n	37792 <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   3773c:	680a      	ldr	r2, [r1, #0]
   3773e:	b90a      	cbnz	r2, 37744 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   37740:	6882      	ldr	r2, [r0, #8]
   37742:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   37744:	07d8      	lsls	r0, r3, #31
   37746:	d527      	bpl.n	37798 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   37748:	68a3      	ldr	r3, [r4, #8]
   3774a:	b953      	cbnz	r3, 37762 <submit_to_queue_locked+0x3a>
   3774c:	4923      	ldr	r1, [pc, #140]	; (377dc <submit_to_queue_locked+0xb4>)
   3774e:	4824      	ldr	r0, [pc, #144]	; (377e0 <submit_to_queue_locked+0xb8>)
   37750:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   37754:	f005 fd17 	bl	3d186 <assert_print>
   37758:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   3775c:	481f      	ldr	r0, [pc, #124]	; (377dc <submit_to_queue_locked+0xb4>)
   3775e:	f005 fd0b 	bl	3d178 <assert_post_action>
			ret = 2;
   37762:	2502      	movs	r5, #2
			*queuep = work->queue;
   37764:	68a3      	ldr	r3, [r4, #8]
   37766:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   37768:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   3776a:	b38f      	cbz	r7, 377d0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   3776c:	4b1d      	ldr	r3, [pc, #116]	; (377e4 <submit_to_queue_locked+0xbc>)
   3776e:	689b      	ldr	r3, [r3, #8]
   37770:	42bb      	cmp	r3, r7
   37772:	d113      	bne.n	3779c <submit_to_queue_locked+0x74>
   37774:	f009 ff8e 	bl	41694 <k_is_in_isr>
   37778:	f080 0001 	eor.w	r0, r0, #1
   3777c:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   3777e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   37782:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   37784:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   37788:	d525      	bpl.n	377d6 <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   3778a:	b14a      	cbz	r2, 377a0 <submit_to_queue_locked+0x78>
   3778c:	b950      	cbnz	r0, 377a4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   3778e:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   37792:	2300      	movs	r3, #0
   37794:	6033      	str	r3, [r6, #0]
	return ret;
   37796:	e015      	b.n	377c4 <submit_to_queue_locked+0x9c>
		ret = 1;
   37798:	2501      	movs	r5, #1
   3779a:	e7e5      	b.n	37768 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   3779c:	2000      	movs	r0, #0
   3779e:	e7ee      	b.n	3777e <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   377a0:	071b      	lsls	r3, r3, #28
   377a2:	d4f4      	bmi.n	3778e <submit_to_queue_locked+0x66>
	parent->next = child;
   377a4:	2300      	movs	r3, #0
   377a6:	6023      	str	r3, [r4, #0]
	return list->tail;
   377a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
Z_GENLIST_APPEND(slist, snode)
   377ac:	b963      	cbnz	r3, 377c8 <submit_to_queue_locked+0xa0>
	list->head = node;
   377ae:	e9c7 4434 	strd	r4, r4, [r7, #208]	; 0xd0
		(void)notify_queue_locked(queue);
   377b2:	4638      	mov	r0, r7
   377b4:	f009 ffd1 	bl	4175a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   377b8:	68e3      	ldr	r3, [r4, #12]
   377ba:	f043 0304 	orr.w	r3, r3, #4
   377be:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   377c0:	6833      	ldr	r3, [r6, #0]
   377c2:	60a3      	str	r3, [r4, #8]
}
   377c4:	4628      	mov	r0, r5
   377c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   377c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   377ca:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
}
   377ce:	e7f0      	b.n	377b2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   377d0:	f06f 0515 	mvn.w	r5, #21
   377d4:	e7dd      	b.n	37792 <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   377d6:	f06f 0512 	mvn.w	r5, #18
   377da:	e7da      	b.n	37792 <submit_to_queue_locked+0x6a>
   377dc:	0004c4c4 	.word	0x0004c4c4
   377e0:	0004494f 	.word	0x0004494f
   377e4:	2001a518 	.word	0x2001a518

000377e8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   377e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   377ea:	4604      	mov	r4, r0
	__asm__ volatile(
   377ec:	f04f 0320 	mov.w	r3, #32
   377f0:	f3ef 8511 	mrs	r5, BASEPRI
   377f4:	f383 8812 	msr	BASEPRI_MAX, r3
   377f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   377fc:	4818      	ldr	r0, [pc, #96]	; (37860 <work_timeout+0x78>)
   377fe:	f7ff f9fb 	bl	36bf8 <z_spin_lock_valid>
   37802:	b940      	cbnz	r0, 37816 <work_timeout+0x2e>
   37804:	4917      	ldr	r1, [pc, #92]	; (37864 <work_timeout+0x7c>)
   37806:	4818      	ldr	r0, [pc, #96]	; (37868 <work_timeout+0x80>)
   37808:	228e      	movs	r2, #142	; 0x8e
   3780a:	f005 fcbc 	bl	3d186 <assert_print>
   3780e:	218e      	movs	r1, #142	; 0x8e
   37810:	4814      	ldr	r0, [pc, #80]	; (37864 <work_timeout+0x7c>)
   37812:	f005 fcb1 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37816:	4812      	ldr	r0, [pc, #72]	; (37860 <work_timeout+0x78>)
   37818:	f7ff fa0c 	bl	36c34 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   3781c:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3781e:	2103      	movs	r1, #3
   37820:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   37822:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   37824:	f1a4 0610 	sub.w	r6, r4, #16
   37828:	f009 ff7e 	bl	41728 <flag_test_and_clear>
   3782c:	b128      	cbz	r0, 3783a <work_timeout+0x52>
		queue = dw->queue;
   3782e:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   37830:	4630      	mov	r0, r6
   37832:	a901      	add	r1, sp, #4
		queue = dw->queue;
   37834:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   37836:	f7ff ff77 	bl	37728 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3783a:	4809      	ldr	r0, [pc, #36]	; (37860 <work_timeout+0x78>)
   3783c:	f7ff f9ea 	bl	36c14 <z_spin_unlock_valid>
   37840:	b940      	cbnz	r0, 37854 <work_timeout+0x6c>
   37842:	4908      	ldr	r1, [pc, #32]	; (37864 <work_timeout+0x7c>)
   37844:	4808      	ldr	r0, [pc, #32]	; (37868 <work_timeout+0x80>)
   37846:	22b9      	movs	r2, #185	; 0xb9
   37848:	f005 fc9d 	bl	3d186 <assert_print>
   3784c:	21b9      	movs	r1, #185	; 0xb9
   3784e:	4805      	ldr	r0, [pc, #20]	; (37864 <work_timeout+0x7c>)
   37850:	f005 fc92 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37854:	f385 8811 	msr	BASEPRI, r5
   37858:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   3785c:	b002      	add	sp, #8
   3785e:	bd70      	pop	{r4, r5, r6, pc}
   37860:	2001a54c 	.word	0x2001a54c
   37864:	00044989 	.word	0x00044989
   37868:	0004494f 	.word	0x0004494f

0003786c <k_work_init>:
{
   3786c:	b538      	push	{r3, r4, r5, lr}
   3786e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   37870:	4604      	mov	r4, r0
   37872:	b940      	cbnz	r0, 37886 <k_work_init+0x1a>
   37874:	490c      	ldr	r1, [pc, #48]	; (378a8 <k_work_init+0x3c>)
   37876:	480d      	ldr	r0, [pc, #52]	; (378ac <k_work_init+0x40>)
   37878:	2289      	movs	r2, #137	; 0x89
   3787a:	f005 fc84 	bl	3d186 <assert_print>
   3787e:	2189      	movs	r1, #137	; 0x89
   37880:	4809      	ldr	r0, [pc, #36]	; (378a8 <k_work_init+0x3c>)
   37882:	f005 fc79 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   37886:	b945      	cbnz	r5, 3789a <k_work_init+0x2e>
   37888:	4907      	ldr	r1, [pc, #28]	; (378a8 <k_work_init+0x3c>)
   3788a:	4808      	ldr	r0, [pc, #32]	; (378ac <k_work_init+0x40>)
   3788c:	228a      	movs	r2, #138	; 0x8a
   3788e:	f005 fc7a 	bl	3d186 <assert_print>
   37892:	218a      	movs	r1, #138	; 0x8a
   37894:	4804      	ldr	r0, [pc, #16]	; (378a8 <k_work_init+0x3c>)
   37896:	f005 fc6f 	bl	3d178 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3789a:	2210      	movs	r2, #16
   3789c:	2100      	movs	r1, #0
   3789e:	4620      	mov	r0, r4
   378a0:	f00a f95e 	bl	41b60 <memset>
   378a4:	6065      	str	r5, [r4, #4]
}
   378a6:	bd38      	pop	{r3, r4, r5, pc}
   378a8:	0004c4c4 	.word	0x0004c4c4
   378ac:	0004494f 	.word	0x0004494f

000378b0 <k_work_busy_get>:
{
   378b0:	b538      	push	{r3, r4, r5, lr}
   378b2:	4604      	mov	r4, r0
	__asm__ volatile(
   378b4:	f04f 0320 	mov.w	r3, #32
   378b8:	f3ef 8511 	mrs	r5, BASEPRI
   378bc:	f383 8812 	msr	BASEPRI_MAX, r3
   378c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   378c4:	4812      	ldr	r0, [pc, #72]	; (37910 <k_work_busy_get+0x60>)
   378c6:	f7ff f997 	bl	36bf8 <z_spin_lock_valid>
   378ca:	b940      	cbnz	r0, 378de <k_work_busy_get+0x2e>
   378cc:	4911      	ldr	r1, [pc, #68]	; (37914 <k_work_busy_get+0x64>)
   378ce:	4812      	ldr	r0, [pc, #72]	; (37918 <k_work_busy_get+0x68>)
   378d0:	228e      	movs	r2, #142	; 0x8e
   378d2:	f005 fc58 	bl	3d186 <assert_print>
   378d6:	218e      	movs	r1, #142	; 0x8e
   378d8:	480e      	ldr	r0, [pc, #56]	; (37914 <k_work_busy_get+0x64>)
   378da:	f005 fc4d 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   378de:	480c      	ldr	r0, [pc, #48]	; (37910 <k_work_busy_get+0x60>)
   378e0:	f7ff f9a8 	bl	36c34 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   378e4:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   378e6:	480a      	ldr	r0, [pc, #40]	; (37910 <k_work_busy_get+0x60>)
   378e8:	f004 040f 	and.w	r4, r4, #15
   378ec:	f7ff f992 	bl	36c14 <z_spin_unlock_valid>
   378f0:	b940      	cbnz	r0, 37904 <k_work_busy_get+0x54>
   378f2:	4908      	ldr	r1, [pc, #32]	; (37914 <k_work_busy_get+0x64>)
   378f4:	4808      	ldr	r0, [pc, #32]	; (37918 <k_work_busy_get+0x68>)
   378f6:	22b9      	movs	r2, #185	; 0xb9
   378f8:	f005 fc45 	bl	3d186 <assert_print>
   378fc:	21b9      	movs	r1, #185	; 0xb9
   378fe:	4805      	ldr	r0, [pc, #20]	; (37914 <k_work_busy_get+0x64>)
   37900:	f005 fc3a 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37904:	f385 8811 	msr	BASEPRI, r5
   37908:	f3bf 8f6f 	isb	sy
}
   3790c:	4620      	mov	r0, r4
   3790e:	bd38      	pop	{r3, r4, r5, pc}
   37910:	2001a54c 	.word	0x2001a54c
   37914:	00044989 	.word	0x00044989
   37918:	0004494f 	.word	0x0004494f

0003791c <k_work_submit_to_queue>:
{
   3791c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   3791e:	460c      	mov	r4, r1
{
   37920:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   37922:	b951      	cbnz	r1, 3793a <k_work_submit_to_queue+0x1e>
   37924:	4923      	ldr	r1, [pc, #140]	; (379b4 <k_work_submit_to_queue+0x98>)
   37926:	4824      	ldr	r0, [pc, #144]	; (379b8 <k_work_submit_to_queue+0x9c>)
   37928:	f240 1269 	movw	r2, #361	; 0x169
   3792c:	f005 fc2b 	bl	3d186 <assert_print>
   37930:	f240 1169 	movw	r1, #361	; 0x169
   37934:	481f      	ldr	r0, [pc, #124]	; (379b4 <k_work_submit_to_queue+0x98>)
   37936:	f005 fc1f 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3793a:	f04f 0320 	mov.w	r3, #32
   3793e:	f3ef 8511 	mrs	r5, BASEPRI
   37942:	f383 8812 	msr	BASEPRI_MAX, r3
   37946:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3794a:	481c      	ldr	r0, [pc, #112]	; (379bc <k_work_submit_to_queue+0xa0>)
   3794c:	f7ff f954 	bl	36bf8 <z_spin_lock_valid>
   37950:	b940      	cbnz	r0, 37964 <k_work_submit_to_queue+0x48>
   37952:	491b      	ldr	r1, [pc, #108]	; (379c0 <k_work_submit_to_queue+0xa4>)
   37954:	4818      	ldr	r0, [pc, #96]	; (379b8 <k_work_submit_to_queue+0x9c>)
   37956:	228e      	movs	r2, #142	; 0x8e
   37958:	f005 fc15 	bl	3d186 <assert_print>
   3795c:	218e      	movs	r1, #142	; 0x8e
   3795e:	4818      	ldr	r0, [pc, #96]	; (379c0 <k_work_submit_to_queue+0xa4>)
   37960:	f005 fc0a 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37964:	4815      	ldr	r0, [pc, #84]	; (379bc <k_work_submit_to_queue+0xa0>)
   37966:	f7ff f965 	bl	36c34 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   3796a:	4620      	mov	r0, r4
   3796c:	a901      	add	r1, sp, #4
   3796e:	f7ff fedb 	bl	37728 <submit_to_queue_locked>
   37972:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37974:	4811      	ldr	r0, [pc, #68]	; (379bc <k_work_submit_to_queue+0xa0>)
   37976:	f7ff f94d 	bl	36c14 <z_spin_unlock_valid>
   3797a:	b940      	cbnz	r0, 3798e <k_work_submit_to_queue+0x72>
   3797c:	4910      	ldr	r1, [pc, #64]	; (379c0 <k_work_submit_to_queue+0xa4>)
   3797e:	480e      	ldr	r0, [pc, #56]	; (379b8 <k_work_submit_to_queue+0x9c>)
   37980:	22b9      	movs	r2, #185	; 0xb9
   37982:	f005 fc00 	bl	3d186 <assert_print>
   37986:	21b9      	movs	r1, #185	; 0xb9
   37988:	480d      	ldr	r0, [pc, #52]	; (379c0 <k_work_submit_to_queue+0xa4>)
   3798a:	f005 fbf5 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3798e:	f385 8811 	msr	BASEPRI, r5
   37992:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   37996:	2c00      	cmp	r4, #0
   37998:	dd09      	ble.n	379ae <k_work_submit_to_queue+0x92>
	__asm__ volatile(
   3799a:	f04f 0320 	mov.w	r3, #32
   3799e:	f3ef 8011 	mrs	r0, BASEPRI
   379a2:	f383 8812 	msr	BASEPRI_MAX, r3
   379a6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   379aa:	f009 ff19 	bl	417e0 <z_reschedule_irqlock>
}
   379ae:	4620      	mov	r0, r4
   379b0:	b003      	add	sp, #12
   379b2:	bd30      	pop	{r4, r5, pc}
   379b4:	0004c4c4 	.word	0x0004c4c4
   379b8:	0004494f 	.word	0x0004494f
   379bc:	2001a54c 	.word	0x2001a54c
   379c0:	00044989 	.word	0x00044989

000379c4 <k_work_submit>:
{
   379c4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   379c6:	4801      	ldr	r0, [pc, #4]	; (379cc <k_work_submit+0x8>)
   379c8:	f7ff bfa8 	b.w	3791c <k_work_submit_to_queue>
   379cc:	20018fb8 	.word	0x20018fb8

000379d0 <k_work_cancel>:
{
   379d0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   379d2:	4604      	mov	r4, r0
   379d4:	b950      	cbnz	r0, 379ec <k_work_cancel+0x1c>
   379d6:	4924      	ldr	r1, [pc, #144]	; (37a68 <k_work_cancel+0x98>)
   379d8:	4824      	ldr	r0, [pc, #144]	; (37a6c <k_work_cancel+0x9c>)
   379da:	f240 220e 	movw	r2, #526	; 0x20e
   379de:	f005 fbd2 	bl	3d186 <assert_print>
   379e2:	f240 210e 	movw	r1, #526	; 0x20e
   379e6:	4820      	ldr	r0, [pc, #128]	; (37a68 <k_work_cancel+0x98>)
   379e8:	f005 fbc6 	bl	3d178 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   379ec:	68e3      	ldr	r3, [r4, #12]
	__ASSERT_NO_MSG(!flag_test(&work->flags, K_WORK_DELAYABLE_BIT));
   379ee:	05db      	lsls	r3, r3, #23
   379f0:	d50a      	bpl.n	37a08 <k_work_cancel+0x38>
   379f2:	491d      	ldr	r1, [pc, #116]	; (37a68 <k_work_cancel+0x98>)
   379f4:	481d      	ldr	r0, [pc, #116]	; (37a6c <k_work_cancel+0x9c>)
   379f6:	f240 220f 	movw	r2, #527	; 0x20f
   379fa:	f005 fbc4 	bl	3d186 <assert_print>
   379fe:	f240 210f 	movw	r1, #527	; 0x20f
   37a02:	4819      	ldr	r0, [pc, #100]	; (37a68 <k_work_cancel+0x98>)
   37a04:	f005 fbb8 	bl	3d178 <assert_post_action>
   37a08:	f04f 0320 	mov.w	r3, #32
   37a0c:	f3ef 8511 	mrs	r5, BASEPRI
   37a10:	f383 8812 	msr	BASEPRI_MAX, r3
   37a14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37a18:	4815      	ldr	r0, [pc, #84]	; (37a70 <k_work_cancel+0xa0>)
   37a1a:	f7ff f8ed 	bl	36bf8 <z_spin_lock_valid>
   37a1e:	b940      	cbnz	r0, 37a32 <k_work_cancel+0x62>
   37a20:	4914      	ldr	r1, [pc, #80]	; (37a74 <k_work_cancel+0xa4>)
   37a22:	4812      	ldr	r0, [pc, #72]	; (37a6c <k_work_cancel+0x9c>)
   37a24:	228e      	movs	r2, #142	; 0x8e
   37a26:	f005 fbae 	bl	3d186 <assert_print>
   37a2a:	218e      	movs	r1, #142	; 0x8e
   37a2c:	4811      	ldr	r0, [pc, #68]	; (37a74 <k_work_cancel+0xa4>)
   37a2e:	f005 fba3 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37a32:	480f      	ldr	r0, [pc, #60]	; (37a70 <k_work_cancel+0xa0>)
   37a34:	f7ff f8fe 	bl	36c34 <z_spin_lock_set_owner>
	int ret = cancel_async_locked(work);
   37a38:	4620      	mov	r0, r4
   37a3a:	f009 fe95 	bl	41768 <cancel_async_locked>
   37a3e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a40:	480b      	ldr	r0, [pc, #44]	; (37a70 <k_work_cancel+0xa0>)
   37a42:	f7ff f8e7 	bl	36c14 <z_spin_unlock_valid>
   37a46:	b940      	cbnz	r0, 37a5a <k_work_cancel+0x8a>
   37a48:	490a      	ldr	r1, [pc, #40]	; (37a74 <k_work_cancel+0xa4>)
   37a4a:	4808      	ldr	r0, [pc, #32]	; (37a6c <k_work_cancel+0x9c>)
   37a4c:	22b9      	movs	r2, #185	; 0xb9
   37a4e:	f005 fb9a 	bl	3d186 <assert_print>
   37a52:	21b9      	movs	r1, #185	; 0xb9
   37a54:	4807      	ldr	r0, [pc, #28]	; (37a74 <k_work_cancel+0xa4>)
   37a56:	f005 fb8f 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37a5a:	f385 8811 	msr	BASEPRI, r5
   37a5e:	f3bf 8f6f 	isb	sy
}
   37a62:	4620      	mov	r0, r4
   37a64:	bd38      	pop	{r3, r4, r5, pc}
   37a66:	bf00      	nop
   37a68:	0004c4c4 	.word	0x0004c4c4
   37a6c:	0004494f 	.word	0x0004494f
   37a70:	2001a54c 	.word	0x2001a54c
   37a74:	00044989 	.word	0x00044989

00037a78 <k_work_queue_start>:
{
   37a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37a7c:	b088      	sub	sp, #32
   37a7e:	460e      	mov	r6, r1
   37a80:	4617      	mov	r7, r2
   37a82:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   37a84:	4604      	mov	r4, r0
{
   37a86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   37a88:	b950      	cbnz	r0, 37aa0 <k_work_queue_start+0x28>
   37a8a:	492d      	ldr	r1, [pc, #180]	; (37b40 <k_work_queue_start+0xc8>)
   37a8c:	482d      	ldr	r0, [pc, #180]	; (37b44 <k_work_queue_start+0xcc>)
   37a8e:	f240 22b5 	movw	r2, #693	; 0x2b5
   37a92:	f005 fb78 	bl	3d186 <assert_print>
   37a96:	f240 21b5 	movw	r1, #693	; 0x2b5
   37a9a:	4829      	ldr	r0, [pc, #164]	; (37b40 <k_work_queue_start+0xc8>)
   37a9c:	f005 fb6c 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   37aa0:	b956      	cbnz	r6, 37ab8 <k_work_queue_start+0x40>
   37aa2:	4927      	ldr	r1, [pc, #156]	; (37b40 <k_work_queue_start+0xc8>)
   37aa4:	4827      	ldr	r0, [pc, #156]	; (37b44 <k_work_queue_start+0xcc>)
   37aa6:	f240 22b6 	movw	r2, #694	; 0x2b6
   37aaa:	f005 fb6c 	bl	3d186 <assert_print>
   37aae:	f240 21b6 	movw	r1, #694	; 0x2b6
   37ab2:	4823      	ldr	r0, [pc, #140]	; (37b40 <k_work_queue_start+0xc8>)
   37ab4:	f005 fb60 	bl	3d178 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   37ab8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   37abc:	07db      	lsls	r3, r3, #31
   37abe:	d50a      	bpl.n	37ad6 <k_work_queue_start+0x5e>
   37ac0:	491f      	ldr	r1, [pc, #124]	; (37b40 <k_work_queue_start+0xc8>)
   37ac2:	4820      	ldr	r0, [pc, #128]	; (37b44 <k_work_queue_start+0xcc>)
   37ac4:	f240 22b7 	movw	r2, #695	; 0x2b7
   37ac8:	f005 fb5d 	bl	3d186 <assert_print>
   37acc:	f240 21b7 	movw	r1, #695	; 0x2b7
   37ad0:	481b      	ldr	r0, [pc, #108]	; (37b40 <k_work_queue_start+0xc8>)
   37ad2:	f005 fb51 	bl	3d178 <assert_post_action>
	list->head = NULL;
   37ad6:	2300      	movs	r3, #0
	list->tail = NULL;
   37ad8:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
   37adc:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
	list->tail = (sys_dnode_t *)list;
   37ae0:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
   37ae4:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
   37ae8:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	if ((cfg != NULL) && cfg->no_yield) {
   37aec:	b32d      	cbz	r5, 37b3a <k_work_queue_start+0xc2>
   37aee:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   37af0:	f240 1101 	movw	r1, #257	; 0x101
   37af4:	2b00      	cmp	r3, #0
   37af6:	bf08      	it	eq
   37af8:	2101      	moveq	r1, #1
	*flagp = flags;
   37afa:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   37afe:	f04f 32ff 	mov.w	r2, #4294967295
   37b02:	f04f 33ff 	mov.w	r3, #4294967295
   37b06:	e9cd 2306 	strd	r2, r3, [sp, #24]
   37b0a:	2200      	movs	r2, #0
   37b0c:	4631      	mov	r1, r6
   37b0e:	e9cd 8203 	strd	r8, r2, [sp, #12]
   37b12:	e9cd 2201 	strd	r2, r2, [sp, #4]
   37b16:	4620      	mov	r0, r4
   37b18:	463a      	mov	r2, r7
   37b1a:	4b0b      	ldr	r3, [pc, #44]	; (37b48 <k_work_queue_start+0xd0>)
   37b1c:	9400      	str	r4, [sp, #0]
   37b1e:	f7fe ffa7 	bl	36a70 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   37b22:	b125      	cbz	r5, 37b2e <k_work_queue_start+0xb6>
   37b24:	6829      	ldr	r1, [r5, #0]
   37b26:	b111      	cbz	r1, 37b2e <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   37b28:	4620      	mov	r0, r4
   37b2a:	f009 fdb9 	bl	416a0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   37b2e:	4620      	mov	r0, r4
}
   37b30:	b008      	add	sp, #32
   37b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37b36:	f009 bdb8 	b.w	416aa <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   37b3a:	2101      	movs	r1, #1
   37b3c:	e7dd      	b.n	37afa <k_work_queue_start+0x82>
   37b3e:	bf00      	nop
   37b40:	0004c4c4 	.word	0x0004c4c4
   37b44:	0004494f 	.word	0x0004494f
   37b48:	0003754d 	.word	0x0003754d

00037b4c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   37b4c:	b538      	push	{r3, r4, r5, lr}
   37b4e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   37b50:	4604      	mov	r4, r0
   37b52:	b950      	cbnz	r0, 37b6a <k_work_init_delayable+0x1e>
   37b54:	4910      	ldr	r1, [pc, #64]	; (37b98 <k_work_init_delayable+0x4c>)
   37b56:	4811      	ldr	r0, [pc, #68]	; (37b9c <k_work_init_delayable+0x50>)
   37b58:	f240 322d 	movw	r2, #813	; 0x32d
   37b5c:	f005 fb13 	bl	3d186 <assert_print>
   37b60:	f240 312d 	movw	r1, #813	; 0x32d
   37b64:	480c      	ldr	r0, [pc, #48]	; (37b98 <k_work_init_delayable+0x4c>)
   37b66:	f005 fb07 	bl	3d178 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   37b6a:	b955      	cbnz	r5, 37b82 <k_work_init_delayable+0x36>
   37b6c:	490a      	ldr	r1, [pc, #40]	; (37b98 <k_work_init_delayable+0x4c>)
   37b6e:	480b      	ldr	r0, [pc, #44]	; (37b9c <k_work_init_delayable+0x50>)
   37b70:	f240 322e 	movw	r2, #814	; 0x32e
   37b74:	f005 fb07 	bl	3d186 <assert_print>
   37b78:	f240 312e 	movw	r1, #814	; 0x32e
   37b7c:	4806      	ldr	r0, [pc, #24]	; (37b98 <k_work_init_delayable+0x4c>)
   37b7e:	f005 fafb 	bl	3d178 <assert_post_action>

	*dwork = (struct k_work_delayable){
   37b82:	2230      	movs	r2, #48	; 0x30
   37b84:	2100      	movs	r1, #0
   37b86:	4620      	mov	r0, r4
   37b88:	f009 ffea 	bl	41b60 <memset>
   37b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
   37b90:	6065      	str	r5, [r4, #4]
   37b92:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   37b94:	bd38      	pop	{r3, r4, r5, pc}
   37b96:	bf00      	nop
   37b98:	0004c4c4 	.word	0x0004c4c4
   37b9c:	0004494f 	.word	0x0004494f

00037ba0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   37ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37ba2:	4616      	mov	r6, r2
   37ba4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   37ba6:	460c      	mov	r4, r1
{
   37ba8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   37baa:	b951      	cbnz	r1, 37bc2 <k_work_schedule_for_queue+0x22>
   37bac:	4929      	ldr	r1, [pc, #164]	; (37c54 <k_work_schedule_for_queue+0xb4>)
   37bae:	482a      	ldr	r0, [pc, #168]	; (37c58 <k_work_schedule_for_queue+0xb8>)
   37bb0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   37bb4:	f005 fae7 	bl	3d186 <assert_print>
   37bb8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   37bbc:	4825      	ldr	r0, [pc, #148]	; (37c54 <k_work_schedule_for_queue+0xb4>)
   37bbe:	f005 fadb 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37bc2:	f04f 0320 	mov.w	r3, #32
   37bc6:	f3ef 8711 	mrs	r7, BASEPRI
   37bca:	f383 8812 	msr	BASEPRI_MAX, r3
   37bce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37bd2:	4822      	ldr	r0, [pc, #136]	; (37c5c <k_work_schedule_for_queue+0xbc>)
   37bd4:	f7ff f810 	bl	36bf8 <z_spin_lock_valid>
   37bd8:	b940      	cbnz	r0, 37bec <k_work_schedule_for_queue+0x4c>
   37bda:	4921      	ldr	r1, [pc, #132]	; (37c60 <k_work_schedule_for_queue+0xc0>)
   37bdc:	481e      	ldr	r0, [pc, #120]	; (37c58 <k_work_schedule_for_queue+0xb8>)
   37bde:	228e      	movs	r2, #142	; 0x8e
   37be0:	f005 fad1 	bl	3d186 <assert_print>
   37be4:	218e      	movs	r1, #142	; 0x8e
   37be6:	481e      	ldr	r0, [pc, #120]	; (37c60 <k_work_schedule_for_queue+0xc0>)
   37be8:	f005 fac6 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37bec:	481b      	ldr	r0, [pc, #108]	; (37c5c <k_work_schedule_for_queue+0xbc>)
   37bee:	f7ff f821 	bl	36c34 <z_spin_lock_set_owner>
	return *flagp;
   37bf2:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   37bf4:	f013 0f0e 	tst.w	r3, #14
   37bf8:	d129      	bne.n	37c4e <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   37bfa:	ea55 0206 	orrs.w	r2, r5, r6
   37bfe:	d118      	bne.n	37c32 <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   37c00:	4620      	mov	r0, r4
   37c02:	a901      	add	r1, sp, #4
   37c04:	f7ff fd90 	bl	37728 <submit_to_queue_locked>
   37c08:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37c0a:	4814      	ldr	r0, [pc, #80]	; (37c5c <k_work_schedule_for_queue+0xbc>)
   37c0c:	f7ff f802 	bl	36c14 <z_spin_unlock_valid>
   37c10:	b940      	cbnz	r0, 37c24 <k_work_schedule_for_queue+0x84>
   37c12:	4913      	ldr	r1, [pc, #76]	; (37c60 <k_work_schedule_for_queue+0xc0>)
   37c14:	4810      	ldr	r0, [pc, #64]	; (37c58 <k_work_schedule_for_queue+0xb8>)
   37c16:	22b9      	movs	r2, #185	; 0xb9
   37c18:	f005 fab5 	bl	3d186 <assert_print>
   37c1c:	21b9      	movs	r1, #185	; 0xb9
   37c1e:	4810      	ldr	r0, [pc, #64]	; (37c60 <k_work_schedule_for_queue+0xc0>)
   37c20:	f005 faaa 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37c24:	f387 8811 	msr	BASEPRI, r7
   37c28:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   37c2c:	4620      	mov	r0, r4
   37c2e:	b003      	add	sp, #12
   37c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   37c32:	f043 0308 	orr.w	r3, r3, #8
   37c36:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   37c38:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37c3a:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   37c3e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37c40:	4632      	mov	r2, r6
   37c42:	462b      	mov	r3, r5
   37c44:	4907      	ldr	r1, [pc, #28]	; (37c64 <k_work_schedule_for_queue+0xc4>)
   37c46:	f001 f99d 	bl	38f84 <z_add_timeout>
	return ret;
   37c4a:	2401      	movs	r4, #1
   37c4c:	e7dd      	b.n	37c0a <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   37c4e:	2400      	movs	r4, #0
   37c50:	e7db      	b.n	37c0a <k_work_schedule_for_queue+0x6a>
   37c52:	bf00      	nop
   37c54:	0004c4c4 	.word	0x0004c4c4
   37c58:	0004494f 	.word	0x0004494f
   37c5c:	2001a54c 	.word	0x2001a54c
   37c60:	00044989 	.word	0x00044989
   37c64:	000377e9 	.word	0x000377e9

00037c68 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   37c68:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   37c6a:	4801      	ldr	r0, [pc, #4]	; (37c70 <k_work_schedule+0x8>)
   37c6c:	f7ff bf98 	b.w	37ba0 <k_work_schedule_for_queue>
   37c70:	20018fb8 	.word	0x20018fb8

00037c74 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   37c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37c76:	4616      	mov	r6, r2
   37c78:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   37c7a:	460c      	mov	r4, r1
{
   37c7c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   37c7e:	b951      	cbnz	r1, 37c96 <k_work_reschedule_for_queue+0x22>
   37c80:	4928      	ldr	r1, [pc, #160]	; (37d24 <k_work_reschedule_for_queue+0xb0>)
   37c82:	4829      	ldr	r0, [pc, #164]	; (37d28 <k_work_reschedule_for_queue+0xb4>)
   37c84:	f44f 7272 	mov.w	r2, #968	; 0x3c8
   37c88:	f005 fa7d 	bl	3d186 <assert_print>
   37c8c:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   37c90:	4824      	ldr	r0, [pc, #144]	; (37d24 <k_work_reschedule_for_queue+0xb0>)
   37c92:	f005 fa71 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37c96:	f04f 0320 	mov.w	r3, #32
   37c9a:	f3ef 8711 	mrs	r7, BASEPRI
   37c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   37ca2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37ca6:	4821      	ldr	r0, [pc, #132]	; (37d2c <k_work_reschedule_for_queue+0xb8>)
   37ca8:	f7fe ffa6 	bl	36bf8 <z_spin_lock_valid>
   37cac:	b940      	cbnz	r0, 37cc0 <k_work_reschedule_for_queue+0x4c>
   37cae:	4920      	ldr	r1, [pc, #128]	; (37d30 <k_work_reschedule_for_queue+0xbc>)
   37cb0:	481d      	ldr	r0, [pc, #116]	; (37d28 <k_work_reschedule_for_queue+0xb4>)
   37cb2:	228e      	movs	r2, #142	; 0x8e
   37cb4:	f005 fa67 	bl	3d186 <assert_print>
   37cb8:	218e      	movs	r1, #142	; 0x8e
   37cba:	481d      	ldr	r0, [pc, #116]	; (37d30 <k_work_reschedule_for_queue+0xbc>)
   37cbc:	f005 fa5c 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37cc0:	481a      	ldr	r0, [pc, #104]	; (37d2c <k_work_reschedule_for_queue+0xb8>)
   37cc2:	f7fe ffb7 	bl	36c34 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   37cc6:	4620      	mov	r0, r4
   37cc8:	f009 fd39 	bl	4173e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   37ccc:	ea55 0306 	orrs.w	r3, r5, r6
   37cd0:	d118      	bne.n	37d04 <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   37cd2:	4620      	mov	r0, r4
   37cd4:	a901      	add	r1, sp, #4
   37cd6:	f7ff fd27 	bl	37728 <submit_to_queue_locked>
   37cda:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37cdc:	4813      	ldr	r0, [pc, #76]	; (37d2c <k_work_reschedule_for_queue+0xb8>)
   37cde:	f7fe ff99 	bl	36c14 <z_spin_unlock_valid>
   37ce2:	b940      	cbnz	r0, 37cf6 <k_work_reschedule_for_queue+0x82>
   37ce4:	4912      	ldr	r1, [pc, #72]	; (37d30 <k_work_reschedule_for_queue+0xbc>)
   37ce6:	4810      	ldr	r0, [pc, #64]	; (37d28 <k_work_reschedule_for_queue+0xb4>)
   37ce8:	22b9      	movs	r2, #185	; 0xb9
   37cea:	f005 fa4c 	bl	3d186 <assert_print>
   37cee:	21b9      	movs	r1, #185	; 0xb9
   37cf0:	480f      	ldr	r0, [pc, #60]	; (37d30 <k_work_reschedule_for_queue+0xbc>)
   37cf2:	f005 fa41 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37cf6:	f387 8811 	msr	BASEPRI, r7
   37cfa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   37cfe:	4620      	mov	r0, r4
   37d00:	b003      	add	sp, #12
   37d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   37d04:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37d06:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   37d0a:	f043 0308 	orr.w	r3, r3, #8
   37d0e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   37d10:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37d12:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   37d14:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37d16:	4907      	ldr	r1, [pc, #28]	; (37d34 <k_work_reschedule_for_queue+0xc0>)
   37d18:	462b      	mov	r3, r5
   37d1a:	f001 f933 	bl	38f84 <z_add_timeout>
	return ret;
   37d1e:	2401      	movs	r4, #1
   37d20:	e7dc      	b.n	37cdc <k_work_reschedule_for_queue+0x68>
   37d22:	bf00      	nop
   37d24:	0004c4c4 	.word	0x0004c4c4
   37d28:	0004494f 	.word	0x0004494f
   37d2c:	2001a54c 	.word	0x2001a54c
   37d30:	00044989 	.word	0x00044989
   37d34:	000377e9 	.word	0x000377e9

00037d38 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   37d38:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   37d3a:	4801      	ldr	r0, [pc, #4]	; (37d40 <k_work_reschedule+0x8>)
   37d3c:	f7ff bf9a 	b.w	37c74 <k_work_reschedule_for_queue>
   37d40:	20018fb8 	.word	0x20018fb8

00037d44 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   37d44:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   37d46:	4604      	mov	r4, r0
   37d48:	b950      	cbnz	r0, 37d60 <k_work_cancel_delayable+0x1c>
   37d4a:	491e      	ldr	r1, [pc, #120]	; (37dc4 <k_work_cancel_delayable+0x80>)
   37d4c:	481e      	ldr	r0, [pc, #120]	; (37dc8 <k_work_cancel_delayable+0x84>)
   37d4e:	f240 32ea 	movw	r2, #1002	; 0x3ea
   37d52:	f005 fa18 	bl	3d186 <assert_print>
   37d56:	f240 31ea 	movw	r1, #1002	; 0x3ea
   37d5a:	481a      	ldr	r0, [pc, #104]	; (37dc4 <k_work_cancel_delayable+0x80>)
   37d5c:	f005 fa0c 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37d60:	f04f 0320 	mov.w	r3, #32
   37d64:	f3ef 8511 	mrs	r5, BASEPRI
   37d68:	f383 8812 	msr	BASEPRI_MAX, r3
   37d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37d70:	4816      	ldr	r0, [pc, #88]	; (37dcc <k_work_cancel_delayable+0x88>)
   37d72:	f7fe ff41 	bl	36bf8 <z_spin_lock_valid>
   37d76:	b940      	cbnz	r0, 37d8a <k_work_cancel_delayable+0x46>
   37d78:	4915      	ldr	r1, [pc, #84]	; (37dd0 <k_work_cancel_delayable+0x8c>)
   37d7a:	4813      	ldr	r0, [pc, #76]	; (37dc8 <k_work_cancel_delayable+0x84>)
   37d7c:	228e      	movs	r2, #142	; 0x8e
   37d7e:	f005 fa02 	bl	3d186 <assert_print>
   37d82:	218e      	movs	r1, #142	; 0x8e
   37d84:	4812      	ldr	r0, [pc, #72]	; (37dd0 <k_work_cancel_delayable+0x8c>)
   37d86:	f005 f9f7 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37d8a:	4810      	ldr	r0, [pc, #64]	; (37dcc <k_work_cancel_delayable+0x88>)
   37d8c:	f7fe ff52 	bl	36c34 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   37d90:	4620      	mov	r0, r4
   37d92:	f009 fcd4 	bl	4173e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   37d96:	4620      	mov	r0, r4
   37d98:	f009 fce6 	bl	41768 <cancel_async_locked>
   37d9c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37d9e:	480b      	ldr	r0, [pc, #44]	; (37dcc <k_work_cancel_delayable+0x88>)
   37da0:	f7fe ff38 	bl	36c14 <z_spin_unlock_valid>
   37da4:	b940      	cbnz	r0, 37db8 <k_work_cancel_delayable+0x74>
   37da6:	490a      	ldr	r1, [pc, #40]	; (37dd0 <k_work_cancel_delayable+0x8c>)
   37da8:	4807      	ldr	r0, [pc, #28]	; (37dc8 <k_work_cancel_delayable+0x84>)
   37daa:	22b9      	movs	r2, #185	; 0xb9
   37dac:	f005 f9eb 	bl	3d186 <assert_print>
   37db0:	21b9      	movs	r1, #185	; 0xb9
   37db2:	4807      	ldr	r0, [pc, #28]	; (37dd0 <k_work_cancel_delayable+0x8c>)
   37db4:	f005 f9e0 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37db8:	f385 8811 	msr	BASEPRI, r5
   37dbc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   37dc0:	4620      	mov	r0, r4
   37dc2:	bd38      	pop	{r3, r4, r5, pc}
   37dc4:	0004c4c4 	.word	0x0004c4c4
   37dc8:	0004494f 	.word	0x0004494f
   37dcc:	2001a54c 	.word	0x2001a54c
   37dd0:	00044989 	.word	0x00044989

00037dd4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   37dd4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   37dd6:	4d07      	ldr	r5, [pc, #28]	; (37df4 <z_reset_time_slice+0x20>)
   37dd8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   37dda:	b154      	cbz	r4, 37df2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   37ddc:	f7ed fecc 	bl	25b78 <sys_clock_elapsed>
   37de0:	4b05      	ldr	r3, [pc, #20]	; (37df8 <z_reset_time_slice+0x24>)
   37de2:	4420      	add	r0, r4
   37de4:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   37de6:	2100      	movs	r1, #0
   37de8:	6828      	ldr	r0, [r5, #0]
	}
}
   37dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   37dee:	f001 ba23 	b.w	39238 <z_set_timeout_expiry>
}
   37df2:	bd38      	pop	{r3, r4, r5, pc}
   37df4:	2001a564 	.word	0x2001a564
   37df8:	2001a518 	.word	0x2001a518

00037dfc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   37dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37dfe:	4604      	mov	r4, r0
   37e00:	460d      	mov	r5, r1
	__asm__ volatile(
   37e02:	f04f 0320 	mov.w	r3, #32
   37e06:	f3ef 8711 	mrs	r7, BASEPRI
   37e0a:	f383 8812 	msr	BASEPRI_MAX, r3
   37e0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37e12:	481e      	ldr	r0, [pc, #120]	; (37e8c <k_sched_time_slice_set+0x90>)
   37e14:	f7fe fef0 	bl	36bf8 <z_spin_lock_valid>
   37e18:	b940      	cbnz	r0, 37e2c <k_sched_time_slice_set+0x30>
   37e1a:	491d      	ldr	r1, [pc, #116]	; (37e90 <k_sched_time_slice_set+0x94>)
   37e1c:	481d      	ldr	r0, [pc, #116]	; (37e94 <k_sched_time_slice_set+0x98>)
   37e1e:	228e      	movs	r2, #142	; 0x8e
   37e20:	f005 f9b1 	bl	3d186 <assert_print>
   37e24:	218e      	movs	r1, #142	; 0x8e
   37e26:	481a      	ldr	r0, [pc, #104]	; (37e90 <k_sched_time_slice_set+0x94>)
   37e28:	f005 f9a6 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37e2c:	4817      	ldr	r0, [pc, #92]	; (37e8c <k_sched_time_slice_set+0x90>)
   37e2e:	f7fe ff01 	bl	36c34 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   37e32:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   37e34:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   37e38:	f240 30e7 	movw	r0, #999	; 0x3e7
   37e3c:	4e16      	ldr	r6, [pc, #88]	; (37e98 <k_sched_time_slice_set+0x9c>)
   37e3e:	2300      	movs	r3, #0
   37e40:	6131      	str	r1, [r6, #16]
   37e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   37e46:	fbe4 010c 	umlal	r0, r1, r4, ip
   37e4a:	f7e5 f84d 	bl	1cee8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   37e4e:	2c00      	cmp	r4, #0
   37e50:	4b12      	ldr	r3, [pc, #72]	; (37e9c <k_sched_time_slice_set+0xa0>)
   37e52:	dc17      	bgt.n	37e84 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   37e54:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   37e56:	4b12      	ldr	r3, [pc, #72]	; (37ea0 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   37e58:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   37e5a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   37e5c:	f7ff ffba 	bl	37dd4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37e60:	480a      	ldr	r0, [pc, #40]	; (37e8c <k_sched_time_slice_set+0x90>)
   37e62:	f7fe fed7 	bl	36c14 <z_spin_unlock_valid>
   37e66:	b940      	cbnz	r0, 37e7a <k_sched_time_slice_set+0x7e>
   37e68:	4909      	ldr	r1, [pc, #36]	; (37e90 <k_sched_time_slice_set+0x94>)
   37e6a:	480a      	ldr	r0, [pc, #40]	; (37e94 <k_sched_time_slice_set+0x98>)
   37e6c:	22b9      	movs	r2, #185	; 0xb9
   37e6e:	f005 f98a 	bl	3d186 <assert_print>
   37e72:	21b9      	movs	r1, #185	; 0xb9
   37e74:	4806      	ldr	r0, [pc, #24]	; (37e90 <k_sched_time_slice_set+0x94>)
   37e76:	f005 f97f 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37e7a:	f387 8811 	msr	BASEPRI, r7
   37e7e:	f3bf 8f6f 	isb	sy
	}
}
   37e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   37e84:	2802      	cmp	r0, #2
   37e86:	bfb8      	it	lt
   37e88:	2002      	movlt	r0, #2
   37e8a:	e7e3      	b.n	37e54 <k_sched_time_slice_set+0x58>
   37e8c:	2001a55c 	.word	0x2001a55c
   37e90:	00044989 	.word	0x00044989
   37e94:	0004494f 	.word	0x0004494f
   37e98:	2001a518 	.word	0x2001a518
   37e9c:	2001a564 	.word	0x2001a564
   37ea0:	2001a560 	.word	0x2001a560

00037ea4 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   37ea4:	b538      	push	{r3, r4, r5, lr}
   37ea6:	4604      	mov	r4, r0
	__asm__ volatile(
   37ea8:	f04f 0320 	mov.w	r3, #32
   37eac:	f3ef 8511 	mrs	r5, BASEPRI
   37eb0:	f383 8812 	msr	BASEPRI_MAX, r3
   37eb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37eb8:	4812      	ldr	r0, [pc, #72]	; (37f04 <z_unpend_thread_no_timeout+0x60>)
   37eba:	f7fe fe9d 	bl	36bf8 <z_spin_lock_valid>
   37ebe:	b940      	cbnz	r0, 37ed2 <z_unpend_thread_no_timeout+0x2e>
   37ec0:	4911      	ldr	r1, [pc, #68]	; (37f08 <z_unpend_thread_no_timeout+0x64>)
   37ec2:	4812      	ldr	r0, [pc, #72]	; (37f0c <z_unpend_thread_no_timeout+0x68>)
   37ec4:	228e      	movs	r2, #142	; 0x8e
   37ec6:	f005 f95e 	bl	3d186 <assert_print>
   37eca:	218e      	movs	r1, #142	; 0x8e
   37ecc:	480e      	ldr	r0, [pc, #56]	; (37f08 <z_unpend_thread_no_timeout+0x64>)
   37ece:	f005 f953 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37ed2:	480c      	ldr	r0, [pc, #48]	; (37f04 <z_unpend_thread_no_timeout+0x60>)
   37ed4:	f7fe feae 	bl	36c34 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   37ed8:	4620      	mov	r0, r4
   37eda:	f000 f8c1 	bl	38060 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37ede:	4809      	ldr	r0, [pc, #36]	; (37f04 <z_unpend_thread_no_timeout+0x60>)
   37ee0:	f7fe fe98 	bl	36c14 <z_spin_unlock_valid>
   37ee4:	b940      	cbnz	r0, 37ef8 <z_unpend_thread_no_timeout+0x54>
   37ee6:	4908      	ldr	r1, [pc, #32]	; (37f08 <z_unpend_thread_no_timeout+0x64>)
   37ee8:	4808      	ldr	r0, [pc, #32]	; (37f0c <z_unpend_thread_no_timeout+0x68>)
   37eea:	22b9      	movs	r2, #185	; 0xb9
   37eec:	f005 f94b 	bl	3d186 <assert_print>
   37ef0:	21b9      	movs	r1, #185	; 0xb9
   37ef2:	4805      	ldr	r0, [pc, #20]	; (37f08 <z_unpend_thread_no_timeout+0x64>)
   37ef4:	f005 f940 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   37ef8:	f385 8811 	msr	BASEPRI, r5
   37efc:	f3bf 8f6f 	isb	sy
	}
}
   37f00:	bd38      	pop	{r3, r4, r5, pc}
   37f02:	bf00      	nop
   37f04:	2001a55c 	.word	0x2001a55c
   37f08:	00044989 	.word	0x00044989
   37f0c:	0004494f 	.word	0x0004494f

00037f10 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   37f10:	b510      	push	{r4, lr}
   37f12:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   37f14:	460c      	mov	r4, r1
   37f16:	b9c1      	cbnz	r1, 37f4a <z_reschedule+0x3a>
   37f18:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   37f1c:	b9aa      	cbnz	r2, 37f4a <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   37f1e:	4a14      	ldr	r2, [pc, #80]	; (37f70 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   37f20:	69d1      	ldr	r1, [r2, #28]
   37f22:	6892      	ldr	r2, [r2, #8]
   37f24:	4291      	cmp	r1, r2
   37f26:	d010      	beq.n	37f4a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f28:	f7fe fe74 	bl	36c14 <z_spin_unlock_valid>
   37f2c:	b940      	cbnz	r0, 37f40 <z_reschedule+0x30>
   37f2e:	4911      	ldr	r1, [pc, #68]	; (37f74 <z_reschedule+0x64>)
   37f30:	4811      	ldr	r0, [pc, #68]	; (37f78 <z_reschedule+0x68>)
   37f32:	22d0      	movs	r2, #208	; 0xd0
   37f34:	f005 f927 	bl	3d186 <assert_print>
   37f38:	21d0      	movs	r1, #208	; 0xd0
   37f3a:	480e      	ldr	r0, [pc, #56]	; (37f74 <z_reschedule+0x64>)
   37f3c:	f005 f91c 	bl	3d178 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   37f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   37f44:	2000      	movs	r0, #0
   37f46:	f7eb b921 	b.w	2318c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f4a:	4618      	mov	r0, r3
   37f4c:	f7fe fe62 	bl	36c14 <z_spin_unlock_valid>
   37f50:	b940      	cbnz	r0, 37f64 <z_reschedule+0x54>
   37f52:	4908      	ldr	r1, [pc, #32]	; (37f74 <z_reschedule+0x64>)
   37f54:	4808      	ldr	r0, [pc, #32]	; (37f78 <z_reschedule+0x68>)
   37f56:	22b9      	movs	r2, #185	; 0xb9
   37f58:	f005 f915 	bl	3d186 <assert_print>
   37f5c:	21b9      	movs	r1, #185	; 0xb9
   37f5e:	4805      	ldr	r0, [pc, #20]	; (37f74 <z_reschedule+0x64>)
   37f60:	f005 f90a 	bl	3d178 <assert_post_action>
   37f64:	f384 8811 	msr	BASEPRI, r4
   37f68:	f3bf 8f6f 	isb	sy
   37f6c:	bd10      	pop	{r4, pc}
   37f6e:	bf00      	nop
   37f70:	2001a518 	.word	0x2001a518
   37f74:	00044989 	.word	0x00044989
   37f78:	0004494f 	.word	0x0004494f

00037f7c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   37f7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   37f7e:	f04f 0320 	mov.w	r3, #32
   37f82:	f3ef 8511 	mrs	r5, BASEPRI
   37f86:	f383 8812 	msr	BASEPRI_MAX, r3
   37f8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37f8e:	4820      	ldr	r0, [pc, #128]	; (38010 <k_sched_lock+0x94>)
   37f90:	f7fe fe32 	bl	36bf8 <z_spin_lock_valid>
   37f94:	b940      	cbnz	r0, 37fa8 <k_sched_lock+0x2c>
   37f96:	491f      	ldr	r1, [pc, #124]	; (38014 <k_sched_lock+0x98>)
   37f98:	481f      	ldr	r0, [pc, #124]	; (38018 <k_sched_lock+0x9c>)
   37f9a:	228e      	movs	r2, #142	; 0x8e
   37f9c:	f005 f8f3 	bl	3d186 <assert_print>
   37fa0:	218e      	movs	r1, #142	; 0x8e
   37fa2:	481c      	ldr	r0, [pc, #112]	; (38014 <k_sched_lock+0x98>)
   37fa4:	f005 f8e8 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   37fa8:	4819      	ldr	r0, [pc, #100]	; (38010 <k_sched_lock+0x94>)
   37faa:	f7fe fe43 	bl	36c34 <z_spin_lock_set_owner>
   37fae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   37fb2:	b143      	cbz	r3, 37fc6 <k_sched_lock+0x4a>
   37fb4:	4919      	ldr	r1, [pc, #100]	; (3801c <k_sched_lock+0xa0>)
   37fb6:	4818      	ldr	r0, [pc, #96]	; (38018 <k_sched_lock+0x9c>)
   37fb8:	22fd      	movs	r2, #253	; 0xfd
   37fba:	f005 f8e4 	bl	3d186 <assert_print>
   37fbe:	21fd      	movs	r1, #253	; 0xfd
   37fc0:	4816      	ldr	r0, [pc, #88]	; (3801c <k_sched_lock+0xa0>)
   37fc2:	f005 f8d9 	bl	3d178 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   37fc6:	4c16      	ldr	r4, [pc, #88]	; (38020 <k_sched_lock+0xa4>)
   37fc8:	68a3      	ldr	r3, [r4, #8]
   37fca:	7bdb      	ldrb	r3, [r3, #15]
   37fcc:	2b01      	cmp	r3, #1
   37fce:	d108      	bne.n	37fe2 <k_sched_lock+0x66>
   37fd0:	4912      	ldr	r1, [pc, #72]	; (3801c <k_sched_lock+0xa0>)
   37fd2:	4811      	ldr	r0, [pc, #68]	; (38018 <k_sched_lock+0x9c>)
   37fd4:	22fe      	movs	r2, #254	; 0xfe
   37fd6:	f005 f8d6 	bl	3d186 <assert_print>
   37fda:	21fe      	movs	r1, #254	; 0xfe
   37fdc:	480f      	ldr	r0, [pc, #60]	; (3801c <k_sched_lock+0xa0>)
   37fde:	f005 f8cb 	bl	3d178 <assert_post_action>
	--_current->base.sched_locked;
   37fe2:	68a2      	ldr	r2, [r4, #8]
   37fe4:	7bd3      	ldrb	r3, [r2, #15]
   37fe6:	3b01      	subs	r3, #1
   37fe8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37fea:	4809      	ldr	r0, [pc, #36]	; (38010 <k_sched_lock+0x94>)
   37fec:	f7fe fe12 	bl	36c14 <z_spin_unlock_valid>
   37ff0:	b940      	cbnz	r0, 38004 <k_sched_lock+0x88>
   37ff2:	4908      	ldr	r1, [pc, #32]	; (38014 <k_sched_lock+0x98>)
   37ff4:	4808      	ldr	r0, [pc, #32]	; (38018 <k_sched_lock+0x9c>)
   37ff6:	22b9      	movs	r2, #185	; 0xb9
   37ff8:	f005 f8c5 	bl	3d186 <assert_print>
   37ffc:	21b9      	movs	r1, #185	; 0xb9
   37ffe:	4805      	ldr	r0, [pc, #20]	; (38014 <k_sched_lock+0x98>)
   38000:	f005 f8ba 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38004:	f385 8811 	msr	BASEPRI, r5
   38008:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   3800c:	bd38      	pop	{r3, r4, r5, pc}
   3800e:	bf00      	nop
   38010:	2001a55c 	.word	0x2001a55c
   38014:	00044989 	.word	0x00044989
   38018:	0004494f 	.word	0x0004494f
   3801c:	0004c479 	.word	0x0004c479
   38020:	2001a518 	.word	0x2001a518

00038024 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38024:	4b0b      	ldr	r3, [pc, #44]	; (38054 <z_priq_dumb_remove+0x30>)
{
   38026:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38028:	4299      	cmp	r1, r3
{
   3802a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3802c:	d10a      	bne.n	38044 <z_priq_dumb_remove+0x20>
   3802e:	490a      	ldr	r1, [pc, #40]	; (38058 <z_priq_dumb_remove+0x34>)
   38030:	480a      	ldr	r0, [pc, #40]	; (3805c <z_priq_dumb_remove+0x38>)
   38032:	f240 423d 	movw	r2, #1085	; 0x43d
   38036:	f005 f8a6 	bl	3d186 <assert_print>
   3803a:	f240 413d 	movw	r1, #1085	; 0x43d
   3803e:	4806      	ldr	r0, [pc, #24]	; (38058 <z_priq_dumb_remove+0x34>)
   38040:	f005 f89a 	bl	3d178 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   38044:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   38048:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3804a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3804c:	2300      	movs	r3, #0
	node->prev = NULL;
   3804e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   38052:	bd10      	pop	{r4, pc}
   38054:	20018e10 	.word	0x20018e10
   38058:	0004c4e5 	.word	0x0004c4e5
   3805c:	0004494f 	.word	0x0004494f

00038060 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   38060:	6883      	ldr	r3, [r0, #8]
{
   38062:	b510      	push	{r4, lr}
   38064:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   38066:	b953      	cbnz	r3, 3807e <unpend_thread_no_timeout+0x1e>
   38068:	490a      	ldr	r1, [pc, #40]	; (38094 <unpend_thread_no_timeout+0x34>)
   3806a:	480b      	ldr	r0, [pc, #44]	; (38098 <unpend_thread_no_timeout+0x38>)
   3806c:	f240 22b9 	movw	r2, #697	; 0x2b9
   38070:	f005 f889 	bl	3d186 <assert_print>
   38074:	f240 21b9 	movw	r1, #697	; 0x2b9
   38078:	4806      	ldr	r0, [pc, #24]	; (38094 <unpend_thread_no_timeout+0x34>)
   3807a:	f005 f87d 	bl	3d178 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3807e:	4621      	mov	r1, r4
   38080:	68a0      	ldr	r0, [r4, #8]
   38082:	f7ff ffcf 	bl	38024 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   38086:	7b63      	ldrb	r3, [r4, #13]
   38088:	f023 0302 	bic.w	r3, r3, #2
   3808c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   3808e:	2300      	movs	r3, #0
   38090:	60a3      	str	r3, [r4, #8]
}
   38092:	bd10      	pop	{r4, pc}
   38094:	0004c4e5 	.word	0x0004c4e5
   38098:	0004494f 	.word	0x0004494f

0003809c <z_unpend_thread>:
{
   3809c:	b538      	push	{r3, r4, r5, lr}
   3809e:	4604      	mov	r4, r0
	__asm__ volatile(
   380a0:	f04f 0320 	mov.w	r3, #32
   380a4:	f3ef 8511 	mrs	r5, BASEPRI
   380a8:	f383 8812 	msr	BASEPRI_MAX, r3
   380ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   380b0:	4814      	ldr	r0, [pc, #80]	; (38104 <z_unpend_thread+0x68>)
   380b2:	f7fe fda1 	bl	36bf8 <z_spin_lock_valid>
   380b6:	b940      	cbnz	r0, 380ca <z_unpend_thread+0x2e>
   380b8:	4913      	ldr	r1, [pc, #76]	; (38108 <z_unpend_thread+0x6c>)
   380ba:	4814      	ldr	r0, [pc, #80]	; (3810c <z_unpend_thread+0x70>)
   380bc:	228e      	movs	r2, #142	; 0x8e
   380be:	f005 f862 	bl	3d186 <assert_print>
   380c2:	218e      	movs	r1, #142	; 0x8e
   380c4:	4810      	ldr	r0, [pc, #64]	; (38108 <z_unpend_thread+0x6c>)
   380c6:	f005 f857 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   380ca:	480e      	ldr	r0, [pc, #56]	; (38104 <z_unpend_thread+0x68>)
   380cc:	f7fe fdb2 	bl	36c34 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   380d0:	4620      	mov	r0, r4
   380d2:	f7ff ffc5 	bl	38060 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   380d6:	480b      	ldr	r0, [pc, #44]	; (38104 <z_unpend_thread+0x68>)
   380d8:	f7fe fd9c 	bl	36c14 <z_spin_unlock_valid>
   380dc:	b940      	cbnz	r0, 380f0 <z_unpend_thread+0x54>
   380de:	490a      	ldr	r1, [pc, #40]	; (38108 <z_unpend_thread+0x6c>)
   380e0:	480a      	ldr	r0, [pc, #40]	; (3810c <z_unpend_thread+0x70>)
   380e2:	22b9      	movs	r2, #185	; 0xb9
   380e4:	f005 f84f 	bl	3d186 <assert_print>
   380e8:	21b9      	movs	r1, #185	; 0xb9
   380ea:	4807      	ldr	r0, [pc, #28]	; (38108 <z_unpend_thread+0x6c>)
   380ec:	f005 f844 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   380f0:	f385 8811 	msr	BASEPRI, r5
   380f4:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   380f8:	f104 0018 	add.w	r0, r4, #24
}
   380fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   38100:	f000 bfee 	b.w	390e0 <z_abort_timeout>
   38104:	2001a55c 	.word	0x2001a55c
   38108:	00044989 	.word	0x00044989
   3810c:	0004494f 	.word	0x0004494f

00038110 <update_cache>:
{
   38110:	b538      	push	{r3, r4, r5, lr}
   38112:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   38114:	4812      	ldr	r0, [pc, #72]	; (38160 <update_cache+0x50>)
   38116:	f009 fb79 	bl	4180c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3811a:	4d12      	ldr	r5, [pc, #72]	; (38164 <update_cache+0x54>)
   3811c:	4604      	mov	r4, r0
   3811e:	b900      	cbnz	r0, 38122 <update_cache+0x12>
   38120:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   38122:	b9aa      	cbnz	r2, 38150 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   38124:	68ab      	ldr	r3, [r5, #8]
   38126:	b943      	cbnz	r3, 3813a <update_cache+0x2a>
   38128:	490f      	ldr	r1, [pc, #60]	; (38168 <update_cache+0x58>)
   3812a:	4810      	ldr	r0, [pc, #64]	; (3816c <update_cache+0x5c>)
   3812c:	2289      	movs	r2, #137	; 0x89
   3812e:	f005 f82a 	bl	3d186 <assert_print>
   38132:	2189      	movs	r1, #137	; 0x89
   38134:	480c      	ldr	r0, [pc, #48]	; (38168 <update_cache+0x58>)
   38136:	f005 f81f 	bl	3d178 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   3813a:	68ab      	ldr	r3, [r5, #8]
   3813c:	7b5a      	ldrb	r2, [r3, #13]
   3813e:	06d2      	lsls	r2, r2, #27
   38140:	d106      	bne.n	38150 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   38142:	69a2      	ldr	r2, [r4, #24]
   38144:	b922      	cbnz	r2, 38150 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   38146:	89da      	ldrh	r2, [r3, #14]
   38148:	2a7f      	cmp	r2, #127	; 0x7f
   3814a:	d901      	bls.n	38150 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   3814c:	61eb      	str	r3, [r5, #28]
}
   3814e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   38150:	68ab      	ldr	r3, [r5, #8]
   38152:	42a3      	cmp	r3, r4
   38154:	d002      	beq.n	3815c <update_cache+0x4c>
			z_reset_time_slice(thread);
   38156:	4620      	mov	r0, r4
   38158:	f7ff fe3c 	bl	37dd4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3815c:	61ec      	str	r4, [r5, #28]
}
   3815e:	e7f6      	b.n	3814e <update_cache+0x3e>
   38160:	2001a538 	.word	0x2001a538
   38164:	2001a518 	.word	0x2001a518
   38168:	0004c4e5 	.word	0x0004c4e5
   3816c:	0004494f 	.word	0x0004494f

00038170 <move_thread_to_end_of_prio_q>:
{
   38170:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   38172:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   38176:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   38178:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   3817a:	7b43      	ldrb	r3, [r0, #13]
   3817c:	da06      	bge.n	3818c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3817e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   38182:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38184:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38186:	481d      	ldr	r0, [pc, #116]	; (381fc <move_thread_to_end_of_prio_q+0x8c>)
   38188:	f7ff ff4c 	bl	38024 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   3818c:	7b63      	ldrb	r3, [r4, #13]
   3818e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   38192:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38194:	4b1a      	ldr	r3, [pc, #104]	; (38200 <move_thread_to_end_of_prio_q+0x90>)
   38196:	429c      	cmp	r4, r3
   38198:	d108      	bne.n	381ac <move_thread_to_end_of_prio_q+0x3c>
   3819a:	491a      	ldr	r1, [pc, #104]	; (38204 <move_thread_to_end_of_prio_q+0x94>)
   3819c:	481a      	ldr	r0, [pc, #104]	; (38208 <move_thread_to_end_of_prio_q+0x98>)
   3819e:	22ba      	movs	r2, #186	; 0xba
   381a0:	f004 fff1 	bl	3d186 <assert_print>
   381a4:	21ba      	movs	r1, #186	; 0xba
   381a6:	4817      	ldr	r0, [pc, #92]	; (38204 <move_thread_to_end_of_prio_q+0x94>)
   381a8:	f004 ffe6 	bl	3d178 <assert_post_action>
	return list->head == list;
   381ac:	4a17      	ldr	r2, [pc, #92]	; (3820c <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   381ae:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   381b2:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   381b6:	42ab      	cmp	r3, r5
   381b8:	d01b      	beq.n	381f2 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   381ba:	b1d3      	cbz	r3, 381f2 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   381bc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   381c0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   381c4:	428e      	cmp	r6, r1
   381c6:	d00f      	beq.n	381e8 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   381c8:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   381ca:	2900      	cmp	r1, #0
   381cc:	dd0c      	ble.n	381e8 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   381ce:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   381d0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   381d4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   381d6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   381d8:	6890      	ldr	r0, [r2, #8]
   381da:	1b03      	subs	r3, r0, r4
   381dc:	4258      	negs	r0, r3
   381de:	4158      	adcs	r0, r3
}
   381e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   381e4:	f7ff bf94 	b.w	38110 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   381e8:	4283      	cmp	r3, r0
   381ea:	d002      	beq.n	381f2 <move_thread_to_end_of_prio_q+0x82>
   381ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   381ee:	2b00      	cmp	r3, #0
   381f0:	d1e6      	bne.n	381c0 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   381f2:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   381f6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   381f8:	6254      	str	r4, [r2, #36]	; 0x24
}
   381fa:	e7ed      	b.n	381d8 <move_thread_to_end_of_prio_q+0x68>
   381fc:	2001a538 	.word	0x2001a538
   38200:	20018e10 	.word	0x20018e10
   38204:	0004c4e5 	.word	0x0004c4e5
   38208:	0004494f 	.word	0x0004494f
   3820c:	2001a518 	.word	0x2001a518

00038210 <z_time_slice>:
{
   38210:	b570      	push	{r4, r5, r6, lr}
   38212:	4605      	mov	r5, r0
	__asm__ volatile(
   38214:	f04f 0320 	mov.w	r3, #32
   38218:	f3ef 8611 	mrs	r6, BASEPRI
   3821c:	f383 8812 	msr	BASEPRI_MAX, r3
   38220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38224:	4825      	ldr	r0, [pc, #148]	; (382bc <z_time_slice+0xac>)
   38226:	f7fe fce7 	bl	36bf8 <z_spin_lock_valid>
   3822a:	b940      	cbnz	r0, 3823e <z_time_slice+0x2e>
   3822c:	4924      	ldr	r1, [pc, #144]	; (382c0 <z_time_slice+0xb0>)
   3822e:	4825      	ldr	r0, [pc, #148]	; (382c4 <z_time_slice+0xb4>)
   38230:	228e      	movs	r2, #142	; 0x8e
   38232:	f004 ffa8 	bl	3d186 <assert_print>
   38236:	218e      	movs	r1, #142	; 0x8e
   38238:	4821      	ldr	r0, [pc, #132]	; (382c0 <z_time_slice+0xb0>)
   3823a:	f004 ff9d 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3823e:	481f      	ldr	r0, [pc, #124]	; (382bc <z_time_slice+0xac>)
   38240:	f7fe fcf8 	bl	36c34 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   38244:	4b20      	ldr	r3, [pc, #128]	; (382c8 <z_time_slice+0xb8>)
   38246:	4a21      	ldr	r2, [pc, #132]	; (382cc <z_time_slice+0xbc>)
   38248:	689c      	ldr	r4, [r3, #8]
   3824a:	6811      	ldr	r1, [r2, #0]
   3824c:	428c      	cmp	r4, r1
   3824e:	d114      	bne.n	3827a <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   38250:	4620      	mov	r0, r4
   38252:	f7ff fdbf 	bl	37dd4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38256:	4819      	ldr	r0, [pc, #100]	; (382bc <z_time_slice+0xac>)
   38258:	f7fe fcdc 	bl	36c14 <z_spin_unlock_valid>
   3825c:	b940      	cbnz	r0, 38270 <z_time_slice+0x60>
   3825e:	4918      	ldr	r1, [pc, #96]	; (382c0 <z_time_slice+0xb0>)
   38260:	4818      	ldr	r0, [pc, #96]	; (382c4 <z_time_slice+0xb4>)
   38262:	22b9      	movs	r2, #185	; 0xb9
   38264:	f004 ff8f 	bl	3d186 <assert_print>
   38268:	21b9      	movs	r1, #185	; 0xb9
   3826a:	4815      	ldr	r0, [pc, #84]	; (382c0 <z_time_slice+0xb0>)
   3826c:	f004 ff84 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38270:	f386 8811 	msr	BASEPRI, r6
   38274:	f3bf 8f6f 	isb	sy
}
   38278:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   3827a:	2100      	movs	r1, #0
   3827c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   3827e:	4a14      	ldr	r2, [pc, #80]	; (382d0 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   38280:	6812      	ldr	r2, [r2, #0]
   38282:	b1c2      	cbz	r2, 382b6 <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   38284:	89e2      	ldrh	r2, [r4, #14]
   38286:	2a7f      	cmp	r2, #127	; 0x7f
   38288:	d815      	bhi.n	382b6 <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   3828a:	7b62      	ldrb	r2, [r4, #13]
   3828c:	06d2      	lsls	r2, r2, #27
   3828e:	d112      	bne.n	382b6 <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   38290:	4a10      	ldr	r2, [pc, #64]	; (382d4 <z_time_slice+0xc4>)
   38292:	f994 100e 	ldrsb.w	r1, [r4, #14]
   38296:	6812      	ldr	r2, [r2, #0]
   38298:	4291      	cmp	r1, r2
   3829a:	db0c      	blt.n	382b6 <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   3829c:	4a0e      	ldr	r2, [pc, #56]	; (382d8 <z_time_slice+0xc8>)
   3829e:	4294      	cmp	r4, r2
   382a0:	d009      	beq.n	382b6 <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   382a2:	691a      	ldr	r2, [r3, #16]
   382a4:	42aa      	cmp	r2, r5
   382a6:	dc03      	bgt.n	382b0 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   382a8:	4620      	mov	r0, r4
   382aa:	f7ff ff61 	bl	38170 <move_thread_to_end_of_prio_q>
   382ae:	e7cf      	b.n	38250 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   382b0:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   382b2:	611a      	str	r2, [r3, #16]
   382b4:	e7cf      	b.n	38256 <z_time_slice+0x46>
   382b6:	2200      	movs	r2, #0
   382b8:	e7fb      	b.n	382b2 <z_time_slice+0xa2>
   382ba:	bf00      	nop
   382bc:	2001a55c 	.word	0x2001a55c
   382c0:	00044989 	.word	0x00044989
   382c4:	0004494f 	.word	0x0004494f
   382c8:	2001a518 	.word	0x2001a518
   382cc:	2001a558 	.word	0x2001a558
   382d0:	2001a564 	.word	0x2001a564
   382d4:	2001a560 	.word	0x2001a560
   382d8:	20018e10 	.word	0x20018e10

000382dc <ready_thread>:
{
   382dc:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   382de:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   382e2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   382e4:	2a00      	cmp	r2, #0
   382e6:	7b43      	ldrb	r3, [r0, #13]
   382e8:	db38      	blt.n	3835c <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   382ea:	06da      	lsls	r2, r3, #27
   382ec:	d136      	bne.n	3835c <ready_thread+0x80>
   382ee:	6982      	ldr	r2, [r0, #24]
   382f0:	2a00      	cmp	r2, #0
   382f2:	d133      	bne.n	3835c <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   382f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   382f8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   382fa:	4b19      	ldr	r3, [pc, #100]	; (38360 <ready_thread+0x84>)
   382fc:	4298      	cmp	r0, r3
   382fe:	d108      	bne.n	38312 <ready_thread+0x36>
   38300:	4918      	ldr	r1, [pc, #96]	; (38364 <ready_thread+0x88>)
   38302:	4819      	ldr	r0, [pc, #100]	; (38368 <ready_thread+0x8c>)
   38304:	22ba      	movs	r2, #186	; 0xba
   38306:	f004 ff3e 	bl	3d186 <assert_print>
   3830a:	21ba      	movs	r1, #186	; 0xba
   3830c:	4815      	ldr	r0, [pc, #84]	; (38364 <ready_thread+0x88>)
   3830e:	f004 ff33 	bl	3d178 <assert_post_action>
	return list->head == list;
   38312:	4a16      	ldr	r2, [pc, #88]	; (3836c <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38314:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   38318:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3831c:	42ab      	cmp	r3, r5
   3831e:	d018      	beq.n	38352 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38320:	b1bb      	cbz	r3, 38352 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   38322:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   38326:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   3832a:	428e      	cmp	r6, r1
   3832c:	d00c      	beq.n	38348 <ready_thread+0x6c>
		return b2 - b1;
   3832e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   38330:	2900      	cmp	r1, #0
   38332:	dd09      	ble.n	38348 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   38334:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38336:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3833a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3833c:	605c      	str	r4, [r3, #4]
		update_cache(0);
   3833e:	2000      	movs	r0, #0
}
   38340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   38344:	f7ff bee4 	b.w	38110 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   38348:	4298      	cmp	r0, r3
   3834a:	d002      	beq.n	38352 <ready_thread+0x76>
   3834c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3834e:	2b00      	cmp	r3, #0
   38350:	d1e9      	bne.n	38326 <ready_thread+0x4a>
	node->prev = tail;
   38352:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   38356:	6004      	str	r4, [r0, #0]
	list->tail = node;
   38358:	6254      	str	r4, [r2, #36]	; 0x24
}
   3835a:	e7f0      	b.n	3833e <ready_thread+0x62>
}
   3835c:	bd70      	pop	{r4, r5, r6, pc}
   3835e:	bf00      	nop
   38360:	20018e10 	.word	0x20018e10
   38364:	0004c4e5 	.word	0x0004c4e5
   38368:	0004494f 	.word	0x0004494f
   3836c:	2001a518 	.word	0x2001a518

00038370 <z_ready_thread>:
{
   38370:	b538      	push	{r3, r4, r5, lr}
   38372:	4604      	mov	r4, r0
	__asm__ volatile(
   38374:	f04f 0320 	mov.w	r3, #32
   38378:	f3ef 8511 	mrs	r5, BASEPRI
   3837c:	f383 8812 	msr	BASEPRI_MAX, r3
   38380:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38384:	4812      	ldr	r0, [pc, #72]	; (383d0 <z_ready_thread+0x60>)
   38386:	f7fe fc37 	bl	36bf8 <z_spin_lock_valid>
   3838a:	b940      	cbnz	r0, 3839e <z_ready_thread+0x2e>
   3838c:	4911      	ldr	r1, [pc, #68]	; (383d4 <z_ready_thread+0x64>)
   3838e:	4812      	ldr	r0, [pc, #72]	; (383d8 <z_ready_thread+0x68>)
   38390:	228e      	movs	r2, #142	; 0x8e
   38392:	f004 fef8 	bl	3d186 <assert_print>
   38396:	218e      	movs	r1, #142	; 0x8e
   38398:	480e      	ldr	r0, [pc, #56]	; (383d4 <z_ready_thread+0x64>)
   3839a:	f004 feed 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3839e:	480c      	ldr	r0, [pc, #48]	; (383d0 <z_ready_thread+0x60>)
   383a0:	f7fe fc48 	bl	36c34 <z_spin_lock_set_owner>
			ready_thread(thread);
   383a4:	4620      	mov	r0, r4
   383a6:	f7ff ff99 	bl	382dc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   383aa:	4809      	ldr	r0, [pc, #36]	; (383d0 <z_ready_thread+0x60>)
   383ac:	f7fe fc32 	bl	36c14 <z_spin_unlock_valid>
   383b0:	b940      	cbnz	r0, 383c4 <z_ready_thread+0x54>
   383b2:	4908      	ldr	r1, [pc, #32]	; (383d4 <z_ready_thread+0x64>)
   383b4:	4808      	ldr	r0, [pc, #32]	; (383d8 <z_ready_thread+0x68>)
   383b6:	22b9      	movs	r2, #185	; 0xb9
   383b8:	f004 fee5 	bl	3d186 <assert_print>
   383bc:	21b9      	movs	r1, #185	; 0xb9
   383be:	4805      	ldr	r0, [pc, #20]	; (383d4 <z_ready_thread+0x64>)
   383c0:	f004 feda 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   383c4:	f385 8811 	msr	BASEPRI, r5
   383c8:	f3bf 8f6f 	isb	sy
}
   383cc:	bd38      	pop	{r3, r4, r5, pc}
   383ce:	bf00      	nop
   383d0:	2001a55c 	.word	0x2001a55c
   383d4:	00044989 	.word	0x00044989
   383d8:	0004494f 	.word	0x0004494f

000383dc <z_sched_start>:
{
   383dc:	b538      	push	{r3, r4, r5, lr}
   383de:	4604      	mov	r4, r0
	__asm__ volatile(
   383e0:	f04f 0320 	mov.w	r3, #32
   383e4:	f3ef 8511 	mrs	r5, BASEPRI
   383e8:	f383 8812 	msr	BASEPRI_MAX, r3
   383ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   383f0:	4818      	ldr	r0, [pc, #96]	; (38454 <z_sched_start+0x78>)
   383f2:	f7fe fc01 	bl	36bf8 <z_spin_lock_valid>
   383f6:	b940      	cbnz	r0, 3840a <z_sched_start+0x2e>
   383f8:	4917      	ldr	r1, [pc, #92]	; (38458 <z_sched_start+0x7c>)
   383fa:	4818      	ldr	r0, [pc, #96]	; (3845c <z_sched_start+0x80>)
   383fc:	228e      	movs	r2, #142	; 0x8e
   383fe:	f004 fec2 	bl	3d186 <assert_print>
   38402:	218e      	movs	r1, #142	; 0x8e
   38404:	4814      	ldr	r0, [pc, #80]	; (38458 <z_sched_start+0x7c>)
   38406:	f004 feb7 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3840a:	4812      	ldr	r0, [pc, #72]	; (38454 <z_sched_start+0x78>)
   3840c:	f7fe fc12 	bl	36c34 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   38410:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   38412:	075a      	lsls	r2, r3, #29
   38414:	d411      	bmi.n	3843a <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38416:	480f      	ldr	r0, [pc, #60]	; (38454 <z_sched_start+0x78>)
   38418:	f7fe fbfc 	bl	36c14 <z_spin_unlock_valid>
   3841c:	b940      	cbnz	r0, 38430 <z_sched_start+0x54>
   3841e:	490e      	ldr	r1, [pc, #56]	; (38458 <z_sched_start+0x7c>)
   38420:	480e      	ldr	r0, [pc, #56]	; (3845c <z_sched_start+0x80>)
   38422:	22b9      	movs	r2, #185	; 0xb9
   38424:	f004 feaf 	bl	3d186 <assert_print>
   38428:	21b9      	movs	r1, #185	; 0xb9
   3842a:	480b      	ldr	r0, [pc, #44]	; (38458 <z_sched_start+0x7c>)
   3842c:	f004 fea4 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38430:	f385 8811 	msr	BASEPRI, r5
   38434:	f3bf 8f6f 	isb	sy
}
   38438:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3843a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3843e:	4620      	mov	r0, r4
   38440:	7363      	strb	r3, [r4, #13]
   38442:	f7ff ff4b 	bl	382dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   38446:	4629      	mov	r1, r5
}
   38448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3844c:	4801      	ldr	r0, [pc, #4]	; (38454 <z_sched_start+0x78>)
   3844e:	f7ff bd5f 	b.w	37f10 <z_reschedule>
   38452:	bf00      	nop
   38454:	2001a55c 	.word	0x2001a55c
   38458:	00044989 	.word	0x00044989
   3845c:	0004494f 	.word	0x0004494f

00038460 <z_impl_k_thread_resume>:
{
   38460:	b538      	push	{r3, r4, r5, lr}
   38462:	4604      	mov	r4, r0
	__asm__ volatile(
   38464:	f04f 0320 	mov.w	r3, #32
   38468:	f3ef 8511 	mrs	r5, BASEPRI
   3846c:	f383 8812 	msr	BASEPRI_MAX, r3
   38470:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38474:	4818      	ldr	r0, [pc, #96]	; (384d8 <z_impl_k_thread_resume+0x78>)
   38476:	f7fe fbbf 	bl	36bf8 <z_spin_lock_valid>
   3847a:	b940      	cbnz	r0, 3848e <z_impl_k_thread_resume+0x2e>
   3847c:	4917      	ldr	r1, [pc, #92]	; (384dc <z_impl_k_thread_resume+0x7c>)
   3847e:	4818      	ldr	r0, [pc, #96]	; (384e0 <z_impl_k_thread_resume+0x80>)
   38480:	228e      	movs	r2, #142	; 0x8e
   38482:	f004 fe80 	bl	3d186 <assert_print>
   38486:	218e      	movs	r1, #142	; 0x8e
   38488:	4814      	ldr	r0, [pc, #80]	; (384dc <z_impl_k_thread_resume+0x7c>)
   3848a:	f004 fe75 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3848e:	4812      	ldr	r0, [pc, #72]	; (384d8 <z_impl_k_thread_resume+0x78>)
   38490:	f7fe fbd0 	bl	36c34 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
   38494:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_suspended(thread)) {
   38496:	06da      	lsls	r2, r3, #27
   38498:	d411      	bmi.n	384be <z_impl_k_thread_resume+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3849a:	480f      	ldr	r0, [pc, #60]	; (384d8 <z_impl_k_thread_resume+0x78>)
   3849c:	f7fe fbba 	bl	36c14 <z_spin_unlock_valid>
   384a0:	b940      	cbnz	r0, 384b4 <z_impl_k_thread_resume+0x54>
   384a2:	490e      	ldr	r1, [pc, #56]	; (384dc <z_impl_k_thread_resume+0x7c>)
   384a4:	480e      	ldr	r0, [pc, #56]	; (384e0 <z_impl_k_thread_resume+0x80>)
   384a6:	22b9      	movs	r2, #185	; 0xb9
   384a8:	f004 fe6d 	bl	3d186 <assert_print>
   384ac:	21b9      	movs	r1, #185	; 0xb9
   384ae:	480b      	ldr	r0, [pc, #44]	; (384dc <z_impl_k_thread_resume+0x7c>)
   384b0:	f004 fe62 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   384b4:	f385 8811 	msr	BASEPRI, r5
   384b8:	f3bf 8f6f 	isb	sy
}
   384bc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   384be:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
   384c2:	4620      	mov	r0, r4
   384c4:	7363      	strb	r3, [r4, #13]
   384c6:	f7ff ff09 	bl	382dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   384ca:	4629      	mov	r1, r5
}
   384cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   384d0:	4801      	ldr	r0, [pc, #4]	; (384d8 <z_impl_k_thread_resume+0x78>)
   384d2:	f7ff bd1d 	b.w	37f10 <z_reschedule>
   384d6:	bf00      	nop
   384d8:	2001a55c 	.word	0x2001a55c
   384dc:	00044989 	.word	0x00044989
   384e0:	0004494f 	.word	0x0004494f

000384e4 <z_thread_timeout>:
{
   384e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   384e6:	4604      	mov	r4, r0
	__asm__ volatile(
   384e8:	f04f 0320 	mov.w	r3, #32
   384ec:	f3ef 8511 	mrs	r5, BASEPRI
   384f0:	f383 8812 	msr	BASEPRI_MAX, r3
   384f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   384f8:	481c      	ldr	r0, [pc, #112]	; (3856c <z_thread_timeout+0x88>)
   384fa:	f7fe fb7d 	bl	36bf8 <z_spin_lock_valid>
   384fe:	b940      	cbnz	r0, 38512 <z_thread_timeout+0x2e>
   38500:	491b      	ldr	r1, [pc, #108]	; (38570 <z_thread_timeout+0x8c>)
   38502:	481c      	ldr	r0, [pc, #112]	; (38574 <z_thread_timeout+0x90>)
   38504:	228e      	movs	r2, #142	; 0x8e
   38506:	f004 fe3e 	bl	3d186 <assert_print>
   3850a:	218e      	movs	r1, #142	; 0x8e
   3850c:	4818      	ldr	r0, [pc, #96]	; (38570 <z_thread_timeout+0x8c>)
   3850e:	f004 fe33 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   38512:	4816      	ldr	r0, [pc, #88]	; (3856c <z_thread_timeout+0x88>)
   38514:	f7fe fb8e 	bl	36c34 <z_spin_lock_set_owner>
		if (!killed) {
   38518:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   3851c:	f013 0f28 	tst.w	r3, #40	; 0x28
   38520:	d110      	bne.n	38544 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   38522:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   38526:	f1a4 0018 	sub.w	r0, r4, #24
			if (thread->base.pended_on != NULL) {
   3852a:	b11b      	cbz	r3, 38534 <z_thread_timeout+0x50>
				unpend_thread_no_timeout(thread);
   3852c:	9001      	str	r0, [sp, #4]
   3852e:	f7ff fd97 	bl	38060 <unpend_thread_no_timeout>
   38532:	9801      	ldr	r0, [sp, #4]
   38534:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   38538:	f023 0314 	bic.w	r3, r3, #20
   3853c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   38540:	f7ff fecc 	bl	382dc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38544:	4809      	ldr	r0, [pc, #36]	; (3856c <z_thread_timeout+0x88>)
   38546:	f7fe fb65 	bl	36c14 <z_spin_unlock_valid>
   3854a:	b940      	cbnz	r0, 3855e <z_thread_timeout+0x7a>
   3854c:	4908      	ldr	r1, [pc, #32]	; (38570 <z_thread_timeout+0x8c>)
   3854e:	4809      	ldr	r0, [pc, #36]	; (38574 <z_thread_timeout+0x90>)
   38550:	22b9      	movs	r2, #185	; 0xb9
   38552:	f004 fe18 	bl	3d186 <assert_print>
   38556:	21b9      	movs	r1, #185	; 0xb9
   38558:	4805      	ldr	r0, [pc, #20]	; (38570 <z_thread_timeout+0x8c>)
   3855a:	f004 fe0d 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3855e:	f385 8811 	msr	BASEPRI, r5
   38562:	f3bf 8f6f 	isb	sy
}
   38566:	b003      	add	sp, #12
   38568:	bd30      	pop	{r4, r5, pc}
   3856a:	bf00      	nop
   3856c:	2001a55c 	.word	0x2001a55c
   38570:	00044989 	.word	0x00044989
   38574:	0004494f 	.word	0x0004494f

00038578 <unready_thread>:
{
   38578:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   3857a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3857e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   38580:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   38582:	7b43      	ldrb	r3, [r0, #13]
   38584:	da06      	bge.n	38594 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   3858a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3858c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3858e:	4806      	ldr	r0, [pc, #24]	; (385a8 <unready_thread+0x30>)
   38590:	f7ff fd48 	bl	38024 <z_priq_dumb_remove>
	update_cache(thread == _current);
   38594:	4b05      	ldr	r3, [pc, #20]	; (385ac <unready_thread+0x34>)
   38596:	6898      	ldr	r0, [r3, #8]
   38598:	1b03      	subs	r3, r0, r4
   3859a:	4258      	negs	r0, r3
   3859c:	4158      	adcs	r0, r3
}
   3859e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   385a2:	f7ff bdb5 	b.w	38110 <update_cache>
   385a6:	bf00      	nop
   385a8:	2001a538 	.word	0x2001a538
   385ac:	2001a518 	.word	0x2001a518

000385b0 <add_to_waitq_locked>:
{
   385b0:	b538      	push	{r3, r4, r5, lr}
   385b2:	4604      	mov	r4, r0
   385b4:	460d      	mov	r5, r1
	unready_thread(thread);
   385b6:	f7ff ffdf 	bl	38578 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   385ba:	7b63      	ldrb	r3, [r4, #13]
   385bc:	f043 0302 	orr.w	r3, r3, #2
   385c0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   385c2:	b1f5      	cbz	r5, 38602 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   385c4:	4b15      	ldr	r3, [pc, #84]	; (3861c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   385c6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   385c8:	429c      	cmp	r4, r3
   385ca:	d108      	bne.n	385de <add_to_waitq_locked+0x2e>
   385cc:	4914      	ldr	r1, [pc, #80]	; (38620 <add_to_waitq_locked+0x70>)
   385ce:	4815      	ldr	r0, [pc, #84]	; (38624 <add_to_waitq_locked+0x74>)
   385d0:	22ba      	movs	r2, #186	; 0xba
   385d2:	f004 fdd8 	bl	3d186 <assert_print>
   385d6:	21ba      	movs	r1, #186	; 0xba
   385d8:	4811      	ldr	r0, [pc, #68]	; (38620 <add_to_waitq_locked+0x70>)
   385da:	f004 fdcd 	bl	3d178 <assert_post_action>
	return list->head == list;
   385de:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   385e0:	429d      	cmp	r5, r3
   385e2:	d015      	beq.n	38610 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   385e4:	b1a3      	cbz	r3, 38610 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   385e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   385ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   385ee:	4291      	cmp	r1, r2
   385f0:	d008      	beq.n	38604 <add_to_waitq_locked+0x54>
		return b2 - b1;
   385f2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   385f4:	2a00      	cmp	r2, #0
   385f6:	dd05      	ble.n	38604 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   385f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   385fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   385fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38600:	605c      	str	r4, [r3, #4]
}
   38602:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   38604:	686a      	ldr	r2, [r5, #4]
   38606:	4293      	cmp	r3, r2
   38608:	d002      	beq.n	38610 <add_to_waitq_locked+0x60>
   3860a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3860c:	2b00      	cmp	r3, #0
   3860e:	d1ec      	bne.n	385ea <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   38610:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   38612:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   38616:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38618:	606c      	str	r4, [r5, #4]
}
   3861a:	e7f2      	b.n	38602 <add_to_waitq_locked+0x52>
   3861c:	20018e10 	.word	0x20018e10
   38620:	0004c4e5 	.word	0x0004c4e5
   38624:	0004494f 	.word	0x0004494f

00038628 <pend>:
{
   38628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3862c:	4604      	mov	r4, r0
   3862e:	4688      	mov	r8, r1
   38630:	4616      	mov	r6, r2
   38632:	461d      	mov	r5, r3
	__asm__ volatile(
   38634:	f04f 0320 	mov.w	r3, #32
   38638:	f3ef 8711 	mrs	r7, BASEPRI
   3863c:	f383 8812 	msr	BASEPRI_MAX, r3
   38640:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38644:	481a      	ldr	r0, [pc, #104]	; (386b0 <pend+0x88>)
   38646:	f7fe fad7 	bl	36bf8 <z_spin_lock_valid>
   3864a:	b940      	cbnz	r0, 3865e <pend+0x36>
   3864c:	4919      	ldr	r1, [pc, #100]	; (386b4 <pend+0x8c>)
   3864e:	481a      	ldr	r0, [pc, #104]	; (386b8 <pend+0x90>)
   38650:	228e      	movs	r2, #142	; 0x8e
   38652:	f004 fd98 	bl	3d186 <assert_print>
   38656:	218e      	movs	r1, #142	; 0x8e
   38658:	4816      	ldr	r0, [pc, #88]	; (386b4 <pend+0x8c>)
   3865a:	f004 fd8d 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3865e:	4814      	ldr	r0, [pc, #80]	; (386b0 <pend+0x88>)
   38660:	f7fe fae8 	bl	36c34 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   38664:	4620      	mov	r0, r4
   38666:	4641      	mov	r1, r8
   38668:	f7ff ffa2 	bl	385b0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3866c:	4810      	ldr	r0, [pc, #64]	; (386b0 <pend+0x88>)
   3866e:	f7fe fad1 	bl	36c14 <z_spin_unlock_valid>
   38672:	b940      	cbnz	r0, 38686 <pend+0x5e>
   38674:	490f      	ldr	r1, [pc, #60]	; (386b4 <pend+0x8c>)
   38676:	4810      	ldr	r0, [pc, #64]	; (386b8 <pend+0x90>)
   38678:	22b9      	movs	r2, #185	; 0xb9
   3867a:	f004 fd84 	bl	3d186 <assert_print>
   3867e:	21b9      	movs	r1, #185	; 0xb9
   38680:	480c      	ldr	r0, [pc, #48]	; (386b4 <pend+0x8c>)
   38682:	f004 fd79 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38686:	f387 8811 	msr	BASEPRI, r7
   3868a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3868e:	f1b5 3fff 	cmp.w	r5, #4294967295
   38692:	bf08      	it	eq
   38694:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   38698:	d008      	beq.n	386ac <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   3869a:	4632      	mov	r2, r6
   3869c:	462b      	mov	r3, r5
   3869e:	f104 0018 	add.w	r0, r4, #24
   386a2:	4906      	ldr	r1, [pc, #24]	; (386bc <pend+0x94>)
}
   386a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   386a8:	f000 bc6c 	b.w	38f84 <z_add_timeout>
   386ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   386b0:	2001a55c 	.word	0x2001a55c
   386b4:	00044989 	.word	0x00044989
   386b8:	0004494f 	.word	0x0004494f
   386bc:	000384e5 	.word	0x000384e5

000386c0 <z_pend_curr>:
{
   386c0:	b538      	push	{r3, r4, r5, lr}
   386c2:	4605      	mov	r5, r0
	pending_current = _current;
   386c4:	4b0d      	ldr	r3, [pc, #52]	; (386fc <z_pend_curr+0x3c>)
{
   386c6:	460c      	mov	r4, r1
	pending_current = _current;
   386c8:	6898      	ldr	r0, [r3, #8]
   386ca:	4b0d      	ldr	r3, [pc, #52]	; (38700 <z_pend_curr+0x40>)
{
   386cc:	4611      	mov	r1, r2
	pending_current = _current;
   386ce:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   386d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   386d4:	f7ff ffa8 	bl	38628 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   386d8:	4628      	mov	r0, r5
   386da:	f7fe fa9b 	bl	36c14 <z_spin_unlock_valid>
   386de:	b940      	cbnz	r0, 386f2 <z_pend_curr+0x32>
   386e0:	4908      	ldr	r1, [pc, #32]	; (38704 <z_pend_curr+0x44>)
   386e2:	4809      	ldr	r0, [pc, #36]	; (38708 <z_pend_curr+0x48>)
   386e4:	22d0      	movs	r2, #208	; 0xd0
   386e6:	f004 fd4e 	bl	3d186 <assert_print>
   386ea:	21d0      	movs	r1, #208	; 0xd0
   386ec:	4805      	ldr	r0, [pc, #20]	; (38704 <z_pend_curr+0x44>)
   386ee:	f004 fd43 	bl	3d178 <assert_post_action>
   386f2:	4620      	mov	r0, r4
}
   386f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   386f8:	f7ea bd48 	b.w	2318c <arch_swap>
   386fc:	2001a518 	.word	0x2001a518
   38700:	2001a558 	.word	0x2001a558
   38704:	00044989 	.word	0x00044989
   38708:	0004494f 	.word	0x0004494f

0003870c <z_set_prio>:
{
   3870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3870e:	4604      	mov	r4, r0
   38710:	460d      	mov	r5, r1
	__asm__ volatile(
   38712:	f04f 0320 	mov.w	r3, #32
   38716:	f3ef 8611 	mrs	r6, BASEPRI
   3871a:	f383 8812 	msr	BASEPRI_MAX, r3
   3871e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38722:	4834      	ldr	r0, [pc, #208]	; (387f4 <z_set_prio+0xe8>)
   38724:	f7fe fa68 	bl	36bf8 <z_spin_lock_valid>
   38728:	b940      	cbnz	r0, 3873c <z_set_prio+0x30>
   3872a:	4933      	ldr	r1, [pc, #204]	; (387f8 <z_set_prio+0xec>)
   3872c:	4833      	ldr	r0, [pc, #204]	; (387fc <z_set_prio+0xf0>)
   3872e:	228e      	movs	r2, #142	; 0x8e
   38730:	f004 fd29 	bl	3d186 <assert_print>
   38734:	218e      	movs	r1, #142	; 0x8e
   38736:	4830      	ldr	r0, [pc, #192]	; (387f8 <z_set_prio+0xec>)
   38738:	f004 fd1e 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3873c:	482d      	ldr	r0, [pc, #180]	; (387f4 <z_set_prio+0xe8>)
   3873e:	f7fe fa79 	bl	36c34 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   38742:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   38744:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38746:	06da      	lsls	r2, r3, #27
   38748:	d151      	bne.n	387ee <z_set_prio+0xe2>
		if (need_sched) {
   3874a:	69a2      	ldr	r2, [r4, #24]
   3874c:	2a00      	cmp	r2, #0
   3874e:	d14e      	bne.n	387ee <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38754:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38756:	4621      	mov	r1, r4
   38758:	4829      	ldr	r0, [pc, #164]	; (38800 <z_set_prio+0xf4>)
   3875a:	f7ff fc63 	bl	38024 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   3875e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   38760:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   38762:	f063 037f 	orn	r3, r3, #127	; 0x7f
   38766:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38768:	4b26      	ldr	r3, [pc, #152]	; (38804 <z_set_prio+0xf8>)
   3876a:	429c      	cmp	r4, r3
   3876c:	d108      	bne.n	38780 <z_set_prio+0x74>
   3876e:	4926      	ldr	r1, [pc, #152]	; (38808 <z_set_prio+0xfc>)
   38770:	4822      	ldr	r0, [pc, #136]	; (387fc <z_set_prio+0xf0>)
   38772:	22ba      	movs	r2, #186	; 0xba
   38774:	f004 fd07 	bl	3d186 <assert_print>
   38778:	21ba      	movs	r1, #186	; 0xba
   3877a:	4823      	ldr	r0, [pc, #140]	; (38808 <z_set_prio+0xfc>)
   3877c:	f004 fcfc 	bl	3d178 <assert_post_action>
	return list->head == list;
   38780:	4a22      	ldr	r2, [pc, #136]	; (3880c <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38782:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   38786:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3878a:	42ab      	cmp	r3, r5
   3878c:	d02a      	beq.n	387e4 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3878e:	b34b      	cbz	r3, 387e4 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   38790:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   38794:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   38798:	428f      	cmp	r7, r1
   3879a:	d01e      	beq.n	387da <z_set_prio+0xce>
		return b2 - b1;
   3879c:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   3879e:	2900      	cmp	r1, #0
   387a0:	dd1b      	ble.n	387da <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   387a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   387a4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   387a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   387aa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   387ac:	2001      	movs	r0, #1
   387ae:	f7ff fcaf 	bl	38110 <update_cache>
   387b2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   387b4:	480f      	ldr	r0, [pc, #60]	; (387f4 <z_set_prio+0xe8>)
   387b6:	f7fe fa2d 	bl	36c14 <z_spin_unlock_valid>
   387ba:	b940      	cbnz	r0, 387ce <z_set_prio+0xc2>
   387bc:	490e      	ldr	r1, [pc, #56]	; (387f8 <z_set_prio+0xec>)
   387be:	480f      	ldr	r0, [pc, #60]	; (387fc <z_set_prio+0xf0>)
   387c0:	22b9      	movs	r2, #185	; 0xb9
   387c2:	f004 fce0 	bl	3d186 <assert_print>
   387c6:	21b9      	movs	r1, #185	; 0xb9
   387c8:	480b      	ldr	r0, [pc, #44]	; (387f8 <z_set_prio+0xec>)
   387ca:	f004 fcd5 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   387ce:	f386 8811 	msr	BASEPRI, r6
   387d2:	f3bf 8f6f 	isb	sy
}
   387d6:	4620      	mov	r0, r4
   387d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   387da:	4283      	cmp	r3, r0
   387dc:	d002      	beq.n	387e4 <z_set_prio+0xd8>
   387de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   387e0:	2b00      	cmp	r3, #0
   387e2:	d1d7      	bne.n	38794 <z_set_prio+0x88>
	node->prev = tail;
   387e4:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   387e8:	6004      	str	r4, [r0, #0]
	list->tail = node;
   387ea:	6254      	str	r4, [r2, #36]	; 0x24
}
   387ec:	e7de      	b.n	387ac <z_set_prio+0xa0>
			thread->base.prio = prio;
   387ee:	73a5      	strb	r5, [r4, #14]
   387f0:	2400      	movs	r4, #0
   387f2:	e7df      	b.n	387b4 <z_set_prio+0xa8>
   387f4:	2001a55c 	.word	0x2001a55c
   387f8:	00044989 	.word	0x00044989
   387fc:	0004494f 	.word	0x0004494f
   38800:	2001a538 	.word	0x2001a538
   38804:	20018e10 	.word	0x20018e10
   38808:	0004c4e5 	.word	0x0004c4e5
   3880c:	2001a518 	.word	0x2001a518

00038810 <z_impl_k_thread_suspend>:
{
   38810:	b570      	push	{r4, r5, r6, lr}
   38812:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   38814:	3018      	adds	r0, #24
   38816:	f000 fc63 	bl	390e0 <z_abort_timeout>
	__asm__ volatile(
   3881a:	f04f 0320 	mov.w	r3, #32
   3881e:	f3ef 8611 	mrs	r6, BASEPRI
   38822:	f383 8812 	msr	BASEPRI_MAX, r3
   38826:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3882a:	4820      	ldr	r0, [pc, #128]	; (388ac <z_impl_k_thread_suspend+0x9c>)
   3882c:	f7fe f9e4 	bl	36bf8 <z_spin_lock_valid>
   38830:	b940      	cbnz	r0, 38844 <z_impl_k_thread_suspend+0x34>
   38832:	491f      	ldr	r1, [pc, #124]	; (388b0 <z_impl_k_thread_suspend+0xa0>)
   38834:	481f      	ldr	r0, [pc, #124]	; (388b4 <z_impl_k_thread_suspend+0xa4>)
   38836:	228e      	movs	r2, #142	; 0x8e
   38838:	f004 fca5 	bl	3d186 <assert_print>
   3883c:	218e      	movs	r1, #142	; 0x8e
   3883e:	481c      	ldr	r0, [pc, #112]	; (388b0 <z_impl_k_thread_suspend+0xa0>)
   38840:	f004 fc9a 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   38844:	4819      	ldr	r0, [pc, #100]	; (388ac <z_impl_k_thread_suspend+0x9c>)
   38846:	f7fe f9f5 	bl	36c34 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3884a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   3884e:	7b63      	ldrb	r3, [r4, #13]
   38850:	2a00      	cmp	r2, #0
   38852:	da06      	bge.n	38862 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   38858:	4621      	mov	r1, r4
   3885a:	4817      	ldr	r0, [pc, #92]	; (388b8 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3885c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3885e:	f7ff fbe1 	bl	38024 <z_priq_dumb_remove>
		update_cache(thread == _current);
   38862:	4d16      	ldr	r5, [pc, #88]	; (388bc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   38864:	7b63      	ldrb	r3, [r4, #13]
   38866:	68a8      	ldr	r0, [r5, #8]
   38868:	f043 0310 	orr.w	r3, r3, #16
   3886c:	7363      	strb	r3, [r4, #13]
   3886e:	1b03      	subs	r3, r0, r4
   38870:	4258      	negs	r0, r3
   38872:	4158      	adcs	r0, r3
   38874:	f7ff fc4c 	bl	38110 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38878:	480c      	ldr	r0, [pc, #48]	; (388ac <z_impl_k_thread_suspend+0x9c>)
   3887a:	f7fe f9cb 	bl	36c14 <z_spin_unlock_valid>
   3887e:	b940      	cbnz	r0, 38892 <z_impl_k_thread_suspend+0x82>
   38880:	490b      	ldr	r1, [pc, #44]	; (388b0 <z_impl_k_thread_suspend+0xa0>)
   38882:	480c      	ldr	r0, [pc, #48]	; (388b4 <z_impl_k_thread_suspend+0xa4>)
   38884:	22b9      	movs	r2, #185	; 0xb9
   38886:	f004 fc7e 	bl	3d186 <assert_print>
   3888a:	21b9      	movs	r1, #185	; 0xb9
   3888c:	4808      	ldr	r0, [pc, #32]	; (388b0 <z_impl_k_thread_suspend+0xa0>)
   3888e:	f004 fc73 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38892:	f386 8811 	msr	BASEPRI, r6
   38896:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3889a:	68ab      	ldr	r3, [r5, #8]
   3889c:	42a3      	cmp	r3, r4
   3889e:	d103      	bne.n	388a8 <z_impl_k_thread_suspend+0x98>
}
   388a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   388a4:	f008 bfa8 	b.w	417f8 <z_reschedule_unlocked>
}
   388a8:	bd70      	pop	{r4, r5, r6, pc}
   388aa:	bf00      	nop
   388ac:	2001a55c 	.word	0x2001a55c
   388b0:	00044989 	.word	0x00044989
   388b4:	0004494f 	.word	0x0004494f
   388b8:	2001a538 	.word	0x2001a538
   388bc:	2001a518 	.word	0x2001a518

000388c0 <k_sched_unlock>:
{
   388c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   388c2:	f04f 0320 	mov.w	r3, #32
   388c6:	f3ef 8511 	mrs	r5, BASEPRI
   388ca:	f383 8812 	msr	BASEPRI_MAX, r3
   388ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   388d2:	4824      	ldr	r0, [pc, #144]	; (38964 <k_sched_unlock+0xa4>)
   388d4:	f7fe f990 	bl	36bf8 <z_spin_lock_valid>
   388d8:	b940      	cbnz	r0, 388ec <k_sched_unlock+0x2c>
   388da:	4923      	ldr	r1, [pc, #140]	; (38968 <k_sched_unlock+0xa8>)
   388dc:	4823      	ldr	r0, [pc, #140]	; (3896c <k_sched_unlock+0xac>)
   388de:	228e      	movs	r2, #142	; 0x8e
   388e0:	f004 fc51 	bl	3d186 <assert_print>
   388e4:	218e      	movs	r1, #142	; 0x8e
   388e6:	4820      	ldr	r0, [pc, #128]	; (38968 <k_sched_unlock+0xa8>)
   388e8:	f004 fc46 	bl	3d178 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   388ec:	4c20      	ldr	r4, [pc, #128]	; (38970 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   388ee:	481d      	ldr	r0, [pc, #116]	; (38964 <k_sched_unlock+0xa4>)
   388f0:	f7fe f9a0 	bl	36c34 <z_spin_lock_set_owner>
   388f4:	68a3      	ldr	r3, [r4, #8]
   388f6:	7bdb      	ldrb	r3, [r3, #15]
   388f8:	b953      	cbnz	r3, 38910 <k_sched_unlock+0x50>
   388fa:	491e      	ldr	r1, [pc, #120]	; (38974 <k_sched_unlock+0xb4>)
   388fc:	481b      	ldr	r0, [pc, #108]	; (3896c <k_sched_unlock+0xac>)
   388fe:	f240 32bb 	movw	r2, #955	; 0x3bb
   38902:	f004 fc40 	bl	3d186 <assert_print>
   38906:	f240 31bb 	movw	r1, #955	; 0x3bb
   3890a:	481a      	ldr	r0, [pc, #104]	; (38974 <k_sched_unlock+0xb4>)
   3890c:	f004 fc34 	bl	3d178 <assert_post_action>
   38910:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   38914:	b153      	cbz	r3, 3892c <k_sched_unlock+0x6c>
   38916:	4917      	ldr	r1, [pc, #92]	; (38974 <k_sched_unlock+0xb4>)
   38918:	4814      	ldr	r0, [pc, #80]	; (3896c <k_sched_unlock+0xac>)
   3891a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
   3891e:	f004 fc32 	bl	3d186 <assert_print>
   38922:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   38926:	4813      	ldr	r0, [pc, #76]	; (38974 <k_sched_unlock+0xb4>)
   38928:	f004 fc26 	bl	3d178 <assert_post_action>
		++_current->base.sched_locked;
   3892c:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3892e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   38930:	7bd3      	ldrb	r3, [r2, #15]
   38932:	3301      	adds	r3, #1
   38934:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   38936:	f7ff fbeb 	bl	38110 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3893a:	480a      	ldr	r0, [pc, #40]	; (38964 <k_sched_unlock+0xa4>)
   3893c:	f7fe f96a 	bl	36c14 <z_spin_unlock_valid>
   38940:	b940      	cbnz	r0, 38954 <k_sched_unlock+0x94>
   38942:	4909      	ldr	r1, [pc, #36]	; (38968 <k_sched_unlock+0xa8>)
   38944:	4809      	ldr	r0, [pc, #36]	; (3896c <k_sched_unlock+0xac>)
   38946:	22b9      	movs	r2, #185	; 0xb9
   38948:	f004 fc1d 	bl	3d186 <assert_print>
   3894c:	21b9      	movs	r1, #185	; 0xb9
   3894e:	4806      	ldr	r0, [pc, #24]	; (38968 <k_sched_unlock+0xa8>)
   38950:	f004 fc12 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38954:	f385 8811 	msr	BASEPRI, r5
   38958:	f3bf 8f6f 	isb	sy
}
   3895c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   38960:	f008 bf4a 	b.w	417f8 <z_reschedule_unlocked>
   38964:	2001a55c 	.word	0x2001a55c
   38968:	00044989 	.word	0x00044989
   3896c:	0004494f 	.word	0x0004494f
   38970:	2001a518 	.word	0x2001a518
   38974:	0004c4e5 	.word	0x0004c4e5

00038978 <z_unpend_first_thread>:
{
   38978:	b538      	push	{r3, r4, r5, lr}
   3897a:	4604      	mov	r4, r0
	__asm__ volatile(
   3897c:	f04f 0320 	mov.w	r3, #32
   38980:	f3ef 8511 	mrs	r5, BASEPRI
   38984:	f383 8812 	msr	BASEPRI_MAX, r3
   38988:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3898c:	4816      	ldr	r0, [pc, #88]	; (389e8 <z_unpend_first_thread+0x70>)
   3898e:	f7fe f933 	bl	36bf8 <z_spin_lock_valid>
   38992:	b940      	cbnz	r0, 389a6 <z_unpend_first_thread+0x2e>
   38994:	4915      	ldr	r1, [pc, #84]	; (389ec <z_unpend_first_thread+0x74>)
   38996:	4816      	ldr	r0, [pc, #88]	; (389f0 <z_unpend_first_thread+0x78>)
   38998:	228e      	movs	r2, #142	; 0x8e
   3899a:	f004 fbf4 	bl	3d186 <assert_print>
   3899e:	218e      	movs	r1, #142	; 0x8e
   389a0:	4812      	ldr	r0, [pc, #72]	; (389ec <z_unpend_first_thread+0x74>)
   389a2:	f004 fbe9 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   389a6:	4810      	ldr	r0, [pc, #64]	; (389e8 <z_unpend_first_thread+0x70>)
   389a8:	f7fe f944 	bl	36c34 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   389ac:	4620      	mov	r0, r4
   389ae:	f008 ff2d 	bl	4180c <z_priq_dumb_best>
		if (thread != NULL) {
   389b2:	4604      	mov	r4, r0
   389b4:	b128      	cbz	r0, 389c2 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   389b6:	f7ff fb53 	bl	38060 <unpend_thread_no_timeout>
   389ba:	f104 0018 	add.w	r0, r4, #24
   389be:	f000 fb8f 	bl	390e0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   389c2:	4809      	ldr	r0, [pc, #36]	; (389e8 <z_unpend_first_thread+0x70>)
   389c4:	f7fe f926 	bl	36c14 <z_spin_unlock_valid>
   389c8:	b940      	cbnz	r0, 389dc <z_unpend_first_thread+0x64>
   389ca:	4908      	ldr	r1, [pc, #32]	; (389ec <z_unpend_first_thread+0x74>)
   389cc:	4808      	ldr	r0, [pc, #32]	; (389f0 <z_unpend_first_thread+0x78>)
   389ce:	22b9      	movs	r2, #185	; 0xb9
   389d0:	f004 fbd9 	bl	3d186 <assert_print>
   389d4:	21b9      	movs	r1, #185	; 0xb9
   389d6:	4805      	ldr	r0, [pc, #20]	; (389ec <z_unpend_first_thread+0x74>)
   389d8:	f004 fbce 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   389dc:	f385 8811 	msr	BASEPRI, r5
   389e0:	f3bf 8f6f 	isb	sy
}
   389e4:	4620      	mov	r0, r4
   389e6:	bd38      	pop	{r3, r4, r5, pc}
   389e8:	2001a55c 	.word	0x2001a55c
   389ec:	00044989 	.word	0x00044989
   389f0:	0004494f 	.word	0x0004494f

000389f4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   389f4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   389f6:	4b04      	ldr	r3, [pc, #16]	; (38a08 <z_sched_init+0x14>)
   389f8:	4608      	mov	r0, r1
   389fa:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   389fe:	e9c3 2208 	strd	r2, r2, [r3, #32]
   38a02:	f7ff b9fb 	b.w	37dfc <k_sched_time_slice_set>
   38a06:	bf00      	nop
   38a08:	2001a518 	.word	0x2001a518

00038a0c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   38a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38a0e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   38a12:	b153      	cbz	r3, 38a2a <z_impl_k_yield+0x1e>
   38a14:	4938      	ldr	r1, [pc, #224]	; (38af8 <z_impl_k_yield+0xec>)
   38a16:	4839      	ldr	r0, [pc, #228]	; (38afc <z_impl_k_yield+0xf0>)
   38a18:	f240 5232 	movw	r2, #1330	; 0x532
   38a1c:	f004 fbb3 	bl	3d186 <assert_print>
   38a20:	f240 5132 	movw	r1, #1330	; 0x532
   38a24:	4834      	ldr	r0, [pc, #208]	; (38af8 <z_impl_k_yield+0xec>)
   38a26:	f004 fba7 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38a2a:	f04f 0320 	mov.w	r3, #32
   38a2e:	f3ef 8611 	mrs	r6, BASEPRI
   38a32:	f383 8812 	msr	BASEPRI_MAX, r3
   38a36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38a3a:	4831      	ldr	r0, [pc, #196]	; (38b00 <z_impl_k_yield+0xf4>)
   38a3c:	f7fe f8dc 	bl	36bf8 <z_spin_lock_valid>
   38a40:	b940      	cbnz	r0, 38a54 <z_impl_k_yield+0x48>
   38a42:	4930      	ldr	r1, [pc, #192]	; (38b04 <z_impl_k_yield+0xf8>)
   38a44:	482d      	ldr	r0, [pc, #180]	; (38afc <z_impl_k_yield+0xf0>)
   38a46:	228e      	movs	r2, #142	; 0x8e
   38a48:	f004 fb9d 	bl	3d186 <assert_print>
   38a4c:	218e      	movs	r1, #142	; 0x8e
   38a4e:	482d      	ldr	r0, [pc, #180]	; (38b04 <z_impl_k_yield+0xf8>)
   38a50:	f004 fb92 	bl	3d178 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   38a54:	4d2c      	ldr	r5, [pc, #176]	; (38b08 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   38a56:	482a      	ldr	r0, [pc, #168]	; (38b00 <z_impl_k_yield+0xf4>)
   38a58:	f7fe f8ec 	bl	36c34 <z_spin_lock_set_owner>
   38a5c:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   38a5e:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38a62:	7b4b      	ldrb	r3, [r1, #13]
   38a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38a68:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38a6a:	f7ff fadb 	bl	38024 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   38a6e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   38a70:	7b63      	ldrb	r3, [r4, #13]
   38a72:	f063 037f 	orn	r3, r3, #127	; 0x7f
   38a76:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38a78:	4b24      	ldr	r3, [pc, #144]	; (38b0c <z_impl_k_yield+0x100>)
   38a7a:	429c      	cmp	r4, r3
   38a7c:	d108      	bne.n	38a90 <z_impl_k_yield+0x84>
   38a7e:	491e      	ldr	r1, [pc, #120]	; (38af8 <z_impl_k_yield+0xec>)
   38a80:	481e      	ldr	r0, [pc, #120]	; (38afc <z_impl_k_yield+0xf0>)
   38a82:	22ba      	movs	r2, #186	; 0xba
   38a84:	f004 fb7f 	bl	3d186 <assert_print>
   38a88:	21ba      	movs	r1, #186	; 0xba
   38a8a:	481b      	ldr	r0, [pc, #108]	; (38af8 <z_impl_k_yield+0xec>)
   38a8c:	f004 fb74 	bl	3d178 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   38a90:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38a94:	481e      	ldr	r0, [pc, #120]	; (38b10 <z_impl_k_yield+0x104>)
   38a96:	4283      	cmp	r3, r0
   38a98:	d028      	beq.n	38aec <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38a9a:	b33b      	cbz	r3, 38aec <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   38a9c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   38aa0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   38aa4:	4297      	cmp	r7, r2
   38aa6:	d01c      	beq.n	38ae2 <z_impl_k_yield+0xd6>
		return b2 - b1;
   38aa8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   38aaa:	2a00      	cmp	r2, #0
   38aac:	dd19      	ble.n	38ae2 <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   38aae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38ab0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   38ab4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38ab6:	605c      	str	r4, [r3, #4]
	update_cache(1);
   38ab8:	2001      	movs	r0, #1
   38aba:	f7ff fb29 	bl	38110 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38abe:	4810      	ldr	r0, [pc, #64]	; (38b00 <z_impl_k_yield+0xf4>)
   38ac0:	f7fe f8a8 	bl	36c14 <z_spin_unlock_valid>
   38ac4:	b940      	cbnz	r0, 38ad8 <z_impl_k_yield+0xcc>
   38ac6:	490f      	ldr	r1, [pc, #60]	; (38b04 <z_impl_k_yield+0xf8>)
   38ac8:	480c      	ldr	r0, [pc, #48]	; (38afc <z_impl_k_yield+0xf0>)
   38aca:	22d0      	movs	r2, #208	; 0xd0
   38acc:	f004 fb5b 	bl	3d186 <assert_print>
   38ad0:	21d0      	movs	r1, #208	; 0xd0
   38ad2:	480c      	ldr	r0, [pc, #48]	; (38b04 <z_impl_k_yield+0xf8>)
   38ad4:	f004 fb50 	bl	3d178 <assert_post_action>
   38ad8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   38ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   38ade:	f7ea bb55 	b.w	2318c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   38ae2:	428b      	cmp	r3, r1
   38ae4:	d002      	beq.n	38aec <z_impl_k_yield+0xe0>
   38ae6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38ae8:	2b00      	cmp	r3, #0
   38aea:	d1d9      	bne.n	38aa0 <z_impl_k_yield+0x94>
	node->prev = tail;
   38aec:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   38af0:	600c      	str	r4, [r1, #0]
	list->tail = node;
   38af2:	626c      	str	r4, [r5, #36]	; 0x24
}
   38af4:	e7e0      	b.n	38ab8 <z_impl_k_yield+0xac>
   38af6:	bf00      	nop
   38af8:	0004c4e5 	.word	0x0004c4e5
   38afc:	0004494f 	.word	0x0004494f
   38b00:	2001a55c 	.word	0x2001a55c
   38b04:	00044989 	.word	0x00044989
   38b08:	2001a518 	.word	0x2001a518
   38b0c:	20018e10 	.word	0x20018e10
   38b10:	2001a538 	.word	0x2001a538

00038b14 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   38b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38b18:	4605      	mov	r5, r0
   38b1a:	460e      	mov	r6, r1
   38b1c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   38b20:	b153      	cbz	r3, 38b38 <z_tick_sleep+0x24>
   38b22:	493a      	ldr	r1, [pc, #232]	; (38c0c <z_tick_sleep+0xf8>)
   38b24:	483a      	ldr	r0, [pc, #232]	; (38c10 <z_tick_sleep+0xfc>)
   38b26:	f240 524e 	movw	r2, #1358	; 0x54e
   38b2a:	f004 fb2c 	bl	3d186 <assert_print>
   38b2e:	f240 514e 	movw	r1, #1358	; 0x54e
   38b32:	4836      	ldr	r0, [pc, #216]	; (38c0c <z_tick_sleep+0xf8>)
   38b34:	f004 fb20 	bl	3d178 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   38b38:	ea55 0306 	orrs.w	r3, r5, r6
   38b3c:	d103      	bne.n	38b46 <z_tick_sleep+0x32>
	z_impl_k_yield();
   38b3e:	f7ff ff65 	bl	38a0c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   38b42:	2000      	movs	r0, #0
   38b44:	e05f      	b.n	38c06 <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   38b46:	f06f 0401 	mvn.w	r4, #1
   38b4a:	f04f 33ff 	mov.w	r3, #4294967295
   38b4e:	1b64      	subs	r4, r4, r5
   38b50:	eb63 0306 	sbc.w	r3, r3, r6
   38b54:	2c01      	cmp	r4, #1
   38b56:	f173 0300 	sbcs.w	r3, r3, #0
   38b5a:	da02      	bge.n	38b62 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   38b5c:	f008 fe6c 	bl	41838 <sys_clock_tick_get_32>
   38b60:	1944      	adds	r4, r0, r5
   38b62:	f04f 0320 	mov.w	r3, #32
   38b66:	f3ef 8811 	mrs	r8, BASEPRI
   38b6a:	f383 8812 	msr	BASEPRI_MAX, r3
   38b6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38b72:	4828      	ldr	r0, [pc, #160]	; (38c14 <z_tick_sleep+0x100>)
   38b74:	f7fe f840 	bl	36bf8 <z_spin_lock_valid>
   38b78:	b940      	cbnz	r0, 38b8c <z_tick_sleep+0x78>
   38b7a:	4927      	ldr	r1, [pc, #156]	; (38c18 <z_tick_sleep+0x104>)
   38b7c:	4824      	ldr	r0, [pc, #144]	; (38c10 <z_tick_sleep+0xfc>)
   38b7e:	228e      	movs	r2, #142	; 0x8e
   38b80:	f004 fb01 	bl	3d186 <assert_print>
   38b84:	218e      	movs	r1, #142	; 0x8e
   38b86:	4824      	ldr	r0, [pc, #144]	; (38c18 <z_tick_sleep+0x104>)
   38b88:	f004 faf6 	bl	3d178 <assert_post_action>
	pending_current = _current;
   38b8c:	4f23      	ldr	r7, [pc, #140]	; (38c1c <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   38b8e:	4821      	ldr	r0, [pc, #132]	; (38c14 <z_tick_sleep+0x100>)
   38b90:	f7fe f850 	bl	36c34 <z_spin_lock_set_owner>
   38b94:	68b8      	ldr	r0, [r7, #8]
   38b96:	4b22      	ldr	r3, [pc, #136]	; (38c20 <z_tick_sleep+0x10c>)
   38b98:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   38b9a:	f7ff fced 	bl	38578 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   38b9e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   38ba0:	462a      	mov	r2, r5
   38ba2:	4633      	mov	r3, r6
   38ba4:	3018      	adds	r0, #24
   38ba6:	491f      	ldr	r1, [pc, #124]	; (38c24 <z_tick_sleep+0x110>)
   38ba8:	f000 f9ec 	bl	38f84 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   38bac:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38bae:	4819      	ldr	r0, [pc, #100]	; (38c14 <z_tick_sleep+0x100>)
   38bb0:	7b53      	ldrb	r3, [r2, #13]
   38bb2:	f043 0310 	orr.w	r3, r3, #16
   38bb6:	7353      	strb	r3, [r2, #13]
   38bb8:	f7fe f82c 	bl	36c14 <z_spin_unlock_valid>
   38bbc:	b940      	cbnz	r0, 38bd0 <z_tick_sleep+0xbc>
   38bbe:	4916      	ldr	r1, [pc, #88]	; (38c18 <z_tick_sleep+0x104>)
   38bc0:	4813      	ldr	r0, [pc, #76]	; (38c10 <z_tick_sleep+0xfc>)
   38bc2:	22d0      	movs	r2, #208	; 0xd0
   38bc4:	f004 fadf 	bl	3d186 <assert_print>
   38bc8:	21d0      	movs	r1, #208	; 0xd0
   38bca:	4813      	ldr	r0, [pc, #76]	; (38c18 <z_tick_sleep+0x104>)
   38bcc:	f004 fad4 	bl	3d178 <assert_post_action>
   38bd0:	4640      	mov	r0, r8
   38bd2:	f7ea fadb 	bl	2318c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   38bd6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   38bd8:	7b5b      	ldrb	r3, [r3, #13]
   38bda:	06db      	lsls	r3, r3, #27
   38bdc:	d50a      	bpl.n	38bf4 <z_tick_sleep+0xe0>
   38bde:	490b      	ldr	r1, [pc, #44]	; (38c0c <z_tick_sleep+0xf8>)
   38be0:	480b      	ldr	r0, [pc, #44]	; (38c10 <z_tick_sleep+0xfc>)
   38be2:	f240 526f 	movw	r2, #1391	; 0x56f
   38be6:	f004 face 	bl	3d186 <assert_print>
   38bea:	f240 516f 	movw	r1, #1391	; 0x56f
   38bee:	4807      	ldr	r0, [pc, #28]	; (38c0c <z_tick_sleep+0xf8>)
   38bf0:	f004 fac2 	bl	3d178 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   38bf4:	f008 fe20 	bl	41838 <sys_clock_tick_get_32>
   38bf8:	1a20      	subs	r0, r4, r0
   38bfa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   38bfe:	2801      	cmp	r0, #1
   38c00:	f173 0300 	sbcs.w	r3, r3, #0
   38c04:	db9d      	blt.n	38b42 <z_tick_sleep+0x2e>
}
   38c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38c0a:	bf00      	nop
   38c0c:	0004c4e5 	.word	0x0004c4e5
   38c10:	0004494f 	.word	0x0004494f
   38c14:	2001a55c 	.word	0x2001a55c
   38c18:	00044989 	.word	0x00044989
   38c1c:	2001a518 	.word	0x2001a518
   38c20:	2001a558 	.word	0x2001a558
   38c24:	000384e5 	.word	0x000384e5

00038c28 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   38c28:	b538      	push	{r3, r4, r5, lr}
   38c2a:	4605      	mov	r5, r0
   38c2c:	460c      	mov	r4, r1
   38c2e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   38c32:	b153      	cbz	r3, 38c4a <z_impl_k_sleep+0x22>
   38c34:	4911      	ldr	r1, [pc, #68]	; (38c7c <z_impl_k_sleep+0x54>)
   38c36:	4812      	ldr	r0, [pc, #72]	; (38c80 <z_impl_k_sleep+0x58>)
   38c38:	f240 527e 	movw	r2, #1406	; 0x57e
   38c3c:	f004 faa3 	bl	3d186 <assert_print>
   38c40:	f240 517e 	movw	r1, #1406	; 0x57e
   38c44:	480d      	ldr	r0, [pc, #52]	; (38c7c <z_impl_k_sleep+0x54>)
   38c46:	f004 fa97 	bl	3d178 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38c4a:	f1b4 3fff 	cmp.w	r4, #4294967295
   38c4e:	bf08      	it	eq
   38c50:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   38c54:	d106      	bne.n	38c64 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   38c56:	4b0b      	ldr	r3, [pc, #44]	; (38c84 <z_impl_k_sleep+0x5c>)
   38c58:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   38c5a:	f7ff fdd9 	bl	38810 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   38c5e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   38c62:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   38c64:	4628      	mov	r0, r5
   38c66:	4621      	mov	r1, r4
   38c68:	f7ff ff54 	bl	38b14 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   38c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   38c70:	fb80 0303 	smull	r0, r3, r0, r3
   38c74:	0bc0      	lsrs	r0, r0, #15
   38c76:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   38c7a:	e7f2      	b.n	38c62 <z_impl_k_sleep+0x3a>
   38c7c:	0004c4e5 	.word	0x0004c4e5
   38c80:	0004494f 	.word	0x0004494f
   38c84:	2001a518 	.word	0x2001a518

00038c88 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   38c88:	4b01      	ldr	r3, [pc, #4]	; (38c90 <z_impl_z_current_get+0x8>)
   38c8a:	6898      	ldr	r0, [r3, #8]
   38c8c:	4770      	bx	lr
   38c8e:	bf00      	nop
   38c90:	2001a518 	.word	0x2001a518

00038c94 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   38c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38c98:	4604      	mov	r4, r0
   38c9a:	f04f 0320 	mov.w	r3, #32
   38c9e:	f3ef 8611 	mrs	r6, BASEPRI
   38ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   38ca6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38caa:	483e      	ldr	r0, [pc, #248]	; (38da4 <z_thread_abort+0x110>)
   38cac:	f7fd ffa4 	bl	36bf8 <z_spin_lock_valid>
   38cb0:	b940      	cbnz	r0, 38cc4 <z_thread_abort+0x30>
   38cb2:	493d      	ldr	r1, [pc, #244]	; (38da8 <z_thread_abort+0x114>)
   38cb4:	483d      	ldr	r0, [pc, #244]	; (38dac <z_thread_abort+0x118>)
   38cb6:	228e      	movs	r2, #142	; 0x8e
   38cb8:	f004 fa65 	bl	3d186 <assert_print>
   38cbc:	218e      	movs	r1, #142	; 0x8e
   38cbe:	483a      	ldr	r0, [pc, #232]	; (38da8 <z_thread_abort+0x114>)
   38cc0:	f004 fa5a 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   38cc4:	4837      	ldr	r0, [pc, #220]	; (38da4 <z_thread_abort+0x110>)
   38cc6:	f7fd ffb5 	bl	36c34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   38cca:	7b63      	ldrb	r3, [r4, #13]
   38ccc:	071a      	lsls	r2, r3, #28
   38cce:	d512      	bpl.n	38cf6 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38cd0:	4834      	ldr	r0, [pc, #208]	; (38da4 <z_thread_abort+0x110>)
   38cd2:	f7fd ff9f 	bl	36c14 <z_spin_unlock_valid>
   38cd6:	b940      	cbnz	r0, 38cea <z_thread_abort+0x56>
   38cd8:	4933      	ldr	r1, [pc, #204]	; (38da8 <z_thread_abort+0x114>)
   38cda:	4834      	ldr	r0, [pc, #208]	; (38dac <z_thread_abort+0x118>)
   38cdc:	22b9      	movs	r2, #185	; 0xb9
   38cde:	f004 fa52 	bl	3d186 <assert_print>
   38ce2:	21b9      	movs	r1, #185	; 0xb9
   38ce4:	4830      	ldr	r0, [pc, #192]	; (38da8 <z_thread_abort+0x114>)
   38ce6:	f004 fa47 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38cea:	f386 8811 	msr	BASEPRI, r6
   38cee:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   38cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   38cf6:	f023 0220 	bic.w	r2, r3, #32
   38cfa:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   38cfe:	09d2      	lsrs	r2, r2, #7
   38d00:	d138      	bne.n	38d74 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   38d02:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   38d04:	68a3      	ldr	r3, [r4, #8]
   38d06:	b113      	cbz	r3, 38d0e <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   38d08:	4620      	mov	r0, r4
   38d0a:	f7ff f9a9 	bl	38060 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   38d0e:	f104 0018 	add.w	r0, r4, #24
   38d12:	f000 f9e5 	bl	390e0 <z_abort_timeout>
   38d16:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   38d1a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   38d1e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38d20:	42bd      	cmp	r5, r7
   38d22:	d000      	beq.n	38d26 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   38d24:	bb85      	cbnz	r5, 38d88 <z_thread_abort+0xf4>
		update_cache(1);
   38d26:	2001      	movs	r0, #1
   38d28:	f7ff f9f2 	bl	38110 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   38d2c:	4b20      	ldr	r3, [pc, #128]	; (38db0 <z_thread_abort+0x11c>)
   38d2e:	689b      	ldr	r3, [r3, #8]
   38d30:	42a3      	cmp	r3, r4
   38d32:	d1cd      	bne.n	38cd0 <z_thread_abort+0x3c>
   38d34:	f3ef 8305 	mrs	r3, IPSR
   38d38:	2b00      	cmp	r3, #0
   38d3a:	d1c9      	bne.n	38cd0 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d3c:	4819      	ldr	r0, [pc, #100]	; (38da4 <z_thread_abort+0x110>)
   38d3e:	f7fd ff69 	bl	36c14 <z_spin_unlock_valid>
   38d42:	b940      	cbnz	r0, 38d56 <z_thread_abort+0xc2>
   38d44:	4918      	ldr	r1, [pc, #96]	; (38da8 <z_thread_abort+0x114>)
   38d46:	4819      	ldr	r0, [pc, #100]	; (38dac <z_thread_abort+0x118>)
   38d48:	22d0      	movs	r2, #208	; 0xd0
   38d4a:	f004 fa1c 	bl	3d186 <assert_print>
   38d4e:	21d0      	movs	r1, #208	; 0xd0
   38d50:	4815      	ldr	r0, [pc, #84]	; (38da8 <z_thread_abort+0x114>)
   38d52:	f004 fa11 	bl	3d178 <assert_post_action>
   38d56:	4630      	mov	r0, r6
   38d58:	f7ea fa18 	bl	2318c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   38d5c:	f240 62ac 	movw	r2, #1708	; 0x6ac
   38d60:	4914      	ldr	r1, [pc, #80]	; (38db4 <z_thread_abort+0x120>)
   38d62:	4812      	ldr	r0, [pc, #72]	; (38dac <z_thread_abort+0x118>)
   38d64:	f004 fa0f 	bl	3d186 <assert_print>
   38d68:	f240 61ac 	movw	r1, #1708	; 0x6ac
   38d6c:	4811      	ldr	r0, [pc, #68]	; (38db4 <z_thread_abort+0x120>)
   38d6e:	f004 fa03 	bl	3d178 <assert_post_action>
   38d72:	e7ad      	b.n	38cd0 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38d74:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   38d78:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   38d7c:	4621      	mov	r1, r4
   38d7e:	480e      	ldr	r0, [pc, #56]	; (38db8 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38d80:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38d82:	f7ff f94f 	bl	38024 <z_priq_dumb_remove>
}
   38d86:	e7bd      	b.n	38d04 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   38d88:	4628      	mov	r0, r5
   38d8a:	f7ff f969 	bl	38060 <unpend_thread_no_timeout>
   38d8e:	f105 0018 	add.w	r0, r5, #24
   38d92:	f000 f9a5 	bl	390e0 <z_abort_timeout>
		ready_thread(thread);
   38d96:	4628      	mov	r0, r5
   38d98:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
   38d9c:	f7ff fa9e 	bl	382dc <ready_thread>
   38da0:	e7bd      	b.n	38d1e <z_thread_abort+0x8a>
   38da2:	bf00      	nop
   38da4:	2001a55c 	.word	0x2001a55c
   38da8:	00044989 	.word	0x00044989
   38dac:	0004494f 	.word	0x0004494f
   38db0:	2001a518 	.word	0x2001a518
   38db4:	0004c4e5 	.word	0x0004c4e5
   38db8:	2001a538 	.word	0x2001a538

00038dbc <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   38dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38dbe:	4604      	mov	r4, r0
   38dc0:	460e      	mov	r6, r1
   38dc2:	4615      	mov	r5, r2
	__asm__ volatile(
   38dc4:	f04f 0320 	mov.w	r3, #32
   38dc8:	f3ef 8711 	mrs	r7, BASEPRI
   38dcc:	f383 8812 	msr	BASEPRI_MAX, r3
   38dd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38dd4:	481a      	ldr	r0, [pc, #104]	; (38e40 <z_sched_wake+0x84>)
   38dd6:	f7fd ff0f 	bl	36bf8 <z_spin_lock_valid>
   38dda:	b940      	cbnz	r0, 38dee <z_sched_wake+0x32>
   38ddc:	4919      	ldr	r1, [pc, #100]	; (38e44 <z_sched_wake+0x88>)
   38dde:	481a      	ldr	r0, [pc, #104]	; (38e48 <z_sched_wake+0x8c>)
   38de0:	228e      	movs	r2, #142	; 0x8e
   38de2:	f004 f9d0 	bl	3d186 <assert_print>
   38de6:	218e      	movs	r1, #142	; 0x8e
   38de8:	4816      	ldr	r0, [pc, #88]	; (38e44 <z_sched_wake+0x88>)
   38dea:	f004 f9c5 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   38dee:	4814      	ldr	r0, [pc, #80]	; (38e40 <z_sched_wake+0x84>)
   38df0:	f7fd ff20 	bl	36c34 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   38df4:	4620      	mov	r0, r4
   38df6:	f008 fd09 	bl	4180c <z_priq_dumb_best>

		if (thread != NULL) {
   38dfa:	4604      	mov	r4, r0
   38dfc:	b160      	cbz	r0, 38e18 <z_sched_wake+0x5c>
   38dfe:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   38e02:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   38e04:	f7ff f92c 	bl	38060 <unpend_thread_no_timeout>
   38e08:	f104 0018 	add.w	r0, r4, #24
   38e0c:	f000 f968 	bl	390e0 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   38e10:	4620      	mov	r0, r4
   38e12:	f7ff fa63 	bl	382dc <ready_thread>
			ret = true;
   38e16:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38e18:	4809      	ldr	r0, [pc, #36]	; (38e40 <z_sched_wake+0x84>)
   38e1a:	f7fd fefb 	bl	36c14 <z_spin_unlock_valid>
   38e1e:	b940      	cbnz	r0, 38e32 <z_sched_wake+0x76>
   38e20:	4908      	ldr	r1, [pc, #32]	; (38e44 <z_sched_wake+0x88>)
   38e22:	4809      	ldr	r0, [pc, #36]	; (38e48 <z_sched_wake+0x8c>)
   38e24:	22b9      	movs	r2, #185	; 0xb9
   38e26:	f004 f9ae 	bl	3d186 <assert_print>
   38e2a:	21b9      	movs	r1, #185	; 0xb9
   38e2c:	4805      	ldr	r0, [pc, #20]	; (38e44 <z_sched_wake+0x88>)
   38e2e:	f004 f9a3 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   38e32:	f387 8811 	msr	BASEPRI, r7
   38e36:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   38e3a:	4620      	mov	r0, r4
   38e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38e3e:	bf00      	nop
   38e40:	2001a55c 	.word	0x2001a55c
   38e44:	00044989 	.word	0x00044989
   38e48:	0004494f 	.word	0x0004494f

00038e4c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   38e4c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   38e4e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   38e52:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   38e54:	e9cd 6700 	strd	r6, r7, [sp]
   38e58:	f7ff fc32 	bl	386c0 <z_pend_curr>

	if (data != NULL) {
   38e5c:	b11c      	cbz	r4, 38e66 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   38e5e:	4b03      	ldr	r3, [pc, #12]	; (38e6c <z_sched_wait+0x20>)
   38e60:	689b      	ldr	r3, [r3, #8]
   38e62:	695b      	ldr	r3, [r3, #20]
   38e64:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   38e66:	b002      	add	sp, #8
   38e68:	bdd0      	pop	{r4, r6, r7, pc}
   38e6a:	bf00      	nop
   38e6c:	2001a518 	.word	0x2001a518

00038e70 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   38e70:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   38e72:	4806      	ldr	r0, [pc, #24]	; (38e8c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   38e74:	4a06      	ldr	r2, [pc, #24]	; (38e90 <z_data_copy+0x20>)
   38e76:	4907      	ldr	r1, [pc, #28]	; (38e94 <z_data_copy+0x24>)
   38e78:	1a12      	subs	r2, r2, r0
   38e7a:	f008 fbf6 	bl	4166a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   38e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   38e82:	4a05      	ldr	r2, [pc, #20]	; (38e98 <z_data_copy+0x28>)
   38e84:	4905      	ldr	r1, [pc, #20]	; (38e9c <z_data_copy+0x2c>)
   38e86:	4806      	ldr	r0, [pc, #24]	; (38ea0 <z_data_copy+0x30>)
   38e88:	f008 bbef 	b.w	4166a <z_early_memcpy>
   38e8c:	20014500 	.word	0x20014500
   38e90:	2001514c 	.word	0x2001514c
   38e94:	0004c970 	.word	0x0004c970
   38e98:	00000000 	.word	0x00000000
   38e9c:	0004c958 	.word	0x0004c958
   38ea0:	20014500 	.word	0x20014500

00038ea4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   38ea4:	4b03      	ldr	r3, [pc, #12]	; (38eb4 <elapsed+0x10>)
   38ea6:	681b      	ldr	r3, [r3, #0]
   38ea8:	b90b      	cbnz	r3, 38eae <elapsed+0xa>
   38eaa:	f7ec be65 	b.w	25b78 <sys_clock_elapsed>
}
   38eae:	2000      	movs	r0, #0
   38eb0:	4770      	bx	lr
   38eb2:	bf00      	nop
   38eb4:	2001a568 	.word	0x2001a568

00038eb8 <next_timeout>:
	return list->head == list;
   38eb8:	4b10      	ldr	r3, [pc, #64]	; (38efc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   38eba:	b510      	push	{r4, lr}
   38ebc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38ebe:	429c      	cmp	r4, r3
   38ec0:	bf08      	it	eq
   38ec2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   38ec4:	f7ff ffee 	bl	38ea4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   38ec8:	b1a4      	cbz	r4, 38ef4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   38eca:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   38ece:	1a1b      	subs	r3, r3, r0
   38ed0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   38ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   38ed8:	f170 0200 	sbcs.w	r2, r0, #0
   38edc:	da0a      	bge.n	38ef4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   38ede:	2800      	cmp	r0, #0
   38ee0:	bfac      	ite	ge
   38ee2:	4618      	movge	r0, r3
   38ee4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   38ee6:	4b06      	ldr	r3, [pc, #24]	; (38f00 <next_timeout+0x48>)
   38ee8:	691b      	ldr	r3, [r3, #16]
   38eea:	b113      	cbz	r3, 38ef2 <next_timeout+0x3a>
   38eec:	4298      	cmp	r0, r3
   38eee:	bfa8      	it	ge
   38ef0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   38ef2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   38ef4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   38ef8:	e7f5      	b.n	38ee6 <next_timeout+0x2e>
   38efa:	bf00      	nop
   38efc:	20014a64 	.word	0x20014a64
   38f00:	2001a518 	.word	0x2001a518

00038f04 <remove_timeout>:
{
   38f04:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   38f06:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   38f08:	b168      	cbz	r0, 38f26 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   38f0a:	4a0a      	ldr	r2, [pc, #40]	; (38f34 <remove_timeout+0x30>)
   38f0c:	6852      	ldr	r2, [r2, #4]
   38f0e:	4290      	cmp	r0, r2
   38f10:	d009      	beq.n	38f26 <remove_timeout+0x22>
	if (next(t) != NULL) {
   38f12:	b143      	cbz	r3, 38f26 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   38f14:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   38f18:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   38f1c:	1912      	adds	r2, r2, r4
   38f1e:	eb41 0105 	adc.w	r1, r1, r5
   38f22:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   38f26:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   38f28:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   38f2a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   38f2c:	2300      	movs	r3, #0
	node->prev = NULL;
   38f2e:	e9c0 3300 	strd	r3, r3, [r0]
}
   38f32:	bd30      	pop	{r4, r5, pc}
   38f34:	20014a64 	.word	0x20014a64

00038f38 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   38f38:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   38f3a:	6804      	ldr	r4, [r0, #0]
   38f3c:	b1e4      	cbz	r4, 38f78 <timeout_rem+0x40>
	return list->head == list;
   38f3e:	4a10      	ldr	r2, [pc, #64]	; (38f80 <timeout_rem+0x48>)
   38f40:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38f42:	4293      	cmp	r3, r2
   38f44:	d015      	beq.n	38f72 <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   38f46:	2400      	movs	r4, #0
   38f48:	4625      	mov	r5, r4
   38f4a:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   38f4c:	b933      	cbnz	r3, 38f5c <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   38f4e:	f7ff ffa9 	bl	38ea4 <elapsed>
   38f52:	4601      	mov	r1, r0
   38f54:	1a20      	subs	r0, r4, r0
   38f56:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   38f5a:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   38f5c:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   38f60:	18a4      	adds	r4, r4, r2
   38f62:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   38f66:	4283      	cmp	r3, r0
   38f68:	d0f1      	beq.n	38f4e <timeout_rem+0x16>
   38f6a:	428b      	cmp	r3, r1
   38f6c:	d0ef      	beq.n	38f4e <timeout_rem+0x16>
   38f6e:	681b      	ldr	r3, [r3, #0]
   38f70:	e7ec      	b.n	38f4c <timeout_rem+0x14>
   38f72:	2400      	movs	r4, #0
   38f74:	4625      	mov	r5, r4
   38f76:	e7ea      	b.n	38f4e <timeout_rem+0x16>
		return 0;
   38f78:	4620      	mov	r0, r4
   38f7a:	4621      	mov	r1, r4
   38f7c:	e7ed      	b.n	38f5a <timeout_rem+0x22>
   38f7e:	bf00      	nop
   38f80:	20014a64 	.word	0x20014a64

00038f84 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38f84:	f1b3 3fff 	cmp.w	r3, #4294967295
   38f88:	bf08      	it	eq
   38f8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   38f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38f92:	4604      	mov	r4, r0
   38f94:	460e      	mov	r6, r1
   38f96:	4698      	mov	r8, r3
   38f98:	4615      	mov	r5, r2
   38f9a:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38f9c:	f000 8090 	beq.w	390c0 <z_add_timeout+0x13c>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   38fa0:	6803      	ldr	r3, [r0, #0]
   38fa2:	b143      	cbz	r3, 38fb6 <z_add_timeout+0x32>
   38fa4:	4947      	ldr	r1, [pc, #284]	; (390c4 <z_add_timeout+0x140>)
   38fa6:	4848      	ldr	r0, [pc, #288]	; (390c8 <z_add_timeout+0x144>)
   38fa8:	2263      	movs	r2, #99	; 0x63
   38faa:	f004 f8ec 	bl	3d186 <assert_print>
   38fae:	2163      	movs	r1, #99	; 0x63
   38fb0:	4844      	ldr	r0, [pc, #272]	; (390c4 <z_add_timeout+0x140>)
   38fb2:	f004 f8e1 	bl	3d178 <assert_post_action>
	to->fn = fn;
   38fb6:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   38fb8:	f04f 0320 	mov.w	r3, #32
   38fbc:	f3ef 8611 	mrs	r6, BASEPRI
   38fc0:	f383 8812 	msr	BASEPRI_MAX, r3
   38fc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38fc8:	4840      	ldr	r0, [pc, #256]	; (390cc <z_add_timeout+0x148>)
   38fca:	f7fd fe15 	bl	36bf8 <z_spin_lock_valid>
   38fce:	b940      	cbnz	r0, 38fe2 <z_add_timeout+0x5e>
   38fd0:	493f      	ldr	r1, [pc, #252]	; (390d0 <z_add_timeout+0x14c>)
   38fd2:	483d      	ldr	r0, [pc, #244]	; (390c8 <z_add_timeout+0x144>)
   38fd4:	228e      	movs	r2, #142	; 0x8e
   38fd6:	f004 f8d6 	bl	3d186 <assert_print>
   38fda:	218e      	movs	r1, #142	; 0x8e
   38fdc:	483c      	ldr	r0, [pc, #240]	; (390d0 <z_add_timeout+0x14c>)
   38fde:	f004 f8cb 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   38fe2:	483a      	ldr	r0, [pc, #232]	; (390cc <z_add_timeout+0x148>)
   38fe4:	f7fd fe26 	bl	36c34 <z_spin_lock_set_owner>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   38fe8:	f06f 0201 	mvn.w	r2, #1
   38fec:	f04f 30ff 	mov.w	r0, #4294967295
   38ff0:	1b53      	subs	r3, r2, r5
   38ff2:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   38ff6:	2b00      	cmp	r3, #0
   38ff8:	db1b      	blt.n	39032 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   38ffa:	4b36      	ldr	r3, [pc, #216]	; (390d4 <z_add_timeout+0x150>)
   38ffc:	e9d3 1300 	ldrd	r1, r3, [r3]
   39000:	1a52      	subs	r2, r2, r1
   39002:	eb60 0303 	sbc.w	r3, r0, r3
   39006:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   39008:	eb63 0707 	sbc.w	r7, r3, r7
   3900c:	2d01      	cmp	r5, #1
   3900e:	f177 0300 	sbcs.w	r3, r7, #0
   39012:	bfbc      	itt	lt
   39014:	2501      	movlt	r5, #1
   39016:	2700      	movlt	r7, #0
   39018:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   3901c:	4a2e      	ldr	r2, [pc, #184]	; (390d8 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   3901e:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39022:	4293      	cmp	r3, r2
   39024:	d118      	bne.n	39058 <z_add_timeout+0xd4>
	node->prev = tail;
   39026:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   3902a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   3902e:	6054      	str	r4, [r2, #4]
}
   39030:	e026      	b.n	39080 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   39032:	f7ff ff37 	bl	38ea4 <elapsed>
   39036:	3501      	adds	r5, #1
   39038:	f148 0800 	adc.w	r8, r8, #0
   3903c:	182d      	adds	r5, r5, r0
   3903e:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   39042:	e9c4 5004 	strd	r5, r0, [r4, #16]
   39046:	e7e9      	b.n	3901c <z_add_timeout+0x98>
			to->dticks -= t->dticks;
   39048:	1a09      	subs	r1, r1, r0
   3904a:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   3904e:	459c      	cmp	ip, r3
   39050:	e9c4 1504 	strd	r1, r5, [r4, #16]
   39054:	d0e7      	beq.n	39026 <z_add_timeout+0xa2>
   39056:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   39058:	2b00      	cmp	r3, #0
   3905a:	d0e4      	beq.n	39026 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   3905c:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   39060:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   39064:	4281      	cmp	r1, r0
   39066:	eb75 0e07 	sbcs.w	lr, r5, r7
   3906a:	daed      	bge.n	39048 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   3906c:	1a41      	subs	r1, r0, r1
   3906e:	eb67 0505 	sbc.w	r5, r7, r5
   39072:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   39076:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   39078:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   3907c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3907e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   39080:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39082:	4293      	cmp	r3, r2
   39084:	d00b      	beq.n	3909e <z_add_timeout+0x11a>
		if (to == first()) {
   39086:	429c      	cmp	r4, r3
   39088:	d109      	bne.n	3909e <z_add_timeout+0x11a>
			int32_t next_time = next_timeout();
   3908a:	f7ff ff15 	bl	38eb8 <next_timeout>
			if (next_time == 0 ||
   3908e:	b118      	cbz	r0, 39098 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   39090:	4b12      	ldr	r3, [pc, #72]	; (390dc <z_add_timeout+0x158>)
			if (next_time == 0 ||
   39092:	691b      	ldr	r3, [r3, #16]
   39094:	4283      	cmp	r3, r0
   39096:	d002      	beq.n	3909e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   39098:	2100      	movs	r1, #0
   3909a:	f7ec fd3d 	bl	25b18 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3909e:	480b      	ldr	r0, [pc, #44]	; (390cc <z_add_timeout+0x148>)
   390a0:	f7fd fdb8 	bl	36c14 <z_spin_unlock_valid>
   390a4:	b940      	cbnz	r0, 390b8 <z_add_timeout+0x134>
   390a6:	490a      	ldr	r1, [pc, #40]	; (390d0 <z_add_timeout+0x14c>)
   390a8:	4807      	ldr	r0, [pc, #28]	; (390c8 <z_add_timeout+0x144>)
   390aa:	22b9      	movs	r2, #185	; 0xb9
   390ac:	f004 f86b 	bl	3d186 <assert_print>
   390b0:	21b9      	movs	r1, #185	; 0xb9
   390b2:	4807      	ldr	r0, [pc, #28]	; (390d0 <z_add_timeout+0x14c>)
   390b4:	f004 f860 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   390b8:	f386 8811 	msr	BASEPRI, r6
   390bc:	f3bf 8f6f 	isb	sy
}
   390c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   390c4:	0004c507 	.word	0x0004c507
   390c8:	0004494f 	.word	0x0004494f
   390cc:	2001a56c 	.word	0x2001a56c
   390d0:	00044989 	.word	0x00044989
   390d4:	20018fb0 	.word	0x20018fb0
   390d8:	20014a64 	.word	0x20014a64
   390dc:	2001a518 	.word	0x2001a518

000390e0 <z_abort_timeout>:
{
   390e0:	b538      	push	{r3, r4, r5, lr}
   390e2:	4604      	mov	r4, r0
	__asm__ volatile(
   390e4:	f04f 0320 	mov.w	r3, #32
   390e8:	f3ef 8511 	mrs	r5, BASEPRI
   390ec:	f383 8812 	msr	BASEPRI_MAX, r3
   390f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   390f4:	4815      	ldr	r0, [pc, #84]	; (3914c <z_abort_timeout+0x6c>)
   390f6:	f7fd fd7f 	bl	36bf8 <z_spin_lock_valid>
   390fa:	b940      	cbnz	r0, 3910e <z_abort_timeout+0x2e>
   390fc:	4914      	ldr	r1, [pc, #80]	; (39150 <z_abort_timeout+0x70>)
   390fe:	4815      	ldr	r0, [pc, #84]	; (39154 <z_abort_timeout+0x74>)
   39100:	228e      	movs	r2, #142	; 0x8e
   39102:	f004 f840 	bl	3d186 <assert_print>
   39106:	218e      	movs	r1, #142	; 0x8e
   39108:	4811      	ldr	r0, [pc, #68]	; (39150 <z_abort_timeout+0x70>)
   3910a:	f004 f835 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3910e:	480f      	ldr	r0, [pc, #60]	; (3914c <z_abort_timeout+0x6c>)
   39110:	f7fd fd90 	bl	36c34 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   39114:	6823      	ldr	r3, [r4, #0]
   39116:	b1b3      	cbz	r3, 39146 <z_abort_timeout+0x66>
			remove_timeout(to);
   39118:	4620      	mov	r0, r4
   3911a:	f7ff fef3 	bl	38f04 <remove_timeout>
			ret = 0;
   3911e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39120:	480a      	ldr	r0, [pc, #40]	; (3914c <z_abort_timeout+0x6c>)
   39122:	f7fd fd77 	bl	36c14 <z_spin_unlock_valid>
   39126:	b940      	cbnz	r0, 3913a <z_abort_timeout+0x5a>
   39128:	4909      	ldr	r1, [pc, #36]	; (39150 <z_abort_timeout+0x70>)
   3912a:	480a      	ldr	r0, [pc, #40]	; (39154 <z_abort_timeout+0x74>)
   3912c:	22b9      	movs	r2, #185	; 0xb9
   3912e:	f004 f82a 	bl	3d186 <assert_print>
   39132:	21b9      	movs	r1, #185	; 0xb9
   39134:	4806      	ldr	r0, [pc, #24]	; (39150 <z_abort_timeout+0x70>)
   39136:	f004 f81f 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3913a:	f385 8811 	msr	BASEPRI, r5
   3913e:	f3bf 8f6f 	isb	sy
}
   39142:	4620      	mov	r0, r4
   39144:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   39146:	f06f 0415 	mvn.w	r4, #21
   3914a:	e7e9      	b.n	39120 <z_abort_timeout+0x40>
   3914c:	2001a56c 	.word	0x2001a56c
   39150:	00044989 	.word	0x00044989
   39154:	0004494f 	.word	0x0004494f

00039158 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   39158:	b570      	push	{r4, r5, r6, lr}
   3915a:	4604      	mov	r4, r0
	__asm__ volatile(
   3915c:	f04f 0320 	mov.w	r3, #32
   39160:	f3ef 8611 	mrs	r6, BASEPRI
   39164:	f383 8812 	msr	BASEPRI_MAX, r3
   39168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3916c:	4814      	ldr	r0, [pc, #80]	; (391c0 <z_timeout_remaining+0x68>)
   3916e:	f7fd fd43 	bl	36bf8 <z_spin_lock_valid>
   39172:	b940      	cbnz	r0, 39186 <z_timeout_remaining+0x2e>
   39174:	4913      	ldr	r1, [pc, #76]	; (391c4 <z_timeout_remaining+0x6c>)
   39176:	4814      	ldr	r0, [pc, #80]	; (391c8 <z_timeout_remaining+0x70>)
   39178:	228e      	movs	r2, #142	; 0x8e
   3917a:	f004 f804 	bl	3d186 <assert_print>
   3917e:	218e      	movs	r1, #142	; 0x8e
   39180:	4810      	ldr	r0, [pc, #64]	; (391c4 <z_timeout_remaining+0x6c>)
   39182:	f003 fff9 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39186:	480e      	ldr	r0, [pc, #56]	; (391c0 <z_timeout_remaining+0x68>)
   39188:	f7fd fd54 	bl	36c34 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   3918c:	4620      	mov	r0, r4
   3918e:	f7ff fed3 	bl	38f38 <timeout_rem>
   39192:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39194:	480a      	ldr	r0, [pc, #40]	; (391c0 <z_timeout_remaining+0x68>)
   39196:	460c      	mov	r4, r1
   39198:	f7fd fd3c 	bl	36c14 <z_spin_unlock_valid>
   3919c:	b940      	cbnz	r0, 391b0 <z_timeout_remaining+0x58>
   3919e:	4909      	ldr	r1, [pc, #36]	; (391c4 <z_timeout_remaining+0x6c>)
   391a0:	4809      	ldr	r0, [pc, #36]	; (391c8 <z_timeout_remaining+0x70>)
   391a2:	22b9      	movs	r2, #185	; 0xb9
   391a4:	f003 ffef 	bl	3d186 <assert_print>
   391a8:	21b9      	movs	r1, #185	; 0xb9
   391aa:	4806      	ldr	r0, [pc, #24]	; (391c4 <z_timeout_remaining+0x6c>)
   391ac:	f003 ffe4 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   391b0:	f386 8811 	msr	BASEPRI, r6
   391b4:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   391b8:	4628      	mov	r0, r5
   391ba:	4621      	mov	r1, r4
   391bc:	bd70      	pop	{r4, r5, r6, pc}
   391be:	bf00      	nop
   391c0:	2001a56c 	.word	0x2001a56c
   391c4:	00044989 	.word	0x00044989
   391c8:	0004494f 	.word	0x0004494f

000391cc <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   391cc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   391ce:	f04f 0320 	mov.w	r3, #32
   391d2:	f3ef 8511 	mrs	r5, BASEPRI
   391d6:	f383 8812 	msr	BASEPRI_MAX, r3
   391da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   391de:	4813      	ldr	r0, [pc, #76]	; (3922c <z_get_next_timeout_expiry+0x60>)
   391e0:	f7fd fd0a 	bl	36bf8 <z_spin_lock_valid>
   391e4:	b940      	cbnz	r0, 391f8 <z_get_next_timeout_expiry+0x2c>
   391e6:	4912      	ldr	r1, [pc, #72]	; (39230 <z_get_next_timeout_expiry+0x64>)
   391e8:	4812      	ldr	r0, [pc, #72]	; (39234 <z_get_next_timeout_expiry+0x68>)
   391ea:	228e      	movs	r2, #142	; 0x8e
   391ec:	f003 ffcb 	bl	3d186 <assert_print>
   391f0:	218e      	movs	r1, #142	; 0x8e
   391f2:	480f      	ldr	r0, [pc, #60]	; (39230 <z_get_next_timeout_expiry+0x64>)
   391f4:	f003 ffc0 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   391f8:	480c      	ldr	r0, [pc, #48]	; (3922c <z_get_next_timeout_expiry+0x60>)
   391fa:	f7fd fd1b 	bl	36c34 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   391fe:	f7ff fe5b 	bl	38eb8 <next_timeout>
   39202:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39204:	4809      	ldr	r0, [pc, #36]	; (3922c <z_get_next_timeout_expiry+0x60>)
   39206:	f7fd fd05 	bl	36c14 <z_spin_unlock_valid>
   3920a:	b940      	cbnz	r0, 3921e <z_get_next_timeout_expiry+0x52>
   3920c:	4908      	ldr	r1, [pc, #32]	; (39230 <z_get_next_timeout_expiry+0x64>)
   3920e:	4809      	ldr	r0, [pc, #36]	; (39234 <z_get_next_timeout_expiry+0x68>)
   39210:	22b9      	movs	r2, #185	; 0xb9
   39212:	f003 ffb8 	bl	3d186 <assert_print>
   39216:	21b9      	movs	r1, #185	; 0xb9
   39218:	4805      	ldr	r0, [pc, #20]	; (39230 <z_get_next_timeout_expiry+0x64>)
   3921a:	f003 ffad 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3921e:	f385 8811 	msr	BASEPRI, r5
   39222:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   39226:	4620      	mov	r0, r4
   39228:	bd38      	pop	{r3, r4, r5, pc}
   3922a:	bf00      	nop
   3922c:	2001a56c 	.word	0x2001a56c
   39230:	00044989 	.word	0x00044989
   39234:	0004494f 	.word	0x0004494f

00039238 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   39238:	b570      	push	{r4, r5, r6, lr}
   3923a:	4604      	mov	r4, r0
   3923c:	460d      	mov	r5, r1
	__asm__ volatile(
   3923e:	f04f 0320 	mov.w	r3, #32
   39242:	f3ef 8611 	mrs	r6, BASEPRI
   39246:	f383 8812 	msr	BASEPRI_MAX, r3
   3924a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3924e:	4816      	ldr	r0, [pc, #88]	; (392a8 <z_set_timeout_expiry+0x70>)
   39250:	f7fd fcd2 	bl	36bf8 <z_spin_lock_valid>
   39254:	b940      	cbnz	r0, 39268 <z_set_timeout_expiry+0x30>
   39256:	4915      	ldr	r1, [pc, #84]	; (392ac <z_set_timeout_expiry+0x74>)
   39258:	4815      	ldr	r0, [pc, #84]	; (392b0 <z_set_timeout_expiry+0x78>)
   3925a:	228e      	movs	r2, #142	; 0x8e
   3925c:	f003 ff93 	bl	3d186 <assert_print>
   39260:	218e      	movs	r1, #142	; 0x8e
   39262:	4812      	ldr	r0, [pc, #72]	; (392ac <z_set_timeout_expiry+0x74>)
   39264:	f003 ff88 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39268:	480f      	ldr	r0, [pc, #60]	; (392a8 <z_set_timeout_expiry+0x70>)
   3926a:	f7fd fce3 	bl	36c34 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   3926e:	f7ff fe23 	bl	38eb8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   39272:	2801      	cmp	r0, #1
   39274:	dd05      	ble.n	39282 <z_set_timeout_expiry+0x4a>
   39276:	42a0      	cmp	r0, r4
   39278:	db03      	blt.n	39282 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3927a:	4629      	mov	r1, r5
   3927c:	4620      	mov	r0, r4
   3927e:	f7ec fc4b 	bl	25b18 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39282:	4809      	ldr	r0, [pc, #36]	; (392a8 <z_set_timeout_expiry+0x70>)
   39284:	f7fd fcc6 	bl	36c14 <z_spin_unlock_valid>
   39288:	b940      	cbnz	r0, 3929c <z_set_timeout_expiry+0x64>
   3928a:	4908      	ldr	r1, [pc, #32]	; (392ac <z_set_timeout_expiry+0x74>)
   3928c:	4808      	ldr	r0, [pc, #32]	; (392b0 <z_set_timeout_expiry+0x78>)
   3928e:	22b9      	movs	r2, #185	; 0xb9
   39290:	f003 ff79 	bl	3d186 <assert_print>
   39294:	21b9      	movs	r1, #185	; 0xb9
   39296:	4805      	ldr	r0, [pc, #20]	; (392ac <z_set_timeout_expiry+0x74>)
   39298:	f003 ff6e 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3929c:	f386 8811 	msr	BASEPRI, r6
   392a0:	f3bf 8f6f 	isb	sy
		}
	}
}
   392a4:	bd70      	pop	{r4, r5, r6, pc}
   392a6:	bf00      	nop
   392a8:	2001a56c 	.word	0x2001a56c
   392ac:	00044989 	.word	0x00044989
   392b0:	0004494f 	.word	0x0004494f

000392b4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   392b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   392b8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   392ba:	f7fe ffa9 	bl	38210 <z_time_slice>
	__asm__ volatile(
   392be:	f04f 0320 	mov.w	r3, #32
   392c2:	f3ef 8511 	mrs	r5, BASEPRI
   392c6:	f383 8812 	msr	BASEPRI_MAX, r3
   392ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   392ce:	4842      	ldr	r0, [pc, #264]	; (393d8 <sys_clock_announce+0x124>)
   392d0:	f7fd fc92 	bl	36bf8 <z_spin_lock_valid>
   392d4:	b940      	cbnz	r0, 392e8 <sys_clock_announce+0x34>
   392d6:	4941      	ldr	r1, [pc, #260]	; (393dc <sys_clock_announce+0x128>)
   392d8:	4841      	ldr	r0, [pc, #260]	; (393e0 <sys_clock_announce+0x12c>)
   392da:	228e      	movs	r2, #142	; 0x8e
   392dc:	f003 ff53 	bl	3d186 <assert_print>
   392e0:	218e      	movs	r1, #142	; 0x8e
   392e2:	483e      	ldr	r0, [pc, #248]	; (393dc <sys_clock_announce+0x128>)
   392e4:	f003 ff48 	bl	3d178 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   392e8:	4f3e      	ldr	r7, [pc, #248]	; (393e4 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   392ea:	483b      	ldr	r0, [pc, #236]	; (393d8 <sys_clock_announce+0x124>)
	return list->head == list;
   392ec:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 393ec <sys_clock_announce+0x138>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   392f0:	4e3d      	ldr	r6, [pc, #244]	; (393e8 <sys_clock_announce+0x134>)
   392f2:	f7fd fc9f 	bl	36c34 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   392f6:	603c      	str	r4, [r7, #0]
   392f8:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   392fc:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   392fe:	4544      	cmp	r4, r8
   39300:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   39304:	e9d6 1e00 	ldrd	r1, lr, [r6]
   39308:	d00b      	beq.n	39322 <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   3930a:	b154      	cbz	r4, 39322 <sys_clock_announce+0x6e>
   3930c:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   39310:	429a      	cmp	r2, r3
   39312:	eb70 090c 	sbcs.w	r9, r0, ip
   39316:	da23      	bge.n	39360 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   39318:	1a9b      	subs	r3, r3, r2
   3931a:	eb6c 0c00 	sbc.w	ip, ip, r0
   3931e:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   39322:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   39324:	1852      	adds	r2, r2, r1
   39326:	eb4e 0000 	adc.w	r0, lr, r0
   3932a:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   3932e:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   39330:	f7ff fdc2 	bl	38eb8 <next_timeout>
   39334:	4621      	mov	r1, r4
   39336:	f7ec fbef 	bl	25b18 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3933a:	4827      	ldr	r0, [pc, #156]	; (393d8 <sys_clock_announce+0x124>)
   3933c:	f7fd fc6a 	bl	36c14 <z_spin_unlock_valid>
   39340:	b940      	cbnz	r0, 39354 <sys_clock_announce+0xa0>
   39342:	4926      	ldr	r1, [pc, #152]	; (393dc <sys_clock_announce+0x128>)
   39344:	4826      	ldr	r0, [pc, #152]	; (393e0 <sys_clock_announce+0x12c>)
   39346:	22b9      	movs	r2, #185	; 0xb9
   39348:	f003 ff1d 	bl	3d186 <assert_print>
   3934c:	21b9      	movs	r1, #185	; 0xb9
   3934e:	4823      	ldr	r0, [pc, #140]	; (393dc <sys_clock_announce+0x128>)
   39350:	f003 ff12 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   39354:	f385 8811 	msr	BASEPRI, r5
   39358:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3935c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   39360:	1859      	adds	r1, r3, r1
   39362:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   39366:	1ad3      	subs	r3, r2, r3
   39368:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   3936a:	2200      	movs	r2, #0
   3936c:	2300      	movs	r3, #0
		curr_tick += dt;
   3936e:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   39372:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   39376:	4620      	mov	r0, r4
   39378:	f7ff fdc4 	bl	38f04 <remove_timeout>
   3937c:	4816      	ldr	r0, [pc, #88]	; (393d8 <sys_clock_announce+0x124>)
   3937e:	f7fd fc49 	bl	36c14 <z_spin_unlock_valid>
   39382:	b940      	cbnz	r0, 39396 <sys_clock_announce+0xe2>
   39384:	4915      	ldr	r1, [pc, #84]	; (393dc <sys_clock_announce+0x128>)
   39386:	4816      	ldr	r0, [pc, #88]	; (393e0 <sys_clock_announce+0x12c>)
   39388:	22b9      	movs	r2, #185	; 0xb9
   3938a:	f003 fefc 	bl	3d186 <assert_print>
   3938e:	21b9      	movs	r1, #185	; 0xb9
   39390:	4812      	ldr	r0, [pc, #72]	; (393dc <sys_clock_announce+0x128>)
   39392:	f003 fef1 	bl	3d178 <assert_post_action>
   39396:	f385 8811 	msr	BASEPRI, r5
   3939a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3939e:	4620      	mov	r0, r4
   393a0:	68a3      	ldr	r3, [r4, #8]
   393a2:	4798      	blx	r3
	__asm__ volatile(
   393a4:	f04f 0320 	mov.w	r3, #32
   393a8:	f3ef 8511 	mrs	r5, BASEPRI
   393ac:	f383 8812 	msr	BASEPRI_MAX, r3
   393b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   393b4:	4808      	ldr	r0, [pc, #32]	; (393d8 <sys_clock_announce+0x124>)
   393b6:	f7fd fc1f 	bl	36bf8 <z_spin_lock_valid>
   393ba:	b940      	cbnz	r0, 393ce <sys_clock_announce+0x11a>
   393bc:	4907      	ldr	r1, [pc, #28]	; (393dc <sys_clock_announce+0x128>)
   393be:	4808      	ldr	r0, [pc, #32]	; (393e0 <sys_clock_announce+0x12c>)
   393c0:	228e      	movs	r2, #142	; 0x8e
   393c2:	f003 fee0 	bl	3d186 <assert_print>
   393c6:	218e      	movs	r1, #142	; 0x8e
   393c8:	4804      	ldr	r0, [pc, #16]	; (393dc <sys_clock_announce+0x128>)
   393ca:	f003 fed5 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   393ce:	4802      	ldr	r0, [pc, #8]	; (393d8 <sys_clock_announce+0x124>)
   393d0:	f7fd fc30 	bl	36c34 <z_spin_lock_set_owner>
	return k;
   393d4:	e790      	b.n	392f8 <sys_clock_announce+0x44>
   393d6:	bf00      	nop
   393d8:	2001a56c 	.word	0x2001a56c
   393dc:	00044989 	.word	0x00044989
   393e0:	0004494f 	.word	0x0004494f
   393e4:	2001a568 	.word	0x2001a568
   393e8:	20018fb0 	.word	0x20018fb0
   393ec:	20014a64 	.word	0x20014a64

000393f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   393f0:	b570      	push	{r4, r5, r6, lr}
   393f2:	f04f 0320 	mov.w	r3, #32
   393f6:	f3ef 8611 	mrs	r6, BASEPRI
   393fa:	f383 8812 	msr	BASEPRI_MAX, r3
   393fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39402:	4816      	ldr	r0, [pc, #88]	; (3945c <sys_clock_tick_get+0x6c>)
   39404:	f7fd fbf8 	bl	36bf8 <z_spin_lock_valid>
   39408:	b940      	cbnz	r0, 3941c <sys_clock_tick_get+0x2c>
   3940a:	4915      	ldr	r1, [pc, #84]	; (39460 <sys_clock_tick_get+0x70>)
   3940c:	4815      	ldr	r0, [pc, #84]	; (39464 <sys_clock_tick_get+0x74>)
   3940e:	228e      	movs	r2, #142	; 0x8e
   39410:	f003 feb9 	bl	3d186 <assert_print>
   39414:	218e      	movs	r1, #142	; 0x8e
   39416:	4812      	ldr	r0, [pc, #72]	; (39460 <sys_clock_tick_get+0x70>)
   39418:	f003 feae 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3941c:	480f      	ldr	r0, [pc, #60]	; (3945c <sys_clock_tick_get+0x6c>)
   3941e:	f7fd fc09 	bl	36c34 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   39422:	f7ec fba9 	bl	25b78 <sys_clock_elapsed>
   39426:	4b10      	ldr	r3, [pc, #64]	; (39468 <sys_clock_tick_get+0x78>)
   39428:	e9d3 4500 	ldrd	r4, r5, [r3]
   3942c:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3942e:	480b      	ldr	r0, [pc, #44]	; (3945c <sys_clock_tick_get+0x6c>)
   39430:	f145 0500 	adc.w	r5, r5, #0
   39434:	f7fd fbee 	bl	36c14 <z_spin_unlock_valid>
   39438:	b940      	cbnz	r0, 3944c <sys_clock_tick_get+0x5c>
   3943a:	4909      	ldr	r1, [pc, #36]	; (39460 <sys_clock_tick_get+0x70>)
   3943c:	4809      	ldr	r0, [pc, #36]	; (39464 <sys_clock_tick_get+0x74>)
   3943e:	22b9      	movs	r2, #185	; 0xb9
   39440:	f003 fea1 	bl	3d186 <assert_print>
   39444:	21b9      	movs	r1, #185	; 0xb9
   39446:	4806      	ldr	r0, [pc, #24]	; (39460 <sys_clock_tick_get+0x70>)
   39448:	f003 fe96 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   3944c:	f386 8811 	msr	BASEPRI, r6
   39450:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   39454:	4620      	mov	r0, r4
   39456:	4629      	mov	r1, r5
   39458:	bd70      	pop	{r4, r5, r6, pc}
   3945a:	bf00      	nop
   3945c:	2001a56c 	.word	0x2001a56c
   39460:	00044989 	.word	0x00044989
   39464:	0004494f 	.word	0x0004494f
   39468:	20018fb0 	.word	0x20018fb0

0003946c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   3946c:	b570      	push	{r4, r5, r6, lr}
   3946e:	4604      	mov	r4, r0
	__asm__ volatile(
   39470:	f04f 0320 	mov.w	r3, #32
   39474:	f3ef 8511 	mrs	r5, BASEPRI
   39478:	f383 8812 	msr	BASEPRI_MAX, r3
   3947c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39480:	4841      	ldr	r0, [pc, #260]	; (39588 <z_timer_expiration_handler+0x11c>)
   39482:	f7fd fbb9 	bl	36bf8 <z_spin_lock_valid>
   39486:	b940      	cbnz	r0, 3949a <z_timer_expiration_handler+0x2e>
   39488:	4940      	ldr	r1, [pc, #256]	; (3958c <z_timer_expiration_handler+0x120>)
   3948a:	4841      	ldr	r0, [pc, #260]	; (39590 <z_timer_expiration_handler+0x124>)
   3948c:	228e      	movs	r2, #142	; 0x8e
   3948e:	f003 fe7a 	bl	3d186 <assert_print>
   39492:	218e      	movs	r1, #142	; 0x8e
   39494:	483d      	ldr	r0, [pc, #244]	; (3958c <z_timer_expiration_handler+0x120>)
   39496:	f003 fe6f 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3949a:	483b      	ldr	r0, [pc, #236]	; (39588 <z_timer_expiration_handler+0x11c>)
   3949c:	f7fd fbca 	bl	36c34 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   394a0:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   394a4:	3301      	adds	r3, #1
   394a6:	f142 0200 	adc.w	r2, r2, #0
   394aa:	2b02      	cmp	r3, #2
   394ac:	f172 0300 	sbcs.w	r3, r2, #0
   394b0:	d305      	bcc.n	394be <z_timer_expiration_handler+0x52>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   394b2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   394b6:	4620      	mov	r0, r4
   394b8:	4936      	ldr	r1, [pc, #216]	; (39594 <z_timer_expiration_handler+0x128>)
   394ba:	f7ff fd63 	bl	38f84 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   394be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   394c0:	3301      	adds	r3, #1
   394c2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   394c4:	6a23      	ldr	r3, [r4, #32]
   394c6:	b35b      	cbz	r3, 39520 <z_timer_expiration_handler+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   394c8:	482f      	ldr	r0, [pc, #188]	; (39588 <z_timer_expiration_handler+0x11c>)
   394ca:	f7fd fba3 	bl	36c14 <z_spin_unlock_valid>
   394ce:	b940      	cbnz	r0, 394e2 <z_timer_expiration_handler+0x76>
   394d0:	492e      	ldr	r1, [pc, #184]	; (3958c <z_timer_expiration_handler+0x120>)
   394d2:	482f      	ldr	r0, [pc, #188]	; (39590 <z_timer_expiration_handler+0x124>)
   394d4:	22b9      	movs	r2, #185	; 0xb9
   394d6:	f003 fe56 	bl	3d186 <assert_print>
   394da:	21b9      	movs	r1, #185	; 0xb9
   394dc:	482b      	ldr	r0, [pc, #172]	; (3958c <z_timer_expiration_handler+0x120>)
   394de:	f003 fe4b 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   394e2:	f385 8811 	msr	BASEPRI, r5
   394e6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   394ea:	4620      	mov	r0, r4
   394ec:	6a23      	ldr	r3, [r4, #32]
   394ee:	4798      	blx	r3
	__asm__ volatile(
   394f0:	f04f 0320 	mov.w	r3, #32
   394f4:	f3ef 8511 	mrs	r5, BASEPRI
   394f8:	f383 8812 	msr	BASEPRI_MAX, r3
   394fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39500:	4821      	ldr	r0, [pc, #132]	; (39588 <z_timer_expiration_handler+0x11c>)
   39502:	f7fd fb79 	bl	36bf8 <z_spin_lock_valid>
   39506:	b940      	cbnz	r0, 3951a <z_timer_expiration_handler+0xae>
   39508:	4920      	ldr	r1, [pc, #128]	; (3958c <z_timer_expiration_handler+0x120>)
   3950a:	4821      	ldr	r0, [pc, #132]	; (39590 <z_timer_expiration_handler+0x124>)
   3950c:	228e      	movs	r2, #142	; 0x8e
   3950e:	f003 fe3a 	bl	3d186 <assert_print>
   39512:	218e      	movs	r1, #142	; 0x8e
   39514:	481d      	ldr	r0, [pc, #116]	; (3958c <z_timer_expiration_handler+0x120>)
   39516:	f003 fe2f 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   3951a:	481b      	ldr	r0, [pc, #108]	; (39588 <z_timer_expiration_handler+0x11c>)
   3951c:	f7fd fb8a 	bl	36c34 <z_spin_lock_set_owner>
	return list->head == list;
   39520:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39524:	42a6      	cmp	r6, r4
   39526:	d000      	beq.n	3952a <z_timer_expiration_handler+0xbe>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   39528:	b98e      	cbnz	r6, 3954e <z_timer_expiration_handler+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3952a:	4817      	ldr	r0, [pc, #92]	; (39588 <z_timer_expiration_handler+0x11c>)
   3952c:	f7fd fb72 	bl	36c14 <z_spin_unlock_valid>
   39530:	b940      	cbnz	r0, 39544 <z_timer_expiration_handler+0xd8>
   39532:	4916      	ldr	r1, [pc, #88]	; (3958c <z_timer_expiration_handler+0x120>)
   39534:	4816      	ldr	r0, [pc, #88]	; (39590 <z_timer_expiration_handler+0x124>)
   39536:	22b9      	movs	r2, #185	; 0xb9
   39538:	f003 fe25 	bl	3d186 <assert_print>
   3953c:	21b9      	movs	r1, #185	; 0xb9
   3953e:	4813      	ldr	r0, [pc, #76]	; (3958c <z_timer_expiration_handler+0x120>)
   39540:	f003 fe1a 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   39544:	f385 8811 	msr	BASEPRI, r5
   39548:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   3954c:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   3954e:	4630      	mov	r0, r6
   39550:	f7fe fca8 	bl	37ea4 <z_unpend_thread_no_timeout>
   39554:	2300      	movs	r3, #0
   39556:	480c      	ldr	r0, [pc, #48]	; (39588 <z_timer_expiration_handler+0x11c>)
   39558:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
   3955c:	f7fd fb5a 	bl	36c14 <z_spin_unlock_valid>
   39560:	b940      	cbnz	r0, 39574 <z_timer_expiration_handler+0x108>
   39562:	490a      	ldr	r1, [pc, #40]	; (3958c <z_timer_expiration_handler+0x120>)
   39564:	480a      	ldr	r0, [pc, #40]	; (39590 <z_timer_expiration_handler+0x124>)
   39566:	22b9      	movs	r2, #185	; 0xb9
   39568:	f003 fe0d 	bl	3d186 <assert_print>
   3956c:	21b9      	movs	r1, #185	; 0xb9
   3956e:	4807      	ldr	r0, [pc, #28]	; (3958c <z_timer_expiration_handler+0x120>)
   39570:	f003 fe02 	bl	3d178 <assert_post_action>
   39574:	f385 8811 	msr	BASEPRI, r5
   39578:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   3957c:	4630      	mov	r0, r6
}
   3957e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   39582:	f7fe bef5 	b.w	38370 <z_ready_thread>
   39586:	bf00      	nop
   39588:	2001a570 	.word	0x2001a570
   3958c:	00044989 	.word	0x00044989
   39590:	0004494f 	.word	0x0004494f
   39594:	0003946d 	.word	0x0003946d

00039598 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   39598:	f1b3 3fff 	cmp.w	r3, #4294967295
   3959c:	bf08      	it	eq
   3959e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   395a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   395a6:	4605      	mov	r5, r0
   395a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   395ac:	4690      	mov	r8, r2
   395ae:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   395b0:	d040      	beq.n	39634 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   395b2:	f1b1 3fff 	cmp.w	r1, #4294967295
   395b6:	bf08      	it	eq
   395b8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   395bc:	4604      	mov	r4, r0
   395be:	460e      	mov	r6, r1
   395c0:	d016      	beq.n	395f0 <z_impl_k_timer_start+0x58>
   395c2:	ea51 0c00 	orrs.w	ip, r1, r0
   395c6:	d013      	beq.n	395f0 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   395c8:	f06f 0c01 	mvn.w	ip, #1
   395cc:	ebbc 0c00 	subs.w	ip, ip, r0
   395d0:	f04f 3cff 	mov.w	ip, #4294967295
   395d4:	eb6c 0c01 	sbc.w	ip, ip, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   395d8:	f1bc 0f00 	cmp.w	ip, #0
   395dc:	da08      	bge.n	395f0 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   395de:	2802      	cmp	r0, #2
   395e0:	f171 0100 	sbcs.w	r1, r1, #0
   395e4:	bfbc      	itt	lt
   395e6:	2402      	movlt	r4, #2
   395e8:	2600      	movlt	r6, #0
   395ea:	3c01      	subs	r4, #1
   395ec:	f146 36ff 	adc.w	r6, r6, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   395f0:	f06f 0101 	mvn.w	r1, #1
   395f4:	1a89      	subs	r1, r1, r2
   395f6:	f04f 31ff 	mov.w	r1, #4294967295
   395fa:	eb61 0103 	sbc.w	r1, r1, r3
   395fe:	2900      	cmp	r1, #0
   39600:	da09      	bge.n	39616 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   39602:	2a01      	cmp	r2, #1
   39604:	f173 0100 	sbcs.w	r1, r3, #0
   39608:	bfbc      	itt	lt
   3960a:	2201      	movlt	r2, #1
   3960c:	2300      	movlt	r3, #0
   3960e:	f112 38ff 	adds.w	r8, r2, #4294967295
   39612:	f143 37ff 	adc.w	r7, r3, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   39616:	4628      	mov	r0, r5
   39618:	f7ff fd62 	bl	390e0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   3961c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3961e:	4642      	mov	r2, r8
	timer->status = 0U;
   39620:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   39622:	4628      	mov	r0, r5
   39624:	463b      	mov	r3, r7
	timer->period = period;
   39626:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28
		     duration);
}
   3962a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3962e:	4902      	ldr	r1, [pc, #8]	; (39638 <z_impl_k_timer_start+0xa0>)
   39630:	f7ff bca8 	b.w	38f84 <z_add_timeout>
}
   39634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39638:	0003946d 	.word	0x0003946d

0003963c <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
   3963c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3963e:	4604      	mov	r4, r0
   39640:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   39644:	b143      	cbz	r3, 39658 <z_impl_k_timer_status_sync+0x1c>
   39646:	4930      	ldr	r1, [pc, #192]	; (39708 <z_impl_k_timer_status_sync+0xcc>)
   39648:	4830      	ldr	r0, [pc, #192]	; (3970c <z_impl_k_timer_status_sync+0xd0>)
   3964a:	22c6      	movs	r2, #198	; 0xc6
   3964c:	f003 fd9b 	bl	3d186 <assert_print>
   39650:	21c6      	movs	r1, #198	; 0xc6
   39652:	482d      	ldr	r0, [pc, #180]	; (39708 <z_impl_k_timer_status_sync+0xcc>)
   39654:	f003 fd90 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   39658:	f04f 0320 	mov.w	r3, #32
   3965c:	f3ef 8711 	mrs	r7, BASEPRI
   39660:	f383 8812 	msr	BASEPRI_MAX, r3
   39664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39668:	4829      	ldr	r0, [pc, #164]	; (39710 <z_impl_k_timer_status_sync+0xd4>)
	k.key = arch_irq_lock();
   3966a:	463d      	mov	r5, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3966c:	f7fd fac4 	bl	36bf8 <z_spin_lock_valid>
   39670:	b940      	cbnz	r0, 39684 <z_impl_k_timer_status_sync+0x48>
   39672:	4928      	ldr	r1, [pc, #160]	; (39714 <z_impl_k_timer_status_sync+0xd8>)
   39674:	4825      	ldr	r0, [pc, #148]	; (3970c <z_impl_k_timer_status_sync+0xd0>)
   39676:	228e      	movs	r2, #142	; 0x8e
   39678:	f003 fd85 	bl	3d186 <assert_print>
   3967c:	218e      	movs	r1, #142	; 0x8e
   3967e:	4825      	ldr	r0, [pc, #148]	; (39714 <z_impl_k_timer_status_sync+0xd8>)
   39680:	f003 fd7a 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39684:	4822      	ldr	r0, [pc, #136]	; (39710 <z_impl_k_timer_status_sync+0xd4>)
   39686:	f7fd fad5 	bl	36c34 <z_spin_lock_set_owner>

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
   3968a:	6b26      	ldr	r6, [r4, #48]	; 0x30

	if (result == 0U) {
   3968c:	bb36      	cbnz	r6, 396dc <z_impl_k_timer_status_sync+0xa0>
		if (!z_is_inactive_timeout(&timer->timeout)) {
   3968e:	6823      	ldr	r3, [r4, #0]
   39690:	b323      	cbz	r3, 396dc <z_impl_k_timer_status_sync+0xa0>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
   39692:	f04f 33ff 	mov.w	r3, #4294967295
   39696:	f04f 32ff 	mov.w	r2, #4294967295
   3969a:	4639      	mov	r1, r7
   3969c:	e9cd 2300 	strd	r2, r3, [sp]
   396a0:	481b      	ldr	r0, [pc, #108]	; (39710 <z_impl_k_timer_status_sync+0xd4>)
   396a2:	f104 0218 	add.w	r2, r4, #24
   396a6:	f7ff f80b 	bl	386c0 <z_pend_curr>
   396aa:	f04f 0320 	mov.w	r3, #32
   396ae:	f3ef 8511 	mrs	r5, BASEPRI
   396b2:	f383 8812 	msr	BASEPRI_MAX, r3
   396b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   396ba:	4815      	ldr	r0, [pc, #84]	; (39710 <z_impl_k_timer_status_sync+0xd4>)
   396bc:	f7fd fa9c 	bl	36bf8 <z_spin_lock_valid>
   396c0:	b940      	cbnz	r0, 396d4 <z_impl_k_timer_status_sync+0x98>
   396c2:	4914      	ldr	r1, [pc, #80]	; (39714 <z_impl_k_timer_status_sync+0xd8>)
   396c4:	4811      	ldr	r0, [pc, #68]	; (3970c <z_impl_k_timer_status_sync+0xd0>)
   396c6:	228e      	movs	r2, #142	; 0x8e
   396c8:	f003 fd5d 	bl	3d186 <assert_print>
   396cc:	218e      	movs	r1, #142	; 0x8e
   396ce:	4811      	ldr	r0, [pc, #68]	; (39714 <z_impl_k_timer_status_sync+0xd8>)
   396d0:	f003 fd52 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   396d4:	480e      	ldr	r0, [pc, #56]	; (39710 <z_impl_k_timer_status_sync+0xd4>)
   396d6:	f7fd faad 	bl	36c34 <z_spin_lock_set_owner>

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
   396da:	6b26      	ldr	r6, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
   396dc:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   396de:	480c      	ldr	r0, [pc, #48]	; (39710 <z_impl_k_timer_status_sync+0xd4>)
   396e0:	6323      	str	r3, [r4, #48]	; 0x30
   396e2:	f7fd fa97 	bl	36c14 <z_spin_unlock_valid>
   396e6:	b940      	cbnz	r0, 396fa <z_impl_k_timer_status_sync+0xbe>
   396e8:	490a      	ldr	r1, [pc, #40]	; (39714 <z_impl_k_timer_status_sync+0xd8>)
   396ea:	4808      	ldr	r0, [pc, #32]	; (3970c <z_impl_k_timer_status_sync+0xd0>)
   396ec:	22b9      	movs	r2, #185	; 0xb9
   396ee:	f003 fd4a 	bl	3d186 <assert_print>
   396f2:	21b9      	movs	r1, #185	; 0xb9
   396f4:	4807      	ldr	r0, [pc, #28]	; (39714 <z_impl_k_timer_status_sync+0xd8>)
   396f6:	f003 fd3f 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   396fa:	f385 8811 	msr	BASEPRI, r5
   396fe:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
   39702:	4630      	mov	r0, r6
   39704:	b003      	add	sp, #12
   39706:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39708:	0004c52b 	.word	0x0004c52b
   3970c:	0004494f 	.word	0x0004494f
   39710:	2001a570 	.word	0x2001a570
   39714:	00044989 	.word	0x00044989

00039718 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   39718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   3971c:	2600      	movs	r6, #0
{
   3971e:	4614      	mov	r4, r2
   39720:	4681      	mov	r9, r0
	int events_registered = 0;
   39722:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39724:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 398f4 <register_events+0x1dc>
   39728:	4f6f      	ldr	r7, [pc, #444]	; (398e8 <register_events+0x1d0>)
   3972a:	4d70      	ldr	r5, [pc, #448]	; (398ec <register_events+0x1d4>)
{
   3972c:	9100      	str	r1, [sp, #0]
   3972e:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   39730:	9b00      	ldr	r3, [sp, #0]
   39732:	429e      	cmp	r6, r3
   39734:	db03      	blt.n	3973e <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   39736:	4640      	mov	r0, r8
   39738:	b003      	add	sp, #12
   3973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   3973e:	f04f 0220 	mov.w	r2, #32
   39742:	f3ef 8b11 	mrs	fp, BASEPRI
   39746:	f382 8812 	msr	BASEPRI_MAX, r2
   3974a:	f3bf 8f6f 	isb	sy
   3974e:	4650      	mov	r0, sl
   39750:	f7fd fa52 	bl	36bf8 <z_spin_lock_valid>
   39754:	b940      	cbnz	r0, 39768 <register_events+0x50>
   39756:	4639      	mov	r1, r7
   39758:	4628      	mov	r0, r5
   3975a:	228e      	movs	r2, #142	; 0x8e
   3975c:	f003 fd13 	bl	3d186 <assert_print>
   39760:	218e      	movs	r1, #142	; 0x8e
   39762:	4638      	mov	r0, r7
   39764:	f003 fd08 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39768:	4650      	mov	r0, sl
   3976a:	f7fd fa63 	bl	36c34 <z_spin_lock_set_owner>
	switch (event->type) {
   3976e:	f899 200d 	ldrb.w	r2, [r9, #13]
   39772:	f002 021f 	and.w	r2, r2, #31
   39776:	2a08      	cmp	r2, #8
   39778:	d853      	bhi.n	39822 <register_events+0x10a>
   3977a:	e8df f002 	tbb	[pc, r2]
   3977e:	4431      	.short	0x4431
   39780:	522d5205 	.word	0x522d5205
   39784:	5252      	.short	0x5252
   39786:	4b          	.byte	0x4b
   39787:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   39788:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3978c:	6892      	ldr	r2, [r2, #8]
   3978e:	b33a      	cbz	r2, 397e0 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   39790:	2202      	movs	r2, #2
	event->poller = NULL;
   39792:	2000      	movs	r0, #0
	event->state |= state;
   39794:	f8d9 100c 	ldr.w	r1, [r9, #12]
	event->poller = NULL;
   39798:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   3979c:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   397a0:	ea42 020c 	orr.w	r2, r2, ip
   397a4:	f362 3152 	bfi	r1, r2, #13, #6
   397a8:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   397ac:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   397ae:	4650      	mov	r0, sl
   397b0:	f7fd fa30 	bl	36c14 <z_spin_unlock_valid>
   397b4:	b940      	cbnz	r0, 397c8 <register_events+0xb0>
   397b6:	4639      	mov	r1, r7
   397b8:	4628      	mov	r0, r5
   397ba:	22b9      	movs	r2, #185	; 0xb9
   397bc:	f003 fce3 	bl	3d186 <assert_print>
   397c0:	21b9      	movs	r1, #185	; 0xb9
   397c2:	4638      	mov	r0, r7
   397c4:	f003 fcd8 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   397c8:	f38b 8811 	msr	BASEPRI, fp
   397cc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   397d0:	3601      	adds	r6, #1
   397d2:	f109 0914 	add.w	r9, r9, #20
   397d6:	e7ab      	b.n	39730 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   397d8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   397dc:	6812      	ldr	r2, [r2, #0]
   397de:	bb52      	cbnz	r2, 39836 <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   397e0:	9b01      	ldr	r3, [sp, #4]
   397e2:	2b00      	cmp	r3, #0
   397e4:	d1e3      	bne.n	397ae <register_events+0x96>
   397e6:	7822      	ldrb	r2, [r4, #0]
   397e8:	2a00      	cmp	r2, #0
   397ea:	d0e0      	beq.n	397ae <register_events+0x96>
	switch (event->type) {
   397ec:	f899 200d 	ldrb.w	r2, [r9, #13]
   397f0:	f002 021f 	and.w	r2, r2, #31
   397f4:	2a08      	cmp	r2, #8
   397f6:	d86d      	bhi.n	398d4 <register_events+0x1bc>
   397f8:	e8df f002 	tbb	[pc, r2]
   397fc:	6c1f4932 	.word	0x6c1f4932
   39800:	6c6c6c37 	.word	0x6c6c6c37
   39804:	5a          	.byte	0x5a
   39805:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   39806:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3980a:	6892      	ldr	r2, [r2, #8]
   3980c:	2a00      	cmp	r2, #0
   3980e:	d0e7      	beq.n	397e0 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   39810:	2201      	movs	r2, #1
   39812:	e7be      	b.n	39792 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   39814:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39818:	6a52      	ldr	r2, [r2, #36]	; 0x24
   3981a:	2a00      	cmp	r2, #0
   3981c:	d0e0      	beq.n	397e0 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   3981e:	2210      	movs	r2, #16
   39820:	e7b7      	b.n	39792 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   39822:	4628      	mov	r0, r5
   39824:	225c      	movs	r2, #92	; 0x5c
   39826:	4932      	ldr	r1, [pc, #200]	; (398f0 <register_events+0x1d8>)
   39828:	f003 fcad 	bl	3d186 <assert_print>
   3982c:	215c      	movs	r1, #92	; 0x5c
   3982e:	4830      	ldr	r0, [pc, #192]	; (398f0 <register_events+0x1d8>)
   39830:	f003 fca2 	bl	3d178 <assert_post_action>
		break;
   39834:	e7d4      	b.n	397e0 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   39836:	2204      	movs	r2, #4
   39838:	e7ab      	b.n	39792 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3983a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3983e:	b942      	cbnz	r2, 39852 <register_events+0x13a>
   39840:	4628      	mov	r0, r5
   39842:	492b      	ldr	r1, [pc, #172]	; (398f0 <register_events+0x1d8>)
   39844:	2286      	movs	r2, #134	; 0x86
   39846:	f003 fc9e 	bl	3d186 <assert_print>
   3984a:	2186      	movs	r1, #134	; 0x86
   3984c:	4828      	ldr	r0, [pc, #160]	; (398f0 <register_events+0x1d8>)
   3984e:	f003 fc93 	bl	3d178 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   39852:	4622      	mov	r2, r4
   39854:	4649      	mov	r1, r9
   39856:	f8d9 0010 	ldr.w	r0, [r9, #16]
   3985a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3985c:	f008 f824 	bl	418a8 <add_event>
	event->poller = poller;
   39860:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   39864:	f108 0801 	add.w	r8, r8, #1
   39868:	e7a1      	b.n	397ae <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3986a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3986e:	b942      	cbnz	r2, 39882 <register_events+0x16a>
   39870:	4628      	mov	r0, r5
   39872:	491f      	ldr	r1, [pc, #124]	; (398f0 <register_events+0x1d8>)
   39874:	228a      	movs	r2, #138	; 0x8a
   39876:	f003 fc86 	bl	3d186 <assert_print>
   3987a:	218a      	movs	r1, #138	; 0x8a
   3987c:	481c      	ldr	r0, [pc, #112]	; (398f0 <register_events+0x1d8>)
   3987e:	f003 fc7b 	bl	3d178 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   39882:	f8d9 0010 	ldr.w	r0, [r9, #16]
   39886:	4622      	mov	r2, r4
   39888:	4649      	mov	r1, r9
   3988a:	3014      	adds	r0, #20
   3988c:	e7e6      	b.n	3985c <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3988e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39892:	b942      	cbnz	r2, 398a6 <register_events+0x18e>
   39894:	4628      	mov	r0, r5
   39896:	4916      	ldr	r1, [pc, #88]	; (398f0 <register_events+0x1d8>)
   39898:	228e      	movs	r2, #142	; 0x8e
   3989a:	f003 fc74 	bl	3d186 <assert_print>
   3989e:	218e      	movs	r1, #142	; 0x8e
   398a0:	4813      	ldr	r0, [pc, #76]	; (398f0 <register_events+0x1d8>)
   398a2:	f003 fc69 	bl	3d178 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   398a6:	4622      	mov	r2, r4
   398a8:	4649      	mov	r1, r9
   398aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
   398ae:	e7d5      	b.n	3985c <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   398b0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   398b4:	b942      	cbnz	r2, 398c8 <register_events+0x1b0>
   398b6:	4628      	mov	r0, r5
   398b8:	490d      	ldr	r1, [pc, #52]	; (398f0 <register_events+0x1d8>)
   398ba:	2292      	movs	r2, #146	; 0x92
   398bc:	f003 fc63 	bl	3d186 <assert_print>
   398c0:	2192      	movs	r1, #146	; 0x92
   398c2:	480b      	ldr	r0, [pc, #44]	; (398f0 <register_events+0x1d8>)
   398c4:	f003 fc58 	bl	3d178 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   398c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   398cc:	4622      	mov	r2, r4
   398ce:	4649      	mov	r1, r9
   398d0:	3028      	adds	r0, #40	; 0x28
   398d2:	e7c3      	b.n	3985c <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   398d4:	4628      	mov	r0, r5
   398d6:	2299      	movs	r2, #153	; 0x99
   398d8:	4905      	ldr	r1, [pc, #20]	; (398f0 <register_events+0x1d8>)
   398da:	f003 fc54 	bl	3d186 <assert_print>
   398de:	2199      	movs	r1, #153	; 0x99
   398e0:	4803      	ldr	r0, [pc, #12]	; (398f0 <register_events+0x1d8>)
   398e2:	f003 fc49 	bl	3d178 <assert_post_action>
		break;
   398e6:	e7bb      	b.n	39860 <register_events+0x148>
   398e8:	00044989 	.word	0x00044989
   398ec:	0004494f 	.word	0x0004494f
   398f0:	0004c54d 	.word	0x0004c54d
   398f4:	2001a574 	.word	0x2001a574

000398f8 <clear_event_registrations>:
{
   398f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   398fc:	2414      	movs	r4, #20
   398fe:	4690      	mov	r8, r2
	while (num_events--) {
   39900:	460f      	mov	r7, r1
   39902:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   39906:	4d43      	ldr	r5, [pc, #268]	; (39a14 <clear_event_registrations+0x11c>)
   39908:	4e43      	ldr	r6, [pc, #268]	; (39a18 <clear_event_registrations+0x120>)
   3990a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 39a20 <clear_event_registrations+0x128>
	while (num_events--) {
   3990e:	b90f      	cbnz	r7, 39914 <clear_event_registrations+0x1c>
}
   39910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   39914:	2300      	movs	r3, #0
   39916:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3991a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3991e:	f1a4 0a14 	sub.w	sl, r4, #20
   39922:	f003 031f 	and.w	r3, r3, #31
   39926:	2b08      	cmp	r3, #8
   39928:	d83e      	bhi.n	399a8 <clear_event_registrations+0xb0>
   3992a:	e8df f003 	tbb	[pc, r3]
   3992e:	2746      	.short	0x2746
   39930:	3d1c3d05 	.word	0x3d1c3d05
   39934:	3d3d      	.short	0x3d3d
   39936:	32          	.byte	0x32
   39937:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39938:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3993c:	b943      	cbnz	r3, 39950 <clear_event_registrations+0x58>
   3993e:	4629      	mov	r1, r5
   39940:	22a9      	movs	r2, #169	; 0xa9
   39942:	4630      	mov	r0, r6
   39944:	f003 fc1f 	bl	3d186 <assert_print>
   39948:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3994a:	4628      	mov	r0, r5
   3994c:	f003 fc14 	bl	3d178 <assert_post_action>
	return node->next != NULL;
   39950:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   39954:	b38b      	cbz	r3, 399ba <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   39956:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   3995a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3995c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3995e:	2300      	movs	r3, #0
	node->prev = NULL;
   39960:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   39964:	e029      	b.n	399ba <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   39966:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3996a:	2b00      	cmp	r3, #0
   3996c:	d1f0      	bne.n	39950 <clear_event_registrations+0x58>
   3996e:	4629      	mov	r1, r5
   39970:	22ad      	movs	r2, #173	; 0xad
   39972:	4630      	mov	r0, r6
   39974:	f003 fc07 	bl	3d186 <assert_print>
   39978:	21ad      	movs	r1, #173	; 0xad
   3997a:	e7e6      	b.n	3994a <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3997c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39980:	2b00      	cmp	r3, #0
   39982:	d1e5      	bne.n	39950 <clear_event_registrations+0x58>
   39984:	4629      	mov	r1, r5
   39986:	22b1      	movs	r2, #177	; 0xb1
   39988:	4630      	mov	r0, r6
   3998a:	f003 fbfc 	bl	3d186 <assert_print>
   3998e:	21b1      	movs	r1, #177	; 0xb1
   39990:	e7db      	b.n	3994a <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39992:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39996:	2b00      	cmp	r3, #0
   39998:	d1da      	bne.n	39950 <clear_event_registrations+0x58>
   3999a:	4629      	mov	r1, r5
   3999c:	22b5      	movs	r2, #181	; 0xb5
   3999e:	4630      	mov	r0, r6
   399a0:	f003 fbf1 	bl	3d186 <assert_print>
   399a4:	21b5      	movs	r1, #181	; 0xb5
   399a6:	e7d0      	b.n	3994a <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   399a8:	4629      	mov	r1, r5
   399aa:	4630      	mov	r0, r6
   399ac:	22bc      	movs	r2, #188	; 0xbc
   399ae:	f003 fbea 	bl	3d186 <assert_print>
   399b2:	21bc      	movs	r1, #188	; 0xbc
   399b4:	4628      	mov	r0, r5
   399b6:	f003 fbdf 	bl	3d178 <assert_post_action>
   399ba:	4648      	mov	r0, r9
   399bc:	f7fd f92a 	bl	36c14 <z_spin_unlock_valid>
   399c0:	b940      	cbnz	r0, 399d4 <clear_event_registrations+0xdc>
   399c2:	4630      	mov	r0, r6
   399c4:	4915      	ldr	r1, [pc, #84]	; (39a1c <clear_event_registrations+0x124>)
   399c6:	22b9      	movs	r2, #185	; 0xb9
   399c8:	f003 fbdd 	bl	3d186 <assert_print>
   399cc:	21b9      	movs	r1, #185	; 0xb9
   399ce:	4813      	ldr	r0, [pc, #76]	; (39a1c <clear_event_registrations+0x124>)
   399d0:	f003 fbd2 	bl	3d178 <assert_post_action>
   399d4:	f388 8811 	msr	BASEPRI, r8
   399d8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   399dc:	f04f 0320 	mov.w	r3, #32
   399e0:	f3ef 8811 	mrs	r8, BASEPRI
   399e4:	f383 8812 	msr	BASEPRI_MAX, r3
   399e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   399ec:	4648      	mov	r0, r9
   399ee:	f7fd f903 	bl	36bf8 <z_spin_lock_valid>
   399f2:	b940      	cbnz	r0, 39a06 <clear_event_registrations+0x10e>
   399f4:	4630      	mov	r0, r6
   399f6:	4909      	ldr	r1, [pc, #36]	; (39a1c <clear_event_registrations+0x124>)
   399f8:	228e      	movs	r2, #142	; 0x8e
   399fa:	f003 fbc4 	bl	3d186 <assert_print>
   399fe:	218e      	movs	r1, #142	; 0x8e
   39a00:	4806      	ldr	r0, [pc, #24]	; (39a1c <clear_event_registrations+0x124>)
   39a02:	f003 fbb9 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39a06:	4648      	mov	r0, r9
   39a08:	f7fd f914 	bl	36c34 <z_spin_lock_set_owner>
	return k;
   39a0c:	4654      	mov	r4, sl
   39a0e:	3f01      	subs	r7, #1
   39a10:	e77d      	b.n	3990e <clear_event_registrations+0x16>
   39a12:	bf00      	nop
   39a14:	0004c54d 	.word	0x0004c54d
   39a18:	0004494f 	.word	0x0004494f
   39a1c:	00044989 	.word	0x00044989
   39a20:	2001a574 	.word	0x2001a574

00039a24 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   39a24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   39a28:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   39a2a:	4b63      	ldr	r3, [pc, #396]	; (39bb8 <z_impl_k_poll+0x194>)
{
   39a2c:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   39a2e:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   39a30:	2301      	movs	r3, #1
{
   39a32:	4688      	mov	r8, r1
   39a34:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   39a36:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   39a3a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   39a3e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   39a42:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   39a46:	b153      	cbz	r3, 39a5e <z_impl_k_poll+0x3a>
   39a48:	495c      	ldr	r1, [pc, #368]	; (39bbc <z_impl_k_poll+0x198>)
   39a4a:	485d      	ldr	r0, [pc, #372]	; (39bc0 <z_impl_k_poll+0x19c>)
   39a4c:	f44f 728d 	mov.w	r2, #282	; 0x11a
   39a50:	f003 fb99 	bl	3d186 <assert_print>
   39a54:	f44f 718d 	mov.w	r1, #282	; 0x11a
   39a58:	4858      	ldr	r0, [pc, #352]	; (39bbc <z_impl_k_poll+0x198>)
   39a5a:	f003 fb8d 	bl	3d178 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   39a5e:	b954      	cbnz	r4, 39a76 <z_impl_k_poll+0x52>
   39a60:	4956      	ldr	r1, [pc, #344]	; (39bbc <z_impl_k_poll+0x198>)
   39a62:	4857      	ldr	r0, [pc, #348]	; (39bc0 <z_impl_k_poll+0x19c>)
   39a64:	f240 121b 	movw	r2, #283	; 0x11b
   39a68:	f003 fb8d 	bl	3d186 <assert_print>
   39a6c:	f240 111b 	movw	r1, #283	; 0x11b
   39a70:	4852      	ldr	r0, [pc, #328]	; (39bbc <z_impl_k_poll+0x198>)
   39a72:	f003 fb81 	bl	3d178 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   39a76:	f1b8 0f00 	cmp.w	r8, #0
   39a7a:	da0a      	bge.n	39a92 <z_impl_k_poll+0x6e>
   39a7c:	494f      	ldr	r1, [pc, #316]	; (39bbc <z_impl_k_poll+0x198>)
   39a7e:	4850      	ldr	r0, [pc, #320]	; (39bc0 <z_impl_k_poll+0x19c>)
   39a80:	f44f 728e 	mov.w	r2, #284	; 0x11c
   39a84:	f003 fb7f 	bl	3d186 <assert_print>
   39a88:	f44f 718e 	mov.w	r1, #284	; 0x11c
   39a8c:	484b      	ldr	r0, [pc, #300]	; (39bbc <z_impl_k_poll+0x198>)
   39a8e:	f003 fb73 	bl	3d178 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   39a92:	ea56 0305 	orrs.w	r3, r6, r5
   39a96:	bf0c      	ite	eq
   39a98:	2301      	moveq	r3, #1
   39a9a:	2300      	movne	r3, #0
   39a9c:	4641      	mov	r1, r8
   39a9e:	464a      	mov	r2, r9
   39aa0:	4620      	mov	r0, r4
   39aa2:	f7ff fe39 	bl	39718 <register_events>
   39aa6:	4680      	mov	r8, r0
   39aa8:	f04f 0320 	mov.w	r3, #32
   39aac:	f3ef 8911 	mrs	r9, BASEPRI
   39ab0:	f383 8812 	msr	BASEPRI_MAX, r3
   39ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39ab8:	4842      	ldr	r0, [pc, #264]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39aba:	f7fd f89d 	bl	36bf8 <z_spin_lock_valid>
   39abe:	b940      	cbnz	r0, 39ad2 <z_impl_k_poll+0xae>
   39ac0:	4941      	ldr	r1, [pc, #260]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39ac2:	483f      	ldr	r0, [pc, #252]	; (39bc0 <z_impl_k_poll+0x19c>)
   39ac4:	228e      	movs	r2, #142	; 0x8e
   39ac6:	f003 fb5e 	bl	3d186 <assert_print>
   39aca:	218e      	movs	r1, #142	; 0x8e
   39acc:	483e      	ldr	r0, [pc, #248]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39ace:	f003 fb53 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39ad2:	483c      	ldr	r0, [pc, #240]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39ad4:	f7fd f8ae 	bl	36c34 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   39ad8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   39adc:	b9d3      	cbnz	r3, 39b14 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   39ade:	4620      	mov	r0, r4
   39ae0:	464a      	mov	r2, r9
   39ae2:	4641      	mov	r1, r8
   39ae4:	f7ff ff08 	bl	398f8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39ae8:	4836      	ldr	r0, [pc, #216]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39aea:	f7fd f893 	bl	36c14 <z_spin_unlock_valid>
   39aee:	b940      	cbnz	r0, 39b02 <z_impl_k_poll+0xde>
   39af0:	4935      	ldr	r1, [pc, #212]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39af2:	4833      	ldr	r0, [pc, #204]	; (39bc0 <z_impl_k_poll+0x19c>)
   39af4:	22b9      	movs	r2, #185	; 0xb9
   39af6:	f003 fb46 	bl	3d186 <assert_print>
   39afa:	21b9      	movs	r1, #185	; 0xb9
   39afc:	4832      	ldr	r0, [pc, #200]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39afe:	f003 fb3b 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   39b02:	f389 8811 	msr	BASEPRI, r9
   39b06:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   39b0a:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   39b0c:	4628      	mov	r0, r5
   39b0e:	b003      	add	sp, #12
   39b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   39b14:	2300      	movs	r3, #0
   39b16:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   39b1a:	ea56 0305 	orrs.w	r3, r6, r5
   39b1e:	d113      	bne.n	39b48 <z_impl_k_poll+0x124>
   39b20:	4828      	ldr	r0, [pc, #160]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39b22:	f7fd f877 	bl	36c14 <z_spin_unlock_valid>
   39b26:	b940      	cbnz	r0, 39b3a <z_impl_k_poll+0x116>
   39b28:	4927      	ldr	r1, [pc, #156]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39b2a:	4825      	ldr	r0, [pc, #148]	; (39bc0 <z_impl_k_poll+0x19c>)
   39b2c:	22b9      	movs	r2, #185	; 0xb9
   39b2e:	f003 fb2a 	bl	3d186 <assert_print>
   39b32:	21b9      	movs	r1, #185	; 0xb9
   39b34:	4824      	ldr	r0, [pc, #144]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39b36:	f003 fb1f 	bl	3d178 <assert_post_action>
   39b3a:	f389 8811 	msr	BASEPRI, r9
   39b3e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   39b42:	f06f 050a 	mvn.w	r5, #10
   39b46:	e7e1      	b.n	39b0c <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   39b48:	e9cd 6500 	strd	r6, r5, [sp]
   39b4c:	4649      	mov	r1, r9
   39b4e:	4a1f      	ldr	r2, [pc, #124]	; (39bcc <z_impl_k_poll+0x1a8>)
   39b50:	481c      	ldr	r0, [pc, #112]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39b52:	f7fe fdb5 	bl	386c0 <z_pend_curr>
   39b56:	4605      	mov	r5, r0
	__asm__ volatile(
   39b58:	f04f 0320 	mov.w	r3, #32
   39b5c:	f3ef 8611 	mrs	r6, BASEPRI
   39b60:	f383 8812 	msr	BASEPRI_MAX, r3
   39b64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39b68:	4816      	ldr	r0, [pc, #88]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39b6a:	f7fd f845 	bl	36bf8 <z_spin_lock_valid>
   39b6e:	b940      	cbnz	r0, 39b82 <z_impl_k_poll+0x15e>
   39b70:	4915      	ldr	r1, [pc, #84]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39b72:	4813      	ldr	r0, [pc, #76]	; (39bc0 <z_impl_k_poll+0x19c>)
   39b74:	228e      	movs	r2, #142	; 0x8e
   39b76:	f003 fb06 	bl	3d186 <assert_print>
   39b7a:	218e      	movs	r1, #142	; 0x8e
   39b7c:	4812      	ldr	r0, [pc, #72]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39b7e:	f003 fafb 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39b82:	4810      	ldr	r0, [pc, #64]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39b84:	f7fd f856 	bl	36c34 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   39b88:	4620      	mov	r0, r4
   39b8a:	4632      	mov	r2, r6
   39b8c:	4641      	mov	r1, r8
   39b8e:	f7ff feb3 	bl	398f8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39b92:	480c      	ldr	r0, [pc, #48]	; (39bc4 <z_impl_k_poll+0x1a0>)
   39b94:	f7fd f83e 	bl	36c14 <z_spin_unlock_valid>
   39b98:	b940      	cbnz	r0, 39bac <z_impl_k_poll+0x188>
   39b9a:	490b      	ldr	r1, [pc, #44]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39b9c:	4808      	ldr	r0, [pc, #32]	; (39bc0 <z_impl_k_poll+0x19c>)
   39b9e:	22b9      	movs	r2, #185	; 0xb9
   39ba0:	f003 faf1 	bl	3d186 <assert_print>
   39ba4:	21b9      	movs	r1, #185	; 0xb9
   39ba6:	4808      	ldr	r0, [pc, #32]	; (39bc8 <z_impl_k_poll+0x1a4>)
   39ba8:	f003 fae6 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   39bac:	f386 8811 	msr	BASEPRI, r6
   39bb0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   39bb4:	e7aa      	b.n	39b0c <z_impl_k_poll+0xe8>
   39bb6:	bf00      	nop
   39bb8:	2001a518 	.word	0x2001a518
   39bbc:	0004c54d 	.word	0x0004c54d
   39bc0:	0004494f 	.word	0x0004494f
   39bc4:	2001a574 	.word	0x2001a574
   39bc8:	00044989 	.word	0x00044989
   39bcc:	20014a6c 	.word	0x20014a6c

00039bd0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   39bd0:	b570      	push	{r4, r5, r6, lr}
   39bd2:	4604      	mov	r4, r0
   39bd4:	460d      	mov	r5, r1
	__asm__ volatile(
   39bd6:	f04f 0320 	mov.w	r3, #32
   39bda:	f3ef 8611 	mrs	r6, BASEPRI
   39bde:	f383 8812 	msr	BASEPRI_MAX, r3
   39be2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39be6:	481c      	ldr	r0, [pc, #112]	; (39c58 <z_impl_k_poll_signal_raise+0x88>)
   39be8:	f7fd f806 	bl	36bf8 <z_spin_lock_valid>
   39bec:	b940      	cbnz	r0, 39c00 <z_impl_k_poll_signal_raise+0x30>
   39bee:	491b      	ldr	r1, [pc, #108]	; (39c5c <z_impl_k_poll_signal_raise+0x8c>)
   39bf0:	481b      	ldr	r0, [pc, #108]	; (39c60 <z_impl_k_poll_signal_raise+0x90>)
   39bf2:	228e      	movs	r2, #142	; 0x8e
   39bf4:	f003 fac7 	bl	3d186 <assert_print>
   39bf8:	218e      	movs	r1, #142	; 0x8e
   39bfa:	4818      	ldr	r0, [pc, #96]	; (39c5c <z_impl_k_poll_signal_raise+0x8c>)
   39bfc:	f003 fabc 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39c00:	4815      	ldr	r0, [pc, #84]	; (39c58 <z_impl_k_poll_signal_raise+0x88>)
   39c02:	f7fd f817 	bl	36c34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   39c06:	2101      	movs	r1, #1
	return list->head == list;
   39c08:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   39c0a:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   39c0c:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   39c0e:	60a1      	str	r1, [r4, #8]
   39c10:	d112      	bne.n	39c38 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39c12:	4811      	ldr	r0, [pc, #68]	; (39c58 <z_impl_k_poll_signal_raise+0x88>)
   39c14:	f7fc fffe 	bl	36c14 <z_spin_unlock_valid>
   39c18:	b940      	cbnz	r0, 39c2c <z_impl_k_poll_signal_raise+0x5c>
   39c1a:	4910      	ldr	r1, [pc, #64]	; (39c5c <z_impl_k_poll_signal_raise+0x8c>)
   39c1c:	4810      	ldr	r0, [pc, #64]	; (39c60 <z_impl_k_poll_signal_raise+0x90>)
   39c1e:	22b9      	movs	r2, #185	; 0xb9
   39c20:	f003 fab1 	bl	3d186 <assert_print>
   39c24:	21b9      	movs	r1, #185	; 0xb9
   39c26:	480d      	ldr	r0, [pc, #52]	; (39c5c <z_impl_k_poll_signal_raise+0x8c>)
   39c28:	f003 faa6 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   39c2c:	f386 8811 	msr	BASEPRI, r6
   39c30:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   39c34:	2400      	movs	r4, #0
   39c36:	e00d      	b.n	39c54 <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   39c38:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   39c3c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   39c3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39c40:	2300      	movs	r3, #0
	node->prev = NULL;
   39c42:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   39c46:	f007 fe5e 	bl	41906 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   39c4a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   39c4c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   39c4e:	4802      	ldr	r0, [pc, #8]	; (39c58 <z_impl_k_poll_signal_raise+0x88>)
   39c50:	f7fe f95e 	bl	37f10 <z_reschedule>
	return rc;
}
   39c54:	4620      	mov	r0, r4
   39c56:	bd70      	pop	{r4, r5, r6, pc}
   39c58:	2001a574 	.word	0x2001a574
   39c5c:	00044989 	.word	0x00044989
   39c60:	0004494f 	.word	0x0004494f

00039c64 <k_event_post_internal>:
	return match != 0;
}

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  bool accumulate)
{
   39c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39c68:	4605      	mov	r5, r0
   39c6a:	460e      	mov	r6, r1
   39c6c:	4614      	mov	r4, r2
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	unsigned int      wait_condition;
	struct k_thread  *head = NULL;

	key = k_spin_lock(&event->lock);
   39c6e:	f100 070c 	add.w	r7, r0, #12
	__asm__ volatile(
   39c72:	f04f 0320 	mov.w	r3, #32
   39c76:	f3ef 8811 	mrs	r8, BASEPRI
   39c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   39c7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39c82:	4638      	mov	r0, r7
   39c84:	f7fc ffb8 	bl	36bf8 <z_spin_lock_valid>
   39c88:	b940      	cbnz	r0, 39c9c <k_event_post_internal+0x38>
   39c8a:	4920      	ldr	r1, [pc, #128]	; (39d0c <k_event_post_internal+0xa8>)
   39c8c:	4820      	ldr	r0, [pc, #128]	; (39d10 <k_event_post_internal+0xac>)
   39c8e:	228e      	movs	r2, #142	; 0x8e
   39c90:	f003 fa79 	bl	3d186 <assert_print>
   39c94:	218e      	movs	r1, #142	; 0x8e
   39c96:	481d      	ldr	r0, [pc, #116]	; (39d0c <k_event_post_internal+0xa8>)
   39c98:	f003 fa6e 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39c9c:	4638      	mov	r0, r7
   39c9e:	f7fc ffc9 	bl	36c34 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					accumulate);

	if (accumulate) {
   39ca2:	b10c      	cbz	r4, 39ca8 <k_event_post_internal+0x44>
		events |= event->events;
   39ca4:	68ab      	ldr	r3, [r5, #8]
   39ca6:	431e      	orrs	r6, r3
	return list->head == list;
   39ca8:	682b      	ldr	r3, [r5, #0]
	 * 1. Create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   39caa:	2400      	movs	r4, #0
   39cac:	429d      	cmp	r5, r3
   39cae:	bf08      	it	eq
   39cb0:	2300      	moveq	r3, #0
	event->events = events;
   39cb2:	60ae      	str	r6, [r5, #8]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   39cb4:	b1fb      	cbz	r3, 39cf6 <k_event_post_internal+0x92>
		wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   39cb6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c

		if (are_wait_conditions_met(thread->events, events,
   39cb8:	6e98      	ldr	r0, [r3, #104]	; 0x68
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39cba:	07c9      	lsls	r1, r1, #31
	uint32_t  match = current & desired;
   39cbc:	ea00 0206 	and.w	r2, r0, r6
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39cc0:	d51f      	bpl.n	39d02 <k_event_post_internal+0x9e>
		return match == desired;
   39cc2:	1a81      	subs	r1, r0, r2
   39cc4:	424a      	negs	r2, r1
   39cc6:	414a      	adcs	r2, r1
		if (are_wait_conditions_met(thread->events, events,
   39cc8:	b10a      	cbz	r2, 39cce <k_event_post_internal+0x6a>
			/*
			 * The wait conditions have been satisfied. Add this
			 * thread to the list of threads to unpend.
			 */

			thread->next_event_link = head;
   39cca:	665c      	str	r4, [r3, #100]	; 0x64
   39ccc:	461c      	mov	r4, r3
	return (node == list->tail) ? NULL : node->next;
   39cce:	686a      	ldr	r2, [r5, #4]
   39cd0:	4293      	cmp	r3, r2
   39cd2:	d002      	beq.n	39cda <k_event_post_internal+0x76>
   39cd4:	681b      	ldr	r3, [r3, #0]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   39cd6:	2b00      	cmp	r3, #0
   39cd8:	d1ed      	bne.n	39cb6 <k_event_post_internal+0x52>
		}


	}

	if (head != NULL) {
   39cda:	b164      	cbz	r4, 39cf6 <k_event_post_internal+0x92>
   39cdc:	2500      	movs	r5, #0
		thread = head;
		do {
			z_unpend_thread(thread);
   39cde:	4620      	mov	r0, r4
   39ce0:	f7fe f9dc 	bl	3809c <z_unpend_thread>
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
			z_ready_thread(thread);
   39ce4:	4620      	mov	r0, r4
   39ce6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
			thread->events = events;
   39cea:	66a6      	str	r6, [r4, #104]	; 0x68
			z_ready_thread(thread);
   39cec:	f7fe fb40 	bl	38370 <z_ready_thread>
			thread = thread->next_event_link;
   39cf0:	6e64      	ldr	r4, [r4, #100]	; 0x64
		} while (thread != NULL);
   39cf2:	2c00      	cmp	r4, #0
   39cf4:	d1f3      	bne.n	39cde <k_event_post_internal+0x7a>
	}

	z_reschedule(&event->lock, key);
   39cf6:	4641      	mov	r1, r8
   39cf8:	4638      	mov	r0, r7

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       accumulate);
}
   39cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_reschedule(&event->lock, key);
   39cfe:	f7fe b907 	b.w	37f10 <z_reschedule>
	return match != 0;
   39d02:	3a00      	subs	r2, #0
   39d04:	bf18      	it	ne
   39d06:	2201      	movne	r2, #1
   39d08:	e7de      	b.n	39cc8 <k_event_post_internal+0x64>
   39d0a:	bf00      	nop
   39d0c:	00044989 	.word	0x00044989
   39d10:	0004494f 	.word	0x0004494f

00039d14 <k_event_wait_internal>:
#include <syscalls/k_event_set_mrsh.c>
#endif

static uint32_t k_event_wait_internal(struct k_event *event, uint32_t events,
				      unsigned int options, k_timeout_t timeout)
{
   39d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d18:	b085      	sub	sp, #20
   39d1a:	e9dd b30e 	ldrd	fp, r3, [sp, #56]	; 0x38
   39d1e:	4605      	mov	r5, r0
   39d20:	460c      	mov	r4, r1
   39d22:	4690      	mov	r8, r2
   39d24:	9302      	str	r3, [sp, #8]
   39d26:	f3ef 8305 	mrs	r3, IPSR
	uint32_t  rv = 0;
	unsigned int  wait_condition;
	struct k_thread  *thread;

	__ASSERT(((arch_is_in_isr() == false) ||
   39d2a:	b163      	cbz	r3, 39d46 <k_event_wait_internal+0x32>
   39d2c:	9b02      	ldr	r3, [sp, #8]
   39d2e:	ea5b 0303 	orrs.w	r3, fp, r3
   39d32:	d008      	beq.n	39d46 <k_event_wait_internal+0x32>
   39d34:	493a      	ldr	r1, [pc, #232]	; (39e20 <k_event_wait_internal+0x10c>)
   39d36:	483b      	ldr	r0, [pc, #236]	; (39e24 <k_event_wait_internal+0x110>)
   39d38:	22ba      	movs	r2, #186	; 0xba
   39d3a:	f003 fa24 	bl	3d186 <assert_print>
   39d3e:	21ba      	movs	r1, #186	; 0xba
   39d40:	4837      	ldr	r0, [pc, #220]	; (39e20 <k_event_wait_internal+0x10c>)
   39d42:	f003 fa19 	bl	3d178 <assert_post_action>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, wait, event, events,
					options, timeout);

	if (events == 0) {
   39d46:	2c00      	cmp	r4, #0
   39d48:	d03d      	beq.n	39dc6 <k_event_wait_internal+0xb2>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event, events, 0);
		return 0;
	}

	wait_condition = options & K_EVENT_WAIT_MASK;
   39d4a:	f008 0301 	and.w	r3, r8, #1
   39d4e:	9303      	str	r3, [sp, #12]
	return z_impl_z_current_get();
   39d50:	f7fe ff9a 	bl	38c88 <z_impl_z_current_get>
	thread = z_current_get();

	k_spinlock_key_t  key = k_spin_lock(&event->lock);
   39d54:	f105 0a0c 	add.w	sl, r5, #12
   39d58:	4607      	mov	r7, r0
   39d5a:	f04f 0220 	mov.w	r2, #32
   39d5e:	f3ef 8911 	mrs	r9, BASEPRI
   39d62:	f382 8812 	msr	BASEPRI_MAX, r2
   39d66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39d6a:	4650      	mov	r0, sl
   39d6c:	f7fc ff44 	bl	36bf8 <z_spin_lock_valid>
   39d70:	b940      	cbnz	r0, 39d84 <k_event_wait_internal+0x70>
   39d72:	492d      	ldr	r1, [pc, #180]	; (39e28 <k_event_wait_internal+0x114>)
   39d74:	482b      	ldr	r0, [pc, #172]	; (39e24 <k_event_wait_internal+0x110>)
   39d76:	228e      	movs	r2, #142	; 0x8e
   39d78:	f003 fa05 	bl	3d186 <assert_print>
   39d7c:	218e      	movs	r1, #142	; 0x8e
   39d7e:	482a      	ldr	r0, [pc, #168]	; (39e28 <k_event_wait_internal+0x114>)
   39d80:	f003 f9fa 	bl	3d178 <assert_post_action>
	z_spin_lock_set_owner(l);
   39d84:	4650      	mov	r0, sl
   39d86:	f7fc ff55 	bl	36c34 <z_spin_lock_set_owner>

	if (options & K_EVENT_WAIT_RESET) {
   39d8a:	f018 0f02 	tst.w	r8, #2
		event->events = 0;
   39d8e:	bf1c      	itt	ne
   39d90:	2200      	movne	r2, #0
   39d92:	60aa      	strne	r2, [r5, #8]
	}

	/* Test if the wait conditions have already been met. */

	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   39d94:	68ae      	ldr	r6, [r5, #8]
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39d96:	9b03      	ldr	r3, [sp, #12]
	uint32_t  match = current & desired;
   39d98:	ea06 0204 	and.w	r2, r6, r4
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39d9c:	b1bb      	cbz	r3, 39dce <k_event_wait_internal+0xba>
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   39d9e:	4294      	cmp	r4, r2
   39da0:	d117      	bne.n	39dd2 <k_event_wait_internal+0xbe>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39da2:	4650      	mov	r0, sl
   39da4:	f7fc ff36 	bl	36c14 <z_spin_unlock_valid>
   39da8:	b940      	cbnz	r0, 39dbc <k_event_wait_internal+0xa8>
   39daa:	491f      	ldr	r1, [pc, #124]	; (39e28 <k_event_wait_internal+0x114>)
   39dac:	481d      	ldr	r0, [pc, #116]	; (39e24 <k_event_wait_internal+0x110>)
   39dae:	22b9      	movs	r2, #185	; 0xb9
   39db0:	f003 f9e9 	bl	3d186 <assert_print>
   39db4:	21b9      	movs	r1, #185	; 0xb9
   39db6:	481c      	ldr	r0, [pc, #112]	; (39e28 <k_event_wait_internal+0x114>)
   39db8:	f003 f9de 	bl	3d178 <assert_post_action>
	__asm__ volatile(
   39dbc:	f389 8811 	msr	BASEPRI, r9
   39dc0:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event,
				       events, rv & events);

	return rv & events;
   39dc4:	4034      	ands	r4, r6
}
   39dc6:	4620      	mov	r0, r4
   39dc8:	b005      	add	sp, #20
   39dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   39dce:	2a00      	cmp	r2, #0
   39dd0:	d1e7      	bne.n	39da2 <k_event_wait_internal+0x8e>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   39dd2:	9b02      	ldr	r3, [sp, #8]
   39dd4:	ea5b 0303 	orrs.w	r3, fp, r3
   39dd8:	d112      	bne.n	39e00 <k_event_wait_internal+0xec>
   39dda:	4650      	mov	r0, sl
   39ddc:	f7fc ff1a 	bl	36c14 <z_spin_unlock_valid>
   39de0:	b940      	cbnz	r0, 39df4 <k_event_wait_internal+0xe0>
   39de2:	4911      	ldr	r1, [pc, #68]	; (39e28 <k_event_wait_internal+0x114>)
   39de4:	480f      	ldr	r0, [pc, #60]	; (39e24 <k_event_wait_internal+0x110>)
   39de6:	22b9      	movs	r2, #185	; 0xb9
   39de8:	f003 f9cd 	bl	3d186 <assert_print>
   39dec:	21b9      	movs	r1, #185	; 0xb9
   39dee:	480e      	ldr	r0, [pc, #56]	; (39e28 <k_event_wait_internal+0x114>)
   39df0:	f003 f9c2 	bl	3d178 <assert_post_action>
   39df4:	f389 8811 	msr	BASEPRI, r9
   39df8:	f3bf 8f6f 	isb	sy
	uint32_t  rv = 0;
   39dfc:	2600      	movs	r6, #0
   39dfe:	e7e1      	b.n	39dc4 <k_event_wait_internal+0xb0>
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   39e00:	9b02      	ldr	r3, [sp, #8]
	thread->event_options = options;
   39e02:	e9c7 481a 	strd	r4, r8, [r7, #104]	; 0x68
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   39e06:	462a      	mov	r2, r5
   39e08:	4649      	mov	r1, r9
   39e0a:	4650      	mov	r0, sl
   39e0c:	f8cd b000 	str.w	fp, [sp]
   39e10:	9301      	str	r3, [sp, #4]
   39e12:	f7fe fc55 	bl	386c0 <z_pend_curr>
   39e16:	2800      	cmp	r0, #0
   39e18:	d1f0      	bne.n	39dfc <k_event_wait_internal+0xe8>
		rv = thread->events;
   39e1a:	6ebe      	ldr	r6, [r7, #104]	; 0x68
   39e1c:	e7d2      	b.n	39dc4 <k_event_wait_internal+0xb0>
   39e1e:	bf00      	nop
   39e20:	0004c56e 	.word	0x0004c56e
   39e24:	0004494f 	.word	0x0004494f
   39e28:	00044989 	.word	0x00044989

00039e2c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   39e2c:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   39e2e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   39e32:	4606      	mov	r6, r0
   39e34:	460d      	mov	r5, r1
   39e36:	d20a      	bcs.n	39e4e <z_heap_aligned_alloc+0x22>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   39e38:	f04f 0800 	mov.w	r8, #0
   39e3c:	f04f 0900 	mov.w	r9, #0
   39e40:	f041 0104 	orr.w	r1, r1, #4
   39e44:	e9cd 8900 	strd	r8, r9, [sp]
   39e48:	f7fc fcc0 	bl	367cc <k_heap_aligned_alloc>
	if (mem == NULL) {
   39e4c:	b920      	cbnz	r0, 39e58 <z_heap_aligned_alloc+0x2c>
		return NULL;
   39e4e:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   39e50:	4620      	mov	r0, r4
   39e52:	b002      	add	sp, #8
   39e54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   39e58:	4604      	mov	r4, r0
   39e5a:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   39e5e:	2d00      	cmp	r5, #0
   39e60:	d0f6      	beq.n	39e50 <z_heap_aligned_alloc+0x24>
   39e62:	3d01      	subs	r5, #1
   39e64:	422c      	tst	r4, r5
   39e66:	d0f3      	beq.n	39e50 <z_heap_aligned_alloc+0x24>
   39e68:	2225      	movs	r2, #37	; 0x25
   39e6a:	4904      	ldr	r1, [pc, #16]	; (39e7c <z_heap_aligned_alloc+0x50>)
   39e6c:	4804      	ldr	r0, [pc, #16]	; (39e80 <z_heap_aligned_alloc+0x54>)
   39e6e:	f003 f98a 	bl	3d186 <assert_print>
   39e72:	2125      	movs	r1, #37	; 0x25
   39e74:	4801      	ldr	r0, [pc, #4]	; (39e7c <z_heap_aligned_alloc+0x50>)
   39e76:	f003 f97f 	bl	3d178 <assert_post_action>
   39e7a:	e7e9      	b.n	39e50 <z_heap_aligned_alloc+0x24>
   39e7c:	0004c591 	.word	0x0004c591
   39e80:	0004494f 	.word	0x0004494f

00039e84 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   39e84:	2803      	cmp	r0, #3
{
   39e86:	b538      	push	{r3, r4, r5, lr}
   39e88:	4604      	mov	r4, r0
   39e8a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   39e8c:	d901      	bls.n	39e92 <k_aligned_alloc+0xe>
   39e8e:	0783      	lsls	r3, r0, #30
   39e90:	d008      	beq.n	39ea4 <k_aligned_alloc+0x20>
   39e92:	490e      	ldr	r1, [pc, #56]	; (39ecc <k_aligned_alloc+0x48>)
   39e94:	480e      	ldr	r0, [pc, #56]	; (39ed0 <k_aligned_alloc+0x4c>)
   39e96:	2242      	movs	r2, #66	; 0x42
   39e98:	f003 f975 	bl	3d186 <assert_print>
   39e9c:	2142      	movs	r1, #66	; 0x42
   39e9e:	480b      	ldr	r0, [pc, #44]	; (39ecc <k_aligned_alloc+0x48>)
   39ea0:	f003 f96a 	bl	3d178 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   39ea4:	1e63      	subs	r3, r4, #1
   39ea6:	4223      	tst	r3, r4
   39ea8:	d008      	beq.n	39ebc <k_aligned_alloc+0x38>
   39eaa:	4908      	ldr	r1, [pc, #32]	; (39ecc <k_aligned_alloc+0x48>)
   39eac:	4808      	ldr	r0, [pc, #32]	; (39ed0 <k_aligned_alloc+0x4c>)
   39eae:	2246      	movs	r2, #70	; 0x46
   39eb0:	f003 f969 	bl	3d186 <assert_print>
   39eb4:	2146      	movs	r1, #70	; 0x46
   39eb6:	4805      	ldr	r0, [pc, #20]	; (39ecc <k_aligned_alloc+0x48>)
   39eb8:	f003 f95e 	bl	3d178 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   39ebc:	462a      	mov	r2, r5
   39ebe:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   39ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   39ec4:	4803      	ldr	r0, [pc, #12]	; (39ed4 <k_aligned_alloc+0x50>)
   39ec6:	f7ff bfb1 	b.w	39e2c <z_heap_aligned_alloc>
   39eca:	bf00      	nop
   39ecc:	0004c591 	.word	0x0004c591
   39ed0:	0004494f 	.word	0x0004494f
   39ed4:	20014e68 	.word	0x20014e68

00039ed8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   39ed8:	4b01      	ldr	r3, [pc, #4]	; (39ee0 <k_thread_system_pool_assign+0x8>)
   39eda:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
   39ede:	4770      	bx	lr
   39ee0:	20014e68 	.word	0x20014e68

00039ee4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   39ee4:	b513      	push	{r0, r1, r4, lr}
   39ee6:	4604      	mov	r4, r0
   39ee8:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   39eea:	f007 fbd3 	bl	41694 <k_is_in_isr>
   39eee:	9a01      	ldr	r2, [sp, #4]
   39ef0:	b958      	cbnz	r0, 39f0a <z_thread_aligned_alloc+0x26>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   39ef2:	4b08      	ldr	r3, [pc, #32]	; (39f14 <z_thread_aligned_alloc+0x30>)
   39ef4:	689b      	ldr	r3, [r3, #8]
   39ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap != NULL) {
   39efa:	b143      	cbz	r3, 39f0e <z_thread_aligned_alloc+0x2a>
		ret = z_heap_aligned_alloc(heap, align, size);
   39efc:	4621      	mov	r1, r4
   39efe:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   39f00:	b002      	add	sp, #8
   39f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   39f06:	f7ff bf91 	b.w	39e2c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   39f0a:	4b03      	ldr	r3, [pc, #12]	; (39f18 <z_thread_aligned_alloc+0x34>)
   39f0c:	e7f6      	b.n	39efc <z_thread_aligned_alloc+0x18>
}
   39f0e:	b002      	add	sp, #8
   39f10:	bd10      	pop	{r4, pc}
   39f12:	bf00      	nop
   39f14:	2001a518 	.word	0x2001a518
   39f18:	20014e68 	.word	0x20014e68

00039f1c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   39f1c:	4a02      	ldr	r2, [pc, #8]	; (39f28 <boot_banner+0xc>)
   39f1e:	4903      	ldr	r1, [pc, #12]	; (39f2c <boot_banner+0x10>)
   39f20:	4803      	ldr	r0, [pc, #12]	; (39f30 <boot_banner+0x14>)
   39f22:	f002 bf4d 	b.w	3cdc0 <printk>
   39f26:	bf00      	nop
   39f28:	00045b14 	.word	0x00045b14
   39f2c:	0004c5b5 	.word	0x0004c5b5
   39f30:	0004c5c2 	.word	0x0004c5c2

00039f34 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   39f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   39f36:	2400      	movs	r4, #0
   39f38:	4b08      	ldr	r3, [pc, #32]	; (39f5c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   39f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   39f3e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   39f40:	ab02      	add	r3, sp, #8
   39f42:	9300      	str	r3, [sp, #0]
   39f44:	4906      	ldr	r1, [pc, #24]	; (39f60 <k_sys_work_q_init+0x2c>)
   39f46:	f04f 33ff 	mov.w	r3, #4294967295
   39f4a:	4806      	ldr	r0, [pc, #24]	; (39f64 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   39f4c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   39f50:	f7fd fd92 	bl	37a78 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   39f54:	4620      	mov	r0, r4
   39f56:	b004      	add	sp, #16
   39f58:	bd10      	pop	{r4, pc}
   39f5a:	bf00      	nop
   39f5c:	0004c5e9 	.word	0x0004c5e9
   39f60:	20028358 	.word	0x20028358
   39f64:	20018fb8 	.word	0x20018fb8

00039f68 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   39f68:	b530      	push	{r4, r5, lr}
   39f6a:	b095      	sub	sp, #84	; 0x54
   39f6c:	4605      	mov	r5, r0
   39f6e:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   39f70:	2230      	movs	r2, #48	; 0x30
   39f72:	2100      	movs	r1, #0
   39f74:	a808      	add	r0, sp, #32
   39f76:	f007 fdf3 	bl	41b60 <memset>
   39f7a:	233f      	movs	r3, #63	; 0x3f
   39f7c:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   39f7e:	ab07      	add	r3, sp, #28
   39f80:	9303      	str	r3, [sp, #12]
   39f82:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   39f84:	9406      	str	r4, [sp, #24]
   39f86:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   39f8a:	b154      	cbz	r4, 39fa2 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   39f8c:	2301      	movs	r3, #1
   39f8e:	aa05      	add	r2, sp, #20
   39f90:	9200      	str	r2, [sp, #0]
   39f92:	2100      	movs	r1, #0
   39f94:	4804      	ldr	r0, [pc, #16]	; (39fa8 <psa_generate_random+0x40>)
   39f96:	9301      	str	r3, [sp, #4]
   39f98:	aa03      	add	r2, sp, #12
   39f9a:	f000 f815 	bl	39fc8 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   39f9e:	b015      	add	sp, #84	; 0x54
   39fa0:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   39fa2:	4620      	mov	r0, r4
   39fa4:	e7fb      	b.n	39f9e <psa_generate_random+0x36>
   39fa6:	bf00      	nop
   39fa8:	40000100 	.word	0x40000100

00039fac <psa_connect>:
                                0);
}

psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   39fac:	2300      	movs	r3, #0
{
   39fae:	b507      	push	{r0, r1, r2, lr}
   39fb0:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   39fb2:	9300      	str	r3, [sp, #0]
   39fb4:	4601      	mov	r1, r0
   39fb6:	4803      	ldr	r0, [pc, #12]	; (39fc4 <psa_connect+0x18>)
   39fb8:	f7f7 fe08 	bl	31bcc <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   39fbc:	b003      	add	sp, #12
   39fbe:	f85d fb04 	ldr.w	pc, [sp], #4
   39fc2:	bf00      	nop
   39fc4:	00017c19 	.word	0x00017c19

00039fc8 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   39fc8:	b470      	push	{r4, r5, r6}
   39fca:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if ((type > INT16_MAX) ||
   39fce:	f501 4600 	add.w	r6, r1, #32768	; 0x8000
   39fd2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   39fd6:	d20d      	bcs.n	39ff4 <psa_call+0x2c>
        (type < INT16_MIN) ||
   39fd8:	2bff      	cmp	r3, #255	; 0xff
   39fda:	d80b      	bhi.n	39ff4 <psa_call+0x2c>
        (in_len > UINT8_MAX) ||
   39fdc:	2cff      	cmp	r4, #255	; 0xff
   39fde:	d809      	bhi.n	39ff4 <psa_call+0x2c>
        (out_len > UINT8_MAX)) {
        return PSA_ERROR_PROGRAMMER_ERROR;
    }

    return tfm_ns_interface_dispatch(
   39fe0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   39fe4:	4613      	mov	r3, r2
   39fe6:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   39fea:	4601      	mov	r1, r0
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   39fec:	bc70      	pop	{r4, r5, r6}
    return tfm_ns_interface_dispatch(
   39fee:	4803      	ldr	r0, [pc, #12]	; (39ffc <psa_call+0x34>)
   39ff0:	f7f7 bdec 	b.w	31bcc <tfm_ns_interface_dispatch>
}
   39ff4:	f06f 0080 	mvn.w	r0, #128	; 0x80
   39ff8:	bc70      	pop	{r4, r5, r6}
   39ffa:	4770      	bx	lr
   39ffc:	00017c21 	.word	0x00017c21

0003a000 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   3a000:	2300      	movs	r3, #0
{
   3a002:	b507      	push	{r0, r1, r2, lr}
   3a004:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   3a006:	461a      	mov	r2, r3
   3a008:	9300      	str	r3, [sp, #0]
   3a00a:	4803      	ldr	r0, [pc, #12]	; (3a018 <psa_close+0x18>)
   3a00c:	f7f7 fdde 	bl	31bcc <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   3a010:	b003      	add	sp, #12
   3a012:	f85d fb04 	ldr.w	pc, [sp], #4
   3a016:	bf00      	nop
   3a018:	00017c11 	.word	0x00017c11

0003a01c <__assert_func>:
   3a01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3a01e:	4614      	mov	r4, r2
   3a020:	461a      	mov	r2, r3
   3a022:	4b09      	ldr	r3, [pc, #36]	; (3a048 <__assert_func+0x2c>)
   3a024:	4605      	mov	r5, r0
   3a026:	681b      	ldr	r3, [r3, #0]
   3a028:	68d8      	ldr	r0, [r3, #12]
   3a02a:	b14c      	cbz	r4, 3a040 <__assert_func+0x24>
   3a02c:	4b07      	ldr	r3, [pc, #28]	; (3a04c <__assert_func+0x30>)
   3a02e:	9100      	str	r1, [sp, #0]
   3a030:	4907      	ldr	r1, [pc, #28]	; (3a050 <__assert_func+0x34>)
   3a032:	e9cd 3401 	strd	r3, r4, [sp, #4]
   3a036:	462b      	mov	r3, r5
   3a038:	f000 f80e 	bl	3a058 <fiprintf>
   3a03c:	f008 f810 	bl	42060 <abort>
   3a040:	4b04      	ldr	r3, [pc, #16]	; (3a054 <__assert_func+0x38>)
   3a042:	461c      	mov	r4, r3
   3a044:	e7f3      	b.n	3a02e <__assert_func+0x12>
   3a046:	bf00      	nop
   3a048:	20014a74 	.word	0x20014a74
   3a04c:	0004c5f2 	.word	0x0004c5f2
   3a050:	0004c5ff 	.word	0x0004c5ff
   3a054:	00045b14 	.word	0x00045b14

0003a058 <fiprintf>:
   3a058:	b40e      	push	{r1, r2, r3}
   3a05a:	b503      	push	{r0, r1, lr}
   3a05c:	ab03      	add	r3, sp, #12
   3a05e:	4601      	mov	r1, r0
   3a060:	4805      	ldr	r0, [pc, #20]	; (3a078 <fiprintf+0x20>)
   3a062:	f853 2b04 	ldr.w	r2, [r3], #4
   3a066:	6800      	ldr	r0, [r0, #0]
   3a068:	9301      	str	r3, [sp, #4]
   3a06a:	f000 f969 	bl	3a340 <_vfiprintf_r>
   3a06e:	b002      	add	sp, #8
   3a070:	f85d eb04 	ldr.w	lr, [sp], #4
   3a074:	b003      	add	sp, #12
   3a076:	4770      	bx	lr
   3a078:	20014a74 	.word	0x20014a74

0003a07c <gmtime_r>:
   3a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a080:	e9d0 6700 	ldrd	r6, r7, [r0]
   3a084:	460c      	mov	r4, r1
   3a086:	4a4f      	ldr	r2, [pc, #316]	; (3a1c4 <gmtime_r+0x148>)
   3a088:	2300      	movs	r3, #0
   3a08a:	4630      	mov	r0, r6
   3a08c:	4639      	mov	r1, r7
   3a08e:	f04f 0805 	mov.w	r8, #5
   3a092:	f7e2 fed9 	bl	1ce48 <__aeabi_ldivmod>
   3a096:	4639      	mov	r1, r7
   3a098:	4605      	mov	r5, r0
   3a09a:	4a4a      	ldr	r2, [pc, #296]	; (3a1c4 <gmtime_r+0x148>)
   3a09c:	4630      	mov	r0, r6
   3a09e:	2300      	movs	r3, #0
   3a0a0:	f7e2 fed2 	bl	1ce48 <__aeabi_ldivmod>
   3a0a4:	2a00      	cmp	r2, #0
   3a0a6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   3a0aa:	4d47      	ldr	r5, [pc, #284]	; (3a1c8 <gmtime_r+0x14c>)
   3a0ac:	bfb8      	it	lt
   3a0ae:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   3a0b2:	f240 1c6d 	movw	ip, #365	; 0x16d
   3a0b6:	bfae      	itee	ge
   3a0b8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
   3a0bc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
   3a0c0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   3a0c4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   3a0c8:	2764      	movs	r7, #100	; 0x64
   3a0ca:	fbb2 f1f0 	udiv	r1, r2, r0
   3a0ce:	fb00 2211 	mls	r2, r0, r1, r2
   3a0d2:	203c      	movs	r0, #60	; 0x3c
   3a0d4:	60a1      	str	r1, [r4, #8]
   3a0d6:	fbb2 f1f0 	udiv	r1, r2, r0
   3a0da:	fb00 2211 	mls	r2, r0, r1, r2
   3a0de:	483b      	ldr	r0, [pc, #236]	; (3a1cc <gmtime_r+0x150>)
   3a0e0:	6061      	str	r1, [r4, #4]
   3a0e2:	2107      	movs	r1, #7
   3a0e4:	6022      	str	r2, [r4, #0]
   3a0e6:	1cda      	adds	r2, r3, #3
   3a0e8:	fb92 f1f1 	sdiv	r1, r2, r1
   3a0ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   3a0f0:	1a52      	subs	r2, r2, r1
   3a0f2:	bf48      	it	mi
   3a0f4:	3207      	addmi	r2, #7
   3a0f6:	2b00      	cmp	r3, #0
   3a0f8:	61a2      	str	r2, [r4, #24]
   3a0fa:	bfbb      	ittet	lt
   3a0fc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
   3a100:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
   3a104:	fb93 f5f5 	sdivge	r5, r3, r5
   3a108:	fb92 f5f5 	sdivlt	r5, r2, r5
   3a10c:	f648 62ac 	movw	r2, #36524	; 0x8eac
   3a110:	fb00 3005 	mla	r0, r0, r5, r3
   3a114:	f240 53b4 	movw	r3, #1460	; 0x5b4
   3a118:	fbb0 f2f2 	udiv	r2, r0, r2
   3a11c:	fbb0 f1f3 	udiv	r1, r0, r3
   3a120:	4402      	add	r2, r0
   3a122:	1a52      	subs	r2, r2, r1
   3a124:	492a      	ldr	r1, [pc, #168]	; (3a1d0 <gmtime_r+0x154>)
   3a126:	fbb0 f1f1 	udiv	r1, r0, r1
   3a12a:	1a52      	subs	r2, r2, r1
   3a12c:	fbb2 f1fc 	udiv	r1, r2, ip
   3a130:	fbb2 f3f3 	udiv	r3, r2, r3
   3a134:	fbb1 f6f7 	udiv	r6, r1, r7
   3a138:	1af3      	subs	r3, r6, r3
   3a13a:	2299      	movs	r2, #153	; 0x99
   3a13c:	4403      	add	r3, r0
   3a13e:	fb0c 3311 	mls	r3, ip, r1, r3
   3a142:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   3a146:	f103 0c01 	add.w	ip, r3, #1
   3a14a:	f10e 0e02 	add.w	lr, lr, #2
   3a14e:	fbbe f0f2 	udiv	r0, lr, r2
   3a152:	4342      	muls	r2, r0
   3a154:	3202      	adds	r2, #2
   3a156:	fbb2 f2f8 	udiv	r2, r2, r8
   3a15a:	ebac 0c02 	sub.w	ip, ip, r2
   3a15e:	f240 52f9 	movw	r2, #1529	; 0x5f9
   3a162:	4596      	cmp	lr, r2
   3a164:	bf94      	ite	ls
   3a166:	2202      	movls	r2, #2
   3a168:	f06f 0209 	mvnhi.w	r2, #9
   3a16c:	4410      	add	r0, r2
   3a16e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   3a172:	fb02 1505 	mla	r5, r2, r5, r1
   3a176:	2801      	cmp	r0, #1
   3a178:	bf98      	it	ls
   3a17a:	3501      	addls	r5, #1
   3a17c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   3a180:	d30d      	bcc.n	3a19e <gmtime_r+0x122>
   3a182:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   3a186:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   3a18a:	61e3      	str	r3, [r4, #28]
   3a18c:	2300      	movs	r3, #0
   3a18e:	f8c4 c00c 	str.w	ip, [r4, #12]
   3a192:	e9c4 0504 	strd	r0, r5, [r4, #16]
   3a196:	6223      	str	r3, [r4, #32]
   3a198:	4620      	mov	r0, r4
   3a19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a19e:	078a      	lsls	r2, r1, #30
   3a1a0:	d102      	bne.n	3a1a8 <gmtime_r+0x12c>
   3a1a2:	fb07 1616 	mls	r6, r7, r6, r1
   3a1a6:	b95e      	cbnz	r6, 3a1c0 <gmtime_r+0x144>
   3a1a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   3a1ac:	fbb1 f6f2 	udiv	r6, r1, r2
   3a1b0:	fb02 1216 	mls	r2, r2, r6, r1
   3a1b4:	fab2 f282 	clz	r2, r2
   3a1b8:	0952      	lsrs	r2, r2, #5
   3a1ba:	333b      	adds	r3, #59	; 0x3b
   3a1bc:	4413      	add	r3, r2
   3a1be:	e7e2      	b.n	3a186 <gmtime_r+0x10a>
   3a1c0:	2201      	movs	r2, #1
   3a1c2:	e7fa      	b.n	3a1ba <gmtime_r+0x13e>
   3a1c4:	00015180 	.word	0x00015180
   3a1c8:	00023ab1 	.word	0x00023ab1
   3a1cc:	fffdc54f 	.word	0xfffdc54f
   3a1d0:	00023ab0 	.word	0x00023ab0

0003a1d4 <malloc>:
   3a1d4:	4b02      	ldr	r3, [pc, #8]	; (3a1e0 <malloc+0xc>)
   3a1d6:	4601      	mov	r1, r0
   3a1d8:	6818      	ldr	r0, [r3, #0]
   3a1da:	f000 b857 	b.w	3a28c <_malloc_r>
   3a1de:	bf00      	nop
   3a1e0:	20014a74 	.word	0x20014a74

0003a1e4 <free>:
   3a1e4:	4b02      	ldr	r3, [pc, #8]	; (3a1f0 <free+0xc>)
   3a1e6:	4601      	mov	r1, r0
   3a1e8:	6818      	ldr	r0, [r3, #0]
   3a1ea:	f000 b803 	b.w	3a1f4 <_free_r>
   3a1ee:	bf00      	nop
   3a1f0:	20014a74 	.word	0x20014a74

0003a1f4 <_free_r>:
   3a1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3a1f6:	2900      	cmp	r1, #0
   3a1f8:	d043      	beq.n	3a282 <_free_r+0x8e>
   3a1fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3a1fe:	1f0c      	subs	r4, r1, #4
   3a200:	9001      	str	r0, [sp, #4]
   3a202:	2b00      	cmp	r3, #0
   3a204:	bfb8      	it	lt
   3a206:	18e4      	addlt	r4, r4, r3
   3a208:	f001 fcc6 	bl	3bb98 <__malloc_lock>
   3a20c:	4a1e      	ldr	r2, [pc, #120]	; (3a288 <_free_r+0x94>)
   3a20e:	9801      	ldr	r0, [sp, #4]
   3a210:	6813      	ldr	r3, [r2, #0]
   3a212:	b933      	cbnz	r3, 3a222 <_free_r+0x2e>
   3a214:	6063      	str	r3, [r4, #4]
   3a216:	6014      	str	r4, [r2, #0]
   3a218:	b003      	add	sp, #12
   3a21a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3a21e:	f001 bcc1 	b.w	3bba4 <__malloc_unlock>
   3a222:	42a3      	cmp	r3, r4
   3a224:	d908      	bls.n	3a238 <_free_r+0x44>
   3a226:	6825      	ldr	r5, [r4, #0]
   3a228:	1961      	adds	r1, r4, r5
   3a22a:	428b      	cmp	r3, r1
   3a22c:	bf01      	itttt	eq
   3a22e:	6819      	ldreq	r1, [r3, #0]
   3a230:	685b      	ldreq	r3, [r3, #4]
   3a232:	1949      	addeq	r1, r1, r5
   3a234:	6021      	streq	r1, [r4, #0]
   3a236:	e7ed      	b.n	3a214 <_free_r+0x20>
   3a238:	461a      	mov	r2, r3
   3a23a:	685b      	ldr	r3, [r3, #4]
   3a23c:	b10b      	cbz	r3, 3a242 <_free_r+0x4e>
   3a23e:	42a3      	cmp	r3, r4
   3a240:	d9fa      	bls.n	3a238 <_free_r+0x44>
   3a242:	6811      	ldr	r1, [r2, #0]
   3a244:	1855      	adds	r5, r2, r1
   3a246:	42a5      	cmp	r5, r4
   3a248:	d10b      	bne.n	3a262 <_free_r+0x6e>
   3a24a:	6824      	ldr	r4, [r4, #0]
   3a24c:	4421      	add	r1, r4
   3a24e:	1854      	adds	r4, r2, r1
   3a250:	6011      	str	r1, [r2, #0]
   3a252:	42a3      	cmp	r3, r4
   3a254:	d1e0      	bne.n	3a218 <_free_r+0x24>
   3a256:	681c      	ldr	r4, [r3, #0]
   3a258:	685b      	ldr	r3, [r3, #4]
   3a25a:	4421      	add	r1, r4
   3a25c:	6053      	str	r3, [r2, #4]
   3a25e:	6011      	str	r1, [r2, #0]
   3a260:	e7da      	b.n	3a218 <_free_r+0x24>
   3a262:	d902      	bls.n	3a26a <_free_r+0x76>
   3a264:	230c      	movs	r3, #12
   3a266:	6003      	str	r3, [r0, #0]
   3a268:	e7d6      	b.n	3a218 <_free_r+0x24>
   3a26a:	6825      	ldr	r5, [r4, #0]
   3a26c:	1961      	adds	r1, r4, r5
   3a26e:	428b      	cmp	r3, r1
   3a270:	bf02      	ittt	eq
   3a272:	6819      	ldreq	r1, [r3, #0]
   3a274:	685b      	ldreq	r3, [r3, #4]
   3a276:	1949      	addeq	r1, r1, r5
   3a278:	6063      	str	r3, [r4, #4]
   3a27a:	bf08      	it	eq
   3a27c:	6021      	streq	r1, [r4, #0]
   3a27e:	6054      	str	r4, [r2, #4]
   3a280:	e7ca      	b.n	3a218 <_free_r+0x24>
   3a282:	b003      	add	sp, #12
   3a284:	bd30      	pop	{r4, r5, pc}
   3a286:	bf00      	nop
   3a288:	2001a578 	.word	0x2001a578

0003a28c <_malloc_r>:
   3a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a28e:	1ccd      	adds	r5, r1, #3
   3a290:	4606      	mov	r6, r0
   3a292:	f025 0503 	bic.w	r5, r5, #3
   3a296:	3508      	adds	r5, #8
   3a298:	2d0c      	cmp	r5, #12
   3a29a:	bf38      	it	cc
   3a29c:	250c      	movcc	r5, #12
   3a29e:	2d00      	cmp	r5, #0
   3a2a0:	db01      	blt.n	3a2a6 <_malloc_r+0x1a>
   3a2a2:	42a9      	cmp	r1, r5
   3a2a4:	d903      	bls.n	3a2ae <_malloc_r+0x22>
   3a2a6:	230c      	movs	r3, #12
   3a2a8:	6033      	str	r3, [r6, #0]
   3a2aa:	2000      	movs	r0, #0
   3a2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a2ae:	f001 fc73 	bl	3bb98 <__malloc_lock>
   3a2b2:	4921      	ldr	r1, [pc, #132]	; (3a338 <_malloc_r+0xac>)
   3a2b4:	680a      	ldr	r2, [r1, #0]
   3a2b6:	4614      	mov	r4, r2
   3a2b8:	b99c      	cbnz	r4, 3a2e2 <_malloc_r+0x56>
   3a2ba:	4f20      	ldr	r7, [pc, #128]	; (3a33c <_malloc_r+0xb0>)
   3a2bc:	683b      	ldr	r3, [r7, #0]
   3a2be:	b923      	cbnz	r3, 3a2ca <_malloc_r+0x3e>
   3a2c0:	4621      	mov	r1, r4
   3a2c2:	4630      	mov	r0, r6
   3a2c4:	f000 fcea 	bl	3ac9c <_sbrk_r>
   3a2c8:	6038      	str	r0, [r7, #0]
   3a2ca:	4629      	mov	r1, r5
   3a2cc:	4630      	mov	r0, r6
   3a2ce:	f000 fce5 	bl	3ac9c <_sbrk_r>
   3a2d2:	1c43      	adds	r3, r0, #1
   3a2d4:	d123      	bne.n	3a31e <_malloc_r+0x92>
   3a2d6:	230c      	movs	r3, #12
   3a2d8:	4630      	mov	r0, r6
   3a2da:	6033      	str	r3, [r6, #0]
   3a2dc:	f001 fc62 	bl	3bba4 <__malloc_unlock>
   3a2e0:	e7e3      	b.n	3a2aa <_malloc_r+0x1e>
   3a2e2:	6823      	ldr	r3, [r4, #0]
   3a2e4:	1b5b      	subs	r3, r3, r5
   3a2e6:	d417      	bmi.n	3a318 <_malloc_r+0x8c>
   3a2e8:	2b0b      	cmp	r3, #11
   3a2ea:	d903      	bls.n	3a2f4 <_malloc_r+0x68>
   3a2ec:	6023      	str	r3, [r4, #0]
   3a2ee:	441c      	add	r4, r3
   3a2f0:	6025      	str	r5, [r4, #0]
   3a2f2:	e004      	b.n	3a2fe <_malloc_r+0x72>
   3a2f4:	6863      	ldr	r3, [r4, #4]
   3a2f6:	42a2      	cmp	r2, r4
   3a2f8:	bf0c      	ite	eq
   3a2fa:	600b      	streq	r3, [r1, #0]
   3a2fc:	6053      	strne	r3, [r2, #4]
   3a2fe:	4630      	mov	r0, r6
   3a300:	f001 fc50 	bl	3bba4 <__malloc_unlock>
   3a304:	f104 000b 	add.w	r0, r4, #11
   3a308:	1d23      	adds	r3, r4, #4
   3a30a:	f020 0007 	bic.w	r0, r0, #7
   3a30e:	1ac2      	subs	r2, r0, r3
   3a310:	d0cc      	beq.n	3a2ac <_malloc_r+0x20>
   3a312:	1a1b      	subs	r3, r3, r0
   3a314:	50a3      	str	r3, [r4, r2]
   3a316:	e7c9      	b.n	3a2ac <_malloc_r+0x20>
   3a318:	4622      	mov	r2, r4
   3a31a:	6864      	ldr	r4, [r4, #4]
   3a31c:	e7cc      	b.n	3a2b8 <_malloc_r+0x2c>
   3a31e:	1cc4      	adds	r4, r0, #3
   3a320:	f024 0403 	bic.w	r4, r4, #3
   3a324:	42a0      	cmp	r0, r4
   3a326:	d0e3      	beq.n	3a2f0 <_malloc_r+0x64>
   3a328:	1a21      	subs	r1, r4, r0
   3a32a:	4630      	mov	r0, r6
   3a32c:	f000 fcb6 	bl	3ac9c <_sbrk_r>
   3a330:	3001      	adds	r0, #1
   3a332:	d1dd      	bne.n	3a2f0 <_malloc_r+0x64>
   3a334:	e7cf      	b.n	3a2d6 <_malloc_r+0x4a>
   3a336:	bf00      	nop
   3a338:	2001a578 	.word	0x2001a578
   3a33c:	2001a57c 	.word	0x2001a57c

0003a340 <_vfiprintf_r>:
   3a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a344:	460d      	mov	r5, r1
   3a346:	b09d      	sub	sp, #116	; 0x74
   3a348:	4614      	mov	r4, r2
   3a34a:	4698      	mov	r8, r3
   3a34c:	4606      	mov	r6, r0
   3a34e:	b118      	cbz	r0, 3a358 <_vfiprintf_r+0x18>
   3a350:	6983      	ldr	r3, [r0, #24]
   3a352:	b90b      	cbnz	r3, 3a358 <_vfiprintf_r+0x18>
   3a354:	f001 f906 	bl	3b564 <__sinit>
   3a358:	4b89      	ldr	r3, [pc, #548]	; (3a580 <_vfiprintf_r+0x240>)
   3a35a:	429d      	cmp	r5, r3
   3a35c:	d11b      	bne.n	3a396 <_vfiprintf_r+0x56>
   3a35e:	6875      	ldr	r5, [r6, #4]
   3a360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3a362:	07d9      	lsls	r1, r3, #31
   3a364:	d405      	bmi.n	3a372 <_vfiprintf_r+0x32>
   3a366:	89ab      	ldrh	r3, [r5, #12]
   3a368:	059a      	lsls	r2, r3, #22
   3a36a:	d402      	bmi.n	3a372 <_vfiprintf_r+0x32>
   3a36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3a36e:	f7e9 fdc3 	bl	23ef8 <__retarget_lock_acquire_recursive>
   3a372:	89ab      	ldrh	r3, [r5, #12]
   3a374:	071b      	lsls	r3, r3, #28
   3a376:	d501      	bpl.n	3a37c <_vfiprintf_r+0x3c>
   3a378:	692b      	ldr	r3, [r5, #16]
   3a37a:	b9eb      	cbnz	r3, 3a3b8 <_vfiprintf_r+0x78>
   3a37c:	4629      	mov	r1, r5
   3a37e:	4630      	mov	r0, r6
   3a380:	f000 ff70 	bl	3b264 <__swsetup_r>
   3a384:	b1c0      	cbz	r0, 3a3b8 <_vfiprintf_r+0x78>
   3a386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3a388:	07dc      	lsls	r4, r3, #31
   3a38a:	d50e      	bpl.n	3a3aa <_vfiprintf_r+0x6a>
   3a38c:	f04f 30ff 	mov.w	r0, #4294967295
   3a390:	b01d      	add	sp, #116	; 0x74
   3a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a396:	4b7b      	ldr	r3, [pc, #492]	; (3a584 <_vfiprintf_r+0x244>)
   3a398:	429d      	cmp	r5, r3
   3a39a:	d101      	bne.n	3a3a0 <_vfiprintf_r+0x60>
   3a39c:	68b5      	ldr	r5, [r6, #8]
   3a39e:	e7df      	b.n	3a360 <_vfiprintf_r+0x20>
   3a3a0:	4b79      	ldr	r3, [pc, #484]	; (3a588 <_vfiprintf_r+0x248>)
   3a3a2:	429d      	cmp	r5, r3
   3a3a4:	bf08      	it	eq
   3a3a6:	68f5      	ldreq	r5, [r6, #12]
   3a3a8:	e7da      	b.n	3a360 <_vfiprintf_r+0x20>
   3a3aa:	89ab      	ldrh	r3, [r5, #12]
   3a3ac:	0598      	lsls	r0, r3, #22
   3a3ae:	d4ed      	bmi.n	3a38c <_vfiprintf_r+0x4c>
   3a3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3a3b2:	f7e9 fdbd 	bl	23f30 <__retarget_lock_release_recursive>
   3a3b6:	e7e9      	b.n	3a38c <_vfiprintf_r+0x4c>
   3a3b8:	2300      	movs	r3, #0
   3a3ba:	f8cd 800c 	str.w	r8, [sp, #12]
   3a3be:	f04f 0901 	mov.w	r9, #1
   3a3c2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3a58c <_vfiprintf_r+0x24c>
   3a3c6:	9309      	str	r3, [sp, #36]	; 0x24
   3a3c8:	2320      	movs	r3, #32
   3a3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3a3ce:	2330      	movs	r3, #48	; 0x30
   3a3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3a3d4:	4623      	mov	r3, r4
   3a3d6:	469a      	mov	sl, r3
   3a3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   3a3dc:	b10a      	cbz	r2, 3a3e2 <_vfiprintf_r+0xa2>
   3a3de:	2a25      	cmp	r2, #37	; 0x25
   3a3e0:	d1f9      	bne.n	3a3d6 <_vfiprintf_r+0x96>
   3a3e2:	ebba 0b04 	subs.w	fp, sl, r4
   3a3e6:	d00b      	beq.n	3a400 <_vfiprintf_r+0xc0>
   3a3e8:	465b      	mov	r3, fp
   3a3ea:	4622      	mov	r2, r4
   3a3ec:	4629      	mov	r1, r5
   3a3ee:	4630      	mov	r0, r6
   3a3f0:	f007 fbe4 	bl	41bbc <__sfputs_r>
   3a3f4:	3001      	adds	r0, #1
   3a3f6:	f000 80aa 	beq.w	3a54e <_vfiprintf_r+0x20e>
   3a3fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a3fc:	445a      	add	r2, fp
   3a3fe:	9209      	str	r2, [sp, #36]	; 0x24
   3a400:	f89a 3000 	ldrb.w	r3, [sl]
   3a404:	2b00      	cmp	r3, #0
   3a406:	f000 80a2 	beq.w	3a54e <_vfiprintf_r+0x20e>
   3a40a:	2300      	movs	r3, #0
   3a40c:	f04f 32ff 	mov.w	r2, #4294967295
   3a410:	f10a 0a01 	add.w	sl, sl, #1
   3a414:	9304      	str	r3, [sp, #16]
   3a416:	9307      	str	r3, [sp, #28]
   3a418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3a41c:	931a      	str	r3, [sp, #104]	; 0x68
   3a41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3a422:	4654      	mov	r4, sl
   3a424:	2205      	movs	r2, #5
   3a426:	4859      	ldr	r0, [pc, #356]	; (3a58c <_vfiprintf_r+0x24c>)
   3a428:	f814 1b01 	ldrb.w	r1, [r4], #1
   3a42c:	f007 fb5a 	bl	41ae4 <memchr>
   3a430:	9a04      	ldr	r2, [sp, #16]
   3a432:	b9d8      	cbnz	r0, 3a46c <_vfiprintf_r+0x12c>
   3a434:	06d1      	lsls	r1, r2, #27
   3a436:	bf44      	itt	mi
   3a438:	2320      	movmi	r3, #32
   3a43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3a43e:	0713      	lsls	r3, r2, #28
   3a440:	bf44      	itt	mi
   3a442:	232b      	movmi	r3, #43	; 0x2b
   3a444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3a448:	f89a 3000 	ldrb.w	r3, [sl]
   3a44c:	2b2a      	cmp	r3, #42	; 0x2a
   3a44e:	d015      	beq.n	3a47c <_vfiprintf_r+0x13c>
   3a450:	9a07      	ldr	r2, [sp, #28]
   3a452:	4654      	mov	r4, sl
   3a454:	2000      	movs	r0, #0
   3a456:	f04f 0c0a 	mov.w	ip, #10
   3a45a:	4621      	mov	r1, r4
   3a45c:	f811 3b01 	ldrb.w	r3, [r1], #1
   3a460:	3b30      	subs	r3, #48	; 0x30
   3a462:	2b09      	cmp	r3, #9
   3a464:	d94e      	bls.n	3a504 <_vfiprintf_r+0x1c4>
   3a466:	b1b0      	cbz	r0, 3a496 <_vfiprintf_r+0x156>
   3a468:	9207      	str	r2, [sp, #28]
   3a46a:	e014      	b.n	3a496 <_vfiprintf_r+0x156>
   3a46c:	eba0 0308 	sub.w	r3, r0, r8
   3a470:	46a2      	mov	sl, r4
   3a472:	fa09 f303 	lsl.w	r3, r9, r3
   3a476:	4313      	orrs	r3, r2
   3a478:	9304      	str	r3, [sp, #16]
   3a47a:	e7d2      	b.n	3a422 <_vfiprintf_r+0xe2>
   3a47c:	9b03      	ldr	r3, [sp, #12]
   3a47e:	1d19      	adds	r1, r3, #4
   3a480:	681b      	ldr	r3, [r3, #0]
   3a482:	2b00      	cmp	r3, #0
   3a484:	9103      	str	r1, [sp, #12]
   3a486:	bfbb      	ittet	lt
   3a488:	425b      	neglt	r3, r3
   3a48a:	f042 0202 	orrlt.w	r2, r2, #2
   3a48e:	9307      	strge	r3, [sp, #28]
   3a490:	9307      	strlt	r3, [sp, #28]
   3a492:	bfb8      	it	lt
   3a494:	9204      	strlt	r2, [sp, #16]
   3a496:	7823      	ldrb	r3, [r4, #0]
   3a498:	2b2e      	cmp	r3, #46	; 0x2e
   3a49a:	d10c      	bne.n	3a4b6 <_vfiprintf_r+0x176>
   3a49c:	7863      	ldrb	r3, [r4, #1]
   3a49e:	2b2a      	cmp	r3, #42	; 0x2a
   3a4a0:	d135      	bne.n	3a50e <_vfiprintf_r+0x1ce>
   3a4a2:	9b03      	ldr	r3, [sp, #12]
   3a4a4:	3402      	adds	r4, #2
   3a4a6:	1d1a      	adds	r2, r3, #4
   3a4a8:	681b      	ldr	r3, [r3, #0]
   3a4aa:	2b00      	cmp	r3, #0
   3a4ac:	9203      	str	r2, [sp, #12]
   3a4ae:	bfb8      	it	lt
   3a4b0:	f04f 33ff 	movlt.w	r3, #4294967295
   3a4b4:	9305      	str	r3, [sp, #20]
   3a4b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 3a59c <_vfiprintf_r+0x25c>
   3a4ba:	2203      	movs	r2, #3
   3a4bc:	7821      	ldrb	r1, [r4, #0]
   3a4be:	4650      	mov	r0, sl
   3a4c0:	f007 fb10 	bl	41ae4 <memchr>
   3a4c4:	b140      	cbz	r0, 3a4d8 <_vfiprintf_r+0x198>
   3a4c6:	2340      	movs	r3, #64	; 0x40
   3a4c8:	eba0 000a 	sub.w	r0, r0, sl
   3a4cc:	3401      	adds	r4, #1
   3a4ce:	fa03 f000 	lsl.w	r0, r3, r0
   3a4d2:	9b04      	ldr	r3, [sp, #16]
   3a4d4:	4303      	orrs	r3, r0
   3a4d6:	9304      	str	r3, [sp, #16]
   3a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
   3a4dc:	2206      	movs	r2, #6
   3a4de:	482c      	ldr	r0, [pc, #176]	; (3a590 <_vfiprintf_r+0x250>)
   3a4e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3a4e4:	f007 fafe 	bl	41ae4 <memchr>
   3a4e8:	2800      	cmp	r0, #0
   3a4ea:	d03f      	beq.n	3a56c <_vfiprintf_r+0x22c>
   3a4ec:	4b29      	ldr	r3, [pc, #164]	; (3a594 <_vfiprintf_r+0x254>)
   3a4ee:	bb1b      	cbnz	r3, 3a538 <_vfiprintf_r+0x1f8>
   3a4f0:	9b03      	ldr	r3, [sp, #12]
   3a4f2:	3307      	adds	r3, #7
   3a4f4:	f023 0307 	bic.w	r3, r3, #7
   3a4f8:	3308      	adds	r3, #8
   3a4fa:	9303      	str	r3, [sp, #12]
   3a4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a4fe:	443b      	add	r3, r7
   3a500:	9309      	str	r3, [sp, #36]	; 0x24
   3a502:	e767      	b.n	3a3d4 <_vfiprintf_r+0x94>
   3a504:	fb0c 3202 	mla	r2, ip, r2, r3
   3a508:	460c      	mov	r4, r1
   3a50a:	2001      	movs	r0, #1
   3a50c:	e7a5      	b.n	3a45a <_vfiprintf_r+0x11a>
   3a50e:	2300      	movs	r3, #0
   3a510:	3401      	adds	r4, #1
   3a512:	f04f 0c0a 	mov.w	ip, #10
   3a516:	4619      	mov	r1, r3
   3a518:	9305      	str	r3, [sp, #20]
   3a51a:	4620      	mov	r0, r4
   3a51c:	f810 2b01 	ldrb.w	r2, [r0], #1
   3a520:	3a30      	subs	r2, #48	; 0x30
   3a522:	2a09      	cmp	r2, #9
   3a524:	d903      	bls.n	3a52e <_vfiprintf_r+0x1ee>
   3a526:	2b00      	cmp	r3, #0
   3a528:	d0c5      	beq.n	3a4b6 <_vfiprintf_r+0x176>
   3a52a:	9105      	str	r1, [sp, #20]
   3a52c:	e7c3      	b.n	3a4b6 <_vfiprintf_r+0x176>
   3a52e:	fb0c 2101 	mla	r1, ip, r1, r2
   3a532:	4604      	mov	r4, r0
   3a534:	2301      	movs	r3, #1
   3a536:	e7f0      	b.n	3a51a <_vfiprintf_r+0x1da>
   3a538:	ab03      	add	r3, sp, #12
   3a53a:	462a      	mov	r2, r5
   3a53c:	a904      	add	r1, sp, #16
   3a53e:	4630      	mov	r0, r6
   3a540:	9300      	str	r3, [sp, #0]
   3a542:	4b15      	ldr	r3, [pc, #84]	; (3a598 <_vfiprintf_r+0x258>)
   3a544:	f000 f82c 	bl	3a5a0 <_printf_float>
   3a548:	4607      	mov	r7, r0
   3a54a:	1c78      	adds	r0, r7, #1
   3a54c:	d1d6      	bne.n	3a4fc <_vfiprintf_r+0x1bc>
   3a54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3a550:	07d9      	lsls	r1, r3, #31
   3a552:	d405      	bmi.n	3a560 <_vfiprintf_r+0x220>
   3a554:	89ab      	ldrh	r3, [r5, #12]
   3a556:	059a      	lsls	r2, r3, #22
   3a558:	d402      	bmi.n	3a560 <_vfiprintf_r+0x220>
   3a55a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3a55c:	f7e9 fce8 	bl	23f30 <__retarget_lock_release_recursive>
   3a560:	89ab      	ldrh	r3, [r5, #12]
   3a562:	065b      	lsls	r3, r3, #25
   3a564:	f53f af12 	bmi.w	3a38c <_vfiprintf_r+0x4c>
   3a568:	9809      	ldr	r0, [sp, #36]	; 0x24
   3a56a:	e711      	b.n	3a390 <_vfiprintf_r+0x50>
   3a56c:	ab03      	add	r3, sp, #12
   3a56e:	462a      	mov	r2, r5
   3a570:	a904      	add	r1, sp, #16
   3a572:	4630      	mov	r0, r6
   3a574:	9300      	str	r3, [sp, #0]
   3a576:	4b08      	ldr	r3, [pc, #32]	; (3a598 <_vfiprintf_r+0x258>)
   3a578:	f000 fa4a 	bl	3aa10 <_printf_i>
   3a57c:	e7e4      	b.n	3a548 <_vfiprintf_r+0x208>
   3a57e:	bf00      	nop
   3a580:	00043b7c 	.word	0x00043b7c
   3a584:	00043b9c 	.word	0x00043b9c
   3a588:	00043b5c 	.word	0x00043b5c
   3a58c:	0004c72f 	.word	0x0004c72f
   3a590:	0004c739 	.word	0x0004c739
   3a594:	0003a5a1 	.word	0x0003a5a1
   3a598:	00041bbd 	.word	0x00041bbd
   3a59c:	0004c735 	.word	0x0004c735

0003a5a0 <_printf_float>:
   3a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a5a4:	ed2d 8b02 	vpush	{d8}
   3a5a8:	b091      	sub	sp, #68	; 0x44
   3a5aa:	460c      	mov	r4, r1
   3a5ac:	4616      	mov	r6, r2
   3a5ae:	461f      	mov	r7, r3
   3a5b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
   3a5b4:	4605      	mov	r5, r0
   3a5b6:	f001 fa99 	bl	3baec <_localeconv_r>
   3a5ba:	f8d0 a000 	ldr.w	sl, [r0]
   3a5be:	4650      	mov	r0, sl
   3a5c0:	f7e2 fe3f 	bl	1d242 <strlen>
   3a5c4:	2300      	movs	r3, #0
   3a5c6:	f894 b018 	ldrb.w	fp, [r4, #24]
   3a5ca:	ee08 0a10 	vmov	s16, r0
   3a5ce:	930e      	str	r3, [sp, #56]	; 0x38
   3a5d0:	6823      	ldr	r3, [r4, #0]
   3a5d2:	9309      	str	r3, [sp, #36]	; 0x24
   3a5d4:	f8d8 3000 	ldr.w	r3, [r8]
   3a5d8:	3307      	adds	r3, #7
   3a5da:	f023 0307 	bic.w	r3, r3, #7
   3a5de:	f103 0208 	add.w	r2, r3, #8
   3a5e2:	f8c8 2000 	str.w	r2, [r8]
   3a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   3a5ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3a5ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   3a5f2:	f04f 32ff 	mov.w	r2, #4294967295
   3a5f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   3a5fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   3a5fe:	930b      	str	r3, [sp, #44]	; 0x2c
   3a600:	4b9f      	ldr	r3, [pc, #636]	; (3a880 <_printf_float+0x2e0>)
   3a602:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   3a606:	f7e2 fb71 	bl	1ccec <__aeabi_dcmpun>
   3a60a:	bb88      	cbnz	r0, 3a670 <_printf_float+0xd0>
   3a60c:	f04f 32ff 	mov.w	r2, #4294967295
   3a610:	4b9b      	ldr	r3, [pc, #620]	; (3a880 <_printf_float+0x2e0>)
   3a612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   3a616:	f7e2 fb4b 	bl	1ccb0 <__aeabi_dcmple>
   3a61a:	bb48      	cbnz	r0, 3a670 <_printf_float+0xd0>
   3a61c:	2200      	movs	r2, #0
   3a61e:	2300      	movs	r3, #0
   3a620:	4640      	mov	r0, r8
   3a622:	4649      	mov	r1, r9
   3a624:	f7e2 fb3a 	bl	1cc9c <__aeabi_dcmplt>
   3a628:	b110      	cbz	r0, 3a630 <_printf_float+0x90>
   3a62a:	232d      	movs	r3, #45	; 0x2d
   3a62c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a630:	4b94      	ldr	r3, [pc, #592]	; (3a884 <_printf_float+0x2e4>)
   3a632:	4895      	ldr	r0, [pc, #596]	; (3a888 <_printf_float+0x2e8>)
   3a634:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   3a638:	bf94      	ite	ls
   3a63a:	4698      	movls	r8, r3
   3a63c:	4680      	movhi	r8, r0
   3a63e:	2303      	movs	r3, #3
   3a640:	f04f 0900 	mov.w	r9, #0
   3a644:	6123      	str	r3, [r4, #16]
   3a646:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a648:	f023 0304 	bic.w	r3, r3, #4
   3a64c:	6023      	str	r3, [r4, #0]
   3a64e:	4633      	mov	r3, r6
   3a650:	aa0f      	add	r2, sp, #60	; 0x3c
   3a652:	4621      	mov	r1, r4
   3a654:	4628      	mov	r0, r5
   3a656:	9700      	str	r7, [sp, #0]
   3a658:	f007 fb62 	bl	41d20 <_printf_common>
   3a65c:	3001      	adds	r0, #1
   3a65e:	f040 8092 	bne.w	3a786 <_printf_float+0x1e6>
   3a662:	f04f 30ff 	mov.w	r0, #4294967295
   3a666:	b011      	add	sp, #68	; 0x44
   3a668:	ecbd 8b02 	vpop	{d8}
   3a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a670:	4642      	mov	r2, r8
   3a672:	464b      	mov	r3, r9
   3a674:	4640      	mov	r0, r8
   3a676:	4649      	mov	r1, r9
   3a678:	f7e2 fb38 	bl	1ccec <__aeabi_dcmpun>
   3a67c:	b140      	cbz	r0, 3a690 <_printf_float+0xf0>
   3a67e:	464b      	mov	r3, r9
   3a680:	4882      	ldr	r0, [pc, #520]	; (3a88c <_printf_float+0x2ec>)
   3a682:	2b00      	cmp	r3, #0
   3a684:	bfbc      	itt	lt
   3a686:	232d      	movlt	r3, #45	; 0x2d
   3a688:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3a68c:	4b80      	ldr	r3, [pc, #512]	; (3a890 <_printf_float+0x2f0>)
   3a68e:	e7d1      	b.n	3a634 <_printf_float+0x94>
   3a690:	6863      	ldr	r3, [r4, #4]
   3a692:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
   3a696:	1c5a      	adds	r2, r3, #1
   3a698:	d143      	bne.n	3a722 <_printf_float+0x182>
   3a69a:	2306      	movs	r3, #6
   3a69c:	6063      	str	r3, [r4, #4]
   3a69e:	2200      	movs	r2, #0
   3a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a6a2:	4628      	mov	r0, r5
   3a6a4:	910a      	str	r1, [sp, #40]	; 0x28
   3a6a6:	9206      	str	r2, [sp, #24]
   3a6a8:	aa0e      	add	r2, sp, #56	; 0x38
   3a6aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   3a6ae:	e9cd b204 	strd	fp, r2, [sp, #16]
   3a6b2:	aa0d      	add	r2, sp, #52	; 0x34
   3a6b4:	6023      	str	r3, [r4, #0]
   3a6b6:	9203      	str	r2, [sp, #12]
   3a6b8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3a6bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3a6c0:	6863      	ldr	r3, [r4, #4]
   3a6c2:	4642      	mov	r2, r8
   3a6c4:	9300      	str	r3, [sp, #0]
   3a6c6:	464b      	mov	r3, r9
   3a6c8:	f007 fa8a 	bl	41be0 <__cvt>
   3a6cc:	990a      	ldr	r1, [sp, #40]	; 0x28
   3a6ce:	4680      	mov	r8, r0
   3a6d0:	2947      	cmp	r1, #71	; 0x47
   3a6d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a6d4:	d108      	bne.n	3a6e8 <_printf_float+0x148>
   3a6d6:	1cc8      	adds	r0, r1, #3
   3a6d8:	db02      	blt.n	3a6e0 <_printf_float+0x140>
   3a6da:	6863      	ldr	r3, [r4, #4]
   3a6dc:	4299      	cmp	r1, r3
   3a6de:	dd40      	ble.n	3a762 <_printf_float+0x1c2>
   3a6e0:	f1ab 0b02 	sub.w	fp, fp, #2
   3a6e4:	fa5f fb8b 	uxtb.w	fp, fp
   3a6e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a6ec:	d81f      	bhi.n	3a72e <_printf_float+0x18e>
   3a6ee:	3901      	subs	r1, #1
   3a6f0:	465a      	mov	r2, fp
   3a6f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3a6f6:	910d      	str	r1, [sp, #52]	; 0x34
   3a6f8:	f007 fad4 	bl	41ca4 <__exponent>
   3a6fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a6fe:	4681      	mov	r9, r0
   3a700:	1813      	adds	r3, r2, r0
   3a702:	2a01      	cmp	r2, #1
   3a704:	6123      	str	r3, [r4, #16]
   3a706:	dc02      	bgt.n	3a70e <_printf_float+0x16e>
   3a708:	6822      	ldr	r2, [r4, #0]
   3a70a:	07d2      	lsls	r2, r2, #31
   3a70c:	d501      	bpl.n	3a712 <_printf_float+0x172>
   3a70e:	3301      	adds	r3, #1
   3a710:	6123      	str	r3, [r4, #16]
   3a712:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3a716:	2b00      	cmp	r3, #0
   3a718:	d099      	beq.n	3a64e <_printf_float+0xae>
   3a71a:	232d      	movs	r3, #45	; 0x2d
   3a71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a720:	e795      	b.n	3a64e <_printf_float+0xae>
   3a722:	2947      	cmp	r1, #71	; 0x47
   3a724:	d1bb      	bne.n	3a69e <_printf_float+0xfe>
   3a726:	2b00      	cmp	r3, #0
   3a728:	d1b9      	bne.n	3a69e <_printf_float+0xfe>
   3a72a:	2301      	movs	r3, #1
   3a72c:	e7b6      	b.n	3a69c <_printf_float+0xfc>
   3a72e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   3a732:	d118      	bne.n	3a766 <_printf_float+0x1c6>
   3a734:	2900      	cmp	r1, #0
   3a736:	6863      	ldr	r3, [r4, #4]
   3a738:	dd0b      	ble.n	3a752 <_printf_float+0x1b2>
   3a73a:	6121      	str	r1, [r4, #16]
   3a73c:	b913      	cbnz	r3, 3a744 <_printf_float+0x1a4>
   3a73e:	6822      	ldr	r2, [r4, #0]
   3a740:	07d0      	lsls	r0, r2, #31
   3a742:	d502      	bpl.n	3a74a <_printf_float+0x1aa>
   3a744:	3301      	adds	r3, #1
   3a746:	440b      	add	r3, r1
   3a748:	6123      	str	r3, [r4, #16]
   3a74a:	f04f 0900 	mov.w	r9, #0
   3a74e:	65a1      	str	r1, [r4, #88]	; 0x58
   3a750:	e7df      	b.n	3a712 <_printf_float+0x172>
   3a752:	b913      	cbnz	r3, 3a75a <_printf_float+0x1ba>
   3a754:	6822      	ldr	r2, [r4, #0]
   3a756:	07d2      	lsls	r2, r2, #31
   3a758:	d501      	bpl.n	3a75e <_printf_float+0x1be>
   3a75a:	3302      	adds	r3, #2
   3a75c:	e7f4      	b.n	3a748 <_printf_float+0x1a8>
   3a75e:	2301      	movs	r3, #1
   3a760:	e7f2      	b.n	3a748 <_printf_float+0x1a8>
   3a762:	f04f 0b67 	mov.w	fp, #103	; 0x67
   3a766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a768:	4299      	cmp	r1, r3
   3a76a:	db05      	blt.n	3a778 <_printf_float+0x1d8>
   3a76c:	6823      	ldr	r3, [r4, #0]
   3a76e:	6121      	str	r1, [r4, #16]
   3a770:	07d8      	lsls	r0, r3, #31
   3a772:	d5ea      	bpl.n	3a74a <_printf_float+0x1aa>
   3a774:	1c4b      	adds	r3, r1, #1
   3a776:	e7e7      	b.n	3a748 <_printf_float+0x1a8>
   3a778:	2900      	cmp	r1, #0
   3a77a:	bfd4      	ite	le
   3a77c:	f1c1 0202 	rsble	r2, r1, #2
   3a780:	2201      	movgt	r2, #1
   3a782:	4413      	add	r3, r2
   3a784:	e7e0      	b.n	3a748 <_printf_float+0x1a8>
   3a786:	6823      	ldr	r3, [r4, #0]
   3a788:	055a      	lsls	r2, r3, #21
   3a78a:	d407      	bmi.n	3a79c <_printf_float+0x1fc>
   3a78c:	6923      	ldr	r3, [r4, #16]
   3a78e:	4642      	mov	r2, r8
   3a790:	4631      	mov	r1, r6
   3a792:	4628      	mov	r0, r5
   3a794:	47b8      	blx	r7
   3a796:	3001      	adds	r0, #1
   3a798:	d12c      	bne.n	3a7f4 <_printf_float+0x254>
   3a79a:	e762      	b.n	3a662 <_printf_float+0xc2>
   3a79c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a7a0:	f240 80e0 	bls.w	3a964 <_printf_float+0x3c4>
   3a7a4:	2200      	movs	r2, #0
   3a7a6:	2300      	movs	r3, #0
   3a7a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a7ac:	f7e2 fa6c 	bl	1cc88 <__aeabi_dcmpeq>
   3a7b0:	2800      	cmp	r0, #0
   3a7b2:	d034      	beq.n	3a81e <_printf_float+0x27e>
   3a7b4:	2301      	movs	r3, #1
   3a7b6:	4a37      	ldr	r2, [pc, #220]	; (3a894 <_printf_float+0x2f4>)
   3a7b8:	4631      	mov	r1, r6
   3a7ba:	4628      	mov	r0, r5
   3a7bc:	47b8      	blx	r7
   3a7be:	3001      	adds	r0, #1
   3a7c0:	f43f af4f 	beq.w	3a662 <_printf_float+0xc2>
   3a7c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a7c8:	429a      	cmp	r2, r3
   3a7ca:	db02      	blt.n	3a7d2 <_printf_float+0x232>
   3a7cc:	6823      	ldr	r3, [r4, #0]
   3a7ce:	07d8      	lsls	r0, r3, #31
   3a7d0:	d510      	bpl.n	3a7f4 <_printf_float+0x254>
   3a7d2:	ee18 3a10 	vmov	r3, s16
   3a7d6:	4652      	mov	r2, sl
   3a7d8:	4631      	mov	r1, r6
   3a7da:	4628      	mov	r0, r5
   3a7dc:	47b8      	blx	r7
   3a7de:	3001      	adds	r0, #1
   3a7e0:	f43f af3f 	beq.w	3a662 <_printf_float+0xc2>
   3a7e4:	f04f 0800 	mov.w	r8, #0
   3a7e8:	f104 091a 	add.w	r9, r4, #26
   3a7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a7ee:	3b01      	subs	r3, #1
   3a7f0:	4543      	cmp	r3, r8
   3a7f2:	dc09      	bgt.n	3a808 <_printf_float+0x268>
   3a7f4:	6823      	ldr	r3, [r4, #0]
   3a7f6:	079b      	lsls	r3, r3, #30
   3a7f8:	f100 8105 	bmi.w	3aa06 <_printf_float+0x466>
   3a7fc:	68e0      	ldr	r0, [r4, #12]
   3a7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a800:	4298      	cmp	r0, r3
   3a802:	bfb8      	it	lt
   3a804:	4618      	movlt	r0, r3
   3a806:	e72e      	b.n	3a666 <_printf_float+0xc6>
   3a808:	2301      	movs	r3, #1
   3a80a:	464a      	mov	r2, r9
   3a80c:	4631      	mov	r1, r6
   3a80e:	4628      	mov	r0, r5
   3a810:	47b8      	blx	r7
   3a812:	3001      	adds	r0, #1
   3a814:	f43f af25 	beq.w	3a662 <_printf_float+0xc2>
   3a818:	f108 0801 	add.w	r8, r8, #1
   3a81c:	e7e6      	b.n	3a7ec <_printf_float+0x24c>
   3a81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a820:	2b00      	cmp	r3, #0
   3a822:	dc39      	bgt.n	3a898 <_printf_float+0x2f8>
   3a824:	2301      	movs	r3, #1
   3a826:	4a1b      	ldr	r2, [pc, #108]	; (3a894 <_printf_float+0x2f4>)
   3a828:	4631      	mov	r1, r6
   3a82a:	4628      	mov	r0, r5
   3a82c:	47b8      	blx	r7
   3a82e:	3001      	adds	r0, #1
   3a830:	f43f af17 	beq.w	3a662 <_printf_float+0xc2>
   3a834:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a838:	4313      	orrs	r3, r2
   3a83a:	d102      	bne.n	3a842 <_printf_float+0x2a2>
   3a83c:	6823      	ldr	r3, [r4, #0]
   3a83e:	07d9      	lsls	r1, r3, #31
   3a840:	d5d8      	bpl.n	3a7f4 <_printf_float+0x254>
   3a842:	ee18 3a10 	vmov	r3, s16
   3a846:	4652      	mov	r2, sl
   3a848:	4631      	mov	r1, r6
   3a84a:	4628      	mov	r0, r5
   3a84c:	47b8      	blx	r7
   3a84e:	3001      	adds	r0, #1
   3a850:	f43f af07 	beq.w	3a662 <_printf_float+0xc2>
   3a854:	f04f 0900 	mov.w	r9, #0
   3a858:	f104 0a1a 	add.w	sl, r4, #26
   3a85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a85e:	425b      	negs	r3, r3
   3a860:	454b      	cmp	r3, r9
   3a862:	dc01      	bgt.n	3a868 <_printf_float+0x2c8>
   3a864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a866:	e792      	b.n	3a78e <_printf_float+0x1ee>
   3a868:	2301      	movs	r3, #1
   3a86a:	4652      	mov	r2, sl
   3a86c:	4631      	mov	r1, r6
   3a86e:	4628      	mov	r0, r5
   3a870:	47b8      	blx	r7
   3a872:	3001      	adds	r0, #1
   3a874:	f43f aef5 	beq.w	3a662 <_printf_float+0xc2>
   3a878:	f109 0901 	add.w	r9, r9, #1
   3a87c:	e7ee      	b.n	3a85c <_printf_float+0x2bc>
   3a87e:	bf00      	nop
   3a880:	7fefffff 	.word	0x7fefffff
   3a884:	0004c740 	.word	0x0004c740
   3a888:	0004c744 	.word	0x0004c744
   3a88c:	0004c74c 	.word	0x0004c74c
   3a890:	0004c748 	.word	0x0004c748
   3a894:	000463dd 	.word	0x000463dd
   3a898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a89a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a89c:	429a      	cmp	r2, r3
   3a89e:	bfa8      	it	ge
   3a8a0:	461a      	movge	r2, r3
   3a8a2:	2a00      	cmp	r2, #0
   3a8a4:	4691      	mov	r9, r2
   3a8a6:	dc37      	bgt.n	3a918 <_printf_float+0x378>
   3a8a8:	f04f 0b00 	mov.w	fp, #0
   3a8ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a8b0:	f104 021a 	add.w	r2, r4, #26
   3a8b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a8b6:	9309      	str	r3, [sp, #36]	; 0x24
   3a8b8:	eba3 0309 	sub.w	r3, r3, r9
   3a8bc:	455b      	cmp	r3, fp
   3a8be:	dc33      	bgt.n	3a928 <_printf_float+0x388>
   3a8c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a8c4:	429a      	cmp	r2, r3
   3a8c6:	db3b      	blt.n	3a940 <_printf_float+0x3a0>
   3a8c8:	6823      	ldr	r3, [r4, #0]
   3a8ca:	07da      	lsls	r2, r3, #31
   3a8cc:	d438      	bmi.n	3a940 <_printf_float+0x3a0>
   3a8ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a8d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a8d4:	1a9a      	subs	r2, r3, r2
   3a8d6:	eba3 0901 	sub.w	r9, r3, r1
   3a8da:	4591      	cmp	r9, r2
   3a8dc:	bfa8      	it	ge
   3a8de:	4691      	movge	r9, r2
   3a8e0:	f1b9 0f00 	cmp.w	r9, #0
   3a8e4:	dc35      	bgt.n	3a952 <_printf_float+0x3b2>
   3a8e6:	f04f 0800 	mov.w	r8, #0
   3a8ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a8ee:	f104 0a1a 	add.w	sl, r4, #26
   3a8f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a8f6:	1a9b      	subs	r3, r3, r2
   3a8f8:	eba3 0309 	sub.w	r3, r3, r9
   3a8fc:	4543      	cmp	r3, r8
   3a8fe:	f77f af79 	ble.w	3a7f4 <_printf_float+0x254>
   3a902:	2301      	movs	r3, #1
   3a904:	4652      	mov	r2, sl
   3a906:	4631      	mov	r1, r6
   3a908:	4628      	mov	r0, r5
   3a90a:	47b8      	blx	r7
   3a90c:	3001      	adds	r0, #1
   3a90e:	f43f aea8 	beq.w	3a662 <_printf_float+0xc2>
   3a912:	f108 0801 	add.w	r8, r8, #1
   3a916:	e7ec      	b.n	3a8f2 <_printf_float+0x352>
   3a918:	4613      	mov	r3, r2
   3a91a:	4631      	mov	r1, r6
   3a91c:	4642      	mov	r2, r8
   3a91e:	4628      	mov	r0, r5
   3a920:	47b8      	blx	r7
   3a922:	3001      	adds	r0, #1
   3a924:	d1c0      	bne.n	3a8a8 <_printf_float+0x308>
   3a926:	e69c      	b.n	3a662 <_printf_float+0xc2>
   3a928:	2301      	movs	r3, #1
   3a92a:	4631      	mov	r1, r6
   3a92c:	4628      	mov	r0, r5
   3a92e:	9209      	str	r2, [sp, #36]	; 0x24
   3a930:	47b8      	blx	r7
   3a932:	3001      	adds	r0, #1
   3a934:	f43f ae95 	beq.w	3a662 <_printf_float+0xc2>
   3a938:	f10b 0b01 	add.w	fp, fp, #1
   3a93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a93e:	e7b9      	b.n	3a8b4 <_printf_float+0x314>
   3a940:	ee18 3a10 	vmov	r3, s16
   3a944:	4652      	mov	r2, sl
   3a946:	4631      	mov	r1, r6
   3a948:	4628      	mov	r0, r5
   3a94a:	47b8      	blx	r7
   3a94c:	3001      	adds	r0, #1
   3a94e:	d1be      	bne.n	3a8ce <_printf_float+0x32e>
   3a950:	e687      	b.n	3a662 <_printf_float+0xc2>
   3a952:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a954:	464b      	mov	r3, r9
   3a956:	4631      	mov	r1, r6
   3a958:	4628      	mov	r0, r5
   3a95a:	4442      	add	r2, r8
   3a95c:	47b8      	blx	r7
   3a95e:	3001      	adds	r0, #1
   3a960:	d1c1      	bne.n	3a8e6 <_printf_float+0x346>
   3a962:	e67e      	b.n	3a662 <_printf_float+0xc2>
   3a964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a966:	2a01      	cmp	r2, #1
   3a968:	dc01      	bgt.n	3a96e <_printf_float+0x3ce>
   3a96a:	07db      	lsls	r3, r3, #31
   3a96c:	d538      	bpl.n	3a9e0 <_printf_float+0x440>
   3a96e:	2301      	movs	r3, #1
   3a970:	4642      	mov	r2, r8
   3a972:	4631      	mov	r1, r6
   3a974:	4628      	mov	r0, r5
   3a976:	47b8      	blx	r7
   3a978:	3001      	adds	r0, #1
   3a97a:	f43f ae72 	beq.w	3a662 <_printf_float+0xc2>
   3a97e:	ee18 3a10 	vmov	r3, s16
   3a982:	4652      	mov	r2, sl
   3a984:	4631      	mov	r1, r6
   3a986:	4628      	mov	r0, r5
   3a988:	47b8      	blx	r7
   3a98a:	3001      	adds	r0, #1
   3a98c:	f43f ae69 	beq.w	3a662 <_printf_float+0xc2>
   3a990:	2200      	movs	r2, #0
   3a992:	2300      	movs	r3, #0
   3a994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a998:	f7e2 f976 	bl	1cc88 <__aeabi_dcmpeq>
   3a99c:	b9d8      	cbnz	r0, 3a9d6 <_printf_float+0x436>
   3a99e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a9a0:	f108 0201 	add.w	r2, r8, #1
   3a9a4:	3b01      	subs	r3, #1
   3a9a6:	4631      	mov	r1, r6
   3a9a8:	4628      	mov	r0, r5
   3a9aa:	47b8      	blx	r7
   3a9ac:	3001      	adds	r0, #1
   3a9ae:	d10e      	bne.n	3a9ce <_printf_float+0x42e>
   3a9b0:	e657      	b.n	3a662 <_printf_float+0xc2>
   3a9b2:	2301      	movs	r3, #1
   3a9b4:	4652      	mov	r2, sl
   3a9b6:	4631      	mov	r1, r6
   3a9b8:	4628      	mov	r0, r5
   3a9ba:	47b8      	blx	r7
   3a9bc:	3001      	adds	r0, #1
   3a9be:	f43f ae50 	beq.w	3a662 <_printf_float+0xc2>
   3a9c2:	f108 0801 	add.w	r8, r8, #1
   3a9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a9c8:	3b01      	subs	r3, #1
   3a9ca:	4543      	cmp	r3, r8
   3a9cc:	dcf1      	bgt.n	3a9b2 <_printf_float+0x412>
   3a9ce:	464b      	mov	r3, r9
   3a9d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3a9d4:	e6dc      	b.n	3a790 <_printf_float+0x1f0>
   3a9d6:	f04f 0800 	mov.w	r8, #0
   3a9da:	f104 0a1a 	add.w	sl, r4, #26
   3a9de:	e7f2      	b.n	3a9c6 <_printf_float+0x426>
   3a9e0:	2301      	movs	r3, #1
   3a9e2:	4642      	mov	r2, r8
   3a9e4:	e7df      	b.n	3a9a6 <_printf_float+0x406>
   3a9e6:	2301      	movs	r3, #1
   3a9e8:	464a      	mov	r2, r9
   3a9ea:	4631      	mov	r1, r6
   3a9ec:	4628      	mov	r0, r5
   3a9ee:	47b8      	blx	r7
   3a9f0:	3001      	adds	r0, #1
   3a9f2:	f43f ae36 	beq.w	3a662 <_printf_float+0xc2>
   3a9f6:	f108 0801 	add.w	r8, r8, #1
   3a9fa:	68e3      	ldr	r3, [r4, #12]
   3a9fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3a9fe:	1a5b      	subs	r3, r3, r1
   3aa00:	4543      	cmp	r3, r8
   3aa02:	dcf0      	bgt.n	3a9e6 <_printf_float+0x446>
   3aa04:	e6fa      	b.n	3a7fc <_printf_float+0x25c>
   3aa06:	f04f 0800 	mov.w	r8, #0
   3aa0a:	f104 0919 	add.w	r9, r4, #25
   3aa0e:	e7f4      	b.n	3a9fa <_printf_float+0x45a>

0003aa10 <_printf_i>:
   3aa10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3aa14:	7e0f      	ldrb	r7, [r1, #24]
   3aa16:	4691      	mov	r9, r2
   3aa18:	4680      	mov	r8, r0
   3aa1a:	460c      	mov	r4, r1
   3aa1c:	2f78      	cmp	r7, #120	; 0x78
   3aa1e:	469a      	mov	sl, r3
   3aa20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3aa22:	f101 0243 	add.w	r2, r1, #67	; 0x43
   3aa26:	d807      	bhi.n	3aa38 <_printf_i+0x28>
   3aa28:	2f62      	cmp	r7, #98	; 0x62
   3aa2a:	d80a      	bhi.n	3aa42 <_printf_i+0x32>
   3aa2c:	2f00      	cmp	r7, #0
   3aa2e:	f000 80d8 	beq.w	3abe2 <_printf_i+0x1d2>
   3aa32:	2f58      	cmp	r7, #88	; 0x58
   3aa34:	f000 80a3 	beq.w	3ab7e <_printf_i+0x16e>
   3aa38:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3aa3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3aa40:	e03a      	b.n	3aab8 <_printf_i+0xa8>
   3aa42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3aa46:	2b15      	cmp	r3, #21
   3aa48:	d8f6      	bhi.n	3aa38 <_printf_i+0x28>
   3aa4a:	a101      	add	r1, pc, #4	; (adr r1, 3aa50 <_printf_i+0x40>)
   3aa4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3aa50:	0003aaa9 	.word	0x0003aaa9
   3aa54:	0003aabd 	.word	0x0003aabd
   3aa58:	0003aa39 	.word	0x0003aa39
   3aa5c:	0003aa39 	.word	0x0003aa39
   3aa60:	0003aa39 	.word	0x0003aa39
   3aa64:	0003aa39 	.word	0x0003aa39
   3aa68:	0003aabd 	.word	0x0003aabd
   3aa6c:	0003aa39 	.word	0x0003aa39
   3aa70:	0003aa39 	.word	0x0003aa39
   3aa74:	0003aa39 	.word	0x0003aa39
   3aa78:	0003aa39 	.word	0x0003aa39
   3aa7c:	0003abc9 	.word	0x0003abc9
   3aa80:	0003aaed 	.word	0x0003aaed
   3aa84:	0003abab 	.word	0x0003abab
   3aa88:	0003aa39 	.word	0x0003aa39
   3aa8c:	0003aa39 	.word	0x0003aa39
   3aa90:	0003abeb 	.word	0x0003abeb
   3aa94:	0003aa39 	.word	0x0003aa39
   3aa98:	0003aaed 	.word	0x0003aaed
   3aa9c:	0003aa39 	.word	0x0003aa39
   3aaa0:	0003aa39 	.word	0x0003aa39
   3aaa4:	0003abb3 	.word	0x0003abb3
   3aaa8:	682b      	ldr	r3, [r5, #0]
   3aaaa:	1d1a      	adds	r2, r3, #4
   3aaac:	681b      	ldr	r3, [r3, #0]
   3aaae:	602a      	str	r2, [r5, #0]
   3aab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3aab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3aab8:	2301      	movs	r3, #1
   3aaba:	e0a3      	b.n	3ac04 <_printf_i+0x1f4>
   3aabc:	6820      	ldr	r0, [r4, #0]
   3aabe:	6829      	ldr	r1, [r5, #0]
   3aac0:	0606      	lsls	r6, r0, #24
   3aac2:	f101 0304 	add.w	r3, r1, #4
   3aac6:	d50a      	bpl.n	3aade <_printf_i+0xce>
   3aac8:	680e      	ldr	r6, [r1, #0]
   3aaca:	602b      	str	r3, [r5, #0]
   3aacc:	2e00      	cmp	r6, #0
   3aace:	da03      	bge.n	3aad8 <_printf_i+0xc8>
   3aad0:	232d      	movs	r3, #45	; 0x2d
   3aad2:	4276      	negs	r6, r6
   3aad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3aad8:	485e      	ldr	r0, [pc, #376]	; (3ac54 <_printf_i+0x244>)
   3aada:	230a      	movs	r3, #10
   3aadc:	e019      	b.n	3ab12 <_printf_i+0x102>
   3aade:	680e      	ldr	r6, [r1, #0]
   3aae0:	f010 0f40 	tst.w	r0, #64	; 0x40
   3aae4:	602b      	str	r3, [r5, #0]
   3aae6:	bf18      	it	ne
   3aae8:	b236      	sxthne	r6, r6
   3aaea:	e7ef      	b.n	3aacc <_printf_i+0xbc>
   3aaec:	682b      	ldr	r3, [r5, #0]
   3aaee:	6820      	ldr	r0, [r4, #0]
   3aaf0:	1d19      	adds	r1, r3, #4
   3aaf2:	6029      	str	r1, [r5, #0]
   3aaf4:	0601      	lsls	r1, r0, #24
   3aaf6:	d501      	bpl.n	3aafc <_printf_i+0xec>
   3aaf8:	681e      	ldr	r6, [r3, #0]
   3aafa:	e002      	b.n	3ab02 <_printf_i+0xf2>
   3aafc:	0646      	lsls	r6, r0, #25
   3aafe:	d5fb      	bpl.n	3aaf8 <_printf_i+0xe8>
   3ab00:	881e      	ldrh	r6, [r3, #0]
   3ab02:	2f6f      	cmp	r7, #111	; 0x6f
   3ab04:	4853      	ldr	r0, [pc, #332]	; (3ac54 <_printf_i+0x244>)
   3ab06:	bf0c      	ite	eq
   3ab08:	2308      	moveq	r3, #8
   3ab0a:	230a      	movne	r3, #10
   3ab0c:	2100      	movs	r1, #0
   3ab0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3ab12:	6865      	ldr	r5, [r4, #4]
   3ab14:	2d00      	cmp	r5, #0
   3ab16:	60a5      	str	r5, [r4, #8]
   3ab18:	bfa2      	ittt	ge
   3ab1a:	6821      	ldrge	r1, [r4, #0]
   3ab1c:	f021 0104 	bicge.w	r1, r1, #4
   3ab20:	6021      	strge	r1, [r4, #0]
   3ab22:	b90e      	cbnz	r6, 3ab28 <_printf_i+0x118>
   3ab24:	2d00      	cmp	r5, #0
   3ab26:	d04d      	beq.n	3abc4 <_printf_i+0x1b4>
   3ab28:	4615      	mov	r5, r2
   3ab2a:	fbb6 f1f3 	udiv	r1, r6, r3
   3ab2e:	fb03 6711 	mls	r7, r3, r1, r6
   3ab32:	5dc7      	ldrb	r7, [r0, r7]
   3ab34:	f805 7d01 	strb.w	r7, [r5, #-1]!
   3ab38:	4637      	mov	r7, r6
   3ab3a:	460e      	mov	r6, r1
   3ab3c:	42bb      	cmp	r3, r7
   3ab3e:	d9f4      	bls.n	3ab2a <_printf_i+0x11a>
   3ab40:	2b08      	cmp	r3, #8
   3ab42:	d10b      	bne.n	3ab5c <_printf_i+0x14c>
   3ab44:	6823      	ldr	r3, [r4, #0]
   3ab46:	07de      	lsls	r6, r3, #31
   3ab48:	d508      	bpl.n	3ab5c <_printf_i+0x14c>
   3ab4a:	6923      	ldr	r3, [r4, #16]
   3ab4c:	6861      	ldr	r1, [r4, #4]
   3ab4e:	4299      	cmp	r1, r3
   3ab50:	bfde      	ittt	le
   3ab52:	2330      	movle	r3, #48	; 0x30
   3ab54:	f805 3c01 	strble.w	r3, [r5, #-1]
   3ab58:	f105 35ff 	addle.w	r5, r5, #4294967295
   3ab5c:	1b52      	subs	r2, r2, r5
   3ab5e:	6122      	str	r2, [r4, #16]
   3ab60:	464b      	mov	r3, r9
   3ab62:	aa03      	add	r2, sp, #12
   3ab64:	4621      	mov	r1, r4
   3ab66:	4640      	mov	r0, r8
   3ab68:	f8cd a000 	str.w	sl, [sp]
   3ab6c:	f007 f8d8 	bl	41d20 <_printf_common>
   3ab70:	3001      	adds	r0, #1
   3ab72:	d14c      	bne.n	3ac0e <_printf_i+0x1fe>
   3ab74:	f04f 30ff 	mov.w	r0, #4294967295
   3ab78:	b004      	add	sp, #16
   3ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ab7e:	4835      	ldr	r0, [pc, #212]	; (3ac54 <_printf_i+0x244>)
   3ab80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   3ab84:	6829      	ldr	r1, [r5, #0]
   3ab86:	6823      	ldr	r3, [r4, #0]
   3ab88:	f851 6b04 	ldr.w	r6, [r1], #4
   3ab8c:	6029      	str	r1, [r5, #0]
   3ab8e:	061d      	lsls	r5, r3, #24
   3ab90:	d514      	bpl.n	3abbc <_printf_i+0x1ac>
   3ab92:	07df      	lsls	r7, r3, #31
   3ab94:	bf44      	itt	mi
   3ab96:	f043 0320 	orrmi.w	r3, r3, #32
   3ab9a:	6023      	strmi	r3, [r4, #0]
   3ab9c:	b91e      	cbnz	r6, 3aba6 <_printf_i+0x196>
   3ab9e:	6823      	ldr	r3, [r4, #0]
   3aba0:	f023 0320 	bic.w	r3, r3, #32
   3aba4:	6023      	str	r3, [r4, #0]
   3aba6:	2310      	movs	r3, #16
   3aba8:	e7b0      	b.n	3ab0c <_printf_i+0xfc>
   3abaa:	6823      	ldr	r3, [r4, #0]
   3abac:	f043 0320 	orr.w	r3, r3, #32
   3abb0:	6023      	str	r3, [r4, #0]
   3abb2:	2378      	movs	r3, #120	; 0x78
   3abb4:	4828      	ldr	r0, [pc, #160]	; (3ac58 <_printf_i+0x248>)
   3abb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3abba:	e7e3      	b.n	3ab84 <_printf_i+0x174>
   3abbc:	0659      	lsls	r1, r3, #25
   3abbe:	bf48      	it	mi
   3abc0:	b2b6      	uxthmi	r6, r6
   3abc2:	e7e6      	b.n	3ab92 <_printf_i+0x182>
   3abc4:	4615      	mov	r5, r2
   3abc6:	e7bb      	b.n	3ab40 <_printf_i+0x130>
   3abc8:	682b      	ldr	r3, [r5, #0]
   3abca:	6826      	ldr	r6, [r4, #0]
   3abcc:	1d18      	adds	r0, r3, #4
   3abce:	6961      	ldr	r1, [r4, #20]
   3abd0:	6028      	str	r0, [r5, #0]
   3abd2:	0635      	lsls	r5, r6, #24
   3abd4:	681b      	ldr	r3, [r3, #0]
   3abd6:	d501      	bpl.n	3abdc <_printf_i+0x1cc>
   3abd8:	6019      	str	r1, [r3, #0]
   3abda:	e002      	b.n	3abe2 <_printf_i+0x1d2>
   3abdc:	0670      	lsls	r0, r6, #25
   3abde:	d5fb      	bpl.n	3abd8 <_printf_i+0x1c8>
   3abe0:	8019      	strh	r1, [r3, #0]
   3abe2:	2300      	movs	r3, #0
   3abe4:	4615      	mov	r5, r2
   3abe6:	6123      	str	r3, [r4, #16]
   3abe8:	e7ba      	b.n	3ab60 <_printf_i+0x150>
   3abea:	682b      	ldr	r3, [r5, #0]
   3abec:	2100      	movs	r1, #0
   3abee:	1d1a      	adds	r2, r3, #4
   3abf0:	602a      	str	r2, [r5, #0]
   3abf2:	681d      	ldr	r5, [r3, #0]
   3abf4:	6862      	ldr	r2, [r4, #4]
   3abf6:	4628      	mov	r0, r5
   3abf8:	f006 ff74 	bl	41ae4 <memchr>
   3abfc:	b108      	cbz	r0, 3ac02 <_printf_i+0x1f2>
   3abfe:	1b40      	subs	r0, r0, r5
   3ac00:	6060      	str	r0, [r4, #4]
   3ac02:	6863      	ldr	r3, [r4, #4]
   3ac04:	6123      	str	r3, [r4, #16]
   3ac06:	2300      	movs	r3, #0
   3ac08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3ac0c:	e7a8      	b.n	3ab60 <_printf_i+0x150>
   3ac0e:	6923      	ldr	r3, [r4, #16]
   3ac10:	462a      	mov	r2, r5
   3ac12:	4649      	mov	r1, r9
   3ac14:	4640      	mov	r0, r8
   3ac16:	47d0      	blx	sl
   3ac18:	3001      	adds	r0, #1
   3ac1a:	d0ab      	beq.n	3ab74 <_printf_i+0x164>
   3ac1c:	6823      	ldr	r3, [r4, #0]
   3ac1e:	079b      	lsls	r3, r3, #30
   3ac20:	d413      	bmi.n	3ac4a <_printf_i+0x23a>
   3ac22:	68e0      	ldr	r0, [r4, #12]
   3ac24:	9b03      	ldr	r3, [sp, #12]
   3ac26:	4298      	cmp	r0, r3
   3ac28:	bfb8      	it	lt
   3ac2a:	4618      	movlt	r0, r3
   3ac2c:	e7a4      	b.n	3ab78 <_printf_i+0x168>
   3ac2e:	2301      	movs	r3, #1
   3ac30:	4632      	mov	r2, r6
   3ac32:	4649      	mov	r1, r9
   3ac34:	4640      	mov	r0, r8
   3ac36:	47d0      	blx	sl
   3ac38:	3001      	adds	r0, #1
   3ac3a:	d09b      	beq.n	3ab74 <_printf_i+0x164>
   3ac3c:	3501      	adds	r5, #1
   3ac3e:	68e3      	ldr	r3, [r4, #12]
   3ac40:	9903      	ldr	r1, [sp, #12]
   3ac42:	1a5b      	subs	r3, r3, r1
   3ac44:	42ab      	cmp	r3, r5
   3ac46:	dcf2      	bgt.n	3ac2e <_printf_i+0x21e>
   3ac48:	e7eb      	b.n	3ac22 <_printf_i+0x212>
   3ac4a:	2500      	movs	r5, #0
   3ac4c:	f104 0619 	add.w	r6, r4, #25
   3ac50:	e7f5      	b.n	3ac3e <_printf_i+0x22e>
   3ac52:	bf00      	nop
   3ac54:	0004c750 	.word	0x0004c750
   3ac58:	0004c761 	.word	0x0004c761

0003ac5c <iprintf>:
   3ac5c:	b40f      	push	{r0, r1, r2, r3}
   3ac5e:	4b0a      	ldr	r3, [pc, #40]	; (3ac88 <iprintf+0x2c>)
   3ac60:	b513      	push	{r0, r1, r4, lr}
   3ac62:	681c      	ldr	r4, [r3, #0]
   3ac64:	b124      	cbz	r4, 3ac70 <iprintf+0x14>
   3ac66:	69a3      	ldr	r3, [r4, #24]
   3ac68:	b913      	cbnz	r3, 3ac70 <iprintf+0x14>
   3ac6a:	4620      	mov	r0, r4
   3ac6c:	f000 fc7a 	bl	3b564 <__sinit>
   3ac70:	ab05      	add	r3, sp, #20
   3ac72:	9a04      	ldr	r2, [sp, #16]
   3ac74:	68a1      	ldr	r1, [r4, #8]
   3ac76:	4620      	mov	r0, r4
   3ac78:	9301      	str	r3, [sp, #4]
   3ac7a:	f7ff fb61 	bl	3a340 <_vfiprintf_r>
   3ac7e:	b002      	add	sp, #8
   3ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ac84:	b004      	add	sp, #16
   3ac86:	4770      	bx	lr
   3ac88:	20014a74 	.word	0x20014a74

0003ac8c <realloc>:
   3ac8c:	4b02      	ldr	r3, [pc, #8]	; (3ac98 <realloc+0xc>)
   3ac8e:	460a      	mov	r2, r1
   3ac90:	4601      	mov	r1, r0
   3ac92:	6818      	ldr	r0, [r3, #0]
   3ac94:	f007 bd05 	b.w	426a2 <_realloc_r>
   3ac98:	20014a74 	.word	0x20014a74

0003ac9c <_sbrk_r>:
   3ac9c:	b538      	push	{r3, r4, r5, lr}
   3ac9e:	2300      	movs	r3, #0
   3aca0:	4d05      	ldr	r5, [pc, #20]	; (3acb8 <_sbrk_r+0x1c>)
   3aca2:	4604      	mov	r4, r0
   3aca4:	4608      	mov	r0, r1
   3aca6:	602b      	str	r3, [r5, #0]
   3aca8:	f7e9 f8ea 	bl	23e80 <_sbrk>
   3acac:	1c43      	adds	r3, r0, #1
   3acae:	d102      	bne.n	3acb6 <_sbrk_r+0x1a>
   3acb0:	682b      	ldr	r3, [r5, #0]
   3acb2:	b103      	cbz	r3, 3acb6 <_sbrk_r+0x1a>
   3acb4:	6023      	str	r3, [r4, #0]
   3acb6:	bd38      	pop	{r3, r4, r5, pc}
   3acb8:	2001a580 	.word	0x2001a580

0003acbc <sniprintf>:
   3acbc:	b40c      	push	{r2, r3}
   3acbe:	4b18      	ldr	r3, [pc, #96]	; (3ad20 <sniprintf+0x64>)
   3acc0:	b530      	push	{r4, r5, lr}
   3acc2:	1e0c      	subs	r4, r1, #0
   3acc4:	b09d      	sub	sp, #116	; 0x74
   3acc6:	681d      	ldr	r5, [r3, #0]
   3acc8:	da08      	bge.n	3acdc <sniprintf+0x20>
   3acca:	238b      	movs	r3, #139	; 0x8b
   3accc:	f04f 30ff 	mov.w	r0, #4294967295
   3acd0:	602b      	str	r3, [r5, #0]
   3acd2:	b01d      	add	sp, #116	; 0x74
   3acd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3acd8:	b002      	add	sp, #8
   3acda:	4770      	bx	lr
   3acdc:	f44f 7302 	mov.w	r3, #520	; 0x208
   3ace0:	9002      	str	r0, [sp, #8]
   3ace2:	9006      	str	r0, [sp, #24]
   3ace4:	a902      	add	r1, sp, #8
   3ace6:	f8ad 3014 	strh.w	r3, [sp, #20]
   3acea:	bf14      	ite	ne
   3acec:	f104 33ff 	addne.w	r3, r4, #4294967295
   3acf0:	4623      	moveq	r3, r4
   3acf2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3acf4:	4628      	mov	r0, r5
   3acf6:	9304      	str	r3, [sp, #16]
   3acf8:	9307      	str	r3, [sp, #28]
   3acfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3acfe:	f8ad 3016 	strh.w	r3, [sp, #22]
   3ad02:	ab21      	add	r3, sp, #132	; 0x84
   3ad04:	9301      	str	r3, [sp, #4]
   3ad06:	f001 fb2f 	bl	3c368 <_svfiprintf_r>
   3ad0a:	1c43      	adds	r3, r0, #1
   3ad0c:	bfbc      	itt	lt
   3ad0e:	238b      	movlt	r3, #139	; 0x8b
   3ad10:	602b      	strlt	r3, [r5, #0]
   3ad12:	2c00      	cmp	r4, #0
   3ad14:	d0dd      	beq.n	3acd2 <sniprintf+0x16>
   3ad16:	9b02      	ldr	r3, [sp, #8]
   3ad18:	2200      	movs	r2, #0
   3ad1a:	701a      	strb	r2, [r3, #0]
   3ad1c:	e7d9      	b.n	3acd2 <sniprintf+0x16>
   3ad1e:	bf00      	nop
   3ad20:	20014a74 	.word	0x20014a74

0003ad24 <siscanf>:
   3ad24:	b40e      	push	{r1, r2, r3}
   3ad26:	b510      	push	{r4, lr}
   3ad28:	b09f      	sub	sp, #124	; 0x7c
   3ad2a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3ad2e:	ac21      	add	r4, sp, #132	; 0x84
   3ad30:	f8ad 101c 	strh.w	r1, [sp, #28]
   3ad34:	9004      	str	r0, [sp, #16]
   3ad36:	f854 2b04 	ldr.w	r2, [r4], #4
   3ad3a:	9008      	str	r0, [sp, #32]
   3ad3c:	9201      	str	r2, [sp, #4]
   3ad3e:	f7e2 fa80 	bl	1d242 <strlen>
   3ad42:	4b0c      	ldr	r3, [pc, #48]	; (3ad74 <siscanf+0x50>)
   3ad44:	a904      	add	r1, sp, #16
   3ad46:	9005      	str	r0, [sp, #20]
   3ad48:	930d      	str	r3, [sp, #52]	; 0x34
   3ad4a:	2300      	movs	r3, #0
   3ad4c:	9009      	str	r0, [sp, #36]	; 0x24
   3ad4e:	9311      	str	r3, [sp, #68]	; 0x44
   3ad50:	9316      	str	r3, [sp, #88]	; 0x58
   3ad52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3ad56:	4808      	ldr	r0, [pc, #32]	; (3ad78 <siscanf+0x54>)
   3ad58:	f8ad 301e 	strh.w	r3, [sp, #30]
   3ad5c:	4623      	mov	r3, r4
   3ad5e:	9a01      	ldr	r2, [sp, #4]
   3ad60:	6800      	ldr	r0, [r0, #0]
   3ad62:	9403      	str	r4, [sp, #12]
   3ad64:	f001 fc00 	bl	3c568 <__ssvfiscanf_r>
   3ad68:	b01f      	add	sp, #124	; 0x7c
   3ad6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ad6e:	b003      	add	sp, #12
   3ad70:	4770      	bx	lr
   3ad72:	bf00      	nop
   3ad74:	00041e57 	.word	0x00041e57
   3ad78:	20014a74 	.word	0x20014a74

0003ad7c <strtod>:
   3ad7c:	460a      	mov	r2, r1
   3ad7e:	4601      	mov	r1, r0
   3ad80:	4802      	ldr	r0, [pc, #8]	; (3ad8c <strtod+0x10>)
   3ad82:	4b03      	ldr	r3, [pc, #12]	; (3ad90 <strtod+0x14>)
   3ad84:	6800      	ldr	r0, [r0, #0]
   3ad86:	f7e3 bdd7 	b.w	1e938 <_strtod_l>
   3ad8a:	bf00      	nop
   3ad8c:	20014a74 	.word	0x20014a74
   3ad90:	20014ad8 	.word	0x20014ad8

0003ad94 <_strtol_l.constprop.0>:
   3ad94:	2b01      	cmp	r3, #1
   3ad96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ad9a:	d001      	beq.n	3ada0 <_strtol_l.constprop.0+0xc>
   3ad9c:	2b24      	cmp	r3, #36	; 0x24
   3ad9e:	d906      	bls.n	3adae <_strtol_l.constprop.0+0x1a>
   3ada0:	f003 f883 	bl	3deaa <__errno>
   3ada4:	2316      	movs	r3, #22
   3ada6:	6003      	str	r3, [r0, #0]
   3ada8:	2000      	movs	r0, #0
   3adaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3adae:	460d      	mov	r5, r1
   3adb0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 3ae94 <_strtol_l.constprop.0+0x100>
   3adb4:	462e      	mov	r6, r5
   3adb6:	f815 4b01 	ldrb.w	r4, [r5], #1
   3adba:	f814 700c 	ldrb.w	r7, [r4, ip]
   3adbe:	f017 0708 	ands.w	r7, r7, #8
   3adc2:	d1f7      	bne.n	3adb4 <_strtol_l.constprop.0+0x20>
   3adc4:	2c2d      	cmp	r4, #45	; 0x2d
   3adc6:	d132      	bne.n	3ae2e <_strtol_l.constprop.0+0x9a>
   3adc8:	782c      	ldrb	r4, [r5, #0]
   3adca:	2701      	movs	r7, #1
   3adcc:	1cb5      	adds	r5, r6, #2
   3adce:	2b00      	cmp	r3, #0
   3add0:	d05b      	beq.n	3ae8a <_strtol_l.constprop.0+0xf6>
   3add2:	2b10      	cmp	r3, #16
   3add4:	d109      	bne.n	3adea <_strtol_l.constprop.0+0x56>
   3add6:	2c30      	cmp	r4, #48	; 0x30
   3add8:	d107      	bne.n	3adea <_strtol_l.constprop.0+0x56>
   3adda:	782c      	ldrb	r4, [r5, #0]
   3addc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   3ade0:	2c58      	cmp	r4, #88	; 0x58
   3ade2:	d14d      	bne.n	3ae80 <_strtol_l.constprop.0+0xec>
   3ade4:	786c      	ldrb	r4, [r5, #1]
   3ade6:	2310      	movs	r3, #16
   3ade8:	3502      	adds	r5, #2
   3adea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   3adee:	f04f 0c00 	mov.w	ip, #0
   3adf2:	f108 38ff 	add.w	r8, r8, #4294967295
   3adf6:	4666      	mov	r6, ip
   3adf8:	fbb8 f9f3 	udiv	r9, r8, r3
   3adfc:	fb03 8a19 	mls	sl, r3, r9, r8
   3ae00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3ae04:	f1be 0f09 	cmp.w	lr, #9
   3ae08:	d816      	bhi.n	3ae38 <_strtol_l.constprop.0+0xa4>
   3ae0a:	4674      	mov	r4, lr
   3ae0c:	42a3      	cmp	r3, r4
   3ae0e:	dd24      	ble.n	3ae5a <_strtol_l.constprop.0+0xc6>
   3ae10:	f1bc 0f00 	cmp.w	ip, #0
   3ae14:	db1e      	blt.n	3ae54 <_strtol_l.constprop.0+0xc0>
   3ae16:	45b1      	cmp	r9, r6
   3ae18:	d31c      	bcc.n	3ae54 <_strtol_l.constprop.0+0xc0>
   3ae1a:	d101      	bne.n	3ae20 <_strtol_l.constprop.0+0x8c>
   3ae1c:	45a2      	cmp	sl, r4
   3ae1e:	db19      	blt.n	3ae54 <_strtol_l.constprop.0+0xc0>
   3ae20:	fb06 4603 	mla	r6, r6, r3, r4
   3ae24:	f04f 0c01 	mov.w	ip, #1
   3ae28:	f815 4b01 	ldrb.w	r4, [r5], #1
   3ae2c:	e7e8      	b.n	3ae00 <_strtol_l.constprop.0+0x6c>
   3ae2e:	2c2b      	cmp	r4, #43	; 0x2b
   3ae30:	bf04      	itt	eq
   3ae32:	782c      	ldrbeq	r4, [r5, #0]
   3ae34:	1cb5      	addeq	r5, r6, #2
   3ae36:	e7ca      	b.n	3adce <_strtol_l.constprop.0+0x3a>
   3ae38:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3ae3c:	f1be 0f19 	cmp.w	lr, #25
   3ae40:	d801      	bhi.n	3ae46 <_strtol_l.constprop.0+0xb2>
   3ae42:	3c37      	subs	r4, #55	; 0x37
   3ae44:	e7e2      	b.n	3ae0c <_strtol_l.constprop.0+0x78>
   3ae46:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3ae4a:	f1be 0f19 	cmp.w	lr, #25
   3ae4e:	d804      	bhi.n	3ae5a <_strtol_l.constprop.0+0xc6>
   3ae50:	3c57      	subs	r4, #87	; 0x57
   3ae52:	e7db      	b.n	3ae0c <_strtol_l.constprop.0+0x78>
   3ae54:	f04f 3cff 	mov.w	ip, #4294967295
   3ae58:	e7e6      	b.n	3ae28 <_strtol_l.constprop.0+0x94>
   3ae5a:	f1bc 0f00 	cmp.w	ip, #0
   3ae5e:	da05      	bge.n	3ae6c <_strtol_l.constprop.0+0xd8>
   3ae60:	2322      	movs	r3, #34	; 0x22
   3ae62:	4646      	mov	r6, r8
   3ae64:	6003      	str	r3, [r0, #0]
   3ae66:	b942      	cbnz	r2, 3ae7a <_strtol_l.constprop.0+0xe6>
   3ae68:	4630      	mov	r0, r6
   3ae6a:	e79e      	b.n	3adaa <_strtol_l.constprop.0+0x16>
   3ae6c:	b107      	cbz	r7, 3ae70 <_strtol_l.constprop.0+0xdc>
   3ae6e:	4276      	negs	r6, r6
   3ae70:	2a00      	cmp	r2, #0
   3ae72:	d0f9      	beq.n	3ae68 <_strtol_l.constprop.0+0xd4>
   3ae74:	f1bc 0f00 	cmp.w	ip, #0
   3ae78:	d000      	beq.n	3ae7c <_strtol_l.constprop.0+0xe8>
   3ae7a:	1e69      	subs	r1, r5, #1
   3ae7c:	6011      	str	r1, [r2, #0]
   3ae7e:	e7f3      	b.n	3ae68 <_strtol_l.constprop.0+0xd4>
   3ae80:	2430      	movs	r4, #48	; 0x30
   3ae82:	2b00      	cmp	r3, #0
   3ae84:	d1b1      	bne.n	3adea <_strtol_l.constprop.0+0x56>
   3ae86:	2308      	movs	r3, #8
   3ae88:	e7af      	b.n	3adea <_strtol_l.constprop.0+0x56>
   3ae8a:	2c30      	cmp	r4, #48	; 0x30
   3ae8c:	d0a5      	beq.n	3adda <_strtol_l.constprop.0+0x46>
   3ae8e:	230a      	movs	r3, #10
   3ae90:	e7ab      	b.n	3adea <_strtol_l.constprop.0+0x56>
   3ae92:	bf00      	nop
   3ae94:	0004c62f 	.word	0x0004c62f

0003ae98 <strtol>:
   3ae98:	4613      	mov	r3, r2
   3ae9a:	460a      	mov	r2, r1
   3ae9c:	4601      	mov	r1, r0
   3ae9e:	4802      	ldr	r0, [pc, #8]	; (3aea8 <strtol+0x10>)
   3aea0:	6800      	ldr	r0, [r0, #0]
   3aea2:	f7ff bf77 	b.w	3ad94 <_strtol_l.constprop.0>
   3aea6:	bf00      	nop
   3aea8:	20014a74 	.word	0x20014a74

0003aeac <_strtoll_l.constprop.0>:
   3aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aeb0:	b085      	sub	sp, #20
   3aeb2:	4688      	mov	r8, r1
   3aeb4:	461e      	mov	r6, r3
   3aeb6:	460d      	mov	r5, r1
   3aeb8:	9201      	str	r2, [sp, #4]
   3aeba:	4a46      	ldr	r2, [pc, #280]	; (3afd4 <_strtoll_l.constprop.0+0x128>)
   3aebc:	9003      	str	r0, [sp, #12]
   3aebe:	462b      	mov	r3, r5
   3aec0:	f815 4b01 	ldrb.w	r4, [r5], #1
   3aec4:	5ca7      	ldrb	r7, [r4, r2]
   3aec6:	f017 0708 	ands.w	r7, r7, #8
   3aeca:	d1f8      	bne.n	3aebe <_strtoll_l.constprop.0+0x12>
   3aecc:	2c2d      	cmp	r4, #45	; 0x2d
   3aece:	d148      	bne.n	3af62 <_strtoll_l.constprop.0+0xb6>
   3aed0:	782c      	ldrb	r4, [r5, #0]
   3aed2:	2701      	movs	r7, #1
   3aed4:	1c9d      	adds	r5, r3, #2
   3aed6:	2e00      	cmp	r6, #0
   3aed8:	d078      	beq.n	3afcc <_strtoll_l.constprop.0+0x120>
   3aeda:	2e10      	cmp	r6, #16
   3aedc:	d109      	bne.n	3aef2 <_strtoll_l.constprop.0+0x46>
   3aede:	2c30      	cmp	r4, #48	; 0x30
   3aee0:	d107      	bne.n	3aef2 <_strtoll_l.constprop.0+0x46>
   3aee2:	782b      	ldrb	r3, [r5, #0]
   3aee4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3aee8:	2b58      	cmp	r3, #88	; 0x58
   3aeea:	d16a      	bne.n	3afc2 <_strtoll_l.constprop.0+0x116>
   3aeec:	786c      	ldrb	r4, [r5, #1]
   3aeee:	2610      	movs	r6, #16
   3aef0:	3502      	adds	r5, #2
   3aef2:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   3aef6:	f107 3bff 	add.w	fp, r7, #4294967295
   3aefa:	ea4f 79e6 	mov.w	r9, r6, asr #31
   3aefe:	4632      	mov	r2, r6
   3af00:	f10a 3aff 	add.w	sl, sl, #4294967295
   3af04:	4658      	mov	r0, fp
   3af06:	464b      	mov	r3, r9
   3af08:	4651      	mov	r1, sl
   3af0a:	f7e1 ffed 	bl	1cee8 <__aeabi_uldivmod>
   3af0e:	2300      	movs	r3, #0
   3af10:	468c      	mov	ip, r1
   3af12:	9202      	str	r2, [sp, #8]
   3af14:	4619      	mov	r1, r3
   3af16:	4602      	mov	r2, r0
   3af18:	4618      	mov	r0, r3
   3af1a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3af1e:	f1be 0f09 	cmp.w	lr, #9
   3af22:	d823      	bhi.n	3af6c <_strtoll_l.constprop.0+0xc0>
   3af24:	4674      	mov	r4, lr
   3af26:	42a6      	cmp	r6, r4
   3af28:	dd31      	ble.n	3af8e <_strtoll_l.constprop.0+0xe2>
   3af2a:	f1b3 3fff 	cmp.w	r3, #4294967295
   3af2e:	d015      	beq.n	3af5c <_strtoll_l.constprop.0+0xb0>
   3af30:	4282      	cmp	r2, r0
   3af32:	eb7c 0301 	sbcs.w	r3, ip, r1
   3af36:	d327      	bcc.n	3af88 <_strtoll_l.constprop.0+0xdc>
   3af38:	458c      	cmp	ip, r1
   3af3a:	bf08      	it	eq
   3af3c:	4282      	cmpeq	r2, r0
   3af3e:	d102      	bne.n	3af46 <_strtoll_l.constprop.0+0x9a>
   3af40:	9b02      	ldr	r3, [sp, #8]
   3af42:	42a3      	cmp	r3, r4
   3af44:	db20      	blt.n	3af88 <_strtoll_l.constprop.0+0xdc>
   3af46:	4371      	muls	r1, r6
   3af48:	fb00 1109 	mla	r1, r0, r9, r1
   3af4c:	fba6 0300 	umull	r0, r3, r6, r0
   3af50:	4419      	add	r1, r3
   3af52:	1820      	adds	r0, r4, r0
   3af54:	f04f 0301 	mov.w	r3, #1
   3af58:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   3af5c:	f815 4b01 	ldrb.w	r4, [r5], #1
   3af60:	e7db      	b.n	3af1a <_strtoll_l.constprop.0+0x6e>
   3af62:	2c2b      	cmp	r4, #43	; 0x2b
   3af64:	bf04      	itt	eq
   3af66:	782c      	ldrbeq	r4, [r5, #0]
   3af68:	1c9d      	addeq	r5, r3, #2
   3af6a:	e7b4      	b.n	3aed6 <_strtoll_l.constprop.0+0x2a>
   3af6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3af70:	f1be 0f19 	cmp.w	lr, #25
   3af74:	d801      	bhi.n	3af7a <_strtoll_l.constprop.0+0xce>
   3af76:	3c37      	subs	r4, #55	; 0x37
   3af78:	e7d5      	b.n	3af26 <_strtoll_l.constprop.0+0x7a>
   3af7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3af7e:	f1be 0f19 	cmp.w	lr, #25
   3af82:	d804      	bhi.n	3af8e <_strtoll_l.constprop.0+0xe2>
   3af84:	3c57      	subs	r4, #87	; 0x57
   3af86:	e7ce      	b.n	3af26 <_strtoll_l.constprop.0+0x7a>
   3af88:	f04f 33ff 	mov.w	r3, #4294967295
   3af8c:	e7e6      	b.n	3af5c <_strtoll_l.constprop.0+0xb0>
   3af8e:	1c5a      	adds	r2, r3, #1
   3af90:	d109      	bne.n	3afa6 <_strtoll_l.constprop.0+0xfa>
   3af92:	2322      	movs	r3, #34	; 0x22
   3af94:	9a03      	ldr	r2, [sp, #12]
   3af96:	4658      	mov	r0, fp
   3af98:	4651      	mov	r1, sl
   3af9a:	6013      	str	r3, [r2, #0]
   3af9c:	9b01      	ldr	r3, [sp, #4]
   3af9e:	b953      	cbnz	r3, 3afb6 <_strtoll_l.constprop.0+0x10a>
   3afa0:	b005      	add	sp, #20
   3afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afa6:	b117      	cbz	r7, 3afae <_strtoll_l.constprop.0+0x102>
   3afa8:	4240      	negs	r0, r0
   3afaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3afae:	9a01      	ldr	r2, [sp, #4]
   3afb0:	2a00      	cmp	r2, #0
   3afb2:	d0f5      	beq.n	3afa0 <_strtoll_l.constprop.0+0xf4>
   3afb4:	b10b      	cbz	r3, 3afba <_strtoll_l.constprop.0+0x10e>
   3afb6:	f105 38ff 	add.w	r8, r5, #4294967295
   3afba:	9b01      	ldr	r3, [sp, #4]
   3afbc:	f8c3 8000 	str.w	r8, [r3]
   3afc0:	e7ee      	b.n	3afa0 <_strtoll_l.constprop.0+0xf4>
   3afc2:	2430      	movs	r4, #48	; 0x30
   3afc4:	2e00      	cmp	r6, #0
   3afc6:	d194      	bne.n	3aef2 <_strtoll_l.constprop.0+0x46>
   3afc8:	2608      	movs	r6, #8
   3afca:	e792      	b.n	3aef2 <_strtoll_l.constprop.0+0x46>
   3afcc:	2c30      	cmp	r4, #48	; 0x30
   3afce:	d088      	beq.n	3aee2 <_strtoll_l.constprop.0+0x36>
   3afd0:	260a      	movs	r6, #10
   3afd2:	e78e      	b.n	3aef2 <_strtoll_l.constprop.0+0x46>
   3afd4:	0004c62f 	.word	0x0004c62f

0003afd8 <strtoll>:
   3afd8:	4613      	mov	r3, r2
   3afda:	460a      	mov	r2, r1
   3afdc:	4601      	mov	r1, r0
   3afde:	4802      	ldr	r0, [pc, #8]	; (3afe8 <strtoll+0x10>)
   3afe0:	6800      	ldr	r0, [r0, #0]
   3afe2:	f7ff bf63 	b.w	3aeac <_strtoll_l.constprop.0>
   3afe6:	bf00      	nop
   3afe8:	20014a74 	.word	0x20014a74

0003afec <_strtoul_l.constprop.0>:
   3afec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3aff0:	4686      	mov	lr, r0
   3aff2:	460d      	mov	r5, r1
   3aff4:	4f35      	ldr	r7, [pc, #212]	; (3b0cc <_strtoul_l.constprop.0+0xe0>)
   3aff6:	4628      	mov	r0, r5
   3aff8:	f815 4b01 	ldrb.w	r4, [r5], #1
   3affc:	5de6      	ldrb	r6, [r4, r7]
   3affe:	f016 0608 	ands.w	r6, r6, #8
   3b002:	d1f8      	bne.n	3aff6 <_strtoul_l.constprop.0+0xa>
   3b004:	2c2d      	cmp	r4, #45	; 0x2d
   3b006:	d12f      	bne.n	3b068 <_strtoul_l.constprop.0+0x7c>
   3b008:	782c      	ldrb	r4, [r5, #0]
   3b00a:	2601      	movs	r6, #1
   3b00c:	1c85      	adds	r5, r0, #2
   3b00e:	2b00      	cmp	r3, #0
   3b010:	d057      	beq.n	3b0c2 <_strtoul_l.constprop.0+0xd6>
   3b012:	2b10      	cmp	r3, #16
   3b014:	d109      	bne.n	3b02a <_strtoul_l.constprop.0+0x3e>
   3b016:	2c30      	cmp	r4, #48	; 0x30
   3b018:	d107      	bne.n	3b02a <_strtoul_l.constprop.0+0x3e>
   3b01a:	7828      	ldrb	r0, [r5, #0]
   3b01c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3b020:	2858      	cmp	r0, #88	; 0x58
   3b022:	d149      	bne.n	3b0b8 <_strtoul_l.constprop.0+0xcc>
   3b024:	786c      	ldrb	r4, [r5, #1]
   3b026:	2310      	movs	r3, #16
   3b028:	3502      	adds	r5, #2
   3b02a:	f04f 38ff 	mov.w	r8, #4294967295
   3b02e:	2700      	movs	r7, #0
   3b030:	fbb8 f8f3 	udiv	r8, r8, r3
   3b034:	fb03 f908 	mul.w	r9, r3, r8
   3b038:	4638      	mov	r0, r7
   3b03a:	ea6f 0909 	mvn.w	r9, r9
   3b03e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   3b042:	f1bc 0f09 	cmp.w	ip, #9
   3b046:	d814      	bhi.n	3b072 <_strtoul_l.constprop.0+0x86>
   3b048:	4664      	mov	r4, ip
   3b04a:	42a3      	cmp	r3, r4
   3b04c:	dd22      	ble.n	3b094 <_strtoul_l.constprop.0+0xa8>
   3b04e:	2f00      	cmp	r7, #0
   3b050:	db1d      	blt.n	3b08e <_strtoul_l.constprop.0+0xa2>
   3b052:	4580      	cmp	r8, r0
   3b054:	d31b      	bcc.n	3b08e <_strtoul_l.constprop.0+0xa2>
   3b056:	d101      	bne.n	3b05c <_strtoul_l.constprop.0+0x70>
   3b058:	45a1      	cmp	r9, r4
   3b05a:	db18      	blt.n	3b08e <_strtoul_l.constprop.0+0xa2>
   3b05c:	fb00 4003 	mla	r0, r0, r3, r4
   3b060:	2701      	movs	r7, #1
   3b062:	f815 4b01 	ldrb.w	r4, [r5], #1
   3b066:	e7ea      	b.n	3b03e <_strtoul_l.constprop.0+0x52>
   3b068:	2c2b      	cmp	r4, #43	; 0x2b
   3b06a:	bf04      	itt	eq
   3b06c:	782c      	ldrbeq	r4, [r5, #0]
   3b06e:	1c85      	addeq	r5, r0, #2
   3b070:	e7cd      	b.n	3b00e <_strtoul_l.constprop.0+0x22>
   3b072:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   3b076:	f1bc 0f19 	cmp.w	ip, #25
   3b07a:	d801      	bhi.n	3b080 <_strtoul_l.constprop.0+0x94>
   3b07c:	3c37      	subs	r4, #55	; 0x37
   3b07e:	e7e4      	b.n	3b04a <_strtoul_l.constprop.0+0x5e>
   3b080:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   3b084:	f1bc 0f19 	cmp.w	ip, #25
   3b088:	d804      	bhi.n	3b094 <_strtoul_l.constprop.0+0xa8>
   3b08a:	3c57      	subs	r4, #87	; 0x57
   3b08c:	e7dd      	b.n	3b04a <_strtoul_l.constprop.0+0x5e>
   3b08e:	f04f 37ff 	mov.w	r7, #4294967295
   3b092:	e7e6      	b.n	3b062 <_strtoul_l.constprop.0+0x76>
   3b094:	2f00      	cmp	r7, #0
   3b096:	da07      	bge.n	3b0a8 <_strtoul_l.constprop.0+0xbc>
   3b098:	2322      	movs	r3, #34	; 0x22
   3b09a:	f04f 30ff 	mov.w	r0, #4294967295
   3b09e:	f8ce 3000 	str.w	r3, [lr]
   3b0a2:	b932      	cbnz	r2, 3b0b2 <_strtoul_l.constprop.0+0xc6>
   3b0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b0a8:	b106      	cbz	r6, 3b0ac <_strtoul_l.constprop.0+0xc0>
   3b0aa:	4240      	negs	r0, r0
   3b0ac:	2a00      	cmp	r2, #0
   3b0ae:	d0f9      	beq.n	3b0a4 <_strtoul_l.constprop.0+0xb8>
   3b0b0:	b107      	cbz	r7, 3b0b4 <_strtoul_l.constprop.0+0xc8>
   3b0b2:	1e69      	subs	r1, r5, #1
   3b0b4:	6011      	str	r1, [r2, #0]
   3b0b6:	e7f5      	b.n	3b0a4 <_strtoul_l.constprop.0+0xb8>
   3b0b8:	2430      	movs	r4, #48	; 0x30
   3b0ba:	2b00      	cmp	r3, #0
   3b0bc:	d1b5      	bne.n	3b02a <_strtoul_l.constprop.0+0x3e>
   3b0be:	2308      	movs	r3, #8
   3b0c0:	e7b3      	b.n	3b02a <_strtoul_l.constprop.0+0x3e>
   3b0c2:	2c30      	cmp	r4, #48	; 0x30
   3b0c4:	d0a9      	beq.n	3b01a <_strtoul_l.constprop.0+0x2e>
   3b0c6:	230a      	movs	r3, #10
   3b0c8:	e7af      	b.n	3b02a <_strtoul_l.constprop.0+0x3e>
   3b0ca:	bf00      	nop
   3b0cc:	0004c62f 	.word	0x0004c62f

0003b0d0 <strtoul>:
   3b0d0:	4613      	mov	r3, r2
   3b0d2:	460a      	mov	r2, r1
   3b0d4:	4601      	mov	r1, r0
   3b0d6:	4802      	ldr	r0, [pc, #8]	; (3b0e0 <strtoul+0x10>)
   3b0d8:	6800      	ldr	r0, [r0, #0]
   3b0da:	f7ff bf87 	b.w	3afec <_strtoul_l.constprop.0>
   3b0de:	bf00      	nop
   3b0e0:	20014a74 	.word	0x20014a74

0003b0e4 <vsniprintf>:
   3b0e4:	b507      	push	{r0, r1, r2, lr}
   3b0e6:	9300      	str	r3, [sp, #0]
   3b0e8:	4613      	mov	r3, r2
   3b0ea:	460a      	mov	r2, r1
   3b0ec:	4601      	mov	r1, r0
   3b0ee:	4803      	ldr	r0, [pc, #12]	; (3b0fc <vsniprintf+0x18>)
   3b0f0:	6800      	ldr	r0, [r0, #0]
   3b0f2:	f006 ff8a 	bl	4200a <_vsniprintf_r>
   3b0f6:	b003      	add	sp, #12
   3b0f8:	f85d fb04 	ldr.w	pc, [sp], #4
   3b0fc:	20014a74 	.word	0x20014a74

0003b100 <_vsiprintf_r>:
   3b100:	b500      	push	{lr}
   3b102:	b09b      	sub	sp, #108	; 0x6c
   3b104:	9100      	str	r1, [sp, #0]
   3b106:	9104      	str	r1, [sp, #16]
   3b108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3b10c:	9105      	str	r1, [sp, #20]
   3b10e:	9102      	str	r1, [sp, #8]
   3b110:	4905      	ldr	r1, [pc, #20]	; (3b128 <_vsiprintf_r+0x28>)
   3b112:	9103      	str	r1, [sp, #12]
   3b114:	4669      	mov	r1, sp
   3b116:	f001 f927 	bl	3c368 <_svfiprintf_r>
   3b11a:	9b00      	ldr	r3, [sp, #0]
   3b11c:	2200      	movs	r2, #0
   3b11e:	701a      	strb	r2, [r3, #0]
   3b120:	b01b      	add	sp, #108	; 0x6c
   3b122:	f85d fb04 	ldr.w	pc, [sp], #4
   3b126:	bf00      	nop
   3b128:	ffff0208 	.word	0xffff0208

0003b12c <vsiprintf>:
   3b12c:	4613      	mov	r3, r2
   3b12e:	460a      	mov	r2, r1
   3b130:	4601      	mov	r1, r0
   3b132:	4802      	ldr	r0, [pc, #8]	; (3b13c <vsiprintf+0x10>)
   3b134:	6800      	ldr	r0, [r0, #0]
   3b136:	f7ff bfe3 	b.w	3b100 <_vsiprintf_r>
   3b13a:	bf00      	nop
   3b13c:	20014a74 	.word	0x20014a74

0003b140 <_vsiscanf_r>:
   3b140:	b510      	push	{r4, lr}
   3b142:	4604      	mov	r4, r0
   3b144:	b09c      	sub	sp, #112	; 0x70
   3b146:	f44f 7001 	mov.w	r0, #516	; 0x204
   3b14a:	9102      	str	r1, [sp, #8]
   3b14c:	f8ad 0014 	strh.w	r0, [sp, #20]
   3b150:	4608      	mov	r0, r1
   3b152:	9106      	str	r1, [sp, #24]
   3b154:	e9cd 3200 	strd	r3, r2, [sp]
   3b158:	f7e2 f873 	bl	1d242 <strlen>
   3b15c:	4909      	ldr	r1, [pc, #36]	; (3b184 <_vsiscanf_r+0x44>)
   3b15e:	9003      	str	r0, [sp, #12]
   3b160:	910b      	str	r1, [sp, #44]	; 0x2c
   3b162:	2100      	movs	r1, #0
   3b164:	9007      	str	r0, [sp, #28]
   3b166:	4620      	mov	r0, r4
   3b168:	910f      	str	r1, [sp, #60]	; 0x3c
   3b16a:	9114      	str	r1, [sp, #80]	; 0x50
   3b16c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3b170:	e9dd 3200 	ldrd	r3, r2, [sp]
   3b174:	f8ad 1016 	strh.w	r1, [sp, #22]
   3b178:	a902      	add	r1, sp, #8
   3b17a:	f001 f9f5 	bl	3c568 <__ssvfiscanf_r>
   3b17e:	b01c      	add	sp, #112	; 0x70
   3b180:	bd10      	pop	{r4, pc}
   3b182:	bf00      	nop
   3b184:	00041e57 	.word	0x00041e57

0003b188 <vsiscanf>:
   3b188:	4613      	mov	r3, r2
   3b18a:	460a      	mov	r2, r1
   3b18c:	4601      	mov	r1, r0
   3b18e:	4802      	ldr	r0, [pc, #8]	; (3b198 <vsiscanf+0x10>)
   3b190:	6800      	ldr	r0, [r0, #0]
   3b192:	f7ff bfd5 	b.w	3b140 <_vsiscanf_r>
   3b196:	bf00      	nop
   3b198:	20014a74 	.word	0x20014a74

0003b19c <__swbuf_r>:
   3b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b19e:	460e      	mov	r6, r1
   3b1a0:	4614      	mov	r4, r2
   3b1a2:	4605      	mov	r5, r0
   3b1a4:	b118      	cbz	r0, 3b1ae <__swbuf_r+0x12>
   3b1a6:	6983      	ldr	r3, [r0, #24]
   3b1a8:	b90b      	cbnz	r3, 3b1ae <__swbuf_r+0x12>
   3b1aa:	f000 f9db 	bl	3b564 <__sinit>
   3b1ae:	4b21      	ldr	r3, [pc, #132]	; (3b234 <__swbuf_r+0x98>)
   3b1b0:	429c      	cmp	r4, r3
   3b1b2:	d12b      	bne.n	3b20c <__swbuf_r+0x70>
   3b1b4:	686c      	ldr	r4, [r5, #4]
   3b1b6:	69a3      	ldr	r3, [r4, #24]
   3b1b8:	60a3      	str	r3, [r4, #8]
   3b1ba:	89a3      	ldrh	r3, [r4, #12]
   3b1bc:	071a      	lsls	r2, r3, #28
   3b1be:	d52f      	bpl.n	3b220 <__swbuf_r+0x84>
   3b1c0:	6923      	ldr	r3, [r4, #16]
   3b1c2:	b36b      	cbz	r3, 3b220 <__swbuf_r+0x84>
   3b1c4:	6923      	ldr	r3, [r4, #16]
   3b1c6:	b2f6      	uxtb	r6, r6
   3b1c8:	6820      	ldr	r0, [r4, #0]
   3b1ca:	4637      	mov	r7, r6
   3b1cc:	1ac0      	subs	r0, r0, r3
   3b1ce:	6963      	ldr	r3, [r4, #20]
   3b1d0:	4283      	cmp	r3, r0
   3b1d2:	dc04      	bgt.n	3b1de <__swbuf_r+0x42>
   3b1d4:	4621      	mov	r1, r4
   3b1d6:	4628      	mov	r0, r5
   3b1d8:	f000 f946 	bl	3b468 <_fflush_r>
   3b1dc:	bb30      	cbnz	r0, 3b22c <__swbuf_r+0x90>
   3b1de:	68a3      	ldr	r3, [r4, #8]
   3b1e0:	3001      	adds	r0, #1
   3b1e2:	3b01      	subs	r3, #1
   3b1e4:	60a3      	str	r3, [r4, #8]
   3b1e6:	6823      	ldr	r3, [r4, #0]
   3b1e8:	1c5a      	adds	r2, r3, #1
   3b1ea:	6022      	str	r2, [r4, #0]
   3b1ec:	701e      	strb	r6, [r3, #0]
   3b1ee:	6963      	ldr	r3, [r4, #20]
   3b1f0:	4283      	cmp	r3, r0
   3b1f2:	d004      	beq.n	3b1fe <__swbuf_r+0x62>
   3b1f4:	89a3      	ldrh	r3, [r4, #12]
   3b1f6:	07db      	lsls	r3, r3, #31
   3b1f8:	d506      	bpl.n	3b208 <__swbuf_r+0x6c>
   3b1fa:	2e0a      	cmp	r6, #10
   3b1fc:	d104      	bne.n	3b208 <__swbuf_r+0x6c>
   3b1fe:	4621      	mov	r1, r4
   3b200:	4628      	mov	r0, r5
   3b202:	f000 f931 	bl	3b468 <_fflush_r>
   3b206:	b988      	cbnz	r0, 3b22c <__swbuf_r+0x90>
   3b208:	4638      	mov	r0, r7
   3b20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b20c:	4b0a      	ldr	r3, [pc, #40]	; (3b238 <__swbuf_r+0x9c>)
   3b20e:	429c      	cmp	r4, r3
   3b210:	d101      	bne.n	3b216 <__swbuf_r+0x7a>
   3b212:	68ac      	ldr	r4, [r5, #8]
   3b214:	e7cf      	b.n	3b1b6 <__swbuf_r+0x1a>
   3b216:	4b09      	ldr	r3, [pc, #36]	; (3b23c <__swbuf_r+0xa0>)
   3b218:	429c      	cmp	r4, r3
   3b21a:	bf08      	it	eq
   3b21c:	68ec      	ldreq	r4, [r5, #12]
   3b21e:	e7ca      	b.n	3b1b6 <__swbuf_r+0x1a>
   3b220:	4621      	mov	r1, r4
   3b222:	4628      	mov	r0, r5
   3b224:	f000 f81e 	bl	3b264 <__swsetup_r>
   3b228:	2800      	cmp	r0, #0
   3b22a:	d0cb      	beq.n	3b1c4 <__swbuf_r+0x28>
   3b22c:	f04f 37ff 	mov.w	r7, #4294967295
   3b230:	e7ea      	b.n	3b208 <__swbuf_r+0x6c>
   3b232:	bf00      	nop
   3b234:	00043b7c 	.word	0x00043b7c
   3b238:	00043b9c 	.word	0x00043b9c
   3b23c:	00043b5c 	.word	0x00043b5c

0003b240 <_write_r>:
   3b240:	b538      	push	{r3, r4, r5, lr}
   3b242:	4604      	mov	r4, r0
   3b244:	4d06      	ldr	r5, [pc, #24]	; (3b260 <_write_r+0x20>)
   3b246:	4608      	mov	r0, r1
   3b248:	4611      	mov	r1, r2
   3b24a:	2200      	movs	r2, #0
   3b24c:	602a      	str	r2, [r5, #0]
   3b24e:	461a      	mov	r2, r3
   3b250:	f002 fe14 	bl	3de7c <_write>
   3b254:	1c43      	adds	r3, r0, #1
   3b256:	d102      	bne.n	3b25e <_write_r+0x1e>
   3b258:	682b      	ldr	r3, [r5, #0]
   3b25a:	b103      	cbz	r3, 3b25e <_write_r+0x1e>
   3b25c:	6023      	str	r3, [r4, #0]
   3b25e:	bd38      	pop	{r3, r4, r5, pc}
   3b260:	2001a580 	.word	0x2001a580

0003b264 <__swsetup_r>:
   3b264:	4b32      	ldr	r3, [pc, #200]	; (3b330 <__swsetup_r+0xcc>)
   3b266:	b570      	push	{r4, r5, r6, lr}
   3b268:	681d      	ldr	r5, [r3, #0]
   3b26a:	4606      	mov	r6, r0
   3b26c:	460c      	mov	r4, r1
   3b26e:	b125      	cbz	r5, 3b27a <__swsetup_r+0x16>
   3b270:	69ab      	ldr	r3, [r5, #24]
   3b272:	b913      	cbnz	r3, 3b27a <__swsetup_r+0x16>
   3b274:	4628      	mov	r0, r5
   3b276:	f000 f975 	bl	3b564 <__sinit>
   3b27a:	4b2e      	ldr	r3, [pc, #184]	; (3b334 <__swsetup_r+0xd0>)
   3b27c:	429c      	cmp	r4, r3
   3b27e:	d10f      	bne.n	3b2a0 <__swsetup_r+0x3c>
   3b280:	686c      	ldr	r4, [r5, #4]
   3b282:	89a3      	ldrh	r3, [r4, #12]
   3b284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3b288:	0719      	lsls	r1, r3, #28
   3b28a:	d42c      	bmi.n	3b2e6 <__swsetup_r+0x82>
   3b28c:	06dd      	lsls	r5, r3, #27
   3b28e:	d411      	bmi.n	3b2b4 <__swsetup_r+0x50>
   3b290:	2309      	movs	r3, #9
   3b292:	6033      	str	r3, [r6, #0]
   3b294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   3b298:	f04f 30ff 	mov.w	r0, #4294967295
   3b29c:	81a3      	strh	r3, [r4, #12]
   3b29e:	e03e      	b.n	3b31e <__swsetup_r+0xba>
   3b2a0:	4b25      	ldr	r3, [pc, #148]	; (3b338 <__swsetup_r+0xd4>)
   3b2a2:	429c      	cmp	r4, r3
   3b2a4:	d101      	bne.n	3b2aa <__swsetup_r+0x46>
   3b2a6:	68ac      	ldr	r4, [r5, #8]
   3b2a8:	e7eb      	b.n	3b282 <__swsetup_r+0x1e>
   3b2aa:	4b24      	ldr	r3, [pc, #144]	; (3b33c <__swsetup_r+0xd8>)
   3b2ac:	429c      	cmp	r4, r3
   3b2ae:	bf08      	it	eq
   3b2b0:	68ec      	ldreq	r4, [r5, #12]
   3b2b2:	e7e6      	b.n	3b282 <__swsetup_r+0x1e>
   3b2b4:	0758      	lsls	r0, r3, #29
   3b2b6:	d512      	bpl.n	3b2de <__swsetup_r+0x7a>
   3b2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3b2ba:	b141      	cbz	r1, 3b2ce <__swsetup_r+0x6a>
   3b2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3b2c0:	4299      	cmp	r1, r3
   3b2c2:	d002      	beq.n	3b2ca <__swsetup_r+0x66>
   3b2c4:	4630      	mov	r0, r6
   3b2c6:	f7fe ff95 	bl	3a1f4 <_free_r>
   3b2ca:	2300      	movs	r3, #0
   3b2cc:	6363      	str	r3, [r4, #52]	; 0x34
   3b2ce:	89a3      	ldrh	r3, [r4, #12]
   3b2d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3b2d4:	81a3      	strh	r3, [r4, #12]
   3b2d6:	2300      	movs	r3, #0
   3b2d8:	6063      	str	r3, [r4, #4]
   3b2da:	6923      	ldr	r3, [r4, #16]
   3b2dc:	6023      	str	r3, [r4, #0]
   3b2de:	89a3      	ldrh	r3, [r4, #12]
   3b2e0:	f043 0308 	orr.w	r3, r3, #8
   3b2e4:	81a3      	strh	r3, [r4, #12]
   3b2e6:	6923      	ldr	r3, [r4, #16]
   3b2e8:	b94b      	cbnz	r3, 3b2fe <__swsetup_r+0x9a>
   3b2ea:	89a3      	ldrh	r3, [r4, #12]
   3b2ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3b2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3b2f4:	d003      	beq.n	3b2fe <__swsetup_r+0x9a>
   3b2f6:	4621      	mov	r1, r4
   3b2f8:	4630      	mov	r0, r6
   3b2fa:	f000 fc0d 	bl	3bb18 <__smakebuf_r>
   3b2fe:	89a0      	ldrh	r0, [r4, #12]
   3b300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3b304:	f010 0301 	ands.w	r3, r0, #1
   3b308:	d00a      	beq.n	3b320 <__swsetup_r+0xbc>
   3b30a:	2300      	movs	r3, #0
   3b30c:	60a3      	str	r3, [r4, #8]
   3b30e:	6963      	ldr	r3, [r4, #20]
   3b310:	425b      	negs	r3, r3
   3b312:	61a3      	str	r3, [r4, #24]
   3b314:	6923      	ldr	r3, [r4, #16]
   3b316:	b943      	cbnz	r3, 3b32a <__swsetup_r+0xc6>
   3b318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   3b31c:	d1ba      	bne.n	3b294 <__swsetup_r+0x30>
   3b31e:	bd70      	pop	{r4, r5, r6, pc}
   3b320:	0781      	lsls	r1, r0, #30
   3b322:	bf58      	it	pl
   3b324:	6963      	ldrpl	r3, [r4, #20]
   3b326:	60a3      	str	r3, [r4, #8]
   3b328:	e7f4      	b.n	3b314 <__swsetup_r+0xb0>
   3b32a:	2000      	movs	r0, #0
   3b32c:	e7f7      	b.n	3b31e <__swsetup_r+0xba>
   3b32e:	bf00      	nop
   3b330:	20014a74 	.word	0x20014a74
   3b334:	00043b7c 	.word	0x00043b7c
   3b338:	00043b9c 	.word	0x00043b9c
   3b33c:	00043b5c 	.word	0x00043b5c

0003b340 <_close_r>:
   3b340:	b538      	push	{r3, r4, r5, lr}
   3b342:	2300      	movs	r3, #0
   3b344:	4d05      	ldr	r5, [pc, #20]	; (3b35c <_close_r+0x1c>)
   3b346:	4604      	mov	r4, r0
   3b348:	4608      	mov	r0, r1
   3b34a:	602b      	str	r3, [r5, #0]
   3b34c:	f002 fd9a 	bl	3de84 <_close>
   3b350:	1c43      	adds	r3, r0, #1
   3b352:	d102      	bne.n	3b35a <_close_r+0x1a>
   3b354:	682b      	ldr	r3, [r5, #0]
   3b356:	b103      	cbz	r3, 3b35a <_close_r+0x1a>
   3b358:	6023      	str	r3, [r4, #0]
   3b35a:	bd38      	pop	{r3, r4, r5, pc}
   3b35c:	2001a580 	.word	0x2001a580

0003b360 <__sflush_r>:
   3b360:	898a      	ldrh	r2, [r1, #12]
   3b362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b366:	4605      	mov	r5, r0
   3b368:	0710      	lsls	r0, r2, #28
   3b36a:	460c      	mov	r4, r1
   3b36c:	d458      	bmi.n	3b420 <__sflush_r+0xc0>
   3b36e:	684b      	ldr	r3, [r1, #4]
   3b370:	2b00      	cmp	r3, #0
   3b372:	dc05      	bgt.n	3b380 <__sflush_r+0x20>
   3b374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3b376:	2b00      	cmp	r3, #0
   3b378:	dc02      	bgt.n	3b380 <__sflush_r+0x20>
   3b37a:	2000      	movs	r0, #0
   3b37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3b382:	2e00      	cmp	r6, #0
   3b384:	d0f9      	beq.n	3b37a <__sflush_r+0x1a>
   3b386:	2300      	movs	r3, #0
   3b388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3b38c:	682f      	ldr	r7, [r5, #0]
   3b38e:	602b      	str	r3, [r5, #0]
   3b390:	d032      	beq.n	3b3f8 <__sflush_r+0x98>
   3b392:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3b394:	89a3      	ldrh	r3, [r4, #12]
   3b396:	075a      	lsls	r2, r3, #29
   3b398:	d505      	bpl.n	3b3a6 <__sflush_r+0x46>
   3b39a:	6863      	ldr	r3, [r4, #4]
   3b39c:	1ac0      	subs	r0, r0, r3
   3b39e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3b3a0:	b10b      	cbz	r3, 3b3a6 <__sflush_r+0x46>
   3b3a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3b3a4:	1ac0      	subs	r0, r0, r3
   3b3a6:	2300      	movs	r3, #0
   3b3a8:	4602      	mov	r2, r0
   3b3aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3b3ac:	4628      	mov	r0, r5
   3b3ae:	6a21      	ldr	r1, [r4, #32]
   3b3b0:	47b0      	blx	r6
   3b3b2:	1c43      	adds	r3, r0, #1
   3b3b4:	89a3      	ldrh	r3, [r4, #12]
   3b3b6:	d106      	bne.n	3b3c6 <__sflush_r+0x66>
   3b3b8:	6829      	ldr	r1, [r5, #0]
   3b3ba:	291d      	cmp	r1, #29
   3b3bc:	d82c      	bhi.n	3b418 <__sflush_r+0xb8>
   3b3be:	4a29      	ldr	r2, [pc, #164]	; (3b464 <__sflush_r+0x104>)
   3b3c0:	40ca      	lsrs	r2, r1
   3b3c2:	07d6      	lsls	r6, r2, #31
   3b3c4:	d528      	bpl.n	3b418 <__sflush_r+0xb8>
   3b3c6:	2200      	movs	r2, #0
   3b3c8:	04d9      	lsls	r1, r3, #19
   3b3ca:	6062      	str	r2, [r4, #4]
   3b3cc:	6922      	ldr	r2, [r4, #16]
   3b3ce:	6022      	str	r2, [r4, #0]
   3b3d0:	d504      	bpl.n	3b3dc <__sflush_r+0x7c>
   3b3d2:	1c42      	adds	r2, r0, #1
   3b3d4:	d101      	bne.n	3b3da <__sflush_r+0x7a>
   3b3d6:	682b      	ldr	r3, [r5, #0]
   3b3d8:	b903      	cbnz	r3, 3b3dc <__sflush_r+0x7c>
   3b3da:	6560      	str	r0, [r4, #84]	; 0x54
   3b3dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3b3de:	602f      	str	r7, [r5, #0]
   3b3e0:	2900      	cmp	r1, #0
   3b3e2:	d0ca      	beq.n	3b37a <__sflush_r+0x1a>
   3b3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3b3e8:	4299      	cmp	r1, r3
   3b3ea:	d002      	beq.n	3b3f2 <__sflush_r+0x92>
   3b3ec:	4628      	mov	r0, r5
   3b3ee:	f7fe ff01 	bl	3a1f4 <_free_r>
   3b3f2:	2000      	movs	r0, #0
   3b3f4:	6360      	str	r0, [r4, #52]	; 0x34
   3b3f6:	e7c1      	b.n	3b37c <__sflush_r+0x1c>
   3b3f8:	6a21      	ldr	r1, [r4, #32]
   3b3fa:	2301      	movs	r3, #1
   3b3fc:	4628      	mov	r0, r5
   3b3fe:	47b0      	blx	r6
   3b400:	1c41      	adds	r1, r0, #1
   3b402:	d1c7      	bne.n	3b394 <__sflush_r+0x34>
   3b404:	682b      	ldr	r3, [r5, #0]
   3b406:	2b00      	cmp	r3, #0
   3b408:	d0c4      	beq.n	3b394 <__sflush_r+0x34>
   3b40a:	2b1d      	cmp	r3, #29
   3b40c:	d001      	beq.n	3b412 <__sflush_r+0xb2>
   3b40e:	2b16      	cmp	r3, #22
   3b410:	d101      	bne.n	3b416 <__sflush_r+0xb6>
   3b412:	602f      	str	r7, [r5, #0]
   3b414:	e7b1      	b.n	3b37a <__sflush_r+0x1a>
   3b416:	89a3      	ldrh	r3, [r4, #12]
   3b418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3b41c:	81a3      	strh	r3, [r4, #12]
   3b41e:	e7ad      	b.n	3b37c <__sflush_r+0x1c>
   3b420:	690f      	ldr	r7, [r1, #16]
   3b422:	2f00      	cmp	r7, #0
   3b424:	d0a9      	beq.n	3b37a <__sflush_r+0x1a>
   3b426:	0793      	lsls	r3, r2, #30
   3b428:	680e      	ldr	r6, [r1, #0]
   3b42a:	600f      	str	r7, [r1, #0]
   3b42c:	bf0c      	ite	eq
   3b42e:	694b      	ldreq	r3, [r1, #20]
   3b430:	2300      	movne	r3, #0
   3b432:	eba6 0807 	sub.w	r8, r6, r7
   3b436:	608b      	str	r3, [r1, #8]
   3b438:	f1b8 0f00 	cmp.w	r8, #0
   3b43c:	dd9d      	ble.n	3b37a <__sflush_r+0x1a>
   3b43e:	4643      	mov	r3, r8
   3b440:	463a      	mov	r2, r7
   3b442:	6a21      	ldr	r1, [r4, #32]
   3b444:	4628      	mov	r0, r5
   3b446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3b448:	47b0      	blx	r6
   3b44a:	2800      	cmp	r0, #0
   3b44c:	dc06      	bgt.n	3b45c <__sflush_r+0xfc>
   3b44e:	89a3      	ldrh	r3, [r4, #12]
   3b450:	f04f 30ff 	mov.w	r0, #4294967295
   3b454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3b458:	81a3      	strh	r3, [r4, #12]
   3b45a:	e78f      	b.n	3b37c <__sflush_r+0x1c>
   3b45c:	4407      	add	r7, r0
   3b45e:	eba8 0800 	sub.w	r8, r8, r0
   3b462:	e7e9      	b.n	3b438 <__sflush_r+0xd8>
   3b464:	20400001 	.word	0x20400001

0003b468 <_fflush_r>:
   3b468:	b538      	push	{r3, r4, r5, lr}
   3b46a:	690b      	ldr	r3, [r1, #16]
   3b46c:	4605      	mov	r5, r0
   3b46e:	460c      	mov	r4, r1
   3b470:	b913      	cbnz	r3, 3b478 <_fflush_r+0x10>
   3b472:	2500      	movs	r5, #0
   3b474:	4628      	mov	r0, r5
   3b476:	bd38      	pop	{r3, r4, r5, pc}
   3b478:	b118      	cbz	r0, 3b482 <_fflush_r+0x1a>
   3b47a:	6983      	ldr	r3, [r0, #24]
   3b47c:	b90b      	cbnz	r3, 3b482 <_fflush_r+0x1a>
   3b47e:	f000 f871 	bl	3b564 <__sinit>
   3b482:	4b14      	ldr	r3, [pc, #80]	; (3b4d4 <_fflush_r+0x6c>)
   3b484:	429c      	cmp	r4, r3
   3b486:	d11b      	bne.n	3b4c0 <_fflush_r+0x58>
   3b488:	686c      	ldr	r4, [r5, #4]
   3b48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3b48e:	2b00      	cmp	r3, #0
   3b490:	d0ef      	beq.n	3b472 <_fflush_r+0xa>
   3b492:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3b494:	07d0      	lsls	r0, r2, #31
   3b496:	d404      	bmi.n	3b4a2 <_fflush_r+0x3a>
   3b498:	0599      	lsls	r1, r3, #22
   3b49a:	d402      	bmi.n	3b4a2 <_fflush_r+0x3a>
   3b49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3b49e:	f7e8 fd2b 	bl	23ef8 <__retarget_lock_acquire_recursive>
   3b4a2:	4628      	mov	r0, r5
   3b4a4:	4621      	mov	r1, r4
   3b4a6:	f7ff ff5b 	bl	3b360 <__sflush_r>
   3b4aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3b4ac:	4605      	mov	r5, r0
   3b4ae:	07da      	lsls	r2, r3, #31
   3b4b0:	d4e0      	bmi.n	3b474 <_fflush_r+0xc>
   3b4b2:	89a3      	ldrh	r3, [r4, #12]
   3b4b4:	059b      	lsls	r3, r3, #22
   3b4b6:	d4dd      	bmi.n	3b474 <_fflush_r+0xc>
   3b4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3b4ba:	f7e8 fd39 	bl	23f30 <__retarget_lock_release_recursive>
   3b4be:	e7d9      	b.n	3b474 <_fflush_r+0xc>
   3b4c0:	4b05      	ldr	r3, [pc, #20]	; (3b4d8 <_fflush_r+0x70>)
   3b4c2:	429c      	cmp	r4, r3
   3b4c4:	d101      	bne.n	3b4ca <_fflush_r+0x62>
   3b4c6:	68ac      	ldr	r4, [r5, #8]
   3b4c8:	e7df      	b.n	3b48a <_fflush_r+0x22>
   3b4ca:	4b04      	ldr	r3, [pc, #16]	; (3b4dc <_fflush_r+0x74>)
   3b4cc:	429c      	cmp	r4, r3
   3b4ce:	bf08      	it	eq
   3b4d0:	68ec      	ldreq	r4, [r5, #12]
   3b4d2:	e7da      	b.n	3b48a <_fflush_r+0x22>
   3b4d4:	00043b7c 	.word	0x00043b7c
   3b4d8:	00043b9c 	.word	0x00043b9c
   3b4dc:	00043b5c 	.word	0x00043b5c

0003b4e0 <std>:
   3b4e0:	2300      	movs	r3, #0
   3b4e2:	b510      	push	{r4, lr}
   3b4e4:	4604      	mov	r4, r0
   3b4e6:	6083      	str	r3, [r0, #8]
   3b4e8:	8181      	strh	r1, [r0, #12]
   3b4ea:	4619      	mov	r1, r3
   3b4ec:	6643      	str	r3, [r0, #100]	; 0x64
   3b4ee:	81c2      	strh	r2, [r0, #14]
   3b4f0:	2208      	movs	r2, #8
   3b4f2:	6183      	str	r3, [r0, #24]
   3b4f4:	e9c0 3300 	strd	r3, r3, [r0]
   3b4f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3b4fc:	305c      	adds	r0, #92	; 0x5c
   3b4fe:	f006 fb2f 	bl	41b60 <memset>
   3b502:	4b05      	ldr	r3, [pc, #20]	; (3b518 <std+0x38>)
   3b504:	6224      	str	r4, [r4, #32]
   3b506:	6263      	str	r3, [r4, #36]	; 0x24
   3b508:	4b04      	ldr	r3, [pc, #16]	; (3b51c <std+0x3c>)
   3b50a:	62a3      	str	r3, [r4, #40]	; 0x28
   3b50c:	4b04      	ldr	r3, [pc, #16]	; (3b520 <std+0x40>)
   3b50e:	62e3      	str	r3, [r4, #44]	; 0x2c
   3b510:	4b04      	ldr	r3, [pc, #16]	; (3b524 <std+0x44>)
   3b512:	6323      	str	r3, [r4, #48]	; 0x30
   3b514:	bd10      	pop	{r4, pc}
   3b516:	bf00      	nop
   3b518:	00041e35 	.word	0x00041e35
   3b51c:	00041e5b 	.word	0x00041e5b
   3b520:	00041e93 	.word	0x00041e93
   3b524:	00041eb7 	.word	0x00041eb7

0003b528 <_cleanup_r>:
   3b528:	4901      	ldr	r1, [pc, #4]	; (3b530 <_cleanup_r+0x8>)
   3b52a:	f006 be45 	b.w	421b8 <_fwalk_reent>
   3b52e:	bf00      	nop
   3b530:	0003b469 	.word	0x0003b469

0003b534 <__sfp_lock_acquire>:
   3b534:	4801      	ldr	r0, [pc, #4]	; (3b53c <__sfp_lock_acquire+0x8>)
   3b536:	f7e8 bcdf 	b.w	23ef8 <__retarget_lock_acquire_recursive>
   3b53a:	bf00      	nop
   3b53c:	20014edc 	.word	0x20014edc

0003b540 <__sfp_lock_release>:
   3b540:	4801      	ldr	r0, [pc, #4]	; (3b548 <__sfp_lock_release+0x8>)
   3b542:	f7e8 bcf5 	b.w	23f30 <__retarget_lock_release_recursive>
   3b546:	bf00      	nop
   3b548:	20014edc 	.word	0x20014edc

0003b54c <__sinit_lock_acquire>:
   3b54c:	4801      	ldr	r0, [pc, #4]	; (3b554 <__sinit_lock_acquire+0x8>)
   3b54e:	f7e8 bcd3 	b.w	23ef8 <__retarget_lock_acquire_recursive>
   3b552:	bf00      	nop
   3b554:	20014ef0 	.word	0x20014ef0

0003b558 <__sinit_lock_release>:
   3b558:	4801      	ldr	r0, [pc, #4]	; (3b560 <__sinit_lock_release+0x8>)
   3b55a:	f7e8 bce9 	b.w	23f30 <__retarget_lock_release_recursive>
   3b55e:	bf00      	nop
   3b560:	20014ef0 	.word	0x20014ef0

0003b564 <__sinit>:
   3b564:	b510      	push	{r4, lr}
   3b566:	4604      	mov	r4, r0
   3b568:	f7ff fff0 	bl	3b54c <__sinit_lock_acquire>
   3b56c:	69a3      	ldr	r3, [r4, #24]
   3b56e:	b11b      	cbz	r3, 3b578 <__sinit+0x14>
   3b570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b574:	f7ff bff0 	b.w	3b558 <__sinit_lock_release>
   3b578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3b57c:	6523      	str	r3, [r4, #80]	; 0x50
   3b57e:	4620      	mov	r0, r4
   3b580:	4b12      	ldr	r3, [pc, #72]	; (3b5cc <__sinit+0x68>)
   3b582:	4a13      	ldr	r2, [pc, #76]	; (3b5d0 <__sinit+0x6c>)
   3b584:	681b      	ldr	r3, [r3, #0]
   3b586:	62a2      	str	r2, [r4, #40]	; 0x28
   3b588:	42a3      	cmp	r3, r4
   3b58a:	bf04      	itt	eq
   3b58c:	2301      	moveq	r3, #1
   3b58e:	61a3      	streq	r3, [r4, #24]
   3b590:	f000 f820 	bl	3b5d4 <__sfp>
   3b594:	6060      	str	r0, [r4, #4]
   3b596:	4620      	mov	r0, r4
   3b598:	f000 f81c 	bl	3b5d4 <__sfp>
   3b59c:	60a0      	str	r0, [r4, #8]
   3b59e:	4620      	mov	r0, r4
   3b5a0:	f000 f818 	bl	3b5d4 <__sfp>
   3b5a4:	2200      	movs	r2, #0
   3b5a6:	2104      	movs	r1, #4
   3b5a8:	60e0      	str	r0, [r4, #12]
   3b5aa:	6860      	ldr	r0, [r4, #4]
   3b5ac:	f7ff ff98 	bl	3b4e0 <std>
   3b5b0:	2201      	movs	r2, #1
   3b5b2:	2109      	movs	r1, #9
   3b5b4:	68a0      	ldr	r0, [r4, #8]
   3b5b6:	f7ff ff93 	bl	3b4e0 <std>
   3b5ba:	2202      	movs	r2, #2
   3b5bc:	2112      	movs	r1, #18
   3b5be:	68e0      	ldr	r0, [r4, #12]
   3b5c0:	f7ff ff8e 	bl	3b4e0 <std>
   3b5c4:	2301      	movs	r3, #1
   3b5c6:	61a3      	str	r3, [r4, #24]
   3b5c8:	e7d2      	b.n	3b570 <__sinit+0xc>
   3b5ca:	bf00      	nop
   3b5cc:	00043b30 	.word	0x00043b30
   3b5d0:	0003b529 	.word	0x0003b529

0003b5d4 <__sfp>:
   3b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b5d6:	4607      	mov	r7, r0
   3b5d8:	f7ff ffac 	bl	3b534 <__sfp_lock_acquire>
   3b5dc:	4b1e      	ldr	r3, [pc, #120]	; (3b658 <__sfp+0x84>)
   3b5de:	681e      	ldr	r6, [r3, #0]
   3b5e0:	69b3      	ldr	r3, [r6, #24]
   3b5e2:	b913      	cbnz	r3, 3b5ea <__sfp+0x16>
   3b5e4:	4630      	mov	r0, r6
   3b5e6:	f7ff ffbd 	bl	3b564 <__sinit>
   3b5ea:	3648      	adds	r6, #72	; 0x48
   3b5ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3b5f0:	3b01      	subs	r3, #1
   3b5f2:	d503      	bpl.n	3b5fc <__sfp+0x28>
   3b5f4:	6833      	ldr	r3, [r6, #0]
   3b5f6:	b30b      	cbz	r3, 3b63c <__sfp+0x68>
   3b5f8:	6836      	ldr	r6, [r6, #0]
   3b5fa:	e7f7      	b.n	3b5ec <__sfp+0x18>
   3b5fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3b600:	b9d5      	cbnz	r5, 3b638 <__sfp+0x64>
   3b602:	4b16      	ldr	r3, [pc, #88]	; (3b65c <__sfp+0x88>)
   3b604:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3b608:	6665      	str	r5, [r4, #100]	; 0x64
   3b60a:	60e3      	str	r3, [r4, #12]
   3b60c:	f7e8 fc4c 	bl	23ea8 <__retarget_lock_init_recursive>
   3b610:	f7ff ff96 	bl	3b540 <__sfp_lock_release>
   3b614:	2208      	movs	r2, #8
   3b616:	4629      	mov	r1, r5
   3b618:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3b61c:	6025      	str	r5, [r4, #0]
   3b61e:	61a5      	str	r5, [r4, #24]
   3b620:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3b624:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3b628:	f006 fa9a 	bl	41b60 <memset>
   3b62c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3b630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3b634:	4620      	mov	r0, r4
   3b636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b638:	3468      	adds	r4, #104	; 0x68
   3b63a:	e7d9      	b.n	3b5f0 <__sfp+0x1c>
   3b63c:	2104      	movs	r1, #4
   3b63e:	4638      	mov	r0, r7
   3b640:	f006 fda4 	bl	4218c <__sfmoreglue>
   3b644:	4604      	mov	r4, r0
   3b646:	6030      	str	r0, [r6, #0]
   3b648:	2800      	cmp	r0, #0
   3b64a:	d1d5      	bne.n	3b5f8 <__sfp+0x24>
   3b64c:	f7ff ff78 	bl	3b540 <__sfp_lock_release>
   3b650:	230c      	movs	r3, #12
   3b652:	603b      	str	r3, [r7, #0]
   3b654:	e7ee      	b.n	3b634 <__sfp+0x60>
   3b656:	bf00      	nop
   3b658:	00043b30 	.word	0x00043b30
   3b65c:	ffff0001 	.word	0xffff0001

0003b660 <__gethex>:
   3b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b664:	ed2d 8b02 	vpush	{d8}
   3b668:	b089      	sub	sp, #36	; 0x24
   3b66a:	ee08 0a10 	vmov	s16, r0
   3b66e:	468b      	mov	fp, r1
   3b670:	4690      	mov	r8, r2
   3b672:	9304      	str	r3, [sp, #16]
   3b674:	4bb2      	ldr	r3, [pc, #712]	; (3b940 <__gethex+0x2e0>)
   3b676:	681b      	ldr	r3, [r3, #0]
   3b678:	4618      	mov	r0, r3
   3b67a:	9301      	str	r3, [sp, #4]
   3b67c:	f7e1 fde1 	bl	1d242 <strlen>
   3b680:	9b01      	ldr	r3, [sp, #4]
   3b682:	f8db 2000 	ldr.w	r2, [fp]
   3b686:	4682      	mov	sl, r0
   3b688:	4403      	add	r3, r0
   3b68a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3b68e:	9305      	str	r3, [sp, #20]
   3b690:	1c93      	adds	r3, r2, #2
   3b692:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3b696:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3b69a:	32fe      	adds	r2, #254	; 0xfe
   3b69c:	18d1      	adds	r1, r2, r3
   3b69e:	461f      	mov	r7, r3
   3b6a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   3b6a4:	9100      	str	r1, [sp, #0]
   3b6a6:	2830      	cmp	r0, #48	; 0x30
   3b6a8:	d0f8      	beq.n	3b69c <__gethex+0x3c>
   3b6aa:	f006 fdf5 	bl	42298 <__hexdig_fun>
   3b6ae:	4604      	mov	r4, r0
   3b6b0:	2800      	cmp	r0, #0
   3b6b2:	d139      	bne.n	3b728 <__gethex+0xc8>
   3b6b4:	4652      	mov	r2, sl
   3b6b6:	9901      	ldr	r1, [sp, #4]
   3b6b8:	4638      	mov	r0, r7
   3b6ba:	f006 fc24 	bl	41f06 <strncmp>
   3b6be:	4605      	mov	r5, r0
   3b6c0:	2800      	cmp	r0, #0
   3b6c2:	d167      	bne.n	3b794 <__gethex+0x134>
   3b6c4:	f817 000a 	ldrb.w	r0, [r7, sl]
   3b6c8:	eb07 060a 	add.w	r6, r7, sl
   3b6cc:	f006 fde4 	bl	42298 <__hexdig_fun>
   3b6d0:	2800      	cmp	r0, #0
   3b6d2:	d061      	beq.n	3b798 <__gethex+0x138>
   3b6d4:	4633      	mov	r3, r6
   3b6d6:	7818      	ldrb	r0, [r3, #0]
   3b6d8:	461f      	mov	r7, r3
   3b6da:	3301      	adds	r3, #1
   3b6dc:	2830      	cmp	r0, #48	; 0x30
   3b6de:	d0fa      	beq.n	3b6d6 <__gethex+0x76>
   3b6e0:	f006 fdda 	bl	42298 <__hexdig_fun>
   3b6e4:	fab0 f480 	clz	r4, r0
   3b6e8:	2301      	movs	r3, #1
   3b6ea:	4635      	mov	r5, r6
   3b6ec:	0964      	lsrs	r4, r4, #5
   3b6ee:	9300      	str	r3, [sp, #0]
   3b6f0:	463a      	mov	r2, r7
   3b6f2:	4616      	mov	r6, r2
   3b6f4:	3201      	adds	r2, #1
   3b6f6:	7830      	ldrb	r0, [r6, #0]
   3b6f8:	f006 fdce 	bl	42298 <__hexdig_fun>
   3b6fc:	2800      	cmp	r0, #0
   3b6fe:	d1f8      	bne.n	3b6f2 <__gethex+0x92>
   3b700:	4652      	mov	r2, sl
   3b702:	9901      	ldr	r1, [sp, #4]
   3b704:	4630      	mov	r0, r6
   3b706:	f006 fbfe 	bl	41f06 <strncmp>
   3b70a:	b980      	cbnz	r0, 3b72e <__gethex+0xce>
   3b70c:	b94d      	cbnz	r5, 3b722 <__gethex+0xc2>
   3b70e:	eb06 050a 	add.w	r5, r6, sl
   3b712:	462a      	mov	r2, r5
   3b714:	4616      	mov	r6, r2
   3b716:	3201      	adds	r2, #1
   3b718:	7830      	ldrb	r0, [r6, #0]
   3b71a:	f006 fdbd 	bl	42298 <__hexdig_fun>
   3b71e:	2800      	cmp	r0, #0
   3b720:	d1f8      	bne.n	3b714 <__gethex+0xb4>
   3b722:	1bad      	subs	r5, r5, r6
   3b724:	00ad      	lsls	r5, r5, #2
   3b726:	e004      	b.n	3b732 <__gethex+0xd2>
   3b728:	2400      	movs	r4, #0
   3b72a:	4625      	mov	r5, r4
   3b72c:	e7e0      	b.n	3b6f0 <__gethex+0x90>
   3b72e:	2d00      	cmp	r5, #0
   3b730:	d1f7      	bne.n	3b722 <__gethex+0xc2>
   3b732:	7833      	ldrb	r3, [r6, #0]
   3b734:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3b738:	2b50      	cmp	r3, #80	; 0x50
   3b73a:	d13b      	bne.n	3b7b4 <__gethex+0x154>
   3b73c:	7873      	ldrb	r3, [r6, #1]
   3b73e:	2b2b      	cmp	r3, #43	; 0x2b
   3b740:	d02c      	beq.n	3b79c <__gethex+0x13c>
   3b742:	2b2d      	cmp	r3, #45	; 0x2d
   3b744:	d02e      	beq.n	3b7a4 <__gethex+0x144>
   3b746:	1c71      	adds	r1, r6, #1
   3b748:	f04f 0900 	mov.w	r9, #0
   3b74c:	7808      	ldrb	r0, [r1, #0]
   3b74e:	f006 fda3 	bl	42298 <__hexdig_fun>
   3b752:	1e43      	subs	r3, r0, #1
   3b754:	b2db      	uxtb	r3, r3
   3b756:	2b18      	cmp	r3, #24
   3b758:	d82c      	bhi.n	3b7b4 <__gethex+0x154>
   3b75a:	f1a0 0210 	sub.w	r2, r0, #16
   3b75e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3b762:	f006 fd99 	bl	42298 <__hexdig_fun>
   3b766:	1e43      	subs	r3, r0, #1
   3b768:	b2db      	uxtb	r3, r3
   3b76a:	2b18      	cmp	r3, #24
   3b76c:	d91d      	bls.n	3b7aa <__gethex+0x14a>
   3b76e:	f1b9 0f00 	cmp.w	r9, #0
   3b772:	d000      	beq.n	3b776 <__gethex+0x116>
   3b774:	4252      	negs	r2, r2
   3b776:	4415      	add	r5, r2
   3b778:	f8cb 1000 	str.w	r1, [fp]
   3b77c:	b1e4      	cbz	r4, 3b7b8 <__gethex+0x158>
   3b77e:	9b00      	ldr	r3, [sp, #0]
   3b780:	2b00      	cmp	r3, #0
   3b782:	bf14      	ite	ne
   3b784:	2700      	movne	r7, #0
   3b786:	2706      	moveq	r7, #6
   3b788:	4638      	mov	r0, r7
   3b78a:	b009      	add	sp, #36	; 0x24
   3b78c:	ecbd 8b02 	vpop	{d8}
   3b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b794:	463e      	mov	r6, r7
   3b796:	4625      	mov	r5, r4
   3b798:	2401      	movs	r4, #1
   3b79a:	e7ca      	b.n	3b732 <__gethex+0xd2>
   3b79c:	f04f 0900 	mov.w	r9, #0
   3b7a0:	1cb1      	adds	r1, r6, #2
   3b7a2:	e7d3      	b.n	3b74c <__gethex+0xec>
   3b7a4:	f04f 0901 	mov.w	r9, #1
   3b7a8:	e7fa      	b.n	3b7a0 <__gethex+0x140>
   3b7aa:	230a      	movs	r3, #10
   3b7ac:	fb03 0202 	mla	r2, r3, r2, r0
   3b7b0:	3a10      	subs	r2, #16
   3b7b2:	e7d4      	b.n	3b75e <__gethex+0xfe>
   3b7b4:	4631      	mov	r1, r6
   3b7b6:	e7df      	b.n	3b778 <__gethex+0x118>
   3b7b8:	1bf3      	subs	r3, r6, r7
   3b7ba:	4621      	mov	r1, r4
   3b7bc:	3b01      	subs	r3, #1
   3b7be:	2b07      	cmp	r3, #7
   3b7c0:	dc0b      	bgt.n	3b7da <__gethex+0x17a>
   3b7c2:	ee18 0a10 	vmov	r0, s16
   3b7c6:	f000 f9f3 	bl	3bbb0 <_Balloc>
   3b7ca:	4604      	mov	r4, r0
   3b7cc:	b940      	cbnz	r0, 3b7e0 <__gethex+0x180>
   3b7ce:	4b5d      	ldr	r3, [pc, #372]	; (3b944 <__gethex+0x2e4>)
   3b7d0:	4602      	mov	r2, r0
   3b7d2:	21de      	movs	r1, #222	; 0xde
   3b7d4:	485c      	ldr	r0, [pc, #368]	; (3b948 <__gethex+0x2e8>)
   3b7d6:	f7fe fc21 	bl	3a01c <__assert_func>
   3b7da:	3101      	adds	r1, #1
   3b7dc:	105b      	asrs	r3, r3, #1
   3b7de:	e7ee      	b.n	3b7be <__gethex+0x15e>
   3b7e0:	f100 0914 	add.w	r9, r0, #20
   3b7e4:	f04f 0b00 	mov.w	fp, #0
   3b7e8:	f1ca 0301 	rsb	r3, sl, #1
   3b7ec:	f8cd 9008 	str.w	r9, [sp, #8]
   3b7f0:	f8cd b000 	str.w	fp, [sp]
   3b7f4:	9306      	str	r3, [sp, #24]
   3b7f6:	42b7      	cmp	r7, r6
   3b7f8:	d340      	bcc.n	3b87c <__gethex+0x21c>
   3b7fa:	9802      	ldr	r0, [sp, #8]
   3b7fc:	9b00      	ldr	r3, [sp, #0]
   3b7fe:	f840 3b04 	str.w	r3, [r0], #4
   3b802:	eba0 0009 	sub.w	r0, r0, r9
   3b806:	1080      	asrs	r0, r0, #2
   3b808:	0146      	lsls	r6, r0, #5
   3b80a:	6120      	str	r0, [r4, #16]
   3b80c:	4618      	mov	r0, r3
   3b80e:	f006 fe6b 	bl	424e8 <__hi0bits>
   3b812:	1a30      	subs	r0, r6, r0
   3b814:	f8d8 6000 	ldr.w	r6, [r8]
   3b818:	42b0      	cmp	r0, r6
   3b81a:	dd63      	ble.n	3b8e4 <__gethex+0x284>
   3b81c:	1b87      	subs	r7, r0, r6
   3b81e:	4620      	mov	r0, r4
   3b820:	4639      	mov	r1, r7
   3b822:	f006 ff1d 	bl	42660 <__any_on>
   3b826:	4682      	mov	sl, r0
   3b828:	b1a8      	cbz	r0, 3b856 <__gethex+0x1f6>
   3b82a:	1e7b      	subs	r3, r7, #1
   3b82c:	f04f 0a01 	mov.w	sl, #1
   3b830:	1159      	asrs	r1, r3, #5
   3b832:	f003 021f 	and.w	r2, r3, #31
   3b836:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3b83a:	fa0a f202 	lsl.w	r2, sl, r2
   3b83e:	420a      	tst	r2, r1
   3b840:	d009      	beq.n	3b856 <__gethex+0x1f6>
   3b842:	4553      	cmp	r3, sl
   3b844:	dd05      	ble.n	3b852 <__gethex+0x1f2>
   3b846:	1eb9      	subs	r1, r7, #2
   3b848:	4620      	mov	r0, r4
   3b84a:	f006 ff09 	bl	42660 <__any_on>
   3b84e:	2800      	cmp	r0, #0
   3b850:	d145      	bne.n	3b8de <__gethex+0x27e>
   3b852:	f04f 0a02 	mov.w	sl, #2
   3b856:	443d      	add	r5, r7
   3b858:	4639      	mov	r1, r7
   3b85a:	4620      	mov	r0, r4
   3b85c:	f006 fccb 	bl	421f6 <rshift>
   3b860:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b864:	42ab      	cmp	r3, r5
   3b866:	da4c      	bge.n	3b902 <__gethex+0x2a2>
   3b868:	4621      	mov	r1, r4
   3b86a:	ee18 0a10 	vmov	r0, s16
   3b86e:	f000 f9df 	bl	3bc30 <_Bfree>
   3b872:	2300      	movs	r3, #0
   3b874:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b876:	27a3      	movs	r7, #163	; 0xa3
   3b878:	6013      	str	r3, [r2, #0]
   3b87a:	e785      	b.n	3b788 <__gethex+0x128>
   3b87c:	1e73      	subs	r3, r6, #1
   3b87e:	9a05      	ldr	r2, [sp, #20]
   3b880:	9303      	str	r3, [sp, #12]
   3b882:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3b886:	4293      	cmp	r3, r2
   3b888:	d019      	beq.n	3b8be <__gethex+0x25e>
   3b88a:	f1bb 0f20 	cmp.w	fp, #32
   3b88e:	d107      	bne.n	3b8a0 <__gethex+0x240>
   3b890:	9b02      	ldr	r3, [sp, #8]
   3b892:	9a00      	ldr	r2, [sp, #0]
   3b894:	f843 2b04 	str.w	r2, [r3], #4
   3b898:	9302      	str	r3, [sp, #8]
   3b89a:	2300      	movs	r3, #0
   3b89c:	469b      	mov	fp, r3
   3b89e:	9300      	str	r3, [sp, #0]
   3b8a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3b8a4:	f006 fcf8 	bl	42298 <__hexdig_fun>
   3b8a8:	f000 000f 	and.w	r0, r0, #15
   3b8ac:	9b00      	ldr	r3, [sp, #0]
   3b8ae:	fa00 f00b 	lsl.w	r0, r0, fp
   3b8b2:	f10b 0b04 	add.w	fp, fp, #4
   3b8b6:	4303      	orrs	r3, r0
   3b8b8:	9300      	str	r3, [sp, #0]
   3b8ba:	9b03      	ldr	r3, [sp, #12]
   3b8bc:	e00d      	b.n	3b8da <__gethex+0x27a>
   3b8be:	9b03      	ldr	r3, [sp, #12]
   3b8c0:	9a06      	ldr	r2, [sp, #24]
   3b8c2:	4413      	add	r3, r2
   3b8c4:	42bb      	cmp	r3, r7
   3b8c6:	d3e0      	bcc.n	3b88a <__gethex+0x22a>
   3b8c8:	4618      	mov	r0, r3
   3b8ca:	4652      	mov	r2, sl
   3b8cc:	9901      	ldr	r1, [sp, #4]
   3b8ce:	9307      	str	r3, [sp, #28]
   3b8d0:	f006 fb19 	bl	41f06 <strncmp>
   3b8d4:	9b07      	ldr	r3, [sp, #28]
   3b8d6:	2800      	cmp	r0, #0
   3b8d8:	d1d7      	bne.n	3b88a <__gethex+0x22a>
   3b8da:	461e      	mov	r6, r3
   3b8dc:	e78b      	b.n	3b7f6 <__gethex+0x196>
   3b8de:	f04f 0a03 	mov.w	sl, #3
   3b8e2:	e7b8      	b.n	3b856 <__gethex+0x1f6>
   3b8e4:	da0a      	bge.n	3b8fc <__gethex+0x29c>
   3b8e6:	1a37      	subs	r7, r6, r0
   3b8e8:	4621      	mov	r1, r4
   3b8ea:	ee18 0a10 	vmov	r0, s16
   3b8ee:	463a      	mov	r2, r7
   3b8f0:	1bed      	subs	r5, r5, r7
   3b8f2:	f000 fb69 	bl	3bfc8 <__lshift>
   3b8f6:	4604      	mov	r4, r0
   3b8f8:	f100 0914 	add.w	r9, r0, #20
   3b8fc:	f04f 0a00 	mov.w	sl, #0
   3b900:	e7ae      	b.n	3b860 <__gethex+0x200>
   3b902:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3b906:	42a8      	cmp	r0, r5
   3b908:	dd72      	ble.n	3b9f0 <__gethex+0x390>
   3b90a:	1b45      	subs	r5, r0, r5
   3b90c:	42ae      	cmp	r6, r5
   3b90e:	dc35      	bgt.n	3b97c <__gethex+0x31c>
   3b910:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b914:	2b02      	cmp	r3, #2
   3b916:	d029      	beq.n	3b96c <__gethex+0x30c>
   3b918:	2b03      	cmp	r3, #3
   3b91a:	d02b      	beq.n	3b974 <__gethex+0x314>
   3b91c:	2b01      	cmp	r3, #1
   3b91e:	d11b      	bne.n	3b958 <__gethex+0x2f8>
   3b920:	42ae      	cmp	r6, r5
   3b922:	d119      	bne.n	3b958 <__gethex+0x2f8>
   3b924:	2e01      	cmp	r6, #1
   3b926:	d111      	bne.n	3b94c <__gethex+0x2ec>
   3b928:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3b92c:	2762      	movs	r7, #98	; 0x62
   3b92e:	9a04      	ldr	r2, [sp, #16]
   3b930:	6013      	str	r3, [r2, #0]
   3b932:	2301      	movs	r3, #1
   3b934:	6123      	str	r3, [r4, #16]
   3b936:	f8c9 3000 	str.w	r3, [r9]
   3b93a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b93c:	601c      	str	r4, [r3, #0]
   3b93e:	e723      	b.n	3b788 <__gethex+0x128>
   3b940:	00043bbc 	.word	0x00043bbc
   3b944:	0004c80a 	.word	0x0004c80a
   3b948:	0004c81b 	.word	0x0004c81b
   3b94c:	1e71      	subs	r1, r6, #1
   3b94e:	4620      	mov	r0, r4
   3b950:	f006 fe86 	bl	42660 <__any_on>
   3b954:	2800      	cmp	r0, #0
   3b956:	d1e7      	bne.n	3b928 <__gethex+0x2c8>
   3b958:	4621      	mov	r1, r4
   3b95a:	ee18 0a10 	vmov	r0, s16
   3b95e:	f000 f967 	bl	3bc30 <_Bfree>
   3b962:	2300      	movs	r3, #0
   3b964:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b966:	2750      	movs	r7, #80	; 0x50
   3b968:	6013      	str	r3, [r2, #0]
   3b96a:	e70d      	b.n	3b788 <__gethex+0x128>
   3b96c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b96e:	2b00      	cmp	r3, #0
   3b970:	d1f2      	bne.n	3b958 <__gethex+0x2f8>
   3b972:	e7d9      	b.n	3b928 <__gethex+0x2c8>
   3b974:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b976:	2b00      	cmp	r3, #0
   3b978:	d1d6      	bne.n	3b928 <__gethex+0x2c8>
   3b97a:	e7ed      	b.n	3b958 <__gethex+0x2f8>
   3b97c:	1e6f      	subs	r7, r5, #1
   3b97e:	f1ba 0f00 	cmp.w	sl, #0
   3b982:	d132      	bne.n	3b9ea <__gethex+0x38a>
   3b984:	b127      	cbz	r7, 3b990 <__gethex+0x330>
   3b986:	4639      	mov	r1, r7
   3b988:	4620      	mov	r0, r4
   3b98a:	f006 fe69 	bl	42660 <__any_on>
   3b98e:	4682      	mov	sl, r0
   3b990:	117b      	asrs	r3, r7, #5
   3b992:	2101      	movs	r1, #1
   3b994:	f007 071f 	and.w	r7, r7, #31
   3b998:	4620      	mov	r0, r4
   3b99a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   3b99e:	1b76      	subs	r6, r6, r5
   3b9a0:	fa01 f707 	lsl.w	r7, r1, r7
   3b9a4:	4629      	mov	r1, r5
   3b9a6:	421f      	tst	r7, r3
   3b9a8:	f04f 0702 	mov.w	r7, #2
   3b9ac:	bf18      	it	ne
   3b9ae:	f04a 0a02 	orrne.w	sl, sl, #2
   3b9b2:	f006 fc20 	bl	421f6 <rshift>
   3b9b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3b9ba:	f1ba 0f00 	cmp.w	sl, #0
   3b9be:	d048      	beq.n	3ba52 <__gethex+0x3f2>
   3b9c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b9c4:	2b02      	cmp	r3, #2
   3b9c6:	d015      	beq.n	3b9f4 <__gethex+0x394>
   3b9c8:	2b03      	cmp	r3, #3
   3b9ca:	d017      	beq.n	3b9fc <__gethex+0x39c>
   3b9cc:	2b01      	cmp	r3, #1
   3b9ce:	d109      	bne.n	3b9e4 <__gethex+0x384>
   3b9d0:	f01a 0f02 	tst.w	sl, #2
   3b9d4:	d006      	beq.n	3b9e4 <__gethex+0x384>
   3b9d6:	f8d9 0000 	ldr.w	r0, [r9]
   3b9da:	ea4a 0a00 	orr.w	sl, sl, r0
   3b9de:	f01a 0f01 	tst.w	sl, #1
   3b9e2:	d10e      	bne.n	3ba02 <__gethex+0x3a2>
   3b9e4:	f047 0710 	orr.w	r7, r7, #16
   3b9e8:	e033      	b.n	3ba52 <__gethex+0x3f2>
   3b9ea:	f04f 0a01 	mov.w	sl, #1
   3b9ee:	e7cf      	b.n	3b990 <__gethex+0x330>
   3b9f0:	2701      	movs	r7, #1
   3b9f2:	e7e2      	b.n	3b9ba <__gethex+0x35a>
   3b9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b9f6:	f1c3 0301 	rsb	r3, r3, #1
   3b9fa:	9315      	str	r3, [sp, #84]	; 0x54
   3b9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b9fe:	2b00      	cmp	r3, #0
   3ba00:	d0f0      	beq.n	3b9e4 <__gethex+0x384>
   3ba02:	f8d4 b010 	ldr.w	fp, [r4, #16]
   3ba06:	f104 0314 	add.w	r3, r4, #20
   3ba0a:	f04f 0c00 	mov.w	ip, #0
   3ba0e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   3ba12:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   3ba16:	4618      	mov	r0, r3
   3ba18:	f853 2b04 	ldr.w	r2, [r3], #4
   3ba1c:	f1b2 3fff 	cmp.w	r2, #4294967295
   3ba20:	d01c      	beq.n	3ba5c <__gethex+0x3fc>
   3ba22:	3201      	adds	r2, #1
   3ba24:	6002      	str	r2, [r0, #0]
   3ba26:	2f02      	cmp	r7, #2
   3ba28:	f104 0314 	add.w	r3, r4, #20
   3ba2c:	d13f      	bne.n	3baae <__gethex+0x44e>
   3ba2e:	f8d8 2000 	ldr.w	r2, [r8]
   3ba32:	3a01      	subs	r2, #1
   3ba34:	42b2      	cmp	r2, r6
   3ba36:	d10a      	bne.n	3ba4e <__gethex+0x3ee>
   3ba38:	1171      	asrs	r1, r6, #5
   3ba3a:	2201      	movs	r2, #1
   3ba3c:	f006 061f 	and.w	r6, r6, #31
   3ba40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3ba44:	fa02 f606 	lsl.w	r6, r2, r6
   3ba48:	421e      	tst	r6, r3
   3ba4a:	bf18      	it	ne
   3ba4c:	4617      	movne	r7, r2
   3ba4e:	f047 0720 	orr.w	r7, r7, #32
   3ba52:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3ba54:	601c      	str	r4, [r3, #0]
   3ba56:	9b04      	ldr	r3, [sp, #16]
   3ba58:	601d      	str	r5, [r3, #0]
   3ba5a:	e695      	b.n	3b788 <__gethex+0x128>
   3ba5c:	4299      	cmp	r1, r3
   3ba5e:	f843 cc04 	str.w	ip, [r3, #-4]
   3ba62:	d8d8      	bhi.n	3ba16 <__gethex+0x3b6>
   3ba64:	68a3      	ldr	r3, [r4, #8]
   3ba66:	459b      	cmp	fp, r3
   3ba68:	db19      	blt.n	3ba9e <__gethex+0x43e>
   3ba6a:	6861      	ldr	r1, [r4, #4]
   3ba6c:	ee18 0a10 	vmov	r0, s16
   3ba70:	3101      	adds	r1, #1
   3ba72:	f000 f89d 	bl	3bbb0 <_Balloc>
   3ba76:	4681      	mov	r9, r0
   3ba78:	b918      	cbnz	r0, 3ba82 <__gethex+0x422>
   3ba7a:	4b1b      	ldr	r3, [pc, #108]	; (3bae8 <__gethex+0x488>)
   3ba7c:	4602      	mov	r2, r0
   3ba7e:	2184      	movs	r1, #132	; 0x84
   3ba80:	e6a8      	b.n	3b7d4 <__gethex+0x174>
   3ba82:	6922      	ldr	r2, [r4, #16]
   3ba84:	f104 010c 	add.w	r1, r4, #12
   3ba88:	300c      	adds	r0, #12
   3ba8a:	3202      	adds	r2, #2
   3ba8c:	0092      	lsls	r2, r2, #2
   3ba8e:	f006 f847 	bl	41b20 <memcpy>
   3ba92:	4621      	mov	r1, r4
   3ba94:	464c      	mov	r4, r9
   3ba96:	ee18 0a10 	vmov	r0, s16
   3ba9a:	f000 f8c9 	bl	3bc30 <_Bfree>
   3ba9e:	6923      	ldr	r3, [r4, #16]
   3baa0:	1c5a      	adds	r2, r3, #1
   3baa2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3baa6:	6122      	str	r2, [r4, #16]
   3baa8:	2201      	movs	r2, #1
   3baaa:	615a      	str	r2, [r3, #20]
   3baac:	e7bb      	b.n	3ba26 <__gethex+0x3c6>
   3baae:	6922      	ldr	r2, [r4, #16]
   3bab0:	455a      	cmp	r2, fp
   3bab2:	dd0b      	ble.n	3bacc <__gethex+0x46c>
   3bab4:	2101      	movs	r1, #1
   3bab6:	4620      	mov	r0, r4
   3bab8:	f006 fb9d 	bl	421f6 <rshift>
   3babc:	3501      	adds	r5, #1
   3babe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3bac2:	42ab      	cmp	r3, r5
   3bac4:	f6ff aed0 	blt.w	3b868 <__gethex+0x208>
   3bac8:	2701      	movs	r7, #1
   3baca:	e7c0      	b.n	3ba4e <__gethex+0x3ee>
   3bacc:	f016 061f 	ands.w	r6, r6, #31
   3bad0:	d0fa      	beq.n	3bac8 <__gethex+0x468>
   3bad2:	4453      	add	r3, sl
   3bad4:	f1c6 0620 	rsb	r6, r6, #32
   3bad8:	f853 0c04 	ldr.w	r0, [r3, #-4]
   3badc:	f006 fd04 	bl	424e8 <__hi0bits>
   3bae0:	42b0      	cmp	r0, r6
   3bae2:	dbe7      	blt.n	3bab4 <__gethex+0x454>
   3bae4:	e7f0      	b.n	3bac8 <__gethex+0x468>
   3bae6:	bf00      	nop
   3bae8:	0004c80a 	.word	0x0004c80a

0003baec <_localeconv_r>:
   3baec:	4800      	ldr	r0, [pc, #0]	; (3baf0 <_localeconv_r+0x4>)
   3baee:	4770      	bx	lr
   3baf0:	20014bc8 	.word	0x20014bc8

0003baf4 <_lseek_r>:
   3baf4:	b538      	push	{r3, r4, r5, lr}
   3baf6:	4604      	mov	r4, r0
   3baf8:	4d06      	ldr	r5, [pc, #24]	; (3bb14 <_lseek_r+0x20>)
   3bafa:	4608      	mov	r0, r1
   3bafc:	4611      	mov	r1, r2
   3bafe:	2200      	movs	r2, #0
   3bb00:	602a      	str	r2, [r5, #0]
   3bb02:	461a      	mov	r2, r3
   3bb04:	f002 f9c1 	bl	3de8a <_lseek>
   3bb08:	1c43      	adds	r3, r0, #1
   3bb0a:	d102      	bne.n	3bb12 <_lseek_r+0x1e>
   3bb0c:	682b      	ldr	r3, [r5, #0]
   3bb0e:	b103      	cbz	r3, 3bb12 <_lseek_r+0x1e>
   3bb10:	6023      	str	r3, [r4, #0]
   3bb12:	bd38      	pop	{r3, r4, r5, pc}
   3bb14:	2001a580 	.word	0x2001a580

0003bb18 <__smakebuf_r>:
   3bb18:	898b      	ldrh	r3, [r1, #12]
   3bb1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3bb1c:	079d      	lsls	r5, r3, #30
   3bb1e:	4606      	mov	r6, r0
   3bb20:	460c      	mov	r4, r1
   3bb22:	d507      	bpl.n	3bb34 <__smakebuf_r+0x1c>
   3bb24:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3bb28:	6023      	str	r3, [r4, #0]
   3bb2a:	6123      	str	r3, [r4, #16]
   3bb2c:	2301      	movs	r3, #1
   3bb2e:	6163      	str	r3, [r4, #20]
   3bb30:	b002      	add	sp, #8
   3bb32:	bd70      	pop	{r4, r5, r6, pc}
   3bb34:	ab01      	add	r3, sp, #4
   3bb36:	466a      	mov	r2, sp
   3bb38:	f006 fc85 	bl	42446 <__swhatbuf_r>
   3bb3c:	9900      	ldr	r1, [sp, #0]
   3bb3e:	4605      	mov	r5, r0
   3bb40:	4630      	mov	r0, r6
   3bb42:	f7fe fba3 	bl	3a28c <_malloc_r>
   3bb46:	b948      	cbnz	r0, 3bb5c <__smakebuf_r+0x44>
   3bb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3bb4c:	059a      	lsls	r2, r3, #22
   3bb4e:	d4ef      	bmi.n	3bb30 <__smakebuf_r+0x18>
   3bb50:	f023 0303 	bic.w	r3, r3, #3
   3bb54:	f043 0302 	orr.w	r3, r3, #2
   3bb58:	81a3      	strh	r3, [r4, #12]
   3bb5a:	e7e3      	b.n	3bb24 <__smakebuf_r+0xc>
   3bb5c:	4b0d      	ldr	r3, [pc, #52]	; (3bb94 <__smakebuf_r+0x7c>)
   3bb5e:	62b3      	str	r3, [r6, #40]	; 0x28
   3bb60:	89a3      	ldrh	r3, [r4, #12]
   3bb62:	6020      	str	r0, [r4, #0]
   3bb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3bb68:	6120      	str	r0, [r4, #16]
   3bb6a:	81a3      	strh	r3, [r4, #12]
   3bb6c:	9b00      	ldr	r3, [sp, #0]
   3bb6e:	6163      	str	r3, [r4, #20]
   3bb70:	9b01      	ldr	r3, [sp, #4]
   3bb72:	b15b      	cbz	r3, 3bb8c <__smakebuf_r+0x74>
   3bb74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3bb78:	4630      	mov	r0, r6
   3bb7a:	f001 f807 	bl	3cb8c <_isatty_r>
   3bb7e:	b128      	cbz	r0, 3bb8c <__smakebuf_r+0x74>
   3bb80:	89a3      	ldrh	r3, [r4, #12]
   3bb82:	f023 0303 	bic.w	r3, r3, #3
   3bb86:	f043 0301 	orr.w	r3, r3, #1
   3bb8a:	81a3      	strh	r3, [r4, #12]
   3bb8c:	89a0      	ldrh	r0, [r4, #12]
   3bb8e:	4305      	orrs	r5, r0
   3bb90:	81a5      	strh	r5, [r4, #12]
   3bb92:	e7cd      	b.n	3bb30 <__smakebuf_r+0x18>
   3bb94:	0003b529 	.word	0x0003b529

0003bb98 <__malloc_lock>:
   3bb98:	4801      	ldr	r0, [pc, #4]	; (3bba0 <__malloc_lock+0x8>)
   3bb9a:	f7e8 b9ad 	b.w	23ef8 <__retarget_lock_acquire_recursive>
   3bb9e:	bf00      	nop
   3bba0:	20014ec8 	.word	0x20014ec8

0003bba4 <__malloc_unlock>:
   3bba4:	4801      	ldr	r0, [pc, #4]	; (3bbac <__malloc_unlock+0x8>)
   3bba6:	f7e8 b9c3 	b.w	23f30 <__retarget_lock_release_recursive>
   3bbaa:	bf00      	nop
   3bbac:	20014ec8 	.word	0x20014ec8

0003bbb0 <_Balloc>:
   3bbb0:	b570      	push	{r4, r5, r6, lr}
   3bbb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3bbb4:	4604      	mov	r4, r0
   3bbb6:	460d      	mov	r5, r1
   3bbb8:	b976      	cbnz	r6, 3bbd8 <_Balloc+0x28>
   3bbba:	2010      	movs	r0, #16
   3bbbc:	f7fe fb0a 	bl	3a1d4 <malloc>
   3bbc0:	4602      	mov	r2, r0
   3bbc2:	6260      	str	r0, [r4, #36]	; 0x24
   3bbc4:	b920      	cbnz	r0, 3bbd0 <_Balloc+0x20>
   3bbc6:	4b18      	ldr	r3, [pc, #96]	; (3bc28 <_Balloc+0x78>)
   3bbc8:	2166      	movs	r1, #102	; 0x66
   3bbca:	4818      	ldr	r0, [pc, #96]	; (3bc2c <_Balloc+0x7c>)
   3bbcc:	f7fe fa26 	bl	3a01c <__assert_func>
   3bbd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3bbd4:	6006      	str	r6, [r0, #0]
   3bbd6:	60c6      	str	r6, [r0, #12]
   3bbd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3bbda:	68f3      	ldr	r3, [r6, #12]
   3bbdc:	b183      	cbz	r3, 3bc00 <_Balloc+0x50>
   3bbde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3bbe0:	68db      	ldr	r3, [r3, #12]
   3bbe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3bbe6:	b9b8      	cbnz	r0, 3bc18 <_Balloc+0x68>
   3bbe8:	2101      	movs	r1, #1
   3bbea:	4620      	mov	r0, r4
   3bbec:	fa01 f605 	lsl.w	r6, r1, r5
   3bbf0:	1d72      	adds	r2, r6, #5
   3bbf2:	0092      	lsls	r2, r2, #2
   3bbf4:	f005 ffbc 	bl	41b70 <_calloc_r>
   3bbf8:	b160      	cbz	r0, 3bc14 <_Balloc+0x64>
   3bbfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3bbfe:	e00e      	b.n	3bc1e <_Balloc+0x6e>
   3bc00:	2221      	movs	r2, #33	; 0x21
   3bc02:	2104      	movs	r1, #4
   3bc04:	4620      	mov	r0, r4
   3bc06:	f005 ffb3 	bl	41b70 <_calloc_r>
   3bc0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3bc0c:	60f0      	str	r0, [r6, #12]
   3bc0e:	68db      	ldr	r3, [r3, #12]
   3bc10:	2b00      	cmp	r3, #0
   3bc12:	d1e4      	bne.n	3bbde <_Balloc+0x2e>
   3bc14:	2000      	movs	r0, #0
   3bc16:	bd70      	pop	{r4, r5, r6, pc}
   3bc18:	6802      	ldr	r2, [r0, #0]
   3bc1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3bc1e:	2300      	movs	r3, #0
   3bc20:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3bc24:	e7f7      	b.n	3bc16 <_Balloc+0x66>
   3bc26:	bf00      	nop
   3bc28:	0004c77f 	.word	0x0004c77f
   3bc2c:	0004c8a1 	.word	0x0004c8a1

0003bc30 <_Bfree>:
   3bc30:	b570      	push	{r4, r5, r6, lr}
   3bc32:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3bc34:	4605      	mov	r5, r0
   3bc36:	460c      	mov	r4, r1
   3bc38:	b976      	cbnz	r6, 3bc58 <_Bfree+0x28>
   3bc3a:	2010      	movs	r0, #16
   3bc3c:	f7fe faca 	bl	3a1d4 <malloc>
   3bc40:	4602      	mov	r2, r0
   3bc42:	6268      	str	r0, [r5, #36]	; 0x24
   3bc44:	b920      	cbnz	r0, 3bc50 <_Bfree+0x20>
   3bc46:	4b09      	ldr	r3, [pc, #36]	; (3bc6c <_Bfree+0x3c>)
   3bc48:	218a      	movs	r1, #138	; 0x8a
   3bc4a:	4809      	ldr	r0, [pc, #36]	; (3bc70 <_Bfree+0x40>)
   3bc4c:	f7fe f9e6 	bl	3a01c <__assert_func>
   3bc50:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3bc54:	6006      	str	r6, [r0, #0]
   3bc56:	60c6      	str	r6, [r0, #12]
   3bc58:	b13c      	cbz	r4, 3bc6a <_Bfree+0x3a>
   3bc5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3bc5c:	6862      	ldr	r2, [r4, #4]
   3bc5e:	68db      	ldr	r3, [r3, #12]
   3bc60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3bc64:	6021      	str	r1, [r4, #0]
   3bc66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3bc6a:	bd70      	pop	{r4, r5, r6, pc}
   3bc6c:	0004c77f 	.word	0x0004c77f
   3bc70:	0004c8a1 	.word	0x0004c8a1

0003bc74 <__multadd>:
   3bc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bc78:	f101 0c14 	add.w	ip, r1, #20
   3bc7c:	4607      	mov	r7, r0
   3bc7e:	460c      	mov	r4, r1
   3bc80:	461e      	mov	r6, r3
   3bc82:	690d      	ldr	r5, [r1, #16]
   3bc84:	2000      	movs	r0, #0
   3bc86:	f8dc 3000 	ldr.w	r3, [ip]
   3bc8a:	3001      	adds	r0, #1
   3bc8c:	b299      	uxth	r1, r3
   3bc8e:	4285      	cmp	r5, r0
   3bc90:	fb02 6101 	mla	r1, r2, r1, r6
   3bc94:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3bc98:	ea4f 4311 	mov.w	r3, r1, lsr #16
   3bc9c:	b289      	uxth	r1, r1
   3bc9e:	fb02 3306 	mla	r3, r2, r6, r3
   3bca2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   3bca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3bcaa:	f84c 1b04 	str.w	r1, [ip], #4
   3bcae:	dcea      	bgt.n	3bc86 <__multadd+0x12>
   3bcb0:	b30e      	cbz	r6, 3bcf6 <__multadd+0x82>
   3bcb2:	68a3      	ldr	r3, [r4, #8]
   3bcb4:	42ab      	cmp	r3, r5
   3bcb6:	dc19      	bgt.n	3bcec <__multadd+0x78>
   3bcb8:	6861      	ldr	r1, [r4, #4]
   3bcba:	4638      	mov	r0, r7
   3bcbc:	3101      	adds	r1, #1
   3bcbe:	f7ff ff77 	bl	3bbb0 <_Balloc>
   3bcc2:	4680      	mov	r8, r0
   3bcc4:	b928      	cbnz	r0, 3bcd2 <__multadd+0x5e>
   3bcc6:	4602      	mov	r2, r0
   3bcc8:	4b0c      	ldr	r3, [pc, #48]	; (3bcfc <__multadd+0x88>)
   3bcca:	21b5      	movs	r1, #181	; 0xb5
   3bccc:	480c      	ldr	r0, [pc, #48]	; (3bd00 <__multadd+0x8c>)
   3bcce:	f7fe f9a5 	bl	3a01c <__assert_func>
   3bcd2:	6922      	ldr	r2, [r4, #16]
   3bcd4:	f104 010c 	add.w	r1, r4, #12
   3bcd8:	300c      	adds	r0, #12
   3bcda:	3202      	adds	r2, #2
   3bcdc:	0092      	lsls	r2, r2, #2
   3bcde:	f005 ff1f 	bl	41b20 <memcpy>
   3bce2:	4621      	mov	r1, r4
   3bce4:	4644      	mov	r4, r8
   3bce6:	4638      	mov	r0, r7
   3bce8:	f7ff ffa2 	bl	3bc30 <_Bfree>
   3bcec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   3bcf0:	3501      	adds	r5, #1
   3bcf2:	615e      	str	r6, [r3, #20]
   3bcf4:	6125      	str	r5, [r4, #16]
   3bcf6:	4620      	mov	r0, r4
   3bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3bcfc:	0004c80a 	.word	0x0004c80a
   3bd00:	0004c8a1 	.word	0x0004c8a1

0003bd04 <__s2b>:
   3bd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3bd08:	4615      	mov	r5, r2
   3bd0a:	461f      	mov	r7, r3
   3bd0c:	2209      	movs	r2, #9
   3bd0e:	3308      	adds	r3, #8
   3bd10:	460c      	mov	r4, r1
   3bd12:	4606      	mov	r6, r0
   3bd14:	2100      	movs	r1, #0
   3bd16:	fb93 f3f2 	sdiv	r3, r3, r2
   3bd1a:	2201      	movs	r2, #1
   3bd1c:	429a      	cmp	r2, r3
   3bd1e:	db09      	blt.n	3bd34 <__s2b+0x30>
   3bd20:	4630      	mov	r0, r6
   3bd22:	f7ff ff45 	bl	3bbb0 <_Balloc>
   3bd26:	b940      	cbnz	r0, 3bd3a <__s2b+0x36>
   3bd28:	4602      	mov	r2, r0
   3bd2a:	4b19      	ldr	r3, [pc, #100]	; (3bd90 <__s2b+0x8c>)
   3bd2c:	21ce      	movs	r1, #206	; 0xce
   3bd2e:	4819      	ldr	r0, [pc, #100]	; (3bd94 <__s2b+0x90>)
   3bd30:	f7fe f974 	bl	3a01c <__assert_func>
   3bd34:	0052      	lsls	r2, r2, #1
   3bd36:	3101      	adds	r1, #1
   3bd38:	e7f0      	b.n	3bd1c <__s2b+0x18>
   3bd3a:	9b08      	ldr	r3, [sp, #32]
   3bd3c:	2d09      	cmp	r5, #9
   3bd3e:	6143      	str	r3, [r0, #20]
   3bd40:	f04f 0301 	mov.w	r3, #1
   3bd44:	6103      	str	r3, [r0, #16]
   3bd46:	dd16      	ble.n	3bd76 <__s2b+0x72>
   3bd48:	f104 0909 	add.w	r9, r4, #9
   3bd4c:	442c      	add	r4, r5
   3bd4e:	46c8      	mov	r8, r9
   3bd50:	f818 3b01 	ldrb.w	r3, [r8], #1
   3bd54:	4601      	mov	r1, r0
   3bd56:	220a      	movs	r2, #10
   3bd58:	4630      	mov	r0, r6
   3bd5a:	3b30      	subs	r3, #48	; 0x30
   3bd5c:	f7ff ff8a 	bl	3bc74 <__multadd>
   3bd60:	45a0      	cmp	r8, r4
   3bd62:	d1f5      	bne.n	3bd50 <__s2b+0x4c>
   3bd64:	f1a5 0408 	sub.w	r4, r5, #8
   3bd68:	444c      	add	r4, r9
   3bd6a:	1b2d      	subs	r5, r5, r4
   3bd6c:	1963      	adds	r3, r4, r5
   3bd6e:	42bb      	cmp	r3, r7
   3bd70:	db04      	blt.n	3bd7c <__s2b+0x78>
   3bd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3bd76:	340a      	adds	r4, #10
   3bd78:	2509      	movs	r5, #9
   3bd7a:	e7f6      	b.n	3bd6a <__s2b+0x66>
   3bd7c:	f814 3b01 	ldrb.w	r3, [r4], #1
   3bd80:	4601      	mov	r1, r0
   3bd82:	220a      	movs	r2, #10
   3bd84:	4630      	mov	r0, r6
   3bd86:	3b30      	subs	r3, #48	; 0x30
   3bd88:	f7ff ff74 	bl	3bc74 <__multadd>
   3bd8c:	e7ee      	b.n	3bd6c <__s2b+0x68>
   3bd8e:	bf00      	nop
   3bd90:	0004c80a 	.word	0x0004c80a
   3bd94:	0004c8a1 	.word	0x0004c8a1

0003bd98 <__i2b>:
   3bd98:	b510      	push	{r4, lr}
   3bd9a:	460c      	mov	r4, r1
   3bd9c:	2101      	movs	r1, #1
   3bd9e:	f7ff ff07 	bl	3bbb0 <_Balloc>
   3bda2:	4602      	mov	r2, r0
   3bda4:	b928      	cbnz	r0, 3bdb2 <__i2b+0x1a>
   3bda6:	4b05      	ldr	r3, [pc, #20]	; (3bdbc <__i2b+0x24>)
   3bda8:	f44f 71a0 	mov.w	r1, #320	; 0x140
   3bdac:	4804      	ldr	r0, [pc, #16]	; (3bdc0 <__i2b+0x28>)
   3bdae:	f7fe f935 	bl	3a01c <__assert_func>
   3bdb2:	2301      	movs	r3, #1
   3bdb4:	6144      	str	r4, [r0, #20]
   3bdb6:	6103      	str	r3, [r0, #16]
   3bdb8:	bd10      	pop	{r4, pc}
   3bdba:	bf00      	nop
   3bdbc:	0004c80a 	.word	0x0004c80a
   3bdc0:	0004c8a1 	.word	0x0004c8a1

0003bdc4 <__multiply>:
   3bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bdc8:	4691      	mov	r9, r2
   3bdca:	690a      	ldr	r2, [r1, #16]
   3bdcc:	460c      	mov	r4, r1
   3bdce:	b085      	sub	sp, #20
   3bdd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3bdd4:	429a      	cmp	r2, r3
   3bdd6:	bfbe      	ittt	lt
   3bdd8:	460b      	movlt	r3, r1
   3bdda:	464c      	movlt	r4, r9
   3bddc:	4699      	movlt	r9, r3
   3bdde:	6927      	ldr	r7, [r4, #16]
   3bde0:	68a3      	ldr	r3, [r4, #8]
   3bde2:	f8d9 a010 	ldr.w	sl, [r9, #16]
   3bde6:	6861      	ldr	r1, [r4, #4]
   3bde8:	eb07 060a 	add.w	r6, r7, sl
   3bdec:	42b3      	cmp	r3, r6
   3bdee:	bfb8      	it	lt
   3bdf0:	3101      	addlt	r1, #1
   3bdf2:	f7ff fedd 	bl	3bbb0 <_Balloc>
   3bdf6:	b930      	cbnz	r0, 3be06 <__multiply+0x42>
   3bdf8:	4602      	mov	r2, r0
   3bdfa:	4b44      	ldr	r3, [pc, #272]	; (3bf0c <__multiply+0x148>)
   3bdfc:	f240 115d 	movw	r1, #349	; 0x15d
   3be00:	4843      	ldr	r0, [pc, #268]	; (3bf10 <__multiply+0x14c>)
   3be02:	f7fe f90b 	bl	3a01c <__assert_func>
   3be06:	f100 0514 	add.w	r5, r0, #20
   3be0a:	2200      	movs	r2, #0
   3be0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   3be10:	462b      	mov	r3, r5
   3be12:	4543      	cmp	r3, r8
   3be14:	d321      	bcc.n	3be5a <__multiply+0x96>
   3be16:	f104 0314 	add.w	r3, r4, #20
   3be1a:	f104 0115 	add.w	r1, r4, #21
   3be1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3be22:	f109 0314 	add.w	r3, r9, #20
   3be26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   3be2a:	9202      	str	r2, [sp, #8]
   3be2c:	1b3a      	subs	r2, r7, r4
   3be2e:	3a15      	subs	r2, #21
   3be30:	f022 0203 	bic.w	r2, r2, #3
   3be34:	3204      	adds	r2, #4
   3be36:	428f      	cmp	r7, r1
   3be38:	bf38      	it	cc
   3be3a:	2204      	movcc	r2, #4
   3be3c:	9201      	str	r2, [sp, #4]
   3be3e:	9a02      	ldr	r2, [sp, #8]
   3be40:	9303      	str	r3, [sp, #12]
   3be42:	429a      	cmp	r2, r3
   3be44:	d80c      	bhi.n	3be60 <__multiply+0x9c>
   3be46:	2e00      	cmp	r6, #0
   3be48:	dd03      	ble.n	3be52 <__multiply+0x8e>
   3be4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3be4e:	2b00      	cmp	r3, #0
   3be50:	d05a      	beq.n	3bf08 <__multiply+0x144>
   3be52:	6106      	str	r6, [r0, #16]
   3be54:	b005      	add	sp, #20
   3be56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3be5a:	f843 2b04 	str.w	r2, [r3], #4
   3be5e:	e7d8      	b.n	3be12 <__multiply+0x4e>
   3be60:	f8b3 a000 	ldrh.w	sl, [r3]
   3be64:	f1ba 0f00 	cmp.w	sl, #0
   3be68:	d024      	beq.n	3beb4 <__multiply+0xf0>
   3be6a:	f104 0e14 	add.w	lr, r4, #20
   3be6e:	46a9      	mov	r9, r5
   3be70:	f04f 0c00 	mov.w	ip, #0
   3be74:	f85e 2b04 	ldr.w	r2, [lr], #4
   3be78:	f8d9 1000 	ldr.w	r1, [r9]
   3be7c:	fa1f fb82 	uxth.w	fp, r2
   3be80:	4577      	cmp	r7, lr
   3be82:	b289      	uxth	r1, r1
   3be84:	fb0a 110b 	mla	r1, sl, fp, r1
   3be88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   3be8c:	f8d9 2000 	ldr.w	r2, [r9]
   3be90:	4461      	add	r1, ip
   3be92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3be96:	fb0a c20b 	mla	r2, sl, fp, ip
   3be9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   3be9e:	b289      	uxth	r1, r1
   3bea0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3bea4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   3bea8:	f849 1b04 	str.w	r1, [r9], #4
   3beac:	d8e2      	bhi.n	3be74 <__multiply+0xb0>
   3beae:	9a01      	ldr	r2, [sp, #4]
   3beb0:	f845 c002 	str.w	ip, [r5, r2]
   3beb4:	9a03      	ldr	r2, [sp, #12]
   3beb6:	3304      	adds	r3, #4
   3beb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   3bebc:	f1b9 0f00 	cmp.w	r9, #0
   3bec0:	d020      	beq.n	3bf04 <__multiply+0x140>
   3bec2:	6829      	ldr	r1, [r5, #0]
   3bec4:	f104 0c14 	add.w	ip, r4, #20
   3bec8:	46ae      	mov	lr, r5
   3beca:	f04f 0a00 	mov.w	sl, #0
   3bece:	f8bc b000 	ldrh.w	fp, [ip]
   3bed2:	b289      	uxth	r1, r1
   3bed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   3bed8:	fb09 220b 	mla	r2, r9, fp, r2
   3bedc:	4492      	add	sl, r2
   3bede:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   3bee2:	f84e 1b04 	str.w	r1, [lr], #4
   3bee6:	f85c 2b04 	ldr.w	r2, [ip], #4
   3beea:	f8be 1000 	ldrh.w	r1, [lr]
   3beee:	0c12      	lsrs	r2, r2, #16
   3bef0:	4567      	cmp	r7, ip
   3bef2:	fb09 1102 	mla	r1, r9, r2, r1
   3bef6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   3befa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   3befe:	d8e6      	bhi.n	3bece <__multiply+0x10a>
   3bf00:	9a01      	ldr	r2, [sp, #4]
   3bf02:	50a9      	str	r1, [r5, r2]
   3bf04:	3504      	adds	r5, #4
   3bf06:	e79a      	b.n	3be3e <__multiply+0x7a>
   3bf08:	3e01      	subs	r6, #1
   3bf0a:	e79c      	b.n	3be46 <__multiply+0x82>
   3bf0c:	0004c80a 	.word	0x0004c80a
   3bf10:	0004c8a1 	.word	0x0004c8a1

0003bf14 <__pow5mult>:
   3bf14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3bf18:	4615      	mov	r5, r2
   3bf1a:	f012 0203 	ands.w	r2, r2, #3
   3bf1e:	4606      	mov	r6, r0
   3bf20:	460f      	mov	r7, r1
   3bf22:	d007      	beq.n	3bf34 <__pow5mult+0x20>
   3bf24:	3a01      	subs	r2, #1
   3bf26:	4c25      	ldr	r4, [pc, #148]	; (3bfbc <__pow5mult+0xa8>)
   3bf28:	2300      	movs	r3, #0
   3bf2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3bf2e:	f7ff fea1 	bl	3bc74 <__multadd>
   3bf32:	4607      	mov	r7, r0
   3bf34:	10ad      	asrs	r5, r5, #2
   3bf36:	d03d      	beq.n	3bfb4 <__pow5mult+0xa0>
   3bf38:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3bf3a:	b97c      	cbnz	r4, 3bf5c <__pow5mult+0x48>
   3bf3c:	2010      	movs	r0, #16
   3bf3e:	f7fe f949 	bl	3a1d4 <malloc>
   3bf42:	4602      	mov	r2, r0
   3bf44:	6270      	str	r0, [r6, #36]	; 0x24
   3bf46:	b928      	cbnz	r0, 3bf54 <__pow5mult+0x40>
   3bf48:	4b1d      	ldr	r3, [pc, #116]	; (3bfc0 <__pow5mult+0xac>)
   3bf4a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   3bf4e:	481d      	ldr	r0, [pc, #116]	; (3bfc4 <__pow5mult+0xb0>)
   3bf50:	f7fe f864 	bl	3a01c <__assert_func>
   3bf54:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3bf58:	6004      	str	r4, [r0, #0]
   3bf5a:	60c4      	str	r4, [r0, #12]
   3bf5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3bf60:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3bf64:	b94c      	cbnz	r4, 3bf7a <__pow5mult+0x66>
   3bf66:	f240 2171 	movw	r1, #625	; 0x271
   3bf6a:	4630      	mov	r0, r6
   3bf6c:	f7ff ff14 	bl	3bd98 <__i2b>
   3bf70:	2300      	movs	r3, #0
   3bf72:	4604      	mov	r4, r0
   3bf74:	f8c8 0008 	str.w	r0, [r8, #8]
   3bf78:	6003      	str	r3, [r0, #0]
   3bf7a:	f04f 0900 	mov.w	r9, #0
   3bf7e:	07eb      	lsls	r3, r5, #31
   3bf80:	d50a      	bpl.n	3bf98 <__pow5mult+0x84>
   3bf82:	4639      	mov	r1, r7
   3bf84:	4622      	mov	r2, r4
   3bf86:	4630      	mov	r0, r6
   3bf88:	f7ff ff1c 	bl	3bdc4 <__multiply>
   3bf8c:	4680      	mov	r8, r0
   3bf8e:	4639      	mov	r1, r7
   3bf90:	4630      	mov	r0, r6
   3bf92:	4647      	mov	r7, r8
   3bf94:	f7ff fe4c 	bl	3bc30 <_Bfree>
   3bf98:	106d      	asrs	r5, r5, #1
   3bf9a:	d00b      	beq.n	3bfb4 <__pow5mult+0xa0>
   3bf9c:	6820      	ldr	r0, [r4, #0]
   3bf9e:	b938      	cbnz	r0, 3bfb0 <__pow5mult+0x9c>
   3bfa0:	4622      	mov	r2, r4
   3bfa2:	4621      	mov	r1, r4
   3bfa4:	4630      	mov	r0, r6
   3bfa6:	f7ff ff0d 	bl	3bdc4 <__multiply>
   3bfaa:	6020      	str	r0, [r4, #0]
   3bfac:	f8c0 9000 	str.w	r9, [r0]
   3bfb0:	4604      	mov	r4, r0
   3bfb2:	e7e4      	b.n	3bf7e <__pow5mult+0x6a>
   3bfb4:	4638      	mov	r0, r7
   3bfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3bfba:	bf00      	nop
   3bfbc:	00043bc8 	.word	0x00043bc8
   3bfc0:	0004c77f 	.word	0x0004c77f
   3bfc4:	0004c8a1 	.word	0x0004c8a1

0003bfc8 <__lshift>:
   3bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3bfcc:	460c      	mov	r4, r1
   3bfce:	4607      	mov	r7, r0
   3bfd0:	4691      	mov	r9, r2
   3bfd2:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3bfd6:	6923      	ldr	r3, [r4, #16]
   3bfd8:	6849      	ldr	r1, [r1, #4]
   3bfda:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3bfde:	68a3      	ldr	r3, [r4, #8]
   3bfe0:	f108 0601 	add.w	r6, r8, #1
   3bfe4:	42b3      	cmp	r3, r6
   3bfe6:	db0b      	blt.n	3c000 <__lshift+0x38>
   3bfe8:	4638      	mov	r0, r7
   3bfea:	f7ff fde1 	bl	3bbb0 <_Balloc>
   3bfee:	4605      	mov	r5, r0
   3bff0:	b948      	cbnz	r0, 3c006 <__lshift+0x3e>
   3bff2:	4602      	mov	r2, r0
   3bff4:	4b2a      	ldr	r3, [pc, #168]	; (3c0a0 <__lshift+0xd8>)
   3bff6:	f240 11d9 	movw	r1, #473	; 0x1d9
   3bffa:	482a      	ldr	r0, [pc, #168]	; (3c0a4 <__lshift+0xdc>)
   3bffc:	f7fe f80e 	bl	3a01c <__assert_func>
   3c000:	3101      	adds	r1, #1
   3c002:	005b      	lsls	r3, r3, #1
   3c004:	e7ee      	b.n	3bfe4 <__lshift+0x1c>
   3c006:	2300      	movs	r3, #0
   3c008:	f100 0114 	add.w	r1, r0, #20
   3c00c:	f100 0210 	add.w	r2, r0, #16
   3c010:	4618      	mov	r0, r3
   3c012:	4553      	cmp	r3, sl
   3c014:	db37      	blt.n	3c086 <__lshift+0xbe>
   3c016:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3c01a:	f104 0314 	add.w	r3, r4, #20
   3c01e:	6920      	ldr	r0, [r4, #16]
   3c020:	f019 091f 	ands.w	r9, r9, #31
   3c024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3c028:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3c02c:	d02f      	beq.n	3c08e <__lshift+0xc6>
   3c02e:	f1c9 0e20 	rsb	lr, r9, #32
   3c032:	468a      	mov	sl, r1
   3c034:	f04f 0c00 	mov.w	ip, #0
   3c038:	681a      	ldr	r2, [r3, #0]
   3c03a:	fa02 f209 	lsl.w	r2, r2, r9
   3c03e:	ea42 020c 	orr.w	r2, r2, ip
   3c042:	f84a 2b04 	str.w	r2, [sl], #4
   3c046:	f853 2b04 	ldr.w	r2, [r3], #4
   3c04a:	4298      	cmp	r0, r3
   3c04c:	fa22 fc0e 	lsr.w	ip, r2, lr
   3c050:	d8f2      	bhi.n	3c038 <__lshift+0x70>
   3c052:	1b03      	subs	r3, r0, r4
   3c054:	f104 0215 	add.w	r2, r4, #21
   3c058:	3b15      	subs	r3, #21
   3c05a:	f023 0303 	bic.w	r3, r3, #3
   3c05e:	3304      	adds	r3, #4
   3c060:	4290      	cmp	r0, r2
   3c062:	bf38      	it	cc
   3c064:	2304      	movcc	r3, #4
   3c066:	f841 c003 	str.w	ip, [r1, r3]
   3c06a:	f1bc 0f00 	cmp.w	ip, #0
   3c06e:	d001      	beq.n	3c074 <__lshift+0xac>
   3c070:	f108 0602 	add.w	r6, r8, #2
   3c074:	3e01      	subs	r6, #1
   3c076:	4638      	mov	r0, r7
   3c078:	4621      	mov	r1, r4
   3c07a:	612e      	str	r6, [r5, #16]
   3c07c:	f7ff fdd8 	bl	3bc30 <_Bfree>
   3c080:	4628      	mov	r0, r5
   3c082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c086:	3301      	adds	r3, #1
   3c088:	f842 0f04 	str.w	r0, [r2, #4]!
   3c08c:	e7c1      	b.n	3c012 <__lshift+0x4a>
   3c08e:	3904      	subs	r1, #4
   3c090:	f853 2b04 	ldr.w	r2, [r3], #4
   3c094:	4298      	cmp	r0, r3
   3c096:	f841 2f04 	str.w	r2, [r1, #4]!
   3c09a:	d8f9      	bhi.n	3c090 <__lshift+0xc8>
   3c09c:	e7ea      	b.n	3c074 <__lshift+0xac>
   3c09e:	bf00      	nop
   3c0a0:	0004c80a 	.word	0x0004c80a
   3c0a4:	0004c8a1 	.word	0x0004c8a1

0003c0a8 <__mdiff>:
   3c0a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c0ac:	460c      	mov	r4, r1
   3c0ae:	4606      	mov	r6, r0
   3c0b0:	4611      	mov	r1, r2
   3c0b2:	4692      	mov	sl, r2
   3c0b4:	4620      	mov	r0, r4
   3c0b6:	f006 fa66 	bl	42586 <__mcmp>
   3c0ba:	1e05      	subs	r5, r0, #0
   3c0bc:	d110      	bne.n	3c0e0 <__mdiff+0x38>
   3c0be:	4629      	mov	r1, r5
   3c0c0:	4630      	mov	r0, r6
   3c0c2:	f7ff fd75 	bl	3bbb0 <_Balloc>
   3c0c6:	b930      	cbnz	r0, 3c0d6 <__mdiff+0x2e>
   3c0c8:	4b3d      	ldr	r3, [pc, #244]	; (3c1c0 <__mdiff+0x118>)
   3c0ca:	4602      	mov	r2, r0
   3c0cc:	f240 2132 	movw	r1, #562	; 0x232
   3c0d0:	483c      	ldr	r0, [pc, #240]	; (3c1c4 <__mdiff+0x11c>)
   3c0d2:	f7fd ffa3 	bl	3a01c <__assert_func>
   3c0d6:	2301      	movs	r3, #1
   3c0d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3c0dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c0e0:	bfa4      	itt	ge
   3c0e2:	4653      	movge	r3, sl
   3c0e4:	46a2      	movge	sl, r4
   3c0e6:	4630      	mov	r0, r6
   3c0e8:	bfa8      	it	ge
   3c0ea:	2500      	movge	r5, #0
   3c0ec:	f8da 1004 	ldr.w	r1, [sl, #4]
   3c0f0:	bfac      	ite	ge
   3c0f2:	461c      	movge	r4, r3
   3c0f4:	2501      	movlt	r5, #1
   3c0f6:	f7ff fd5b 	bl	3bbb0 <_Balloc>
   3c0fa:	b920      	cbnz	r0, 3c106 <__mdiff+0x5e>
   3c0fc:	4b30      	ldr	r3, [pc, #192]	; (3c1c0 <__mdiff+0x118>)
   3c0fe:	4602      	mov	r2, r0
   3c100:	f44f 7110 	mov.w	r1, #576	; 0x240
   3c104:	e7e4      	b.n	3c0d0 <__mdiff+0x28>
   3c106:	f8da 7010 	ldr.w	r7, [sl, #16]
   3c10a:	f104 0914 	add.w	r9, r4, #20
   3c10e:	6926      	ldr	r6, [r4, #16]
   3c110:	f100 0814 	add.w	r8, r0, #20
   3c114:	60c5      	str	r5, [r0, #12]
   3c116:	f10a 0514 	add.w	r5, sl, #20
   3c11a:	f10a 0210 	add.w	r2, sl, #16
   3c11e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   3c122:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3c126:	46c2      	mov	sl, r8
   3c128:	f04f 0c00 	mov.w	ip, #0
   3c12c:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3c130:	f859 3b04 	ldr.w	r3, [r9], #4
   3c134:	fa1f f18b 	uxth.w	r1, fp
   3c138:	454e      	cmp	r6, r9
   3c13a:	448c      	add	ip, r1
   3c13c:	b299      	uxth	r1, r3
   3c13e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3c142:	ebac 0101 	sub.w	r1, ip, r1
   3c146:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3c14a:	eb03 4321 	add.w	r3, r3, r1, asr #16
   3c14e:	b289      	uxth	r1, r1
   3c150:	ea4f 4c23 	mov.w	ip, r3, asr #16
   3c154:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   3c158:	f84a 3b04 	str.w	r3, [sl], #4
   3c15c:	d8e6      	bhi.n	3c12c <__mdiff+0x84>
   3c15e:	1b33      	subs	r3, r6, r4
   3c160:	3415      	adds	r4, #21
   3c162:	3b15      	subs	r3, #21
   3c164:	f023 0303 	bic.w	r3, r3, #3
   3c168:	3304      	adds	r3, #4
   3c16a:	42a6      	cmp	r6, r4
   3c16c:	bf38      	it	cc
   3c16e:	2304      	movcc	r3, #4
   3c170:	441d      	add	r5, r3
   3c172:	4443      	add	r3, r8
   3c174:	462c      	mov	r4, r5
   3c176:	461e      	mov	r6, r3
   3c178:	4574      	cmp	r4, lr
   3c17a:	d30e      	bcc.n	3c19a <__mdiff+0xf2>
   3c17c:	f10e 0203 	add.w	r2, lr, #3
   3c180:	1b52      	subs	r2, r2, r5
   3c182:	3d03      	subs	r5, #3
   3c184:	f022 0203 	bic.w	r2, r2, #3
   3c188:	45ae      	cmp	lr, r5
   3c18a:	bf38      	it	cc
   3c18c:	2200      	movcc	r2, #0
   3c18e:	441a      	add	r2, r3
   3c190:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3c194:	b18b      	cbz	r3, 3c1ba <__mdiff+0x112>
   3c196:	6107      	str	r7, [r0, #16]
   3c198:	e7a0      	b.n	3c0dc <__mdiff+0x34>
   3c19a:	f854 8b04 	ldr.w	r8, [r4], #4
   3c19e:	fa1f f288 	uxth.w	r2, r8
   3c1a2:	4462      	add	r2, ip
   3c1a4:	1411      	asrs	r1, r2, #16
   3c1a6:	b292      	uxth	r2, r2
   3c1a8:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   3c1ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3c1b0:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3c1b4:	f846 2b04 	str.w	r2, [r6], #4
   3c1b8:	e7de      	b.n	3c178 <__mdiff+0xd0>
   3c1ba:	3f01      	subs	r7, #1
   3c1bc:	e7e8      	b.n	3c190 <__mdiff+0xe8>
   3c1be:	bf00      	nop
   3c1c0:	0004c80a 	.word	0x0004c80a
   3c1c4:	0004c8a1 	.word	0x0004c8a1

0003c1c8 <__ulp>:
   3c1c8:	4b10      	ldr	r3, [pc, #64]	; (3c20c <__ulp+0x44>)
   3c1ca:	400b      	ands	r3, r1
   3c1cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   3c1d0:	2b00      	cmp	r3, #0
   3c1d2:	dd02      	ble.n	3c1da <__ulp+0x12>
   3c1d4:	2000      	movs	r0, #0
   3c1d6:	4619      	mov	r1, r3
   3c1d8:	4770      	bx	lr
   3c1da:	425b      	negs	r3, r3
   3c1dc:	2000      	movs	r0, #0
   3c1de:	2100      	movs	r1, #0
   3c1e0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   3c1e4:	ea4f 5223 	mov.w	r2, r3, asr #20
   3c1e8:	da04      	bge.n	3c1f4 <__ulp+0x2c>
   3c1ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   3c1ee:	fa43 f102 	asr.w	r1, r3, r2
   3c1f2:	4770      	bx	lr
   3c1f4:	f1a2 0314 	sub.w	r3, r2, #20
   3c1f8:	2b1e      	cmp	r3, #30
   3c1fa:	bfd6      	itet	le
   3c1fc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3c200:	2301      	movgt	r3, #1
   3c202:	fa22 f303 	lsrle.w	r3, r2, r3
   3c206:	4618      	mov	r0, r3
   3c208:	4770      	bx	lr
   3c20a:	bf00      	nop
   3c20c:	7ff00000 	.word	0x7ff00000

0003c210 <__b2d>:
   3c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c214:	6906      	ldr	r6, [r0, #16]
   3c216:	f100 0814 	add.w	r8, r0, #20
   3c21a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   3c21e:	f856 2c04 	ldr.w	r2, [r6, #-4]
   3c222:	1f37      	subs	r7, r6, #4
   3c224:	4610      	mov	r0, r2
   3c226:	f006 f95f 	bl	424e8 <__hi0bits>
   3c22a:	f1c0 0320 	rsb	r3, r0, #32
   3c22e:	280a      	cmp	r0, #10
   3c230:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3c2b0 <__b2d+0xa0>
   3c234:	600b      	str	r3, [r1, #0]
   3c236:	dc16      	bgt.n	3c266 <__b2d+0x56>
   3c238:	f1c0 0e0b 	rsb	lr, r0, #11
   3c23c:	45b8      	cmp	r8, r7
   3c23e:	fa22 f30e 	lsr.w	r3, r2, lr
   3c242:	bf34      	ite	cc
   3c244:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3c248:	2100      	movcs	r1, #0
   3c24a:	ea43 050c 	orr.w	r5, r3, ip
   3c24e:	f100 0315 	add.w	r3, r0, #21
   3c252:	fa21 f10e 	lsr.w	r1, r1, lr
   3c256:	fa02 f303 	lsl.w	r3, r2, r3
   3c25a:	ea43 0401 	orr.w	r4, r3, r1
   3c25e:	4620      	mov	r0, r4
   3c260:	4629      	mov	r1, r5
   3c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c266:	45b8      	cmp	r8, r7
   3c268:	bf3a      	itte	cc
   3c26a:	f1a6 0708 	subcc.w	r7, r6, #8
   3c26e:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3c272:	2100      	movcs	r1, #0
   3c274:	f1b0 030b 	subs.w	r3, r0, #11
   3c278:	d016      	beq.n	3c2a8 <__b2d+0x98>
   3c27a:	f1c3 0620 	rsb	r6, r3, #32
   3c27e:	fa02 f003 	lsl.w	r0, r2, r3
   3c282:	4547      	cmp	r7, r8
   3c284:	fa21 f206 	lsr.w	r2, r1, r6
   3c288:	ea40 0002 	orr.w	r0, r0, r2
   3c28c:	bf8c      	ite	hi
   3c28e:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
   3c292:	2200      	movls	r2, #0
   3c294:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
   3c298:	fa01 f003 	lsl.w	r0, r1, r3
   3c29c:	40f2      	lsrs	r2, r6
   3c29e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   3c2a2:	ea40 0402 	orr.w	r4, r0, r2
   3c2a6:	e7da      	b.n	3c25e <__b2d+0x4e>
   3c2a8:	ea42 050c 	orr.w	r5, r2, ip
   3c2ac:	460c      	mov	r4, r1
   3c2ae:	e7d6      	b.n	3c25e <__b2d+0x4e>
   3c2b0:	3ff00000 	.word	0x3ff00000

0003c2b4 <__d2b>:
   3c2b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3c2b8:	2101      	movs	r1, #1
   3c2ba:	4690      	mov	r8, r2
   3c2bc:	4699      	mov	r9, r3
   3c2be:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
   3c2c2:	f7ff fc75 	bl	3bbb0 <_Balloc>
   3c2c6:	4604      	mov	r4, r0
   3c2c8:	b930      	cbnz	r0, 3c2d8 <__d2b+0x24>
   3c2ca:	4602      	mov	r2, r0
   3c2cc:	4b24      	ldr	r3, [pc, #144]	; (3c360 <__d2b+0xac>)
   3c2ce:	f240 310a 	movw	r1, #778	; 0x30a
   3c2d2:	4824      	ldr	r0, [pc, #144]	; (3c364 <__d2b+0xb0>)
   3c2d4:	f7fd fea2 	bl	3a01c <__assert_func>
   3c2d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
   3c2dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   3c2e0:	bb2d      	cbnz	r5, 3c32e <__d2b+0x7a>
   3c2e2:	f1b8 0200 	subs.w	r2, r8, #0
   3c2e6:	9301      	str	r3, [sp, #4]
   3c2e8:	d026      	beq.n	3c338 <__d2b+0x84>
   3c2ea:	4668      	mov	r0, sp
   3c2ec:	9200      	str	r2, [sp, #0]
   3c2ee:	f006 f91b 	bl	42528 <__lo0bits>
   3c2f2:	9900      	ldr	r1, [sp, #0]
   3c2f4:	b1f0      	cbz	r0, 3c334 <__d2b+0x80>
   3c2f6:	9a01      	ldr	r2, [sp, #4]
   3c2f8:	f1c0 0320 	rsb	r3, r0, #32
   3c2fc:	fa02 f303 	lsl.w	r3, r2, r3
   3c300:	40c2      	lsrs	r2, r0
   3c302:	430b      	orrs	r3, r1
   3c304:	9201      	str	r2, [sp, #4]
   3c306:	6163      	str	r3, [r4, #20]
   3c308:	9b01      	ldr	r3, [sp, #4]
   3c30a:	2b00      	cmp	r3, #0
   3c30c:	61a3      	str	r3, [r4, #24]
   3c30e:	bf14      	ite	ne
   3c310:	2202      	movne	r2, #2
   3c312:	2201      	moveq	r2, #1
   3c314:	6122      	str	r2, [r4, #16]
   3c316:	b1c5      	cbz	r5, 3c34a <__d2b+0x96>
   3c318:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3c31c:	4405      	add	r5, r0
   3c31e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3c322:	603d      	str	r5, [r7, #0]
   3c324:	6030      	str	r0, [r6, #0]
   3c326:	4620      	mov	r0, r4
   3c328:	b003      	add	sp, #12
   3c32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c32e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3c332:	e7d6      	b.n	3c2e2 <__d2b+0x2e>
   3c334:	6161      	str	r1, [r4, #20]
   3c336:	e7e7      	b.n	3c308 <__d2b+0x54>
   3c338:	a801      	add	r0, sp, #4
   3c33a:	f006 f8f5 	bl	42528 <__lo0bits>
   3c33e:	9b01      	ldr	r3, [sp, #4]
   3c340:	2201      	movs	r2, #1
   3c342:	3020      	adds	r0, #32
   3c344:	6163      	str	r3, [r4, #20]
   3c346:	6122      	str	r2, [r4, #16]
   3c348:	e7e5      	b.n	3c316 <__d2b+0x62>
   3c34a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3c34e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   3c352:	6038      	str	r0, [r7, #0]
   3c354:	6918      	ldr	r0, [r3, #16]
   3c356:	f006 f8c7 	bl	424e8 <__hi0bits>
   3c35a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   3c35e:	e7e1      	b.n	3c324 <__d2b+0x70>
   3c360:	0004c80a 	.word	0x0004c80a
   3c364:	0004c8a1 	.word	0x0004c8a1

0003c368 <_svfiprintf_r>:
   3c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c36c:	4698      	mov	r8, r3
   3c36e:	898b      	ldrh	r3, [r1, #12]
   3c370:	b09d      	sub	sp, #116	; 0x74
   3c372:	4607      	mov	r7, r0
   3c374:	061b      	lsls	r3, r3, #24
   3c376:	460d      	mov	r5, r1
   3c378:	4614      	mov	r4, r2
   3c37a:	d50e      	bpl.n	3c39a <_svfiprintf_r+0x32>
   3c37c:	690b      	ldr	r3, [r1, #16]
   3c37e:	b963      	cbnz	r3, 3c39a <_svfiprintf_r+0x32>
   3c380:	2140      	movs	r1, #64	; 0x40
   3c382:	f7fd ff83 	bl	3a28c <_malloc_r>
   3c386:	6028      	str	r0, [r5, #0]
   3c388:	6128      	str	r0, [r5, #16]
   3c38a:	b920      	cbnz	r0, 3c396 <_svfiprintf_r+0x2e>
   3c38c:	230c      	movs	r3, #12
   3c38e:	603b      	str	r3, [r7, #0]
   3c390:	f04f 30ff 	mov.w	r0, #4294967295
   3c394:	e0d1      	b.n	3c53a <_svfiprintf_r+0x1d2>
   3c396:	2340      	movs	r3, #64	; 0x40
   3c398:	616b      	str	r3, [r5, #20]
   3c39a:	2300      	movs	r3, #0
   3c39c:	f8cd 800c 	str.w	r8, [sp, #12]
   3c3a0:	f04f 0901 	mov.w	r9, #1
   3c3a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3c554 <_svfiprintf_r+0x1ec>
   3c3a8:	9309      	str	r3, [sp, #36]	; 0x24
   3c3aa:	2320      	movs	r3, #32
   3c3ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3c3b0:	2330      	movs	r3, #48	; 0x30
   3c3b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3c3b6:	4623      	mov	r3, r4
   3c3b8:	469a      	mov	sl, r3
   3c3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   3c3be:	b10a      	cbz	r2, 3c3c4 <_svfiprintf_r+0x5c>
   3c3c0:	2a25      	cmp	r2, #37	; 0x25
   3c3c2:	d1f9      	bne.n	3c3b8 <_svfiprintf_r+0x50>
   3c3c4:	ebba 0b04 	subs.w	fp, sl, r4
   3c3c8:	d00b      	beq.n	3c3e2 <_svfiprintf_r+0x7a>
   3c3ca:	465b      	mov	r3, fp
   3c3cc:	4622      	mov	r2, r4
   3c3ce:	4629      	mov	r1, r5
   3c3d0:	4638      	mov	r0, r7
   3c3d2:	f006 f98c 	bl	426ee <__ssputs_r>
   3c3d6:	3001      	adds	r0, #1
   3c3d8:	f000 80aa 	beq.w	3c530 <_svfiprintf_r+0x1c8>
   3c3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3c3de:	445a      	add	r2, fp
   3c3e0:	9209      	str	r2, [sp, #36]	; 0x24
   3c3e2:	f89a 3000 	ldrb.w	r3, [sl]
   3c3e6:	2b00      	cmp	r3, #0
   3c3e8:	f000 80a2 	beq.w	3c530 <_svfiprintf_r+0x1c8>
   3c3ec:	2300      	movs	r3, #0
   3c3ee:	f04f 32ff 	mov.w	r2, #4294967295
   3c3f2:	f10a 0a01 	add.w	sl, sl, #1
   3c3f6:	9304      	str	r3, [sp, #16]
   3c3f8:	9307      	str	r3, [sp, #28]
   3c3fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3c3fe:	931a      	str	r3, [sp, #104]	; 0x68
   3c400:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3c404:	4654      	mov	r4, sl
   3c406:	2205      	movs	r2, #5
   3c408:	4852      	ldr	r0, [pc, #328]	; (3c554 <_svfiprintf_r+0x1ec>)
   3c40a:	f814 1b01 	ldrb.w	r1, [r4], #1
   3c40e:	f005 fb69 	bl	41ae4 <memchr>
   3c412:	9a04      	ldr	r2, [sp, #16]
   3c414:	b9d8      	cbnz	r0, 3c44e <_svfiprintf_r+0xe6>
   3c416:	06d0      	lsls	r0, r2, #27
   3c418:	bf44      	itt	mi
   3c41a:	2320      	movmi	r3, #32
   3c41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3c420:	0711      	lsls	r1, r2, #28
   3c422:	bf44      	itt	mi
   3c424:	232b      	movmi	r3, #43	; 0x2b
   3c426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3c42a:	f89a 3000 	ldrb.w	r3, [sl]
   3c42e:	2b2a      	cmp	r3, #42	; 0x2a
   3c430:	d015      	beq.n	3c45e <_svfiprintf_r+0xf6>
   3c432:	9a07      	ldr	r2, [sp, #28]
   3c434:	4654      	mov	r4, sl
   3c436:	2000      	movs	r0, #0
   3c438:	f04f 0c0a 	mov.w	ip, #10
   3c43c:	4621      	mov	r1, r4
   3c43e:	f811 3b01 	ldrb.w	r3, [r1], #1
   3c442:	3b30      	subs	r3, #48	; 0x30
   3c444:	2b09      	cmp	r3, #9
   3c446:	d94e      	bls.n	3c4e6 <_svfiprintf_r+0x17e>
   3c448:	b1b0      	cbz	r0, 3c478 <_svfiprintf_r+0x110>
   3c44a:	9207      	str	r2, [sp, #28]
   3c44c:	e014      	b.n	3c478 <_svfiprintf_r+0x110>
   3c44e:	eba0 0308 	sub.w	r3, r0, r8
   3c452:	46a2      	mov	sl, r4
   3c454:	fa09 f303 	lsl.w	r3, r9, r3
   3c458:	4313      	orrs	r3, r2
   3c45a:	9304      	str	r3, [sp, #16]
   3c45c:	e7d2      	b.n	3c404 <_svfiprintf_r+0x9c>
   3c45e:	9b03      	ldr	r3, [sp, #12]
   3c460:	1d19      	adds	r1, r3, #4
   3c462:	681b      	ldr	r3, [r3, #0]
   3c464:	2b00      	cmp	r3, #0
   3c466:	9103      	str	r1, [sp, #12]
   3c468:	bfbb      	ittet	lt
   3c46a:	425b      	neglt	r3, r3
   3c46c:	f042 0202 	orrlt.w	r2, r2, #2
   3c470:	9307      	strge	r3, [sp, #28]
   3c472:	9307      	strlt	r3, [sp, #28]
   3c474:	bfb8      	it	lt
   3c476:	9204      	strlt	r2, [sp, #16]
   3c478:	7823      	ldrb	r3, [r4, #0]
   3c47a:	2b2e      	cmp	r3, #46	; 0x2e
   3c47c:	d10c      	bne.n	3c498 <_svfiprintf_r+0x130>
   3c47e:	7863      	ldrb	r3, [r4, #1]
   3c480:	2b2a      	cmp	r3, #42	; 0x2a
   3c482:	d135      	bne.n	3c4f0 <_svfiprintf_r+0x188>
   3c484:	9b03      	ldr	r3, [sp, #12]
   3c486:	3402      	adds	r4, #2
   3c488:	1d1a      	adds	r2, r3, #4
   3c48a:	681b      	ldr	r3, [r3, #0]
   3c48c:	2b00      	cmp	r3, #0
   3c48e:	9203      	str	r2, [sp, #12]
   3c490:	bfb8      	it	lt
   3c492:	f04f 33ff 	movlt.w	r3, #4294967295
   3c496:	9305      	str	r3, [sp, #20]
   3c498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3c564 <_svfiprintf_r+0x1fc>
   3c49c:	2203      	movs	r2, #3
   3c49e:	7821      	ldrb	r1, [r4, #0]
   3c4a0:	4650      	mov	r0, sl
   3c4a2:	f005 fb1f 	bl	41ae4 <memchr>
   3c4a6:	b140      	cbz	r0, 3c4ba <_svfiprintf_r+0x152>
   3c4a8:	2340      	movs	r3, #64	; 0x40
   3c4aa:	eba0 000a 	sub.w	r0, r0, sl
   3c4ae:	3401      	adds	r4, #1
   3c4b0:	fa03 f000 	lsl.w	r0, r3, r0
   3c4b4:	9b04      	ldr	r3, [sp, #16]
   3c4b6:	4303      	orrs	r3, r0
   3c4b8:	9304      	str	r3, [sp, #16]
   3c4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   3c4be:	2206      	movs	r2, #6
   3c4c0:	4825      	ldr	r0, [pc, #148]	; (3c558 <_svfiprintf_r+0x1f0>)
   3c4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3c4c6:	f005 fb0d 	bl	41ae4 <memchr>
   3c4ca:	2800      	cmp	r0, #0
   3c4cc:	d038      	beq.n	3c540 <_svfiprintf_r+0x1d8>
   3c4ce:	4b23      	ldr	r3, [pc, #140]	; (3c55c <_svfiprintf_r+0x1f4>)
   3c4d0:	bb1b      	cbnz	r3, 3c51a <_svfiprintf_r+0x1b2>
   3c4d2:	9b03      	ldr	r3, [sp, #12]
   3c4d4:	3307      	adds	r3, #7
   3c4d6:	f023 0307 	bic.w	r3, r3, #7
   3c4da:	3308      	adds	r3, #8
   3c4dc:	9303      	str	r3, [sp, #12]
   3c4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3c4e0:	4433      	add	r3, r6
   3c4e2:	9309      	str	r3, [sp, #36]	; 0x24
   3c4e4:	e767      	b.n	3c3b6 <_svfiprintf_r+0x4e>
   3c4e6:	fb0c 3202 	mla	r2, ip, r2, r3
   3c4ea:	460c      	mov	r4, r1
   3c4ec:	2001      	movs	r0, #1
   3c4ee:	e7a5      	b.n	3c43c <_svfiprintf_r+0xd4>
   3c4f0:	2300      	movs	r3, #0
   3c4f2:	3401      	adds	r4, #1
   3c4f4:	f04f 0c0a 	mov.w	ip, #10
   3c4f8:	4619      	mov	r1, r3
   3c4fa:	9305      	str	r3, [sp, #20]
   3c4fc:	4620      	mov	r0, r4
   3c4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   3c502:	3a30      	subs	r2, #48	; 0x30
   3c504:	2a09      	cmp	r2, #9
   3c506:	d903      	bls.n	3c510 <_svfiprintf_r+0x1a8>
   3c508:	2b00      	cmp	r3, #0
   3c50a:	d0c5      	beq.n	3c498 <_svfiprintf_r+0x130>
   3c50c:	9105      	str	r1, [sp, #20]
   3c50e:	e7c3      	b.n	3c498 <_svfiprintf_r+0x130>
   3c510:	fb0c 2101 	mla	r1, ip, r1, r2
   3c514:	4604      	mov	r4, r0
   3c516:	2301      	movs	r3, #1
   3c518:	e7f0      	b.n	3c4fc <_svfiprintf_r+0x194>
   3c51a:	ab03      	add	r3, sp, #12
   3c51c:	462a      	mov	r2, r5
   3c51e:	a904      	add	r1, sp, #16
   3c520:	4638      	mov	r0, r7
   3c522:	9300      	str	r3, [sp, #0]
   3c524:	4b0e      	ldr	r3, [pc, #56]	; (3c560 <_svfiprintf_r+0x1f8>)
   3c526:	f7fe f83b 	bl	3a5a0 <_printf_float>
   3c52a:	1c42      	adds	r2, r0, #1
   3c52c:	4606      	mov	r6, r0
   3c52e:	d1d6      	bne.n	3c4de <_svfiprintf_r+0x176>
   3c530:	89ab      	ldrh	r3, [r5, #12]
   3c532:	065b      	lsls	r3, r3, #25
   3c534:	f53f af2c 	bmi.w	3c390 <_svfiprintf_r+0x28>
   3c538:	9809      	ldr	r0, [sp, #36]	; 0x24
   3c53a:	b01d      	add	sp, #116	; 0x74
   3c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c540:	ab03      	add	r3, sp, #12
   3c542:	462a      	mov	r2, r5
   3c544:	a904      	add	r1, sp, #16
   3c546:	4638      	mov	r0, r7
   3c548:	9300      	str	r3, [sp, #0]
   3c54a:	4b05      	ldr	r3, [pc, #20]	; (3c560 <_svfiprintf_r+0x1f8>)
   3c54c:	f7fe fa60 	bl	3aa10 <_printf_i>
   3c550:	e7eb      	b.n	3c52a <_svfiprintf_r+0x1c2>
   3c552:	bf00      	nop
   3c554:	0004c72f 	.word	0x0004c72f
   3c558:	0004c739 	.word	0x0004c739
   3c55c:	0003a5a1 	.word	0x0003a5a1
   3c560:	000426ef 	.word	0x000426ef
   3c564:	0004c735 	.word	0x0004c735

0003c568 <__ssvfiscanf_r>:
   3c568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c56c:	460c      	mov	r4, r1
   3c56e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   3c572:	2100      	movs	r1, #0
   3c574:	4606      	mov	r6, r0
   3c576:	f10d 0804 	add.w	r8, sp, #4
   3c57a:	4fa8      	ldr	r7, [pc, #672]	; (3c81c <__ssvfiscanf_r+0x2b4>)
   3c57c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 3c828 <__ssvfiscanf_r+0x2c0>
   3c580:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3c584:	9300      	str	r3, [sp, #0]
   3c586:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3c58a:	49a5      	ldr	r1, [pc, #660]	; (3c820 <__ssvfiscanf_r+0x2b8>)
   3c58c:	91a0      	str	r1, [sp, #640]	; 0x280
   3c58e:	49a5      	ldr	r1, [pc, #660]	; (3c824 <__ssvfiscanf_r+0x2bc>)
   3c590:	91a1      	str	r1, [sp, #644]	; 0x284
   3c592:	7813      	ldrb	r3, [r2, #0]
   3c594:	2b00      	cmp	r3, #0
   3c596:	f000 815e 	beq.w	3c856 <__ssvfiscanf_r+0x2ee>
   3c59a:	5dd9      	ldrb	r1, [r3, r7]
   3c59c:	1c55      	adds	r5, r2, #1
   3c59e:	f011 0108 	ands.w	r1, r1, #8
   3c5a2:	d019      	beq.n	3c5d8 <__ssvfiscanf_r+0x70>
   3c5a4:	6863      	ldr	r3, [r4, #4]
   3c5a6:	2b00      	cmp	r3, #0
   3c5a8:	dd0f      	ble.n	3c5ca <__ssvfiscanf_r+0x62>
   3c5aa:	6823      	ldr	r3, [r4, #0]
   3c5ac:	781a      	ldrb	r2, [r3, #0]
   3c5ae:	5cba      	ldrb	r2, [r7, r2]
   3c5b0:	0712      	lsls	r2, r2, #28
   3c5b2:	d401      	bmi.n	3c5b8 <__ssvfiscanf_r+0x50>
   3c5b4:	462a      	mov	r2, r5
   3c5b6:	e7ec      	b.n	3c592 <__ssvfiscanf_r+0x2a>
   3c5b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c5ba:	3301      	adds	r3, #1
   3c5bc:	3201      	adds	r2, #1
   3c5be:	6023      	str	r3, [r4, #0]
   3c5c0:	9245      	str	r2, [sp, #276]	; 0x114
   3c5c2:	6862      	ldr	r2, [r4, #4]
   3c5c4:	3a01      	subs	r2, #1
   3c5c6:	6062      	str	r2, [r4, #4]
   3c5c8:	e7ec      	b.n	3c5a4 <__ssvfiscanf_r+0x3c>
   3c5ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c5cc:	4621      	mov	r1, r4
   3c5ce:	4630      	mov	r0, r6
   3c5d0:	4798      	blx	r3
   3c5d2:	2800      	cmp	r0, #0
   3c5d4:	d0e9      	beq.n	3c5aa <__ssvfiscanf_r+0x42>
   3c5d6:	e7ed      	b.n	3c5b4 <__ssvfiscanf_r+0x4c>
   3c5d8:	2b25      	cmp	r3, #37	; 0x25
   3c5da:	d012      	beq.n	3c602 <__ssvfiscanf_r+0x9a>
   3c5dc:	469a      	mov	sl, r3
   3c5de:	6863      	ldr	r3, [r4, #4]
   3c5e0:	2b00      	cmp	r3, #0
   3c5e2:	f340 8094 	ble.w	3c70e <__ssvfiscanf_r+0x1a6>
   3c5e6:	6822      	ldr	r2, [r4, #0]
   3c5e8:	7813      	ldrb	r3, [r2, #0]
   3c5ea:	4553      	cmp	r3, sl
   3c5ec:	f040 8133 	bne.w	3c856 <__ssvfiscanf_r+0x2ee>
   3c5f0:	6863      	ldr	r3, [r4, #4]
   3c5f2:	3201      	adds	r2, #1
   3c5f4:	3b01      	subs	r3, #1
   3c5f6:	6022      	str	r2, [r4, #0]
   3c5f8:	6063      	str	r3, [r4, #4]
   3c5fa:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3c5fc:	3301      	adds	r3, #1
   3c5fe:	9345      	str	r3, [sp, #276]	; 0x114
   3c600:	e7d8      	b.n	3c5b4 <__ssvfiscanf_r+0x4c>
   3c602:	9141      	str	r1, [sp, #260]	; 0x104
   3c604:	9143      	str	r1, [sp, #268]	; 0x10c
   3c606:	7853      	ldrb	r3, [r2, #1]
   3c608:	2b2a      	cmp	r3, #42	; 0x2a
   3c60a:	bf04      	itt	eq
   3c60c:	2310      	moveq	r3, #16
   3c60e:	1c95      	addeq	r5, r2, #2
   3c610:	f04f 020a 	mov.w	r2, #10
   3c614:	bf08      	it	eq
   3c616:	9341      	streq	r3, [sp, #260]	; 0x104
   3c618:	46aa      	mov	sl, r5
   3c61a:	f81a 1b01 	ldrb.w	r1, [sl], #1
   3c61e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3c622:	2b09      	cmp	r3, #9
   3c624:	d91d      	bls.n	3c662 <__ssvfiscanf_r+0xfa>
   3c626:	2203      	movs	r2, #3
   3c628:	487f      	ldr	r0, [pc, #508]	; (3c828 <__ssvfiscanf_r+0x2c0>)
   3c62a:	f005 fa5b 	bl	41ae4 <memchr>
   3c62e:	b140      	cbz	r0, 3c642 <__ssvfiscanf_r+0xda>
   3c630:	2301      	movs	r3, #1
   3c632:	eba0 0009 	sub.w	r0, r0, r9
   3c636:	4655      	mov	r5, sl
   3c638:	fa03 f000 	lsl.w	r0, r3, r0
   3c63c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c63e:	4318      	orrs	r0, r3
   3c640:	9041      	str	r0, [sp, #260]	; 0x104
   3c642:	f815 3b01 	ldrb.w	r3, [r5], #1
   3c646:	2b78      	cmp	r3, #120	; 0x78
   3c648:	d806      	bhi.n	3c658 <__ssvfiscanf_r+0xf0>
   3c64a:	2b57      	cmp	r3, #87	; 0x57
   3c64c:	d810      	bhi.n	3c670 <__ssvfiscanf_r+0x108>
   3c64e:	2b25      	cmp	r3, #37	; 0x25
   3c650:	d0c4      	beq.n	3c5dc <__ssvfiscanf_r+0x74>
   3c652:	d857      	bhi.n	3c704 <__ssvfiscanf_r+0x19c>
   3c654:	2b00      	cmp	r3, #0
   3c656:	d065      	beq.n	3c724 <__ssvfiscanf_r+0x1bc>
   3c658:	2303      	movs	r3, #3
   3c65a:	9347      	str	r3, [sp, #284]	; 0x11c
   3c65c:	230a      	movs	r3, #10
   3c65e:	9342      	str	r3, [sp, #264]	; 0x108
   3c660:	e072      	b.n	3c748 <__ssvfiscanf_r+0x1e0>
   3c662:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3c664:	4655      	mov	r5, sl
   3c666:	fb02 1103 	mla	r1, r2, r3, r1
   3c66a:	3930      	subs	r1, #48	; 0x30
   3c66c:	9143      	str	r1, [sp, #268]	; 0x10c
   3c66e:	e7d3      	b.n	3c618 <__ssvfiscanf_r+0xb0>
   3c670:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   3c674:	2a20      	cmp	r2, #32
   3c676:	d8ef      	bhi.n	3c658 <__ssvfiscanf_r+0xf0>
   3c678:	a101      	add	r1, pc, #4	; (adr r1, 3c680 <__ssvfiscanf_r+0x118>)
   3c67a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   3c67e:	bf00      	nop
   3c680:	0003c733 	.word	0x0003c733
   3c684:	0003c659 	.word	0x0003c659
   3c688:	0003c659 	.word	0x0003c659
   3c68c:	0003c791 	.word	0x0003c791
   3c690:	0003c659 	.word	0x0003c659
   3c694:	0003c659 	.word	0x0003c659
   3c698:	0003c659 	.word	0x0003c659
   3c69c:	0003c659 	.word	0x0003c659
   3c6a0:	0003c659 	.word	0x0003c659
   3c6a4:	0003c659 	.word	0x0003c659
   3c6a8:	0003c659 	.word	0x0003c659
   3c6ac:	0003c7a7 	.word	0x0003c7a7
   3c6b0:	0003c77d 	.word	0x0003c77d
   3c6b4:	0003c70b 	.word	0x0003c70b
   3c6b8:	0003c70b 	.word	0x0003c70b
   3c6bc:	0003c70b 	.word	0x0003c70b
   3c6c0:	0003c659 	.word	0x0003c659
   3c6c4:	0003c781 	.word	0x0003c781
   3c6c8:	0003c659 	.word	0x0003c659
   3c6cc:	0003c659 	.word	0x0003c659
   3c6d0:	0003c659 	.word	0x0003c659
   3c6d4:	0003c659 	.word	0x0003c659
   3c6d8:	0003c7b7 	.word	0x0003c7b7
   3c6dc:	0003c789 	.word	0x0003c789
   3c6e0:	0003c72b 	.word	0x0003c72b
   3c6e4:	0003c659 	.word	0x0003c659
   3c6e8:	0003c659 	.word	0x0003c659
   3c6ec:	0003c7b3 	.word	0x0003c7b3
   3c6f0:	0003c659 	.word	0x0003c659
   3c6f4:	0003c77d 	.word	0x0003c77d
   3c6f8:	0003c659 	.word	0x0003c659
   3c6fc:	0003c659 	.word	0x0003c659
   3c700:	0003c733 	.word	0x0003c733
   3c704:	3b45      	subs	r3, #69	; 0x45
   3c706:	2b02      	cmp	r3, #2
   3c708:	d8a6      	bhi.n	3c658 <__ssvfiscanf_r+0xf0>
   3c70a:	2305      	movs	r3, #5
   3c70c:	e01b      	b.n	3c746 <__ssvfiscanf_r+0x1de>
   3c70e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c710:	4621      	mov	r1, r4
   3c712:	4630      	mov	r0, r6
   3c714:	4798      	blx	r3
   3c716:	2800      	cmp	r0, #0
   3c718:	f43f af65 	beq.w	3c5e6 <__ssvfiscanf_r+0x7e>
   3c71c:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c71e:	2800      	cmp	r0, #0
   3c720:	f040 808f 	bne.w	3c842 <__ssvfiscanf_r+0x2da>
   3c724:	f04f 30ff 	mov.w	r0, #4294967295
   3c728:	e091      	b.n	3c84e <__ssvfiscanf_r+0x2e6>
   3c72a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c72c:	f042 0220 	orr.w	r2, r2, #32
   3c730:	9241      	str	r2, [sp, #260]	; 0x104
   3c732:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c738:	9241      	str	r2, [sp, #260]	; 0x104
   3c73a:	2210      	movs	r2, #16
   3c73c:	2b6f      	cmp	r3, #111	; 0x6f
   3c73e:	9242      	str	r2, [sp, #264]	; 0x108
   3c740:	bf34      	ite	cc
   3c742:	2303      	movcc	r3, #3
   3c744:	2304      	movcs	r3, #4
   3c746:	9347      	str	r3, [sp, #284]	; 0x11c
   3c748:	6863      	ldr	r3, [r4, #4]
   3c74a:	2b00      	cmp	r3, #0
   3c74c:	dd43      	ble.n	3c7d6 <__ssvfiscanf_r+0x26e>
   3c74e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c750:	0659      	lsls	r1, r3, #25
   3c752:	d404      	bmi.n	3c75e <__ssvfiscanf_r+0x1f6>
   3c754:	6823      	ldr	r3, [r4, #0]
   3c756:	781a      	ldrb	r2, [r3, #0]
   3c758:	5cba      	ldrb	r2, [r7, r2]
   3c75a:	0712      	lsls	r2, r2, #28
   3c75c:	d442      	bmi.n	3c7e4 <__ssvfiscanf_r+0x27c>
   3c75e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3c760:	2b02      	cmp	r3, #2
   3c762:	dc51      	bgt.n	3c808 <__ssvfiscanf_r+0x2a0>
   3c764:	466b      	mov	r3, sp
   3c766:	4622      	mov	r2, r4
   3c768:	a941      	add	r1, sp, #260	; 0x104
   3c76a:	4630      	mov	r0, r6
   3c76c:	f000 f878 	bl	3c860 <_scanf_chars>
   3c770:	2801      	cmp	r0, #1
   3c772:	d070      	beq.n	3c856 <__ssvfiscanf_r+0x2ee>
   3c774:	2802      	cmp	r0, #2
   3c776:	f47f af1d 	bne.w	3c5b4 <__ssvfiscanf_r+0x4c>
   3c77a:	e7cf      	b.n	3c71c <__ssvfiscanf_r+0x1b4>
   3c77c:	220a      	movs	r2, #10
   3c77e:	e7dd      	b.n	3c73c <__ssvfiscanf_r+0x1d4>
   3c780:	2300      	movs	r3, #0
   3c782:	9342      	str	r3, [sp, #264]	; 0x108
   3c784:	2303      	movs	r3, #3
   3c786:	e7de      	b.n	3c746 <__ssvfiscanf_r+0x1de>
   3c788:	2308      	movs	r3, #8
   3c78a:	9342      	str	r3, [sp, #264]	; 0x108
   3c78c:	2304      	movs	r3, #4
   3c78e:	e7da      	b.n	3c746 <__ssvfiscanf_r+0x1de>
   3c790:	4629      	mov	r1, r5
   3c792:	4640      	mov	r0, r8
   3c794:	f006 f860 	bl	42858 <__sccl>
   3c798:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c79a:	4605      	mov	r5, r0
   3c79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c7a0:	9341      	str	r3, [sp, #260]	; 0x104
   3c7a2:	2301      	movs	r3, #1
   3c7a4:	e7cf      	b.n	3c746 <__ssvfiscanf_r+0x1de>
   3c7a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c7ac:	9341      	str	r3, [sp, #260]	; 0x104
   3c7ae:	2300      	movs	r3, #0
   3c7b0:	e7c9      	b.n	3c746 <__ssvfiscanf_r+0x1de>
   3c7b2:	2302      	movs	r3, #2
   3c7b4:	e7c7      	b.n	3c746 <__ssvfiscanf_r+0x1de>
   3c7b6:	9841      	ldr	r0, [sp, #260]	; 0x104
   3c7b8:	06c3      	lsls	r3, r0, #27
   3c7ba:	f53f aefb 	bmi.w	3c5b4 <__ssvfiscanf_r+0x4c>
   3c7be:	9b00      	ldr	r3, [sp, #0]
   3c7c0:	f010 0f01 	tst.w	r0, #1
   3c7c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c7c6:	f103 0104 	add.w	r1, r3, #4
   3c7ca:	9100      	str	r1, [sp, #0]
   3c7cc:	681b      	ldr	r3, [r3, #0]
   3c7ce:	bf14      	ite	ne
   3c7d0:	801a      	strhne	r2, [r3, #0]
   3c7d2:	601a      	streq	r2, [r3, #0]
   3c7d4:	e6ee      	b.n	3c5b4 <__ssvfiscanf_r+0x4c>
   3c7d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c7d8:	4621      	mov	r1, r4
   3c7da:	4630      	mov	r0, r6
   3c7dc:	4798      	blx	r3
   3c7de:	2800      	cmp	r0, #0
   3c7e0:	d0b5      	beq.n	3c74e <__ssvfiscanf_r+0x1e6>
   3c7e2:	e79b      	b.n	3c71c <__ssvfiscanf_r+0x1b4>
   3c7e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c7e6:	3201      	adds	r2, #1
   3c7e8:	9245      	str	r2, [sp, #276]	; 0x114
   3c7ea:	6862      	ldr	r2, [r4, #4]
   3c7ec:	3a01      	subs	r2, #1
   3c7ee:	2a00      	cmp	r2, #0
   3c7f0:	6062      	str	r2, [r4, #4]
   3c7f2:	dd02      	ble.n	3c7fa <__ssvfiscanf_r+0x292>
   3c7f4:	3301      	adds	r3, #1
   3c7f6:	6023      	str	r3, [r4, #0]
   3c7f8:	e7ac      	b.n	3c754 <__ssvfiscanf_r+0x1ec>
   3c7fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c7fc:	4621      	mov	r1, r4
   3c7fe:	4630      	mov	r0, r6
   3c800:	4798      	blx	r3
   3c802:	2800      	cmp	r0, #0
   3c804:	d0a6      	beq.n	3c754 <__ssvfiscanf_r+0x1ec>
   3c806:	e789      	b.n	3c71c <__ssvfiscanf_r+0x1b4>
   3c808:	2b04      	cmp	r3, #4
   3c80a:	dc0f      	bgt.n	3c82c <__ssvfiscanf_r+0x2c4>
   3c80c:	466b      	mov	r3, sp
   3c80e:	4622      	mov	r2, r4
   3c810:	a941      	add	r1, sp, #260	; 0x104
   3c812:	4630      	mov	r0, r6
   3c814:	f000 f87e 	bl	3c914 <_scanf_i>
   3c818:	e7aa      	b.n	3c770 <__ssvfiscanf_r+0x208>
   3c81a:	bf00      	nop
   3c81c:	0004c62f 	.word	0x0004c62f
   3c820:	000427a5 	.word	0x000427a5
   3c824:	0004281f 	.word	0x0004281f
   3c828:	0004c735 	.word	0x0004c735
   3c82c:	4b0b      	ldr	r3, [pc, #44]	; (3c85c <__ssvfiscanf_r+0x2f4>)
   3c82e:	2b00      	cmp	r3, #0
   3c830:	f43f aec0 	beq.w	3c5b4 <__ssvfiscanf_r+0x4c>
   3c834:	466b      	mov	r3, sp
   3c836:	4622      	mov	r2, r4
   3c838:	a941      	add	r1, sp, #260	; 0x104
   3c83a:	4630      	mov	r0, r6
   3c83c:	e000      	b.n	3c840 <__ssvfiscanf_r+0x2d8>
   3c83e:	bf00      	nop
   3c840:	e796      	b.n	3c770 <__ssvfiscanf_r+0x208>
   3c842:	89a3      	ldrh	r3, [r4, #12]
   3c844:	f013 0f40 	tst.w	r3, #64	; 0x40
   3c848:	bf18      	it	ne
   3c84a:	f04f 30ff 	movne.w	r0, #4294967295
   3c84e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   3c852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c856:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c858:	e7f9      	b.n	3c84e <__ssvfiscanf_r+0x2e6>
   3c85a:	bf00      	nop
   3c85c:	00000000 	.word	0x00000000

0003c860 <_scanf_chars>:
   3c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c864:	4615      	mov	r5, r2
   3c866:	688a      	ldr	r2, [r1, #8]
   3c868:	4680      	mov	r8, r0
   3c86a:	460c      	mov	r4, r1
   3c86c:	b932      	cbnz	r2, 3c87c <_scanf_chars+0x1c>
   3c86e:	698a      	ldr	r2, [r1, #24]
   3c870:	2a00      	cmp	r2, #0
   3c872:	bf0c      	ite	eq
   3c874:	2201      	moveq	r2, #1
   3c876:	f04f 32ff 	movne.w	r2, #4294967295
   3c87a:	608a      	str	r2, [r1, #8]
   3c87c:	6822      	ldr	r2, [r4, #0]
   3c87e:	2700      	movs	r7, #0
   3c880:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3c910 <_scanf_chars+0xb0>
   3c884:	06d1      	lsls	r1, r2, #27
   3c886:	bf5f      	itttt	pl
   3c888:	681a      	ldrpl	r2, [r3, #0]
   3c88a:	1d11      	addpl	r1, r2, #4
   3c88c:	6019      	strpl	r1, [r3, #0]
   3c88e:	6816      	ldrpl	r6, [r2, #0]
   3c890:	69a0      	ldr	r0, [r4, #24]
   3c892:	b188      	cbz	r0, 3c8b8 <_scanf_chars+0x58>
   3c894:	2801      	cmp	r0, #1
   3c896:	d107      	bne.n	3c8a8 <_scanf_chars+0x48>
   3c898:	682a      	ldr	r2, [r5, #0]
   3c89a:	7811      	ldrb	r1, [r2, #0]
   3c89c:	6962      	ldr	r2, [r4, #20]
   3c89e:	5c52      	ldrb	r2, [r2, r1]
   3c8a0:	b952      	cbnz	r2, 3c8b8 <_scanf_chars+0x58>
   3c8a2:	2f00      	cmp	r7, #0
   3c8a4:	d031      	beq.n	3c90a <_scanf_chars+0xaa>
   3c8a6:	e022      	b.n	3c8ee <_scanf_chars+0x8e>
   3c8a8:	2802      	cmp	r0, #2
   3c8aa:	d120      	bne.n	3c8ee <_scanf_chars+0x8e>
   3c8ac:	682b      	ldr	r3, [r5, #0]
   3c8ae:	781b      	ldrb	r3, [r3, #0]
   3c8b0:	f813 3009 	ldrb.w	r3, [r3, r9]
   3c8b4:	071b      	lsls	r3, r3, #28
   3c8b6:	d41a      	bmi.n	3c8ee <_scanf_chars+0x8e>
   3c8b8:	6823      	ldr	r3, [r4, #0]
   3c8ba:	3701      	adds	r7, #1
   3c8bc:	06da      	lsls	r2, r3, #27
   3c8be:	bf5e      	ittt	pl
   3c8c0:	682b      	ldrpl	r3, [r5, #0]
   3c8c2:	781b      	ldrbpl	r3, [r3, #0]
   3c8c4:	f806 3b01 	strbpl.w	r3, [r6], #1
   3c8c8:	682a      	ldr	r2, [r5, #0]
   3c8ca:	686b      	ldr	r3, [r5, #4]
   3c8cc:	3201      	adds	r2, #1
   3c8ce:	3b01      	subs	r3, #1
   3c8d0:	602a      	str	r2, [r5, #0]
   3c8d2:	68a2      	ldr	r2, [r4, #8]
   3c8d4:	606b      	str	r3, [r5, #4]
   3c8d6:	3a01      	subs	r2, #1
   3c8d8:	60a2      	str	r2, [r4, #8]
   3c8da:	b142      	cbz	r2, 3c8ee <_scanf_chars+0x8e>
   3c8dc:	2b00      	cmp	r3, #0
   3c8de:	dcd7      	bgt.n	3c890 <_scanf_chars+0x30>
   3c8e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c8e4:	4629      	mov	r1, r5
   3c8e6:	4640      	mov	r0, r8
   3c8e8:	4798      	blx	r3
   3c8ea:	2800      	cmp	r0, #0
   3c8ec:	d0d0      	beq.n	3c890 <_scanf_chars+0x30>
   3c8ee:	6823      	ldr	r3, [r4, #0]
   3c8f0:	f013 0310 	ands.w	r3, r3, #16
   3c8f4:	d105      	bne.n	3c902 <_scanf_chars+0xa2>
   3c8f6:	68e2      	ldr	r2, [r4, #12]
   3c8f8:	3201      	adds	r2, #1
   3c8fa:	60e2      	str	r2, [r4, #12]
   3c8fc:	69a2      	ldr	r2, [r4, #24]
   3c8fe:	b102      	cbz	r2, 3c902 <_scanf_chars+0xa2>
   3c900:	7033      	strb	r3, [r6, #0]
   3c902:	6923      	ldr	r3, [r4, #16]
   3c904:	2000      	movs	r0, #0
   3c906:	443b      	add	r3, r7
   3c908:	6123      	str	r3, [r4, #16]
   3c90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c90e:	bf00      	nop
   3c910:	0004c62f 	.word	0x0004c62f

0003c914 <_scanf_i>:
   3c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c918:	4698      	mov	r8, r3
   3c91a:	b087      	sub	sp, #28
   3c91c:	4b75      	ldr	r3, [pc, #468]	; (3caf4 <_scanf_i+0x1e0>)
   3c91e:	460c      	mov	r4, r1
   3c920:	4682      	mov	sl, r0
   3c922:	4616      	mov	r6, r2
   3c924:	4627      	mov	r7, r4
   3c926:	f04f 0b00 	mov.w	fp, #0
   3c92a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3c92e:	ab03      	add	r3, sp, #12
   3c930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3c934:	4b70      	ldr	r3, [pc, #448]	; (3caf8 <_scanf_i+0x1e4>)
   3c936:	69a1      	ldr	r1, [r4, #24]
   3c938:	4a70      	ldr	r2, [pc, #448]	; (3cafc <_scanf_i+0x1e8>)
   3c93a:	2903      	cmp	r1, #3
   3c93c:	bf18      	it	ne
   3c93e:	461a      	movne	r2, r3
   3c940:	68a3      	ldr	r3, [r4, #8]
   3c942:	9201      	str	r2, [sp, #4]
   3c944:	1e5a      	subs	r2, r3, #1
   3c946:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3c94a:	bf89      	itett	hi
   3c94c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3c950:	f04f 0900 	movls.w	r9, #0
   3c954:	eb03 0905 	addhi.w	r9, r3, r5
   3c958:	f240 135d 	movwhi	r3, #349	; 0x15d
   3c95c:	bf88      	it	hi
   3c95e:	60a3      	strhi	r3, [r4, #8]
   3c960:	f857 3b1c 	ldr.w	r3, [r7], #28
   3c964:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3c968:	463d      	mov	r5, r7
   3c96a:	6023      	str	r3, [r4, #0]
   3c96c:	6831      	ldr	r1, [r6, #0]
   3c96e:	ab03      	add	r3, sp, #12
   3c970:	2202      	movs	r2, #2
   3c972:	7809      	ldrb	r1, [r1, #0]
   3c974:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3c978:	f005 f8b4 	bl	41ae4 <memchr>
   3c97c:	b328      	cbz	r0, 3c9ca <_scanf_i+0xb6>
   3c97e:	f1bb 0f01 	cmp.w	fp, #1
   3c982:	d159      	bne.n	3ca38 <_scanf_i+0x124>
   3c984:	6862      	ldr	r2, [r4, #4]
   3c986:	b92a      	cbnz	r2, 3c994 <_scanf_i+0x80>
   3c988:	6822      	ldr	r2, [r4, #0]
   3c98a:	2308      	movs	r3, #8
   3c98c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c990:	6063      	str	r3, [r4, #4]
   3c992:	6022      	str	r2, [r4, #0]
   3c994:	6822      	ldr	r2, [r4, #0]
   3c996:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3c99a:	6022      	str	r2, [r4, #0]
   3c99c:	68a2      	ldr	r2, [r4, #8]
   3c99e:	1e51      	subs	r1, r2, #1
   3c9a0:	60a1      	str	r1, [r4, #8]
   3c9a2:	b192      	cbz	r2, 3c9ca <_scanf_i+0xb6>
   3c9a4:	6832      	ldr	r2, [r6, #0]
   3c9a6:	1c51      	adds	r1, r2, #1
   3c9a8:	6031      	str	r1, [r6, #0]
   3c9aa:	7812      	ldrb	r2, [r2, #0]
   3c9ac:	f805 2b01 	strb.w	r2, [r5], #1
   3c9b0:	6872      	ldr	r2, [r6, #4]
   3c9b2:	3a01      	subs	r2, #1
   3c9b4:	2a00      	cmp	r2, #0
   3c9b6:	6072      	str	r2, [r6, #4]
   3c9b8:	dc07      	bgt.n	3c9ca <_scanf_i+0xb6>
   3c9ba:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3c9be:	4631      	mov	r1, r6
   3c9c0:	4650      	mov	r0, sl
   3c9c2:	4790      	blx	r2
   3c9c4:	2800      	cmp	r0, #0
   3c9c6:	f040 8085 	bne.w	3cad4 <_scanf_i+0x1c0>
   3c9ca:	f10b 0b01 	add.w	fp, fp, #1
   3c9ce:	f1bb 0f03 	cmp.w	fp, #3
   3c9d2:	d1cb      	bne.n	3c96c <_scanf_i+0x58>
   3c9d4:	6863      	ldr	r3, [r4, #4]
   3c9d6:	b90b      	cbnz	r3, 3c9dc <_scanf_i+0xc8>
   3c9d8:	230a      	movs	r3, #10
   3c9da:	6063      	str	r3, [r4, #4]
   3c9dc:	6863      	ldr	r3, [r4, #4]
   3c9de:	f04f 0b00 	mov.w	fp, #0
   3c9e2:	4947      	ldr	r1, [pc, #284]	; (3cb00 <_scanf_i+0x1ec>)
   3c9e4:	6960      	ldr	r0, [r4, #20]
   3c9e6:	1ac9      	subs	r1, r1, r3
   3c9e8:	f005 ff36 	bl	42858 <__sccl>
   3c9ec:	68a3      	ldr	r3, [r4, #8]
   3c9ee:	6822      	ldr	r2, [r4, #0]
   3c9f0:	2b00      	cmp	r3, #0
   3c9f2:	d03d      	beq.n	3ca70 <_scanf_i+0x15c>
   3c9f4:	6831      	ldr	r1, [r6, #0]
   3c9f6:	6960      	ldr	r0, [r4, #20]
   3c9f8:	f891 c000 	ldrb.w	ip, [r1]
   3c9fc:	f810 000c 	ldrb.w	r0, [r0, ip]
   3ca00:	2800      	cmp	r0, #0
   3ca02:	d035      	beq.n	3ca70 <_scanf_i+0x15c>
   3ca04:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3ca08:	d124      	bne.n	3ca54 <_scanf_i+0x140>
   3ca0a:	0510      	lsls	r0, r2, #20
   3ca0c:	d522      	bpl.n	3ca54 <_scanf_i+0x140>
   3ca0e:	f10b 0b01 	add.w	fp, fp, #1
   3ca12:	f1b9 0f00 	cmp.w	r9, #0
   3ca16:	d003      	beq.n	3ca20 <_scanf_i+0x10c>
   3ca18:	3301      	adds	r3, #1
   3ca1a:	f109 39ff 	add.w	r9, r9, #4294967295
   3ca1e:	60a3      	str	r3, [r4, #8]
   3ca20:	6873      	ldr	r3, [r6, #4]
   3ca22:	3b01      	subs	r3, #1
   3ca24:	2b00      	cmp	r3, #0
   3ca26:	6073      	str	r3, [r6, #4]
   3ca28:	dd1b      	ble.n	3ca62 <_scanf_i+0x14e>
   3ca2a:	6833      	ldr	r3, [r6, #0]
   3ca2c:	3301      	adds	r3, #1
   3ca2e:	6033      	str	r3, [r6, #0]
   3ca30:	68a3      	ldr	r3, [r4, #8]
   3ca32:	3b01      	subs	r3, #1
   3ca34:	60a3      	str	r3, [r4, #8]
   3ca36:	e7d9      	b.n	3c9ec <_scanf_i+0xd8>
   3ca38:	f1bb 0f02 	cmp.w	fp, #2
   3ca3c:	d1ae      	bne.n	3c99c <_scanf_i+0x88>
   3ca3e:	6822      	ldr	r2, [r4, #0]
   3ca40:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3ca44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3ca48:	d1bf      	bne.n	3c9ca <_scanf_i+0xb6>
   3ca4a:	2310      	movs	r3, #16
   3ca4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3ca50:	6063      	str	r3, [r4, #4]
   3ca52:	e7a2      	b.n	3c99a <_scanf_i+0x86>
   3ca54:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3ca58:	6022      	str	r2, [r4, #0]
   3ca5a:	780b      	ldrb	r3, [r1, #0]
   3ca5c:	f805 3b01 	strb.w	r3, [r5], #1
   3ca60:	e7de      	b.n	3ca20 <_scanf_i+0x10c>
   3ca62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3ca66:	4631      	mov	r1, r6
   3ca68:	4650      	mov	r0, sl
   3ca6a:	4798      	blx	r3
   3ca6c:	2800      	cmp	r0, #0
   3ca6e:	d0df      	beq.n	3ca30 <_scanf_i+0x11c>
   3ca70:	6823      	ldr	r3, [r4, #0]
   3ca72:	05db      	lsls	r3, r3, #23
   3ca74:	d50d      	bpl.n	3ca92 <_scanf_i+0x17e>
   3ca76:	42bd      	cmp	r5, r7
   3ca78:	d909      	bls.n	3ca8e <_scanf_i+0x17a>
   3ca7a:	f105 39ff 	add.w	r9, r5, #4294967295
   3ca7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3ca82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3ca86:	4632      	mov	r2, r6
   3ca88:	464d      	mov	r5, r9
   3ca8a:	4650      	mov	r0, sl
   3ca8c:	4798      	blx	r3
   3ca8e:	42bd      	cmp	r5, r7
   3ca90:	d02d      	beq.n	3caee <_scanf_i+0x1da>
   3ca92:	6822      	ldr	r2, [r4, #0]
   3ca94:	f012 0210 	ands.w	r2, r2, #16
   3ca98:	d113      	bne.n	3cac2 <_scanf_i+0x1ae>
   3ca9a:	4639      	mov	r1, r7
   3ca9c:	702a      	strb	r2, [r5, #0]
   3ca9e:	4650      	mov	r0, sl
   3caa0:	6863      	ldr	r3, [r4, #4]
   3caa2:	9e01      	ldr	r6, [sp, #4]
   3caa4:	47b0      	blx	r6
   3caa6:	6821      	ldr	r1, [r4, #0]
   3caa8:	f8d8 3000 	ldr.w	r3, [r8]
   3caac:	f011 0f20 	tst.w	r1, #32
   3cab0:	d013      	beq.n	3cada <_scanf_i+0x1c6>
   3cab2:	1d1a      	adds	r2, r3, #4
   3cab4:	f8c8 2000 	str.w	r2, [r8]
   3cab8:	681b      	ldr	r3, [r3, #0]
   3caba:	6018      	str	r0, [r3, #0]
   3cabc:	68e3      	ldr	r3, [r4, #12]
   3cabe:	3301      	adds	r3, #1
   3cac0:	60e3      	str	r3, [r4, #12]
   3cac2:	1bed      	subs	r5, r5, r7
   3cac4:	2000      	movs	r0, #0
   3cac6:	44ab      	add	fp, r5
   3cac8:	6925      	ldr	r5, [r4, #16]
   3caca:	445d      	add	r5, fp
   3cacc:	6125      	str	r5, [r4, #16]
   3cace:	b007      	add	sp, #28
   3cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cad4:	f04f 0b00 	mov.w	fp, #0
   3cad8:	e7ca      	b.n	3ca70 <_scanf_i+0x15c>
   3cada:	1d1a      	adds	r2, r3, #4
   3cadc:	f011 0f01 	tst.w	r1, #1
   3cae0:	f8c8 2000 	str.w	r2, [r8]
   3cae4:	681b      	ldr	r3, [r3, #0]
   3cae6:	bf14      	ite	ne
   3cae8:	8018      	strhne	r0, [r3, #0]
   3caea:	6018      	streq	r0, [r3, #0]
   3caec:	e7e6      	b.n	3cabc <_scanf_i+0x1a8>
   3caee:	2001      	movs	r0, #1
   3caf0:	e7ed      	b.n	3cace <_scanf_i+0x1ba>
   3caf2:	bf00      	nop
   3caf4:	00042f84 	.word	0x00042f84
   3caf8:	00042007 	.word	0x00042007
   3cafc:	00042003 	.word	0x00042003
   3cb00:	0004c92f 	.word	0x0004c92f

0003cb04 <_read_r>:
   3cb04:	b538      	push	{r3, r4, r5, lr}
   3cb06:	4604      	mov	r4, r0
   3cb08:	4d06      	ldr	r5, [pc, #24]	; (3cb24 <_read_r+0x20>)
   3cb0a:	4608      	mov	r0, r1
   3cb0c:	4611      	mov	r1, r2
   3cb0e:	2200      	movs	r2, #0
   3cb10:	602a      	str	r2, [r5, #0]
   3cb12:	461a      	mov	r2, r3
   3cb14:	f001 f9ae 	bl	3de74 <_read>
   3cb18:	1c43      	adds	r3, r0, #1
   3cb1a:	d102      	bne.n	3cb22 <_read_r+0x1e>
   3cb1c:	682b      	ldr	r3, [r5, #0]
   3cb1e:	b103      	cbz	r3, 3cb22 <_read_r+0x1e>
   3cb20:	6023      	str	r3, [r4, #0]
   3cb22:	bd38      	pop	{r3, r4, r5, pc}
   3cb24:	2001a580 	.word	0x2001a580

0003cb28 <nan>:
   3cb28:	2000      	movs	r0, #0
   3cb2a:	4901      	ldr	r1, [pc, #4]	; (3cb30 <nan+0x8>)
   3cb2c:	4770      	bx	lr
   3cb2e:	bf00      	nop
   3cb30:	7ff80000 	.word	0x7ff80000

0003cb34 <raise>:
   3cb34:	4b02      	ldr	r3, [pc, #8]	; (3cb40 <raise+0xc>)
   3cb36:	4601      	mov	r1, r0
   3cb38:	6818      	ldr	r0, [r3, #0]
   3cb3a:	f005 bec5 	b.w	428c8 <_raise_r>
   3cb3e:	bf00      	nop
   3cb40:	20014a74 	.word	0x20014a74

0003cb44 <_kill_r>:
   3cb44:	b538      	push	{r3, r4, r5, lr}
   3cb46:	2300      	movs	r3, #0
   3cb48:	4d06      	ldr	r5, [pc, #24]	; (3cb64 <_kill_r+0x20>)
   3cb4a:	4604      	mov	r4, r0
   3cb4c:	4608      	mov	r0, r1
   3cb4e:	4611      	mov	r1, r2
   3cb50:	602b      	str	r3, [r5, #0]
   3cb52:	f001 f9a1 	bl	3de98 <_kill>
   3cb56:	1c43      	adds	r3, r0, #1
   3cb58:	d102      	bne.n	3cb60 <_kill_r+0x1c>
   3cb5a:	682b      	ldr	r3, [r5, #0]
   3cb5c:	b103      	cbz	r3, 3cb60 <_kill_r+0x1c>
   3cb5e:	6023      	str	r3, [r4, #0]
   3cb60:	bd38      	pop	{r3, r4, r5, pc}
   3cb62:	bf00      	nop
   3cb64:	2001a580 	.word	0x2001a580

0003cb68 <_fstat_r>:
   3cb68:	b538      	push	{r3, r4, r5, lr}
   3cb6a:	2300      	movs	r3, #0
   3cb6c:	4d06      	ldr	r5, [pc, #24]	; (3cb88 <_fstat_r+0x20>)
   3cb6e:	4604      	mov	r4, r0
   3cb70:	4608      	mov	r0, r1
   3cb72:	4611      	mov	r1, r2
   3cb74:	602b      	str	r3, [r5, #0]
   3cb76:	f001 f993 	bl	3dea0 <_fstat>
   3cb7a:	1c43      	adds	r3, r0, #1
   3cb7c:	d102      	bne.n	3cb84 <_fstat_r+0x1c>
   3cb7e:	682b      	ldr	r3, [r5, #0]
   3cb80:	b103      	cbz	r3, 3cb84 <_fstat_r+0x1c>
   3cb82:	6023      	str	r3, [r4, #0]
   3cb84:	bd38      	pop	{r3, r4, r5, pc}
   3cb86:	bf00      	nop
   3cb88:	2001a580 	.word	0x2001a580

0003cb8c <_isatty_r>:
   3cb8c:	b538      	push	{r3, r4, r5, lr}
   3cb8e:	2300      	movs	r3, #0
   3cb90:	4d05      	ldr	r5, [pc, #20]	; (3cba8 <_isatty_r+0x1c>)
   3cb92:	4604      	mov	r4, r0
   3cb94:	4608      	mov	r0, r1
   3cb96:	602b      	str	r3, [r5, #0]
   3cb98:	f001 f979 	bl	3de8e <_isatty>
   3cb9c:	1c43      	adds	r3, r0, #1
   3cb9e:	d102      	bne.n	3cba6 <_isatty_r+0x1a>
   3cba0:	682b      	ldr	r3, [r5, #0]
   3cba2:	b103      	cbz	r3, 3cba6 <_isatty_r+0x1a>
   3cba4:	6023      	str	r3, [r4, #0]
   3cba6:	bd38      	pop	{r3, r4, r5, pc}
   3cba8:	2001a580 	.word	0x2001a580

0003cbac <app_thread_fn>:
{
   3cbac:	b508      	push	{r3, lr}
	(void)await_connection(K_FOREVER);
   3cbae:	f04f 30ff 	mov.w	r0, #4294967295
   3cbb2:	f04f 31ff 	mov.w	r1, #4294967295
   3cbb6:	f7e3 fd35 	bl	20624 <await_connection>
}
   3cbba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	main_application();
   3cbbe:	f7e3 bbf7 	b.w	203b0 <main_application>

0003cbc2 <msg_thread_fn>:
{
   3cbc2:	b508      	push	{r3, lr}
		(void)consume_device_message();
   3cbc4:	f7e3 fe10 	bl	207e8 <consume_device_message>
	while (true) {
   3cbc8:	e7fc      	b.n	3cbc4 <msg_thread_fn+0x2>

0003cbca <conn_thread_fn>:
	manage_connection();
   3cbca:	f7e3 be7f 	b.w	208cc <manage_connection>

0003cbce <pm_read>:
#include <drivers/i2c.h>

#include "particulate_matter.h"

bool pm_read(const struct device *dev_i2c, pm_data *data)
{
   3cbce:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    uint8_t pm_buffer[32] = {0};
   3cbd0:	221c      	movs	r2, #28
   3cbd2:	2500      	movs	r5, #0
{
   3cbd4:	b08f      	sub	sp, #60	; 0x3c
   3cbd6:	4606      	mov	r6, r0
   3cbd8:	460c      	mov	r4, r1
    uint8_t pm_buffer[32] = {0};
   3cbda:	eb0d 0002 	add.w	r0, sp, r2
   3cbde:	4629      	mov	r1, r5
   3cbe0:	9506      	str	r5, [sp, #24]
   3cbe2:	f004 ffbd 	bl	41b60 <memset>
	msg[1].len = num_read;
   3cbe6:	2320      	movs	r3, #32
   3cbe8:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3cbea:	2307      	movs	r3, #7
	msg[0].len = num_write;
   3cbec:	e9cd 5500 	strd	r5, r5, [sp]
	msg[0].flags = I2C_MSG_WRITE;
   3cbf0:	f88d 5008 	strb.w	r5, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   3cbf4:	ad06      	add	r5, sp, #24
   3cbf6:	9503      	str	r5, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3cbf8:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3cbfc:	68b3      	ldr	r3, [r6, #8]
   3cbfe:	2202      	movs	r2, #2
   3cc00:	689f      	ldr	r7, [r3, #8]
   3cc02:	4669      	mov	r1, sp
   3cc04:	2312      	movs	r3, #18
   3cc06:	4630      	mov	r0, r6
   3cc08:	47b8      	blx	r7


    ret = i2c_write_read(dev_i2c, PM_ADDR, PM_SC1, 0, &pm_buffer, 32);
    if (ret != 0)
   3cc0a:	2800      	cmp	r0, #0
   3cc0c:	d138      	bne.n	3cc80 <pm_read+0xb2>
        // printf("Failed to write/read I2C device address (err %i)\n", ret);
        return true;
    }

    // Check that start byte is correct!
    if (pm_buffer[0] != 0x42)
   3cc0e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   3cc12:	2b42      	cmp	r3, #66	; 0x42
   3cc14:	d134      	bne.n	3cc80 <pm_read+0xb2>
   3cc16:	462b      	mov	r3, r5
   3cc18:	466a      	mov	r2, sp
   3cc1a:	2101      	movs	r1, #1

    uint16_t buffer_u16[12];
    for (uint8_t i = 0; i < 12; i++)
    {
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   3cc1c:	789d      	ldrb	r5, [r3, #2]
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
   3cc1e:	78d8      	ldrb	r0, [r3, #3]
    for (uint8_t i = 0; i < 12; i++)
   3cc20:	3101      	adds	r1, #1
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   3cc22:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    for (uint8_t i = 0; i < 12; i++)
   3cc26:	290d      	cmp	r1, #13
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   3cc28:	f822 0b02 	strh.w	r0, [r2], #2
    for (uint8_t i = 0; i < 12; i++)
   3cc2c:	f103 0302 	add.w	r3, r3, #2
   3cc30:	d1f4      	bne.n	3cc1c <pm_read+0x4e>
    data->particles_10um =  buffer_u16[8];
    data->particles_25um =  buffer_u16[9];
    data->particles_50um =  buffer_u16[10];
    data->particles_100um =  buffer_u16[11];

    return false;
   3cc32:	2000      	movs	r0, #0
    data->pm10_standard = buffer_u16[0];
   3cc34:	f8bd 3000 	ldrh.w	r3, [sp]
   3cc38:	8023      	strh	r3, [r4, #0]
    data->pm25_standard = buffer_u16[1];
   3cc3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   3cc3e:	8063      	strh	r3, [r4, #2]
    data->pm100_standard = buffer_u16[2];
   3cc40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   3cc44:	80a3      	strh	r3, [r4, #4]
    data->pm10_env = buffer_u16[3];
   3cc46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   3cc4a:	80e3      	strh	r3, [r4, #6]
    data->pm25_env = buffer_u16[4];
   3cc4c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   3cc50:	8123      	strh	r3, [r4, #8]
    data->pm100_env = buffer_u16[5];
   3cc52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3cc56:	8163      	strh	r3, [r4, #10]
    data->particles_03um = buffer_u16[6]; 
   3cc58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   3cc5c:	81a3      	strh	r3, [r4, #12]
    data->particles_05um =  buffer_u16[7];
   3cc5e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   3cc62:	81e3      	strh	r3, [r4, #14]
    data->particles_10um =  buffer_u16[8];
   3cc64:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   3cc68:	8223      	strh	r3, [r4, #16]
    data->particles_25um =  buffer_u16[9];
   3cc6a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   3cc6e:	8263      	strh	r3, [r4, #18]
    data->particles_50um =  buffer_u16[10];
   3cc70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3cc74:	82a3      	strh	r3, [r4, #20]
    data->particles_100um =  buffer_u16[11];
   3cc76:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   3cc7a:	82e3      	strh	r3, [r4, #22]
}
   3cc7c:	b00f      	add	sp, #60	; 0x3c
   3cc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return true;
   3cc80:	2001      	movs	r0, #1
   3cc82:	e7fb      	b.n	3cc7c <pm_read+0xae>

0003cc84 <i2c_transfer.constprop.0>:


extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
   3cc84:	b410      	push	{r4}
   3cc86:	6883      	ldr	r3, [r0, #8]
   3cc88:	689c      	ldr	r4, [r3, #8]
   3cc8a:	2378      	movs	r3, #120	; 0x78
   3cc8c:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   3cc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   3cc92:	4760      	bx	ip

0003cc94 <getGasData>:
{
   3cc94:	b510      	push	{r4, lr}
   3cc96:	460c      	mov	r4, r1
    getSensorData(dev_i2c, dfr_data);
   3cc98:	f7e4 f874 	bl	20d84 <getSensorData>
    dfr_data->no2 = getNitrogenDioxide(dfr_data);
   3cc9c:	4620      	mov	r0, r4
   3cc9e:	f7e0 fadb 	bl	1d258 <getNitrogenDioxide>
   3cca2:	6020      	str	r0, [r4, #0]
    dfr_data->co = getCarbonMonoxide(dfr_data);
   3cca4:	4620      	mov	r0, r4
   3cca6:	f7e0 fb23 	bl	1d2f0 <getCarbonMonoxide>
   3ccaa:	6060      	str	r0, [r4, #4]
}
   3ccac:	2000      	movs	r0, #0
   3ccae:	bd10      	pop	{r4, pc}

0003ccb0 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3ccb0:	b40c      	push	{r2, r3}
   3ccb2:	4603      	mov	r3, r0
   3ccb4:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   3ccb6:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3ccb8:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3ccba:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   3ccbc:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   3ccc0:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3ccc2:	4798      	blx	r3
	va_end(args);

	return res;
}
   3ccc4:	b003      	add	sp, #12
   3ccc6:	f85d eb04 	ldr.w	lr, [sp], #4
   3ccca:	b002      	add	sp, #8
   3cccc:	4770      	bx	lr

0003ccce <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   3ccce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3ccd2:	b2db      	uxtb	r3, r3
   3ccd4:	2b09      	cmp	r3, #9
   3ccd6:	d802      	bhi.n	3ccde <char2hex+0x10>
		*x = c - '0';
   3ccd8:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   3ccda:	2000      	movs	r0, #0
   3ccdc:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   3ccde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3cce2:	2b05      	cmp	r3, #5
   3cce4:	d802      	bhi.n	3ccec <char2hex+0x1e>
		*x = c - 'a' + 10;
   3cce6:	3857      	subs	r0, #87	; 0x57
   3cce8:	7008      	strb	r0, [r1, #0]
   3ccea:	e7f6      	b.n	3ccda <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   3ccec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   3ccf0:	2b05      	cmp	r3, #5
   3ccf2:	d801      	bhi.n	3ccf8 <char2hex+0x2a>
		*x = c - 'A' + 10;
   3ccf4:	3837      	subs	r0, #55	; 0x37
   3ccf6:	e7f7      	b.n	3cce8 <char2hex+0x1a>
		return -EINVAL;
   3ccf8:	f06f 0015 	mvn.w	r0, #21
}
   3ccfc:	4770      	bx	lr

0003ccfe <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   3ccfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3cd00:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   3cd02:	f001 0001 	and.w	r0, r1, #1
   3cd06:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   3cd0a:	429d      	cmp	r5, r3
   3cd0c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   3cd10:	d903      	bls.n	3cd1a <hex2bin+0x1c>
		return 0;
   3cd12:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   3cd14:	4628      	mov	r0, r5
   3cd16:	b003      	add	sp, #12
   3cd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   3cd1a:	b158      	cbz	r0, 3cd34 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   3cd1c:	7820      	ldrb	r0, [r4, #0]
   3cd1e:	f10d 0107 	add.w	r1, sp, #7
   3cd22:	f7ff ffd4 	bl	3ccce <char2hex>
   3cd26:	2800      	cmp	r0, #0
   3cd28:	dbf3      	blt.n	3cd12 <hex2bin+0x14>
		buf[0] = dec;
   3cd2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   3cd2e:	3401      	adds	r4, #1
		buf[0] = dec;
   3cd30:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3cd34:	3401      	adds	r4, #1
   3cd36:	4416      	add	r6, r2
   3cd38:	42b2      	cmp	r2, r6
   3cd3a:	d0eb      	beq.n	3cd14 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   3cd3c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3cd40:	f10d 0107 	add.w	r1, sp, #7
   3cd44:	f7ff ffc3 	bl	3ccce <char2hex>
   3cd48:	2800      	cmp	r0, #0
   3cd4a:	dbe2      	blt.n	3cd12 <hex2bin+0x14>
		buf[i] = dec << 4;
   3cd4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3cd50:	011b      	lsls	r3, r3, #4
   3cd52:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   3cd54:	f814 0b02 	ldrb.w	r0, [r4], #2
   3cd58:	f7ff ffb9 	bl	3ccce <char2hex>
   3cd5c:	2800      	cmp	r0, #0
   3cd5e:	dbd8      	blt.n	3cd12 <hex2bin+0x14>
		buf[i] += dec;
   3cd60:	7813      	ldrb	r3, [r2, #0]
   3cd62:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3cd66:	440b      	add	r3, r1
   3cd68:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3cd6c:	e7e4      	b.n	3cd38 <hex2bin+0x3a>

0003cd6e <sys_notify_validate>:
	if (notify == NULL) {
   3cd6e:	b140      	cbz	r0, 3cd82 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3cd70:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3cd72:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   3cd76:	2b02      	cmp	r3, #2
   3cd78:	d006      	beq.n	3cd88 <sys_notify_validate+0x1a>
   3cd7a:	2b03      	cmp	r3, #3
   3cd7c:	d004      	beq.n	3cd88 <sys_notify_validate+0x1a>
   3cd7e:	2b01      	cmp	r3, #1
   3cd80:	d005      	beq.n	3cd8e <sys_notify_validate+0x20>
		return -EINVAL;
   3cd82:	f06f 0015 	mvn.w	r0, #21
}
   3cd86:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   3cd88:	6803      	ldr	r3, [r0, #0]
   3cd8a:	2b00      	cmp	r3, #0
   3cd8c:	d0f9      	beq.n	3cd82 <sys_notify_validate+0x14>
		notify->result = 0;
   3cd8e:	2300      	movs	r3, #0
   3cd90:	6083      	str	r3, [r0, #8]
   3cd92:	4618      	mov	r0, r3
   3cd94:	4770      	bx	lr

0003cd96 <arch_printk_char_out>:
}
   3cd96:	2000      	movs	r0, #0
   3cd98:	4770      	bx	lr

0003cd9a <str_out>:
{
   3cd9a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3cd9c:	688a      	ldr	r2, [r1, #8]
   3cd9e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   3cda0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3cda2:	b114      	cbz	r4, 3cdaa <str_out+0x10>
   3cda4:	684b      	ldr	r3, [r1, #4]
   3cda6:	4293      	cmp	r3, r2
   3cda8:	dc01      	bgt.n	3cdae <str_out+0x14>
		ctx->count++;
   3cdaa:	608d      	str	r5, [r1, #8]
}
   3cdac:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   3cdae:	3b01      	subs	r3, #1
   3cdb0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3cdb2:	bf08      	it	eq
   3cdb4:	2200      	moveq	r2, #0
   3cdb6:	608d      	str	r5, [r1, #8]
   3cdb8:	bf0c      	ite	eq
   3cdba:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   3cdbc:	54a0      	strbne	r0, [r4, r2]
   3cdbe:	e7f5      	b.n	3cdac <str_out+0x12>

0003cdc0 <printk>:
{
   3cdc0:	b40f      	push	{r0, r1, r2, r3}
   3cdc2:	b507      	push	{r0, r1, r2, lr}
   3cdc4:	a904      	add	r1, sp, #16
   3cdc6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3cdca:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3cdcc:	f7e4 f982 	bl	210d4 <vprintk>
}
   3cdd0:	b003      	add	sp, #12
   3cdd2:	f85d eb04 	ldr.w	lr, [sp], #4
   3cdd6:	b004      	add	sp, #16
   3cdd8:	4770      	bx	lr

0003cdda <snprintk>:
{
   3cdda:	b40c      	push	{r2, r3}
   3cddc:	b507      	push	{r0, r1, r2, lr}
   3cdde:	ab04      	add	r3, sp, #16
   3cde0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3cde4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   3cde6:	f7e4 f983 	bl	210f0 <vsnprintk>
}
   3cdea:	b003      	add	sp, #12
   3cdec:	f85d eb04 	ldr.w	lr, [sp], #4
   3cdf0:	b002      	add	sp, #8
   3cdf2:	4770      	bx	lr

0003cdf4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3cdf4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3cdf6:	f013 0307 	ands.w	r3, r3, #7
   3cdfa:	d105      	bne.n	3ce08 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   3cdfc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   3cdfe:	2b00      	cmp	r3, #0
   3ce00:	bf0c      	ite	eq
   3ce02:	2000      	moveq	r0, #0
   3ce04:	2003      	movne	r0, #3
   3ce06:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   3ce08:	2b02      	cmp	r3, #2
   3ce0a:	d105      	bne.n	3ce18 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   3ce0c:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   3ce0e:	2b00      	cmp	r3, #0
   3ce10:	bf14      	ite	ne
   3ce12:	2000      	movne	r0, #0
   3ce14:	2004      	moveq	r0, #4
   3ce16:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   3ce18:	2b01      	cmp	r3, #1
   3ce1a:	d105      	bne.n	3ce28 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   3ce1c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   3ce1e:	2b00      	cmp	r3, #0
   3ce20:	bf0c      	ite	eq
   3ce22:	2000      	moveq	r0, #0
   3ce24:	2005      	movne	r0, #5
   3ce26:	4770      	bx	lr
	int evt = EVT_NOP;
   3ce28:	2000      	movs	r0, #0
}
   3ce2a:	4770      	bx	lr

0003ce2c <notify_one>:
{
   3ce2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3ce2e:	460d      	mov	r5, r1
   3ce30:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3ce32:	4619      	mov	r1, r3
   3ce34:	1d28      	adds	r0, r5, #4
{
   3ce36:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3ce38:	9300      	str	r3, [sp, #0]
   3ce3a:	f7e4 f911 	bl	21060 <sys_notify_finalize>
	if (cb) {
   3ce3e:	4604      	mov	r4, r0
   3ce40:	b140      	cbz	r0, 3ce54 <notify_one+0x28>
		cb(mgr, cli, state, res);
   3ce42:	e9dd 3200 	ldrd	r3, r2, [sp]
   3ce46:	4629      	mov	r1, r5
   3ce48:	4630      	mov	r0, r6
   3ce4a:	46a4      	mov	ip, r4
}
   3ce4c:	b002      	add	sp, #8
   3ce4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   3ce52:	4760      	bx	ip
}
   3ce54:	b002      	add	sp, #8
   3ce56:	bd70      	pop	{r4, r5, r6, pc}

0003ce58 <validate_args>:
{
   3ce58:	b510      	push	{r4, lr}
   3ce5a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   3ce5c:	b140      	cbz	r0, 3ce70 <validate_args+0x18>
   3ce5e:	b139      	cbz	r1, 3ce70 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   3ce60:	1d08      	adds	r0, r1, #4
   3ce62:	f7ff ff84 	bl	3cd6e <sys_notify_validate>
	if ((rv == 0)
   3ce66:	b928      	cbnz	r0, 3ce74 <validate_args+0x1c>
	    && ((cli->notify.flags
   3ce68:	68a3      	ldr	r3, [r4, #8]
   3ce6a:	f033 0303 	bics.w	r3, r3, #3
   3ce6e:	d001      	beq.n	3ce74 <validate_args+0x1c>
		rv = -EINVAL;
   3ce70:	f06f 0015 	mvn.w	r0, #21
}
   3ce74:	bd10      	pop	{r4, pc}

0003ce76 <onoff_manager_init>:
{
   3ce76:	b538      	push	{r3, r4, r5, lr}
   3ce78:	460c      	mov	r4, r1
	if ((mgr == NULL)
   3ce7a:	4605      	mov	r5, r0
   3ce7c:	b158      	cbz	r0, 3ce96 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   3ce7e:	b151      	cbz	r1, 3ce96 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   3ce80:	680b      	ldr	r3, [r1, #0]
   3ce82:	b143      	cbz	r3, 3ce96 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   3ce84:	684b      	ldr	r3, [r1, #4]
   3ce86:	b133      	cbz	r3, 3ce96 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3ce88:	2220      	movs	r2, #32
   3ce8a:	2100      	movs	r1, #0
   3ce8c:	f004 fe68 	bl	41b60 <memset>
	return 0;
   3ce90:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3ce92:	612c      	str	r4, [r5, #16]
}
   3ce94:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3ce96:	f06f 0015 	mvn.w	r0, #21
   3ce9a:	e7fb      	b.n	3ce94 <onoff_manager_init+0x1e>

0003ce9c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3ce9c:	4604      	mov	r4, r0
   3ce9e:	b508      	push	{r3, lr}
   3cea0:	4608      	mov	r0, r1
   3cea2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   3cea4:	461a      	mov	r2, r3
   3cea6:	47a0      	blx	r4
   3cea8:	f7fb feee 	bl	38c88 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   3ceac:	f7e6 fd2a 	bl	23904 <z_impl_k_thread_abort>

0003ceb0 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   3ceb0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   3ceb4:	8848      	ldrh	r0, [r1, #2]
}
   3ceb6:	0840      	lsrs	r0, r0, #1
   3ceb8:	4770      	bx	lr

0003ceba <free_list_add>:
{
   3ceba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cebc:	460c      	mov	r4, r1
   3cebe:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   3cec0:	f7ff fff6 	bl	3ceb0 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3cec4:	fab0 f080 	clz	r0, r0
   3cec8:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   3cecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3ced0:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   3ced4:	00e2      	lsls	r2, r4, #3
		((uint16_t *)cmem)[f] = val;
   3ced6:	1d17      	adds	r7, r2, #4
   3ced8:	b2a5      	uxth	r5, r4
   3ceda:	3206      	adds	r2, #6
   3cedc:	b956      	cbnz	r6, 3cef4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   3cede:	2101      	movs	r1, #1
   3cee0:	fa01 f000 	lsl.w	r0, r1, r0
   3cee4:	68d9      	ldr	r1, [r3, #12]
   3cee6:	4301      	orrs	r1, r0
   3cee8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   3ceea:	f8cc 4010 	str.w	r4, [ip, #16]
   3ceee:	53dd      	strh	r5, [r3, r7]
   3cef0:	529d      	strh	r5, [r3, r2]
}
   3cef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   3cef4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   3cef6:	3104      	adds	r1, #4
   3cef8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   3cefa:	53d8      	strh	r0, [r3, r7]
   3cefc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   3cf00:	529e      	strh	r6, [r3, r2]
   3cf02:	80c5      	strh	r5, [r0, #6]
   3cf04:	525d      	strh	r5, [r3, r1]
   3cf06:	e7f4      	b.n	3cef2 <free_list_add+0x38>

0003cf08 <free_list_remove_bidx>:
{
   3cf08:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   3cf0a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   3cf0e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   3cf10:	4299      	cmp	r1, r3
   3cf12:	f102 0104 	add.w	r1, r2, #4
   3cf16:	d10a      	bne.n	3cf2e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   3cf18:	2301      	movs	r3, #1
   3cf1a:	fa03 f202 	lsl.w	r2, r3, r2
   3cf1e:	68c3      	ldr	r3, [r0, #12]
   3cf20:	ea23 0302 	bic.w	r3, r3, r2
   3cf24:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   3cf26:	2300      	movs	r3, #0
   3cf28:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   3cf2c:	bd10      	pop	{r4, pc}
   3cf2e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   3cf30:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   3cf34:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   3cf38:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   3cf3c:	80cb      	strh	r3, [r1, #6]
   3cf3e:	8082      	strh	r2, [r0, #4]
}
   3cf40:	e7f4      	b.n	3cf2c <free_list_remove_bidx+0x24>

0003cf42 <free_list_remove>:
{
   3cf42:	b510      	push	{r4, lr}
   3cf44:	4603      	mov	r3, r0
   3cf46:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   3cf48:	f7ff ffb2 	bl	3ceb0 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3cf4c:	fab0 f080 	clz	r0, r0
		free_list_remove_bidx(h, c, bidx);
   3cf50:	4621      	mov	r1, r4
}
   3cf52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   3cf56:	f1c0 021f 	rsb	r2, r0, #31
   3cf5a:	4618      	mov	r0, r3
   3cf5c:	f7ff bfd4 	b.w	3cf08 <free_list_remove_bidx>

0003cf60 <alloc_chunk>:
{
   3cf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3cf64:	fab1 f581 	clz	r5, r1
   3cf68:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   3cf6c:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   3cf70:	693a      	ldr	r2, [r7, #16]
{
   3cf72:	4603      	mov	r3, r0
   3cf74:	460e      	mov	r6, r1
	if (b->next) {
   3cf76:	b1ca      	cbz	r2, 3cfac <alloc_chunk+0x4c>
   3cf78:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   3cf7c:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   3cf7e:	4618      	mov	r0, r3
   3cf80:	4621      	mov	r1, r4
   3cf82:	f7ff ff95 	bl	3ceb0 <chunk_size>
   3cf86:	42b0      	cmp	r0, r6
   3cf88:	d307      	bcc.n	3cf9a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   3cf8a:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   3cf8c:	4621      	mov	r1, r4
   3cf8e:	4618      	mov	r0, r3
   3cf90:	f7ff ffba 	bl	3cf08 <free_list_remove_bidx>
}
   3cf94:	4620      	mov	r0, r4
   3cf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   3cf9a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   3cf9e:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   3cfa0:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   3cfa4:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   3cfa6:	d001      	beq.n	3cfac <alloc_chunk+0x4c>
   3cfa8:	428a      	cmp	r2, r1
   3cfaa:	d1e7      	bne.n	3cf7c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   3cfac:	f04f 34ff 	mov.w	r4, #4294967295
   3cfb0:	68d9      	ldr	r1, [r3, #12]
   3cfb2:	f1c5 0520 	rsb	r5, r5, #32
   3cfb6:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   3cfb8:	400c      	ands	r4, r1
   3cfba:	d0eb      	beq.n	3cf94 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   3cfbc:	fa94 f2a4 	rbit	r2, r4
   3cfc0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3cfc4:	1d11      	adds	r1, r2, #4
   3cfc6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   3cfca:	e7df      	b.n	3cf8c <alloc_chunk+0x2c>

0003cfcc <merge_chunks>:
{
   3cfcc:	b538      	push	{r3, r4, r5, lr}
   3cfce:	4603      	mov	r3, r0
   3cfd0:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3cfd2:	f7ff ff6d 	bl	3ceb0 <chunk_size>
   3cfd6:	4611      	mov	r1, r2
   3cfd8:	4604      	mov	r4, r0
   3cfda:	4618      	mov	r0, r3
   3cfdc:	f7ff ff68 	bl	3ceb0 <chunk_size>
   3cfe0:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3cfe2:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   3cfe4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   3cfe8:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   3cfea:	4618      	mov	r0, r3
   3cfec:	4611      	mov	r1, r2
   3cfee:	f7ff ff5f 	bl	3ceb0 <chunk_size>
	void *cmem = &buf[c];
   3cff2:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3cff4:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   3cff8:	bd38      	pop	{r3, r4, r5, pc}

0003cffa <split_chunks>:
{
   3cffa:	b538      	push	{r3, r4, r5, lr}
   3cffc:	460c      	mov	r4, r1
   3cffe:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   3d000:	f7ff ff56 	bl	3ceb0 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   3d004:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   3d006:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
   3d008:	4405      	add	r5, r0
   3d00a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3d00e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   3d010:	8060      	strh	r0, [r4, #2]
   3d012:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3d016:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   3d018:	8044      	strh	r4, [r0, #2]
   3d01a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   3d01e:	4618      	mov	r0, r3
   3d020:	4611      	mov	r1, r2
   3d022:	f7ff ff45 	bl	3ceb0 <chunk_size>
	void *cmem = &buf[c];
   3d026:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3d028:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   3d02c:	bd38      	pop	{r3, r4, r5, pc}

0003d02e <free_chunk>:
{
   3d02e:	b538      	push	{r3, r4, r5, lr}
   3d030:	4605      	mov	r5, r0
   3d032:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   3d034:	f7ff ff3c 	bl	3ceb0 <chunk_size>
   3d038:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
   3d03a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3d03e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   3d040:	07da      	lsls	r2, r3, #31
   3d042:	d40b      	bmi.n	3d05c <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
   3d044:	4628      	mov	r0, r5
   3d046:	f7ff ff7c 	bl	3cf42 <free_list_remove>
	return c + chunk_size(h, c);
   3d04a:	4621      	mov	r1, r4
   3d04c:	4628      	mov	r0, r5
   3d04e:	f7ff ff2f 	bl	3ceb0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   3d052:	4621      	mov	r1, r4
   3d054:	1822      	adds	r2, r4, r0
   3d056:	4628      	mov	r0, r5
   3d058:	f7ff ffb8 	bl	3cfcc <merge_chunks>
		return ((uint16_t *)cmem)[f];
   3d05c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3d060:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   3d062:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3d066:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   3d068:	07db      	lsls	r3, r3, #31
   3d06a:	d40c      	bmi.n	3d086 <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
   3d06c:	4628      	mov	r0, r5
   3d06e:	f7ff ff68 	bl	3cf42 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   3d072:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   3d076:	4622      	mov	r2, r4
   3d078:	1a61      	subs	r1, r4, r1
   3d07a:	4628      	mov	r0, r5
   3d07c:	f7ff ffa6 	bl	3cfcc <merge_chunks>
   3d080:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3d084:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   3d086:	4621      	mov	r1, r4
   3d088:	4628      	mov	r0, r5
}
   3d08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   3d08e:	f7ff bf14 	b.w	3ceba <free_list_add>

0003d092 <sys_heap_alloc>:
{
   3d092:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   3d094:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   3d096:	b909      	cbnz	r1, 3d09c <sys_heap_alloc+0xa>
		return NULL;
   3d098:	2000      	movs	r0, #0
}
   3d09a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   3d09c:	68ab      	ldr	r3, [r5, #8]
   3d09e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   3d0a2:	d9f9      	bls.n	3d098 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3d0a4:	310b      	adds	r1, #11
   3d0a6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3d0a8:	4621      	mov	r1, r4
   3d0aa:	4628      	mov	r0, r5
   3d0ac:	f7ff ff58 	bl	3cf60 <alloc_chunk>
	if (c == 0U) {
   3d0b0:	4606      	mov	r6, r0
   3d0b2:	2800      	cmp	r0, #0
   3d0b4:	d0f0      	beq.n	3d098 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   3d0b6:	4601      	mov	r1, r0
   3d0b8:	4628      	mov	r0, r5
   3d0ba:	f7ff fef9 	bl	3ceb0 <chunk_size>
   3d0be:	42a0      	cmp	r0, r4
   3d0c0:	d909      	bls.n	3d0d6 <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
   3d0c2:	4434      	add	r4, r6
   3d0c4:	4631      	mov	r1, r6
   3d0c6:	4628      	mov	r0, r5
   3d0c8:	4622      	mov	r2, r4
   3d0ca:	f7ff ff96 	bl	3cffa <split_chunks>
		free_list_add(h, c + chunk_sz);
   3d0ce:	4621      	mov	r1, r4
   3d0d0:	4628      	mov	r0, r5
   3d0d2:	f7ff fef2 	bl	3ceba <free_list_add>
	void *cmem = &buf[c];
   3d0d6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3d0da:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3d0dc:	8853      	ldrh	r3, [r2, #2]
   3d0de:	3004      	adds	r0, #4
   3d0e0:	f043 0301 	orr.w	r3, r3, #1
   3d0e4:	8053      	strh	r3, [r2, #2]
	return mem;
   3d0e6:	e7d8      	b.n	3d09a <sys_heap_alloc+0x8>

0003d0e8 <_ldiv5>:
	uint32_t v_lo = *v;
   3d0e8:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   3d0ec:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   3d0ee:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   3d0f2:	fba2 2403 	umull	r2, r4, r2, r3
   3d0f6:	18d5      	adds	r5, r2, r3
   3d0f8:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   3d0fc:	fba1 1303 	umull	r1, r3, r1, r3
   3d100:	1852      	adds	r2, r2, r1
   3d102:	eb44 0403 	adc.w	r4, r4, r3
   3d106:	1952      	adds	r2, r2, r5
   3d108:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   3d10c:	1889      	adds	r1, r1, r2
   3d10e:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   3d112:	e9c0 1300 	strd	r1, r3, [r0]
}
   3d116:	bd30      	pop	{r4, r5, pc}

0003d118 <_get_digit>:
	if (*digit_count > 0) {
   3d118:	680b      	ldr	r3, [r1, #0]
{
   3d11a:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   3d11c:	2b00      	cmp	r3, #0
   3d11e:	dd10      	ble.n	3d142 <_get_digit+0x2a>
		*fr *= 10U;
   3d120:	220a      	movs	r2, #10
		--*digit_count;
   3d122:	3b01      	subs	r3, #1
   3d124:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   3d126:	6803      	ldr	r3, [r0, #0]
   3d128:	6844      	ldr	r4, [r0, #4]
   3d12a:	fba3 1302 	umull	r1, r3, r3, r2
   3d12e:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   3d132:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   3d134:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   3d138:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   3d13c:	3230      	adds	r2, #48	; 0x30
}
   3d13e:	4610      	mov	r0, r2
   3d140:	bd10      	pop	{r4, pc}
		rval = '0';
   3d142:	2230      	movs	r2, #48	; 0x30
   3d144:	e7fb      	b.n	3d13e <_get_digit+0x26>

0003d146 <outs>:
{
   3d146:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3d14a:	4680      	mov	r8, r0
   3d14c:	4689      	mov	r9, r1
   3d14e:	4616      	mov	r6, r2
   3d150:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3d152:	4615      	mov	r5, r2
   3d154:	42bd      	cmp	r5, r7
   3d156:	eba5 0406 	sub.w	r4, r5, r6
   3d15a:	d305      	bcc.n	3d168 <outs+0x22>
   3d15c:	b10f      	cbz	r7, 3d162 <outs+0x1c>
	return (int)count;
   3d15e:	4620      	mov	r0, r4
   3d160:	e008      	b.n	3d174 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3d162:	782b      	ldrb	r3, [r5, #0]
   3d164:	2b00      	cmp	r3, #0
   3d166:	d0fa      	beq.n	3d15e <outs+0x18>
		int rc = out((int)*sp++, ctx);
   3d168:	4649      	mov	r1, r9
   3d16a:	f815 0b01 	ldrb.w	r0, [r5], #1
   3d16e:	47c0      	blx	r8
		if (rc < 0) {
   3d170:	2800      	cmp	r0, #0
   3d172:	daef      	bge.n	3d154 <outs+0xe>
}
   3d174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003d178 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3d178:	4040      	eors	r0, r0
   3d17a:	f380 8811 	msr	BASEPRI, r0
   3d17e:	f04f 0004 	mov.w	r0, #4
   3d182:	df02      	svc	2
}
   3d184:	4770      	bx	lr

0003d186 <assert_print>:

void assert_print(const char *fmt, ...)
{
   3d186:	b40f      	push	{r0, r1, r2, r3}
   3d188:	b507      	push	{r0, r1, r2, lr}
   3d18a:	a904      	add	r1, sp, #16
   3d18c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   3d190:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   3d192:	f7e3 ff9f 	bl	210d4 <vprintk>

	va_end(ap);
}
   3d196:	b003      	add	sp, #12
   3d198:	f85d eb04 	ldr.w	lr, [sp], #4
   3d19c:	b004      	add	sp, #16
   3d19e:	4770      	bx	lr

0003d1a0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   3d1a0:	4770      	bx	lr

0003d1a2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   3d1a2:	2806      	cmp	r0, #6
   3d1a4:	d108      	bne.n	3d1b8 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   3d1a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3d1aa:	2201      	movs	r2, #1
   3d1ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   3d1b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   3d1b4:	bf20      	wfe
    while (true)
   3d1b6:	e7fd      	b.n	3d1b4 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   3d1b8:	4770      	bx	lr

0003d1ba <pm_state_exit_post_ops>:
   3d1ba:	2300      	movs	r3, #0
   3d1bc:	f383 8811 	msr	BASEPRI, r3
   3d1c0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   3d1c4:	4770      	bx	lr

0003d1c6 <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* defined(GPIO_PIN_CNF_MCUSEL_Msk) */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   3d1c6:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   3d1c8:	ab01      	add	r3, sp, #4
   3d1ca:	f004 fc38 	bl	41a3e <tfm_platform_mem_read>

	switch (status) {
   3d1ce:	2802      	cmp	r0, #2
   3d1d0:	d00a      	beq.n	3d1e8 <soc_secure_mem_read+0x22>
   3d1d2:	2803      	cmp	r0, #3
   3d1d4:	d00b      	beq.n	3d1ee <soc_secure_mem_read+0x28>
   3d1d6:	b968      	cbnz	r0, 3d1f4 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   3d1d8:	9801      	ldr	r0, [sp, #4]
   3d1da:	3800      	subs	r0, #0
   3d1dc:	bf18      	it	ne
   3d1de:	2001      	movne	r0, #1
   3d1e0:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   3d1e2:	b003      	add	sp, #12
   3d1e4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   3d1e8:	f06f 0015 	mvn.w	r0, #21
   3d1ec:	e7f9      	b.n	3d1e2 <soc_secure_mem_read+0x1c>
	switch (status) {
   3d1ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d1f2:	e7f6      	b.n	3d1e2 <soc_secure_mem_read+0x1c>
		return -EPERM;
   3d1f4:	f04f 30ff 	mov.w	r0, #4294967295
   3d1f8:	e7f3      	b.n	3d1e2 <soc_secure_mem_read+0x1c>

0003d1fa <z_log_minimal_printk>:
{
   3d1fa:	b40f      	push	{r0, r1, r2, r3}
   3d1fc:	b507      	push	{r0, r1, r2, lr}
   3d1fe:	a904      	add	r1, sp, #16
   3d200:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3d204:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3d206:	f7e3 ff65 	bl	210d4 <vprintk>
}
   3d20a:	b003      	add	sp, #12
   3d20c:	f85d eb04 	ldr.w	lr, [sp], #4
   3d210:	b004      	add	sp, #16
   3d212:	4770      	bx	lr

0003d214 <fcb_len_in_flash.isra.0>:
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   3d214:	2801      	cmp	r0, #1
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d216:	bf89      	itett	hi
   3d218:	f100 33ff 	addhi.w	r3, r0, #4294967295
		return len;
   3d21c:	4608      	movls	r0, r1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d21e:	18c9      	addhi	r1, r1, r3
   3d220:	4240      	neghi	r0, r0
   3d222:	bf88      	it	hi
   3d224:	4008      	andhi	r0, r1
}
   3d226:	4770      	bx	lr

0003d228 <fcb_append_to_scratch>:
{
   3d228:	b538      	push	{r3, r4, r5, lr}
   3d22a:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   3d22c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   3d22e:	f000 fa44 	bl	3d6ba <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   3d232:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   3d234:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   3d236:	4298      	cmp	r0, r3
   3d238:	d00f      	beq.n	3d25a <fcb_append_to_scratch+0x32>
	if (!sector) {
   3d23a:	b170      	cbz	r0, 3d25a <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d23c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3d23e:	4601      	mov	r1, r0
   3d240:	3201      	adds	r2, #1
   3d242:	4620      	mov	r0, r4
   3d244:	b292      	uxth	r2, r2
   3d246:	f000 f8c7 	bl	3d3d8 <fcb_sector_hdr_init>
	if (rc) {
   3d24a:	b928      	cbnz	r0, 3d258 <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d24c:	2308      	movs	r3, #8
   3d24e:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   3d250:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   3d252:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   3d254:	3301      	adds	r3, #1
   3d256:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   3d258:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   3d25a:	f06f 001b 	mvn.w	r0, #27
   3d25e:	e7fb      	b.n	3d258 <fcb_append_to_scratch+0x30>

0003d260 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   3d260:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d262:	b083      	sub	sp, #12
   3d264:	4604      	mov	r4, r0
   3d266:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   3d268:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   3d26c:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   3d26e:	1dd3      	adds	r3, r2, #7
   3d270:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   3d274:	ebad 0d03 	sub.w	sp, sp, r3
   3d278:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   3d27a:	21ff      	movs	r1, #255	; 0xff
   3d27c:	4630      	mov	r0, r6
   3d27e:	f004 fc6f 	bl	41b60 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   3d282:	4632      	mov	r2, r6
   3d284:	4629      	mov	r1, r5
   3d286:	4620      	mov	r0, r4
   3d288:	f000 f96d 	bl	3d566 <fcb_elem_crc8>
	if (rc) {
   3d28c:	b988      	cbnz	r0, 3d2b2 <fcb_append_finish+0x52>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d28e:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   3d292:	89a9      	ldrh	r1, [r5, #12]
   3d294:	4610      	mov	r0, r2
   3d296:	f7ff ffbd 	bl	3d214 <fcb_len_in_flash.isra.0>
   3d29a:	68a9      	ldr	r1, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   3d29c:	9200      	str	r2, [sp, #0]
   3d29e:	4633      	mov	r3, r6
   3d2a0:	1842      	adds	r2, r0, r1
   3d2a2:	4620      	mov	r0, r4
   3d2a4:	6829      	ldr	r1, [r5, #0]
   3d2a6:	f000 f823 	bl	3d2f0 <fcb_flash_write>
	if (rc) {
		return -EIO;
   3d2aa:	2800      	cmp	r0, #0
   3d2ac:	bf18      	it	ne
   3d2ae:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   3d2b2:	3704      	adds	r7, #4
   3d2b4:	46bd      	mov	sp, r7
   3d2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003d2b8 <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   3d2b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3d2ba:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3d2bc:	b110      	cbz	r0, 3d2c4 <fcb_get_align+0xc>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   3d2be:	f000 fc5a 	bl	3db76 <flash_area_align>
   3d2c2:	b2c0      	uxtb	r0, r0

	return align;
}
   3d2c4:	bd08      	pop	{r3, pc}

0003d2c6 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   3d2c6:	b570      	push	{r4, r5, r6, lr}
   3d2c8:	4614      	mov	r4, r2
   3d2ca:	461a      	mov	r2, r3
   3d2cc:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3d2ce:	684d      	ldr	r5, [r1, #4]
   3d2d0:	18e6      	adds	r6, r4, r3
   3d2d2:	42ae      	cmp	r6, r5
   3d2d4:	d809      	bhi.n	3d2ea <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3d2d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3d2d8:	b120      	cbz	r0, 3d2e4 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   3d2da:	6809      	ldr	r1, [r1, #0]
   3d2dc:	4421      	add	r1, r4
   3d2de:	f000 fbfb 	bl	3dad8 <flash_area_read>

	if (rc != 0) {
   3d2e2:	b108      	cbz	r0, 3d2e8 <fcb_flash_read+0x22>
		return -EIO;
   3d2e4:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3d2e8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3d2ea:	f06f 0015 	mvn.w	r0, #21
   3d2ee:	e7fb      	b.n	3d2e8 <fcb_flash_read+0x22>

0003d2f0 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   3d2f0:	b570      	push	{r4, r5, r6, lr}
   3d2f2:	4614      	mov	r4, r2
   3d2f4:	461a      	mov	r2, r3
   3d2f6:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3d2f8:	684d      	ldr	r5, [r1, #4]
   3d2fa:	18e6      	adds	r6, r4, r3
   3d2fc:	42ae      	cmp	r6, r5
   3d2fe:	d809      	bhi.n	3d314 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3d300:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3d302:	b120      	cbz	r0, 3d30e <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   3d304:	6809      	ldr	r1, [r1, #0]
   3d306:	4421      	add	r1, r4
   3d308:	f000 fc02 	bl	3db10 <flash_area_write>

	if (rc != 0) {
   3d30c:	b108      	cbz	r0, 3d312 <fcb_flash_write+0x22>
		return -EIO;
   3d30e:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3d312:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3d314:	f06f 0015 	mvn.w	r0, #21
   3d318:	e7fb      	b.n	3d312 <fcb_flash_write+0x22>

0003d31a <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   3d31a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3d31c:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3d31e:	b120      	cbz	r0, 3d32a <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   3d320:	e9d1 1200 	ldrd	r1, r2, [r1]
   3d324:	f000 fc10 	bl	3db48 <flash_area_erase>

	if (rc != 0) {
   3d328:	b108      	cbz	r0, 3d32e <fcb_erase_sector+0x14>
		return -EIO;
   3d32a:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3d32e:	bd08      	pop	{r3, pc}

0003d330 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   3d330:	b538      	push	{r3, r4, r5, lr}
   3d332:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d334:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   3d336:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d338:	7963      	ldrb	r3, [r4, #5]
   3d33a:	42ab      	cmp	r3, r5
   3d33c:	dc01      	bgt.n	3d342 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   3d33e:	4628      	mov	r0, r5
   3d340:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   3d342:	4620      	mov	r0, r4
   3d344:	f000 f9b9 	bl	3d6ba <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   3d348:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   3d34a:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   3d34c:	4283      	cmp	r3, r0
   3d34e:	d0f6      	beq.n	3d33e <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d350:	3501      	adds	r5, #1
   3d352:	e7f1      	b.n	3d338 <fcb_free_sector_cnt+0x8>

0003d354 <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   3d354:	2a7f      	cmp	r2, #127	; 0x7f
{
   3d356:	b510      	push	{r4, lr}
	if (len < 0x80) {
   3d358:	d806      	bhi.n	3d368 <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   3d35a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   3d35e:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   3d360:	405a      	eors	r2, r3
   3d362:	43d2      	mvns	r2, r2
   3d364:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   3d366:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   3d368:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   3d36c:	429a      	cmp	r2, r3
   3d36e:	d80e      	bhi.n	3d38e <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   3d370:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3d374:	f062 047f 	orn	r4, r2, #127	; 0x7f
   3d378:	4063      	eors	r3, r4
   3d37a:	43db      	mvns	r3, r3
   3d37c:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3d37e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   3d382:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3d384:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   3d388:	43d2      	mvns	r2, r2
   3d38a:	704a      	strb	r2, [r1, #1]
		return 2;
   3d38c:	e7eb      	b.n	3d366 <fcb_put_len+0x12>
		return -EINVAL;
   3d38e:	f06f 0015 	mvn.w	r0, #21
   3d392:	e7e8      	b.n	3d366 <fcb_put_len+0x12>

0003d394 <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   3d394:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   3d396:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3d39a:	780d      	ldrb	r5, [r1, #0]
   3d39c:	ea83 0405 	eor.w	r4, r3, r5
   3d3a0:	f014 0f80 	tst.w	r4, #128	; 0x80
   3d3a4:	4620      	mov	r0, r4
   3d3a6:	d10f      	bne.n	3d3c8 <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   3d3a8:	42ab      	cmp	r3, r5
		    (buf[1] == fcb->f_erase_value)) {
   3d3aa:	7849      	ldrb	r1, [r1, #1]
		if ((buf[0] == fcb->f_erase_value) &&
   3d3ac:	d101      	bne.n	3d3b2 <fcb_get_len+0x1e>
   3d3ae:	428b      	cmp	r3, r1
   3d3b0:	d00f      	beq.n	3d3d2 <fcb_get_len+0x3e>
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d3b2:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3d3b4:	404b      	eors	r3, r1
   3d3b6:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d3b8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3d3bc:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d3c0:	4303      	orrs	r3, r0
		rc = 2;
   3d3c2:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d3c4:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   3d3c6:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3d3c8:	43e3      	mvns	r3, r4
   3d3ca:	b2db      	uxtb	r3, r3
		rc = 1;
   3d3cc:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3d3ce:	8013      	strh	r3, [r2, #0]
		rc = 1;
   3d3d0:	e7f9      	b.n	3d3c6 <fcb_get_len+0x32>
			return -ENOTSUP;
   3d3d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d3d6:	e7f6      	b.n	3d3c6 <fcb_get_len+0x32>

0003d3d8 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   3d3d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   3d3da:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   3d3de:	6806      	ldr	r6, [r0, #0]
   3d3e0:	0423      	lsls	r3, r4, #16
   3d3e2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   3d3e6:	4323      	orrs	r3, r4
   3d3e8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   3d3ec:	4073      	eors	r3, r6
   3d3ee:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   3d3f0:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   3d3f2:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   3d3f4:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   3d3f8:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3d3fc:	2308      	movs	r3, #8
   3d3fe:	2200      	movs	r2, #0
   3d400:	9300      	str	r3, [sp, #0]
   3d402:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   3d404:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3d408:	f7ff ff72 	bl	3d2f0 <fcb_flash_write>
	if (rc != 0) {
		return -EIO;
   3d40c:	2800      	cmp	r0, #0
	}
	return 0;
}
   3d40e:	bf18      	it	ne
   3d410:	f06f 0004 	mvnne.w	r0, #4
   3d414:	b004      	add	sp, #16
   3d416:	bd70      	pop	{r4, r5, r6, pc}

0003d418 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   3d418:	b530      	push	{r4, r5, lr}
   3d41a:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   3d41c:	4614      	mov	r4, r2
{
   3d41e:	b085      	sub	sp, #20
	if (!fdap) {
   3d420:	b902      	cbnz	r2, 3d424 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   3d422:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   3d424:	2308      	movs	r3, #8
   3d426:	2200      	movs	r2, #0
   3d428:	9300      	str	r3, [sp, #0]
   3d42a:	4628      	mov	r0, r5
   3d42c:	4623      	mov	r3, r4
   3d42e:	f7ff ff4a 	bl	3d2c6 <fcb_flash_read>
	if (rc) {
   3d432:	b9a0      	cbnz	r0, 3d45e <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   3d434:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   3d438:	6821      	ldr	r1, [r4, #0]
   3d43a:	0413      	lsls	r3, r2, #16
   3d43c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   3d440:	4313      	orrs	r3, r2
   3d442:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3d446:	4299      	cmp	r1, r3
   3d448:	d007      	beq.n	3d45a <fcb_sector_hdr_read+0x42>
   3d44a:	682a      	ldr	r2, [r5, #0]
   3d44c:	4053      	eors	r3, r2
   3d44e:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
		return -ENOMSG;
   3d450:	4299      	cmp	r1, r3
   3d452:	bf0c      	ite	eq
   3d454:	2001      	moveq	r0, #1
   3d456:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   3d45a:	b005      	add	sp, #20
   3d45c:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3d45e:	f06f 0004 	mvn.w	r0, #4
   3d462:	e7fa      	b.n	3d45a <fcb_sector_hdr_read+0x42>

0003d464 <fcb_init>:
{
   3d464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3d468:	688b      	ldr	r3, [r1, #8]
{
   3d46a:	460c      	mov	r4, r1
   3d46c:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3d46e:	b92b      	cbnz	r3, 3d47c <fcb_init+0x18>
		return -EINVAL;
   3d470:	f06f 0515 	mvn.w	r5, #21
}
   3d474:	4628      	mov	r0, r5
   3d476:	b005      	add	sp, #20
   3d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3d47c:	794b      	ldrb	r3, [r1, #5]
   3d47e:	798a      	ldrb	r2, [r1, #6]
   3d480:	1a9b      	subs	r3, r3, r2
   3d482:	2b00      	cmp	r3, #0
   3d484:	ddf4      	ble.n	3d470 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   3d486:	3138      	adds	r1, #56	; 0x38
   3d488:	b2c0      	uxtb	r0, r0
   3d48a:	f7e4 fe67 	bl	2215c <flash_area_open>
	if (rc != 0) {
   3d48e:	4606      	mov	r6, r0
   3d490:	2800      	cmp	r0, #0
   3d492:	d1ed      	bne.n	3d470 <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   3d494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3d496:	68d8      	ldr	r0, [r3, #12]
   3d498:	f7f9 f824 	bl	364e4 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3d49c:	6883      	ldr	r3, [r0, #8]
   3d49e:	68db      	ldr	r3, [r3, #12]
   3d4a0:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   3d4a2:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   3d4a4:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   3d4a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   3d4aa:	f7ff ff05 	bl	3d2b8 <fcb_get_align>
	if (align == 0U) {
   3d4ae:	4681      	mov	r9, r0
   3d4b0:	2800      	cmp	r0, #0
   3d4b2:	d0dd      	beq.n	3d470 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   3d4b4:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   3d4b8:	46b2      	mov	sl, r6
   3d4ba:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   3d4bc:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d4be:	7963      	ldrb	r3, [r4, #5]
   3d4c0:	42b3      	cmp	r3, r6
   3d4c2:	dc24      	bgt.n	3d50e <fcb_init+0xaa>
	if (oldest < 0) {
   3d4c4:	f1b8 3fff 	cmp.w	r8, #4294967295
   3d4c8:	d149      	bne.n	3d55e <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3d4ca:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   3d4cc:	2200      	movs	r2, #0
   3d4ce:	4639      	mov	r1, r7
   3d4d0:	4620      	mov	r0, r4
   3d4d2:	f7ff ff81 	bl	3d3d8 <fcb_sector_hdr_init>
		if (rc) {
   3d4d6:	4605      	mov	r5, r0
   3d4d8:	2800      	cmp	r0, #0
   3d4da:	d1cb      	bne.n	3d474 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3d4dc:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d4de:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   3d4e0:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   3d4e4:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d4e8:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   3d4ea:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3d4ec:	f104 0624 	add.w	r6, r4, #36	; 0x24
   3d4f0:	4631      	mov	r1, r6
   3d4f2:	4620      	mov	r0, r4
   3d4f4:	f000 f8be 	bl	3d674 <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   3d4f8:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3d4fc:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   3d4fe:	d030      	beq.n	3d562 <fcb_init+0xfe>
		if (rc != 0) {
   3d500:	2800      	cmp	r0, #0
   3d502:	d0f5      	beq.n	3d4f0 <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   3d504:	f104 000c 	add.w	r0, r4, #12
   3d508:	f004 f8e0 	bl	416cc <z_impl_k_mutex_init>
   3d50c:	e7b2      	b.n	3d474 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   3d50e:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3d510:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   3d512:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3d516:	aa02      	add	r2, sp, #8
   3d518:	9101      	str	r1, [sp, #4]
   3d51a:	f7ff ff7d 	bl	3d418 <fcb_sector_hdr_read>
		if (rc < 0) {
   3d51e:	1e05      	subs	r5, r0, #0
   3d520:	dba8      	blt.n	3d474 <fcb_init+0x10>
		if (rc == 0) {
   3d522:	d009      	beq.n	3d538 <fcb_init+0xd4>
		if (oldest < 0) {
   3d524:	f1b8 3fff 	cmp.w	r8, #4294967295
			oldest = newest = fda.fd_id;
   3d528:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		if (oldest < 0) {
   3d52c:	9901      	ldr	r1, [sp, #4]
   3d52e:	d105      	bne.n	3d53c <fcb_init+0xd8>
			oldest = newest = fda.fd_id;
   3d530:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   3d532:	468a      	mov	sl, r1
   3d534:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   3d536:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d538:	3601      	adds	r6, #1
   3d53a:	e7c0      	b.n	3d4be <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   3d53c:	b21d      	sxth	r5, r3
   3d53e:	fa0f f08b 	sxth.w	r0, fp
   3d542:	1a28      	subs	r0, r5, r0
   3d544:	2800      	cmp	r0, #0
   3d546:	dd02      	ble.n	3d54e <fcb_init+0xea>
			newest = fda.fd_id;
   3d548:	469b      	mov	fp, r3
			newest_sector = sector;
   3d54a:	468a      	mov	sl, r1
   3d54c:	e7f4      	b.n	3d538 <fcb_init+0xd4>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   3d54e:	fa0f f288 	sxth.w	r2, r8
   3d552:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   3d554:	2a00      	cmp	r2, #0
   3d556:	bfc4      	itt	gt
   3d558:	4698      	movgt	r8, r3
   3d55a:	460f      	movgt	r7, r1
   3d55c:	e7ec      	b.n	3d538 <fcb_init+0xd4>
   3d55e:	465d      	mov	r5, fp
   3d560:	e7bd      	b.n	3d4de <fcb_init+0x7a>
			rc = 0;
   3d562:	2500      	movs	r5, #0
   3d564:	e7ce      	b.n	3d504 <fcb_init+0xa0>

0003d566 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   3d566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d56a:	460c      	mov	r4, r1
   3d56c:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3d56e:	e9d1 1200 	ldrd	r1, r2, [r1]
   3d572:	684b      	ldr	r3, [r1, #4]
   3d574:	1c95      	adds	r5, r2, #2
   3d576:	429d      	cmp	r5, r3
{
   3d578:	4606      	mov	r6, r0
   3d57a:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3d57c:	d84c      	bhi.n	3d618 <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   3d57e:	2302      	movs	r3, #2
   3d580:	9300      	str	r3, [sp, #0]
   3d582:	ab04      	add	r3, sp, #16
   3d584:	f7ff fe9f 	bl	3d2c6 <fcb_flash_read>
	if (rc) {
   3d588:	b120      	cbz	r0, 3d594 <fcb_elem_crc8+0x2e>
		return -EIO;
   3d58a:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   3d58e:	b00c      	add	sp, #48	; 0x30
   3d590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   3d594:	4630      	mov	r0, r6
   3d596:	f10d 020e 	add.w	r2, sp, #14
   3d59a:	a904      	add	r1, sp, #16
   3d59c:	f7ff fefa 	bl	3d394 <fcb_get_len>
	if (cnt < 0) {
   3d5a0:	2800      	cmp	r0, #0
   3d5a2:	dbf4      	blt.n	3d58e <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   3d5a4:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   3d5a8:	b283      	uxth	r3, r0
   3d5aa:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d5ac:	bf84      	itt	hi
   3d5ae:	f102 35ff 	addhi.w	r5, r2, #4294967295
   3d5b2:	195b      	addhi	r3, r3, r5
   3d5b4:	6861      	ldr	r1, [r4, #4]
   3d5b6:	bf84      	itt	hi
   3d5b8:	4252      	neghi	r2, r2
   3d5ba:	4013      	andhi	r3, r2
   3d5bc:	440b      	add	r3, r1
   3d5be:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   3d5c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3d5c4:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   3d5c6:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3d5c8:	20ff      	movs	r0, #255	; 0xff
   3d5ca:	a904      	add	r1, sp, #16
   3d5cc:	f7e3 fc7a 	bl	20ec4 <crc8_ccitt>
   3d5d0:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   3d5d2:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   3d5d6:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   3d5da:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   3d5dc:	45d0      	cmp	r8, sl
   3d5de:	d302      	bcc.n	3d5e6 <fcb_elem_crc8+0x80>
	return 0;
   3d5e0:	2000      	movs	r0, #0
	*c8p = crc8;
   3d5e2:	703d      	strb	r5, [r7, #0]
	return 0;
   3d5e4:	e7d3      	b.n	3d58e <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   3d5e6:	ebaa 0908 	sub.w	r9, sl, r8
   3d5ea:	f1b9 0f20 	cmp.w	r9, #32
   3d5ee:	bf28      	it	cs
   3d5f0:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   3d5f4:	4642      	mov	r2, r8
   3d5f6:	4630      	mov	r0, r6
   3d5f8:	6821      	ldr	r1, [r4, #0]
   3d5fa:	f8cd 9000 	str.w	r9, [sp]
   3d5fe:	ab04      	add	r3, sp, #16
   3d600:	f7ff fe61 	bl	3d2c6 <fcb_flash_read>
		if (rc) {
   3d604:	2800      	cmp	r0, #0
   3d606:	d1c0      	bne.n	3d58a <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3d608:	4628      	mov	r0, r5
   3d60a:	464a      	mov	r2, r9
   3d60c:	a904      	add	r1, sp, #16
   3d60e:	f7e3 fc59 	bl	20ec4 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   3d612:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3d614:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   3d616:	e7e1      	b.n	3d5dc <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   3d618:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d61c:	e7b7      	b.n	3d58e <fcb_elem_crc8+0x28>

0003d61e <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   3d61e:	b530      	push	{r4, r5, lr}
   3d620:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3d622:	f10d 020e 	add.w	r2, sp, #14
{
   3d626:	4605      	mov	r5, r0
   3d628:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3d62a:	f7ff ff9c 	bl	3d566 <fcb_elem_crc8>
	if (rc) {
   3d62e:	b9e0      	cbnz	r0, 3d66a <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d630:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   3d634:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   3d636:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d638:	bf81      	itttt	hi
   3d63a:	f102 32ff 	addhi.w	r2, r2, #4294967295
   3d63e:	18d2      	addhi	r2, r2, r3
   3d640:	425b      	neghi	r3, r3
   3d642:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3d644:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d646:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3d648:	9300      	str	r3, [sp, #0]
   3d64a:	440a      	add	r2, r1
   3d64c:	4628      	mov	r0, r5
   3d64e:	6821      	ldr	r1, [r4, #0]
   3d650:	f10d 030f 	add.w	r3, sp, #15
   3d654:	f7ff fe37 	bl	3d2c6 <fcb_flash_read>
	if (rc) {
   3d658:	b948      	cbnz	r0, 3d66e <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   3d65a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3d65e:	f89d 300e 	ldrb.w	r3, [sp, #14]
		return -EBADMSG;
   3d662:	429a      	cmp	r2, r3
   3d664:	bf18      	it	ne
   3d666:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   3d66a:	b005      	add	sp, #20
   3d66c:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3d66e:	f06f 0004 	mvn.w	r0, #4
   3d672:	e7fa      	b.n	3d66a <fcb_elem_info+0x4c>

0003d674 <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   3d674:	b538      	push	{r3, r4, r5, lr}
   3d676:	4604      	mov	r4, r0
   3d678:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   3d67a:	f7ff ffd0 	bl	3d61e <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   3d67e:	b110      	cbz	r0, 3d686 <fcb_getnext_in_sector+0x12>
   3d680:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d684:	d118      	bne.n	3d6b8 <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
   3d686:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3d68a:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   3d68c:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d68e:	bf88      	it	hi
   3d690:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   3d694:	68aa      	ldr	r2, [r5, #8]
   3d696:	bf82      	ittt	hi
   3d698:	185b      	addhi	r3, r3, r1
   3d69a:	4248      	neghi	r0, r1
   3d69c:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   3d69e:	2901      	cmp	r1, #1
   3d6a0:	4413      	add	r3, r2
		return len;
   3d6a2:	bf92      	itee	ls
   3d6a4:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d6a6:	424a      	neghi	r2, r1
   3d6a8:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3d6aa:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   3d6ac:	4629      	mov	r1, r5
   3d6ae:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   3d6b0:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   3d6b2:	f7ff ffb4 	bl	3d61e <fcb_elem_info>
			if (rc != -EBADMSG) {
   3d6b6:	e7e3      	b.n	3d680 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   3d6b8:	bd38      	pop	{r3, r4, r5, pc}

0003d6ba <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3d6ba:	6882      	ldr	r2, [r0, #8]
   3d6bc:	7943      	ldrb	r3, [r0, #5]
	sector++;
   3d6be:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3d6c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   3d6c4:	4299      	cmp	r1, r3
   3d6c6:	bf34      	ite	cc
   3d6c8:	4608      	movcc	r0, r1
   3d6ca:	4610      	movcs	r0, r2
   3d6cc:	4770      	bx	lr

0003d6ce <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   3d6ce:	680b      	ldr	r3, [r1, #0]
{
   3d6d0:	b570      	push	{r4, r5, r6, lr}
   3d6d2:	4605      	mov	r5, r0
   3d6d4:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   3d6d6:	b90b      	cbnz	r3, 3d6dc <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   3d6d8:	6a03      	ldr	r3, [r0, #32]
   3d6da:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   3d6dc:	6863      	ldr	r3, [r4, #4]
   3d6de:	b95b      	cbnz	r3, 3d6f8 <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d6e0:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   3d6e2:	4621      	mov	r1, r4
   3d6e4:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d6e6:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   3d6e8:	f7ff ff99 	bl	3d61e <fcb_elem_info>
		switch (rc) {
   3d6ec:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d6f0:	d021      	beq.n	3d736 <fcb_getnext_nolock+0x68>
   3d6f2:	b950      	cbnz	r0, 3d70a <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   3d6f4:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   3d6f6:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   3d6f8:	4621      	mov	r1, r4
   3d6fa:	4628      	mov	r0, r5
   3d6fc:	f7ff ffba 	bl	3d674 <fcb_getnext_in_sector>
		if (rc == 0) {
   3d700:	2800      	cmp	r0, #0
   3d702:	d0f7      	beq.n	3d6f4 <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   3d704:	f110 0f86 	cmn.w	r0, #134	; 0x86
   3d708:	d113      	bne.n	3d732 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d70a:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   3d70c:	6821      	ldr	r1, [r4, #0]
   3d70e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3d710:	4299      	cmp	r1, r3
   3d712:	d019      	beq.n	3d748 <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   3d714:	4628      	mov	r0, r5
   3d716:	f7ff ffd0 	bl	3d6ba <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   3d71a:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d71c:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   3d720:	4628      	mov	r0, r5
   3d722:	f7ff ff7c 	bl	3d61e <fcb_elem_info>
			switch (rc) {
   3d726:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d72a:	d004      	beq.n	3d736 <fcb_getnext_nolock+0x68>
   3d72c:	2800      	cmp	r0, #0
   3d72e:	d0e1      	beq.n	3d6f4 <fcb_getnext_nolock+0x26>
   3d730:	e7ec      	b.n	3d70c <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   3d732:	304d      	adds	r0, #77	; 0x4d
   3d734:	d1de      	bne.n	3d6f4 <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   3d736:	4621      	mov	r1, r4
   3d738:	4628      	mov	r0, r5
   3d73a:	f7ff ff9b 	bl	3d674 <fcb_getnext_in_sector>
		if (rc == 0) {
   3d73e:	2800      	cmp	r0, #0
   3d740:	d0d8      	beq.n	3d6f4 <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   3d742:	304d      	adds	r0, #77	; 0x4d
   3d744:	d0f7      	beq.n	3d736 <fcb_getnext_nolock+0x68>
next_sector:
   3d746:	e7e0      	b.n	3d70a <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   3d748:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d74c:	e7d3      	b.n	3d6f6 <fcb_getnext_nolock+0x28>

0003d74e <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   3d74e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d750:	4604      	mov	r4, r0
   3d752:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d754:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d758:	f04f 32ff 	mov.w	r2, #4294967295
   3d75c:	f04f 33ff 	mov.w	r3, #4294967295
   3d760:	4628      	mov	r0, r5
   3d762:	f7f9 fbc3 	bl	36eec <z_impl_k_mutex_lock>
	if (rc) {
   3d766:	b950      	cbnz	r0, 3d77e <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   3d768:	4620      	mov	r0, r4
   3d76a:	9901      	ldr	r1, [sp, #4]
   3d76c:	f7ff ffaf 	bl	3d6ce <fcb_getnext_nolock>
   3d770:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   3d772:	4628      	mov	r0, r5
   3d774:	f7f9 fc8c 	bl	37090 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   3d778:	4620      	mov	r0, r4
   3d77a:	b003      	add	sp, #12
   3d77c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3d77e:	f06f 0415 	mvn.w	r4, #21
   3d782:	e7f9      	b.n	3d778 <fcb_getnext+0x2a>

0003d784 <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   3d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d786:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d788:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d78c:	f04f 32ff 	mov.w	r2, #4294967295
   3d790:	f04f 33ff 	mov.w	r3, #4294967295
   3d794:	4638      	mov	r0, r7
   3d796:	f7f9 fba9 	bl	36eec <z_impl_k_mutex_lock>
	if (rc) {
   3d79a:	bb48      	cbnz	r0, 3d7f0 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   3d79c:	4620      	mov	r0, r4
   3d79e:	6a21      	ldr	r1, [r4, #32]
   3d7a0:	f7ff fdbb 	bl	3d31a <fcb_erase_sector>
	if (rc) {
   3d7a4:	bb08      	cbnz	r0, 3d7ea <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   3d7a6:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   3d7aa:	4299      	cmp	r1, r3
   3d7ac:	d112      	bne.n	3d7d4 <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d7ae:	4620      	mov	r0, r4
   3d7b0:	f7ff ff83 	bl	3d6ba <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d7b4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3d7b6:	4601      	mov	r1, r0
   3d7b8:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d7ba:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d7bc:	b292      	uxth	r2, r2
   3d7be:	4620      	mov	r0, r4
   3d7c0:	f7ff fe0a 	bl	3d3d8 <fcb_sector_hdr_init>
		if (rc) {
   3d7c4:	4605      	mov	r5, r0
   3d7c6:	b958      	cbnz	r0, 3d7e0 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d7c8:	2308      	movs	r3, #8
   3d7ca:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   3d7cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   3d7ce:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   3d7d0:	3301      	adds	r3, #1
   3d7d2:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d7d4:	4620      	mov	r0, r4
   3d7d6:	6a21      	ldr	r1, [r4, #32]
   3d7d8:	f7ff ff6f 	bl	3d6ba <fcb_getnext_sector>
   3d7dc:	2500      	movs	r5, #0
   3d7de:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   3d7e0:	4638      	mov	r0, r7
   3d7e2:	f7f9 fc55 	bl	37090 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   3d7e6:	4628      	mov	r0, r5
   3d7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   3d7ea:	f06f 0504 	mvn.w	r5, #4
   3d7ee:	e7f7      	b.n	3d7e0 <fcb_rotate+0x5c>
		return -EINVAL;
   3d7f0:	f06f 0515 	mvn.w	r5, #21
   3d7f4:	e7f7      	b.n	3d7e6 <fcb_rotate+0x62>

0003d7f6 <sntp_init>:
{
   3d7f6:	b570      	push	{r4, r5, r6, lr}
   3d7f8:	460d      	mov	r5, r1
   3d7fa:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   3d7fc:	4604      	mov	r4, r0
   3d7fe:	b330      	cbz	r0, 3d84e <sntp_init+0x58>
   3d800:	b329      	cbz	r1, 3d84e <sntp_init+0x58>
   3d802:	2214      	movs	r2, #20
   3d804:	2100      	movs	r1, #0
   3d806:	f004 f9ab 	bl	41b60 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d80a:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3d80c:	2211      	movs	r2, #17
   3d80e:	2102      	movs	r1, #2
   3d810:	f7e4 fad2 	bl	21db8 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   3d814:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d816:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   3d818:	da04      	bge.n	3d824 <sntp_init+0x2e>
		return -errno;
   3d81a:	f000 fb46 	bl	3deaa <__errno>
   3d81e:	6800      	ldr	r0, [r0, #0]
   3d820:	4240      	negs	r0, r0
}
   3d822:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   3d824:	4632      	mov	r2, r6
   3d826:	4629      	mov	r1, r5
   3d828:	f000 f854 	bl	3d8d4 <z_impl_zsock_connect>
	if (ret < 0) {
   3d82c:	2800      	cmp	r0, #0
   3d82e:	68e0      	ldr	r0, [r4, #12]
   3d830:	da02      	bge.n	3d838 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   3d832:	f000 f82b 	bl	3d88c <z_impl_zsock_close>
   3d836:	e7f0      	b.n	3d81a <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d838:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   3d83a:	68a3      	ldr	r3, [r4, #8]
   3d83c:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d840:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   3d844:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d846:	8091      	strh	r1, [r2, #4]
	return 0;
   3d848:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   3d84a:	60a3      	str	r3, [r4, #8]
	return 0;
   3d84c:	e7e9      	b.n	3d822 <sntp_init+0x2c>
		return -EFAULT;
   3d84e:	f06f 000d 	mvn.w	r0, #13
   3d852:	e7e6      	b.n	3d822 <sntp_init+0x2c>

0003d854 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   3d854:	b110      	cbz	r0, 3d85c <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   3d856:	68c0      	ldr	r0, [r0, #12]
   3d858:	f000 b818 	b.w	3d88c <z_impl_zsock_close>
	}
}
   3d85c:	4770      	bx	lr

0003d85e <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   3d85e:	f7e4 bc23 	b.w	220a8 <socket_offload_getaddrinfo>

0003d862 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   3d862:	f7e4 bc55 	b.w	22110 <socket_offload_freeaddrinfo>

0003d866 <z_fdtable_call_ioctl>:
{
   3d866:	b40c      	push	{r2, r3}
   3d868:	4603      	mov	r3, r0
   3d86a:	b507      	push	{r0, r1, r2, lr}
   3d86c:	aa04      	add	r2, sp, #16
   3d86e:	4608      	mov	r0, r1
   3d870:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   3d874:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3d876:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3d878:	4798      	blx	r3
}
   3d87a:	b003      	add	sp, #12
   3d87c:	f85d eb04 	ldr.w	lr, [sp], #4
   3d880:	b002      	add	sp, #8
   3d882:	4770      	bx	lr

0003d884 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3d884:	f7f9 bb32 	b.w	36eec <z_impl_k_mutex_lock>

0003d888 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3d888:	f7f9 bc02 	b.w	37090 <z_impl_k_mutex_unlock>

0003d88c <z_impl_zsock_close>:
{
   3d88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   3d88e:	4669      	mov	r1, sp
   3d890:	aa01      	add	r2, sp, #4
{
   3d892:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3d894:	f7e3 fb5c 	bl	20f50 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   3d898:	4604      	mov	r4, r0
   3d89a:	b940      	cbnz	r0, 3d8ae <z_impl_zsock_close+0x22>
		errno = EBADF;
   3d89c:	f000 fb05 	bl	3deaa <__errno>
   3d8a0:	2309      	movs	r3, #9
		return -1;
   3d8a2:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   3d8a6:	6003      	str	r3, [r0, #0]
}
   3d8a8:	4620      	mov	r0, r4
   3d8aa:	b003      	add	sp, #12
   3d8ac:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   3d8ae:	f04f 32ff 	mov.w	r2, #4294967295
   3d8b2:	9801      	ldr	r0, [sp, #4]
   3d8b4:	f04f 33ff 	mov.w	r3, #4294967295
   3d8b8:	f7ff ffe4 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   3d8bc:	9b00      	ldr	r3, [sp, #0]
   3d8be:	4620      	mov	r0, r4
   3d8c0:	689b      	ldr	r3, [r3, #8]
   3d8c2:	4798      	blx	r3
   3d8c4:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   3d8c6:	9801      	ldr	r0, [sp, #4]
   3d8c8:	f7ff ffde 	bl	3d888 <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   3d8cc:	4628      	mov	r0, r5
   3d8ce:	f7e3 fba9 	bl	21024 <z_free_fd>
	return ret;
   3d8d2:	e7e9      	b.n	3d8a8 <z_impl_zsock_close+0x1c>

0003d8d4 <z_impl_zsock_connect>:
{
   3d8d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d8d6:	460d      	mov	r5, r1
   3d8d8:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d8da:	4669      	mov	r1, sp
   3d8dc:	aa01      	add	r2, sp, #4
   3d8de:	f7e3 fb37 	bl	20f50 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d8e2:	4604      	mov	r4, r0
   3d8e4:	b110      	cbz	r0, 3d8ec <z_impl_zsock_connect+0x18>
   3d8e6:	9b00      	ldr	r3, [sp, #0]
   3d8e8:	699b      	ldr	r3, [r3, #24]
   3d8ea:	b943      	cbnz	r3, 3d8fe <z_impl_zsock_connect+0x2a>
   3d8ec:	f000 fadd 	bl	3deaa <__errno>
   3d8f0:	2309      	movs	r3, #9
   3d8f2:	f04f 34ff 	mov.w	r4, #4294967295
   3d8f6:	6003      	str	r3, [r0, #0]
}
   3d8f8:	4620      	mov	r0, r4
   3d8fa:	b002      	add	sp, #8
   3d8fc:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d8fe:	9801      	ldr	r0, [sp, #4]
   3d900:	f04f 32ff 	mov.w	r2, #4294967295
   3d904:	f04f 33ff 	mov.w	r3, #4294967295
   3d908:	f7ff ffbc 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
   3d90c:	9b00      	ldr	r3, [sp, #0]
   3d90e:	4632      	mov	r2, r6
   3d910:	4629      	mov	r1, r5
   3d912:	4620      	mov	r0, r4
   3d914:	699b      	ldr	r3, [r3, #24]
   3d916:	4798      	blx	r3
   3d918:	4604      	mov	r4, r0
   3d91a:	9801      	ldr	r0, [sp, #4]
   3d91c:	f7ff ffb4 	bl	3d888 <k_mutex_unlock.isra.0>
   3d920:	e7ea      	b.n	3d8f8 <z_impl_zsock_connect+0x24>

0003d922 <z_impl_zsock_sendto>:
{
   3d922:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d926:	460d      	mov	r5, r1
   3d928:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d92a:	a902      	add	r1, sp, #8
   3d92c:	aa03      	add	r2, sp, #12
{
   3d92e:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d930:	f7e3 fb0e 	bl	20f50 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d934:	4604      	mov	r4, r0
   3d936:	b110      	cbz	r0, 3d93e <z_impl_zsock_sendto+0x1c>
   3d938:	9b02      	ldr	r3, [sp, #8]
   3d93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d93c:	b94b      	cbnz	r3, 3d952 <z_impl_zsock_sendto+0x30>
   3d93e:	f000 fab4 	bl	3deaa <__errno>
   3d942:	2309      	movs	r3, #9
   3d944:	f04f 34ff 	mov.w	r4, #4294967295
   3d948:	6003      	str	r3, [r0, #0]
}
   3d94a:	4620      	mov	r0, r4
   3d94c:	b004      	add	sp, #16
   3d94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d952:	9803      	ldr	r0, [sp, #12]
   3d954:	f04f 32ff 	mov.w	r2, #4294967295
   3d958:	f04f 33ff 	mov.w	r3, #4294967295
   3d95c:	f7ff ff92 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
   3d960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3d962:	4632      	mov	r2, r6
   3d964:	9301      	str	r3, [sp, #4]
   3d966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d968:	4629      	mov	r1, r5
   3d96a:	9300      	str	r3, [sp, #0]
   3d96c:	9b02      	ldr	r3, [sp, #8]
   3d96e:	4620      	mov	r0, r4
   3d970:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   3d974:	463b      	mov	r3, r7
   3d976:	47c0      	blx	r8
   3d978:	4604      	mov	r4, r0
   3d97a:	9803      	ldr	r0, [sp, #12]
   3d97c:	f7ff ff84 	bl	3d888 <k_mutex_unlock.isra.0>
   3d980:	e7e3      	b.n	3d94a <z_impl_zsock_sendto+0x28>

0003d982 <z_impl_zsock_sendmsg>:
{
   3d982:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d984:	460d      	mov	r5, r1
   3d986:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d988:	4669      	mov	r1, sp
   3d98a:	aa01      	add	r2, sp, #4
   3d98c:	f7e3 fae0 	bl	20f50 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d990:	4604      	mov	r4, r0
   3d992:	b110      	cbz	r0, 3d99a <z_impl_zsock_sendmsg+0x18>
   3d994:	9b00      	ldr	r3, [sp, #0]
   3d996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d998:	b943      	cbnz	r3, 3d9ac <z_impl_zsock_sendmsg+0x2a>
   3d99a:	f000 fa86 	bl	3deaa <__errno>
   3d99e:	2309      	movs	r3, #9
   3d9a0:	f04f 34ff 	mov.w	r4, #4294967295
   3d9a4:	6003      	str	r3, [r0, #0]
}
   3d9a6:	4620      	mov	r0, r4
   3d9a8:	b002      	add	sp, #8
   3d9aa:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d9ac:	9801      	ldr	r0, [sp, #4]
   3d9ae:	f04f 32ff 	mov.w	r2, #4294967295
   3d9b2:	f04f 33ff 	mov.w	r3, #4294967295
   3d9b6:	f7ff ff65 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
   3d9ba:	9b00      	ldr	r3, [sp, #0]
   3d9bc:	4632      	mov	r2, r6
   3d9be:	4629      	mov	r1, r5
   3d9c0:	4620      	mov	r0, r4
   3d9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d9c4:	4798      	blx	r3
   3d9c6:	4604      	mov	r4, r0
   3d9c8:	9801      	ldr	r0, [sp, #4]
   3d9ca:	f7ff ff5d 	bl	3d888 <k_mutex_unlock.isra.0>
   3d9ce:	e7ea      	b.n	3d9a6 <z_impl_zsock_sendmsg+0x24>

0003d9d0 <z_impl_zsock_recvfrom>:
{
   3d9d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d9d4:	460d      	mov	r5, r1
   3d9d6:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d9d8:	a902      	add	r1, sp, #8
   3d9da:	aa03      	add	r2, sp, #12
{
   3d9dc:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d9de:	f7e3 fab7 	bl	20f50 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3d9e2:	4604      	mov	r4, r0
   3d9e4:	b110      	cbz	r0, 3d9ec <z_impl_zsock_recvfrom+0x1c>
   3d9e6:	9b02      	ldr	r3, [sp, #8]
   3d9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3d9ea:	b94b      	cbnz	r3, 3da00 <z_impl_zsock_recvfrom+0x30>
   3d9ec:	f000 fa5d 	bl	3deaa <__errno>
   3d9f0:	2309      	movs	r3, #9
   3d9f2:	f04f 34ff 	mov.w	r4, #4294967295
   3d9f6:	6003      	str	r3, [r0, #0]
}
   3d9f8:	4620      	mov	r0, r4
   3d9fa:	b004      	add	sp, #16
   3d9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3da00:	9803      	ldr	r0, [sp, #12]
   3da02:	f04f 32ff 	mov.w	r2, #4294967295
   3da06:	f04f 33ff 	mov.w	r3, #4294967295
   3da0a:	f7ff ff3b 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
   3da0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3da10:	4632      	mov	r2, r6
   3da12:	9301      	str	r3, [sp, #4]
   3da14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3da16:	4629      	mov	r1, r5
   3da18:	9300      	str	r3, [sp, #0]
   3da1a:	9b02      	ldr	r3, [sp, #8]
   3da1c:	4620      	mov	r0, r4
   3da1e:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   3da22:	463b      	mov	r3, r7
   3da24:	47c0      	blx	r8
   3da26:	4604      	mov	r4, r0
   3da28:	9803      	ldr	r0, [sp, #12]
   3da2a:	f7ff ff2d 	bl	3d888 <k_mutex_unlock.isra.0>
   3da2e:	e7e3      	b.n	3d9f8 <z_impl_zsock_recvfrom+0x28>

0003da30 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   3da30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   3da34:	1e14      	subs	r4, r2, #0
{
   3da36:	4605      	mov	r5, r0
   3da38:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   3da3a:	db13      	blt.n	3da64 <z_impl_zsock_poll+0x34>
   3da3c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   3da40:	f240 30e7 	movw	r0, #999	; 0x3e7
   3da44:	2100      	movs	r1, #0
   3da46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3da4a:	2300      	movs	r3, #0
   3da4c:	fbc4 0107 	smlal	r0, r1, r4, r7
   3da50:	f7df fa4a 	bl	1cee8 <__aeabi_uldivmod>
   3da54:	4602      	mov	r2, r0
   3da56:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   3da58:	4631      	mov	r1, r6
   3da5a:	4628      	mov	r0, r5
}
   3da5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   3da60:	f7e4 b9f0 	b.w	21e44 <zsock_poll_internal>
		timeout = K_FOREVER;
   3da64:	f04f 32ff 	mov.w	r2, #4294967295
   3da68:	4613      	mov	r3, r2
   3da6a:	e7f5      	b.n	3da58 <z_impl_zsock_poll+0x28>

0003da6c <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   3da6c:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   3da6e:	f000 fa85 	bl	3df7c <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   3da72:	fab0 f080 	clz	r0, r0
   3da76:	0940      	lsrs	r0, r0, #5
   3da78:	bd08      	pop	{r3, pc}

0003da7a <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   3da7a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3da7e:	460d      	mov	r5, r1
   3da80:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3da82:	a902      	add	r1, sp, #8
   3da84:	aa03      	add	r2, sp, #12
{
   3da86:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3da88:	f7e3 fa62 	bl	20f50 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3da8c:	4604      	mov	r4, r0
   3da8e:	b110      	cbz	r0, 3da96 <z_impl_zsock_setsockopt+0x1c>
   3da90:	9b02      	ldr	r3, [sp, #8]
   3da92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   3da94:	b94b      	cbnz	r3, 3daaa <z_impl_zsock_setsockopt+0x30>
   3da96:	f000 fa08 	bl	3deaa <__errno>
   3da9a:	2309      	movs	r3, #9
   3da9c:	f04f 34ff 	mov.w	r4, #4294967295
   3daa0:	6003      	str	r3, [r0, #0]
}
   3daa2:	4620      	mov	r0, r4
   3daa4:	b004      	add	sp, #16
   3daa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3daaa:	9803      	ldr	r0, [sp, #12]
   3daac:	f04f 32ff 	mov.w	r2, #4294967295
   3dab0:	f04f 33ff 	mov.w	r3, #4294967295
   3dab4:	f7ff fee6 	bl	3d884 <k_mutex_lock.constprop.0.isra.0>
   3dab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3daba:	4632      	mov	r2, r6
   3dabc:	9300      	str	r3, [sp, #0]
   3dabe:	9b02      	ldr	r3, [sp, #8]
   3dac0:	4629      	mov	r1, r5
   3dac2:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   3dac6:	4620      	mov	r0, r4
   3dac8:	463b      	mov	r3, r7
   3daca:	47c0      	blx	r8
   3dacc:	4604      	mov	r4, r0
   3dace:	9803      	ldr	r0, [sp, #12]
   3dad0:	f7ff feda 	bl	3d888 <k_mutex_unlock.isra.0>
   3dad4:	e7e5      	b.n	3daa2 <z_impl_zsock_setsockopt+0x28>

0003dad6 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3dad6:	4770      	bx	lr

0003dad8 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3dad8:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   3dada:	1e0c      	subs	r4, r1, #0
   3dadc:	4605      	mov	r5, r0
   3dade:	461e      	mov	r6, r3
   3dae0:	9201      	str	r2, [sp, #4]
   3dae2:	db11      	blt.n	3db08 <flash_area_read+0x30>
   3dae4:	6881      	ldr	r1, [r0, #8]
   3dae6:	18e3      	adds	r3, r4, r3
   3dae8:	428b      	cmp	r3, r1
   3daea:	d80d      	bhi.n	3db08 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3daec:	68c0      	ldr	r0, [r0, #12]
   3daee:	f7f8 fcf9 	bl	364e4 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3daf2:	6869      	ldr	r1, [r5, #4]
   3daf4:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3daf6:	6883      	ldr	r3, [r0, #8]
   3daf8:	9a01      	ldr	r2, [sp, #4]
   3dafa:	681c      	ldr	r4, [r3, #0]
   3dafc:	4633      	mov	r3, r6
   3dafe:	46a4      	mov	ip, r4
}
   3db00:	b002      	add	sp, #8
   3db02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3db06:	4760      	bx	ip
   3db08:	f06f 0015 	mvn.w	r0, #21
   3db0c:	b002      	add	sp, #8
   3db0e:	bd70      	pop	{r4, r5, r6, pc}

0003db10 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3db10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3db12:	1e0c      	subs	r4, r1, #0
   3db14:	4605      	mov	r5, r0
   3db16:	461e      	mov	r6, r3
   3db18:	9201      	str	r2, [sp, #4]
   3db1a:	db11      	blt.n	3db40 <flash_area_write+0x30>
   3db1c:	6881      	ldr	r1, [r0, #8]
   3db1e:	18e3      	adds	r3, r4, r3
   3db20:	428b      	cmp	r3, r1
   3db22:	d80d      	bhi.n	3db40 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3db24:	68c0      	ldr	r0, [r0, #12]
   3db26:	f7f8 fcdd 	bl	364e4 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3db2a:	6869      	ldr	r1, [r5, #4]
   3db2c:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   3db2e:	6883      	ldr	r3, [r0, #8]
   3db30:	9a01      	ldr	r2, [sp, #4]
   3db32:	685c      	ldr	r4, [r3, #4]
   3db34:	4633      	mov	r3, r6
   3db36:	46a4      	mov	ip, r4

	return rc;
}
   3db38:	b002      	add	sp, #8
   3db3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3db3e:	4760      	bx	ip
   3db40:	f06f 0015 	mvn.w	r0, #21
   3db44:	b002      	add	sp, #8
   3db46:	bd70      	pop	{r4, r5, r6, pc}

0003db48 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   3db48:	b570      	push	{r4, r5, r6, lr}
   3db4a:	1e0c      	subs	r4, r1, #0
   3db4c:	4605      	mov	r5, r0
   3db4e:	4616      	mov	r6, r2
   3db50:	db0e      	blt.n	3db70 <flash_area_erase+0x28>
   3db52:	18a3      	adds	r3, r4, r2
   3db54:	6882      	ldr	r2, [r0, #8]
   3db56:	4293      	cmp	r3, r2
   3db58:	d80a      	bhi.n	3db70 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3db5a:	68c0      	ldr	r0, [r0, #12]
   3db5c:	f7f8 fcc2 	bl	364e4 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3db60:	6869      	ldr	r1, [r5, #4]
   3db62:	4421      	add	r1, r4
	rc = api->erase(dev, offset, size);
   3db64:	6883      	ldr	r3, [r0, #8]
   3db66:	4632      	mov	r2, r6

	return rc;
}
   3db68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3db6c:	689b      	ldr	r3, [r3, #8]
   3db6e:	4718      	bx	r3
   3db70:	f06f 0015 	mvn.w	r0, #21
   3db74:	bd70      	pop	{r4, r5, r6, pc}

0003db76 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   3db76:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3db78:	68c0      	ldr	r0, [r0, #12]
   3db7a:	f7f8 fcb3 	bl	364e4 <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   3db7e:	6883      	ldr	r3, [r0, #8]
   3db80:	68db      	ldr	r3, [r3, #12]
   3db82:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3db84:	6800      	ldr	r0, [r0, #0]
   3db86:	bd08      	pop	{r3, pc}

0003db88 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   3db88:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   3db8a:	68c0      	ldr	r0, [r0, #12]
   3db8c:	f7f8 fcaa 	bl	364e4 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3db90:	6883      	ldr	r3, [r0, #8]
   3db92:	68db      	ldr	r3, [r3, #12]
   3db94:	4798      	blx	r3

	return param->erase_value;
}
   3db96:	7900      	ldrb	r0, [r0, #4]
   3db98:	bd08      	pop	{r3, pc}

0003db9a <get_sectors_cb>:
{
   3db9a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   3db9c:	6802      	ldr	r2, [r0, #0]
   3db9e:	684c      	ldr	r4, [r1, #4]
   3dba0:	42a2      	cmp	r2, r4
   3dba2:	d316      	bcc.n	3dbd2 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3dba4:	688b      	ldr	r3, [r1, #8]
   3dba6:	4423      	add	r3, r4
   3dba8:	429a      	cmp	r2, r3
   3dbaa:	d206      	bcs.n	3dbba <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   3dbac:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   3dbb0:	42ab      	cmp	r3, r5
   3dbb2:	d304      	bcc.n	3dbbe <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3dbb4:	f06f 030b 	mvn.w	r3, #11
   3dbb8:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   3dbba:	2000      	movs	r0, #0
   3dbbc:	e00a      	b.n	3dbd4 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3dbbe:	68cd      	ldr	r5, [r1, #12]
   3dbc0:	1b12      	subs	r2, r2, r4
   3dbc2:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   3dbc6:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3dbc8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   3dbcc:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   3dbce:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   3dbd0:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   3dbd2:	2001      	movs	r0, #1
}
   3dbd4:	bd70      	pop	{r4, r5, r6, pc}

0003dbd6 <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   3dbd6:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   3dbd8:	6883      	ldr	r3, [r0, #8]
   3dbda:	68db      	ldr	r3, [r3, #12]
   3dbdc:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   3dbde:	6800      	ldr	r0, [r0, #0]
   3dbe0:	bd08      	pop	{r3, pc}

0003dbe2 <stream_flash_buffered_write>:
{
   3dbe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3dbe6:	4689      	mov	r9, r1
   3dbe8:	4616      	mov	r6, r2
   3dbea:	4698      	mov	r8, r3
	if (!ctx) {
   3dbec:	4604      	mov	r4, r0
   3dbee:	b398      	cbz	r0, 3dc58 <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3dbf0:	6882      	ldr	r2, [r0, #8]
   3dbf2:	6903      	ldr	r3, [r0, #16]
   3dbf4:	4413      	add	r3, r2
   3dbf6:	6982      	ldr	r2, [r0, #24]
   3dbf8:	4433      	add	r3, r6
   3dbfa:	4293      	cmp	r3, r2
   3dbfc:	d830      	bhi.n	3dc60 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   3dbfe:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3dc00:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   3dc04:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3dc08:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   3dc0a:	45ba      	cmp	sl, r7
   3dc0c:	d215      	bcs.n	3dc3a <stream_flash_buffered_write+0x58>
	if (processed < len) {
   3dc0e:	42b5      	cmp	r5, r6
   3dc10:	d209      	bcs.n	3dc26 <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   3dc12:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3dc14:	4652      	mov	r2, sl
   3dc16:	4418      	add	r0, r3
   3dc18:	eb09 0105 	add.w	r1, r9, r5
   3dc1c:	f003 ff80 	bl	41b20 <memcpy>
		ctx->buf_bytes += len - processed;
   3dc20:	68a3      	ldr	r3, [r4, #8]
   3dc22:	4453      	add	r3, sl
   3dc24:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   3dc26:	f1b8 0f00 	cmp.w	r8, #0
   3dc2a:	d01c      	beq.n	3dc66 <stream_flash_buffered_write+0x84>
   3dc2c:	68a0      	ldr	r0, [r4, #8]
   3dc2e:	b1a8      	cbz	r0, 3dc5c <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   3dc30:	4620      	mov	r0, r4
}
   3dc32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   3dc36:	f7e4 bb1f 	b.w	22278 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3dc3a:	6823      	ldr	r3, [r4, #0]
   3dc3c:	463a      	mov	r2, r7
   3dc3e:	4418      	add	r0, r3
   3dc40:	eb09 0105 	add.w	r1, r9, r5
   3dc44:	f003 ff6c 	bl	41b20 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3dc48:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   3dc4a:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   3dc4c:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3dc4e:	f7e4 fb13 	bl	22278 <flash_sync>
		if (rc != 0) {
   3dc52:	b918      	cbnz	r0, 3dc5c <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   3dc54:	443d      	add	r5, r7
   3dc56:	e7d3      	b.n	3dc00 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   3dc58:	f06f 000d 	mvn.w	r0, #13
}
   3dc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   3dc60:	f06f 000b 	mvn.w	r0, #11
   3dc64:	e7fa      	b.n	3dc5c <stream_flash_buffered_write+0x7a>
   3dc66:	4640      	mov	r0, r8
   3dc68:	e7f8      	b.n	3dc5c <stream_flash_buffered_write+0x7a>

0003dc6a <stream_flash_bytes_written>:
}
   3dc6a:	6900      	ldr	r0, [r0, #16]
   3dc6c:	4770      	bx	lr

0003dc6e <settings_name_steq>:
{
   3dc6e:	b530      	push	{r4, r5, lr}
	if (next) {
   3dc70:	b10a      	cbz	r2, 3dc76 <settings_name_steq+0x8>
		*next = NULL;
   3dc72:	2300      	movs	r3, #0
   3dc74:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   3dc76:	b190      	cbz	r0, 3dc9e <settings_name_steq+0x30>
   3dc78:	b151      	cbz	r1, 3dc90 <settings_name_steq+0x22>
   3dc7a:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   3dc7c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   3dc80:	4604      	mov	r4, r0
   3dc82:	f810 3b01 	ldrb.w	r3, [r0], #1
   3dc86:	b15d      	cbz	r5, 3dca0 <settings_name_steq+0x32>
   3dc88:	429d      	cmp	r5, r3
   3dc8a:	d101      	bne.n	3dc90 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3dc8c:	2d3d      	cmp	r5, #61	; 0x3d
   3dc8e:	d1f5      	bne.n	3dc7c <settings_name_steq+0xe>
	return 0;
   3dc90:	2000      	movs	r0, #0
   3dc92:	e004      	b.n	3dc9e <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   3dc94:	2b3d      	cmp	r3, #61	; 0x3d
   3dc96:	d008      	beq.n	3dcaa <settings_name_steq+0x3c>
   3dc98:	fab3 f083 	clz	r0, r3
   3dc9c:	0940      	lsrs	r0, r0, #5
}
   3dc9e:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3dca0:	2b2f      	cmp	r3, #47	; 0x2f
   3dca2:	d1f7      	bne.n	3dc94 <settings_name_steq+0x26>
		if (next) {
   3dca4:	b10a      	cbz	r2, 3dcaa <settings_name_steq+0x3c>
			*next = name + 1;
   3dca6:	3401      	adds	r4, #1
   3dca8:	6014      	str	r4, [r2, #0]
		return 1;
   3dcaa:	2001      	movs	r0, #1
   3dcac:	e7f7      	b.n	3dc9e <settings_name_steq+0x30>

0003dcae <settings_line_len_calc>:
{
   3dcae:	b510      	push	{r4, lr}
   3dcb0:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   3dcb2:	f7df fac6 	bl	1d242 <strlen>
   3dcb6:	3401      	adds	r4, #1
}
   3dcb8:	4420      	add	r0, r4
   3dcba:	bd10      	pop	{r4, pc}

0003dcbc <settings_line_raw_read>:
{
   3dcbc:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   3dcbe:	9c04      	ldr	r4, [sp, #16]
   3dcc0:	9401      	str	r4, [sp, #4]
   3dcc2:	2400      	movs	r4, #0
   3dcc4:	9400      	str	r4, [sp, #0]
   3dcc6:	f7e4 fcf9 	bl	226bc <settings_line_raw_read_until>
}
   3dcca:	b002      	add	sp, #8
   3dccc:	bd10      	pop	{r4, pc}

0003dcce <settings_line_read_cb>:
{
   3dcce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3dcd0:	6803      	ldr	r3, [r0, #0]
   3dcd2:	9300      	str	r3, [sp, #0]
   3dcd4:	6840      	ldr	r0, [r0, #4]
   3dcd6:	ab03      	add	r3, sp, #12
   3dcd8:	f7ff fff0 	bl	3dcbc <settings_line_raw_read>
	if (rc == 0) {
   3dcdc:	b918      	cbnz	r0, 3dce6 <settings_line_read_cb+0x18>
		return len_read;
   3dcde:	9803      	ldr	r0, [sp, #12]
}
   3dce0:	b005      	add	sp, #20
   3dce2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   3dce6:	f04f 30ff 	mov.w	r0, #4294967295
   3dcea:	e7f9      	b.n	3dce0 <settings_line_read_cb+0x12>

0003dcec <settings_line_name_read>:
{
   3dcec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   3dcee:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3dcf0:	9301      	str	r3, [sp, #4]
   3dcf2:	f10d 030f 	add.w	r3, sp, #15
   3dcf6:	9300      	str	r3, [sp, #0]
   3dcf8:	4613      	mov	r3, r2
   3dcfa:	460a      	mov	r2, r1
   3dcfc:	4601      	mov	r1, r0
   3dcfe:	2000      	movs	r0, #0
	char const until_char = '=';
   3dd00:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3dd04:	f7e4 fcda 	bl	226bc <settings_line_raw_read_until>
}
   3dd08:	b004      	add	sp, #16
   3dd0a:	bd10      	pop	{r4, pc}

0003dd0c <settings_line_dup_check_cb>:
{
   3dd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3dd10:	460f      	mov	r7, r1
   3dd12:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   3dd14:	6819      	ldr	r1, [r3, #0]
{
   3dd16:	4690      	mov	r8, r2
   3dd18:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   3dd1a:	f7df fa88 	bl	1d22e <strcmp>
   3dd1e:	4606      	mov	r6, r0
   3dd20:	b940      	cbnz	r0, 3dd34 <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3dd22:	4639      	mov	r1, r7
   3dd24:	4640      	mov	r0, r8
   3dd26:	f7e4 fd8b 	bl	22840 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   3dd2a:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3dd2c:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   3dd2e:	4283      	cmp	r3, r0
   3dd30:	d004      	beq.n	3dd3c <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   3dd32:	60e6      	str	r6, [r4, #12]
}
   3dd34:	2000      	movs	r0, #0
   3dd36:	b008      	add	sp, #32
   3dd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   3dd3c:	b913      	cbnz	r3, 3dd44 <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   3dd3e:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   3dd40:	60e3      	str	r3, [r4, #12]
   3dd42:	e7f7      	b.n	3dd34 <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   3dd44:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   3dd48:	2d10      	cmp	r5, #16
   3dd4a:	46a9      	mov	r9, r5
   3dd4c:	bf28      	it	cs
   3dd4e:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3dd52:	9700      	str	r7, [sp, #0]
   3dd54:	464a      	mov	r2, r9
   3dd56:	ab03      	add	r3, sp, #12
   3dd58:	a904      	add	r1, sp, #16
   3dd5a:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   3dd5e:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3dd62:	f7ff ffab 	bl	3dcbc <settings_line_raw_read>
		if (rc) {
   3dd66:	b970      	cbnz	r0, 3dd86 <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   3dd68:	9b03      	ldr	r3, [sp, #12]
   3dd6a:	4599      	cmp	r9, r3
   3dd6c:	d10b      	bne.n	3dd86 <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   3dd6e:	464a      	mov	r2, r9
   3dd70:	4650      	mov	r0, sl
   3dd72:	a904      	add	r1, sp, #16
   3dd74:	f003 fec4 	bl	41b00 <memcmp>
		if (rc) {
   3dd78:	b928      	cbnz	r0, 3dd86 <settings_line_dup_check_cb+0x7a>
		val += len_read;
   3dd7a:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   3dd7c:	1aed      	subs	r5, r5, r3
		val += len_read;
   3dd7e:	449a      	add	sl, r3
		off += len_read;
   3dd80:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   3dd82:	d1e1      	bne.n	3dd48 <settings_line_dup_check_cb+0x3c>
   3dd84:	e7db      	b.n	3dd3e <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   3dd86:	2300      	movs	r3, #0
   3dd88:	e7da      	b.n	3dd40 <settings_line_dup_check_cb+0x34>

0003dd8a <get_len_cb>:
}
   3dd8a:	8980      	ldrh	r0, [r0, #12]
   3dd8c:	4770      	bx	lr

0003dd8e <write_handler>:
{
   3dd8e:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   3dd90:	6804      	ldr	r4, [r0, #0]
   3dd92:	6885      	ldr	r5, [r0, #8]
   3dd94:	6824      	ldr	r4, [r4, #0]
   3dd96:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   3dd98:	4421      	add	r1, r4
   3dd9a:	6900      	ldr	r0, [r0, #16]
}
   3dd9c:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   3dd9e:	f7ff beb7 	b.w	3db10 <flash_area_write>

0003dda2 <read_handler>:
{
   3dda2:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   3dda4:	8984      	ldrh	r4, [r0, #12]
   3dda6:	428c      	cmp	r4, r1
   3dda8:	dd0f      	ble.n	3ddca <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   3ddaa:	681d      	ldr	r5, [r3, #0]
   3ddac:	440d      	add	r5, r1
   3ddae:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   3ddb0:	bf84      	itt	hi
   3ddb2:	1a64      	subhi	r4, r4, r1
   3ddb4:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   3ddb6:	6804      	ldr	r4, [r0, #0]
   3ddb8:	6885      	ldr	r5, [r0, #8]
   3ddba:	6824      	ldr	r4, [r4, #0]
   3ddbc:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   3ddbe:	4421      	add	r1, r4
   3ddc0:	681b      	ldr	r3, [r3, #0]
   3ddc2:	6900      	ldr	r0, [r0, #16]
}
   3ddc4:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   3ddc6:	f7ff be87 	b.w	3dad8 <flash_area_read>
		*len = 0;
   3ddca:	2000      	movs	r0, #0
}
   3ddcc:	bc30      	pop	{r4, r5}
		*len = 0;
   3ddce:	6018      	str	r0, [r3, #0]
}
   3ddd0:	4770      	bx	lr

0003ddd2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3ddd2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3ddd4:	6800      	ldr	r0, [r0, #0]
   3ddd6:	f7e5 b8db 	b.w	22f90 <z_arm_fatal_error>

0003ddda <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3ddda:	2100      	movs	r1, #0
   3dddc:	2001      	movs	r0, #1
   3ddde:	f7e5 b8d7 	b.w	22f90 <z_arm_fatal_error>

0003dde2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   3dde2:	b508      	push	{r3, lr}
	handler();
   3dde4:	f7e5 f9a0 	bl	23128 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3dde8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3ddec:	f7e5 baa8 	b.w	23340 <z_arm_exc_exit>

0003ddf0 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3ddf0:	6f43      	ldr	r3, [r0, #116]	; 0x74
   3ddf2:	f383 880b 	msr	PSPLIM, r3
}
   3ddf6:	4770      	bx	lr

0003ddf8 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   3ddf8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   3ddfc:	b18b      	cbz	r3, 3de22 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   3ddfe:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   3de02:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   3de06:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   3de0a:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   3de0e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   3de12:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   3de16:	f100 0340 	add.w	r3, r0, #64	; 0x40
   3de1a:	ec90 0a10 	vldmia	r0, {s0-s15}
   3de1e:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   3de22:	4770      	bx	lr

0003de24 <arch_timing_cycles_get>:
{
   3de24:	b530      	push	{r4, r5, lr}
	return (*end - *start);
   3de26:	e9d1 4500 	ldrd	r4, r5, [r1]
   3de2a:	e9d0 2300 	ldrd	r2, r3, [r0]
   3de2e:	1aa0      	subs	r0, r4, r2
   3de30:	eb65 0103 	sbc.w	r1, r5, r3
}
   3de34:	bd30      	pop	{r4, r5, pc}

0003de36 <arch_timing_cycles_to_ns>:
{
   3de36:	b570      	push	{r4, r5, r6, lr}
   3de38:	460d      	mov	r5, r1
   3de3a:	4604      	mov	r4, r0
	return (cycles) * (NSEC_PER_USEC) / arch_timing_freq_get_mhz();
   3de3c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   3de40:	f7e5 fdb4 	bl	239ac <arch_timing_freq_get_mhz>
   3de44:	4602      	mov	r2, r0
   3de46:	fba4 0106 	umull	r0, r1, r4, r6
   3de4a:	2300      	movs	r3, #0
   3de4c:	fb06 1105 	mla	r1, r6, r5, r1
   3de50:	f7df f84a 	bl	1cee8 <__aeabi_uldivmod>
}
   3de54:	bd70      	pop	{r4, r5, r6, pc}

0003de56 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3de56:	e840 f000 	tt	r0, r0
   3de5a:	b2c3      	uxtb	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   3de5c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
	}

	return -EINVAL;
}
   3de60:	bf14      	ite	ne
   3de62:	4618      	movne	r0, r3
   3de64:	f06f 0015 	mvneq.w	r0, #21
   3de68:	4770      	bx	lr

0003de6a <_stdout_hook_default>:
}
   3de6a:	f04f 30ff 	mov.w	r0, #4294967295
   3de6e:	4770      	bx	lr

0003de70 <_stdin_hook_default>:
}
   3de70:	2000      	movs	r0, #0
   3de72:	4770      	bx	lr

0003de74 <_read>:
{
   3de74:	4608      	mov	r0, r1
   3de76:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3de78:	f7e5 bfce 	b.w	23e18 <z_impl_zephyr_read_stdin>

0003de7c <_write>:
{
   3de7c:	4608      	mov	r0, r1
   3de7e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3de80:	f7e5 bfde 	b.w	23e40 <z_impl_zephyr_write_stdout>

0003de84 <_close>:
   3de84:	f04f 30ff 	mov.w	r0, #4294967295
   3de88:	4770      	bx	lr

0003de8a <_lseek>:
}
   3de8a:	2000      	movs	r0, #0
   3de8c:	4770      	bx	lr

0003de8e <_isatty>:
}
   3de8e:	2802      	cmp	r0, #2
   3de90:	bfcc      	ite	gt
   3de92:	2000      	movgt	r0, #0
   3de94:	2001      	movle	r0, #1
   3de96:	4770      	bx	lr

0003de98 <_kill>:
}
   3de98:	2000      	movs	r0, #0
   3de9a:	4770      	bx	lr

0003de9c <_getpid>:
}
   3de9c:	2000      	movs	r0, #0
   3de9e:	4770      	bx	lr

0003dea0 <_fstat>:
	st->st_mode = S_IFCHR;
   3dea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3dea4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3dea6:	604b      	str	r3, [r1, #4]
}
   3dea8:	4770      	bx	lr

0003deaa <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3deaa:	f7f8 bb45 	b.w	36538 <z_impl_z_errno>

0003deae <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   3deae:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   3deb0:	f7f3 fe44 	bl	31b3c <boot_set_pending_multi>
	if (rc) {
		return -EFAULT;
   3deb4:	2800      	cmp	r0, #0
	}
	return 0;
}
   3deb6:	bf18      	it	ne
   3deb8:	f06f 000d 	mvnne.w	r0, #13
   3debc:	bd08      	pop	{r3, pc}

0003debe <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   3debe:	b507      	push	{r0, r1, r2, lr}
	const struct flash_area *fa;
	int rc;
	uint8_t flag_val;

	rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fa);
   3dec0:	2003      	movs	r0, #3
   3dec2:	a901      	add	r1, sp, #4
   3dec4:	f7e4 f94a 	bl	2215c <flash_area_open>
	if (rc) {
   3dec8:	b118      	cbz	r0, 3ded2 <boot_is_img_confirmed+0x14>
		return false;
   3deca:	2000      	movs	r0, #0
	if (rc) {
		return false;
	}

	return flag_val == BOOT_FLAG_SET;
}
   3decc:	b003      	add	sp, #12
   3dece:	f85d fb04 	ldr.w	pc, [sp], #4
	rc = boot_read_image_ok(fa, &flag_val);
   3ded2:	9801      	ldr	r0, [sp, #4]
   3ded4:	f10d 0103 	add.w	r1, sp, #3
   3ded8:	f002 f8cf 	bl	4007a <boot_read_image_ok>
	if (rc) {
   3dedc:	2800      	cmp	r0, #0
   3dede:	d1f4      	bne.n	3deca <boot_is_img_confirmed+0xc>
	return flag_val == BOOT_FLAG_SET;
   3dee0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3dee4:	1e43      	subs	r3, r0, #1
   3dee6:	4258      	negs	r0, r3
   3dee8:	4158      	adcs	r0, r3
   3deea:	e7ef      	b.n	3decc <boot_is_img_confirmed+0xe>

0003deec <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   3deec:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3deee:	f002 f8f0 	bl	400d2 <boot_set_confirmed>
	if (rc) {
		return -EIO;
   3def2:	2800      	cmp	r0, #0
	}

	return 0;
}
   3def4:	bf18      	it	ne
   3def6:	f06f 0004 	mvnne.w	r0, #4
   3defa:	bd08      	pop	{r3, pc}

0003defc <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3defc:	b508      	push	{r3, lr}
	net_if_init();
   3defe:	f7e6 f92d 	bl	2415c <net_if_init>
	net_if_post_init();
   3df02:	f7e6 f95d 	bl	241c0 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3df06:	2000      	movs	r0, #0
   3df08:	bd08      	pop	{r3, pc}

0003df0a <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3df0a:	b110      	cbz	r0, 3df12 <net_if_l2+0x8>
   3df0c:	6800      	ldr	r0, [r0, #0]
   3df0e:	b100      	cbz	r0, 3df12 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3df10:	6840      	ldr	r0, [r0, #4]
}
   3df12:	4770      	bx	lr

0003df14 <net_if_flag_is_set>:
	if (iface == NULL) {
   3df14:	b138      	cbz	r0, 3df26 <net_if_flag_is_set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3df16:	6803      	ldr	r3, [r0, #0]
   3df18:	330c      	adds	r3, #12
   3df1a:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3df1e:	fa43 f001 	asr.w	r0, r3, r1
   3df22:	f000 0001 	and.w	r0, r0, #1
}
   3df26:	4770      	bx	lr

0003df28 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   3df28:	b510      	push	{r4, lr}
   3df2a:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3df2c:	f7ff ffed 	bl	3df0a <net_if_l2>
   3df30:	b128      	cbz	r0, 3df3e <l2_flags_get.isra.0+0x16>
   3df32:	68c2      	ldr	r2, [r0, #12]
   3df34:	b11a      	cbz	r2, 3df3e <l2_flags_get.isra.0+0x16>
}
   3df36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3df3a:	4618      	mov	r0, r3
   3df3c:	4710      	bx	r2
}
   3df3e:	bd10      	pop	{r4, pc}

0003df40 <net_byte_to_hex>:
{
   3df40:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3df42:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   3df44:	b1b3      	cbz	r3, 3df74 <net_byte_to_hex+0x34>
		if (val < 10) {
   3df46:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   3df48:	bf86      	itte	hi
   3df4a:	f1a2 050a 	subhi.w	r5, r2, #10
   3df4e:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   3df50:	3430      	addls	r4, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
   3df52:	1c43      	adds	r3, r0, #1
			*ptr++ = (char) (val + '0');
   3df54:	7004      	strb	r4, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3df56:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   3df5a:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   3df5c:	bf84      	itt	hi
   3df5e:	3a0a      	subhi	r2, #10
   3df60:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   3df62:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val - 10 + base);
   3df66:	bf8c      	ite	hi
   3df68:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   3df6a:	3130      	addls	r1, #48	; 0x30
   3df6c:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   3df6e:	705a      	strb	r2, [r3, #1]
			*ptr++ = (char) (val - 10 + base);
   3df70:	1c58      	adds	r0, r3, #1
}
   3df72:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   3df74:	2c00      	cmp	r4, #0
   3df76:	d1e6      	bne.n	3df46 <net_byte_to_hex+0x6>
   3df78:	4603      	mov	r3, r0
   3df7a:	e7ec      	b.n	3df56 <net_byte_to_hex+0x16>

0003df7c <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   3df7c:	2801      	cmp	r0, #1
{
   3df7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3df82:	460c      	mov	r4, r1
   3df84:	4616      	mov	r6, r2
	if (family == AF_INET) {
   3df86:	d126      	bne.n	3dfd6 <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   3df88:	4608      	mov	r0, r1
   3df8a:	f7df f95a 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3df8e:	4623      	mov	r3, r4
   3df90:	4420      	add	r0, r4
   3df92:	4298      	cmp	r0, r3
   3df94:	d112      	bne.n	3dfbc <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   3df96:	4635      	mov	r5, r6
   3df98:	2300      	movs	r3, #0
   3df9a:	3603      	adds	r6, #3
   3df9c:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3dfa0:	4620      	mov	r0, r4
   3dfa2:	220a      	movs	r2, #10
   3dfa4:	a901      	add	r1, sp, #4
   3dfa6:	f7fc ff77 	bl	3ae98 <strtol>

			src = ++endptr;
   3dfaa:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3dfac:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3dfb0:	42ae      	cmp	r6, r5
			src = ++endptr;
   3dfb2:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3dfb6:	d1f3      	bne.n	3dfa0 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   3dfb8:	2000      	movs	r0, #0
   3dfba:	e009      	b.n	3dfd0 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3dfbc:	f813 2b01 	ldrb.w	r2, [r3], #1
   3dfc0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3dfc4:	2909      	cmp	r1, #9
   3dfc6:	d9e4      	bls.n	3df92 <z_impl_net_addr_pton+0x16>
   3dfc8:	2a2e      	cmp	r2, #46	; 0x2e
   3dfca:	d0e2      	beq.n	3df92 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   3dfcc:	f06f 0015 	mvn.w	r0, #21
}
   3dfd0:	b003      	add	sp, #12
   3dfd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   3dfd6:	2802      	cmp	r0, #2
   3dfd8:	d1f8      	bne.n	3dfcc <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3dfda:	212e      	movs	r1, #46	; 0x2e
   3dfdc:	4620      	mov	r0, r4
   3dfde:	f003 ff7d 	bl	41edc <strchr>
		if (*src == ':') {
   3dfe2:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3dfe4:	2800      	cmp	r0, #0
   3dfe6:	bf14      	ite	ne
   3dfe8:	2706      	movne	r7, #6
   3dfea:	2708      	moveq	r7, #8
		if (*src == ':') {
   3dfec:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   3dfee:	bf08      	it	eq
   3dff0:	3401      	addeq	r4, #1
		len = strlen(src);
   3dff2:	4620      	mov	r0, r4
   3dff4:	f7df f925 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3dff8:	2300      	movs	r3, #0
   3dffa:	4283      	cmp	r3, r0
   3dffc:	db1f      	blt.n	3e03e <z_impl_net_addr_pton+0xc2>
		for (i = 0; i < expected_groups; i++) {
   3dffe:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3e000:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   3e002:	7823      	ldrb	r3, [r4, #0]
   3e004:	2b00      	cmp	r3, #0
   3e006:	d0e1      	beq.n	3dfcc <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   3e008:	2b3a      	cmp	r3, #58	; 0x3a
   3e00a:	d02f      	beq.n	3e06c <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3e00c:	2210      	movs	r2, #16
   3e00e:	2100      	movs	r1, #0
   3e010:	4620      	mov	r0, r4
   3e012:	f7fc ff41 	bl	3ae98 <strtol>
   3e016:	2210      	movs	r2, #16
   3e018:	4681      	mov	r9, r0
   3e01a:	2100      	movs	r1, #0
   3e01c:	4620      	mov	r0, r4
   3e01e:	f7fc ff3b 	bl	3ae98 <strtol>
   3e022:	f3c9 2907 	ubfx	r9, r9, #8, #8
   3e026:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   3e02a:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   3e02e:	213a      	movs	r1, #58	; 0x3a
   3e030:	4620      	mov	r0, r4
   3e032:	f003 ff53 	bl	41edc <strchr>
				if (src) {
   3e036:	4604      	mov	r4, r0
   3e038:	b178      	cbz	r0, 3e05a <z_impl_net_addr_pton+0xde>
			src++;
   3e03a:	3401      	adds	r4, #1
   3e03c:	e010      	b.n	3e060 <z_impl_net_addr_pton+0xe4>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3e03e:	5ce2      	ldrb	r2, [r4, r3]
   3e040:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3e044:	290a      	cmp	r1, #10
   3e046:	d906      	bls.n	3e056 <z_impl_net_addr_pton+0xda>
   3e048:	f022 0120 	bic.w	r1, r2, #32
   3e04c:	3941      	subs	r1, #65	; 0x41
   3e04e:	2905      	cmp	r1, #5
   3e050:	d901      	bls.n	3e056 <z_impl_net_addr_pton+0xda>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   3e052:	2a2e      	cmp	r2, #46	; 0x2e
   3e054:	d1ba      	bne.n	3dfcc <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   3e056:	3301      	adds	r3, #1
   3e058:	e7cf      	b.n	3dffa <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   3e05a:	1e7b      	subs	r3, r7, #1
   3e05c:	42ab      	cmp	r3, r5
   3e05e:	dcb5      	bgt.n	3dfcc <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   3e060:	3501      	adds	r5, #1
   3e062:	42af      	cmp	r7, r5
   3e064:	dd16      	ble.n	3e094 <z_impl_net_addr_pton+0x118>
			if (!src || *src == '\0') {
   3e066:	2c00      	cmp	r4, #0
   3e068:	d1cb      	bne.n	3e002 <z_impl_net_addr_pton+0x86>
   3e06a:	e7af      	b.n	3dfcc <z_impl_net_addr_pton+0x50>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   3e06c:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   3e070:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   3e074:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   3e078:	3501      	adds	r5, #1
   3e07a:	42af      	cmp	r7, r5
   3e07c:	dcf6      	bgt.n	3e06c <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   3e07e:	213a      	movs	r1, #58	; 0x3a
   3e080:	4620      	mov	r0, r4
   3e082:	f003 ff73 	bl	41f6c <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   3e086:	4284      	cmp	r4, r0
   3e088:	d11f      	bne.n	3e0ca <z_impl_net_addr_pton+0x14e>
   3e08a:	2f06      	cmp	r7, #6
   3e08c:	d001      	beq.n	3e092 <z_impl_net_addr_pton+0x116>
   3e08e:	7863      	ldrb	r3, [r4, #1]
   3e090:	b9fb      	cbnz	r3, 3e0d2 <z_impl_net_addr_pton+0x156>
				src++;
   3e092:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   3e094:	2f06      	cmp	r7, #6
   3e096:	d18f      	bne.n	3dfb8 <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   3e098:	2500      	movs	r5, #0
   3e09a:	360c      	adds	r6, #12
				if (!src || !*src) {
   3e09c:	2c00      	cmp	r4, #0
   3e09e:	d095      	beq.n	3dfcc <z_impl_net_addr_pton+0x50>
   3e0a0:	7823      	ldrb	r3, [r4, #0]
   3e0a2:	2b00      	cmp	r3, #0
   3e0a4:	d092      	beq.n	3dfcc <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3e0a6:	220a      	movs	r2, #10
   3e0a8:	2100      	movs	r1, #0
   3e0aa:	4620      	mov	r0, r4
   3e0ac:	f7fc fef4 	bl	3ae98 <strtol>
				src = strchr(src, '.');
   3e0b0:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3e0b2:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   3e0b6:	4620      	mov	r0, r4
   3e0b8:	f003 ff10 	bl	41edc <strchr>
				if (src) {
   3e0bc:	4604      	mov	r4, r0
   3e0be:	b1b0      	cbz	r0, 3e0ee <z_impl_net_addr_pton+0x172>
					src++;
   3e0c0:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   3e0c2:	3501      	adds	r5, #1
   3e0c4:	2d04      	cmp	r5, #4
   3e0c6:	d1e9      	bne.n	3e09c <z_impl_net_addr_pton+0x120>
   3e0c8:	e776      	b.n	3dfb8 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   3e0ca:	2f06      	cmp	r7, #6
				tmp--;
   3e0cc:	bf08      	it	eq
   3e0ce:	f100 30ff 	addeq.w	r0, r0, #4294967295
			i = expected_groups - 1;
   3e0d2:	1e7d      	subs	r5, r7, #1
   3e0d4:	3001      	adds	r0, #1
				if (*tmp == ':') {
   3e0d6:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   3e0da:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   3e0dc:	bf08      	it	eq
   3e0de:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
   3e0e2:	2d00      	cmp	r5, #0
   3e0e4:	f6ff af72 	blt.w	3dfcc <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   3e0e8:	4284      	cmp	r4, r0
   3e0ea:	d1f4      	bne.n	3e0d6 <z_impl_net_addr_pton+0x15a>
   3e0ec:	e7a5      	b.n	3e03a <z_impl_net_addr_pton+0xbe>
					if (i < 3) {
   3e0ee:	2d03      	cmp	r5, #3
   3e0f0:	f47f af6c 	bne.w	3dfcc <z_impl_net_addr_pton+0x50>
   3e0f4:	e7e5      	b.n	3e0c2 <z_impl_net_addr_pton+0x146>

0003e0f6 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3e0f6:	e9d0 2300 	ldrd	r2, r3, [r0]
   3e0fa:	1a9b      	subs	r3, r3, r2
   3e0fc:	2b01      	cmp	r3, #1
{
   3e0fe:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3e100:	d90c      	bls.n	3e11c <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3e102:	4614      	mov	r4, r2
   3e104:	1c53      	adds	r3, r2, #1
   3e106:	6003      	str	r3, [r0, #0]
   3e108:	f814 3b02 	ldrb.w	r3, [r4], #2
   3e10c:	021b      	lsls	r3, r3, #8
   3e10e:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3e110:	6004      	str	r4, [r0, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   3e112:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3e114:	7852      	ldrb	r2, [r2, #1]
   3e116:	4313      	orrs	r3, r2
   3e118:	800b      	strh	r3, [r1, #0]
}
   3e11a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3e11c:	f06f 0015 	mvn.w	r0, #21
   3e120:	e7fb      	b.n	3e11a <unpack_uint16+0x24>

0003e122 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   3e122:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e124:	e9d0 3400 	ldrd	r3, r4, [r0]
   3e128:	429c      	cmp	r4, r3
   3e12a:	d01f      	beq.n	3e16c <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   3e12c:	1c5c      	adds	r4, r3, #1
   3e12e:	6004      	str	r4, [r0, #0]
   3e130:	781b      	ldrb	r3, [r3, #0]
   3e132:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   3e134:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   3e136:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3e138:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   3e13a:	6804      	ldr	r4, [r0, #0]
   3e13c:	42bc      	cmp	r4, r7
   3e13e:	d218      	bcs.n	3e172 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3e140:	4625      	mov	r5, r4
   3e142:	f815 3b01 	ldrb.w	r3, [r5], #1
   3e146:	6816      	ldr	r6, [r2, #0]
   3e148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   3e14c:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3e14e:	4433      	add	r3, r6
   3e150:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3e152:	6005      	str	r5, [r0, #0]
   3e154:	f994 4000 	ldrsb.w	r4, [r4]
   3e158:	2c00      	cmp	r4, #0
   3e15a:	db04      	blt.n	3e166 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   3e15c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3e160:	d204      	bcs.n	3e16c <fixed_header_decode+0x4a>
	return 0;
   3e162:	2000      	movs	r0, #0
   3e164:	e004      	b.n	3e170 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   3e166:	3107      	adds	r1, #7
   3e168:	291c      	cmp	r1, #28
   3e16a:	d1e6      	bne.n	3e13a <fixed_header_decode+0x18>
		return -EINVAL;
   3e16c:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3e170:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3e172:	f06f 000a 	mvn.w	r0, #10
   3e176:	e7fb      	b.n	3e170 <fixed_header_decode+0x4e>

0003e178 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3e178:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e17a:	e9d1 3500 	ldrd	r3, r5, [r1]
   3e17e:	429d      	cmp	r5, r3
   3e180:	d102      	bne.n	3e188 <connect_ack_decode+0x10>
		return -EINVAL;
   3e182:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3e186:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3e188:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e18a:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3e18c:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e18e:	d0f8      	beq.n	3e182 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3e190:	461d      	mov	r5, r3
   3e192:	f815 4b02 	ldrb.w	r4, [r5], #2
   3e196:	600d      	str	r5, [r1, #0]
   3e198:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3e19a:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
	return 0;
   3e19e:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3e1a0:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3e1a2:	bf04      	itt	eq
   3e1a4:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   3e1a8:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3e1aa:	7051      	strb	r1, [r2, #1]
	return 0;
   3e1ac:	e7eb      	b.n	3e186 <connect_ack_decode+0xe>

0003e1ae <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3e1ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3e1b2:	461c      	mov	r4, r3
   3e1b4:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3e1b6:	7da2      	ldrb	r2, [r4, #22]
   3e1b8:	0043      	lsls	r3, r0, #1
   3e1ba:	f022 0203 	bic.w	r2, r2, #3
   3e1be:	f003 0302 	and.w	r3, r3, #2
   3e1c2:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3e1c4:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3e1c8:	7220      	strb	r0, [r4, #8]
{
   3e1ca:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   3e1cc:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3e1ce:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3e1d0:	f10d 0106 	add.w	r1, sp, #6
   3e1d4:	f7ff ff8f 	bl	3e0f6 <unpack_uint16>
	if (err_code != 0) {
   3e1d8:	4606      	mov	r6, r0
   3e1da:	b9c0      	cbnz	r0, 3e20e <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3e1dc:	683b      	ldr	r3, [r7, #0]
   3e1de:	687a      	ldr	r2, [r7, #4]
   3e1e0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3e1e4:	1ad2      	subs	r2, r2, r3
   3e1e6:	42aa      	cmp	r2, r5
   3e1e8:	da02      	bge.n	3e1f0 <publish_decode+0x42>

	if (var_length < var_header_length) {
		NET_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   3e1ea:	f06f 0615 	mvn.w	r6, #21
   3e1ee:	e00e      	b.n	3e20e <publish_decode+0x60>
	str->size = utf8_strlen;
   3e1f0:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3e1f2:	b185      	cbz	r5, 3e216 <publish_decode+0x68>
		str->utf8 = buf->cur;
   3e1f4:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3e1f6:	442b      	add	r3, r5
   3e1f8:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3e1fa:	7a23      	ldrb	r3, [r4, #8]
   3e1fc:	b96b      	cbnz	r3, 3e21a <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3e1fe:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   3e200:	45a8      	cmp	r8, r5
   3e202:	d3f2      	bcc.n	3e1ea <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   3e204:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3e206:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3e20a:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3e20c:	6125      	str	r5, [r4, #16]

	return 0;
}
   3e20e:	4630      	mov	r0, r6
   3e210:	b002      	add	sp, #8
   3e212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   3e216:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3e218:	e7ef      	b.n	3e1fa <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   3e21a:	4638      	mov	r0, r7
   3e21c:	f104 0114 	add.w	r1, r4, #20
   3e220:	f7ff ff69 	bl	3e0f6 <unpack_uint16>
		if (err_code != 0) {
   3e224:	b908      	cbnz	r0, 3e22a <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   3e226:	3504      	adds	r5, #4
   3e228:	e7ea      	b.n	3e200 <publish_decode+0x52>
   3e22a:	4606      	mov	r6, r0
   3e22c:	e7ef      	b.n	3e20e <publish_decode+0x60>

0003e22e <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e22e:	f7ff bf62 	b.w	3e0f6 <unpack_uint16>

0003e232 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e232:	f7ff bf60 	b.w	3e0f6 <unpack_uint16>

0003e236 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e236:	f7ff bf5e 	b.w	3e0f6 <unpack_uint16>

0003e23a <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e23a:	f7ff bf5c 	b.w	3e0f6 <unpack_uint16>

0003e23e <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3e23e:	b538      	push	{r3, r4, r5, lr}
   3e240:	4605      	mov	r5, r0
   3e242:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3e244:	f7ff ff57 	bl	3e0f6 <unpack_uint16>
	if (err_code != 0) {
   3e248:	b930      	cbnz	r0, 3e258 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3e24a:	e9d5 2300 	ldrd	r2, r3, [r5]
   3e24e:	1a99      	subs	r1, r3, r2
	str->len = length;
   3e250:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3e252:	b111      	cbz	r1, 3e25a <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3e254:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3e256:	602b      	str	r3, [r5, #0]
}
   3e258:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3e25a:	6060      	str	r0, [r4, #4]
   3e25c:	e7fc      	b.n	3e258 <subscribe_ack_decode+0x1a>

0003e25e <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e25e:	f7ff bf4a 	b.w	3e0f6 <unpack_uint16>

0003e262 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3e262:	e9d1 3200 	ldrd	r3, r2, [r1]
   3e266:	1ad2      	subs	r2, r2, r3
   3e268:	2a01      	cmp	r2, #1
   3e26a:	d909      	bls.n	3e280 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3e26c:	1c5a      	adds	r2, r3, #1
   3e26e:	600a      	str	r2, [r1, #0]
   3e270:	0a02      	lsrs	r2, r0, #8
   3e272:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3e274:	680b      	ldr	r3, [r1, #0]
   3e276:	1c5a      	adds	r2, r3, #1
   3e278:	600a      	str	r2, [r1, #0]
   3e27a:	7018      	strb	r0, [r3, #0]
	return 0;
   3e27c:	2000      	movs	r0, #0
   3e27e:	4770      	bx	lr
		return -ENOMEM;
   3e280:	f06f 000b 	mvn.w	r0, #11
}
   3e284:	4770      	bx	lr

0003e286 <pack_utf8_str>:
{
   3e286:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e288:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3e28c:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e28e:	6840      	ldr	r0, [r0, #4]
   3e290:	1a9b      	subs	r3, r3, r2
   3e292:	1c82      	adds	r2, r0, #2
   3e294:	4293      	cmp	r3, r2
{
   3e296:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e298:	d30d      	bcc.n	3e2b6 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3e29a:	b280      	uxth	r0, r0
   3e29c:	f7ff ffe1 	bl	3e262 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3e2a0:	e9d5 1200 	ldrd	r1, r2, [r5]
   3e2a4:	6820      	ldr	r0, [r4, #0]
   3e2a6:	f003 fc3b 	bl	41b20 <memcpy>
	return 0;
   3e2aa:	2000      	movs	r0, #0
	buf->cur += str->size;
   3e2ac:	6823      	ldr	r3, [r4, #0]
   3e2ae:	686a      	ldr	r2, [r5, #4]
   3e2b0:	4413      	add	r3, r2
   3e2b2:	6023      	str	r3, [r4, #0]
}
   3e2b4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3e2b6:	f06f 000b 	mvn.w	r0, #11
   3e2ba:	e7fb      	b.n	3e2b4 <pack_utf8_str+0x2e>

0003e2bc <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   3e2bc:	6813      	ldr	r3, [r2, #0]
{
   3e2be:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3e2c0:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3e2c2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   3e2c6:	d227      	bcs.n	3e318 <mqtt_encode_fixed_header+0x5c>
   3e2c8:	4625      	mov	r5, r4
   3e2ca:	2600      	movs	r6, #0
	} while (length > 0);
   3e2cc:	09ed      	lsrs	r5, r5, #7
   3e2ce:	b2f3      	uxtb	r3, r6
   3e2d0:	f106 0601 	add.w	r6, r6, #1
   3e2d4:	d1fa      	bne.n	3e2cc <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   3e2d6:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e2d8:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3e2da:	b2db      	uxtb	r3, r3
   3e2dc:	425d      	negs	r5, r3
   3e2de:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e2e0:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   3e2e2:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   3e2e4:	bf1e      	ittt	ne
   3e2e6:	3301      	addne	r3, #1
   3e2e8:	6013      	strne	r3, [r2, #0]
   3e2ea:	5548      	strbne	r0, [r1, r5]
	return 0;
   3e2ec:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3e2ee:	6813      	ldr	r3, [r2, #0]
   3e2f0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3e2f4:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   3e2f6:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3e2f8:	bf1f      	itttt	ne
   3e2fa:	6811      	ldrne	r1, [r2, #0]
   3e2fc:	780b      	ldrbne	r3, [r1, #0]
   3e2fe:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   3e302:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   3e304:	6813      	ldr	r3, [r2, #0]
   3e306:	3301      	adds	r3, #1
   3e308:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3e30a:	2800      	cmp	r0, #0
   3e30c:	d1ef      	bne.n	3e2ee <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3e30e:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   3e310:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   3e312:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3e314:	6053      	str	r3, [r2, #4]
}
   3e316:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3e318:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3e31c:	e7fb      	b.n	3e316 <mqtt_encode_fixed_header+0x5a>

0003e31e <mqtt_message_id_only_enc>:
{
   3e31e:	b570      	push	{r4, r5, r6, lr}
   3e320:	4606      	mov	r6, r0
   3e322:	4614      	mov	r4, r2
	if (message_id == 0U) {
   3e324:	4608      	mov	r0, r1
   3e326:	b169      	cbz	r1, 3e344 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e328:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3e32a:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e32c:	3505      	adds	r5, #5
   3e32e:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3e330:	f7ff ff97 	bl	3e262 <pack_uint16>
	if (err_code != 0) {
   3e334:	b940      	cbnz	r0, 3e348 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e336:	4622      	mov	r2, r4
   3e338:	4629      	mov	r1, r5
   3e33a:	4630      	mov	r0, r6
}
   3e33c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e340:	f7ff bfbc 	b.w	3e2bc <mqtt_encode_fixed_header>
		return -EINVAL;
   3e344:	f06f 0015 	mvn.w	r0, #21
}
   3e348:	bd70      	pop	{r4, r5, r6, pc}

0003e34a <publish_encode>:
{
   3e34a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e34e:	7d87      	ldrb	r7, [r0, #22]
   3e350:	7a04      	ldrb	r4, [r0, #8]
   3e352:	f007 0801 	and.w	r8, r7, #1
{
   3e356:	4605      	mov	r5, r0
   3e358:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e35a:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3e35e:	b10c      	cbz	r4, 3e364 <publish_encode+0x1a>
   3e360:	8a83      	ldrh	r3, [r0, #20]
   3e362:	b383      	cbz	r3, 3e3c6 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e364:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e368:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e36a:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e36c:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e36e:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e372:	f7ff ff88 	bl	3e286 <pack_utf8_str>
	if (err_code != 0) {
   3e376:	b9b0      	cbnz	r0, 3e3a6 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   3e378:	7a2b      	ldrb	r3, [r5, #8]
   3e37a:	b9b3      	cbnz	r3, 3e3aa <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e37c:	0060      	lsls	r0, r4, #1
   3e37e:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3e382:	692a      	ldr	r2, [r5, #16]
   3e384:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e388:	4338      	orrs	r0, r7
   3e38a:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3e38e:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e390:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3e394:	464a      	mov	r2, r9
   3e396:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   3e398:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3e39c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3e3a0:	f7ff ff8c 	bl	3e2bc <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3e3a4:	b140      	cbz	r0, 3e3b8 <publish_encode+0x6e>
}
   3e3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3e3aa:	4649      	mov	r1, r9
   3e3ac:	8aa8      	ldrh	r0, [r5, #20]
   3e3ae:	f7ff ff58 	bl	3e262 <pack_uint16>
		if (err_code != 0) {
   3e3b2:	2800      	cmp	r0, #0
   3e3b4:	d0e2      	beq.n	3e37c <publish_encode+0x32>
   3e3b6:	e7f6      	b.n	3e3a6 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   3e3b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3e3bc:	692a      	ldr	r2, [r5, #16]
   3e3be:	1a9b      	subs	r3, r3, r2
   3e3c0:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   3e3c4:	e7ef      	b.n	3e3a6 <publish_encode+0x5c>
		return -EINVAL;
   3e3c6:	f06f 0015 	mvn.w	r0, #21
   3e3ca:	e7ec      	b.n	3e3a6 <publish_encode+0x5c>

0003e3cc <publish_ack_encode>:
{
   3e3cc:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3e3ce:	8801      	ldrh	r1, [r0, #0]
   3e3d0:	2040      	movs	r0, #64	; 0x40
   3e3d2:	f7ff bfa4 	b.w	3e31e <mqtt_message_id_only_enc>

0003e3d6 <subscribe_encode>:
{
   3e3d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e3da:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   3e3dc:	88c0      	ldrh	r0, [r0, #6]
{
   3e3de:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3e3e0:	b330      	cbz	r0, 3e430 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e3e2:	680f      	ldr	r7, [r1, #0]
   3e3e4:	3705      	adds	r7, #5
   3e3e6:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3e3e8:	f7ff ff3b 	bl	3e262 <pack_uint16>
	if (err_code != 0) {
   3e3ec:	4604      	mov	r4, r0
   3e3ee:	bb08      	cbnz	r0, 3e434 <subscribe_encode+0x5e>
   3e3f0:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3e3f4:	88b3      	ldrh	r3, [r6, #4]
   3e3f6:	42a3      	cmp	r3, r4
   3e3f8:	dc06      	bgt.n	3e408 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e3fa:	462a      	mov	r2, r5
   3e3fc:	4639      	mov	r1, r7
}
   3e3fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e402:	2082      	movs	r0, #130	; 0x82
   3e404:	f7ff bf5a 	b.w	3e2bc <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e408:	fb08 f904 	mul.w	r9, r8, r4
   3e40c:	6830      	ldr	r0, [r6, #0]
   3e40e:	4629      	mov	r1, r5
   3e410:	4448      	add	r0, r9
   3e412:	f7ff ff38 	bl	3e286 <pack_utf8_str>
		if (err_code != 0) {
   3e416:	b980      	cbnz	r0, 3e43a <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3e418:	6833      	ldr	r3, [r6, #0]
   3e41a:	444b      	add	r3, r9
   3e41c:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e41e:	e9d5 3100 	ldrd	r3, r1, [r5]
   3e422:	4299      	cmp	r1, r3
   3e424:	d00b      	beq.n	3e43e <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3e426:	1c59      	adds	r1, r3, #1
   3e428:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3e42a:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3e42c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   3e42e:	e7e1      	b.n	3e3f4 <subscribe_encode+0x1e>
		return -EINVAL;
   3e430:	f06f 0415 	mvn.w	r4, #21
}
   3e434:	4620      	mov	r0, r4
   3e436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e43a:	4604      	mov	r4, r0
   3e43c:	e7fa      	b.n	3e434 <subscribe_encode+0x5e>
		return -ENOMEM;
   3e43e:	f06f 040b 	mvn.w	r4, #11
   3e442:	e7f7      	b.n	3e434 <subscribe_encode+0x5e>

0003e444 <unsubscribe_encode>:
{
   3e444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e448:	680f      	ldr	r7, [r1, #0]
{
   3e44a:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e44c:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   3e44e:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e450:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3e452:	f7ff ff06 	bl	3e262 <pack_uint16>
{
   3e456:	460d      	mov	r5, r1
	if (err_code != 0) {
   3e458:	4604      	mov	r4, r0
   3e45a:	b9a8      	cbnz	r0, 3e488 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e45c:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3e460:	88b3      	ldrh	r3, [r6, #4]
   3e462:	42a3      	cmp	r3, r4
   3e464:	dc06      	bgt.n	3e474 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e466:	462a      	mov	r2, r5
   3e468:	4639      	mov	r1, r7
}
   3e46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e46e:	20a2      	movs	r0, #162	; 0xa2
   3e470:	f7ff bf24 	b.w	3e2bc <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e474:	6830      	ldr	r0, [r6, #0]
   3e476:	4629      	mov	r1, r5
   3e478:	fb08 0004 	mla	r0, r8, r4, r0
   3e47c:	f7ff ff03 	bl	3e286 <pack_utf8_str>
		if (err_code != 0) {
   3e480:	b908      	cbnz	r0, 3e486 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3e482:	3401      	adds	r4, #1
   3e484:	e7ec      	b.n	3e460 <unsubscribe_encode+0x1c>
   3e486:	4604      	mov	r4, r0
}
   3e488:	4620      	mov	r0, r4
   3e48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003e48e <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   3e48e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e490:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   3e492:	e9d1 3100 	ldrd	r3, r1, [r1]
   3e496:	1acb      	subs	r3, r1, r3
   3e498:	4293      	cmp	r3, r2
{
   3e49a:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3e49c:	d301      	bcc.n	3e4a2 <mqtt_read_message_chunk+0x14>
		return 0;
   3e49e:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   3e4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   3e4a2:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   3e4a4:	190f      	adds	r7, r1, r4
   3e4a6:	e9d0 231c 	ldrd	r2, r3, [r0, #112]	; 0x70
   3e4aa:	4413      	add	r3, r2
   3e4ac:	429f      	cmp	r7, r3
   3e4ae:	d813      	bhi.n	3e4d8 <mqtt_read_message_chunk+0x4a>
   3e4b0:	4297      	cmp	r7, r2
   3e4b2:	d311      	bcc.n	3e4d8 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   3e4b4:	2300      	movs	r3, #0
   3e4b6:	4622      	mov	r2, r4
   3e4b8:	f7e6 f84e 	bl	24558 <mqtt_transport_read>
	if (len < 0) {
   3e4bc:	2800      	cmp	r0, #0
   3e4be:	dbef      	blt.n	3e4a0 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   3e4c0:	d00d      	beq.n	3e4de <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   3e4c2:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   3e4c4:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   3e4c6:	4403      	add	r3, r0
   3e4c8:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3e4ca:	686b      	ldr	r3, [r5, #4]
   3e4cc:	4403      	add	r3, r0
   3e4ce:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3e4d0:	d2e5      	bcs.n	3e49e <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   3e4d2:	f06f 000a 	mvn.w	r0, #10
   3e4d6:	e7e3      	b.n	3e4a0 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   3e4d8:	f06f 000b 	mvn.w	r0, #11
   3e4dc:	e7e0      	b.n	3e4a0 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   3e4de:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3e4e2:	e7dd      	b.n	3e4a0 <mqtt_read_message_chunk+0x12>

0003e4e4 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3e4e4:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3e4e6:	6f03      	ldr	r3, [r0, #112]	; 0x70
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e4e8:	69c2      	ldr	r2, [r0, #28]
{
   3e4ea:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3e4ec:	9302      	str	r3, [sp, #8]
{
   3e4ee:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e4f0:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3e4f2:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e4f4:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3e4f6:	4628      	mov	r0, r5
   3e4f8:	a902      	add	r1, sp, #8
   3e4fa:	f7ff ffc8 	bl	3e48e <mqtt_read_message_chunk>
		if (err_code < 0) {
   3e4fe:	1e04      	subs	r4, r0, #0
   3e500:	db2d      	blt.n	3e55e <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   3e502:	6f2b      	ldr	r3, [r5, #112]	; 0x70
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e504:	aa01      	add	r2, sp, #4
   3e506:	f10d 0103 	add.w	r1, sp, #3
   3e50a:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3e50c:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e50e:	f7ff fe08 	bl	3e122 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3e512:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e516:	4604      	mov	r4, r0
		chunk_size = 1U;
   3e518:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3e51c:	d0eb      	beq.n	3e4f6 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3e51e:	2800      	cmp	r0, #0
   3e520:	db21      	blt.n	3e566 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3e522:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3e526:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3e52a:	2b30      	cmp	r3, #48	; 0x30
   3e52c:	d11e      	bne.n	3e56c <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   3e52e:	2202      	movs	r2, #2
   3e530:	4628      	mov	r0, r5
   3e532:	a902      	add	r1, sp, #8
   3e534:	f7ff ffab 	bl	3e48e <mqtt_read_message_chunk>
	if (err_code < 0) {
   3e538:	1e04      	subs	r4, r0, #0
   3e53a:	db10      	blt.n	3e55e <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   3e53c:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3e53e:	f016 0f06 	tst.w	r6, #6
   3e542:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3e544:	4628      	mov	r0, r5
   3e546:	ba52      	rev16	r2, r2
   3e548:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   3e54a:	bf0c      	ite	eq
   3e54c:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   3e54e:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   3e550:	a902      	add	r1, sp, #8
   3e552:	f7ff ff9c 	bl	3e48e <mqtt_read_message_chunk>
	if (err_code < 0) {
   3e556:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   3e55a:	2c00      	cmp	r4, #0
   3e55c:	da0d      	bge.n	3e57a <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3e55e:	f114 0f0b 	cmn.w	r4, #11
   3e562:	d100      	bne.n	3e566 <mqtt_handle_rx+0x82>
   3e564:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3e566:	4620      	mov	r0, r4
   3e568:	b00c      	add	sp, #48	; 0x30
   3e56a:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3e56c:	4628      	mov	r0, r5
   3e56e:	9a01      	ldr	r2, [sp, #4]
   3e570:	a902      	add	r1, sp, #8
   3e572:	f7ff ff8c 	bl	3e48e <mqtt_read_message_chunk>
   3e576:	4604      	mov	r4, r0
   3e578:	e7ef      	b.n	3e55a <mqtt_handle_rx+0x76>
	evt.result = 0;
   3e57a:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3e57c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e580:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3e582:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3e586:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3e588:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3e58a:	d066      	beq.n	3e65a <mqtt_handle_rx+0x176>
   3e58c:	d813      	bhi.n	3e5b6 <mqtt_handle_rx+0xd2>
   3e58e:	2b40      	cmp	r3, #64	; 0x40
   3e590:	d059      	beq.n	3e646 <mqtt_handle_rx+0x162>
   3e592:	d806      	bhi.n	3e5a2 <mqtt_handle_rx+0xbe>
   3e594:	2b20      	cmp	r3, #32
   3e596:	d02f      	beq.n	3e5f8 <mqtt_handle_rx+0x114>
   3e598:	2b30      	cmp	r3, #48	; 0x30
   3e59a:	d048      	beq.n	3e62e <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   3e59c:	2400      	movs	r4, #0
   3e59e:	61ec      	str	r4, [r5, #28]
	return 0;
   3e5a0:	e7e1      	b.n	3e566 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   3e5a2:	2b50      	cmp	r3, #80	; 0x50
   3e5a4:	d1fa      	bne.n	3e59c <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   3e5a6:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e5a8:	a905      	add	r1, sp, #20
   3e5aa:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3e5ac:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e5b0:	f7ff fe3f 	bl	3e232 <publish_receive_decode>
   3e5b4:	e04e      	b.n	3e654 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3e5b6:	2bb0      	cmp	r3, #176	; 0xb0
   3e5b8:	d05f      	beq.n	3e67a <mqtt_handle_rx+0x196>
   3e5ba:	d80b      	bhi.n	3e5d4 <mqtt_handle_rx+0xf0>
   3e5bc:	2b70      	cmp	r3, #112	; 0x70
   3e5be:	d054      	beq.n	3e66a <mqtt_handle_rx+0x186>
   3e5c0:	2b90      	cmp	r3, #144	; 0x90
   3e5c2:	d1eb      	bne.n	3e59c <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   3e5c4:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e5c6:	a905      	add	r1, sp, #20
   3e5c8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3e5ca:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e5ce:	f7ff fe36 	bl	3e23e <subscribe_ack_decode>
   3e5d2:	e03f      	b.n	3e654 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3e5d4:	2bd0      	cmp	r3, #208	; 0xd0
   3e5d6:	d1e1      	bne.n	3e59c <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   3e5d8:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
	int err_code = 0;
   3e5dc:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   3e5de:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3e5e0:	bfc8      	it	gt
   3e5e2:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   3e5e6:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   3e5ea:	bfc8      	it	gt
   3e5ec:	b252      	sxtbgt	r2, r2
   3e5ee:	f885 2083 	strb.w	r2, [r5, #131]	; 0x83
		evt.type = MQTT_EVT_PINGRESP;
   3e5f2:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   3e5f6:	e010      	b.n	3e61a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   3e5f8:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3e5fc:	4628      	mov	r0, r5
   3e5fe:	aa05      	add	r2, sp, #20
   3e600:	a902      	add	r1, sp, #8
   3e602:	f7ff fdb9 	bl	3e178 <connect_ack_decode>
		if (err_code == 0) {
   3e606:	4604      	mov	r4, r0
   3e608:	bb28      	cbnz	r0, 3e656 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   3e60a:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3e60e:	b95a      	cbnz	r2, 3e628 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3e610:	69ab      	ldr	r3, [r5, #24]
   3e612:	f043 0304 	orr.w	r3, r3, #4
   3e616:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3e618:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3e61a:	4628      	mov	r0, r5
   3e61c:	a904      	add	r1, sp, #16
   3e61e:	f000 f8f1 	bl	3e804 <event_notify>
	if (err_code < 0) {
   3e622:	2c00      	cmp	r4, #0
   3e624:	daba      	bge.n	3e59c <mqtt_handle_rx+0xb8>
   3e626:	e79e      	b.n	3e566 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   3e628:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   3e62c:	e7f4      	b.n	3e618 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   3e62e:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e630:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3e632:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e636:	ab05      	add	r3, sp, #20
   3e638:	f7ff fdb9 	bl	3e1ae <publish_decode>
		client->internal.remaining_payload =
   3e63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e63e:	4604      	mov	r4, r0
		evt.result = err_code;
   3e640:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3e642:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3e644:	e7e9      	b.n	3e61a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   3e646:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e648:	a905      	add	r1, sp, #20
   3e64a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3e64c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e650:	f7ff fded 	bl	3e22e <publish_ack_decode>
   3e654:	4604      	mov	r4, r0
		evt.result = err_code;
   3e656:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3e658:	e7df      	b.n	3e61a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   3e65a:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e65c:	a905      	add	r1, sp, #20
   3e65e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3e660:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e664:	f7ff fde7 	bl	3e236 <publish_release_decode>
   3e668:	e7f4      	b.n	3e654 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   3e66a:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e66c:	a905      	add	r1, sp, #20
   3e66e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3e670:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e674:	f7ff fde1 	bl	3e23a <publish_complete_decode>
   3e678:	e7ec      	b.n	3e654 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   3e67a:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e67c:	a905      	add	r1, sp, #20
   3e67e:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3e682:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e686:	f7ff fdea 	bl	3e25e <unsubscribe_ack_decode>
   3e68a:	e7e3      	b.n	3e654 <mqtt_handle_rx+0x170>

0003e68c <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   3e68c:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   3e68e:	6d85      	ldr	r5, [r0, #88]	; 0x58
{
   3e690:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3e692:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3e694:	2206      	movs	r2, #6
   3e696:	2101      	movs	r1, #1
   3e698:	f7e3 fb8e 	bl	21db8 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   3e69c:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3e69e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3e6a0:	da04      	bge.n	3e6ac <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   3e6a2:	f7ff fc02 	bl	3deaa <__errno>
   3e6a6:	6800      	ldr	r0, [r0, #0]
   3e6a8:	4240      	negs	r0, r0
}
   3e6aa:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   3e6ac:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   3e6ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
		peer_addr_size = sizeof(struct sockaddr_in);
   3e6b0:	2b01      	cmp	r3, #1
   3e6b2:	bf14      	ite	ne
   3e6b4:	2218      	movne	r2, #24
   3e6b6:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   3e6b8:	f7ff f90c 	bl	3d8d4 <z_impl_zsock_connect>
	if (ret < 0) {
   3e6bc:	2800      	cmp	r0, #0
   3e6be:	da03      	bge.n	3e6c8 <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   3e6c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e6c2:	f7ff f8e3 	bl	3d88c <z_impl_zsock_close>
   3e6c6:	e7ec      	b.n	3e6a2 <mqtt_client_tcp_connect+0x16>
	return 0;
   3e6c8:	2000      	movs	r0, #0
   3e6ca:	e7ee      	b.n	3e6aa <mqtt_client_tcp_connect+0x1e>

0003e6cc <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3e6cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3e6d0:	2400      	movs	r4, #0
{
   3e6d2:	4606      	mov	r6, r0
   3e6d4:	460f      	mov	r7, r1
   3e6d6:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3e6d8:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3e6da:	42ac      	cmp	r4, r5
   3e6dc:	d301      	bcc.n	3e6e2 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3e6de:	2000      	movs	r0, #0
   3e6e0:	e00d      	b.n	3e6fe <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   3e6e2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3e6e4:	2300      	movs	r3, #0
   3e6e6:	e9cd 8800 	strd	r8, r8, [sp]
   3e6ea:	1b2a      	subs	r2, r5, r4
   3e6ec:	1939      	adds	r1, r7, r4
   3e6ee:	f7ff f918 	bl	3d922 <z_impl_zsock_sendto>
		if (ret < 0) {
   3e6f2:	1e03      	subs	r3, r0, #0
   3e6f4:	da06      	bge.n	3e704 <mqtt_client_tcp_write+0x38>
			return -errno;
   3e6f6:	f7ff fbd8 	bl	3deaa <__errno>
   3e6fa:	6800      	ldr	r0, [r0, #0]
   3e6fc:	4240      	negs	r0, r0
}
   3e6fe:	b002      	add	sp, #8
   3e700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3e704:	441c      	add	r4, r3
   3e706:	e7e8      	b.n	3e6da <mqtt_client_tcp_write+0xe>

0003e708 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3e70c:	2500      	movs	r5, #0
{
   3e70e:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3e710:	462b      	mov	r3, r5
{
   3e712:	460c      	mov	r4, r1
   3e714:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e716:	428b      	cmp	r3, r1
   3e718:	d110      	bne.n	3e73c <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   3e71a:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3e71c:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3e71e:	42ae      	cmp	r6, r5
   3e720:	d216      	bcs.n	3e750 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   3e722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3e724:	2200      	movs	r2, #0
   3e726:	4621      	mov	r1, r4
   3e728:	f7ff f92b 	bl	3d982 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3e72c:	1e03      	subs	r3, r0, #0
   3e72e:	da0c      	bge.n	3e74a <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   3e730:	f7ff fbbb 	bl	3deaa <__errno>
   3e734:	6800      	ldr	r0, [r0, #0]
   3e736:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3e738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3e73c:	68a2      	ldr	r2, [r4, #8]
   3e73e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e742:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e744:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3e746:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3e748:	e7e5      	b.n	3e716 <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   3e74a:	441e      	add	r6, r3
		if (offset >= total_len) {
   3e74c:	42b5      	cmp	r5, r6
   3e74e:	d801      	bhi.n	3e754 <mqtt_client_tcp_write_msg+0x4c>
	return 0;
   3e750:	2000      	movs	r0, #0
   3e752:	e7f1      	b.n	3e738 <mqtt_client_tcp_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3e754:	2000      	movs	r0, #0
   3e756:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3e75a:	4560      	cmp	r0, ip
   3e75c:	d0df      	beq.n	3e71e <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3e75e:	68a2      	ldr	r2, [r4, #8]
   3e760:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3e764:	6851      	ldr	r1, [r2, #4]
   3e766:	4299      	cmp	r1, r3
   3e768:	d905      	bls.n	3e776 <mqtt_client_tcp_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e76a:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3e76c:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e76e:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3e770:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3e772:	6010      	str	r0, [r2, #0]
				break;
   3e774:	e7d3      	b.n	3e71e <mqtt_client_tcp_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3e776:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3e778:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3e77c:	3001      	adds	r0, #1
   3e77e:	e7ec      	b.n	3e75a <mqtt_client_tcp_write_msg+0x52>

0003e780 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e780:	b513      	push	{r0, r1, r4, lr}
   3e782:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3e784:	42a3      	cmp	r3, r4
   3e786:	bf14      	ite	ne
   3e788:	4623      	movne	r3, r4
   3e78a:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   3e78c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e78e:	e9cd 4400 	strd	r4, r4, [sp]
   3e792:	f7ff f91d 	bl	3d9d0 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e796:	2800      	cmp	r0, #0
   3e798:	da03      	bge.n	3e7a2 <mqtt_client_tcp_read+0x22>
		return -errno;
   3e79a:	f7ff fb86 	bl	3deaa <__errno>
   3e79e:	6800      	ldr	r0, [r0, #0]
   3e7a0:	4240      	negs	r0, r0
	}

	return ret;
}
   3e7a2:	b002      	add	sp, #8
   3e7a4:	bd10      	pop	{r4, pc}

0003e7a6 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3e7a6:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   3e7a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e7aa:	f7ff f86f 	bl	3d88c <z_impl_zsock_close>
	if (ret < 0) {
   3e7ae:	2800      	cmp	r0, #0
   3e7b0:	da04      	bge.n	3e7bc <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3e7b2:	f7ff fb7a 	bl	3deaa <__errno>
   3e7b6:	6800      	ldr	r0, [r0, #0]
   3e7b8:	4240      	negs	r0, r0
	}

	return 0;
}
   3e7ba:	bd08      	pop	{r3, pc}
	return 0;
   3e7bc:	2000      	movs	r0, #0
   3e7be:	e7fc      	b.n	3e7ba <mqtt_client_tcp_disconnect+0x14>

0003e7c0 <k_uptime_get_32>:
{
   3e7c0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   3e7c2:	f003 f83d 	bl	41840 <z_impl_k_uptime_ticks>
   3e7c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e7ca:	fba0 3002 	umull	r3, r0, r0, r2
   3e7ce:	fb02 0101 	mla	r1, r2, r1, r0
   3e7d2:	0bd8      	lsrs	r0, r3, #15
}
   3e7d4:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   3e7d8:	bd08      	pop	{r3, pc}

0003e7da <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3e7da:	b538      	push	{r3, r4, r5, lr}
   3e7dc:	4604      	mov	r4, r0
   3e7de:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3e7e0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
   3e7e2:	2100      	movs	r1, #0
   3e7e4:	6f80      	ldr	r0, [r0, #120]	; 0x78
   3e7e6:	f003 f9bb 	bl	41b60 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3e7ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	buf->end = client->tx_buf + client->tx_buf_size;
   3e7ec:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	buf->cur = client->tx_buf;
   3e7ee:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3e7f0:	4413      	add	r3, r2
   3e7f2:	606b      	str	r3, [r5, #4]
}
   3e7f4:	bd38      	pop	{r3, r4, r5, pc}

0003e7f6 <verify_tx_state.isra.0>:
}

static int verify_tx_state(const struct mqtt_client *client)
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
   3e7f6:	f010 0f04 	tst.w	r0, #4
	}

	return 0;
}
   3e7fa:	bf0c      	ite	eq
   3e7fc:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   3e800:	2000      	movne	r0, #0
   3e802:	4770      	bx	lr

0003e804 <event_notify>:
{
   3e804:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   3e806:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
   3e808:	4604      	mov	r4, r0
   3e80a:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   3e80c:	b15b      	cbz	r3, 3e826 <event_notify+0x22>
		mqtt_mutex_unlock(client);
   3e80e:	f7e5 febb 	bl	24588 <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   3e812:	4620      	mov	r0, r4
   3e814:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3e816:	9901      	ldr	r1, [sp, #4]
   3e818:	4798      	blx	r3
		mqtt_mutex_lock(client);
   3e81a:	4620      	mov	r0, r4
}
   3e81c:	b002      	add	sp, #8
   3e81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   3e822:	f7e5 bec5 	b.w	245b0 <mqtt_mutex_lock>
}
   3e826:	b002      	add	sp, #8
   3e828:	bd10      	pop	{r4, pc}

0003e82a <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   3e82a:	b530      	push	{r4, r5, lr}
   3e82c:	b089      	sub	sp, #36	; 0x24
   3e82e:	4604      	mov	r4, r0
   3e830:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   3e832:	f7e5 fe9f 	bl	24574 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e836:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   3e838:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   3e83a:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   3e83e:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   3e842:	4668      	mov	r0, sp
   3e844:	f003 f98c 	bl	41b60 <memset>
   3e848:	2301      	movs	r3, #1
		event_notify(client, &evt);
   3e84a:	4669      	mov	r1, sp
   3e84c:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   3e84e:	f88d 3000 	strb.w	r3, [sp]
   3e852:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   3e854:	f7ff ffd6 	bl	3e804 <event_notify>
}
   3e858:	b009      	add	sp, #36	; 0x24
   3e85a:	bd30      	pop	{r4, r5, pc}

0003e85c <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3e85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e85e:	4617      	mov	r7, r2
   3e860:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3e862:	4605      	mov	r5, r0
{
   3e864:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   3e866:	b320      	cbz	r0, 3e8b2 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   3e868:	f7e5 fea2 	bl	245b0 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3e86c:	6a2c      	ldr	r4, [r5, #32]
   3e86e:	b1b4      	cbz	r4, 3e89e <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3e870:	42bc      	cmp	r4, r7
   3e872:	4622      	mov	r2, r4
   3e874:	4633      	mov	r3, r6
   3e876:	bf28      	it	cs
   3e878:	463a      	movcs	r2, r7
   3e87a:	4628      	mov	r0, r5
   3e87c:	9901      	ldr	r1, [sp, #4]
   3e87e:	f7e5 fe6b 	bl	24558 <mqtt_transport_read>
   3e882:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3e884:	b916      	cbnz	r6, 3e88c <read_publish_payload+0x30>
   3e886:	f110 0f0b 	cmn.w	r0, #11
   3e88a:	d008      	beq.n	3e89e <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   3e88c:	2c00      	cmp	r4, #0
   3e88e:	dc0c      	bgt.n	3e8aa <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   3e890:	bf08      	it	eq
   3e892:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   3e896:	4628      	mov	r0, r5
   3e898:	4621      	mov	r1, r4
   3e89a:	f7ff ffc6 	bl	3e82a <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3e89e:	4628      	mov	r0, r5
   3e8a0:	f7e5 fe72 	bl	24588 <mqtt_mutex_unlock>

	return ret;
}
   3e8a4:	4620      	mov	r0, r4
   3e8a6:	b003      	add	sp, #12
   3e8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   3e8aa:	6a2b      	ldr	r3, [r5, #32]
   3e8ac:	1b1b      	subs	r3, r3, r4
   3e8ae:	622b      	str	r3, [r5, #32]
   3e8b0:	e7f5      	b.n	3e89e <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   3e8b2:	f06f 0415 	mvn.w	r4, #21
   3e8b6:	e7f5      	b.n	3e8a4 <read_publish_payload+0x48>

0003e8b8 <client_write>:
{
   3e8b8:	b538      	push	{r3, r4, r5, lr}
   3e8ba:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   3e8bc:	f7e5 fe32 	bl	24524 <mqtt_transport_write>
	if (err_code < 0) {
   3e8c0:	1e04      	subs	r4, r0, #0
   3e8c2:	da05      	bge.n	3e8d0 <client_write+0x18>
		client_disconnect(client, err_code, true);
   3e8c4:	4621      	mov	r1, r4
   3e8c6:	4628      	mov	r0, r5
   3e8c8:	f7ff ffaf 	bl	3e82a <client_disconnect.constprop.0>
}
   3e8cc:	4620      	mov	r0, r4
   3e8ce:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   3e8d0:	f7ff ff76 	bl	3e7c0 <k_uptime_get_32>
	return 0;
   3e8d4:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e8d6:	6168      	str	r0, [r5, #20]
	return 0;
   3e8d8:	e7f8      	b.n	3e8cc <client_write+0x14>

0003e8da <mqtt_client_init>:
{
   3e8da:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3e8dc:	4604      	mov	r4, r0
   3e8de:	b190      	cbz	r0, 3e906 <mqtt_client_init+0x2c>
   3e8e0:	2288      	movs	r2, #136	; 0x88
   3e8e2:	2100      	movs	r1, #0
   3e8e4:	f003 f93c 	bl	41b60 <memset>
	return z_impl_k_mutex_init(mutex);
   3e8e8:	4620      	mov	r0, r4
   3e8ea:	f002 feef 	bl	416cc <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3e8ee:	2304      	movs	r3, #4
   3e8f0:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	client->clean_session = MQTT_CLEAN_SESSION;
   3e8f4:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   3e8f8:	f36f 0341 	bfc	r3, #1, #1
   3e8fc:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	client->keepalive = MQTT_KEEPALIVE;
   3e900:	2378      	movs	r3, #120	; 0x78
   3e902:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
}
   3e906:	bd10      	pop	{r4, pc}

0003e908 <mqtt_connect>:
{
   3e908:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e90a:	4605      	mov	r5, r0
   3e90c:	2800      	cmp	r0, #0
   3e90e:	d03a      	beq.n	3e986 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3e910:	6d03      	ldr	r3, [r0, #80]	; 0x50
   3e912:	b3c3      	cbz	r3, 3e986 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   3e914:	f7e5 fe4c 	bl	245b0 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3e918:	6fab      	ldr	r3, [r5, #120]	; 0x78
   3e91a:	b38b      	cbz	r3, 3e980 <mqtt_connect+0x78>
   3e91c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3e91e:	b37b      	cbz	r3, 3e980 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   3e920:	4628      	mov	r0, r5
   3e922:	f7e5 fdf5 	bl	24510 <mqtt_transport_connect>
	if (err_code < 0) {
   3e926:	1e04      	subs	r4, r0, #0
   3e928:	db24      	blt.n	3e974 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   3e92a:	4669      	mov	r1, sp
   3e92c:	4628      	mov	r0, r5
   3e92e:	f7ff ff54 	bl	3e7da <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e932:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e934:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e936:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   3e93a:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e93c:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e93e:	f7e5 fd43 	bl	243c8 <connect_request_encode>
	if (err_code < 0) {
   3e942:	1e04      	subs	r4, r0, #0
   3e944:	db13      	blt.n	3e96e <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   3e946:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e94a:	4628      	mov	r0, r5
   3e94c:	1a52      	subs	r2, r2, r1
   3e94e:	f7e5 fde9 	bl	24524 <mqtt_transport_write>
	if (err_code < 0) {
   3e952:	1e04      	subs	r4, r0, #0
   3e954:	db0b      	blt.n	3e96e <mqtt_connect+0x66>
   3e956:	f7ff ff33 	bl	3e7c0 <k_uptime_get_32>
	client->unacked_ping = 0;
   3e95a:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e95c:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   3e95e:	f885 4083 	strb.w	r4, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3e962:	4628      	mov	r0, r5
   3e964:	f7e5 fe10 	bl	24588 <mqtt_mutex_unlock>
}
   3e968:	4620      	mov	r0, r4
   3e96a:	b003      	add	sp, #12
   3e96c:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   3e96e:	4628      	mov	r0, r5
   3e970:	f7e5 fe00 	bl	24574 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e974:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3e976:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   3e97a:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   3e97e:	e7f0      	b.n	3e962 <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   3e980:	f06f 040b 	mvn.w	r4, #11
   3e984:	e7f6      	b.n	3e974 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   3e986:	f06f 0415 	mvn.w	r4, #21
   3e98a:	e7ed      	b.n	3e968 <mqtt_connect+0x60>

0003e98c <mqtt_publish>:
{
   3e98c:	b570      	push	{r4, r5, r6, lr}
   3e98e:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e990:	4605      	mov	r5, r0
{
   3e992:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   3e994:	2800      	cmp	r0, #0
   3e996:	d03a      	beq.n	3ea0e <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   3e998:	2900      	cmp	r1, #0
   3e99a:	d038      	beq.n	3ea0e <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   3e99c:	f7e5 fe08 	bl	245b0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e9a0:	4628      	mov	r0, r5
   3e9a2:	a901      	add	r1, sp, #4
   3e9a4:	f7ff ff19 	bl	3e7da <tx_buf_init>
	err_code = verify_tx_state(client);
   3e9a8:	69a8      	ldr	r0, [r5, #24]
   3e9aa:	f7ff ff24 	bl	3e7f6 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e9ae:	1e04      	subs	r4, r0, #0
   3e9b0:	db22      	blt.n	3e9f8 <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   3e9b2:	4630      	mov	r0, r6
   3e9b4:	a901      	add	r1, sp, #4
   3e9b6:	f7ff fcc8 	bl	3e34a <publish_encode>
	if (err_code < 0) {
   3e9ba:	1e04      	subs	r4, r0, #0
   3e9bc:	db1c      	blt.n	3e9f8 <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   3e9be:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e9c0:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   3e9c2:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e9c4:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   3e9c6:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   3e9c8:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   3e9ca:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   3e9cc:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   3e9ce:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   3e9d0:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   3e9d2:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   3e9d6:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   3e9d8:	f003 f8c2 	bl	41b60 <memset>
	msg.msg_iov = io_vector;
   3e9dc:	ab03      	add	r3, sp, #12
   3e9de:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e9e0:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   3e9e2:	4628      	mov	r0, r5
   3e9e4:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e9e6:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   3e9e8:	f7e5 fda8 	bl	2453c <mqtt_transport_write_msg>
	if (err_code < 0) {
   3e9ec:	1e04      	subs	r4, r0, #0
   3e9ee:	da09      	bge.n	3ea04 <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   3e9f0:	4621      	mov	r1, r4
   3e9f2:	4628      	mov	r0, r5
   3e9f4:	f7ff ff19 	bl	3e82a <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e9f8:	4628      	mov	r0, r5
   3e9fa:	f7e5 fdc5 	bl	24588 <mqtt_mutex_unlock>
}
   3e9fe:	4620      	mov	r0, r4
   3ea00:	b00e      	add	sp, #56	; 0x38
   3ea02:	bd70      	pop	{r4, r5, r6, pc}
   3ea04:	f7ff fedc 	bl	3e7c0 <k_uptime_get_32>
	return 0;
   3ea08:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3ea0a:	6168      	str	r0, [r5, #20]
	return 0;
   3ea0c:	e7f4      	b.n	3e9f8 <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   3ea0e:	f06f 0415 	mvn.w	r4, #21
   3ea12:	e7f4      	b.n	3e9fe <mqtt_publish+0x72>

0003ea14 <mqtt_publish_qos1_ack>:
{
   3ea14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3ea16:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3ea18:	4605      	mov	r5, r0
   3ea1a:	b1f0      	cbz	r0, 3ea5a <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   3ea1c:	b1e9      	cbz	r1, 3ea5a <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   3ea1e:	f7e5 fdc7 	bl	245b0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3ea22:	4628      	mov	r0, r5
   3ea24:	4669      	mov	r1, sp
   3ea26:	f7ff fed8 	bl	3e7da <tx_buf_init>
	err_code = verify_tx_state(client);
   3ea2a:	69a8      	ldr	r0, [r5, #24]
   3ea2c:	f7ff fee3 	bl	3e7f6 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3ea30:	1e04      	subs	r4, r0, #0
   3ea32:	db0c      	blt.n	3ea4e <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   3ea34:	4669      	mov	r1, sp
   3ea36:	4630      	mov	r0, r6
   3ea38:	f7ff fcc8 	bl	3e3cc <publish_ack_encode>
	if (err_code < 0) {
   3ea3c:	1e04      	subs	r4, r0, #0
   3ea3e:	db06      	blt.n	3ea4e <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ea40:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ea44:	4628      	mov	r0, r5
   3ea46:	1a52      	subs	r2, r2, r1
   3ea48:	f7ff ff36 	bl	3e8b8 <client_write>
   3ea4c:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3ea4e:	4628      	mov	r0, r5
   3ea50:	f7e5 fd9a 	bl	24588 <mqtt_mutex_unlock>
}
   3ea54:	4620      	mov	r0, r4
   3ea56:	b002      	add	sp, #8
   3ea58:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3ea5a:	f06f 0415 	mvn.w	r4, #21
   3ea5e:	e7f9      	b.n	3ea54 <mqtt_publish_qos1_ack+0x40>

0003ea60 <mqtt_disconnect>:
{
   3ea60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ea62:	4605      	mov	r5, r0
   3ea64:	b308      	cbz	r0, 3eaaa <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   3ea66:	f7e5 fda3 	bl	245b0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3ea6a:	4628      	mov	r0, r5
   3ea6c:	4669      	mov	r1, sp
   3ea6e:	f7ff feb4 	bl	3e7da <tx_buf_init>
	err_code = verify_tx_state(client);
   3ea72:	69a8      	ldr	r0, [r5, #24]
   3ea74:	f7ff febf 	bl	3e7f6 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3ea78:	1e04      	subs	r4, r0, #0
   3ea7a:	db10      	blt.n	3ea9e <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   3ea7c:	4668      	mov	r0, sp
   3ea7e:	f7e5 fd23 	bl	244c8 <disconnect_encode>
	if (err_code < 0) {
   3ea82:	1e04      	subs	r4, r0, #0
   3ea84:	db0b      	blt.n	3ea9e <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ea86:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ea8a:	4628      	mov	r0, r5
   3ea8c:	1a52      	subs	r2, r2, r1
   3ea8e:	f7ff ff13 	bl	3e8b8 <client_write>
	if (err_code < 0) {
   3ea92:	1e04      	subs	r4, r0, #0
   3ea94:	db03      	blt.n	3ea9e <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   3ea96:	2100      	movs	r1, #0
   3ea98:	4628      	mov	r0, r5
   3ea9a:	f7ff fec6 	bl	3e82a <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3ea9e:	4628      	mov	r0, r5
   3eaa0:	f7e5 fd72 	bl	24588 <mqtt_mutex_unlock>
}
   3eaa4:	4620      	mov	r0, r4
   3eaa6:	b003      	add	sp, #12
   3eaa8:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3eaaa:	f06f 0415 	mvn.w	r4, #21
   3eaae:	e7f9      	b.n	3eaa4 <mqtt_disconnect+0x44>

0003eab0 <mqtt_subscribe>:
{
   3eab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3eab2:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3eab4:	4605      	mov	r5, r0
   3eab6:	b1f0      	cbz	r0, 3eaf6 <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   3eab8:	b1e9      	cbz	r1, 3eaf6 <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   3eaba:	f7e5 fd79 	bl	245b0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eabe:	4628      	mov	r0, r5
   3eac0:	4669      	mov	r1, sp
   3eac2:	f7ff fe8a 	bl	3e7da <tx_buf_init>
	err_code = verify_tx_state(client);
   3eac6:	69a8      	ldr	r0, [r5, #24]
   3eac8:	f7ff fe95 	bl	3e7f6 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3eacc:	1e04      	subs	r4, r0, #0
   3eace:	db0c      	blt.n	3eaea <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   3ead0:	4669      	mov	r1, sp
   3ead2:	4630      	mov	r0, r6
   3ead4:	f7ff fc7f 	bl	3e3d6 <subscribe_encode>
	if (err_code < 0) {
   3ead8:	1e04      	subs	r4, r0, #0
   3eada:	db06      	blt.n	3eaea <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eadc:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eae0:	4628      	mov	r0, r5
   3eae2:	1a52      	subs	r2, r2, r1
   3eae4:	f7ff fee8 	bl	3e8b8 <client_write>
   3eae8:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3eaea:	4628      	mov	r0, r5
   3eaec:	f7e5 fd4c 	bl	24588 <mqtt_mutex_unlock>
}
   3eaf0:	4620      	mov	r0, r4
   3eaf2:	b002      	add	sp, #8
   3eaf4:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3eaf6:	f06f 0415 	mvn.w	r4, #21
   3eafa:	e7f9      	b.n	3eaf0 <mqtt_subscribe+0x40>

0003eafc <mqtt_unsubscribe>:
{
   3eafc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3eafe:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3eb00:	4605      	mov	r5, r0
   3eb02:	b1f0      	cbz	r0, 3eb42 <mqtt_unsubscribe+0x46>
	NULL_PARAM_CHECK(param);
   3eb04:	b1e9      	cbz	r1, 3eb42 <mqtt_unsubscribe+0x46>
	mqtt_mutex_lock(client);
   3eb06:	f7e5 fd53 	bl	245b0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eb0a:	4628      	mov	r0, r5
   3eb0c:	4669      	mov	r1, sp
   3eb0e:	f7ff fe64 	bl	3e7da <tx_buf_init>
	err_code = verify_tx_state(client);
   3eb12:	69a8      	ldr	r0, [r5, #24]
   3eb14:	f7ff fe6f 	bl	3e7f6 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3eb18:	1e04      	subs	r4, r0, #0
   3eb1a:	db0c      	blt.n	3eb36 <mqtt_unsubscribe+0x3a>
	err_code = unsubscribe_encode(param, &packet);
   3eb1c:	4669      	mov	r1, sp
   3eb1e:	4630      	mov	r0, r6
   3eb20:	f7ff fc90 	bl	3e444 <unsubscribe_encode>
	if (err_code < 0) {
   3eb24:	1e04      	subs	r4, r0, #0
   3eb26:	db06      	blt.n	3eb36 <mqtt_unsubscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eb28:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eb2c:	4628      	mov	r0, r5
   3eb2e:	1a52      	subs	r2, r2, r1
   3eb30:	f7ff fec2 	bl	3e8b8 <client_write>
   3eb34:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3eb36:	4628      	mov	r0, r5
   3eb38:	f7e5 fd26 	bl	24588 <mqtt_mutex_unlock>
}
   3eb3c:	4620      	mov	r0, r4
   3eb3e:	b002      	add	sp, #8
   3eb40:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3eb42:	f06f 0415 	mvn.w	r4, #21
   3eb46:	e7f9      	b.n	3eb3c <mqtt_unsubscribe+0x40>

0003eb48 <mqtt_ping>:
{
   3eb48:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3eb4a:	4605      	mov	r5, r0
   3eb4c:	b318      	cbz	r0, 3eb96 <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   3eb4e:	f7e5 fd2f 	bl	245b0 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eb52:	4628      	mov	r0, r5
   3eb54:	4669      	mov	r1, sp
   3eb56:	f7ff fe40 	bl	3e7da <tx_buf_init>
	err_code = verify_tx_state(client);
   3eb5a:	69a8      	ldr	r0, [r5, #24]
   3eb5c:	f7ff fe4b 	bl	3e7f6 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3eb60:	1e04      	subs	r4, r0, #0
   3eb62:	db12      	blt.n	3eb8a <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   3eb64:	4668      	mov	r0, sp
   3eb66:	f7e5 fcc1 	bl	244ec <ping_request_encode>
	if (err_code < 0) {
   3eb6a:	1e04      	subs	r4, r0, #0
   3eb6c:	db0d      	blt.n	3eb8a <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eb6e:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eb72:	4628      	mov	r0, r5
   3eb74:	1a52      	subs	r2, r2, r1
   3eb76:	f7ff fe9f 	bl	3e8b8 <client_write>
   3eb7a:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   3eb7c:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
   3eb80:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   3eb82:	bf1c      	itt	ne
   3eb84:	3301      	addne	r3, #1
   3eb86:	f885 3083 	strbne.w	r3, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3eb8a:	4628      	mov	r0, r5
   3eb8c:	f7e5 fcfc 	bl	24588 <mqtt_mutex_unlock>
}
   3eb90:	4620      	mov	r0, r4
   3eb92:	b003      	add	sp, #12
   3eb94:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3eb96:	f06f 0415 	mvn.w	r4, #21
   3eb9a:	e7f9      	b.n	3eb90 <mqtt_ping+0x48>

0003eb9c <mqtt_live>:
{
   3eb9c:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3eb9e:	4606      	mov	r6, r0
   3eba0:	b300      	cbz	r0, 3ebe4 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3eba2:	f7e5 fd05 	bl	245b0 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3eba6:	6974      	ldr	r4, [r6, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   3eba8:	f7ff fe0a 	bl	3e7c0 <k_uptime_get_32>
   3ebac:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3ebae:	f8b6 4080 	ldrh.w	r4, [r6, #128]	; 0x80

	if (diff < 0) {
		return 0;
   3ebb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3ebb6:	b19c      	cbz	r4, 3ebe0 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3ebb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3ebbc:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3ebbe:	4284      	cmp	r4, r0
   3ebc0:	d80d      	bhi.n	3ebde <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3ebc2:	4630      	mov	r0, r6
   3ebc4:	f7ff ffc0 	bl	3eb48 <mqtt_ping>
		ping_sent = true;
   3ebc8:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3ebca:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3ebcc:	4630      	mov	r0, r6
   3ebce:	f7e5 fcdb 	bl	24588 <mqtt_mutex_unlock>
		return -EAGAIN;
   3ebd2:	2c00      	cmp	r4, #0
   3ebd4:	bf08      	it	eq
   3ebd6:	f06f 050a 	mvneq.w	r5, #10
}
   3ebda:	4628      	mov	r0, r5
   3ebdc:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3ebde:	2400      	movs	r4, #0
	int err_code = 0;
   3ebe0:	4625      	mov	r5, r4
   3ebe2:	e7f3      	b.n	3ebcc <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3ebe4:	f06f 0515 	mvn.w	r5, #21
   3ebe8:	e7f7      	b.n	3ebda <mqtt_live+0x3e>

0003ebea <mqtt_keepalive_time_left>:
{
   3ebea:	b538      	push	{r3, r4, r5, lr}
   3ebec:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3ebee:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   3ebf0:	f7ff fde6 	bl	3e7c0 <k_uptime_get_32>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   3ebf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3ebf8:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
   3ebfc:	1b42      	subs	r2, r0, r5
   3ebfe:	434b      	muls	r3, r1
		return 0;
   3ec00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   3ec04:	b119      	cbz	r1, 3ec0e <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3ec06:	4293      	cmp	r3, r2
   3ec08:	d904      	bls.n	3ec14 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3ec0a:	1a98      	subs	r0, r3, r2
}
   3ec0c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   3ec0e:	f04f 30ff 	mov.w	r0, #4294967295
   3ec12:	e7fb      	b.n	3ec0c <mqtt_keepalive_time_left+0x22>
		return 0;
   3ec14:	2000      	movs	r0, #0
   3ec16:	e7f9      	b.n	3ec0c <mqtt_keepalive_time_left+0x22>

0003ec18 <mqtt_input>:
{
   3ec18:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ec1a:	4605      	mov	r5, r0
   3ec1c:	b1d0      	cbz	r0, 3ec54 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3ec1e:	f7e5 fcc7 	bl	245b0 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3ec22:	69ab      	ldr	r3, [r5, #24]
   3ec24:	079b      	lsls	r3, r3, #30
   3ec26:	d50f      	bpl.n	3ec48 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3ec28:	6a2b      	ldr	r3, [r5, #32]
   3ec2a:	b983      	cbnz	r3, 3ec4e <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3ec2c:	4628      	mov	r0, r5
   3ec2e:	f7ff fc59 	bl	3e4e4 <mqtt_handle_rx>
	if (err_code < 0) {
   3ec32:	1e04      	subs	r4, r0, #0
   3ec34:	da03      	bge.n	3ec3e <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   3ec36:	4621      	mov	r1, r4
   3ec38:	4628      	mov	r0, r5
   3ec3a:	f7ff fdf6 	bl	3e82a <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3ec3e:	4628      	mov	r0, r5
   3ec40:	f7e5 fca2 	bl	24588 <mqtt_mutex_unlock>
}
   3ec44:	4620      	mov	r0, r4
   3ec46:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   3ec48:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3ec4c:	e7f7      	b.n	3ec3e <mqtt_input+0x26>
		return -EBUSY;
   3ec4e:	f06f 040f 	mvn.w	r4, #15
   3ec52:	e7f4      	b.n	3ec3e <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3ec54:	f06f 0415 	mvn.w	r4, #21
   3ec58:	e7f4      	b.n	3ec44 <mqtt_input+0x2c>

0003ec5a <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3ec5a:	2301      	movs	r3, #1
   3ec5c:	f7ff bdfe 	b.w	3e85c <read_publish_payload>

0003ec60 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   3ec60:	b570      	push	{r4, r5, r6, lr}
   3ec62:	4606      	mov	r6, r0
   3ec64:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   3ec66:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3ec68:	42ac      	cmp	r4, r5
   3ec6a:	d301      	bcc.n	3ec70 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3ec6c:	2000      	movs	r0, #0
}
   3ec6e:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3ec70:	4621      	mov	r1, r4
   3ec72:	4630      	mov	r0, r6
   3ec74:	1b2a      	subs	r2, r5, r4
   3ec76:	f7ff fff0 	bl	3ec5a <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3ec7a:	2800      	cmp	r0, #0
   3ec7c:	dbf7      	blt.n	3ec6e <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3ec7e:	d001      	beq.n	3ec84 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3ec80:	4404      	add	r4, r0
   3ec82:	e7f1      	b.n	3ec68 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3ec84:	f06f 0004 	mvn.w	r0, #4
   3ec88:	e7f1      	b.n	3ec6e <mqtt_readall_publish_payload+0xe>

0003ec8a <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3ec8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3ec8e:	2400      	movs	r4, #0
{
   3ec90:	4606      	mov	r6, r0
   3ec92:	460f      	mov	r7, r1
   3ec94:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3ec96:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3ec98:	42ac      	cmp	r4, r5
   3ec9a:	d301      	bcc.n	3eca0 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3ec9c:	2000      	movs	r0, #0
   3ec9e:	e00d      	b.n	3ecbc <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   3eca0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3eca2:	2300      	movs	r3, #0
   3eca4:	e9cd 8800 	strd	r8, r8, [sp]
   3eca8:	1b2a      	subs	r2, r5, r4
   3ecaa:	1939      	adds	r1, r7, r4
   3ecac:	f7fe fe39 	bl	3d922 <z_impl_zsock_sendto>
		if (ret < 0) {
   3ecb0:	1e03      	subs	r3, r0, #0
   3ecb2:	da06      	bge.n	3ecc2 <mqtt_client_tls_write+0x38>
			return -errno;
   3ecb4:	f7ff f8f9 	bl	3deaa <__errno>
   3ecb8:	6800      	ldr	r0, [r0, #0]
   3ecba:	4240      	negs	r0, r0
}
   3ecbc:	b002      	add	sp, #8
   3ecbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3ecc2:	441c      	add	r4, r3
   3ecc4:	e7e8      	b.n	3ec98 <mqtt_client_tls_write+0xe>

0003ecc6 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3ecca:	2500      	movs	r5, #0
{
   3eccc:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3ecce:	462b      	mov	r3, r5
{
   3ecd0:	460c      	mov	r4, r1
   3ecd2:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3ecd4:	428b      	cmp	r3, r1
   3ecd6:	d110      	bne.n	3ecfa <mqtt_client_tls_write_msg+0x34>
	size_t offset = 0;
   3ecd8:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3ecda:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3ecdc:	42ae      	cmp	r6, r5
   3ecde:	d216      	bcs.n	3ed0e <mqtt_client_tls_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   3ece0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3ece2:	2200      	movs	r2, #0
   3ece4:	4621      	mov	r1, r4
   3ece6:	f7fe fe4c 	bl	3d982 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3ecea:	1e03      	subs	r3, r0, #0
   3ecec:	da0c      	bge.n	3ed08 <mqtt_client_tls_write_msg+0x42>
			return -errno;
   3ecee:	f7ff f8dc 	bl	3deaa <__errno>
   3ecf2:	6800      	ldr	r0, [r0, #0]
   3ecf4:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3ecf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3ecfa:	68a2      	ldr	r2, [r4, #8]
   3ecfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3ed00:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3ed02:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3ed04:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3ed06:	e7e5      	b.n	3ecd4 <mqtt_client_tls_write_msg+0xe>
		offset += ret;
   3ed08:	441e      	add	r6, r3
		if (offset >= total_len) {
   3ed0a:	42b5      	cmp	r5, r6
   3ed0c:	d801      	bhi.n	3ed12 <mqtt_client_tls_write_msg+0x4c>
	return 0;
   3ed0e:	2000      	movs	r0, #0
   3ed10:	e7f1      	b.n	3ecf6 <mqtt_client_tls_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3ed12:	2000      	movs	r0, #0
   3ed14:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3ed18:	4560      	cmp	r0, ip
   3ed1a:	d0df      	beq.n	3ecdc <mqtt_client_tls_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3ed1c:	68a2      	ldr	r2, [r4, #8]
   3ed1e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3ed22:	6851      	ldr	r1, [r2, #4]
   3ed24:	4299      	cmp	r1, r3
   3ed26:	d905      	bls.n	3ed34 <mqtt_client_tls_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3ed28:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3ed2a:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3ed2c:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3ed2e:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3ed30:	6010      	str	r0, [r2, #0]
				break;
   3ed32:	e7d3      	b.n	3ecdc <mqtt_client_tls_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3ed34:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3ed36:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3ed3a:	3001      	adds	r0, #1
   3ed3c:	e7ec      	b.n	3ed18 <mqtt_client_tls_write_msg+0x52>

0003ed3e <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3ed3e:	b513      	push	{r0, r1, r4, lr}
   3ed40:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3ed42:	42a3      	cmp	r3, r4
   3ed44:	bf14      	ite	ne
   3ed46:	4623      	movne	r3, r4
   3ed48:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   3ed4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3ed4c:	e9cd 4400 	strd	r4, r4, [sp]
   3ed50:	f7fe fe3e 	bl	3d9d0 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3ed54:	2800      	cmp	r0, #0
   3ed56:	da03      	bge.n	3ed60 <mqtt_client_tls_read+0x22>
		return -errno;
   3ed58:	f7ff f8a7 	bl	3deaa <__errno>
   3ed5c:	6800      	ldr	r0, [r0, #0]
   3ed5e:	4240      	negs	r0, r0
	}

	return ret;
}
   3ed60:	b002      	add	sp, #8
   3ed62:	bd10      	pop	{r4, pc}

0003ed64 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3ed64:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   3ed66:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3ed68:	f7fe fd90 	bl	3d88c <z_impl_zsock_close>
	if (ret < 0) {
   3ed6c:	2800      	cmp	r0, #0
   3ed6e:	da04      	bge.n	3ed7a <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3ed70:	f7ff f89b 	bl	3deaa <__errno>
   3ed74:	6800      	ldr	r0, [r0, #0]
   3ed76:	4240      	negs	r0, r0
	}

	return 0;
}
   3ed78:	bd08      	pop	{r3, pc}
	return 0;
   3ed7a:	2000      	movs	r0, #0
   3ed7c:	e7fc      	b.n	3ed78 <mqtt_client_tls_disconnect+0x14>

0003ed7e <set_on_state>:
	__asm__ volatile(
   3ed7e:	f04f 0320 	mov.w	r3, #32
   3ed82:	f3ef 8211 	mrs	r2, BASEPRI
   3ed86:	f383 8812 	msr	BASEPRI_MAX, r3
   3ed8a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3ed8e:	6803      	ldr	r3, [r0, #0]
   3ed90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3ed94:	f043 0302 	orr.w	r3, r3, #2
   3ed98:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3ed9a:	f382 8811 	msr	BASEPRI, r2
   3ed9e:	f3bf 8f6f 	isb	sy
}
   3eda2:	4770      	bx	lr

0003eda4 <async_start>:
{
   3eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3eda6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   3eda8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   3edaa:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   3edac:	f04f 0520 	mov.w	r5, #32
   3edb0:	f3ef 8c11 	mrs	ip, BASEPRI
   3edb4:	f385 8812 	msr	BASEPRI_MAX, r5
   3edb8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3edbc:	260c      	movs	r6, #12
   3edbe:	fb06 4601 	mla	r6, r6, r1, r4
   3edc2:	6cb5      	ldr	r5, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3edc4:	f005 0e07 	and.w	lr, r5, #7
   3edc8:	f1be 0f01 	cmp.w	lr, #1
   3edcc:	d110      	bne.n	3edf0 <async_start+0x4c>
	int err = 0;
   3edce:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3edd0:	64b7      	str	r7, [r6, #72]	; 0x48
	__asm__ volatile(
   3edd2:	f38c 8811 	msr	BASEPRI, ip
   3edd6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   3edda:	b93d      	cbnz	r5, 3edec <async_start+0x48>
	subdata->cb = cb;
   3eddc:	260c      	movs	r6, #12
   3edde:	4371      	muls	r1, r6
   3ede0:	440c      	add	r4, r1
	subdata->user_data = user_data;
   3ede2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3ede6:	6843      	ldr	r3, [r0, #4]
   3ede8:	585b      	ldr	r3, [r3, r1]
   3edea:	4798      	blx	r3
}
   3edec:	4628      	mov	r0, r5
   3edee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3edf0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   3edf4:	42af      	cmp	r7, r5
   3edf6:	bf14      	ite	ne
   3edf8:	f04f 35ff 	movne.w	r5, #4294967295
   3edfc:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   3ee00:	e7e7      	b.n	3edd2 <async_start+0x2e>

0003ee02 <api_start>:
{
   3ee02:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3ee04:	2480      	movs	r4, #128	; 0x80
   3ee06:	9400      	str	r4, [sp, #0]
   3ee08:	f7ff ffcc 	bl	3eda4 <async_start>
}
   3ee0c:	b002      	add	sp, #8
   3ee0e:	bd10      	pop	{r4, pc}

0003ee10 <onoff_started_callback>:
	return &data->mgr[type];
   3ee10:	6900      	ldr	r0, [r0, #16]
   3ee12:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3ee14:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3ee18:	2100      	movs	r1, #0
   3ee1a:	4710      	bx	r2

0003ee1c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3ee1c:	2000      	movs	r0, #0
   3ee1e:	f7f3 bd9b 	b.w	32958 <nrfx_clock_start>

0003ee22 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3ee22:	2000      	movs	r0, #0
   3ee24:	f7f3 bdfa 	b.w	32a1c <nrfx_clock_stop>

0003ee28 <api_stop>:
	return stop(dev, subsys, CTX_API);
   3ee28:	2280      	movs	r2, #128	; 0x80
   3ee2a:	f7e5 bccb 	b.w	247c4 <stop>

0003ee2e <blocking_start_callback>:
{
   3ee2e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3ee30:	f7f8 baae 	b.w	37390 <z_impl_k_sem_give>

0003ee34 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee34:	6843      	ldr	r3, [r0, #4]
}
   3ee36:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee38:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3ee3a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3ee3c:	600b      	str	r3, [r1, #0]
}
   3ee3e:	4770      	bx	lr

0003ee40 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee40:	6843      	ldr	r3, [r0, #4]
   3ee42:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3ee44:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3ee46:	4042      	eors	r2, r0
   3ee48:	400a      	ands	r2, r1
   3ee4a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3ee4c:	605a      	str	r2, [r3, #4]
}
   3ee4e:	2000      	movs	r0, #0
   3ee50:	4770      	bx	lr

0003ee52 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee52:	6843      	ldr	r3, [r0, #4]
}
   3ee54:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee56:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3ee58:	6099      	str	r1, [r3, #8]
}
   3ee5a:	4770      	bx	lr

0003ee5c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee5c:	6843      	ldr	r3, [r0, #4]
}
   3ee5e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee60:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3ee62:	60d9      	str	r1, [r3, #12]
}
   3ee64:	4770      	bx	lr

0003ee66 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee66:	6843      	ldr	r3, [r0, #4]
}
   3ee68:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee6a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3ee6c:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3ee6e:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3ee70:	6051      	str	r1, [r2, #4]
}
   3ee72:	4770      	bx	lr

0003ee74 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   3ee74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3ee76:	4604      	mov	r4, r0
   3ee78:	2200      	movs	r2, #0
   3ee7a:	2101      	movs	r1, #1
   3ee7c:	200a      	movs	r0, #10
   3ee7e:	f7e4 f91f 	bl	230c0 <z_arm_irq_priority_set>
   3ee82:	6863      	ldr	r3, [r4, #4]
	ret = pinctrl_lookup_state(config, id, &state);
   3ee84:	2100      	movs	r1, #0
   3ee86:	68dd      	ldr	r5, [r3, #12]
   3ee88:	aa01      	add	r2, sp, #4
   3ee8a:	4628      	mov	r0, r5
   3ee8c:	f000 fa05 	bl	3f29a <pinctrl_lookup_state>
	if (ret < 0) {
   3ee90:	2800      	cmp	r0, #0
   3ee92:	db0d      	blt.n	3eeb0 <twim_2_init+0x3c>
	return pinctrl_apply_state_direct(config, state);
   3ee94:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3ee96:	682a      	ldr	r2, [r5, #0]
   3ee98:	7919      	ldrb	r1, [r3, #4]
   3ee9a:	6818      	ldr	r0, [r3, #0]
   3ee9c:	f000 fa53 	bl	3f346 <pinctrl_configure_pins>
   3eea0:	2800      	cmp	r0, #0
   3eea2:	db05      	blt.n	3eeb0 <twim_2_init+0x3c>
   3eea4:	4620      	mov	r0, r4
   3eea6:	b003      	add	sp, #12
   3eea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3eeac:	f7e6 b84c 	b.w	24f48 <init_twim>
   3eeb0:	b003      	add	sp, #12
   3eeb2:	bd30      	pop	{r4, r5, pc}

0003eeb4 <is_regular_addr_valid>:
{
   3eeb4:	b538      	push	{r3, r4, r5, lr}
   3eeb6:	4605      	mov	r5, r0
   3eeb8:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   3eeba:	f001 fb89 	bl	405d0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   3eebe:	2d00      	cmp	r5, #0
   3eec0:	db07      	blt.n	3eed2 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   3eec2:	42a8      	cmp	r0, r5
   3eec4:	d905      	bls.n	3eed2 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   3eec6:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   3eec8:	4284      	cmp	r4, r0
   3eeca:	bf8c      	ite	hi
   3eecc:	2000      	movhi	r0, #0
   3eece:	2001      	movls	r0, #1
}
   3eed0:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   3eed2:	2000      	movs	r0, #0
   3eed4:	e7fc      	b.n	3eed0 <is_regular_addr_valid+0x1c>

0003eed6 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3eed6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3eeda:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3eedc:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
   3eee0:	6883      	ldr	r3, [r0, #8]
{
   3eee2:	460d      	mov	r5, r1
   3eee4:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   3eee6:	4669      	mov	r1, sp
   3eee8:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   3eeea:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
   3eeee:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   3eef2:	aa01      	add	r2, sp, #4
   3eef4:	4798      	blx	r3

	while (layout_size--) {
   3eef6:	e9dd 7c00 	ldrd	r7, ip, [sp]
   3eefa:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   3eefc:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   3ef00:	4560      	cmp	r0, ip
   3ef02:	d104      	bne.n	3ef0e <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3ef04:	f06f 0015 	mvn.w	r0, #21
}
   3ef08:	b003      	add	sp, #12
   3ef0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   3ef0e:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   3ef12:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   3ef14:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   3ef16:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   3ef1a:	b97d      	cbnz	r5, 3ef3c <flash_get_page_info+0x66>
			index_jmp = index - info->index;
   3ef1c:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3ef1e:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
   3ef22:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3ef24:	4543      	cmp	r3, r8
   3ef26:	bf28      	it	cs
   3ef28:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   3ef2a:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   3ef2e:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   3ef30:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   3ef32:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   3ef34:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3ef36:	d9e3      	bls.n	3ef00 <flash_get_page_info+0x2a>
			return 0;
   3ef38:	2000      	movs	r0, #0
   3ef3a:	e7e5      	b.n	3ef08 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   3ef3c:	1aab      	subs	r3, r5, r2
   3ef3e:	fbb3 f3f9 	udiv	r3, r3, r9
   3ef42:	e7ec      	b.n	3ef1e <flash_get_page_info+0x48>

0003ef44 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3ef44:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3ef46:	2200      	movs	r2, #0
   3ef48:	f7ff bfc5 	b.w	3eed6 <flash_get_page_info>

0003ef4c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3ef4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   3ef50:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3ef52:	6883      	ldr	r3, [r0, #8]
{
   3ef54:	b086      	sub	sp, #24
   3ef56:	4688      	mov	r8, r1
   3ef58:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3ef5a:	691b      	ldr	r3, [r3, #16]
   3ef5c:	aa02      	add	r2, sp, #8
   3ef5e:	a901      	add	r1, sp, #4
   3ef60:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3ef62:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3ef64:	4625      	mov	r5, r4
   3ef66:	9b02      	ldr	r3, [sp, #8]
   3ef68:	42ab      	cmp	r3, r5
   3ef6a:	d802      	bhi.n	3ef72 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3ef6c:	b006      	add	sp, #24
   3ef6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3ef72:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3ef74:	9f01      	ldr	r7, [sp, #4]
   3ef76:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3ef7a:	687b      	ldr	r3, [r7, #4]
   3ef7c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3ef7e:	683a      	ldr	r2, [r7, #0]
   3ef80:	eb0a 0306 	add.w	r3, sl, r6
   3ef84:	42b2      	cmp	r2, r6
   3ef86:	d802      	bhi.n	3ef8e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3ef88:	469a      	mov	sl, r3
   3ef8a:	3501      	adds	r5, #1
   3ef8c:	e7eb      	b.n	3ef66 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   3ef8e:	4649      	mov	r1, r9
   3ef90:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   3ef92:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3ef94:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3ef96:	47c0      	blx	r8
   3ef98:	2800      	cmp	r0, #0
   3ef9a:	d0e7      	beq.n	3ef6c <flash_page_foreach+0x20>
			off += page_info.size;
   3ef9c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3ef9e:	3601      	adds	r6, #1
			off += page_info.size;
   3efa0:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3efa2:	e7ec      	b.n	3ef7e <flash_page_foreach+0x32>

0003efa4 <uarte_nrfx_config_get>:
{
   3efa4:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   3efa6:	6902      	ldr	r2, [r0, #16]
   3efa8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3efac:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3efb0:	2000      	movs	r0, #0
   3efb2:	4770      	bx	lr

0003efb4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3efb4:	6843      	ldr	r3, [r0, #4]
   3efb6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3efb8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3efbc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3efc0:	4770      	bx	lr

0003efc2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3efc2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   3efc4:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3efc6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3efc8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3efcc:	b148      	cbz	r0, 3efe2 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3efce:	2000      	movs	r0, #0
	*c = data->rx_data;
   3efd0:	7d52      	ldrb	r2, [r2, #21]
   3efd2:	700a      	strb	r2, [r1, #0]
   3efd4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3efd8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3efdc:	2201      	movs	r2, #1
   3efde:	601a      	str	r2, [r3, #0]
	return 0;
   3efe0:	4770      	bx	lr
		return -1;
   3efe2:	f04f 30ff 	mov.w	r0, #4294967295
}
   3efe6:	4770      	bx	lr

0003efe8 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3efe8:	2a00      	cmp	r2, #0
   3efea:	dd0f      	ble.n	3f00c <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   3efec:	6843      	ldr	r3, [r0, #4]
   3efee:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eff0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3eff4:	b153      	cbz	r3, 3f00c <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = dev->data;
   3eff6:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3eff8:	2000      	movs	r0, #0
   3effa:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   3effe:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f002:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   3f004:	7d5b      	ldrb	r3, [r3, #21]
   3f006:	700b      	strb	r3, [r1, #0]
   3f008:	6010      	str	r0, [r2, #0]
}
   3f00a:	4770      	bx	lr
	int num_rx = 0;
   3f00c:	2000      	movs	r0, #0
   3f00e:	4770      	bx	lr

0003f010 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   3f010:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3f012:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   3f014:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3f016:	f04f 0020 	mov.w	r0, #32
   3f01a:	f3ef 8311 	mrs	r3, BASEPRI
   3f01e:	f380 8812 	msr	BASEPRI_MAX, r0
   3f022:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3f026:	2000      	movs	r0, #0
   3f028:	68c9      	ldr	r1, [r1, #12]
   3f02a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3f02c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3f030:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3f034:	f383 8811 	msr	BASEPRI, r3
   3f038:	f3bf 8f6f 	isb	sy
}
   3f03c:	4770      	bx	lr

0003f03e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3f03e:	2201      	movs	r2, #1
   3f040:	6903      	ldr	r3, [r0, #16]
   3f042:	68db      	ldr	r3, [r3, #12]
   3f044:	739a      	strb	r2, [r3, #14]
}
   3f046:	4770      	bx	lr

0003f048 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   3f048:	6903      	ldr	r3, [r0, #16]
   3f04a:	68db      	ldr	r3, [r3, #12]
   3f04c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3f04e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3f052:	b962      	cbnz	r2, 3f06e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   3f054:	6842      	ldr	r2, [r0, #4]
   3f056:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f058:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3f05c:	b140      	cbz	r0, 3f070 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3f05e:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   3f062:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3f066:	d003      	beq.n	3f070 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3f068:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   3f06a:	6119      	str	r1, [r3, #16]
   3f06c:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3f06e:	2000      	movs	r0, #0
}
   3f070:	4770      	bx	lr

0003f072 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   3f072:	6843      	ldr	r3, [r0, #4]
   3f074:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f076:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3f07a:	3800      	subs	r0, #0
   3f07c:	bf18      	it	ne
   3f07e:	2001      	movne	r0, #1
   3f080:	4770      	bx	lr

0003f082 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3f082:	2210      	movs	r2, #16
	return config->uarte_regs;
   3f084:	6843      	ldr	r3, [r0, #4]
   3f086:	681b      	ldr	r3, [r3, #0]
   3f088:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f08c:	4770      	bx	lr

0003f08e <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3f08e:	2210      	movs	r2, #16
	return config->uarte_regs;
   3f090:	6843      	ldr	r3, [r0, #4]
   3f092:	681b      	ldr	r3, [r3, #0]
   3f094:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f098:	4770      	bx	lr

0003f09a <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3f09a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3f09e:	6843      	ldr	r3, [r0, #4]
   3f0a0:	681b      	ldr	r3, [r3, #0]
   3f0a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f0a6:	4770      	bx	lr

0003f0a8 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3f0a8:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3f0ac:	6843      	ldr	r3, [r0, #4]
   3f0ae:	681b      	ldr	r3, [r3, #0]
   3f0b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f0b4:	4770      	bx	lr

0003f0b6 <uarte_nrfx_irq_update>:
}
   3f0b6:	2001      	movs	r0, #1
   3f0b8:	4770      	bx	lr

0003f0ba <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3f0ba:	6903      	ldr	r3, [r0, #16]
   3f0bc:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   3f0be:	e9c3 1200 	strd	r1, r2, [r3]
}
   3f0c2:	4770      	bx	lr

0003f0c4 <uarte_nrfx_irq_is_pending>:
{
   3f0c4:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3f0c6:	6843      	ldr	r3, [r0, #4]
{
   3f0c8:	4604      	mov	r4, r0
	return config->uarte_regs;
   3f0ca:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3f0cc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3f0d0:	025b      	lsls	r3, r3, #9
   3f0d2:	d405      	bmi.n	3f0e0 <uarte_nrfx_irq_is_pending+0x1c>
   3f0d4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   3f0d8:	f010 0010 	ands.w	r0, r0, #16
   3f0dc:	d106      	bne.n	3f0ec <uarte_nrfx_irq_is_pending+0x28>
}
   3f0de:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3f0e0:	f7ff ffb2 	bl	3f048 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3f0e4:	2800      	cmp	r0, #0
   3f0e6:	d0f5      	beq.n	3f0d4 <uarte_nrfx_irq_is_pending+0x10>
		||
   3f0e8:	2001      	movs	r0, #1
   3f0ea:	e7f8      	b.n	3f0de <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   3f0ec:	4620      	mov	r0, r4
   3f0ee:	f7ff ffc0 	bl	3f072 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3f0f2:	3800      	subs	r0, #0
   3f0f4:	bf18      	it	ne
   3f0f6:	2001      	movne	r0, #1
   3f0f8:	e7f1      	b.n	3f0de <uarte_nrfx_irq_is_pending+0x1a>

0003f0fa <tx_start.isra.0>:
	return config->uarte_regs;
   3f0fa:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3f0fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3f100:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f104:	2200      	movs	r2, #0
   3f106:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   3f10a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3f10e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   3f112:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3f116:	6842      	ldr	r2, [r0, #4]
   3f118:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3f11a:	bf41      	itttt	mi
   3f11c:	2208      	movmi	r2, #8
   3f11e:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   3f122:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   3f126:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f12a:	2201      	movs	r2, #1
   3f12c:	609a      	str	r2, [r3, #8]
}
   3f12e:	4770      	bx	lr

0003f130 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3f130:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f132:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3f136:	b943      	cbnz	r3, 3f14a <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3f138:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3f13a:	0789      	lsls	r1, r1, #30
   3f13c:	d407      	bmi.n	3f14e <is_tx_ready.isra.0+0x1e>
   3f13e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   3f142:	3800      	subs	r0, #0
   3f144:	bf18      	it	ne
   3f146:	2001      	movne	r0, #1
   3f148:	4770      	bx	lr
   3f14a:	2001      	movs	r0, #1
   3f14c:	4770      	bx	lr
   3f14e:	4618      	mov	r0, r3
}
   3f150:	4770      	bx	lr

0003f152 <uarte_nrfx_fifo_fill>:
{
   3f152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   3f154:	6906      	ldr	r6, [r0, #16]
{
   3f156:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   3f158:	68f3      	ldr	r3, [r6, #12]
   3f15a:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3f15c:	3310      	adds	r3, #16
   3f15e:	4294      	cmp	r4, r2
   3f160:	bfa8      	it	ge
   3f162:	4614      	movge	r4, r2
   3f164:	2201      	movs	r2, #1
   3f166:	e8d3 0fef 	ldaex	r0, [r3]
   3f16a:	2800      	cmp	r0, #0
   3f16c:	d103      	bne.n	3f176 <uarte_nrfx_fifo_fill+0x24>
   3f16e:	e8c3 2fe7 	stlex	r7, r2, [r3]
   3f172:	2f00      	cmp	r7, #0
   3f174:	d1f7      	bne.n	3f166 <uarte_nrfx_fifo_fill+0x14>
   3f176:	bf0c      	ite	eq
   3f178:	4613      	moveq	r3, r2
   3f17a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   3f17c:	d01d      	beq.n	3f1ba <uarte_nrfx_fifo_fill+0x68>
		return 0;
   3f17e:	461c      	mov	r4, r3
}
   3f180:	4620      	mov	r0, r4
   3f182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3f184:	68f2      	ldr	r2, [r6, #12]
   3f186:	5cc8      	ldrb	r0, [r1, r3]
   3f188:	6892      	ldr	r2, [r2, #8]
   3f18a:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   3f18c:	3301      	adds	r3, #1
   3f18e:	42a3      	cmp	r3, r4
   3f190:	dbf8      	blt.n	3f184 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   3f192:	f04f 0320 	mov.w	r3, #32
   3f196:	f3ef 8711 	mrs	r7, BASEPRI
   3f19a:	f383 8812 	msr	BASEPRI_MAX, r3
   3f19e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3f1a2:	6868      	ldr	r0, [r5, #4]
   3f1a4:	f7ff ffc4 	bl	3f130 <is_tx_ready.isra.0>
   3f1a8:	68f3      	ldr	r3, [r6, #12]
   3f1aa:	b940      	cbnz	r0, 3f1be <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   3f1ac:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   3f1ae:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   3f1b0:	f387 8811 	msr	BASEPRI, r7
   3f1b4:	f3bf 8f6f 	isb	sy
	return len;
   3f1b8:	e7e2      	b.n	3f180 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   3f1ba:	2300      	movs	r3, #0
   3f1bc:	e7e7      	b.n	3f18e <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   3f1be:	4622      	mov	r2, r4
   3f1c0:	6899      	ldr	r1, [r3, #8]
   3f1c2:	6868      	ldr	r0, [r5, #4]
   3f1c4:	f7ff ff99 	bl	3f0fa <tx_start.isra.0>
   3f1c8:	e7f2      	b.n	3f1b0 <uarte_nrfx_fifo_fill+0x5e>

0003f1ca <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   3f1ca:	6842      	ldr	r2, [r0, #4]
{
   3f1cc:	b410      	push	{r4}
	return config->uarte_regs;
   3f1ce:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   3f1d0:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3f1d4:	05c9      	lsls	r1, r1, #23
   3f1d6:	d518      	bpl.n	3f20a <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f1d8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3f1dc:	b1a9      	cbz	r1, 3f20a <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   3f1de:	f04f 0420 	mov.w	r4, #32
   3f1e2:	f3ef 8111 	mrs	r1, BASEPRI
   3f1e6:	f384 8812 	msr	BASEPRI_MAX, r4
   3f1ea:	f3bf 8f6f 	isb	sy
   3f1ee:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3f1f2:	b134      	cbz	r4, 3f202 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f1f4:	2400      	movs	r4, #0
   3f1f6:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   3f1fa:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f1fe:	2401      	movs	r4, #1
   3f200:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   3f202:	f381 8811 	msr	BASEPRI, r1
   3f206:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3f20a:	6852      	ldr	r2, [r2, #4]
   3f20c:	06d2      	lsls	r2, r2, #27
   3f20e:	d51a      	bpl.n	3f246 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   3f210:	f04f 0220 	mov.w	r2, #32
   3f214:	f3ef 8111 	mrs	r1, BASEPRI
   3f218:	f382 8812 	msr	BASEPRI_MAX, r2
   3f21c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f220:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3f224:	b112      	cbz	r2, 3f22c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3f226:	2200      	movs	r2, #0
   3f228:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   3f22c:	6902      	ldr	r2, [r0, #16]
   3f22e:	68d2      	ldr	r2, [r2, #12]
   3f230:	b10a      	cbz	r2, 3f236 <uarte_nrfx_isr_int+0x6c>
   3f232:	6912      	ldr	r2, [r2, #16]
   3f234:	b91a      	cbnz	r2, 3f23e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   3f236:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3f23a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   3f23e:	f381 8811 	msr	BASEPRI, r1
   3f242:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   3f246:	6902      	ldr	r2, [r0, #16]
   3f248:	68d2      	ldr	r2, [r2, #12]
   3f24a:	b15a      	cbz	r2, 3f264 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f24c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3f250:	b159      	cbz	r1, 3f26a <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   3f252:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   3f254:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   3f256:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3f258:	b13c      	cbz	r4, 3f26a <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   3f25a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   3f25e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3f262:	7391      	strb	r1, [r2, #14]
}
   3f264:	f85d 4b04 	ldr.w	r4, [sp], #4
   3f268:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f26a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3f26e:	b121      	cbz	r1, 3f27a <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f270:	2100      	movs	r1, #0
   3f272:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3f276:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3f27a:	6813      	ldr	r3, [r2, #0]
   3f27c:	2b00      	cmp	r3, #0
   3f27e:	d0f1      	beq.n	3f264 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3f280:	6851      	ldr	r1, [r2, #4]
}
   3f282:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3f286:	4718      	bx	r3

0003f288 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   3f288:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   3f28a:	f002 fc1e 	bl	41aca <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   3f28e:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   3f290:	bf18      	it	ne
   3f292:	f06f 0015 	mvnne.w	r0, #21
   3f296:	bd08      	pop	{r3, pc}

0003f298 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3f298:	4770      	bx	lr

0003f29a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3f29a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   3f29c:	6843      	ldr	r3, [r0, #4]
   3f29e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   3f2a0:	7a03      	ldrb	r3, [r0, #8]
   3f2a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   3f2a6:	3b01      	subs	r3, #1
   3f2a8:	00db      	lsls	r3, r3, #3
   3f2aa:	6845      	ldr	r5, [r0, #4]
   3f2ac:	6814      	ldr	r4, [r2, #0]
   3f2ae:	441d      	add	r5, r3
   3f2b0:	42ac      	cmp	r4, r5
   3f2b2:	d902      	bls.n	3f2ba <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   3f2b4:	f06f 0001 	mvn.w	r0, #1
}
   3f2b8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   3f2ba:	7965      	ldrb	r5, [r4, #5]
   3f2bc:	428d      	cmp	r5, r1
   3f2be:	d002      	beq.n	3f2c6 <pinctrl_lookup_state+0x2c>
		(*state)++;
   3f2c0:	3408      	adds	r4, #8
   3f2c2:	6014      	str	r4, [r2, #0]
   3f2c4:	e7f1      	b.n	3f2aa <pinctrl_lookup_state+0x10>
			return 0;
   3f2c6:	2000      	movs	r0, #0
   3f2c8:	e7f6      	b.n	3f2b8 <pinctrl_lookup_state+0x1e>

0003f2ca <nrf_gpio_pin_clear>:
{
   3f2ca:	b507      	push	{r0, r1, r2, lr}
   3f2cc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f2ce:	a801      	add	r0, sp, #4
   3f2d0:	f7e6 fc5c 	bl	25b8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3f2d4:	2301      	movs	r3, #1
   3f2d6:	9a01      	ldr	r2, [sp, #4]
   3f2d8:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3f2da:	60c3      	str	r3, [r0, #12]
}
   3f2dc:	b003      	add	sp, #12
   3f2de:	f85d fb04 	ldr.w	pc, [sp], #4

0003f2e2 <nrf_gpio_pin_set>:
{
   3f2e2:	b507      	push	{r0, r1, r2, lr}
   3f2e4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f2e6:	a801      	add	r0, sp, #4
   3f2e8:	f7e6 fc50 	bl	25b8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3f2ec:	2301      	movs	r3, #1
   3f2ee:	9a01      	ldr	r2, [sp, #4]
   3f2f0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3f2f2:	6083      	str	r3, [r0, #8]
}
   3f2f4:	b003      	add	sp, #12
   3f2f6:	f85d fb04 	ldr.w	pc, [sp], #4

0003f2fa <nrf_gpio_pin_write>:
    if (value == 0)
   3f2fa:	b909      	cbnz	r1, 3f300 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   3f2fc:	f7ff bfe5 	b.w	3f2ca <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   3f300:	f7ff bfef 	b.w	3f2e2 <nrf_gpio_pin_set>

0003f304 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
   3f304:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   3f306:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
   3f30a:	4604      	mov	r4, r0
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3f30c:	2b00      	cmp	r3, #0
   3f30e:	bf0c      	ite	eq
   3f310:	460e      	moveq	r6, r1
   3f312:	2600      	movne	r6, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   3f314:	f000 033f 	and.w	r3, r0, #63	; 0x3f
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3f318:	bf0c      	ite	eq
   3f31a:	4615      	moveq	r5, r2
   3f31c:	2501      	movne	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f31e:	a801      	add	r0, sp, #4
   3f320:	9301      	str	r3, [sp, #4]
   3f322:	f7e6 fc33 	bl	25b8c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3f326:	f3c4 1181 	ubfx	r1, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3f32a:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    reg->PIN_CNF[pin_number] = cnf;
   3f32e:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3f330:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
   3f334:	ea44 0106 	orr.w	r1, r4, r6
   3f338:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   3f33c:	3380      	adds	r3, #128	; 0x80
   3f33e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   3f342:	b002      	add	sp, #8
   3f344:	bd70      	pop	{r4, r5, r6, pc}

0003f346 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   3f346:	b570      	push	{r4, r5, r6, lr}
   3f348:	4615      	mov	r5, r2
   3f34a:	4604      	mov	r4, r0
   3f34c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3f350:	42a6      	cmp	r6, r4
   3f352:	d101      	bne.n	3f358 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   3f354:	2000      	movs	r0, #0
}
   3f356:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   3f358:	6823      	ldr	r3, [r4, #0]
   3f35a:	0c1a      	lsrs	r2, r3, #16
   3f35c:	2a19      	cmp	r2, #25
   3f35e:	d869      	bhi.n	3f434 <pinctrl_configure_pins+0xee>
   3f360:	e8df f002 	tbb	[pc, r2]
   3f364:	3e1f180d 	.word	0x3e1f180d
   3f368:	683e3424 	.word	0x683e3424
   3f36c:	43686868 	.word	0x43686868
   3f370:	68686848 	.word	0x68686848
   3f374:	68686868 	.word	0x68686868
   3f378:	594d6868 	.word	0x594d6868
   3f37c:	635e      	.short	0x635e
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   3f37e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f382:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   3f386:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   3f388:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3f38c:	f7ff ffa9 	bl	3f2e2 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3f390:	2201      	movs	r2, #1
   3f392:	e004      	b.n	3f39e <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   3f394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f398:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3f39c:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3f39e:	4611      	mov	r1, r2
   3f3a0:	e00f      	b.n	3f3c2 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   3f3a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f3a6:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   3f3aa:	e7ec      	b.n	3f386 <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   3f3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f3b0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3f3b4:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   3f3b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3f3ba:	f7ff ff86 	bl	3f2ca <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3f3be:	2200      	movs	r2, #0
   3f3c0:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3f3c2:	6820      	ldr	r0, [r4, #0]
   3f3c4:	f7ff ff9e 	bl	3f304 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3f3c8:	3404      	adds	r4, #4
   3f3ca:	e7c1      	b.n	3f350 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   3f3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f3d0:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3f3d4:	6820      	ldr	r0, [r4, #0]
   3f3d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3f3da:	f7ff ff76 	bl	3f2ca <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3f3de:	e7d7      	b.n	3f390 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   3f3e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f3e4:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3f3e8:	e7d8      	b.n	3f39c <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   3f3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f3ee:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3f3f2:	e7d3      	b.n	3f39c <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   3f3f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f3f8:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   3f3fc:	e7ce      	b.n	3f39c <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   3f3fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f402:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3f406:	6820      	ldr	r0, [r4, #0]
   3f408:	f3c0 3140 	ubfx	r1, r0, #13, #1
   3f40c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3f410:	f7ff ff73 	bl	3f2fa <nrf_gpio_pin_write>
   3f414:	e7bc      	b.n	3f390 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   3f416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f41a:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3f41e:	e7f2      	b.n	3f406 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   3f420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f424:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3f428:	e7ed      	b.n	3f406 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   3f42a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3f42e:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   3f432:	e7e8      	b.n	3f406 <pinctrl_configure_pins+0xc0>
		switch (NRF_GET_FUN(pins[i])) {
   3f434:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3f438:	e78d      	b.n	3f356 <pinctrl_configure_pins+0x10>

0003f43a <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   3f43a:	f002 ba03 	b.w	41844 <z_impl_k_busy_wait>

0003f43e <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   3f43e:	f002 b929 	b.w	41694 <k_is_in_isr>

0003f442 <nrf_modem_os_sem_count_get>:
}
   3f442:	6880      	ldr	r0, [r0, #8]
   3f444:	4770      	bx	lr

0003f446 <rpc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3f446:	4668      	mov	r0, sp
   3f448:	f020 0107 	bic.w	r1, r0, #7
   3f44c:	468d      	mov	sp, r1
   3f44e:	b501      	push	{r0, lr}
	nrf_modem_application_irq_handler();
   3f450:	f7f5 f84e 	bl	344f0 <nrf_modem_application_irq_handler>
	nrf_modem_os_event_notify();
   3f454:	f7e6 fdee 	bl	26034 <nrf_modem_os_event_notify>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3f458:	f7e3 fe58 	bl	2310c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3f45c:	f7e3 ff70 	bl	23340 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3f460:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3f464:	4685      	mov	sp, r0
   3f466:	4770      	bx	lr

0003f468 <read_task_create>:
{
   3f468:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(APPLICATION_IRQ, APPLICATION_IRQ_PRIORITY,
   3f46a:	201c      	movs	r0, #28
   3f46c:	2200      	movs	r2, #0
   3f46e:	2106      	movs	r1, #6
   3f470:	f7e3 fe26 	bl	230c0 <z_arm_irq_priority_set>
}
   3f474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(APPLICATION_IRQ);
   3f478:	201c      	movs	r0, #28
   3f47a:	f7e3 bdef 	b.w	2305c <arch_irq_enable>

0003f47e <nrf_modem_os_trace_put>:
	}
#endif /* CONFIG_NRF_MODEM_LIB_TRACE_THREAD_PROCESSING */

#endif /* CONFIG_NRF_MODEM_LIB_TRACE_ENABLED */
	return 0;
}
   3f47e:	2000      	movs	r0, #0
   3f480:	4770      	bx	lr

0003f482 <z_to_nrf_flags>:
{
   3f482:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   3f484:	f000 0040 	and.w	r0, r0, #64	; 0x40
	if (z_flags & MSG_PEEK) {
   3f488:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   3f48a:	bf48      	it	mi
   3f48c:	f040 0002 	orrmi.w	r0, r0, #2
	if (z_flags & MSG_WAITALL) {
   3f490:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   3f492:	bf48      	it	mi
   3f494:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
}
   3f498:	4770      	bx	lr

0003f49a <nrf_to_z_protocol>:
	switch (proto) {
   3f49a:	2811      	cmp	r0, #17
   3f49c:	d005      	beq.n	3f4aa <nrf_to_z_protocol+0x10>
   3f49e:	dc05      	bgt.n	3f4ac <nrf_to_z_protocol+0x12>
   3f4a0:	b118      	cbz	r0, 3f4aa <nrf_to_z_protocol+0x10>
		return -EPROTONOSUPPORT;
   3f4a2:	2806      	cmp	r0, #6
   3f4a4:	bf18      	it	ne
   3f4a6:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
}
   3f4aa:	4770      	bx	lr
	switch (proto) {
   3f4ac:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3f4b0:	d0fb      	beq.n	3f4aa <nrf_to_z_protocol+0x10>
   3f4b2:	f240 1311 	movw	r3, #273	; 0x111
		return -EPROTONOSUPPORT;
   3f4b6:	4298      	cmp	r0, r3
   3f4b8:	e7f4      	b.n	3f4a4 <nrf_to_z_protocol+0xa>

0003f4ba <nrf91_socket_offload_getsockopt>:
{
   3f4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f4be:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   3f4c0:	2300      	movs	r3, #0
{
   3f4c2:	b086      	sub	sp, #24
   3f4c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3f4c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3f4cc:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   3f4d0:	2901      	cmp	r1, #1
{
   3f4d2:	460e      	mov	r6, r1
   3f4d4:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   3f4d6:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3f4d8:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3f4da:	d002      	beq.n	3f4e2 <nrf91_socket_offload_getsockopt+0x28>
   3f4dc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3f4e0:	d13a      	bne.n	3f558 <nrf91_socket_offload_getsockopt+0x9e>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f4e2:	4629      	mov	r1, r5
   3f4e4:	4630      	mov	r0, r6
   3f4e6:	aa02      	add	r2, sp, #8
   3f4e8:	f7e6 fdfc 	bl	260e4 <z_to_nrf_optname>
   3f4ec:	2800      	cmp	r0, #0
   3f4ee:	db33      	blt.n	3f558 <nrf91_socket_offload_getsockopt+0x9e>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3f4f0:	2e01      	cmp	r6, #1
   3f4f2:	d123      	bne.n	3f53c <nrf91_socket_offload_getsockopt+0x82>
   3f4f4:	f1a5 0314 	sub.w	r3, r5, #20
   3f4f8:	2b01      	cmp	r3, #1
   3f4fa:	d81f      	bhi.n	3f53c <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f4fc:	2308      	movs	r3, #8
   3f4fe:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3f500:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f502:	aa03      	add	r2, sp, #12
   3f504:	4638      	mov	r0, r7
   3f506:	9200      	str	r2, [sp, #0]
   3f508:	4631      	mov	r1, r6
   3f50a:	9a02      	ldr	r2, [sp, #8]
   3f50c:	f001 fe15 	bl	4113a <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3f510:	4607      	mov	r7, r0
   3f512:	b978      	cbnz	r0, 3f534 <nrf91_socket_offload_getsockopt+0x7a>
   3f514:	b174      	cbz	r4, 3f534 <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   3f516:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3f518:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   3f51a:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3f51e:	d109      	bne.n	3f534 <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   3f520:	2d04      	cmp	r5, #4
   3f522:	d10d      	bne.n	3f540 <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   3f524:	6820      	ldr	r0, [r4, #0]
   3f526:	b128      	cbz	r0, 3f534 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   3f528:	f7e6 fcbe 	bl	25ea8 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3f52c:	f7fe fcbd 	bl	3deaa <__errno>
   3f530:	6803      	ldr	r3, [r0, #0]
   3f532:	6023      	str	r3, [r4, #0]
}
   3f534:	4638      	mov	r0, r7
   3f536:	b006      	add	sp, #24
   3f538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f53c:	4623      	mov	r3, r4
   3f53e:	e7e0      	b.n	3f502 <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   3f540:	3d14      	subs	r5, #20
   3f542:	2d01      	cmp	r5, #1
   3f544:	d8f6      	bhi.n	3f534 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_timeo.tv_sec;
   3f546:	9b04      	ldr	r3, [sp, #16]
   3f548:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   3f54c:	9b05      	ldr	r3, [sp, #20]
   3f54e:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   3f550:	2310      	movs	r3, #16
   3f552:	f8c8 3000 	str.w	r3, [r8]
   3f556:	e7ed      	b.n	3f534 <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   3f558:	f7fe fca7 	bl	3deaa <__errno>
   3f55c:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3f55e:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3f562:	6003      	str	r3, [r0, #0]
	return retval;
   3f564:	e7e6      	b.n	3f534 <nrf91_socket_offload_getsockopt+0x7a>

0003f566 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3f566:	6800      	ldr	r0, [r0, #0]
   3f568:	f001 bc2a 	b.w	40dc0 <nrf_listen>

0003f56c <nrf91_socket_offload_freeaddrinfo>:
{
   3f56c:	b538      	push	{r3, r4, r5, lr}
   3f56e:	4604      	mov	r4, r0
	while (next != NULL) {
   3f570:	b904      	cbnz	r4, 3f574 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3f572:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3f574:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3f576:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3f578:	f002 fa41 	bl	419fe <k_free>
		k_free(this);
   3f57c:	4620      	mov	r0, r4
   3f57e:	f002 fa3e 	bl	419fe <k_free>
		next = next->ai_next;
   3f582:	462c      	mov	r4, r5
   3f584:	e7f4      	b.n	3f570 <nrf91_socket_offload_freeaddrinfo+0x4>

0003f586 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3f586:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3f588:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3f58a:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3f58c:	4603      	mov	r3, r0
{
   3f58e:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3f590:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3f594:	f101 0420 	add.w	r4, r1, #32
   3f598:	f101 0210 	add.w	r2, r1, #16
   3f59c:	f852 5b04 	ldr.w	r5, [r2], #4
   3f5a0:	42a2      	cmp	r2, r4
   3f5a2:	f843 5b04 	str.w	r5, [r3], #4
   3f5a6:	d1f9      	bne.n	3f59c <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3f5a8:	6a0b      	ldr	r3, [r1, #32]
   3f5aa:	7503      	strb	r3, [r0, #20]
}
   3f5ac:	bd30      	pop	{r4, r5, pc}

0003f5ae <z_to_nrf_ipv6>:
{
   3f5ae:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3f5b0:	2124      	movs	r1, #36	; 0x24
   3f5b2:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3f5b4:	8841      	ldrh	r1, [r0, #2]
{
   3f5b6:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3f5b8:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3f5ba:	2102      	movs	r1, #2
{
   3f5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3f5be:	6059      	str	r1, [r3, #4]
   3f5c0:	1d04      	adds	r4, r0, #4
   3f5c2:	f103 0610 	add.w	r6, r3, #16
   3f5c6:	f100 0714 	add.w	r7, r0, #20
   3f5ca:	4635      	mov	r5, r6
   3f5cc:	6820      	ldr	r0, [r4, #0]
   3f5ce:	6861      	ldr	r1, [r4, #4]
   3f5d0:	3408      	adds	r4, #8
   3f5d2:	c503      	stmia	r5!, {r0, r1}
   3f5d4:	42bc      	cmp	r4, r7
   3f5d6:	462e      	mov	r6, r5
   3f5d8:	d1f7      	bne.n	3f5ca <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3f5da:	7d12      	ldrb	r2, [r2, #20]
   3f5dc:	621a      	str	r2, [r3, #32]
}
   3f5de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003f5e0 <nrf91_socket_offload_sendto>:
{
   3f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f5e4:	b08e      	sub	sp, #56	; 0x38
   3f5e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3f5e8:	460f      	mov	r7, r1
   3f5ea:	461d      	mov	r5, r3
	int sd = OBJ_TO_SD(obj);
   3f5ec:	6806      	ldr	r6, [r0, #0]
	if (to == NULL) {
   3f5ee:	b964      	cbnz	r4, 3f60a <nrf91_socket_offload_sendto+0x2a>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f5f0:	4618      	mov	r0, r3
   3f5f2:	9203      	str	r2, [sp, #12]
   3f5f4:	f7ff ff45 	bl	3f482 <z_to_nrf_flags>
   3f5f8:	4603      	mov	r3, r0
   3f5fa:	4630      	mov	r0, r6
   3f5fc:	9a03      	ldr	r2, [sp, #12]
   3f5fe:	9415      	str	r4, [sp, #84]	; 0x54
}
   3f600:	b00e      	add	sp, #56	; 0x38
   3f602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f606:	f7f5 bc9f 	b.w	34f48 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   3f60a:	8823      	ldrh	r3, [r4, #0]
   3f60c:	9203      	str	r2, [sp, #12]
   3f60e:	2b01      	cmp	r3, #1
   3f610:	d116      	bne.n	3f640 <nrf91_socket_offload_sendto+0x60>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f612:	2710      	movs	r7, #16
	nrf_out->sin_port = ptr->sin_port;
   3f614:	8860      	ldrh	r0, [r4, #2]
	nrf_out->sin_family = NRF_AF_INET;
   3f616:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f618:	6863      	ldr	r3, [r4, #4]
	nrf_out->sin_port = ptr->sin_port;
   3f61a:	f8ad 001c 	strh.w	r0, [sp, #28]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f61e:	4628      	mov	r0, r5
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f620:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f622:	f88d 7014 	strb.w	r7, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f626:	f7ff ff2c 	bl	3f482 <z_to_nrf_flags>
   3f62a:	9a03      	ldr	r2, [sp, #12]
   3f62c:	4603      	mov	r3, r0
   3f62e:	a805      	add	r0, sp, #20
   3f630:	9701      	str	r7, [sp, #4]
   3f632:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f634:	4630      	mov	r0, r6
   3f636:	f7f5 fc87 	bl	34f48 <nrf_sendto>
}
   3f63a:	b00e      	add	sp, #56	; 0x38
   3f63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   3f640:	2b02      	cmp	r3, #2
   3f642:	d10f      	bne.n	3f664 <nrf91_socket_offload_sendto+0x84>
		z_to_nrf_ipv6(to, &ipv6);
   3f644:	f10d 0814 	add.w	r8, sp, #20
   3f648:	4641      	mov	r1, r8
   3f64a:	4620      	mov	r0, r4
   3f64c:	f7ff ffaf 	bl	3f5ae <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f650:	4628      	mov	r0, r5
   3f652:	f7ff ff16 	bl	3f482 <z_to_nrf_flags>
   3f656:	2124      	movs	r1, #36	; 0x24
   3f658:	4603      	mov	r3, r0
   3f65a:	e9cd 8100 	strd	r8, r1, [sp]
   3f65e:	9a03      	ldr	r2, [sp, #12]
   3f660:	4639      	mov	r1, r7
   3f662:	e7e7      	b.n	3f634 <nrf91_socket_offload_sendto+0x54>
	errno = ENOTSUP;
   3f664:	f7fe fc21 	bl	3deaa <__errno>
   3f668:	2386      	movs	r3, #134	; 0x86
   3f66a:	6003      	str	r3, [r0, #0]
	return retval;
   3f66c:	f04f 30ff 	mov.w	r0, #4294967295
   3f670:	e7e3      	b.n	3f63a <nrf91_socket_offload_sendto+0x5a>

0003f672 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3f672:	2300      	movs	r3, #0
{
   3f674:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3f676:	e9cd 3300 	strd	r3, r3, [sp]
   3f67a:	f7ff ffb1 	bl	3f5e0 <nrf91_socket_offload_sendto>
}
   3f67e:	b003      	add	sp, #12
   3f680:	f85d fb04 	ldr.w	pc, [sp], #4

0003f684 <nrf91_socket_offload_connect>:
{
   3f684:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3f686:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3f688:	8808      	ldrh	r0, [r1, #0]
{
   3f68a:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3f68c:	2801      	cmp	r0, #1
{
   3f68e:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3f690:	d10e      	bne.n	3f6b0 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f692:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3f694:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f696:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f698:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3f69c:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3f6a0:	9002      	str	r0, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f6a2:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3f6a4:	4620      	mov	r0, r4
   3f6a6:	a901      	add	r1, sp, #4
   3f6a8:	f7f5 fbac 	bl	34e04 <nrf_connect>
}
   3f6ac:	b00a      	add	sp, #40	; 0x28
   3f6ae:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3f6b0:	2802      	cmp	r0, #2
   3f6b2:	d105      	bne.n	3f6c0 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3f6b4:	4618      	mov	r0, r3
   3f6b6:	a901      	add	r1, sp, #4
   3f6b8:	f7ff ff79 	bl	3f5ae <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3f6bc:	2224      	movs	r2, #36	; 0x24
   3f6be:	e7f1      	b.n	3f6a4 <nrf91_socket_offload_connect+0x20>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3f6c0:	4620      	mov	r0, r4
   3f6c2:	f7f5 fb9f 	bl	34e04 <nrf_connect>
		if (retval < 0) {
   3f6c6:	2800      	cmp	r0, #0
   3f6c8:	daf0      	bge.n	3f6ac <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3f6ca:	f7fe fbee 	bl	3deaa <__errno>
   3f6ce:	2386      	movs	r3, #134	; 0x86
   3f6d0:	6003      	str	r3, [r0, #0]
	return retval;
   3f6d2:	f04f 30ff 	mov.w	r0, #4294967295
   3f6d6:	e7e9      	b.n	3f6ac <nrf91_socket_offload_connect+0x28>

0003f6d8 <nrf91_socket_offload_bind>:
{
   3f6d8:	b510      	push	{r4, lr}
   3f6da:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3f6dc:	8809      	ldrh	r1, [r1, #0]
	int sd = OBJ_TO_SD(obj);
   3f6de:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3f6e0:	2901      	cmp	r1, #1
{
   3f6e2:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3f6e4:	d10e      	bne.n	3f704 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f6e6:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3f6e8:	8858      	ldrh	r0, [r3, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f6ea:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f6ec:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3f6f0:	f8ad 000c 	strh.w	r0, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3f6f4:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f6f6:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3f6f8:	4620      	mov	r0, r4
   3f6fa:	a901      	add	r1, sp, #4
   3f6fc:	f001 fb16 	bl	40d2c <nrf_bind>
}
   3f700:	b00a      	add	sp, #40	; 0x28
   3f702:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3f704:	2902      	cmp	r1, #2
   3f706:	d105      	bne.n	3f714 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3f708:	4618      	mov	r0, r3
   3f70a:	a901      	add	r1, sp, #4
   3f70c:	f7ff ff4f 	bl	3f5ae <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3f710:	2224      	movs	r2, #36	; 0x24
   3f712:	e7f1      	b.n	3f6f8 <nrf91_socket_offload_bind+0x20>
	errno = ENOTSUP;
   3f714:	f7fe fbc9 	bl	3deaa <__errno>
   3f718:	2386      	movs	r3, #134	; 0x86
   3f71a:	6003      	str	r3, [r0, #0]
	return retval;
   3f71c:	f04f 30ff 	mov.w	r0, #4294967295
   3f720:	e7ee      	b.n	3f700 <nrf91_socket_offload_bind+0x28>

0003f722 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3f722:	f7f7 bbe3 	b.w	36eec <z_impl_k_mutex_lock>

0003f726 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3f726:	f7f7 bcb3 	b.w	37090 <z_impl_k_mutex_unlock>

0003f72a <nrf91_socket_offload_recvfrom>:
{
   3f72a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f72e:	4606      	mov	r6, r0
	if (ctx->lock) {
   3f730:	6840      	ldr	r0, [r0, #4]
{
   3f732:	b08f      	sub	sp, #60	; 0x3c
   3f734:	460c      	mov	r4, r1
   3f736:	e9dd 5918 	ldrd	r5, r9, [sp, #96]	; 0x60
   3f73a:	4617      	mov	r7, r2
   3f73c:	4698      	mov	r8, r3
	if (ctx->lock) {
   3f73e:	b108      	cbz	r0, 3f744 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   3f740:	f7ff fff1 	bl	3f726 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f744:	4640      	mov	r0, r8
   3f746:	f7ff fe9c 	bl	3f482 <z_to_nrf_flags>
   3f74a:	f8d6 a000 	ldr.w	sl, [r6]
   3f74e:	4603      	mov	r3, r0
	if (from == NULL) {
   3f750:	b99d      	cbnz	r5, 3f77a <nrf91_socket_offload_recvfrom+0x50>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f752:	4621      	mov	r1, r4
   3f754:	463a      	mov	r2, r7
   3f756:	4650      	mov	r0, sl
   3f758:	e9cd 5500 	strd	r5, r5, [sp]
   3f75c:	f001 fbfe 	bl	40f5c <nrf_recvfrom>
   3f760:	4604      	mov	r4, r0
	if (ctx->lock) {
   3f762:	6870      	ldr	r0, [r6, #4]
   3f764:	b128      	cbz	r0, 3f772 <nrf91_socket_offload_recvfrom+0x48>
		k_mutex_lock(ctx->lock, K_FOREVER);
   3f766:	f04f 32ff 	mov.w	r2, #4294967295
   3f76a:	f04f 33ff 	mov.w	r3, #4294967295
   3f76e:	f7ff ffd8 	bl	3f722 <k_mutex_lock.constprop.0.isra.0>
}
   3f772:	4620      	mov	r0, r4
   3f774:	b00f      	add	sp, #60	; 0x3c
   3f776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   3f77a:	f04f 0b24 	mov.w	fp, #36	; 0x24
   3f77e:	f10d 0814 	add.w	r8, sp, #20
   3f782:	465a      	mov	r2, fp
   3f784:	2100      	movs	r1, #0
   3f786:	9003      	str	r0, [sp, #12]
   3f788:	4640      	mov	r0, r8
   3f78a:	f002 f9e9 	bl	41b60 <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f78e:	aa04      	add	r2, sp, #16
   3f790:	4621      	mov	r1, r4
   3f792:	e9cd 8200 	strd	r8, r2, [sp]
   3f796:	4650      	mov	r0, sl
   3f798:	463a      	mov	r2, r7
   3f79a:	9b03      	ldr	r3, [sp, #12]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f79c:	f8cd b010 	str.w	fp, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f7a0:	f001 fbdc 	bl	40f5c <nrf_recvfrom>
		if (retval < 0) {
   3f7a4:	1e04      	subs	r4, r0, #0
   3f7a6:	dbdc      	blt.n	3f762 <nrf91_socket_offload_recvfrom+0x38>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f7a8:	9b06      	ldr	r3, [sp, #24]
   3f7aa:	2b01      	cmp	r3, #1
   3f7ac:	d109      	bne.n	3f7c2 <nrf91_socket_offload_recvfrom+0x98>
	ptr->sin_family = AF_INET;
   3f7ae:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f7b0:	9b08      	ldr	r3, [sp, #32]
	ptr->sin_port = nrf_in->sin_port;
   3f7b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f7b6:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3f7b8:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   3f7ba:	806a      	strh	r2, [r5, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   3f7bc:	f8c9 3000 	str.w	r3, [r9]
   3f7c0:	e7cf      	b.n	3f762 <nrf91_socket_offload_recvfrom+0x38>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3f7c2:	2b02      	cmp	r3, #2
   3f7c4:	d1cd      	bne.n	3f762 <nrf91_socket_offload_recvfrom+0x38>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3f7c6:	4641      	mov	r1, r8
   3f7c8:	4628      	mov	r0, r5
   3f7ca:	f7ff fedc 	bl	3f586 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3f7ce:	2318      	movs	r3, #24
   3f7d0:	e7f4      	b.n	3f7bc <nrf91_socket_offload_recvfrom+0x92>

0003f7d2 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f7d2:	2300      	movs	r3, #0
{
   3f7d4:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f7d6:	e9cd 3300 	strd	r3, r3, [sp]
   3f7da:	f7ff ffa6 	bl	3f72a <nrf91_socket_offload_recvfrom>
}
   3f7de:	b003      	add	sp, #12
   3f7e0:	f85d fb04 	ldr.w	pc, [sp], #4

0003f7e4 <nrf91_socket_offload_close>:
{
   3f7e4:	b538      	push	{r3, r4, r5, lr}
   3f7e6:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   3f7e8:	6800      	ldr	r0, [r0, #0]
   3f7ea:	f001 fa6e 	bl	40cca <nrf_close>
	if (retval == 0) {
   3f7ee:	4604      	mov	r4, r0
   3f7f0:	b910      	cbnz	r0, 3f7f8 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   3f7f2:	4628      	mov	r0, r5
   3f7f4:	f7e6 ff92 	bl	2671c <release_ctx>
}
   3f7f8:	4620      	mov	r0, r4
   3f7fa:	bd38      	pop	{r3, r4, r5, pc}

0003f7fc <nrf91_socket_offload_setsockopt>:
{
   3f7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   3f800:	2901      	cmp	r1, #1
{
   3f802:	b086      	sub	sp, #24
   3f804:	460c      	mov	r4, r1
   3f806:	4615      	mov	r5, r2
   3f808:	461e      	mov	r6, r3
   3f80a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3f80c:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   3f810:	d002      	beq.n	3f818 <nrf91_socket_offload_setsockopt+0x1c>
   3f812:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3f816:	d122      	bne.n	3f85e <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f818:	4629      	mov	r1, r5
   3f81a:	4620      	mov	r0, r4
   3f81c:	aa03      	add	r2, sp, #12
   3f81e:	f7e6 fc61 	bl	260e4 <z_to_nrf_optname>
   3f822:	2800      	cmp	r0, #0
   3f824:	db1b      	blt.n	3f85e <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3f826:	2c01      	cmp	r4, #1
   3f828:	d112      	bne.n	3f850 <nrf91_socket_offload_setsockopt+0x54>
   3f82a:	3d14      	subs	r5, #20
   3f82c:	2d01      	cmp	r5, #1
   3f82e:	d805      	bhi.n	3f83c <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f830:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3f832:	6833      	ldr	r3, [r6, #0]
   3f834:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f836:	68b3      	ldr	r3, [r6, #8]
		nrf_optval = &nrf_timeo;
   3f838:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f83a:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f83c:	4633      	mov	r3, r6
   3f83e:	4621      	mov	r1, r4
   3f840:	4640      	mov	r0, r8
   3f842:	9a03      	ldr	r2, [sp, #12]
   3f844:	9700      	str	r7, [sp, #0]
   3f846:	f7f5 fc83 	bl	35150 <nrf_setsockopt>
}
   3f84a:	b006      	add	sp, #24
   3f84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3f850:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3f854:	d1f2      	bne.n	3f83c <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3f856:	2d0a      	cmp	r5, #10
   3f858:	bf08      	it	eq
   3f85a:	2704      	moveq	r7, #4
   3f85c:	e7ee      	b.n	3f83c <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   3f85e:	f7fe fb24 	bl	3deaa <__errno>
   3f862:	236d      	movs	r3, #109	; 0x6d
   3f864:	6003      	str	r3, [r0, #0]
	return retval;
   3f866:	f04f 30ff 	mov.w	r0, #4294967295
   3f86a:	e7ee      	b.n	3f84a <nrf91_socket_offload_setsockopt+0x4e>

0003f86c <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   3f86c:	6883      	ldr	r3, [r0, #8]
   3f86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3f870:	b103      	cbz	r3, 3f874 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3f872:	4718      	bx	r3
}
   3f874:	4770      	bx	lr

0003f876 <response_handler>:
	write_uart_string(response);
   3f876:	f7e7 b8f1 	b.w	26a5c <write_uart_string>

0003f87a <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3f87a:	280d      	cmp	r0, #13
   3f87c:	d004      	beq.n	3f888 <is_lfcr+0xe>
   3f87e:	f1a0 030a 	sub.w	r3, r0, #10
   3f882:	4258      	negs	r0, r3
   3f884:	4158      	adcs	r0, r3
   3f886:	4770      	bx	lr
		return true;
   3f888:	2001      	movs	r0, #1
}
   3f88a:	4770      	bx	lr

0003f88c <skip_command_prefix>:
{
   3f88c:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3f88e:	6801      	ldr	r1, [r0, #0]
{
   3f890:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3f892:	1c8b      	adds	r3, r1, #2
   3f894:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3f896:	788c      	ldrb	r4, [r1, #2]
   3f898:	4620      	mov	r0, r4
   3f89a:	f7ff ffee 	bl	3f87a <is_lfcr>
   3f89e:	b910      	cbnz	r0, 3f8a6 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3f8a0:	b10c      	cbz	r4, 3f8a6 <skip_command_prefix+0x1a>
	(*cmd)++;
   3f8a2:	3103      	adds	r1, #3
   3f8a4:	6011      	str	r1, [r2, #0]
}
   3f8a6:	bd10      	pop	{r4, pc}

0003f8a8 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3f8a8:	6813      	ldr	r3, [r2, #0]
   3f8aa:	f7e7 bc43 	b.w	27134 <at_parser_max_params_from_str>

0003f8ae <at_params_list_init>:
{
   3f8ae:	b538      	push	{r3, r4, r5, lr}
   3f8b0:	460d      	mov	r5, r1
	if (list == NULL) {
   3f8b2:	4604      	mov	r4, r0
   3f8b4:	b140      	cbz	r0, 3f8c8 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3f8b6:	2110      	movs	r1, #16
   3f8b8:	4628      	mov	r0, r5
   3f8ba:	f002 f8ab 	bl	41a14 <k_calloc>
   3f8be:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3f8c0:	b128      	cbz	r0, 3f8ce <at_params_list_init+0x20>
	return 0;
   3f8c2:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3f8c4:	6025      	str	r5, [r4, #0]
}
   3f8c6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f8c8:	f06f 0015 	mvn.w	r0, #21
   3f8cc:	e7fb      	b.n	3f8c6 <at_params_list_init+0x18>
		return -ENOMEM;
   3f8ce:	f06f 000b 	mvn.w	r0, #11
   3f8d2:	e7f8      	b.n	3f8c6 <at_params_list_init+0x18>

0003f8d4 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3f8d4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3f8d6:	4604      	mov	r4, r0
   3f8d8:	b148      	cbz	r0, 3f8ee <at_params_list_free+0x1a>
   3f8da:	6843      	ldr	r3, [r0, #4]
   3f8dc:	b13b      	cbz	r3, 3f8ee <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3f8de:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3f8e0:	f7e7 fd26 	bl	27330 <at_params_list_clear>
	k_free(list->params);
   3f8e4:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   3f8e6:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3f8e8:	f002 f889 	bl	419fe <k_free>
	list->params = NULL;
   3f8ec:	6065      	str	r5, [r4, #4]
}
   3f8ee:	bd38      	pop	{r3, r4, r5, pc}

0003f8f0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3f8f0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3f8f2:	b910      	cbnz	r0, 3f8fa <at_params_empty_put+0xa>
		return -EINVAL;
   3f8f4:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3f8f8:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3f8fa:	6843      	ldr	r3, [r0, #4]
   3f8fc:	2b00      	cmp	r3, #0
   3f8fe:	d0f9      	beq.n	3f8f4 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3f900:	f7e7 fcc4 	bl	2728c <at_params_get>
	if (param == NULL) {
   3f904:	4604      	mov	r4, r0
   3f906:	2800      	cmp	r0, #0
   3f908:	d0f4      	beq.n	3f8f4 <at_params_empty_put+0x4>
	at_param_clear(param);
   3f90a:	f7e7 fcf5 	bl	272f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3f90e:	2304      	movs	r3, #4
	param->value.int_val = 0;
   3f910:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3f912:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3f914:	2300      	movs	r3, #0
	return 0;
   3f916:	2000      	movs	r0, #0
	param->value.int_val = 0;
   3f918:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   3f91c:	e7ec      	b.n	3f8f8 <at_params_empty_put+0x8>

0003f91e <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   3f91e:	b570      	push	{r4, r5, r6, lr}
   3f920:	4616      	mov	r6, r2
   3f922:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   3f924:	b910      	cbnz	r0, 3f92c <at_params_int_put+0xe>
		return -EINVAL;
   3f926:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3f92a:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   3f92c:	6843      	ldr	r3, [r0, #4]
   3f92e:	2b00      	cmp	r3, #0
   3f930:	d0f9      	beq.n	3f926 <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f932:	f7e7 fcab 	bl	2728c <at_params_get>
	if (param == NULL) {
   3f936:	4604      	mov	r4, r0
   3f938:	2800      	cmp	r0, #0
   3f93a:	d0f4      	beq.n	3f926 <at_params_int_put+0x8>
	at_param_clear(param);
   3f93c:	f7e7 fcdc 	bl	272f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f940:	2301      	movs	r3, #1
	return 0;
   3f942:	2000      	movs	r0, #0
	param->value.int_val = value;
   3f944:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f948:	7023      	strb	r3, [r4, #0]
	return 0;
   3f94a:	e7ee      	b.n	3f92a <at_params_int_put+0xc>

0003f94c <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f94e:	4617      	mov	r7, r2
   3f950:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3f952:	b910      	cbnz	r0, 3f95a <at_params_string_put+0xe>
		return -EINVAL;
   3f954:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3f958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3f95a:	6843      	ldr	r3, [r0, #4]
   3f95c:	2b00      	cmp	r3, #0
   3f95e:	d0f9      	beq.n	3f954 <at_params_string_put+0x8>
   3f960:	2a00      	cmp	r2, #0
   3f962:	d0f7      	beq.n	3f954 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f964:	f7e7 fc92 	bl	2728c <at_params_get>
	if (param == NULL) {
   3f968:	4604      	mov	r4, r0
   3f96a:	2800      	cmp	r0, #0
   3f96c:	d0f2      	beq.n	3f954 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3f96e:	1c68      	adds	r0, r5, #1
   3f970:	f002 f84c 	bl	41a0c <k_malloc>
	if (param_value == NULL) {
   3f974:	4606      	mov	r6, r0
   3f976:	b160      	cbz	r0, 3f992 <at_params_string_put+0x46>
   3f978:	462a      	mov	r2, r5
   3f97a:	4639      	mov	r1, r7
   3f97c:	f002 f8d0 	bl	41b20 <memcpy>
	at_param_clear(param);
   3f980:	4620      	mov	r0, r4
   3f982:	f7e7 fcb9 	bl	272f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3f986:	2302      	movs	r3, #2
	return 0;
   3f988:	2000      	movs	r0, #0
	param->size = str_len;
   3f98a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3f98c:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3f98e:	60a6      	str	r6, [r4, #8]
	return 0;
   3f990:	e7e2      	b.n	3f958 <at_params_string_put+0xc>
		return -ENOMEM;
   3f992:	f06f 000b 	mvn.w	r0, #11
   3f996:	e7df      	b.n	3f958 <at_params_string_put+0xc>

0003f998 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3f998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f99a:	4617      	mov	r7, r2
   3f99c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3f99e:	b910      	cbnz	r0, 3f9a6 <at_params_array_put+0xe>
		return -EINVAL;
   3f9a0:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3f9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3f9a6:	6843      	ldr	r3, [r0, #4]
   3f9a8:	2b00      	cmp	r3, #0
   3f9aa:	d0f9      	beq.n	3f9a0 <at_params_array_put+0x8>
   3f9ac:	2a00      	cmp	r2, #0
   3f9ae:	d0f7      	beq.n	3f9a0 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f9b0:	f7e7 fc6c 	bl	2728c <at_params_get>
	if (param == NULL) {
   3f9b4:	4604      	mov	r4, r0
   3f9b6:	2800      	cmp	r0, #0
   3f9b8:	d0f2      	beq.n	3f9a0 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   3f9ba:	4628      	mov	r0, r5
   3f9bc:	f002 f826 	bl	41a0c <k_malloc>
	if (param_value == NULL) {
   3f9c0:	4606      	mov	r6, r0
   3f9c2:	b160      	cbz	r0, 3f9de <at_params_array_put+0x46>
   3f9c4:	462a      	mov	r2, r5
   3f9c6:	4639      	mov	r1, r7
   3f9c8:	f002 f8aa 	bl	41b20 <memcpy>
	at_param_clear(param);
   3f9cc:	4620      	mov	r0, r4
   3f9ce:	f7e7 fc93 	bl	272f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3f9d2:	2303      	movs	r3, #3
	return 0;
   3f9d4:	2000      	movs	r0, #0
	param->size = array_len;
   3f9d6:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3f9d8:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3f9da:	60a6      	str	r6, [r4, #8]
	return 0;
   3f9dc:	e7e2      	b.n	3f9a4 <at_params_array_put+0xc>
		return -ENOMEM;
   3f9de:	f06f 000b 	mvn.w	r0, #11
   3f9e2:	e7df      	b.n	3f9a4 <at_params_array_put+0xc>

0003f9e4 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   3f9e4:	b510      	push	{r4, lr}
   3f9e6:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f9e8:	b910      	cbnz	r0, 3f9f0 <at_params_short_get+0xc>
		return -EINVAL;
   3f9ea:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   3f9ee:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f9f0:	6843      	ldr	r3, [r0, #4]
   3f9f2:	2b00      	cmp	r3, #0
   3f9f4:	d0f9      	beq.n	3f9ea <at_params_short_get+0x6>
   3f9f6:	2a00      	cmp	r2, #0
   3f9f8:	d0f7      	beq.n	3f9ea <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f9fa:	f7e7 fc47 	bl	2728c <at_params_get>
	if (param == NULL) {
   3f9fe:	2800      	cmp	r0, #0
   3fa00:	d0f3      	beq.n	3f9ea <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3fa02:	7803      	ldrb	r3, [r0, #0]
   3fa04:	2b01      	cmp	r3, #1
   3fa06:	d1f0      	bne.n	3f9ea <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   3fa08:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3fa0c:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   3fa10:	f142 0200 	adc.w	r2, r2, #0
   3fa14:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   3fa18:	f172 0200 	sbcs.w	r2, r2, #0
   3fa1c:	d2e5      	bcs.n	3f9ea <at_params_short_get+0x6>
	return 0;
   3fa1e:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   3fa20:	8023      	strh	r3, [r4, #0]
	return 0;
   3fa22:	e7e4      	b.n	3f9ee <at_params_short_get+0xa>

0003fa24 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   3fa24:	b510      	push	{r4, lr}
   3fa26:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3fa28:	b910      	cbnz	r0, 3fa30 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   3fa2a:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   3fa2e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3fa30:	6843      	ldr	r3, [r0, #4]
   3fa32:	2b00      	cmp	r3, #0
   3fa34:	d0f9      	beq.n	3fa2a <at_params_unsigned_short_get+0x6>
   3fa36:	2a00      	cmp	r2, #0
   3fa38:	d0f7      	beq.n	3fa2a <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3fa3a:	f7e7 fc27 	bl	2728c <at_params_get>
	if (param == NULL) {
   3fa3e:	2800      	cmp	r0, #0
   3fa40:	d0f3      	beq.n	3fa2a <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3fa42:	7803      	ldrb	r3, [r0, #0]
   3fa44:	2b01      	cmp	r3, #1
   3fa46:	d1f0      	bne.n	3fa2a <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   3fa48:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3fa4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3fa50:	f172 0200 	sbcs.w	r2, r2, #0
   3fa54:	d2e9      	bcs.n	3fa2a <at_params_unsigned_short_get+0x6>
	return 0;
   3fa56:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   3fa58:	8023      	strh	r3, [r4, #0]
	return 0;
   3fa5a:	e7e8      	b.n	3fa2e <at_params_unsigned_short_get+0xa>

0003fa5c <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3fa5c:	b510      	push	{r4, lr}
   3fa5e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3fa60:	b910      	cbnz	r0, 3fa68 <at_params_int_get+0xc>
		return -EINVAL;
   3fa62:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   3fa66:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3fa68:	6843      	ldr	r3, [r0, #4]
   3fa6a:	2b00      	cmp	r3, #0
   3fa6c:	d0f9      	beq.n	3fa62 <at_params_int_get+0x6>
   3fa6e:	2a00      	cmp	r2, #0
   3fa70:	d0f7      	beq.n	3fa62 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3fa72:	f7e7 fc0b 	bl	2728c <at_params_get>
	if (param == NULL) {
   3fa76:	2800      	cmp	r0, #0
   3fa78:	d0f3      	beq.n	3fa62 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3fa7a:	7803      	ldrb	r3, [r0, #0]
   3fa7c:	2b01      	cmp	r3, #1
   3fa7e:	d1f0      	bne.n	3fa62 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   3fa80:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3fa84:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   3fa88:	f142 0200 	adc.w	r2, r2, #0
   3fa8c:	2a00      	cmp	r2, #0
   3fa8e:	d1e8      	bne.n	3fa62 <at_params_int_get+0x6>
	return 0;
   3fa90:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   3fa92:	6023      	str	r3, [r4, #0]
	return 0;
   3fa94:	e7e7      	b.n	3fa66 <at_params_int_get+0xa>

0003fa96 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   3fa96:	b510      	push	{r4, lr}
   3fa98:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3fa9a:	b910      	cbnz	r0, 3faa2 <at_params_int64_get+0xc>
		return -EINVAL;
   3fa9c:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   3faa0:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3faa2:	6843      	ldr	r3, [r0, #4]
   3faa4:	2b00      	cmp	r3, #0
   3faa6:	d0f9      	beq.n	3fa9c <at_params_int64_get+0x6>
   3faa8:	2a00      	cmp	r2, #0
   3faaa:	d0f7      	beq.n	3fa9c <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3faac:	f7e7 fbee 	bl	2728c <at_params_get>
	if (param == NULL) {
   3fab0:	2800      	cmp	r0, #0
   3fab2:	d0f3      	beq.n	3fa9c <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3fab4:	7803      	ldrb	r3, [r0, #0]
   3fab6:	2b01      	cmp	r3, #1
   3fab8:	d1f0      	bne.n	3fa9c <at_params_int64_get+0x6>
	*value = param->value.int_val;
   3faba:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   3fabe:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3fac0:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   3fac4:	e7ec      	b.n	3faa0 <at_params_int64_get+0xa>

0003fac6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3fac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fac8:	4617      	mov	r7, r2
   3faca:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3facc:	b910      	cbnz	r0, 3fad4 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3face:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3fad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3fad4:	6843      	ldr	r3, [r0, #4]
   3fad6:	2b00      	cmp	r3, #0
   3fad8:	d0f9      	beq.n	3face <at_params_string_get+0x8>
   3fada:	2a00      	cmp	r2, #0
   3fadc:	d0f7      	beq.n	3face <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3fade:	2c00      	cmp	r4, #0
   3fae0:	d0f5      	beq.n	3face <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3fae2:	f7e7 fbd3 	bl	2728c <at_params_get>
	if (param == NULL) {
   3fae6:	4606      	mov	r6, r0
   3fae8:	2800      	cmp	r0, #0
   3faea:	d0f0      	beq.n	3face <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3faec:	7803      	ldrb	r3, [r0, #0]
   3faee:	2b02      	cmp	r3, #2
   3faf0:	d1ed      	bne.n	3face <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3faf2:	f7e7 fbe5 	bl	272c0 <at_param_size>
	if (*len < param_len) {
   3faf6:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3faf8:	4605      	mov	r5, r0
	if (*len < param_len) {
   3fafa:	4283      	cmp	r3, r0
   3fafc:	d307      	bcc.n	3fb0e <at_params_string_get+0x48>
   3fafe:	4602      	mov	r2, r0
   3fb00:	68b1      	ldr	r1, [r6, #8]
   3fb02:	4638      	mov	r0, r7
   3fb04:	f002 f80c 	bl	41b20 <memcpy>
	return 0;
   3fb08:	2000      	movs	r0, #0
	*len = param_len;
   3fb0a:	6025      	str	r5, [r4, #0]
	return 0;
   3fb0c:	e7e1      	b.n	3fad2 <at_params_string_get+0xc>
		return -ENOMEM;
   3fb0e:	f06f 000b 	mvn.w	r0, #11
   3fb12:	e7de      	b.n	3fad2 <at_params_string_get+0xc>

0003fb14 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3fb14:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3fb16:	4605      	mov	r5, r0
   3fb18:	b180      	cbz	r0, 3fb3c <at_params_valid_count_get+0x28>
   3fb1a:	6843      	ldr	r3, [r0, #4]
   3fb1c:	b173      	cbz	r3, 3fb3c <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3fb1e:	2100      	movs	r1, #0
   3fb20:	f7e7 fbb4 	bl	2728c <at_params_get>
	size_t valid_i = 0;
   3fb24:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3fb26:	b108      	cbz	r0, 3fb2c <at_params_valid_count_get+0x18>
   3fb28:	7803      	ldrb	r3, [r0, #0]
   3fb2a:	b90b      	cbnz	r3, 3fb30 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3fb2c:	4620      	mov	r0, r4
   3fb2e:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3fb30:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3fb32:	4621      	mov	r1, r4
   3fb34:	4628      	mov	r0, r5
   3fb36:	f7e7 fba9 	bl	2728c <at_params_get>
   3fb3a:	e7f4      	b.n	3fb26 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3fb3c:	f06f 0415 	mvn.w	r4, #21
   3fb40:	e7f4      	b.n	3fb2c <at_params_valid_count_get+0x18>

0003fb42 <lte_lc_init_and_connect_async>:
{
   3fb42:	b510      	push	{r4, lr}
   3fb44:	4604      	mov	r4, r0
	err = init_and_config();
   3fb46:	f7e7 ffd9 	bl	27afc <init_and_config>
	if (err) {
   3fb4a:	b920      	cbnz	r0, 3fb56 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   3fb4c:	4620      	mov	r0, r4
}
   3fb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   3fb52:	f7e8 b92d 	b.w	27db0 <lte_lc_connect_async>
}
   3fb56:	f06f 000d 	mvn.w	r0, #13
   3fb5a:	bd10      	pop	{r4, pc}

0003fb5c <string_to_int>:
{
   3fb5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3fb5e:	460c      	mov	r4, r1
   3fb60:	4605      	mov	r5, r0
   3fb62:	4616      	mov	r6, r2
	errno = 0;
   3fb64:	f7fe f9a1 	bl	3deaa <__errno>
   3fb68:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   3fb6a:	4622      	mov	r2, r4
	errno = 0;
   3fb6c:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   3fb6e:	a901      	add	r1, sp, #4
   3fb70:	4628      	mov	r0, r5
   3fb72:	f7fb f991 	bl	3ae98 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3fb76:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   3fb78:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3fb7a:	42ab      	cmp	r3, r5
   3fb7c:	d103      	bne.n	3fb86 <string_to_int+0x2a>
		return -ENODATA;
   3fb7e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   3fb82:	b002      	add	sp, #8
   3fb84:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3fb86:	781b      	ldrb	r3, [r3, #0]
   3fb88:	2b00      	cmp	r3, #0
   3fb8a:	d1f8      	bne.n	3fb7e <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3fb8c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   3fb90:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3fb92:	3303      	adds	r3, #3
   3fb94:	d802      	bhi.n	3fb9c <string_to_int+0x40>
	return 0;
   3fb96:	2000      	movs	r0, #0
	*output = temp;
   3fb98:	6034      	str	r4, [r6, #0]
	return 0;
   3fb9a:	e7f2      	b.n	3fb82 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3fb9c:	f7fe f985 	bl	3deaa <__errno>
   3fba0:	6803      	ldr	r3, [r0, #0]
   3fba2:	2b22      	cmp	r3, #34	; 0x22
   3fba4:	d1f7      	bne.n	3fb96 <string_to_int+0x3a>
   3fba6:	e7ea      	b.n	3fb7e <string_to_int+0x22>

0003fba8 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   3fba8:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   3fbaa:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   3fbac:	b087      	sub	sp, #28
   3fbae:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3fbb0:	ab01      	add	r3, sp, #4
   3fbb2:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   3fbb4:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3fbb6:	f7ff ff86 	bl	3fac6 <at_params_string_get>
	if (err) {
   3fbba:	b968      	cbnz	r0, 3fbd8 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   3fbbc:	9b01      	ldr	r3, [sp, #4]
   3fbbe:	aa06      	add	r2, sp, #24
   3fbc0:	4413      	add	r3, r2
   3fbc2:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   3fbc6:	4622      	mov	r2, r4
   3fbc8:	4629      	mov	r1, r5
   3fbca:	a802      	add	r0, sp, #8
   3fbcc:	f7ff ffc6 	bl	3fb5c <string_to_int>
		return -ENODATA;
   3fbd0:	2800      	cmp	r0, #0
   3fbd2:	bf18      	it	ne
   3fbd4:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   3fbd8:	b007      	add	sp, #28
   3fbda:	bd30      	pop	{r4, r5, pc}

0003fbdc <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   3fbdc:	4770      	bx	lr

0003fbde <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   3fbde:	f7e8 b8fd 	b.w	27ddc <lte_lc_deinit>

0003fbe2 <json_add_str>:
{
   3fbe2:	b513      	push	{r0, r1, r4, lr}
	if (parent == NULL || str == NULL || item == NULL) {
   3fbe4:	4604      	mov	r4, r0
{
   3fbe6:	9101      	str	r1, [sp, #4]
	if (parent == NULL || str == NULL || item == NULL) {
   3fbe8:	b160      	cbz	r0, 3fc04 <json_add_str+0x22>
   3fbea:	b15a      	cbz	r2, 3fc04 <json_add_str+0x22>
	json_str = cJSON_CreateString(item);
   3fbec:	4610      	mov	r0, r2
   3fbee:	f7f2 fd57 	bl	326a0 <cJSON_CreateString>
	if (json_str == NULL) {
   3fbf2:	4602      	mov	r2, r0
   3fbf4:	b148      	cbz	r0, 3fc0a <json_add_str+0x28>
	cJSON_AddItemToObject(parent, str, item);
   3fbf6:	4620      	mov	r0, r4
   3fbf8:	9901      	ldr	r1, [sp, #4]
   3fbfa:	f000 fb55 	bl	402a8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3fbfe:	2000      	movs	r0, #0
}
   3fc00:	b002      	add	sp, #8
   3fc02:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3fc04:	f06f 0015 	mvn.w	r0, #21
   3fc08:	e7fa      	b.n	3fc00 <json_add_str+0x1e>
		return -ENOMEM;
   3fc0a:	f06f 000b 	mvn.w	r0, #11
   3fc0e:	e7f7      	b.n	3fc00 <json_add_str+0x1e>

0003fc10 <json_add_data>:
{
   3fc10:	b570      	push	{r4, r5, r6, lr}
   3fc12:	4604      	mov	r4, r0
	if (param == NULL || json_obj == NULL) {
   3fc14:	460e      	mov	r6, r1
{
   3fc16:	b09c      	sub	sp, #112	; 0x70
	if (param == NULL || json_obj == NULL) {
   3fc18:	b921      	cbnz	r1, 3fc24 <json_add_data+0x14>
		return -EINVAL;
   3fc1a:	f06f 0415 	mvn.w	r4, #21
}
   3fc1e:	4620      	mov	r0, r4
   3fc20:	b01c      	add	sp, #112	; 0x70
   3fc22:	bd70      	pop	{r4, r5, r6, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   3fc24:	2264      	movs	r2, #100	; 0x64
   3fc26:	2100      	movs	r1, #0
   3fc28:	a803      	add	r0, sp, #12
   3fc2a:	f001 ff99 	bl	41b60 <memset>
	ret = modem_info_name_get(param->type,
   3fc2e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3fc32:	a903      	add	r1, sp, #12
   3fc34:	f7e8 fdd8 	bl	287e8 <modem_info_name_get>
	if (ret < 0) {
   3fc38:	1e05      	subs	r5, r0, #0
   3fc3a:	dbee      	blt.n	3fc1a <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   3fc3c:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3fc40:	f7e8 fdc8 	bl	287d4 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   3fc44:	2802      	cmp	r0, #2
   3fc46:	d114      	bne.n	3fc72 <json_add_data+0x62>
   3fc48:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   3fc4c:	2b03      	cmp	r3, #3
   3fc4e:	d010      	beq.n	3fc72 <json_add_data+0x62>
		total_len += strlen(param->value_string);
   3fc50:	1ca2      	adds	r2, r4, #2
   3fc52:	4610      	mov	r0, r2
   3fc54:	9201      	str	r2, [sp, #4]
   3fc56:	f7dd faf4 	bl	1d242 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   3fc5a:	9a01      	ldr	r2, [sp, #4]
		total_len += strlen(param->value_string);
   3fc5c:	4604      	mov	r4, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   3fc5e:	a903      	add	r1, sp, #12
   3fc60:	4630      	mov	r0, r6
   3fc62:	f7ff ffbe 	bl	3fbe2 <json_add_str>
   3fc66:	4428      	add	r0, r5
	if (ret < 0) {
   3fc68:	ea34 0420 	bics.w	r4, r4, r0, asr #32
   3fc6c:	bf28      	it	cs
   3fc6e:	4604      	movcs	r4, r0
   3fc70:	e7d5      	b.n	3fc1e <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   3fc72:	8820      	ldrh	r0, [r4, #0]
   3fc74:	f7dc fd26 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   3fc78:	f7de fdaa 	bl	1e7d0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   3fc7c:	4602      	mov	r2, r0
   3fc7e:	b138      	cbz	r0, 3fc90 <json_add_data+0x80>
	cJSON_AddItemToObject(parent, str, item);
   3fc80:	4630      	mov	r0, r6
   3fc82:	a903      	add	r1, sp, #12
   3fc84:	f000 fb10 	bl	402a8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3fc88:	2000      	movs	r0, #0
		total_len += sizeof(uint16_t);
   3fc8a:	2402      	movs	r4, #2
		ret += json_add_num(json_obj, data_name, param->value);
   3fc8c:	4428      	add	r0, r5
   3fc8e:	e7eb      	b.n	3fc68 <json_add_data+0x58>
		return -ENOMEM;
   3fc90:	f06f 000b 	mvn.w	r0, #11
   3fc94:	e7f9      	b.n	3fc8a <json_add_data+0x7a>

0003fc96 <sim_data_add>:
{
   3fc96:	b570      	push	{r4, r5, r6, lr}
   3fc98:	4606      	mov	r6, r0
	if (sim == NULL || json_obj == NULL) {
   3fc9a:	460d      	mov	r5, r1
   3fc9c:	b179      	cbz	r1, 3fcbe <sim_data_add+0x28>
	total_len = json_add_data(&sim->uicc, json_obj);
   3fc9e:	f7ff ffb7 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   3fca2:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   3fca4:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   3fca6:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3fcaa:	f7ff ffb1 	bl	3fc10 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   3fcae:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   3fcb0:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   3fcb2:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   3fcb6:	f7ff ffab 	bl	3fc10 <json_add_data>
   3fcba:	4420      	add	r0, r4
}
   3fcbc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3fcbe:	f06f 0015 	mvn.w	r0, #21
   3fcc2:	e7fb      	b.n	3fcbc <sim_data_add+0x26>

0003fcc4 <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   3fcc4:	b508      	push	{r3, lr}
	date_time_core_init();
   3fcc6:	f7e9 fab5 	bl	29234 <date_time_core_init>

	return 0;
}
   3fcca:	2000      	movs	r0, #0
   3fccc:	bd08      	pop	{r3, pc}

0003fcce <date_time_is_valid>:
	return date_time_core_is_valid();
   3fcce:	f7e9 bae7 	b.w	292a0 <date_time_core_is_valid>

0003fcd2 <date_time_register_handler>:
	date_time_core_register_handler(evt_handler);
   3fcd2:	f7e9 badf 	b.w	29294 <date_time_core_register_handler>

0003fcd6 <location_service_get_certificate>:
	if (service == MULTICELL_SERVICE_NRF_CLOUD) {
   3fcd6:	2801      	cmp	r0, #1
   3fcd8:	d101      	bne.n	3fcde <location_service_get_certificate+0x8>
		return location_service_get_certificate_nrf_cloud();
   3fcda:	f7e9 bddb 	b.w	29894 <location_service_get_certificate_nrf_cloud>
}
   3fcde:	2000      	movs	r0, #0
   3fce0:	4770      	bx	lr

0003fce2 <location_core_config_log>:
}
   3fce2:	4770      	bx	lr

0003fce4 <method_gnss_agps_required>:
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   3fce4:	6882      	ldr	r2, [r0, #8]
   3fce6:	f002 0301 	and.w	r3, r2, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   3fcea:	0791      	lsls	r1, r2, #30
		type_count++;
   3fcec:	bf48      	it	mi
   3fcee:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   3fcf0:	0751      	lsls	r1, r2, #29
		type_count++;
   3fcf2:	bf48      	it	mi
   3fcf4:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   3fcf6:	0711      	lsls	r1, r2, #28
		type_count++;
   3fcf8:	bf48      	it	mi
   3fcfa:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   3fcfc:	06d1      	lsls	r1, r2, #27
		type_count++;
   3fcfe:	bf48      	it	mi
   3fd00:	3301      	addmi	r3, #1
	if (request->data_flags &  NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   3fd02:	f002 0220 	and.w	r2, r2, #32
   3fd06:	4313      	orrs	r3, r2
}
   3fd08:	bf14      	ite	ne
   3fd0a:	2001      	movne	r0, #1
   3fd0c:	2000      	moveq	r0, #0
   3fd0e:	4770      	bx	lr

0003fd10 <json_add_num_cs>:
{
   3fd10:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3fd12:	b138      	cbz	r0, 3fd24 <json_add_num_cs+0x14>
	return cJSON_AddNumberToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3fd14:	f000 fb10 	bl	40338 <cJSON_AddNumberToObjectCS>
   3fd18:	2800      	cmp	r0, #0
   3fd1a:	bf14      	ite	ne
   3fd1c:	2000      	movne	r0, #0
   3fd1e:	f06f 000b 	mvneq.w	r0, #11
}
   3fd22:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3fd24:	f06f 0015 	mvn.w	r0, #21
   3fd28:	e7fb      	b.n	3fd22 <json_add_num_cs+0x12>

0003fd2a <json_add_obj_cs>:
{
   3fd2a:	b510      	push	{r4, lr}
	if (!parent || !str || !item) {
   3fd2c:	b148      	cbz	r0, 3fd42 <json_add_obj_cs+0x18>
   3fd2e:	b141      	cbz	r1, 3fd42 <json_add_obj_cs+0x18>
   3fd30:	b13a      	cbz	r2, 3fd42 <json_add_obj_cs+0x18>
	return cJSON_AddItemToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3fd32:	f000 fabc 	bl	402ae <cJSON_AddItemToObjectCS>
   3fd36:	2800      	cmp	r0, #0
   3fd38:	bf14      	ite	ne
   3fd3a:	2000      	movne	r0, #0
   3fd3c:	f06f 000b 	mvneq.w	r0, #11
}
   3fd40:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3fd42:	f06f 0015 	mvn.w	r0, #21
   3fd46:	e7fb      	b.n	3fd40 <json_add_obj_cs+0x16>

0003fd48 <json_add_str_cs>:
{
   3fd48:	b508      	push	{r3, lr}
	if (!parent || !str || !item) {
   3fd4a:	b140      	cbz	r0, 3fd5e <json_add_str_cs+0x16>
   3fd4c:	b13a      	cbz	r2, 3fd5e <json_add_str_cs+0x16>
	return cJSON_AddStringToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3fd4e:	f000 fb1f 	bl	40390 <cJSON_AddStringToObjectCS>
   3fd52:	2800      	cmp	r0, #0
   3fd54:	bf14      	ite	ne
   3fd56:	2000      	movne	r0, #0
   3fd58:	f06f 000b 	mvneq.w	r0, #11
}
   3fd5c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3fd5e:	f06f 0015 	mvn.w	r0, #21
   3fd62:	e7fb      	b.n	3fd5c <json_add_str_cs+0x14>

0003fd64 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3fd64:	b108      	cbz	r0, 3fd6a <json_object_decode+0x6>
   3fd66:	f000 ba93 	b.w	40290 <cJSON_GetObjectItem>
}
   3fd6a:	4770      	bx	lr

0003fd6c <json_add_null_cs>:
{
   3fd6c:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3fd6e:	b138      	cbz	r0, 3fd80 <json_add_null_cs+0x14>
	return cJSON_AddNullToObjectCS(parent, str) ? 0 : -ENOMEM;
   3fd70:	f000 facd 	bl	4030e <cJSON_AddNullToObjectCS>
   3fd74:	2800      	cmp	r0, #0
   3fd76:	bf14      	ite	ne
   3fd78:	2000      	movne	r0, #0
   3fd7a:	f06f 000b 	mvneq.w	r0, #11
}
   3fd7e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3fd80:	f06f 0015 	mvn.w	r0, #21
   3fd84:	e7fb      	b.n	3fd7e <json_add_null_cs+0x12>

0003fd86 <json_strdup>:
{
   3fd86:	b538      	push	{r3, r4, r5, lr}
	char *src = cJSON_GetStringValue(string_obj);
   3fd88:	f000 fb96 	bl	404b8 <cJSON_GetStringValue>
	if (!src) {
   3fd8c:	4605      	mov	r5, r0
   3fd8e:	b160      	cbz	r0, 3fdaa <json_strdup+0x24>
	dest = nrf_cloud_calloc(strlen(src) + 1, 1);
   3fd90:	f7dd fa57 	bl	1d242 <strlen>
   3fd94:	2101      	movs	r1, #1
   3fd96:	4408      	add	r0, r1
   3fd98:	f001 fe3c 	bl	41a14 <k_calloc>
	if (dest) {
   3fd9c:	4604      	mov	r4, r0
   3fd9e:	b110      	cbz	r0, 3fda6 <json_strdup+0x20>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   3fda0:	4629      	mov	r1, r5
   3fda2:	f002 f8a8 	bl	41ef6 <strcpy>
}
   3fda6:	4620      	mov	r0, r4
   3fda8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3fdaa:	4604      	mov	r4, r0
   3fdac:	e7fb      	b.n	3fda6 <json_strdup+0x20>

0003fdae <json_decode_and_alloc>:
{
   3fdae:	b538      	push	{r3, r4, r5, lr}
   3fdb0:	4605      	mov	r5, r0
	if (!data || !cJSON_IsString(obj)) {
   3fdb2:	460c      	mov	r4, r1
   3fdb4:	b911      	cbnz	r1, 3fdbc <json_decode_and_alloc+0xe>
		return -EINVAL;
   3fdb6:	f06f 0015 	mvn.w	r0, #21
}
   3fdba:	bd38      	pop	{r3, r4, r5, pc}
	if (!data || !cJSON_IsString(obj)) {
   3fdbc:	f000 fb75 	bl	404aa <cJSON_IsString>
   3fdc0:	2800      	cmp	r0, #0
   3fdc2:	d0f8      	beq.n	3fdb6 <json_decode_and_alloc+0x8>
	data->ptr = json_strdup(obj);
   3fdc4:	4628      	mov	r0, r5
   3fdc6:	f7ff ffde 	bl	3fd86 <json_strdup>
   3fdca:	6060      	str	r0, [r4, #4]
	if (data->ptr == NULL) {
   3fdcc:	b120      	cbz	r0, 3fdd8 <json_decode_and_alloc+0x2a>
	data->len = strlen(data->ptr);
   3fdce:	f7dd fa38 	bl	1d242 <strlen>
   3fdd2:	6020      	str	r0, [r4, #0]
	return 0;
   3fdd4:	2000      	movs	r0, #0
   3fdd6:	e7f0      	b.n	3fdba <json_decode_and_alloc+0xc>
		return -ENOMEM;
   3fdd8:	f06f 000b 	mvn.w	r0, #11
   3fddc:	e7ed      	b.n	3fdba <json_decode_and_alloc+0xc>

0003fdde <nrf_cloud_device_status_free>:
{
   3fdde:	b510      	push	{r4, lr}
	if (status && status->ptr) {
   3fde0:	4604      	mov	r4, r0
   3fde2:	b130      	cbz	r0, 3fdf2 <nrf_cloud_device_status_free+0x14>
   3fde4:	6840      	ldr	r0, [r0, #4]
   3fde6:	b120      	cbz	r0, 3fdf2 <nrf_cloud_device_status_free+0x14>
		cJSON_free((void *)status->ptr);
   3fde8:	f7f2 fc98 	bl	3271c <cJSON_free>
		status->ptr = NULL;
   3fdec:	2300      	movs	r3, #0
		status->len = 0;
   3fdee:	e9c4 3300 	strd	r3, r3, [r4]
}
   3fdf2:	bd10      	pop	{r4, pc}

0003fdf4 <nrf_cloud_configured_client_id_length_get>:
}
   3fdf4:	2013      	movs	r0, #19
   3fdf6:	4770      	bx	lr

0003fdf8 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3fdf8:	e8d0 3fef 	ldaex	r3, [r0]
   3fdfc:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3fe00:	2a00      	cmp	r2, #0
   3fe02:	d1f9      	bne.n	3fdf8 <atomic_set.isra.0>
}
   3fe04:	4770      	bx	lr

0003fe06 <cc_disconnection_handler>:
}
   3fe06:	2000      	movs	r0, #0
   3fe08:	4770      	bx	lr

0003fe0a <disconnection_handler>:
{
   3fe0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   3fe0c:	2218      	movs	r2, #24
   3fe0e:	2100      	movs	r1, #0
   3fe10:	4668      	mov	r0, sp
   3fe12:	f001 fea5 	bl	41b60 <memset>
   3fe16:	2309      	movs	r3, #9
   3fe18:	f88d 3000 	strb.w	r3, [sp]
   3fe1c:	2301      	movs	r3, #1
   3fe1e:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   3fe20:	f7eb fee2 	bl	2bbe8 <nfsm_get_disconnect_requested>
   3fe24:	b108      	cbz	r0, 3fe2a <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   3fe26:	2300      	movs	r3, #0
   3fe28:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3fe2a:	4669      	mov	r1, sp
   3fe2c:	2001      	movs	r0, #1
   3fe2e:	f7eb fe9f 	bl	2bb70 <nfsm_set_current_state_and_notify>
}
   3fe32:	2000      	movs	r0, #0
   3fe34:	b007      	add	sp, #28
   3fe36:	f85d fb04 	ldr.w	pc, [sp], #4

0003fe3a <dc_connection_handler>:
{
   3fe3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   3fe3c:	6801      	ldr	r1, [r0, #0]
   3fe3e:	b951      	cbnz	r1, 3fe56 <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   3fe40:	2218      	movs	r2, #24
   3fe42:	4668      	mov	r0, sp
   3fe44:	f001 fe8c 	bl	41b60 <memset>
   3fe48:	2305      	movs	r3, #5
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3fe4a:	4669      	mov	r1, sp
   3fe4c:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   3fe4e:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3fe52:	f7eb fe8d 	bl	2bb70 <nfsm_set_current_state_and_notify>
}
   3fe56:	2000      	movs	r0, #0
   3fe58:	b007      	add	sp, #28
   3fe5a:	f85d fb04 	ldr.w	pc, [sp], #4

0003fe5e <cc_tx_ack_in_state_requested_handler>:
{
   3fe5e:	b508      	push	{r3, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   3fe60:	8883      	ldrh	r3, [r0, #4]
   3fe62:	2bc8      	cmp	r3, #200	; 0xc8
   3fe64:	d103      	bne.n	3fe6e <cc_tx_ack_in_state_requested_handler+0x10>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3fe66:	2100      	movs	r1, #0
   3fe68:	2005      	movs	r0, #5
   3fe6a:	f7eb fe81 	bl	2bb70 <nfsm_set_current_state_and_notify>
}
   3fe6e:	2000      	movs	r0, #0
   3fe70:	bd08      	pop	{r3, pc}

0003fe72 <dc_disconnection_handler>:
   3fe72:	2000      	movs	r0, #0
   3fe74:	4770      	bx	lr

0003fe76 <dc_tx_ack_handler>:
   3fe76:	2000      	movs	r0, #0
   3fe78:	4770      	bx	lr

0003fe7a <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3fe7a:	2101      	movs	r1, #1
   3fe7c:	f7ec bc1c 	b.w	2c6b8 <dc_send>

0003fe80 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   3fe80:	2100      	movs	r1, #0
   3fe82:	f7ec bc19 	b.w	2c6b8 <dc_send>

0003fe86 <npgps_get_time>:
	return npgps_get_shifted_time(gps_sec, gps_day, gps_time_of_day, 0);
   3fe86:	2300      	movs	r3, #0
   3fe88:	f7ef b96c 	b.w	2f164 <npgps_get_shifted_time>

0003fe8c <nrf_cloud_cell_pos_request>:
{
   3fe8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3fe8e:	4604      	mov	r4, r0
   3fe90:	460d      	mov	r5, r1
   3fe92:	4616      	mov	r6, r2
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   3fe94:	f7eb fe66 	bl	2bb64 <nfsm_get_current_state>
   3fe98:	2809      	cmp	r0, #9
   3fe9a:	d116      	bne.n	3feca <nrf_cloud_cell_pos_request+0x3e>
	cJSON *cell_pos_req_obj = NULL;
   3fe9c:	2300      	movs	r3, #0
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3fe9e:	4620      	mov	r0, r4
   3fea0:	4629      	mov	r1, r5
   3fea2:	aa01      	add	r2, sp, #4
	cJSON *cell_pos_req_obj = NULL;
   3fea4:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3fea6:	f7ef fb5d 	bl	2f564 <nrf_cloud_cell_pos_request_json_get>
	if (!err) {
   3feaa:	4604      	mov	r4, r0
   3feac:	b938      	cbnz	r0, 3febe <nrf_cloud_cell_pos_request+0x32>
		if (request_loc) {
   3feae:	b115      	cbz	r5, 3feb6 <nrf_cloud_cell_pos_request+0x2a>
			nfsm_set_cell_pos_response_cb(cb);
   3feb0:	4630      	mov	r0, r6
   3feb2:	f7ec fa35 	bl	2c320 <nfsm_set_cell_pos_response_cb>
		err = json_send_to_cloud(cell_pos_req_obj);
   3feb6:	9801      	ldr	r0, [sp, #4]
   3feb8:	f7eb f854 	bl	2af64 <json_send_to_cloud>
   3febc:	4604      	mov	r4, r0
	cJSON_Delete(cell_pos_req_obj);
   3febe:	9801      	ldr	r0, [sp, #4]
   3fec0:	f7f2 fb50 	bl	32564 <cJSON_Delete>
}
   3fec4:	4620      	mov	r0, r4
   3fec6:	b002      	add	sp, #8
   3fec8:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   3feca:	f06f 040c 	mvn.w	r4, #12
   3fece:	e7f9      	b.n	3fec4 <nrf_cloud_cell_pos_request+0x38>

0003fed0 <reset_topic>:
{
   3fed0:	b510      	push	{r4, lr}
   3fed2:	4604      	mov	r4, r0
	if (topic->utf8) {
   3fed4:	6800      	ldr	r0, [r0, #0]
   3fed6:	b118      	cbz	r0, 3fee0 <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   3fed8:	f001 fd91 	bl	419fe <k_free>
		topic->utf8 = NULL;
   3fedc:	2300      	movs	r3, #0
   3fede:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   3fee0:	2300      	movs	r3, #0
   3fee2:	6063      	str	r3, [r4, #4]
}
   3fee4:	bd10      	pop	{r4, pc}

0003fee6 <get_number_from_array>:
{
   3fee6:	b538      	push	{r3, r4, r5, lr}
   3fee8:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetArrayItem(array, index);
   3feea:	f000 f9cb 	bl	40284 <cJSON_GetArrayItem>
   3feee:	4605      	mov	r5, r0
	if (!cJSON_IsNumber(item)) {
   3fef0:	f000 fad4 	bl	4049c <cJSON_IsNumber>
   3fef4:	b118      	cbz	r0, 3fefe <get_number_from_array+0x18>
	return 0;
   3fef6:	2000      	movs	r0, #0
	*number_out = item->valueint;
   3fef8:	696b      	ldr	r3, [r5, #20]
   3fefa:	6023      	str	r3, [r4, #0]
}
   3fefc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3fefe:	f06f 0015 	mvn.w	r0, #21
   3ff02:	e7fb      	b.n	3fefc <get_number_from_array+0x16>

0003ff04 <error_evt_send>:
{
   3ff04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3ff06:	2300      	movs	r3, #0
   3ff08:	9301      	str	r3, [sp, #4]
   3ff0a:	9303      	str	r3, [sp, #12]
   3ff0c:	2301      	movs	r3, #1
		.error = -error
   3ff0e:	4249      	negs	r1, r1
	return dl->callback(&evt);
   3ff10:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	const struct download_client_evt evt = {
   3ff14:	f88d 3004 	strb.w	r3, [sp, #4]
   3ff18:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3ff1a:	f8d0 3a50 	ldr.w	r3, [r0, #2640]	; 0xa50
   3ff1e:	a801      	add	r0, sp, #4
   3ff20:	4798      	blx	r3
}
   3ff22:	b005      	add	sp, #20
   3ff24:	f85d fb04 	ldr.w	pc, [sp], #4

0003ff28 <request_send>:
	switch (dl->proto) {
   3ff28:	f8d0 393c 	ldr.w	r3, [r0, #2364]	; 0x93c
   3ff2c:	2b06      	cmp	r3, #6
   3ff2e:	d002      	beq.n	3ff36 <request_send+0xe>
   3ff30:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3ff34:	d101      	bne.n	3ff3a <request_send+0x12>
		return http_get_request_send(dl);
   3ff36:	f7f0 bebb 	b.w	30cb0 <http_get_request_send>
}
   3ff3a:	2000      	movs	r0, #0
   3ff3c:	4770      	bx	lr

0003ff3e <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3ff3e:	b128      	cbz	r0, 3ff4c <download_client_file_size_get+0xe>
   3ff40:	b121      	cbz	r1, 3ff4c <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   3ff42:	f8d0 391c 	ldr.w	r3, [r0, #2332]	; 0x91c

	return 0;
   3ff46:	2000      	movs	r0, #0
	*size = client->file_size;
   3ff48:	600b      	str	r3, [r1, #0]
	return 0;
   3ff4a:	4770      	bx	lr
		return -EINVAL;
   3ff4c:	f06f 0015 	mvn.w	r0, #21
}
   3ff50:	4770      	bx	lr

0003ff52 <swallow>:
{
   3ff52:	b570      	push	{r4, r5, r6, lr}
   3ff54:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   3ff56:	6800      	ldr	r0, [r0, #0]
{
   3ff58:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   3ff5a:	f002 f81b 	bl	41f94 <strstr>
	if (!p) {
   3ff5e:	4604      	mov	r4, r0
   3ff60:	b130      	cbz	r0, 3ff70 <swallow+0x1e>
	*str = p + strlen(swallow);
   3ff62:	4630      	mov	r0, r6
   3ff64:	f7dd f96d 	bl	1d242 <strlen>
   3ff68:	4404      	add	r4, r0
	return 0;
   3ff6a:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   3ff6c:	602c      	str	r4, [r5, #0]
}
   3ff6e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   3ff70:	2001      	movs	r0, #1
   3ff72:	e7fc      	b.n	3ff6e <swallow+0x1c>

0003ff74 <fota_download_s0_active_get>:
}
   3ff74:	f06f 0001 	mvn.w	r0, #1
   3ff78:	4770      	bx	lr

0003ff7a <dfu_target_mcuboot_schedule_update>:

int dfu_target_mcuboot_schedule_update(int img_num)
{
	int err = 0;

	if (img_num == -1) {
   3ff7a:	3001      	adds	r0, #1
   3ff7c:	2801      	cmp	r0, #1
   3ff7e:	d801      	bhi.n	3ff84 <dfu_target_mcuboot_schedule_update+0xa>
		for (int i = 0; i < TARGET_IMAGE_COUNT && !err; i++) {
			err = dfu_target_mcuboot_schedule_one_img(i);
   3ff80:	f7f1 bc1a 	b.w	317b8 <dfu_target_mcuboot_schedule_one_img.constprop.0>
	} else {
		err = -ENOENT;
	}

	return err;
}
   3ff84:	f06f 0001 	mvn.w	r0, #1
   3ff88:	4770      	bx	lr

0003ff8a <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   3ff8a:	b538      	push	{r3, r4, r5, lr}
   3ff8c:	460c      	mov	r4, r1
   3ff8e:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
   3ff90:	f7fd fdfa 	bl	3db88 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3ff94:	4621      	mov	r1, r4
   3ff96:	4425      	add	r5, r4
   3ff98:	42a9      	cmp	r1, r5
   3ff9a:	d101      	bne.n	3ffa0 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   3ff9c:	2001      	movs	r0, #1
}
   3ff9e:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   3ffa0:	f811 3b01 	ldrb.w	r3, [r1], #1
   3ffa4:	4298      	cmp	r0, r3
   3ffa6:	d0f7      	beq.n	3ff98 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   3ffa8:	2000      	movs	r0, #0
   3ffaa:	e7f8      	b.n	3ff9e <bootutil_buffer_is_erased.part.0+0x14>

0003ffac <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3ffac:	6880      	ldr	r0, [r0, #8]
   3ffae:	3818      	subs	r0, #24
   3ffb0:	f020 0007 	bic.w	r0, r0, #7
}
   3ffb4:	3810      	subs	r0, #16
   3ffb6:	4770      	bx	lr

0003ffb8 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   3ffb8:	b111      	cbz	r1, 3ffc0 <bootutil_buffer_is_erased+0x8>
   3ffba:	b10a      	cbz	r2, 3ffc0 <bootutil_buffer_is_erased+0x8>
   3ffbc:	f7ff bfe5 	b.w	3ff8a <bootutil_buffer_is_erased.part.0>
}
   3ffc0:	2000      	movs	r0, #0
   3ffc2:	4770      	bx	lr

0003ffc4 <boot_read_flag>:
{
   3ffc4:	b538      	push	{r3, r4, r5, lr}
   3ffc6:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3ffc8:	2301      	movs	r3, #1
{
   3ffca:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3ffcc:	4622      	mov	r2, r4
{
   3ffce:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3ffd0:	f7fd fd82 	bl	3dad8 <flash_area_read>
    if (rc < 0) {
   3ffd4:	2800      	cmp	r0, #0
   3ffd6:	db10      	blt.n	3fffa <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3ffd8:	2201      	movs	r2, #1
   3ffda:	4621      	mov	r1, r4
   3ffdc:	4628      	mov	r0, r5
   3ffde:	f7ff ffeb 	bl	3ffb8 <bootutil_buffer_is_erased>
   3ffe2:	b118      	cbz	r0, 3ffec <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   3ffe4:	2303      	movs	r3, #3
    return 0;
   3ffe6:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
   3ffe8:	7023      	strb	r3, [r4, #0]
}
   3ffea:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   3ffec:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
   3ffee:	2b01      	cmp	r3, #1
   3fff0:	bf0c      	ite	eq
   3fff2:	2301      	moveq	r3, #1
   3fff4:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   3fff6:	7023      	strb	r3, [r4, #0]
   3fff8:	e7f7      	b.n	3ffea <boot_read_flag+0x26>
        return BOOT_EFLASH;
   3fffa:	2001      	movs	r0, #1
   3fffc:	e7f5      	b.n	3ffea <boot_read_flag+0x26>

0003fffe <boot_write_trailer>:
{
   3fffe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   40002:	461d      	mov	r5, r3
   40004:	4606      	mov	r6, r0
   40006:	460f      	mov	r7, r1
   40008:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   4000a:	f7fd fdb4 	bl	3db76 <flash_area_align>
    align = ALIGN_UP(inlen, align);
   4000e:	1e6c      	subs	r4, r5, #1
   40010:	4404      	add	r4, r0
   40012:	4243      	negs	r3, r0
   40014:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
   40016:	2c08      	cmp	r4, #8
   40018:	d81b      	bhi.n	40052 <CONFIG_PM_SRAM_SIZE+0x52>
    erased_val = flash_area_erased_val(fap);
   4001a:	4630      	mov	r0, r6
   4001c:	f7fd fdb4 	bl	3db88 <flash_area_erased_val>
   40020:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   40022:	2308      	movs	r3, #8
   40024:	462a      	mov	r2, r5
   40026:	4641      	mov	r1, r8
   40028:	4668      	mov	r0, sp
   4002a:	f001 fd86 	bl	41b3a <__memcpy_chk>
__ssp_bos_icheck3(memset, void *, int)
   4002e:	4649      	mov	r1, r9
   40030:	1b62      	subs	r2, r4, r5
   40032:	eb0d 0005 	add.w	r0, sp, r5
   40036:	f001 fd93 	bl	41b60 <memset>
    rc = flash_area_write(fap, off, buf, align);
   4003a:	4623      	mov	r3, r4
   4003c:	466a      	mov	r2, sp
   4003e:	4639      	mov	r1, r7
   40040:	4630      	mov	r0, r6
   40042:	f7fd fd65 	bl	3db10 <flash_area_write>
    if (rc != 0) {
   40046:	3800      	subs	r0, #0
   40048:	bf18      	it	ne
   4004a:	2001      	movne	r0, #1
}
   4004c:	b003      	add	sp, #12
   4004e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   40052:	f04f 30ff 	mov.w	r0, #4294967295
   40056:	e7f9      	b.n	4004c <CONFIG_PM_SRAM_SIZE+0x4c>

00040058 <boot_write_trailer_flag>:
{
   40058:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   4005a:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   4005c:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   40060:	aa01      	add	r2, sp, #4
   40062:	f7ff ffcc 	bl	3fffe <boot_write_trailer>
}
   40066:	b003      	add	sp, #12
   40068:	f85d fb04 	ldr.w	pc, [sp], #4

0004006c <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   4006c:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   4006e:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   40070:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   40072:	f021 0107 	bic.w	r1, r1, #7
   40076:	f7ff bfef 	b.w	40058 <boot_write_trailer_flag>

0004007a <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   4007a:	6882      	ldr	r2, [r0, #8]
   4007c:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   4007e:	f022 0207 	bic.w	r2, r2, #7
   40082:	f7ff bf9f 	b.w	3ffc4 <boot_read_flag>

00040086 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   40086:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   40088:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   4008a:	2003      	movs	r0, #3
   4008c:	a901      	add	r1, sp, #4
    const struct flash_area *fap = NULL;
   4008e:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   40090:	f7e2 f864 	bl	2215c <flash_area_open>
    if (rc != 0) {
   40094:	b9d8      	cbnz	r0, 400ce <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   40096:	9801      	ldr	r0, [sp, #4]
   40098:	a902      	add	r1, sp, #8
   4009a:	f7f1 fcd5 	bl	31a48 <boot_read_swap_state>
    if (rc != 0) {
   4009e:	4604      	mov	r4, r0
   400a0:	b968      	cbnz	r0, 400be <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   400a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   400a6:	2b02      	cmp	r3, #2
   400a8:	d00f      	beq.n	400ca <boot_set_confirmed_multi+0x44>
   400aa:	2b03      	cmp	r3, #3
   400ac:	d007      	beq.n	400be <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   400ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
   400b2:	2b03      	cmp	r3, #3
   400b4:	d103      	bne.n	400be <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   400b6:	9801      	ldr	r0, [sp, #4]
   400b8:	f7ff ffd8 	bl	4006c <boot_write_image_ok>
   400bc:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   400be:	9801      	ldr	r0, [sp, #4]
   400c0:	f7fd fd09 	bl	3dad6 <flash_area_close>
    return rc;
}
   400c4:	4620      	mov	r0, r4
   400c6:	b004      	add	sp, #16
   400c8:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   400ca:	2404      	movs	r4, #4
   400cc:	e7f7      	b.n	400be <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   400ce:	2401      	movs	r4, #1
   400d0:	e7f8      	b.n	400c4 <boot_set_confirmed_multi+0x3e>

000400d2 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   400d2:	2000      	movs	r0, #0
   400d4:	f7ff bfd7 	b.w	40086 <boot_set_confirmed_multi>

000400d8 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   400d8:	2000      	movs	r0, #0
   400da:	4770      	bx	lr

000400dc <parse_hex4>:
    for (i = 0; i < 4; i++)
   400dc:	2200      	movs	r2, #0
{
   400de:	b510      	push	{r4, lr}
   400e0:	4604      	mov	r4, r0
    unsigned int h = 0;
   400e2:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   400e4:	5ca1      	ldrb	r1, [r4, r2]
   400e6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   400ea:	2b09      	cmp	r3, #9
   400ec:	d80b      	bhi.n	40106 <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   400ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   400f2:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   400f4:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   400f8:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   400fc:	bf18      	it	ne
   400fe:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   40100:	2a04      	cmp	r2, #4
   40102:	d1ef      	bne.n	400e4 <parse_hex4+0x8>
}
   40104:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   40106:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   4010a:	2b05      	cmp	r3, #5
   4010c:	d802      	bhi.n	40114 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   4010e:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   40112:	e7ee      	b.n	400f2 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   40114:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   40118:	2b05      	cmp	r3, #5
   4011a:	d802      	bhi.n	40122 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   4011c:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   40120:	e7e7      	b.n	400f2 <parse_hex4+0x16>
            return 0;
   40122:	2000      	movs	r0, #0
   40124:	e7ee      	b.n	40104 <parse_hex4+0x28>

00040126 <buffer_skip_whitespace>:
{
   40126:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   40128:	b128      	cbz	r0, 40136 <buffer_skip_whitespace+0x10>
   4012a:	6801      	ldr	r1, [r0, #0]
   4012c:	b189      	cbz	r1, 40152 <buffer_skip_whitespace+0x2c>
    if (cannot_access_at_index(buffer, 0))
   4012e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   40132:	429a      	cmp	r2, r3
   40134:	d302      	bcc.n	4013c <buffer_skip_whitespace+0x16>
}
   40136:	bd10      	pop	{r4, pc}
       buffer->offset++;
   40138:	3201      	adds	r2, #1
   4013a:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   4013c:	6882      	ldr	r2, [r0, #8]
   4013e:	4293      	cmp	r3, r2
   40140:	d903      	bls.n	4014a <buffer_skip_whitespace+0x24>
   40142:	5c8c      	ldrb	r4, [r1, r2]
   40144:	2c20      	cmp	r4, #32
   40146:	d9f7      	bls.n	40138 <buffer_skip_whitespace+0x12>
   40148:	e7f5      	b.n	40136 <buffer_skip_whitespace+0x10>
    if (buffer->offset == buffer->length)
   4014a:	d1f4      	bne.n	40136 <buffer_skip_whitespace+0x10>
        buffer->offset--;
   4014c:	3b01      	subs	r3, #1
   4014e:	6083      	str	r3, [r0, #8]
   40150:	e7f1      	b.n	40136 <buffer_skip_whitespace+0x10>
        return NULL;
   40152:	4608      	mov	r0, r1
   40154:	e7ef      	b.n	40136 <buffer_skip_whitespace+0x10>

00040156 <get_array_item>:
    if (array == NULL)
   40156:	b110      	cbz	r0, 4015e <get_array_item+0x8>
    current_child = array->child;
   40158:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   4015a:	b100      	cbz	r0, 4015e <get_array_item+0x8>
   4015c:	b901      	cbnz	r1, 40160 <get_array_item+0xa>
}
   4015e:	4770      	bx	lr
        current_child = current_child->next;
   40160:	6800      	ldr	r0, [r0, #0]
        index--;
   40162:	3901      	subs	r1, #1
        current_child = current_child->next;
   40164:	e7f9      	b.n	4015a <get_array_item+0x4>

00040166 <update_offset>:
{
   40166:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   40168:	4604      	mov	r4, r0
   4016a:	b140      	cbz	r0, 4017e <update_offset+0x18>
   4016c:	6803      	ldr	r3, [r0, #0]
   4016e:	b133      	cbz	r3, 4017e <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   40170:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   40172:	4418      	add	r0, r3
   40174:	f7dd f865 	bl	1d242 <strlen>
   40178:	68a3      	ldr	r3, [r4, #8]
   4017a:	4418      	add	r0, r3
   4017c:	60a0      	str	r0, [r4, #8]
}
   4017e:	bd10      	pop	{r4, pc}

00040180 <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   40180:	b181      	cbz	r1, 401a4 <add_item_to_array+0x24>
   40182:	b138      	cbz	r0, 40194 <add_item_to_array+0x14>
   40184:	4281      	cmp	r1, r0
   40186:	d00d      	beq.n	401a4 <add_item_to_array+0x24>
    child = array->child;
   40188:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   4018a:	b923      	cbnz	r3, 40196 <add_item_to_array+0x16>
        array->child = item;
   4018c:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   4018e:	e9c1 3100 	strd	r3, r1, [r1]
   40192:	2001      	movs	r0, #1
}
   40194:	4770      	bx	lr
        if (child->prev)
   40196:	685a      	ldr	r2, [r3, #4]
   40198:	2a00      	cmp	r2, #0
   4019a:	d0fa      	beq.n	40192 <add_item_to_array+0x12>
    prev->next = item;
   4019c:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   4019e:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   401a0:	6059      	str	r1, [r3, #4]
   401a2:	e7f6      	b.n	40192 <add_item_to_array+0x12>
        return false;
   401a4:	2000      	movs	r0, #0
   401a6:	4770      	bx	lr

000401a8 <ensure>:
{
   401a8:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   401aa:	4604      	mov	r4, r0
   401ac:	b1b8      	cbz	r0, 401de <ensure+0x36>
   401ae:	6805      	ldr	r5, [r0, #0]
   401b0:	b165      	cbz	r5, 401cc <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   401b2:	6842      	ldr	r2, [r0, #4]
   401b4:	b112      	cbz	r2, 401bc <ensure+0x14>
   401b6:	6883      	ldr	r3, [r0, #8]
   401b8:	429a      	cmp	r2, r3
   401ba:	d910      	bls.n	401de <ensure+0x36>
    if (needed > INT_MAX)
   401bc:	2900      	cmp	r1, #0
   401be:	db0e      	blt.n	401de <ensure+0x36>
    needed += p->offset + 1;
   401c0:	68a0      	ldr	r0, [r4, #8]
   401c2:	4401      	add	r1, r0
   401c4:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   401c6:	429a      	cmp	r2, r3
   401c8:	d302      	bcc.n	401d0 <ensure+0x28>
        return p->buffer + p->offset;
   401ca:	4405      	add	r5, r0
}
   401cc:	4628      	mov	r0, r5
   401ce:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   401d0:	6922      	ldr	r2, [r4, #16]
   401d2:	b922      	cbnz	r2, 401de <ensure+0x36>
    if (needed > (INT_MAX / 2))
   401d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   401d8:	d303      	bcc.n	401e2 <ensure+0x3a>
        if (needed <= INT_MAX)
   401da:	2b00      	cmp	r3, #0
   401dc:	da0f      	bge.n	401fe <ensure+0x56>
        return NULL;
   401de:	2500      	movs	r5, #0
   401e0:	e7f4      	b.n	401cc <ensure+0x24>
        newsize = needed + 1;
   401e2:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   401e4:	6a23      	ldr	r3, [r4, #32]
   401e6:	b16b      	cbz	r3, 40204 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   401e8:	4628      	mov	r0, r5
   401ea:	4631      	mov	r1, r6
   401ec:	4798      	blx	r3
        if (newbuffer == NULL)
   401ee:	4605      	mov	r5, r0
   401f0:	b9b0      	cbnz	r0, 40220 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   401f2:	69e3      	ldr	r3, [r4, #28]
   401f4:	6820      	ldr	r0, [r4, #0]
   401f6:	4798      	blx	r3
            p->buffer = NULL;
   401f8:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   401fc:	e7e6      	b.n	401cc <ensure+0x24>
            newsize = INT_MAX;
   401fe:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   40202:	e7ef      	b.n	401e4 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   40204:	4630      	mov	r0, r6
   40206:	69a3      	ldr	r3, [r4, #24]
   40208:	4798      	blx	r3
        if (!newbuffer)
   4020a:	4605      	mov	r5, r0
   4020c:	2800      	cmp	r0, #0
   4020e:	d0f0      	beq.n	401f2 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   40210:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   40212:	6821      	ldr	r1, [r4, #0]
   40214:	3201      	adds	r2, #1
   40216:	f001 fc83 	bl	41b20 <memcpy>
        p->hooks.deallocate(p->buffer);
   4021a:	69e3      	ldr	r3, [r4, #28]
   4021c:	6820      	ldr	r0, [r4, #0]
   4021e:	4798      	blx	r3
    return newbuffer + p->offset;
   40220:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   40222:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   40226:	441d      	add	r5, r3
   40228:	e7d0      	b.n	401cc <ensure+0x24>

0004022a <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   4022a:	4603      	mov	r3, r0
   4022c:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   4022e:	2028      	movs	r0, #40	; 0x28
   40230:	4798      	blx	r3
    if (node)
   40232:	4604      	mov	r4, r0
   40234:	b118      	cbz	r0, 4023e <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   40236:	2228      	movs	r2, #40	; 0x28
   40238:	2100      	movs	r1, #0
   4023a:	f001 fc91 	bl	41b60 <memset>
}
   4023e:	4620      	mov	r0, r4
   40240:	bd10      	pop	{r4, pc}

00040242 <cJSON_ParseWithOpts>:
{
   40242:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40244:	460d      	mov	r5, r1
    if (NULL == value)
   40246:	4604      	mov	r4, r0
{
   40248:	9201      	str	r2, [sp, #4]
    if (NULL == value)
   4024a:	b150      	cbz	r0, 40262 <cJSON_ParseWithOpts+0x20>
    buffer_length = strlen(value) + sizeof("");
   4024c:	f7dc fff9 	bl	1d242 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   40250:	462a      	mov	r2, r5
   40252:	1c41      	adds	r1, r0, #1
   40254:	4620      	mov	r0, r4
   40256:	9b01      	ldr	r3, [sp, #4]
}
   40258:	b003      	add	sp, #12
   4025a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   4025e:	f7f2 b9a5 	b.w	325ac <cJSON_ParseWithLengthOpts>
}
   40262:	b003      	add	sp, #12
   40264:	bd30      	pop	{r4, r5, pc}

00040266 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   40266:	2200      	movs	r2, #0
   40268:	4611      	mov	r1, r2
   4026a:	f7ff bfea 	b.w	40242 <cJSON_ParseWithOpts>

0004026e <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   4026e:	2100      	movs	r1, #0
   40270:	f7f2 b908 	b.w	32484 <print.constprop.0>

00040274 <cJSON_GetArraySize>:
    if (array == NULL)
   40274:	b110      	cbz	r0, 4027c <cJSON_GetArraySize+0x8>
    child = array->child;
   40276:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   40278:	2000      	movs	r0, #0
    while(child != NULL)
   4027a:	b903      	cbnz	r3, 4027e <cJSON_GetArraySize+0xa>
}
   4027c:	4770      	bx	lr
        child = child->next;
   4027e:	681b      	ldr	r3, [r3, #0]
        size++;
   40280:	3001      	adds	r0, #1
        child = child->next;
   40282:	e7fa      	b.n	4027a <cJSON_GetArraySize+0x6>

00040284 <cJSON_GetArrayItem>:
    if (index < 0)
   40284:	2900      	cmp	r1, #0
   40286:	db01      	blt.n	4028c <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   40288:	f7ff bf65 	b.w	40156 <get_array_item>
}
   4028c:	2000      	movs	r0, #0
   4028e:	4770      	bx	lr

00040290 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   40290:	2200      	movs	r2, #0
   40292:	f7f1 bdfb 	b.w	31e8c <get_object_item>

00040296 <cJSON_HasObjectItem>:
{
   40296:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   40298:	f7ff fffa 	bl	40290 <cJSON_GetObjectItem>
}
   4029c:	3800      	subs	r0, #0
   4029e:	bf18      	it	ne
   402a0:	2001      	movne	r0, #1
   402a2:	bd08      	pop	{r3, pc}

000402a4 <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   402a4:	f7ff bf6c 	b.w	40180 <add_item_to_array>

000402a8 <cJSON_AddItemToObject>:
    return add_item_to_object(object, string, item, &global_hooks, false);
   402a8:	2300      	movs	r3, #0
   402aa:	f7f1 beed 	b.w	32088 <add_item_to_object.constprop.0>

000402ae <cJSON_AddItemToObjectCS>:
    return add_item_to_object(object, string, item, &global_hooks, true);
   402ae:	2301      	movs	r3, #1
   402b0:	f7f1 beea 	b.w	32088 <add_item_to_object.constprop.0>

000402b4 <cJSON_DetachItemViaPointer>:
{
   402b4:	b510      	push	{r4, lr}
    if ((parent == NULL) || (item == NULL))
   402b6:	b190      	cbz	r0, 402de <cJSON_DetachItemViaPointer+0x2a>
   402b8:	b179      	cbz	r1, 402da <cJSON_DetachItemViaPointer+0x26>
    if (item != parent->child)
   402ba:	6883      	ldr	r3, [r0, #8]
   402bc:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   402be:	bf1c      	itt	ne
   402c0:	e9d1 4200 	ldrdne	r4, r2, [r1]
   402c4:	6014      	strne	r4, [r2, #0]
    if (item->next != NULL)
   402c6:	680a      	ldr	r2, [r1, #0]
   402c8:	b15a      	cbz	r2, 402e2 <cJSON_DetachItemViaPointer+0x2e>
        item->next->prev = item->prev;
   402ca:	684c      	ldr	r4, [r1, #4]
    if (item == parent->child)
   402cc:	428b      	cmp	r3, r1
        item->next->prev = item->prev;
   402ce:	6054      	str	r4, [r2, #4]
    if (item == parent->child)
   402d0:	d100      	bne.n	402d4 <cJSON_DetachItemViaPointer+0x20>
        parent->child = item->next;
   402d2:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   402d4:	2300      	movs	r3, #0
    item->next = NULL;
   402d6:	e9c1 3300 	strd	r3, r3, [r1]
}
   402da:	4608      	mov	r0, r1
   402dc:	bd10      	pop	{r4, pc}
        return NULL;
   402de:	4601      	mov	r1, r0
   402e0:	e7fb      	b.n	402da <cJSON_DetachItemViaPointer+0x26>
    if (item == parent->child)
   402e2:	428b      	cmp	r3, r1
   402e4:	d0f5      	beq.n	402d2 <cJSON_DetachItemViaPointer+0x1e>
        parent->child->prev = item->prev;
   402e6:	684a      	ldr	r2, [r1, #4]
   402e8:	605a      	str	r2, [r3, #4]
   402ea:	e7f3      	b.n	402d4 <cJSON_DetachItemViaPointer+0x20>

000402ec <cJSON_DetachItemFromObject>:
{
   402ec:	b510      	push	{r4, lr}
   402ee:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   402f0:	f7ff ffce 	bl	40290 <cJSON_GetObjectItem>
   402f4:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   402f6:	4620      	mov	r0, r4
}
   402f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   402fc:	f7ff bfda 	b.w	402b4 <cJSON_DetachItemViaPointer>

00040300 <cJSON_DeleteItemFromObject>:
{
   40300:	b508      	push	{r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   40302:	f7ff fff3 	bl	402ec <cJSON_DetachItemFromObject>
}
   40306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   4030a:	f7f2 b92b 	b.w	32564 <cJSON_Delete>

0004030e <cJSON_AddNullToObjectCS>:
{
   4030e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40310:	4605      	mov	r5, r0
   40312:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   40314:	f7f2 f9b8 	bl	32688 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, true))
   40318:	2301      	movs	r3, #1
   4031a:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   4031c:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, true))
   4031e:	9901      	ldr	r1, [sp, #4]
   40320:	4628      	mov	r0, r5
   40322:	f7f1 feb1 	bl	32088 <add_item_to_object.constprop.0>
   40326:	4605      	mov	r5, r0
   40328:	b918      	cbnz	r0, 40332 <cJSON_AddNullToObjectCS+0x24>
    cJSON_Delete(null);
   4032a:	4620      	mov	r0, r4
   4032c:	f7f2 f91a 	bl	32564 <cJSON_Delete>
    return NULL;
   40330:	462c      	mov	r4, r5
}
   40332:	4620      	mov	r0, r4
   40334:	b003      	add	sp, #12
   40336:	bd30      	pop	{r4, r5, pc}

00040338 <cJSON_AddNumberToObjectCS>:
{
   40338:	b570      	push	{r4, r5, r6, lr}
   4033a:	4605      	mov	r5, r0
   4033c:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   4033e:	4610      	mov	r0, r2
   40340:	4619      	mov	r1, r3
   40342:	f7de fa45 	bl	1e7d0 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   40346:	2301      	movs	r3, #1
   40348:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   4034a:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   4034c:	4631      	mov	r1, r6
   4034e:	4628      	mov	r0, r5
   40350:	f7f1 fe9a 	bl	32088 <add_item_to_object.constprop.0>
   40354:	4605      	mov	r5, r0
   40356:	b918      	cbnz	r0, 40360 <cJSON_AddNumberToObjectCS+0x28>
    cJSON_Delete(number_item);
   40358:	4620      	mov	r0, r4
   4035a:	f7f2 f903 	bl	32564 <cJSON_Delete>
    return NULL;
   4035e:	462c      	mov	r4, r5
}
   40360:	4620      	mov	r0, r4
   40362:	bd70      	pop	{r4, r5, r6, pc}

00040364 <cJSON_AddNumberToObject>:
{
   40364:	b570      	push	{r4, r5, r6, lr}
   40366:	4605      	mov	r5, r0
   40368:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   4036a:	4610      	mov	r0, r2
   4036c:	4619      	mov	r1, r3
   4036e:	f7de fa2f 	bl	1e7d0 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   40372:	2300      	movs	r3, #0
   40374:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   40376:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   40378:	4631      	mov	r1, r6
   4037a:	4628      	mov	r0, r5
   4037c:	f7f1 fe84 	bl	32088 <add_item_to_object.constprop.0>
   40380:	4605      	mov	r5, r0
   40382:	b918      	cbnz	r0, 4038c <cJSON_AddNumberToObject+0x28>
    cJSON_Delete(number_item);
   40384:	4620      	mov	r0, r4
   40386:	f7f2 f8ed 	bl	32564 <cJSON_Delete>
    return NULL;
   4038a:	462c      	mov	r4, r5
}
   4038c:	4620      	mov	r0, r4
   4038e:	bd70      	pop	{r4, r5, r6, pc}

00040390 <cJSON_AddStringToObjectCS>:
{
   40390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40392:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   40394:	4610      	mov	r0, r2
{
   40396:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   40398:	f7f2 f982 	bl	326a0 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   4039c:	2301      	movs	r3, #1
   4039e:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   403a0:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   403a2:	9901      	ldr	r1, [sp, #4]
   403a4:	4628      	mov	r0, r5
   403a6:	f7f1 fe6f 	bl	32088 <add_item_to_object.constprop.0>
   403aa:	4605      	mov	r5, r0
   403ac:	b918      	cbnz	r0, 403b6 <cJSON_AddStringToObjectCS+0x26>
    cJSON_Delete(string_item);
   403ae:	4620      	mov	r0, r4
   403b0:	f7f2 f8d8 	bl	32564 <cJSON_Delete>
    return NULL;
   403b4:	462c      	mov	r4, r5
}
   403b6:	4620      	mov	r0, r4
   403b8:	b003      	add	sp, #12
   403ba:	bd30      	pop	{r4, r5, pc}

000403bc <cJSON_AddStringToObject>:
{
   403bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   403be:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   403c0:	4610      	mov	r0, r2
{
   403c2:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   403c4:	f7f2 f96c 	bl	326a0 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   403c8:	2300      	movs	r3, #0
   403ca:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   403cc:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   403ce:	9901      	ldr	r1, [sp, #4]
   403d0:	4628      	mov	r0, r5
   403d2:	f7f1 fe59 	bl	32088 <add_item_to_object.constprop.0>
   403d6:	4605      	mov	r5, r0
   403d8:	b918      	cbnz	r0, 403e2 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   403da:	4620      	mov	r0, r4
   403dc:	f7f2 f8c2 	bl	32564 <cJSON_Delete>
    return NULL;
   403e0:	462c      	mov	r4, r5
}
   403e2:	4620      	mov	r0, r4
   403e4:	b003      	add	sp, #12
   403e6:	bd30      	pop	{r4, r5, pc}

000403e8 <cJSON_AddArrayToObjectCS>:
{
   403e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   403ea:	4605      	mov	r5, r0
   403ec:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   403ee:	f7f2 f96f 	bl	326d0 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, true))
   403f2:	2301      	movs	r3, #1
   403f4:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   403f6:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, true))
   403f8:	9901      	ldr	r1, [sp, #4]
   403fa:	4628      	mov	r0, r5
   403fc:	f7f1 fe44 	bl	32088 <add_item_to_object.constprop.0>
   40400:	4605      	mov	r5, r0
   40402:	b918      	cbnz	r0, 4040c <cJSON_AddArrayToObjectCS+0x24>
    cJSON_Delete(array);
   40404:	4620      	mov	r0, r4
   40406:	f7f2 f8ad 	bl	32564 <cJSON_Delete>
    return NULL;
   4040a:	462c      	mov	r4, r5
}
   4040c:	4620      	mov	r0, r4
   4040e:	b003      	add	sp, #12
   40410:	bd30      	pop	{r4, r5, pc}

00040412 <cJSON_AddArrayToObject>:
{
   40412:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40414:	4605      	mov	r5, r0
   40416:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   40418:	f7f2 f95a 	bl	326d0 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, false))
   4041c:	2300      	movs	r3, #0
   4041e:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   40420:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, false))
   40422:	9901      	ldr	r1, [sp, #4]
   40424:	4628      	mov	r0, r5
   40426:	f7f1 fe2f 	bl	32088 <add_item_to_object.constprop.0>
   4042a:	4605      	mov	r5, r0
   4042c:	b918      	cbnz	r0, 40436 <cJSON_AddArrayToObject+0x24>
    cJSON_Delete(array);
   4042e:	4620      	mov	r0, r4
   40430:	f7f2 f898 	bl	32564 <cJSON_Delete>
    return NULL;
   40434:	462c      	mov	r4, r5
}
   40436:	4620      	mov	r0, r4
   40438:	b003      	add	sp, #12
   4043a:	bd30      	pop	{r4, r5, pc}

0004043c <cJSON_AddObjectToObjectCS>:
{
   4043c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4043e:	4605      	mov	r5, r0
   40440:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   40442:	f7f2 f951 	bl	326e8 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   40446:	2301      	movs	r3, #1
   40448:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   4044a:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   4044c:	9901      	ldr	r1, [sp, #4]
   4044e:	4628      	mov	r0, r5
   40450:	f7f1 fe1a 	bl	32088 <add_item_to_object.constprop.0>
   40454:	4605      	mov	r5, r0
   40456:	b918      	cbnz	r0, 40460 <cJSON_AddObjectToObjectCS+0x24>
    cJSON_Delete(object_item);
   40458:	4620      	mov	r0, r4
   4045a:	f7f2 f883 	bl	32564 <cJSON_Delete>
    return NULL;
   4045e:	462c      	mov	r4, r5
}
   40460:	4620      	mov	r0, r4
   40462:	b003      	add	sp, #12
   40464:	bd30      	pop	{r4, r5, pc}

00040466 <cJSON_AddObjectToObject>:
{
   40466:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40468:	4605      	mov	r5, r0
   4046a:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   4046c:	f7f2 f93c 	bl	326e8 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   40470:	2300      	movs	r3, #0
   40472:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   40474:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   40476:	9901      	ldr	r1, [sp, #4]
   40478:	4628      	mov	r0, r5
   4047a:	f7f1 fe05 	bl	32088 <add_item_to_object.constprop.0>
   4047e:	4605      	mov	r5, r0
   40480:	b918      	cbnz	r0, 4048a <cJSON_AddObjectToObject+0x24>
    cJSON_Delete(object_item);
   40482:	4620      	mov	r0, r4
   40484:	f7f2 f86e 	bl	32564 <cJSON_Delete>
    return NULL;
   40488:	462c      	mov	r4, r5
}
   4048a:	4620      	mov	r0, r4
   4048c:	b003      	add	sp, #12
   4048e:	bd30      	pop	{r4, r5, pc}

00040490 <cJSON_IsNull>:
    if (item == NULL)
   40490:	b118      	cbz	r0, 4049a <cJSON_IsNull+0xa>
    return (item->type & 0xFF) == cJSON_NULL;
   40492:	7b00      	ldrb	r0, [r0, #12]
   40494:	1f03      	subs	r3, r0, #4
   40496:	4258      	negs	r0, r3
   40498:	4158      	adcs	r0, r3
}
   4049a:	4770      	bx	lr

0004049c <cJSON_IsNumber>:
    if (item == NULL)
   4049c:	b120      	cbz	r0, 404a8 <cJSON_IsNumber+0xc>
    return (item->type & 0xFF) == cJSON_Number;
   4049e:	7b00      	ldrb	r0, [r0, #12]
   404a0:	f1a0 0308 	sub.w	r3, r0, #8
   404a4:	4258      	negs	r0, r3
   404a6:	4158      	adcs	r0, r3
}
   404a8:	4770      	bx	lr

000404aa <cJSON_IsString>:
    if (item == NULL)
   404aa:	b120      	cbz	r0, 404b6 <cJSON_IsString+0xc>
    return (item->type & 0xFF) == cJSON_String;
   404ac:	7b00      	ldrb	r0, [r0, #12]
   404ae:	f1a0 0310 	sub.w	r3, r0, #16
   404b2:	4258      	negs	r0, r3
   404b4:	4158      	adcs	r0, r3
}
   404b6:	4770      	bx	lr

000404b8 <cJSON_GetStringValue>:
{
   404b8:	b508      	push	{r3, lr}
   404ba:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) 
   404bc:	f7ff fff5 	bl	404aa <cJSON_IsString>
   404c0:	b100      	cbz	r0, 404c4 <cJSON_GetStringValue+0xc>
    return item->valuestring;
   404c2:	6910      	ldr	r0, [r2, #16]
}
   404c4:	bd08      	pop	{r3, pc}

000404c6 <cJSON_IsArray>:
    if (item == NULL)
   404c6:	b120      	cbz	r0, 404d2 <cJSON_IsArray+0xc>
    return (item->type & 0xFF) == cJSON_Array;
   404c8:	7b00      	ldrb	r0, [r0, #12]
   404ca:	f1a0 0320 	sub.w	r3, r0, #32
   404ce:	4258      	negs	r0, r3
   404d0:	4158      	adcs	r0, r3
}
   404d2:	4770      	bx	lr

000404d4 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   404d4:	f001 ba9a 	b.w	41a0c <k_malloc>

000404d8 <free_fn_hook>:
   404d8:	f001 ba91 	b.w	419fe <k_free>

000404dc <cJSON_FreeString>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   404dc:	f001 ba8f 	b.w	419fe <k_free>

000404e0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   404e0:	4700      	bx	r0

000404e2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   404e2:	f001 b9af 	b.w	41844 <z_impl_k_busy_wait>

000404e6 <nrf_gpio_pin_present_check>:
    switch (port)
   404e6:	0943      	lsrs	r3, r0, #5
   404e8:	bf0c      	ite	eq
   404ea:	f04f 33ff 	moveq.w	r3, #4294967295
   404ee:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   404f0:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   404f4:	fa23 f000 	lsr.w	r0, r3, r0
}
   404f8:	f000 0001 	and.w	r0, r0, #1
   404fc:	4770      	bx	lr

000404fe <pin_is_task_output>:
{
   404fe:	b508      	push	{r3, lr}
   40500:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   40502:	f7f2 faf7 	bl	32af4 <pin_is_output>
   40506:	b110      	cbz	r0, 4050e <pin_is_task_output+0x10>
   40508:	4610      	mov	r0, r2
   4050a:	f7f2 fadd 	bl	32ac8 <pin_in_use_by_te>
}
   4050e:	f000 0001 	and.w	r0, r0, #1
   40512:	bd08      	pop	{r3, pc}

00040514 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   40514:	0080      	lsls	r0, r0, #2
}
   40516:	f500 7080 	add.w	r0, r0, #256	; 0x100
   4051a:	4770      	bx	lr

0004051c <nrf_gpio_reconfigure>:
{
   4051c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   40520:	4690      	mov	r8, r2
   40522:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   40526:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   40528:	a801      	add	r0, sp, #4
{
   4052a:	460e      	mov	r6, r1
   4052c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4052e:	f7f2 fb65 	bl	32bfc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   40532:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   40534:	f1b8 0f00 	cmp.w	r8, #0
   40538:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   4053c:	bf14      	ite	ne
   4053e:	2302      	movne	r3, #2
   40540:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   40542:	2e00      	cmp	r6, #0
   40544:	bf18      	it	ne
   40546:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   4054a:	2d00      	cmp	r5, #0
   4054c:	bf14      	ite	ne
   4054e:	210c      	movne	r1, #12
   40550:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   40552:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   40554:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   40558:	bf14      	ite	ne
   4055a:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   4055e:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   40560:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   40562:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   40566:	bf14      	ite	ne
   40568:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   4056c:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4056e:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   40572:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   40574:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   40578:	b106      	cbz	r6, 4057c <nrf_gpio_reconfigure+0x60>
   4057a:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   4057c:	f1b8 0f00 	cmp.w	r8, #0
   40580:	d003      	beq.n	4058a <nrf_gpio_reconfigure+0x6e>
   40582:	f898 8000 	ldrb.w	r8, [r8]
   40586:	ea4f 0848 	mov.w	r8, r8, lsl #1
   4058a:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4058c:	b10d      	cbz	r5, 40592 <nrf_gpio_reconfigure+0x76>
   4058e:	782d      	ldrb	r5, [r5, #0]
   40590:	00ad      	lsls	r5, r5, #2
   40592:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   40596:	b10c      	cbz	r4, 4059c <nrf_gpio_reconfigure+0x80>
   40598:	7822      	ldrb	r2, [r4, #0]
   4059a:	0214      	lsls	r4, r2, #8
   4059c:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   4059e:	b10f      	cbz	r7, 405a4 <nrf_gpio_reconfigure+0x88>
   405a0:	783f      	ldrb	r7, [r7, #0]
   405a2:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   405a4:	432c      	orrs	r4, r5
   405a6:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   405a8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   405ac:	b002      	add	sp, #8
   405ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000405b2 <nrf_gpio_cfg_sense_set>:
{
   405b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   405b4:	f10d 030f 	add.w	r3, sp, #15
   405b8:	9301      	str	r3, [sp, #4]
   405ba:	2300      	movs	r3, #0
{
   405bc:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   405c0:	461a      	mov	r2, r3
   405c2:	4619      	mov	r1, r3
   405c4:	9300      	str	r3, [sp, #0]
   405c6:	f7ff ffa9 	bl	4051c <nrf_gpio_reconfigure>
}
   405ca:	b005      	add	sp, #20
   405cc:	f85d fb04 	ldr.w	pc, [sp], #4

000405d0 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   405d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   405d4:	4770      	bx	lr

000405d6 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   405d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   405da:	4770      	bx	lr

000405dc <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   405dc:	f44f 7080 	mov.w	r0, #256	; 0x100
   405e0:	4770      	bx	lr

000405e2 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   405e2:	7b0b      	ldrb	r3, [r1, #12]
   405e4:	2b03      	cmp	r3, #3
   405e6:	d82a      	bhi.n	4063e <xfer_completeness_check+0x5c>
   405e8:	e8df f003 	tbb	[pc, r3]
   405ec:	021a2622 	.word	0x021a2622
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   405f0:	688b      	ldr	r3, [r1, #8]
   405f2:	035a      	lsls	r2, r3, #13
   405f4:	d504      	bpl.n	40600 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   405f6:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   405fa:	690a      	ldr	r2, [r1, #16]
   405fc:	429a      	cmp	r2, r3
   405fe:	d107      	bne.n	40610 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   40600:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   40602:	035b      	lsls	r3, r3, #13
   40604:	d41b      	bmi.n	4063e <xfer_completeness_check+0x5c>
   40606:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   4060a:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   4060c:	429a      	cmp	r2, r3
   4060e:	d016      	beq.n	4063e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   40610:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   40612:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   40614:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   40618:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   4061c:	4618      	mov	r0, r3
   4061e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   40620:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   40624:	690a      	ldr	r2, [r1, #16]
   40626:	429a      	cmp	r2, r3
   40628:	d1f2      	bne.n	40610 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   4062a:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   4062e:	e7ec      	b.n	4060a <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   40630:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   40634:	690a      	ldr	r2, [r1, #16]
   40636:	e7e9      	b.n	4060c <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   40638:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   4063c:	e7fa      	b.n	40634 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   4063e:	2001      	movs	r0, #1
}
   40640:	4770      	bx	lr

00040642 <nrf_gpio_pin_set>:
{
   40642:	b507      	push	{r0, r1, r2, lr}
   40644:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   40646:	a801      	add	r0, sp, #4
   40648:	f7f3 fb8a 	bl	33d60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   4064c:	2301      	movs	r3, #1
   4064e:	9a01      	ldr	r2, [sp, #4]
   40650:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   40652:	6083      	str	r3, [r0, #8]
}
   40654:	b003      	add	sp, #12
   40656:	f85d fb04 	ldr.w	pc, [sp], #4

0004065a <rpc_handle_ctrl_message>:
   4065a:	2902      	cmp	r1, #2
   4065c:	b510      	push	{r4, lr}
   4065e:	4604      	mov	r4, r0
   40660:	d005      	beq.n	4066e <rpc_handle_ctrl_message+0x14>
   40662:	2904      	cmp	r1, #4
   40664:	d001      	beq.n	4066a <rpc_handle_ctrl_message+0x10>
   40666:	2901      	cmp	r1, #1
   40668:	d107      	bne.n	4067a <rpc_handle_ctrl_message+0x20>
   4066a:	2000      	movs	r0, #0
   4066c:	bd10      	pop	{r4, pc}
   4066e:	6880      	ldr	r0, [r0, #8]
   40670:	2800      	cmp	r0, #0
   40672:	d0fa      	beq.n	4066a <rpc_handle_ctrl_message+0x10>
   40674:	f000 f833 	bl	406de <rpc_transport_local_data_free>
   40678:	e7f7      	b.n	4066a <rpc_handle_ctrl_message+0x10>
   4067a:	6880      	ldr	r0, [r0, #8]
   4067c:	b108      	cbz	r0, 40682 <rpc_handle_ctrl_message+0x28>
   4067e:	f000 f82e 	bl	406de <rpc_transport_local_data_free>
   40682:	4620      	mov	r0, r4
   40684:	f000 f827 	bl	406d6 <rpc_transport_msg_free>
   40688:	e7ef      	b.n	4066a <rpc_handle_ctrl_message+0x10>

0004068a <rpc_message_send>:
   4068a:	6843      	ldr	r3, [r0, #4]
   4068c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   40690:	f043 0302 	orr.w	r3, r3, #2
   40694:	6043      	str	r3, [r0, #4]
   40696:	f000 b826 	b.w	406e6 <rpc_transport_data_msg_send>

0004069a <rpc_message_alloc>:
   4069a:	b570      	push	{r4, r5, r6, lr}
   4069c:	4606      	mov	r6, r0
   4069e:	b130      	cbz	r0, 406ae <rpc_message_alloc+0x14>
   406a0:	f000 f81b 	bl	406da <rpc_transport_data_alloc>
   406a4:	4605      	mov	r5, r0
   406a6:	b918      	cbnz	r0, 406b0 <rpc_message_alloc+0x16>
   406a8:	2400      	movs	r4, #0
   406aa:	4620      	mov	r0, r4
   406ac:	bd70      	pop	{r4, r5, r6, pc}
   406ae:	4605      	mov	r5, r0
   406b0:	f000 f80f 	bl	406d2 <rpc_transport_data_msg_alloc>
   406b4:	4604      	mov	r4, r0
   406b6:	b110      	cbz	r0, 406be <rpc_message_alloc+0x24>
   406b8:	60c6      	str	r6, [r0, #12]
   406ba:	6085      	str	r5, [r0, #8]
   406bc:	e7f5      	b.n	406aa <rpc_message_alloc+0x10>
   406be:	2d00      	cmp	r5, #0
   406c0:	d0f2      	beq.n	406a8 <rpc_message_alloc+0xe>
   406c2:	4628      	mov	r0, r5
   406c4:	f000 f80b 	bl	406de <rpc_transport_local_data_free>
   406c8:	e7ef      	b.n	406aa <rpc_message_alloc+0x10>

000406ca <rpc_message_free>:
   406ca:	f000 b804 	b.w	406d6 <rpc_transport_msg_free>

000406ce <rpc_message_data_free>:
   406ce:	f000 b808 	b.w	406e2 <rpc_transport_peer_data_free>

000406d2 <rpc_transport_data_msg_alloc>:
   406d2:	f7f3 becf 	b.w	34474 <rpc_transport_ipc_data_msg_alloc>

000406d6 <rpc_transport_msg_free>:
   406d6:	f7f3 bf1f 	b.w	34518 <rpc_transport_ipc_msg_free>

000406da <rpc_transport_data_alloc>:
   406da:	f7f3 beff 	b.w	344dc <rpc_transport_ipc_data_alloc>

000406de <rpc_transport_local_data_free>:
   406de:	f000 b808 	b.w	406f2 <rpc_transport_ipc_local_data_free>

000406e2 <rpc_transport_peer_data_free>:
   406e2:	f7f3 bf3f 	b.w	34564 <rpc_transport_ipc_peer_data_free>

000406e6 <rpc_transport_data_msg_send>:
   406e6:	f7f3 be89 	b.w	343fc <rpc_transport_ipc_data_msg_send>

000406ea <rpc_transport_rx_data_suspend>:
   406ea:	f000 b809 	b.w	40700 <rpc_transport_ipc_rx_data_suspend>

000406ee <rpc_transport_rx_data_resume>:
   406ee:	f000 b80a 	b.w	40706 <rpc_transport_ipc_rx_data_resume>

000406f2 <rpc_transport_ipc_local_data_free>:
   406f2:	b508      	push	{r3, lr}
   406f4:	f7e5 fcd8 	bl	260a8 <nrf_modem_os_shm_tx_free>
   406f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   406fc:	f7e5 bc7a 	b.w	25ff4 <nrf_modem_os_application_irq_set>

00040700 <rpc_transport_ipc_rx_data_suspend>:
   40700:	2004      	movs	r0, #4
   40702:	f7f2 be63 	b.w	333cc <nrfx_ipc_receive_event_disable>

00040706 <rpc_transport_ipc_rx_data_resume>:
   40706:	2004      	movs	r0, #4
   40708:	f7f2 be42 	b.w	33390 <nrfx_ipc_receive_event_enable>

0004070c <rpc_client_request_alloc>:
   4070c:	b508      	push	{r3, lr}
   4070e:	f7ff ffc4 	bl	4069a <rpc_message_alloc>
   40712:	b100      	cbz	r0, 40716 <rpc_client_request_alloc+0xa>
   40714:	3008      	adds	r0, #8
   40716:	bd08      	pop	{r3, pc}

00040718 <rpc_client_request_send>:
   40718:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   4071c:	4610      	mov	r0, r2
   4071e:	f840 1d08 	str.w	r1, [r0, #-8]!
   40722:	f7ff bfb2 	b.w	4068a <rpc_message_send>

00040726 <rpc_client_message_free>:
   40726:	3808      	subs	r0, #8
   40728:	f7ff bfcf 	b.w	406ca <rpc_message_free>

0004072c <rpc_client_data_free>:
   4072c:	f7ff bfcf 	b.w	406ce <rpc_message_data_free>

00040730 <rpc_gnss_serialize_utc>:
   40730:	b1c0      	cbz	r0, 40764 <rpc_gnss_serialize_utc+0x34>
   40732:	b1b9      	cbz	r1, 40764 <rpc_gnss_serialize_utc+0x34>
   40734:	2301      	movs	r3, #1
   40736:	700b      	strb	r3, [r1, #0]
   40738:	2300      	movs	r3, #0
   4073a:	704b      	strb	r3, [r1, #1]
   4073c:	6843      	ldr	r3, [r0, #4]
   4073e:	f8c1 3006 	str.w	r3, [r1, #6]
   40742:	6803      	ldr	r3, [r0, #0]
   40744:	f8c1 3002 	str.w	r3, [r1, #2]
   40748:	7a83      	ldrb	r3, [r0, #10]
   4074a:	730b      	strb	r3, [r1, #12]
   4074c:	7b43      	ldrb	r3, [r0, #13]
   4074e:	73cb      	strb	r3, [r1, #15]
   40750:	7b03      	ldrb	r3, [r0, #12]
   40752:	738b      	strb	r3, [r1, #14]
   40754:	7a03      	ldrb	r3, [r0, #8]
   40756:	728b      	strb	r3, [r1, #10]
   40758:	7ac3      	ldrb	r3, [r0, #11]
   4075a:	734b      	strb	r3, [r1, #13]
   4075c:	7a43      	ldrb	r3, [r0, #9]
   4075e:	2010      	movs	r0, #16
   40760:	72cb      	strb	r3, [r1, #11]
   40762:	4770      	bx	lr
   40764:	f04f 30ff 	mov.w	r0, #4294967295
   40768:	4770      	bx	lr

0004076a <rpc_gnss_serialize_ephe>:
   4076a:	2800      	cmp	r0, #0
   4076c:	d044      	beq.n	407f8 <rpc_gnss_serialize_ephe+0x8e>
   4076e:	2900      	cmp	r1, #0
   40770:	d042      	beq.n	407f8 <rpc_gnss_serialize_ephe+0x8e>
   40772:	2302      	movs	r3, #2
   40774:	700b      	strb	r3, [r1, #0]
   40776:	2300      	movs	r3, #0
   40778:	704b      	strb	r3, [r1, #1]
   4077a:	68c3      	ldr	r3, [r0, #12]
   4077c:	f8c1 300b 	str.w	r3, [r1, #11]
   40780:	8903      	ldrh	r3, [r0, #8]
   40782:	f8a1 3009 	strh.w	r3, [r1, #9]
   40786:	7983      	ldrb	r3, [r0, #6]
   40788:	720b      	strb	r3, [r1, #8]
   4078a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   4078e:	878b      	strh	r3, [r1, #60]	; 0x3c
   40790:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   40792:	86cb      	strh	r3, [r1, #54]	; 0x36
   40794:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   40798:	874b      	strh	r3, [r1, #58]	; 0x3a
   4079a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   4079c:	868b      	strh	r3, [r1, #52]	; 0x34
   4079e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   407a2:	87cb      	strh	r3, [r1, #62]	; 0x3e
   407a4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   407a8:	870b      	strh	r3, [r1, #56]	; 0x38
   407aa:	8b83      	ldrh	r3, [r0, #28]
   407ac:	830b      	strh	r3, [r1, #24]
   407ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
   407b0:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   407b4:	7c83      	ldrb	r3, [r0, #18]
   407b6:	744b      	strb	r3, [r1, #17]
   407b8:	7843      	ldrb	r3, [r0, #1]
   407ba:	70cb      	strb	r3, [r1, #3]
   407bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   407be:	62cb      	str	r3, [r1, #44]	; 0x2c
   407c0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   407c2:	84cb      	strh	r3, [r1, #38]	; 0x26
   407c4:	8843      	ldrh	r3, [r0, #2]
   407c6:	808b      	strh	r3, [r1, #4]
   407c8:	6a03      	ldr	r3, [r0, #32]
   407ca:	f8c1 301a 	str.w	r3, [r1, #26]
   407ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
   407d0:	630b      	str	r3, [r1, #48]	; 0x30
   407d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   407d4:	f8c1 301e 	str.w	r3, [r1, #30]
   407d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   407da:	628b      	str	r3, [r1, #40]	; 0x28
   407dc:	7803      	ldrb	r3, [r0, #0]
   407de:	708b      	strb	r3, [r1, #2]
   407e0:	7c03      	ldrb	r3, [r0, #16]
   407e2:	73cb      	strb	r3, [r1, #15]
   407e4:	8883      	ldrh	r3, [r0, #4]
   407e6:	80cb      	strh	r3, [r1, #6]
   407e8:	8a83      	ldrh	r3, [r0, #20]
   407ea:	824b      	strh	r3, [r1, #18]
   407ec:	7c43      	ldrb	r3, [r0, #17]
   407ee:	740b      	strb	r3, [r1, #16]
   407f0:	6983      	ldr	r3, [r0, #24]
   407f2:	2040      	movs	r0, #64	; 0x40
   407f4:	614b      	str	r3, [r1, #20]
   407f6:	4770      	bx	lr
   407f8:	f04f 30ff 	mov.w	r0, #4294967295
   407fc:	4770      	bx	lr

000407fe <rpc_gnss_serialize_alm>:
   407fe:	b340      	cbz	r0, 40852 <rpc_gnss_serialize_alm+0x54>
   40800:	b339      	cbz	r1, 40852 <rpc_gnss_serialize_alm+0x54>
   40802:	2303      	movs	r3, #3
   40804:	700b      	strb	r3, [r1, #0]
   40806:	2300      	movs	r3, #0
   40808:	704b      	strb	r3, [r1, #1]
   4080a:	8b83      	ldrh	r3, [r0, #28]
   4080c:	f8a1 301d 	strh.w	r3, [r1, #29]
   40810:	8bc3      	ldrh	r3, [r0, #30]
   40812:	f8a1 301f 	strh.w	r3, [r1, #31]
   40816:	88c3      	ldrh	r3, [r0, #6]
   40818:	810b      	strh	r3, [r1, #8]
   4081a:	8883      	ldrh	r3, [r0, #4]
   4081c:	80cb      	strh	r3, [r1, #6]
   4081e:	78c3      	ldrb	r3, [r0, #3]
   40820:	714b      	strb	r3, [r1, #5]
   40822:	6983      	ldr	r3, [r0, #24]
   40824:	f8c1 3019 	str.w	r3, [r1, #25]
   40828:	6903      	ldr	r3, [r0, #16]
   4082a:	f8c1 3011 	str.w	r3, [r1, #17]
   4082e:	8903      	ldrh	r3, [r0, #8]
   40830:	814b      	strh	r3, [r1, #10]
   40832:	68c3      	ldr	r3, [r0, #12]
   40834:	f8c1 300d 	str.w	r3, [r1, #13]
   40838:	7a83      	ldrb	r3, [r0, #10]
   4083a:	730b      	strb	r3, [r1, #12]
   4083c:	7803      	ldrb	r3, [r0, #0]
   4083e:	708b      	strb	r3, [r1, #2]
   40840:	7883      	ldrb	r3, [r0, #2]
   40842:	710b      	strb	r3, [r1, #4]
   40844:	6943      	ldr	r3, [r0, #20]
   40846:	f8c1 3015 	str.w	r3, [r1, #21]
   4084a:	7843      	ldrb	r3, [r0, #1]
   4084c:	2021      	movs	r0, #33	; 0x21
   4084e:	70cb      	strb	r3, [r1, #3]
   40850:	4770      	bx	lr
   40852:	f04f 30ff 	mov.w	r0, #4294967295
   40856:	4770      	bx	lr

00040858 <rpc_gnss_serialize_klob>:
   40858:	b1b0      	cbz	r0, 40888 <rpc_gnss_serialize_klob+0x30>
   4085a:	b1a9      	cbz	r1, 40888 <rpc_gnss_serialize_klob+0x30>
   4085c:	2304      	movs	r3, #4
   4085e:	700b      	strb	r3, [r1, #0]
   40860:	2300      	movs	r3, #0
   40862:	704b      	strb	r3, [r1, #1]
   40864:	7803      	ldrb	r3, [r0, #0]
   40866:	708b      	strb	r3, [r1, #2]
   40868:	7843      	ldrb	r3, [r0, #1]
   4086a:	70cb      	strb	r3, [r1, #3]
   4086c:	7883      	ldrb	r3, [r0, #2]
   4086e:	710b      	strb	r3, [r1, #4]
   40870:	78c3      	ldrb	r3, [r0, #3]
   40872:	714b      	strb	r3, [r1, #5]
   40874:	7903      	ldrb	r3, [r0, #4]
   40876:	718b      	strb	r3, [r1, #6]
   40878:	7943      	ldrb	r3, [r0, #5]
   4087a:	71cb      	strb	r3, [r1, #7]
   4087c:	7983      	ldrb	r3, [r0, #6]
   4087e:	720b      	strb	r3, [r1, #8]
   40880:	79c3      	ldrb	r3, [r0, #7]
   40882:	200a      	movs	r0, #10
   40884:	724b      	strb	r3, [r1, #9]
   40886:	4770      	bx	lr
   40888:	f04f 30ff 	mov.w	r0, #4294967295
   4088c:	4770      	bx	lr

0004088e <rpc_gnss_serialize_nequick>:
   4088e:	b180      	cbz	r0, 408b2 <rpc_gnss_serialize_nequick+0x24>
   40890:	b179      	cbz	r1, 408b2 <rpc_gnss_serialize_nequick+0x24>
   40892:	2305      	movs	r3, #5
   40894:	700b      	strb	r3, [r1, #0]
   40896:	2300      	movs	r3, #0
   40898:	704b      	strb	r3, [r1, #1]
   4089a:	8803      	ldrh	r3, [r0, #0]
   4089c:	804b      	strh	r3, [r1, #2]
   4089e:	8843      	ldrh	r3, [r0, #2]
   408a0:	808b      	strh	r3, [r1, #4]
   408a2:	8883      	ldrh	r3, [r0, #4]
   408a4:	80cb      	strh	r3, [r1, #6]
   408a6:	7983      	ldrb	r3, [r0, #6]
   408a8:	720b      	strb	r3, [r1, #8]
   408aa:	79c3      	ldrb	r3, [r0, #7]
   408ac:	200a      	movs	r0, #10
   408ae:	724b      	strb	r3, [r1, #9]
   408b0:	4770      	bx	lr
   408b2:	f04f 30ff 	mov.w	r0, #4294967295
   408b6:	4770      	bx	lr

000408b8 <rpc_gnss_serialize_time_and_sv_tow>:
   408b8:	b570      	push	{r4, r5, r6, lr}
   408ba:	b1e8      	cbz	r0, 408f8 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   408bc:	b1e1      	cbz	r1, 408f8 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   408be:	2206      	movs	r2, #6
   408c0:	2300      	movs	r3, #0
   408c2:	700a      	strb	r2, [r1, #0]
   408c4:	8802      	ldrh	r2, [r0, #0]
   408c6:	704b      	strb	r3, [r1, #1]
   408c8:	804a      	strh	r2, [r1, #2]
   408ca:	68c2      	ldr	r2, [r0, #12]
   408cc:	f101 0410 	add.w	r4, r1, #16
   408d0:	f8c1 200a 	str.w	r2, [r1, #10]
   408d4:	8902      	ldrh	r2, [r0, #8]
   408d6:	810a      	strh	r2, [r1, #8]
   408d8:	6842      	ldr	r2, [r0, #4]
   408da:	604a      	str	r2, [r1, #4]
   408dc:	8a06      	ldrh	r6, [r0, #16]
   408de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   408e2:	188d      	adds	r5, r1, r2
   408e4:	81ee      	strh	r6, [r5, #14]
   408e6:	7c85      	ldrb	r5, [r0, #18]
   408e8:	3301      	adds	r3, #1
   408ea:	2b20      	cmp	r3, #32
   408ec:	54a5      	strb	r5, [r4, r2]
   408ee:	f100 0004 	add.w	r0, r0, #4
   408f2:	d1f3      	bne.n	408dc <rpc_gnss_serialize_time_and_sv_tow+0x24>
   408f4:	206e      	movs	r0, #110	; 0x6e
   408f6:	bd70      	pop	{r4, r5, r6, pc}
   408f8:	f04f 30ff 	mov.w	r0, #4294967295
   408fc:	e7fb      	b.n	408f6 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

000408fe <rpc_gnss_serialize_location>:
   408fe:	b1c0      	cbz	r0, 40932 <rpc_gnss_serialize_location+0x34>
   40900:	b1b9      	cbz	r1, 40932 <rpc_gnss_serialize_location+0x34>
   40902:	2307      	movs	r3, #7
   40904:	700b      	strb	r3, [r1, #0]
   40906:	2300      	movs	r3, #0
   40908:	704b      	strb	r3, [r1, #1]
   4090a:	8903      	ldrh	r3, [r0, #8]
   4090c:	814b      	strh	r3, [r1, #10]
   4090e:	7b83      	ldrb	r3, [r0, #14]
   40910:	740b      	strb	r3, [r1, #16]
   40912:	6803      	ldr	r3, [r0, #0]
   40914:	f8c1 3002 	str.w	r3, [r1, #2]
   40918:	6843      	ldr	r3, [r0, #4]
   4091a:	f8c1 3006 	str.w	r3, [r1, #6]
   4091e:	7b03      	ldrb	r3, [r0, #12]
   40920:	738b      	strb	r3, [r1, #14]
   40922:	7b43      	ldrb	r3, [r0, #13]
   40924:	73cb      	strb	r3, [r1, #15]
   40926:	7a83      	ldrb	r3, [r0, #10]
   40928:	730b      	strb	r3, [r1, #12]
   4092a:	7ac3      	ldrb	r3, [r0, #11]
   4092c:	2011      	movs	r0, #17
   4092e:	734b      	strb	r3, [r1, #13]
   40930:	4770      	bx	lr
   40932:	f04f 30ff 	mov.w	r0, #4294967295
   40936:	4770      	bx	lr

00040938 <rpc_gnss_serialize_integrity>:
   40938:	b148      	cbz	r0, 4094e <rpc_gnss_serialize_integrity+0x16>
   4093a:	b141      	cbz	r1, 4094e <rpc_gnss_serialize_integrity+0x16>
   4093c:	2308      	movs	r3, #8
   4093e:	700b      	strb	r3, [r1, #0]
   40940:	2300      	movs	r3, #0
   40942:	704b      	strb	r3, [r1, #1]
   40944:	6803      	ldr	r3, [r0, #0]
   40946:	2006      	movs	r0, #6
   40948:	f8c1 3002 	str.w	r3, [r1, #2]
   4094c:	4770      	bx	lr
   4094e:	f04f 30ff 	mov.w	r0, #4294967295
   40952:	4770      	bx	lr

00040954 <sock_has_pkt>:
   40954:	6840      	ldr	r0, [r0, #4]
   40956:	3800      	subs	r0, #0
   40958:	bf18      	it	ne
   4095a:	2001      	movne	r0, #1
   4095c:	4770      	bx	lr

0004095e <sock_pkt_append>:
   4095e:	2300      	movs	r3, #0
   40960:	600b      	str	r3, [r1, #0]
   40962:	6883      	ldr	r3, [r0, #8]
   40964:	b913      	cbnz	r3, 4096c <sock_pkt_append+0xe>
   40966:	e9c0 1101 	strd	r1, r1, [r0, #4]
   4096a:	4770      	bx	lr
   4096c:	6019      	str	r1, [r3, #0]
   4096e:	6081      	str	r1, [r0, #8]
   40970:	4770      	bx	lr

00040972 <sock_pkt_remove>:
   40972:	b538      	push	{r3, r4, r5, lr}
   40974:	4605      	mov	r5, r0
   40976:	460c      	mov	r4, r1
   40978:	2010      	movs	r0, #16
   4097a:	f7f2 fd27 	bl	333cc <nrfx_ipc_receive_event_disable>
   4097e:	68aa      	ldr	r2, [r5, #8]
   40980:	6823      	ldr	r3, [r4, #0]
   40982:	4294      	cmp	r4, r2
   40984:	606b      	str	r3, [r5, #4]
   40986:	bf08      	it	eq
   40988:	60ab      	streq	r3, [r5, #8]
   4098a:	2300      	movs	r3, #0
   4098c:	4620      	mov	r0, r4
   4098e:	6023      	str	r3, [r4, #0]
   40990:	f000 f90a 	bl	40ba8 <pkt_free>
   40994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   40998:	2010      	movs	r0, #16
   4099a:	f7f2 bcf9 	b.w	33390 <nrfx_ipc_receive_event_enable>

0004099e <sock_pkt_peek_head>:
   4099e:	6840      	ldr	r0, [r0, #4]
   409a0:	4770      	bx	lr

000409a2 <sock_is_stream>:
   409a2:	6900      	ldr	r0, [r0, #16]
   409a4:	1e43      	subs	r3, r0, #1
   409a6:	4258      	negs	r0, r3
   409a8:	4158      	adcs	r0, r3
   409aa:	4770      	bx	lr

000409ac <sock_is_datagram>:
   409ac:	6900      	ldr	r0, [r0, #16]
   409ae:	1e83      	subs	r3, r0, #2
   409b0:	4258      	negs	r0, r3
   409b2:	4158      	adcs	r0, r3
   409b4:	4770      	bx	lr

000409b6 <sock_is_raw>:
   409b6:	6900      	ldr	r0, [r0, #16]
   409b8:	1ec3      	subs	r3, r0, #3
   409ba:	4258      	negs	r0, r3
   409bc:	4158      	adcs	r0, r3
   409be:	4770      	bx	lr

000409c0 <sock_proto_is_secure>:
   409c0:	6940      	ldr	r0, [r0, #20]
   409c2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   409c6:	d005      	beq.n	409d4 <sock_proto_is_secure+0x14>
   409c8:	f240 1311 	movw	r3, #273	; 0x111
   409cc:	1ac3      	subs	r3, r0, r3
   409ce:	4258      	negs	r0, r3
   409d0:	4158      	adcs	r0, r3
   409d2:	4770      	bx	lr
   409d4:	2001      	movs	r0, #1
   409d6:	4770      	bx	lr

000409d8 <sock_is_connecting>:
   409d8:	7f00      	ldrb	r0, [r0, #28]
   409da:	f3c0 0080 	ubfx	r0, r0, #2, #1
   409de:	4770      	bx	lr

000409e0 <sock_is_connected>:
   409e0:	7f00      	ldrb	r0, [r0, #28]
   409e2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   409e6:	4770      	bx	lr

000409e8 <sock_is_secured>:
   409e8:	7f00      	ldrb	r0, [r0, #28]
   409ea:	f3c0 1000 	ubfx	r0, r0, #4, #1
   409ee:	4770      	bx	lr

000409f0 <sock_is_nonblock>:
   409f0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   409f2:	f000 0001 	and.w	r0, r0, #1
   409f6:	4770      	bx	lr

000409f8 <sock_is_local_closed>:
   409f8:	7f00      	ldrb	r0, [r0, #28]
   409fa:	f000 0001 	and.w	r0, r0, #1
   409fe:	4770      	bx	lr

00040a00 <sock_is_closed>:
   40a00:	7f00      	ldrb	r0, [r0, #28]
   40a02:	f3c0 0040 	ubfx	r0, r0, #1, #1
   40a06:	4770      	bx	lr

00040a08 <sock_has_error>:
   40a08:	6983      	ldr	r3, [r0, #24]
   40a0a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   40a0e:	bf14      	ite	ne
   40a10:	2001      	movne	r0, #1
   40a12:	2000      	moveq	r0, #0
   40a14:	4770      	bx	lr

00040a16 <sock_has_flow_control>:
   40a16:	7f00      	ldrb	r0, [r0, #28]
   40a18:	f3c0 1080 	ubfx	r0, r0, #6, #1
   40a1c:	4770      	bx	lr

00040a1e <sock_needs_attach>:
   40a1e:	b508      	push	{r3, lr}
   40a20:	4602      	mov	r2, r0
   40a22:	f7ff ffcd 	bl	409c0 <sock_proto_is_secure>
   40a26:	b128      	cbz	r0, 40a34 <sock_needs_attach+0x16>
   40a28:	7f10      	ldrb	r0, [r2, #28]
   40a2a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   40a2e:	f080 0001 	eor.w	r0, r0, #1
   40a32:	b2c0      	uxtb	r0, r0
   40a34:	bd08      	pop	{r3, pc}

00040a36 <sock_can_read>:
   40a36:	6840      	ldr	r0, [r0, #4]
   40a38:	3800      	subs	r0, #0
   40a3a:	bf18      	it	ne
   40a3c:	2001      	movne	r0, #1
   40a3e:	4770      	bx	lr

00040a40 <sock_can_accept>:
   40a40:	7f00      	ldrb	r0, [r0, #28]
   40a42:	f3c0 1040 	ubfx	r0, r0, #5, #1
   40a46:	4770      	bx	lr

00040a48 <sock_can_send>:
   40a48:	b508      	push	{r3, lr}
   40a4a:	6903      	ldr	r3, [r0, #16]
   40a4c:	4601      	mov	r1, r0
   40a4e:	2b01      	cmp	r3, #1
   40a50:	bf0a      	itet	eq
   40a52:	7f02      	ldrbeq	r2, [r0, #28]
   40a54:	2201      	movne	r2, #1
   40a56:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   40a5a:	f7ff ffb1 	bl	409c0 <sock_proto_is_secure>
   40a5e:	b180      	cbz	r0, 40a82 <sock_can_send+0x3a>
   40a60:	7f08      	ldrb	r0, [r1, #28]
   40a62:	f3c0 1000 	ubfx	r0, r0, #4, #1
   40a66:	b142      	cbz	r2, 40a7a <sock_can_send+0x32>
   40a68:	b148      	cbz	r0, 40a7e <sock_can_send+0x36>
   40a6a:	7f0a      	ldrb	r2, [r1, #28]
   40a6c:	0793      	lsls	r3, r2, #30
   40a6e:	d406      	bmi.n	40a7e <sock_can_send+0x36>
   40a70:	f3c2 1280 	ubfx	r2, r2, #6, #1
   40a74:	f082 0201 	eor.w	r2, r2, #1
   40a78:	b2d2      	uxtb	r2, r2
   40a7a:	4610      	mov	r0, r2
   40a7c:	bd08      	pop	{r3, pc}
   40a7e:	2200      	movs	r2, #0
   40a80:	e7fb      	b.n	40a7a <sock_can_send+0x32>
   40a82:	2a00      	cmp	r2, #0
   40a84:	d1f1      	bne.n	40a6a <sock_can_send+0x22>
   40a86:	e7f8      	b.n	40a7a <sock_can_send+0x32>

00040a88 <sock_rcvtimeo_ms_get>:
   40a88:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   40a8c:	ea53 0102 	orrs.w	r1, r3, r2
   40a90:	d009      	beq.n	40aa6 <sock_rcvtimeo_ms_get+0x1e>
   40a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   40a96:	fbb3 f0f1 	udiv	r0, r3, r1
   40a9a:	fb01 0002 	mla	r0, r1, r2, r0
   40a9e:	2801      	cmp	r0, #1
   40aa0:	bfb8      	it	lt
   40aa2:	2001      	movlt	r0, #1
   40aa4:	4770      	bx	lr
   40aa6:	f04f 30ff 	mov.w	r0, #4294967295
   40aaa:	4770      	bx	lr

00040aac <sock_sndtimeo_ms_get>:
   40aac:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   40ab0:	ea53 0102 	orrs.w	r1, r3, r2
   40ab4:	d009      	beq.n	40aca <sock_sndtimeo_ms_get+0x1e>
   40ab6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   40aba:	fbb3 f0f1 	udiv	r0, r3, r1
   40abe:	fb01 0002 	mla	r0, r1, r2, r0
   40ac2:	2801      	cmp	r0, #1
   40ac4:	bfb8      	it	lt
   40ac6:	2001      	movlt	r0, #1
   40ac8:	4770      	bx	lr
   40aca:	f04f 30ff 	mov.w	r0, #4294967295
   40ace:	4770      	bx	lr

00040ad0 <sock_family_is_valid>:
   40ad0:	1e43      	subs	r3, r0, #1
   40ad2:	2b01      	cmp	r3, #1
   40ad4:	d903      	bls.n	40ade <sock_family_is_valid+0xe>
   40ad6:	1f43      	subs	r3, r0, #5
   40ad8:	4258      	negs	r0, r3
   40ada:	4158      	adcs	r0, r3
   40adc:	4770      	bx	lr
   40ade:	2001      	movs	r0, #1
   40ae0:	4770      	bx	lr

00040ae2 <sock_type_is_valid>:
   40ae2:	3801      	subs	r0, #1
   40ae4:	2802      	cmp	r0, #2
   40ae6:	bf8c      	ite	hi
   40ae8:	2000      	movhi	r0, #0
   40aea:	2001      	movls	r0, #1
   40aec:	4770      	bx	lr

00040aee <sock_proto_is_valid>:
   40aee:	b150      	cbz	r0, 40b06 <sock_proto_is_valid+0x18>
   40af0:	2806      	cmp	r0, #6
   40af2:	d008      	beq.n	40b06 <sock_proto_is_valid+0x18>
   40af4:	f420 7380 	bic.w	r3, r0, #256	; 0x100
   40af8:	2b11      	cmp	r3, #17
   40afa:	d004      	beq.n	40b06 <sock_proto_is_valid+0x18>
   40afc:	f5a0 7381 	sub.w	r3, r0, #258	; 0x102
   40b00:	4258      	negs	r0, r3
   40b02:	4158      	adcs	r0, r3
   40b04:	4770      	bx	lr
   40b06:	2001      	movs	r0, #1
   40b08:	4770      	bx	lr

00040b0a <sock_proto_supports_type>:
   40b0a:	2903      	cmp	r1, #3
   40b0c:	d015      	beq.n	40b3a <sock_proto_supports_type+0x30>
   40b0e:	2811      	cmp	r0, #17
   40b10:	d00c      	beq.n	40b2c <sock_proto_supports_type+0x22>
   40b12:	dc04      	bgt.n	40b1e <sock_proto_supports_type+0x14>
   40b14:	b188      	cbz	r0, 40b3a <sock_proto_supports_type+0x30>
   40b16:	2806      	cmp	r0, #6
   40b18:	d00a      	beq.n	40b30 <sock_proto_supports_type+0x26>
   40b1a:	2000      	movs	r0, #0
   40b1c:	4770      	bx	lr
   40b1e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   40b22:	d005      	beq.n	40b30 <sock_proto_supports_type+0x26>
   40b24:	f240 1311 	movw	r3, #273	; 0x111
   40b28:	4298      	cmp	r0, r3
   40b2a:	d1f6      	bne.n	40b1a <sock_proto_supports_type+0x10>
   40b2c:	2902      	cmp	r1, #2
   40b2e:	e000      	b.n	40b32 <sock_proto_supports_type+0x28>
   40b30:	2901      	cmp	r1, #1
   40b32:	bf14      	ite	ne
   40b34:	2000      	movne	r0, #0
   40b36:	2001      	moveq	r0, #1
   40b38:	4770      	bx	lr
   40b3a:	2001      	movs	r0, #1
   40b3c:	4770      	bx	lr

00040b3e <sock_sockaddr_len_is_valid>:
   40b3e:	6843      	ldr	r3, [r0, #4]
   40b40:	2b01      	cmp	r3, #1
   40b42:	d003      	beq.n	40b4c <sock_sockaddr_len_is_valid+0xe>
   40b44:	2b02      	cmp	r3, #2
   40b46:	d009      	beq.n	40b5c <sock_sockaddr_len_is_valid+0x1e>
   40b48:	2000      	movs	r0, #0
   40b4a:	4770      	bx	lr
   40b4c:	7803      	ldrb	r3, [r0, #0]
   40b4e:	2b10      	cmp	r3, #16
   40b50:	d1fa      	bne.n	40b48 <sock_sockaddr_len_is_valid+0xa>
   40b52:	2910      	cmp	r1, #16
   40b54:	bf14      	ite	ne
   40b56:	2000      	movne	r0, #0
   40b58:	2001      	moveq	r0, #1
   40b5a:	4770      	bx	lr
   40b5c:	7803      	ldrb	r3, [r0, #0]
   40b5e:	2b24      	cmp	r3, #36	; 0x24
   40b60:	d1f2      	bne.n	40b48 <sock_sockaddr_len_is_valid+0xa>
   40b62:	2924      	cmp	r1, #36	; 0x24
   40b64:	e7f6      	b.n	40b54 <sock_sockaddr_len_is_valid+0x16>

00040b66 <sock_sockaddr_fam_is_valid>:
   40b66:	68c3      	ldr	r3, [r0, #12]
   40b68:	2b01      	cmp	r3, #1
   40b6a:	d003      	beq.n	40b74 <sock_sockaddr_fam_is_valid+0xe>
   40b6c:	2b02      	cmp	r3, #2
   40b6e:	d007      	beq.n	40b80 <sock_sockaddr_fam_is_valid+0x1a>
   40b70:	2001      	movs	r0, #1
   40b72:	4770      	bx	lr
   40b74:	6848      	ldr	r0, [r1, #4]
   40b76:	2801      	cmp	r0, #1
   40b78:	bf14      	ite	ne
   40b7a:	2000      	movne	r0, #0
   40b7c:	2001      	moveq	r0, #1
   40b7e:	4770      	bx	lr
   40b80:	6848      	ldr	r0, [r1, #4]
   40b82:	2802      	cmp	r0, #2
   40b84:	e7f8      	b.n	40b78 <sock_sockaddr_fam_is_valid+0x12>

00040b86 <pkt_has_next>:
   40b86:	b100      	cbz	r0, 40b8a <pkt_has_next+0x4>
   40b88:	6800      	ldr	r0, [r0, #0]
   40b8a:	3800      	subs	r0, #0
   40b8c:	bf18      	it	ne
   40b8e:	2001      	movne	r0, #1
   40b90:	4770      	bx	lr

00040b92 <pkt_peek_next>:
   40b92:	b100      	cbz	r0, 40b96 <pkt_peek_next+0x4>
   40b94:	6800      	ldr	r0, [r0, #0]
   40b96:	4770      	bx	lr

00040b98 <pkt_bytes_get>:
   40b98:	8943      	ldrh	r3, [r0, #10]
   40b9a:	6840      	ldr	r0, [r0, #4]
   40b9c:	4418      	add	r0, r3
   40b9e:	4770      	bx	lr

00040ba0 <pkt_bytes_left>:
   40ba0:	8902      	ldrh	r2, [r0, #8]
   40ba2:	8940      	ldrh	r0, [r0, #10]
   40ba4:	1a10      	subs	r0, r2, r0
   40ba6:	4770      	bx	lr

00040ba8 <pkt_free>:
   40ba8:	b510      	push	{r4, lr}
   40baa:	4604      	mov	r4, r0
   40bac:	6840      	ldr	r0, [r0, #4]
   40bae:	f7ff fdbd 	bl	4072c <rpc_client_data_free>
   40bb2:	68e0      	ldr	r0, [r4, #12]
   40bb4:	b108      	cbz	r0, 40bba <pkt_free+0x12>
   40bb6:	f7e5 fa5b 	bl	26070 <nrf_modem_os_free>
   40bba:	4620      	mov	r0, r4
   40bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40bc0:	f7e5 ba56 	b.w	26070 <nrf_modem_os_free>

00040bc4 <pkt_flush>:
   40bc4:	b510      	push	{r4, lr}
   40bc6:	4604      	mov	r4, r0
   40bc8:	6820      	ldr	r0, [r4, #0]
   40bca:	b900      	cbnz	r0, 40bce <pkt_flush+0xa>
   40bcc:	bd10      	pop	{r4, pc}
   40bce:	6862      	ldr	r2, [r4, #4]
   40bd0:	6803      	ldr	r3, [r0, #0]
   40bd2:	4290      	cmp	r0, r2
   40bd4:	6023      	str	r3, [r4, #0]
   40bd6:	bf08      	it	eq
   40bd8:	6063      	streq	r3, [r4, #4]
   40bda:	f7ff ffe5 	bl	40ba8 <pkt_free>
   40bde:	e7f3      	b.n	40bc8 <pkt_flush+0x4>

00040be0 <on_conf_dnssrv_res>:
   40be0:	f000 bce6 	b.w	415b0 <res_forward>

00040be4 <nrf_freeaddrinfo>:
   40be4:	b510      	push	{r4, lr}
   40be6:	4604      	mov	r4, r0
   40be8:	b160      	cbz	r0, 40c04 <nrf_freeaddrinfo+0x20>
   40bea:	6940      	ldr	r0, [r0, #20]
   40bec:	b108      	cbz	r0, 40bf2 <nrf_freeaddrinfo+0xe>
   40bee:	f7e5 fa3f 	bl	26070 <nrf_modem_os_free>
   40bf2:	69a0      	ldr	r0, [r4, #24]
   40bf4:	b108      	cbz	r0, 40bfa <nrf_freeaddrinfo+0x16>
   40bf6:	f7e5 fa3b 	bl	26070 <nrf_modem_os_free>
   40bfa:	4620      	mov	r0, r4
   40bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40c00:	f7e5 ba36 	b.w	26070 <nrf_modem_os_free>
   40c04:	bd10      	pop	{r4, pc}

00040c06 <nrf_socket>:
   40c06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   40c0a:	4681      	mov	r9, r0
   40c0c:	4688      	mov	r8, r1
   40c0e:	4617      	mov	r7, r2
   40c10:	f7ff ff5e 	bl	40ad0 <sock_family_is_valid>
   40c14:	b938      	cbnz	r0, 40c26 <nrf_socket+0x20>
   40c16:	206a      	movs	r0, #106	; 0x6a
   40c18:	f7e5 f946 	bl	25ea8 <nrf_modem_os_errno_set>
   40c1c:	f04f 30ff 	mov.w	r0, #4294967295
   40c20:	b003      	add	sp, #12
   40c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40c26:	4638      	mov	r0, r7
   40c28:	f7ff ff61 	bl	40aee <sock_proto_is_valid>
   40c2c:	b908      	cbnz	r0, 40c32 <nrf_socket+0x2c>
   40c2e:	207b      	movs	r0, #123	; 0x7b
   40c30:	e7f2      	b.n	40c18 <nrf_socket+0x12>
   40c32:	4640      	mov	r0, r8
   40c34:	f7ff ff55 	bl	40ae2 <sock_type_is_valid>
   40c38:	b908      	cbnz	r0, 40c3e <nrf_socket+0x38>
   40c3a:	206b      	movs	r0, #107	; 0x6b
   40c3c:	e7ec      	b.n	40c18 <nrf_socket+0x12>
   40c3e:	4641      	mov	r1, r8
   40c40:	4638      	mov	r0, r7
   40c42:	f7ff ff62 	bl	40b0a <sock_proto_supports_type>
   40c46:	2800      	cmp	r0, #0
   40c48:	d0f7      	beq.n	40c3a <nrf_socket+0x34>
   40c4a:	f7f3 fd91 	bl	34770 <sock_open>
   40c4e:	4606      	mov	r6, r0
   40c50:	b908      	cbnz	r0, 40c56 <nrf_socket+0x50>
   40c52:	2017      	movs	r0, #23
   40c54:	e7e0      	b.n	40c18 <nrf_socket+0x12>
   40c56:	2000      	movs	r0, #0
   40c58:	f7ff fd58 	bl	4070c <rpc_client_request_alloc>
   40c5c:	4604      	mov	r4, r0
   40c5e:	b920      	cbnz	r0, 40c6a <nrf_socket+0x64>
   40c60:	6830      	ldr	r0, [r6, #0]
   40c62:	f7f3 fdbb 	bl	347dc <_sock_close>
   40c66:	2069      	movs	r0, #105	; 0x69
   40c68:	e7d6      	b.n	40c18 <nrf_socket+0x12>
   40c6a:	2300      	movs	r3, #0
   40c6c:	220c      	movs	r2, #12
   40c6e:	f04f 35ff 	mov.w	r5, #4294967295
   40c72:	7202      	strb	r2, [r0, #8]
   40c74:	7243      	strb	r3, [r0, #9]
   40c76:	7283      	strb	r3, [r0, #10]
   40c78:	72c3      	strb	r3, [r0, #11]
   40c7a:	7405      	strb	r5, [r0, #16]
   40c7c:	7445      	strb	r5, [r0, #17]
   40c7e:	7485      	strb	r5, [r0, #18]
   40c80:	74c5      	strb	r5, [r0, #19]
   40c82:	4648      	mov	r0, r9
   40c84:	f000 fc37 	bl	414f6 <nrf_af_to_rpc_af>
   40c88:	6160      	str	r0, [r4, #20]
   40c8a:	4640      	mov	r0, r8
   40c8c:	f000 fc36 	bl	414fc <nrf_type_to_rpc_type>
   40c90:	4601      	mov	r1, r0
   40c92:	61a0      	str	r0, [r4, #24]
   40c94:	4638      	mov	r0, r7
   40c96:	f000 fc32 	bl	414fe <nrf_proto_to_rpc_proto>
   40c9a:	4621      	mov	r1, r4
   40c9c:	61e0      	str	r0, [r4, #28]
   40c9e:	aa01      	add	r2, sp, #4
   40ca0:	f247 0001 	movw	r0, #28673	; 0x7001
   40ca4:	f7f4 fbf4 	bl	35490 <req_forward>
   40ca8:	4604      	mov	r4, r0
   40caa:	b120      	cbz	r0, 40cb6 <nrf_socket+0xb0>
   40cac:	4628      	mov	r0, r5
   40cae:	f7f3 fd95 	bl	347dc <_sock_close>
   40cb2:	4620      	mov	r0, r4
   40cb4:	e7b0      	b.n	40c18 <nrf_socket+0x12>
   40cb6:	9801      	ldr	r0, [sp, #4]
   40cb8:	6983      	ldr	r3, [r0, #24]
   40cba:	e9c6 9803 	strd	r9, r8, [r6, #12]
   40cbe:	6033      	str	r3, [r6, #0]
   40cc0:	6177      	str	r7, [r6, #20]
   40cc2:	f7ff fd30 	bl	40726 <rpc_client_message_free>
   40cc6:	6830      	ldr	r0, [r6, #0]
   40cc8:	e7aa      	b.n	40c20 <nrf_socket+0x1a>

00040cca <nrf_close>:
   40cca:	b570      	push	{r4, r5, r6, lr}
   40ccc:	4606      	mov	r6, r0
   40cce:	f7f3 fd73 	bl	347b8 <sock_find>
   40cd2:	4605      	mov	r5, r0
   40cd4:	b930      	cbnz	r0, 40ce4 <nrf_close+0x1a>
   40cd6:	2009      	movs	r0, #9
   40cd8:	f7e5 f8e6 	bl	25ea8 <nrf_modem_os_errno_set>
   40cdc:	f04f 34ff 	mov.w	r4, #4294967295
   40ce0:	4620      	mov	r0, r4
   40ce2:	bd70      	pop	{r4, r5, r6, pc}
   40ce4:	f7f5 fbce 	bl	36484 <nrf_modem_state_is_initialized>
   40ce8:	4604      	mov	r4, r0
   40cea:	2800      	cmp	r0, #0
   40cec:	d0f8      	beq.n	40ce0 <nrf_close+0x16>
   40cee:	2000      	movs	r0, #0
   40cf0:	f7ff fd0c 	bl	4070c <rpc_client_request_alloc>
   40cf4:	4601      	mov	r1, r0
   40cf6:	b908      	cbnz	r0, 40cfc <nrf_close+0x32>
   40cf8:	2069      	movs	r0, #105	; 0x69
   40cfa:	e7ed      	b.n	40cd8 <nrf_close+0xe>
   40cfc:	7f2b      	ldrb	r3, [r5, #28]
   40cfe:	2200      	movs	r2, #0
   40d00:	f043 0301 	orr.w	r3, r3, #1
   40d04:	772b      	strb	r3, [r5, #28]
   40d06:	6106      	str	r6, [r0, #16]
   40d08:	f247 0009 	movw	r0, #28681	; 0x7009
   40d0c:	f7f4 fbc0 	bl	35490 <req_forward>
   40d10:	4604      	mov	r4, r0
   40d12:	b128      	cbz	r0, 40d20 <nrf_close+0x56>
   40d14:	2816      	cmp	r0, #22
   40d16:	d007      	beq.n	40d28 <nrf_close+0x5e>
   40d18:	f7e5 f8c6 	bl	25ea8 <nrf_modem_os_errno_set>
   40d1c:	f04f 34ff 	mov.w	r4, #4294967295
   40d20:	4630      	mov	r0, r6
   40d22:	f7f3 fd5b 	bl	347dc <_sock_close>
   40d26:	e7db      	b.n	40ce0 <nrf_close+0x16>
   40d28:	2400      	movs	r4, #0
   40d2a:	e7f9      	b.n	40d20 <nrf_close+0x56>

00040d2c <nrf_bind>:
   40d2c:	b538      	push	{r3, r4, r5, lr}
   40d2e:	4605      	mov	r5, r0
   40d30:	460c      	mov	r4, r1
   40d32:	f7f3 fd41 	bl	347b8 <sock_find>
   40d36:	b928      	cbnz	r0, 40d44 <nrf_bind+0x18>
   40d38:	2009      	movs	r0, #9
   40d3a:	f7e5 f8b5 	bl	25ea8 <nrf_modem_os_errno_set>
   40d3e:	f04f 33ff 	mov.w	r3, #4294967295
   40d42:	e023      	b.n	40d8c <nrf_bind+0x60>
   40d44:	b90c      	cbnz	r4, 40d4a <nrf_bind+0x1e>
   40d46:	200e      	movs	r0, #14
   40d48:	e7f7      	b.n	40d3a <nrf_bind+0xe>
   40d4a:	4621      	mov	r1, r4
   40d4c:	f7ff ff0b 	bl	40b66 <sock_sockaddr_fam_is_valid>
   40d50:	b908      	cbnz	r0, 40d56 <nrf_bind+0x2a>
   40d52:	206a      	movs	r0, #106	; 0x6a
   40d54:	e7f1      	b.n	40d3a <nrf_bind+0xe>
   40d56:	2000      	movs	r0, #0
   40d58:	f7ff fcd8 	bl	4070c <rpc_client_request_alloc>
   40d5c:	4601      	mov	r1, r0
   40d5e:	b908      	cbnz	r0, 40d64 <nrf_bind+0x38>
   40d60:	2069      	movs	r0, #105	; 0x69
   40d62:	e7ea      	b.n	40d3a <nrf_bind+0xe>
   40d64:	2214      	movs	r2, #20
   40d66:	2300      	movs	r3, #0
   40d68:	7202      	strb	r2, [r0, #8]
   40d6a:	6862      	ldr	r2, [r4, #4]
   40d6c:	6105      	str	r5, [r0, #16]
   40d6e:	2a01      	cmp	r2, #1
   40d70:	7243      	strb	r3, [r0, #9]
   40d72:	7283      	strb	r3, [r0, #10]
   40d74:	72c3      	strb	r3, [r0, #11]
   40d76:	d00b      	beq.n	40d90 <nrf_bind+0x64>
   40d78:	2a02      	cmp	r2, #2
   40d7a:	d011      	beq.n	40da0 <nrf_bind+0x74>
   40d7c:	2200      	movs	r2, #0
   40d7e:	f247 0005 	movw	r0, #28677	; 0x7005
   40d82:	f7f4 fb85 	bl	35490 <req_forward>
   40d86:	4603      	mov	r3, r0
   40d88:	2800      	cmp	r0, #0
   40d8a:	d1d6      	bne.n	40d3a <nrf_bind+0xe>
   40d8c:	4618      	mov	r0, r3
   40d8e:	bd38      	pop	{r3, r4, r5, pc}
   40d90:	8922      	ldrh	r2, [r4, #8]
   40d92:	75c3      	strb	r3, [r0, #23]
   40d94:	8282      	strh	r2, [r0, #20]
   40d96:	2204      	movs	r2, #4
   40d98:	7582      	strb	r2, [r0, #22]
   40d9a:	68e3      	ldr	r3, [r4, #12]
   40d9c:	6183      	str	r3, [r0, #24]
   40d9e:	e7ed      	b.n	40d7c <nrf_bind+0x50>
   40da0:	8922      	ldrh	r2, [r4, #8]
   40da2:	75c3      	strb	r3, [r0, #23]
   40da4:	8282      	strh	r2, [r0, #20]
   40da6:	2210      	movs	r2, #16
   40da8:	18a3      	adds	r3, r4, r2
   40daa:	7582      	strb	r2, [r0, #22]
   40dac:	3420      	adds	r4, #32
   40dae:	f100 0218 	add.w	r2, r0, #24
   40db2:	f853 0b04 	ldr.w	r0, [r3], #4
   40db6:	42a3      	cmp	r3, r4
   40db8:	f842 0b04 	str.w	r0, [r2], #4
   40dbc:	d1f9      	bne.n	40db2 <nrf_bind+0x86>
   40dbe:	e7dd      	b.n	40d7c <nrf_bind+0x50>

00040dc0 <nrf_listen>:
   40dc0:	b570      	push	{r4, r5, r6, lr}
   40dc2:	4606      	mov	r6, r0
   40dc4:	460c      	mov	r4, r1
   40dc6:	f7f3 fcf7 	bl	347b8 <sock_find>
   40dca:	4605      	mov	r5, r0
   40dcc:	b918      	cbnz	r0, 40dd6 <nrf_listen+0x16>
   40dce:	2009      	movs	r0, #9
   40dd0:	f7e5 f86a 	bl	25ea8 <nrf_modem_os_errno_set>
   40dd4:	e016      	b.n	40e04 <nrf_listen+0x44>
   40dd6:	f7ff fde4 	bl	409a2 <sock_is_stream>
   40dda:	b908      	cbnz	r0, 40de0 <nrf_listen+0x20>
   40ddc:	205f      	movs	r0, #95	; 0x5f
   40dde:	e7f7      	b.n	40dd0 <nrf_listen+0x10>
   40de0:	4628      	mov	r0, r5
   40de2:	f7ff fe1c 	bl	40a1e <sock_needs_attach>
   40de6:	b930      	cbnz	r0, 40df6 <nrf_listen+0x36>
   40de8:	2000      	movs	r0, #0
   40dea:	f7ff fc8f 	bl	4070c <rpc_client_request_alloc>
   40dee:	4601      	mov	r1, r0
   40df0:	b958      	cbnz	r0, 40e0a <nrf_listen+0x4a>
   40df2:	2069      	movs	r0, #105	; 0x69
   40df4:	e7ec      	b.n	40dd0 <nrf_listen+0x10>
   40df6:	f04f 31ff 	mov.w	r1, #4294967295
   40dfa:	4628      	mov	r0, r5
   40dfc:	f7f4 fac4 	bl	35388 <tls_attach>
   40e00:	2800      	cmp	r0, #0
   40e02:	d0f1      	beq.n	40de8 <nrf_listen+0x28>
   40e04:	f04f 33ff 	mov.w	r3, #4294967295
   40e08:	e010      	b.n	40e2c <nrf_listen+0x6c>
   40e0a:	2200      	movs	r2, #0
   40e0c:	2304      	movs	r3, #4
   40e0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   40e12:	7203      	strb	r3, [r0, #8]
   40e14:	6106      	str	r6, [r0, #16]
   40e16:	7242      	strb	r2, [r0, #9]
   40e18:	7282      	strb	r2, [r0, #10]
   40e1a:	72c2      	strb	r2, [r0, #11]
   40e1c:	6144      	str	r4, [r0, #20]
   40e1e:	f247 0008 	movw	r0, #28680	; 0x7008
   40e22:	f7f4 fb35 	bl	35490 <req_forward>
   40e26:	4603      	mov	r3, r0
   40e28:	2800      	cmp	r0, #0
   40e2a:	d1d1      	bne.n	40dd0 <nrf_listen+0x10>
   40e2c:	4618      	mov	r0, r3
   40e2e:	bd70      	pop	{r4, r5, r6, pc}

00040e30 <nrf_accept>:
   40e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40e34:	b08b      	sub	sp, #44	; 0x2c
   40e36:	4605      	mov	r5, r0
   40e38:	4689      	mov	r9, r1
   40e3a:	4617      	mov	r7, r2
   40e3c:	f7f3 fcbc 	bl	347b8 <sock_find>
   40e40:	4606      	mov	r6, r0
   40e42:	b938      	cbnz	r0, 40e54 <nrf_accept+0x24>
   40e44:	2009      	movs	r0, #9
   40e46:	f7e5 f82f 	bl	25ea8 <nrf_modem_os_errno_set>
   40e4a:	f04f 30ff 	mov.w	r0, #4294967295
   40e4e:	b00b      	add	sp, #44	; 0x2c
   40e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40e54:	f7ff fda5 	bl	409a2 <sock_is_stream>
   40e58:	b908      	cbnz	r0, 40e5e <nrf_accept+0x2e>
   40e5a:	205f      	movs	r0, #95	; 0x5f
   40e5c:	e7f3      	b.n	40e46 <nrf_accept+0x16>
   40e5e:	4630      	mov	r0, r6
   40e60:	f7ff fdc6 	bl	409f0 <sock_is_nonblock>
   40e64:	b128      	cbz	r0, 40e72 <nrf_accept+0x42>
   40e66:	4630      	mov	r0, r6
   40e68:	f7ff fdea 	bl	40a40 <sock_can_accept>
   40e6c:	b908      	cbnz	r0, 40e72 <nrf_accept+0x42>
   40e6e:	200b      	movs	r0, #11
   40e70:	e7e9      	b.n	40e46 <nrf_accept+0x16>
   40e72:	f7f3 fc7d 	bl	34770 <sock_open>
   40e76:	4604      	mov	r4, r0
   40e78:	b908      	cbnz	r0, 40e7e <nrf_accept+0x4e>
   40e7a:	2017      	movs	r0, #23
   40e7c:	e7e3      	b.n	40e46 <nrf_accept+0x16>
   40e7e:	7f33      	ldrb	r3, [r6, #28]
   40e80:	2000      	movs	r0, #0
   40e82:	f36f 1345 	bfc	r3, #5, #1
   40e86:	7733      	strb	r3, [r6, #28]
   40e88:	f7ff fc40 	bl	4070c <rpc_client_request_alloc>
   40e8c:	4601      	mov	r1, r0
   40e8e:	b920      	cbnz	r0, 40e9a <nrf_accept+0x6a>
   40e90:	6820      	ldr	r0, [r4, #0]
   40e92:	f7f3 fca3 	bl	347dc <_sock_close>
   40e96:	2069      	movs	r0, #105	; 0x69
   40e98:	e7d5      	b.n	40e46 <nrf_accept+0x16>
   40e9a:	6105      	str	r5, [r0, #16]
   40e9c:	466a      	mov	r2, sp
   40e9e:	f247 000c 	movw	r0, #28684	; 0x700c
   40ea2:	f7f4 faf5 	bl	35490 <req_forward>
   40ea6:	4680      	mov	r8, r0
   40ea8:	b120      	cbz	r0, 40eb4 <nrf_accept+0x84>
   40eaa:	6820      	ldr	r0, [r4, #0]
   40eac:	f7f3 fc96 	bl	347dc <_sock_close>
   40eb0:	4640      	mov	r0, r8
   40eb2:	e7c8      	b.n	40e46 <nrf_accept+0x16>
   40eb4:	9d00      	ldr	r5, [sp, #0]
   40eb6:	69ab      	ldr	r3, [r5, #24]
   40eb8:	6023      	str	r3, [r4, #0]
   40eba:	6933      	ldr	r3, [r6, #16]
   40ebc:	6123      	str	r3, [r4, #16]
   40ebe:	6973      	ldr	r3, [r6, #20]
   40ec0:	6163      	str	r3, [r4, #20]
   40ec2:	7f23      	ldrb	r3, [r4, #28]
   40ec4:	f043 0308 	orr.w	r3, r3, #8
   40ec8:	7723      	strb	r3, [r4, #28]
   40eca:	f1b9 0f00 	cmp.w	r9, #0
   40ece:	d005      	beq.n	40edc <nrf_accept+0xac>
   40ed0:	b127      	cbz	r7, 40edc <nrf_accept+0xac>
   40ed2:	8beb      	ldrh	r3, [r5, #30]
   40ed4:	2b04      	cmp	r3, #4
   40ed6:	d006      	beq.n	40ee6 <nrf_accept+0xb6>
   40ed8:	2b10      	cmp	r3, #16
   40eda:	d01a      	beq.n	40f12 <nrf_accept+0xe2>
   40edc:	4628      	mov	r0, r5
   40ede:	f7ff fc22 	bl	40726 <rpc_client_message_free>
   40ee2:	6820      	ldr	r0, [r4, #0]
   40ee4:	e7b3      	b.n	40e4e <nrf_accept+0x1e>
   40ee6:	2610      	movs	r6, #16
   40ee8:	2301      	movs	r3, #1
   40eea:	9001      	str	r0, [sp, #4]
   40eec:	9003      	str	r0, [sp, #12]
   40eee:	f88d 6004 	strb.w	r6, [sp, #4]
   40ef2:	9302      	str	r3, [sp, #8]
   40ef4:	7f6a      	ldrb	r2, [r5, #29]
   40ef6:	7f2b      	ldrb	r3, [r5, #28]
   40ef8:	4648      	mov	r0, r9
   40efa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   40efe:	f8ad 300c 	strh.w	r3, [sp, #12]
   40f02:	6a2b      	ldr	r3, [r5, #32]
   40f04:	683a      	ldr	r2, [r7, #0]
   40f06:	a901      	add	r1, sp, #4
   40f08:	9304      	str	r3, [sp, #16]
   40f0a:	f000 fe09 	bl	41b20 <memcpy>
   40f0e:	603e      	str	r6, [r7, #0]
   40f10:	e7e4      	b.n	40edc <nrf_accept+0xac>
   40f12:	2624      	movs	r6, #36	; 0x24
   40f14:	4601      	mov	r1, r0
   40f16:	4632      	mov	r2, r6
   40f18:	a801      	add	r0, sp, #4
   40f1a:	f000 fe21 	bl	41b60 <memset>
   40f1e:	2302      	movs	r3, #2
   40f20:	f88d 6004 	strb.w	r6, [sp, #4]
   40f24:	9302      	str	r3, [sp, #8]
   40f26:	7f2b      	ldrb	r3, [r5, #28]
   40f28:	7f6a      	ldrb	r2, [r5, #29]
   40f2a:	ae05      	add	r6, sp, #20
   40f2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   40f30:	f8ad 300c 	strh.w	r3, [sp, #12]
   40f34:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   40f38:	f105 0320 	add.w	r3, r5, #32
   40f3c:	4632      	mov	r2, r6
   40f3e:	6818      	ldr	r0, [r3, #0]
   40f40:	6859      	ldr	r1, [r3, #4]
   40f42:	3308      	adds	r3, #8
   40f44:	c203      	stmia	r2!, {r0, r1}
   40f46:	4563      	cmp	r3, ip
   40f48:	4616      	mov	r6, r2
   40f4a:	d1f7      	bne.n	40f3c <nrf_accept+0x10c>
   40f4c:	4648      	mov	r0, r9
   40f4e:	683a      	ldr	r2, [r7, #0]
   40f50:	a901      	add	r1, sp, #4
   40f52:	f000 fde5 	bl	41b20 <memcpy>
   40f56:	2324      	movs	r3, #36	; 0x24
   40f58:	603b      	str	r3, [r7, #0]
   40f5a:	e7bf      	b.n	40edc <nrf_accept+0xac>

00040f5c <nrf_recvfrom>:
   40f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40f60:	b085      	sub	sp, #20
   40f62:	4617      	mov	r7, r2
   40f64:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   40f68:	461e      	mov	r6, r3
   40f6a:	9101      	str	r1, [sp, #4]
   40f6c:	f403 7b80 	and.w	fp, r3, #256	; 0x100
   40f70:	f7f3 fc22 	bl	347b8 <sock_find>
   40f74:	4604      	mov	r4, r0
   40f76:	b940      	cbnz	r0, 40f8a <nrf_recvfrom+0x2e>
   40f78:	2009      	movs	r0, #9
   40f7a:	f7e4 ff95 	bl	25ea8 <nrf_modem_os_errno_set>
   40f7e:	f04f 35ff 	mov.w	r5, #4294967295
   40f82:	4628      	mov	r0, r5
   40f84:	b005      	add	sp, #20
   40f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40f8a:	f436 75a1 	bics.w	r5, r6, #322	; 0x142
   40f8e:	d001      	beq.n	40f94 <nrf_recvfrom+0x38>
   40f90:	205f      	movs	r0, #95	; 0x5f
   40f92:	e7f2      	b.n	40f7a <nrf_recvfrom+0x1e>
   40f94:	f1ba 0f00 	cmp.w	sl, #0
   40f98:	d004      	beq.n	40fa4 <nrf_recvfrom+0x48>
   40f9a:	f1b8 0f00 	cmp.w	r8, #0
   40f9e:	d104      	bne.n	40faa <nrf_recvfrom+0x4e>
   40fa0:	200e      	movs	r0, #14
   40fa2:	e7ea      	b.n	40f7a <nrf_recvfrom+0x1e>
   40fa4:	f1b8 0f00 	cmp.w	r8, #0
   40fa8:	d1fa      	bne.n	40fa0 <nrf_recvfrom+0x44>
   40faa:	4620      	mov	r0, r4
   40fac:	f7ff fcf9 	bl	409a2 <sock_is_stream>
   40fb0:	b128      	cbz	r0, 40fbe <nrf_recvfrom+0x62>
   40fb2:	4620      	mov	r0, r4
   40fb4:	f7ff fd14 	bl	409e0 <sock_is_connected>
   40fb8:	b908      	cbnz	r0, 40fbe <nrf_recvfrom+0x62>
   40fba:	2080      	movs	r0, #128	; 0x80
   40fbc:	e7dd      	b.n	40f7a <nrf_recvfrom+0x1e>
   40fbe:	f1bb 0f00 	cmp.w	fp, #0
   40fc2:	d149      	bne.n	41058 <nrf_recvfrom+0xfc>
   40fc4:	4620      	mov	r0, r4
   40fc6:	f7ff fd13 	bl	409f0 <sock_is_nonblock>
   40fca:	2800      	cmp	r0, #0
   40fcc:	d147      	bne.n	4105e <nrf_recvfrom+0x102>
   40fce:	f3c6 1980 	ubfx	r9, r6, #6, #1
   40fd2:	4620      	mov	r0, r4
   40fd4:	f7ff fd58 	bl	40a88 <sock_rcvtimeo_ms_get>
   40fd8:	9003      	str	r0, [sp, #12]
   40fda:	4620      	mov	r0, r4
   40fdc:	f7ff fcba 	bl	40954 <sock_has_pkt>
   40fe0:	2800      	cmp	r0, #0
   40fe2:	d03f      	beq.n	41064 <nrf_recvfrom+0x108>
   40fe4:	4620      	mov	r0, r4
   40fe6:	f7ff fcda 	bl	4099e <sock_pkt_peek_head>
   40fea:	4681      	mov	r9, r0
   40fec:	f1ba 0f00 	cmp.w	sl, #0
   40ff0:	d00d      	beq.n	4100e <nrf_recvfrom+0xb2>
   40ff2:	68c1      	ldr	r1, [r0, #12]
   40ff4:	2900      	cmp	r1, #0
   40ff6:	d059      	beq.n	410ac <nrf_recvfrom+0x150>
   40ff8:	780a      	ldrb	r2, [r1, #0]
   40ffa:	f8d8 3000 	ldr.w	r3, [r8]
   40ffe:	4650      	mov	r0, sl
   41000:	429a      	cmp	r2, r3
   41002:	bf28      	it	cs
   41004:	461a      	movcs	r2, r3
   41006:	f8c8 2000 	str.w	r2, [r8]
   4100a:	f000 fd89 	bl	41b20 <memcpy>
   4100e:	f006 0802 	and.w	r8, r6, #2
   41012:	4648      	mov	r0, r9
   41014:	f7ff fdc4 	bl	40ba0 <pkt_bytes_left>
   41018:	42b8      	cmp	r0, r7
   4101a:	d84a      	bhi.n	410b2 <nrf_recvfrom+0x156>
   4101c:	4648      	mov	r0, r9
   4101e:	f7ff fdbf 	bl	40ba0 <pkt_bytes_left>
   41022:	4606      	mov	r6, r0
   41024:	2e00      	cmp	r6, #0
   41026:	d0ac      	beq.n	40f82 <nrf_recvfrom+0x26>
   41028:	9b01      	ldr	r3, [sp, #4]
   4102a:	4648      	mov	r0, r9
   4102c:	eb03 0a05 	add.w	sl, r3, r5
   41030:	f7ff fdb2 	bl	40b98 <pkt_bytes_get>
   41034:	4632      	mov	r2, r6
   41036:	4601      	mov	r1, r0
   41038:	4650      	mov	r0, sl
   4103a:	f000 fd71 	bl	41b20 <memcpy>
   4103e:	4620      	mov	r0, r4
   41040:	4435      	add	r5, r6
   41042:	f7ff fcb3 	bl	409ac <sock_is_datagram>
   41046:	b3b0      	cbz	r0, 410b6 <nrf_recvfrom+0x15a>
   41048:	f1b8 0f00 	cmp.w	r8, #0
   4104c:	d199      	bne.n	40f82 <nrf_recvfrom+0x26>
   4104e:	4649      	mov	r1, r9
   41050:	4620      	mov	r0, r4
   41052:	f7ff fc8e 	bl	40972 <sock_pkt_remove>
   41056:	e794      	b.n	40f82 <nrf_recvfrom+0x26>
   41058:	f04f 0900 	mov.w	r9, #0
   4105c:	e7b9      	b.n	40fd2 <nrf_recvfrom+0x76>
   4105e:	f04f 0901 	mov.w	r9, #1
   41062:	e7b6      	b.n	40fd2 <nrf_recvfrom+0x76>
   41064:	4620      	mov	r0, r4
   41066:	f7ff fccb 	bl	40a00 <sock_is_closed>
   4106a:	b188      	cbz	r0, 41090 <nrf_recvfrom+0x134>
   4106c:	4620      	mov	r0, r4
   4106e:	f7ff fccb 	bl	40a08 <sock_has_error>
   41072:	b108      	cbz	r0, 41078 <nrf_recvfrom+0x11c>
   41074:	69a0      	ldr	r0, [r4, #24]
   41076:	e780      	b.n	40f7a <nrf_recvfrom+0x1e>
   41078:	4620      	mov	r0, r4
   4107a:	f7ff fc92 	bl	409a2 <sock_is_stream>
   4107e:	2800      	cmp	r0, #0
   41080:	f47f af7f 	bne.w	40f82 <nrf_recvfrom+0x26>
   41084:	4620      	mov	r0, r4
   41086:	f7ff fc91 	bl	409ac <sock_is_datagram>
   4108a:	2800      	cmp	r0, #0
   4108c:	f47f af74 	bne.w	40f78 <nrf_recvfrom+0x1c>
   41090:	f1b9 0f00 	cmp.w	r9, #0
   41094:	d001      	beq.n	4109a <nrf_recvfrom+0x13e>
   41096:	200b      	movs	r0, #11
   41098:	e76f      	b.n	40f7a <nrf_recvfrom+0x1e>
   4109a:	4648      	mov	r0, r9
   4109c:	a903      	add	r1, sp, #12
   4109e:	f7e4 fe41 	bl	25d24 <nrf_modem_os_timedwait>
   410a2:	2800      	cmp	r0, #0
   410a4:	d099      	beq.n	40fda <nrf_recvfrom+0x7e>
   410a6:	f000 fd15 	bl	41ad4 <abs>
   410aa:	e766      	b.n	40f7a <nrf_recvfrom+0x1e>
   410ac:	f8c8 1000 	str.w	r1, [r8]
   410b0:	e7ad      	b.n	4100e <nrf_recvfrom+0xb2>
   410b2:	463e      	mov	r6, r7
   410b4:	e7b6      	b.n	41024 <nrf_recvfrom+0xc8>
   410b6:	4620      	mov	r0, r4
   410b8:	f7ff fc7d 	bl	409b6 <sock_is_raw>
   410bc:	2800      	cmp	r0, #0
   410be:	d1c3      	bne.n	41048 <nrf_recvfrom+0xec>
   410c0:	f1b8 0f00 	cmp.w	r8, #0
   410c4:	d10c      	bne.n	410e0 <nrf_recvfrom+0x184>
   410c6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   410ca:	4648      	mov	r0, r9
   410cc:	4433      	add	r3, r6
   410ce:	f8a9 300a 	strh.w	r3, [r9, #10]
   410d2:	f7ff fd65 	bl	40ba0 <pkt_bytes_left>
   410d6:	b918      	cbnz	r0, 410e0 <nrf_recvfrom+0x184>
   410d8:	4649      	mov	r1, r9
   410da:	4620      	mov	r0, r4
   410dc:	f7ff fc49 	bl	40972 <sock_pkt_remove>
   410e0:	42b7      	cmp	r7, r6
   410e2:	f43f af4e 	beq.w	40f82 <nrf_recvfrom+0x26>
   410e6:	f1bb 0f00 	cmp.w	fp, #0
   410ea:	d022      	beq.n	41132 <nrf_recvfrom+0x1d6>
   410ec:	f1b8 0f00 	cmp.w	r8, #0
   410f0:	d016      	beq.n	41120 <nrf_recvfrom+0x1c4>
   410f2:	4648      	mov	r0, r9
   410f4:	f7ff fd47 	bl	40b86 <pkt_has_next>
   410f8:	b140      	cbz	r0, 4110c <nrf_recvfrom+0x1b0>
   410fa:	4648      	mov	r0, r9
   410fc:	f7ff fd49 	bl	40b92 <pkt_peek_next>
   41100:	4681      	mov	r9, r0
   41102:	2800      	cmp	r0, #0
   41104:	f43f af3d 	beq.w	40f82 <nrf_recvfrom+0x26>
   41108:	1bbf      	subs	r7, r7, r6
   4110a:	e782      	b.n	41012 <nrf_recvfrom+0xb6>
   4110c:	2000      	movs	r0, #0
   4110e:	a903      	add	r1, sp, #12
   41110:	f7e4 fe08 	bl	25d24 <nrf_modem_os_timedwait>
   41114:	2800      	cmp	r0, #0
   41116:	d0e6      	beq.n	410e6 <nrf_recvfrom+0x18a>
   41118:	2d00      	cmp	r5, #0
   4111a:	f47f af32 	bne.w	40f82 <nrf_recvfrom+0x26>
   4111e:	e7c2      	b.n	410a6 <nrf_recvfrom+0x14a>
   41120:	4620      	mov	r0, r4
   41122:	f7ff fc17 	bl	40954 <sock_has_pkt>
   41126:	2800      	cmp	r0, #0
   41128:	d0f0      	beq.n	4110c <nrf_recvfrom+0x1b0>
   4112a:	4620      	mov	r0, r4
   4112c:	f7ff fc37 	bl	4099e <sock_pkt_peek_head>
   41130:	e7e6      	b.n	41100 <nrf_recvfrom+0x1a4>
   41132:	f1b8 0f00 	cmp.w	r8, #0
   41136:	d1e0      	bne.n	410fa <nrf_recvfrom+0x19e>
   41138:	e7f7      	b.n	4112a <nrf_recvfrom+0x1ce>

0004113a <nrf_getsockopt>:
   4113a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   4113e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   41140:	4681      	mov	r9, r0
   41142:	4688      	mov	r8, r1
   41144:	4614      	mov	r4, r2
   41146:	461f      	mov	r7, r3
   41148:	f7f3 fb36 	bl	347b8 <sock_find>
   4114c:	4606      	mov	r6, r0
   4114e:	b928      	cbnz	r0, 4115c <nrf_getsockopt+0x22>
   41150:	2009      	movs	r0, #9
   41152:	f7e4 fea9 	bl	25ea8 <nrf_modem_os_errno_set>
   41156:	f04f 34ff 	mov.w	r4, #4294967295
   4115a:	e05a      	b.n	41212 <nrf_getsockopt+0xd8>
   4115c:	b107      	cbz	r7, 41160 <nrf_getsockopt+0x26>
   4115e:	b90d      	cbnz	r5, 41164 <nrf_getsockopt+0x2a>
   41160:	200e      	movs	r0, #14
   41162:	e7f6      	b.n	41152 <nrf_getsockopt+0x18>
   41164:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   41168:	d134      	bne.n	411d4 <nrf_getsockopt+0x9a>
   4116a:	1e63      	subs	r3, r4, #1
   4116c:	2b04      	cmp	r3, #4
   4116e:	d831      	bhi.n	411d4 <nrf_getsockopt+0x9a>
   41170:	e8df f003 	tbb	[pc, r3]
   41174:	0f0a1403 	.word	0x0f0a1403
   41178:	22          	.byte	0x22
   41179:	00          	.byte	0x00
   4117a:	2304      	movs	r3, #4
   4117c:	602b      	str	r3, [r5, #0]
   4117e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   41182:	603b      	str	r3, [r7, #0]
   41184:	2400      	movs	r4, #0
   41186:	e044      	b.n	41212 <nrf_getsockopt+0xd8>
   41188:	2304      	movs	r3, #4
   4118a:	602b      	str	r3, [r5, #0]
   4118c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   41190:	e7f7      	b.n	41182 <nrf_getsockopt+0x48>
   41192:	2304      	movs	r3, #4
   41194:	602b      	str	r3, [r5, #0]
   41196:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   4119a:	e7f2      	b.n	41182 <nrf_getsockopt+0x48>
   4119c:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   411a0:	682b      	ldr	r3, [r5, #0]
   411a2:	0092      	lsls	r2, r2, #2
   411a4:	429a      	cmp	r2, r3
   411a6:	bf28      	it	cs
   411a8:	461a      	movcs	r2, r3
   411aa:	f100 0140 	add.w	r1, r0, #64	; 0x40
   411ae:	602a      	str	r2, [r5, #0]
   411b0:	4638      	mov	r0, r7
   411b2:	f000 fcb5 	bl	41b20 <memcpy>
   411b6:	e7e5      	b.n	41184 <nrf_getsockopt+0x4a>
   411b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   411ba:	f7dc f842 	bl	1d242 <strlen>
   411be:	682a      	ldr	r2, [r5, #0]
   411c0:	3001      	adds	r0, #1
   411c2:	4290      	cmp	r0, r2
   411c4:	d203      	bcs.n	411ce <nrf_getsockopt+0x94>
   411c6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   411c8:	f7dc f83b 	bl	1d242 <strlen>
   411cc:	1c42      	adds	r2, r0, #1
   411ce:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   411d0:	602a      	str	r2, [r5, #0]
   411d2:	e7ed      	b.n	411b0 <nrf_getsockopt+0x76>
   411d4:	2c14      	cmp	r4, #20
   411d6:	d020      	beq.n	4121a <nrf_getsockopt+0xe0>
   411d8:	dc0b      	bgt.n	411f2 <nrf_getsockopt+0xb8>
   411da:	2c04      	cmp	r4, #4
   411dc:	d014      	beq.n	41208 <nrf_getsockopt+0xce>
   411de:	1fa3      	subs	r3, r4, #6
   411e0:	2b02      	cmp	r3, #2
   411e2:	d80c      	bhi.n	411fe <nrf_getsockopt+0xc4>
   411e4:	6828      	ldr	r0, [r5, #0]
   411e6:	f7ff fa91 	bl	4070c <rpc_client_request_alloc>
   411ea:	4606      	mov	r6, r0
   411ec:	bb28      	cbnz	r0, 4123a <nrf_getsockopt+0x100>
   411ee:	2069      	movs	r0, #105	; 0x69
   411f0:	e7af      	b.n	41152 <nrf_getsockopt+0x18>
   411f2:	2c15      	cmp	r4, #21
   411f4:	d019      	beq.n	4122a <nrf_getsockopt+0xf0>
   411f6:	2c20      	cmp	r4, #32
   411f8:	dc03      	bgt.n	41202 <nrf_getsockopt+0xc8>
   411fa:	2c1d      	cmp	r4, #29
   411fc:	dcf2      	bgt.n	411e4 <nrf_getsockopt+0xaa>
   411fe:	206d      	movs	r0, #109	; 0x6d
   41200:	e7a7      	b.n	41152 <nrf_getsockopt+0x18>
   41202:	2c37      	cmp	r4, #55	; 0x37
   41204:	d0ee      	beq.n	411e4 <nrf_getsockopt+0xaa>
   41206:	e7fa      	b.n	411fe <nrf_getsockopt+0xc4>
   41208:	602c      	str	r4, [r5, #0]
   4120a:	2400      	movs	r4, #0
   4120c:	69b3      	ldr	r3, [r6, #24]
   4120e:	61b4      	str	r4, [r6, #24]
   41210:	603b      	str	r3, [r7, #0]
   41212:	4620      	mov	r0, r4
   41214:	b003      	add	sp, #12
   41216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4121a:	682a      	ldr	r2, [r5, #0]
   4121c:	f106 0120 	add.w	r1, r6, #32
   41220:	2a08      	cmp	r2, #8
   41222:	bf28      	it	cs
   41224:	2208      	movcs	r2, #8
   41226:	602a      	str	r2, [r5, #0]
   41228:	e7c2      	b.n	411b0 <nrf_getsockopt+0x76>
   4122a:	682a      	ldr	r2, [r5, #0]
   4122c:	f106 0128 	add.w	r1, r6, #40	; 0x28
   41230:	2a08      	cmp	r2, #8
   41232:	bf28      	it	cs
   41234:	2208      	movcs	r2, #8
   41236:	602a      	str	r2, [r5, #0]
   41238:	e7ba      	b.n	411b0 <nrf_getsockopt+0x76>
   4123a:	2300      	movs	r3, #0
   4123c:	2208      	movs	r2, #8
   4123e:	7243      	strb	r3, [r0, #9]
   41240:	7202      	strb	r2, [r0, #8]
   41242:	7283      	strb	r3, [r0, #10]
   41244:	72c3      	strb	r3, [r0, #11]
   41246:	f8c0 9010 	str.w	r9, [r0, #16]
   4124a:	4640      	mov	r0, r8
   4124c:	f000 f977 	bl	4153e <nrf_sol_to_rpc_sol>
   41250:	6170      	str	r0, [r6, #20]
   41252:	4620      	mov	r0, r4
   41254:	f7f4 f904 	bl	35460 <nrf_so_to_rpc_so>
   41258:	4631      	mov	r1, r6
   4125a:	61b0      	str	r0, [r6, #24]
   4125c:	aa01      	add	r2, sp, #4
   4125e:	f247 0004 	movw	r0, #28676	; 0x7004
   41262:	f8d6 9000 	ldr.w	r9, [r6]
   41266:	f7f4 f913 	bl	35490 <req_forward>
   4126a:	4604      	mov	r4, r0
   4126c:	2800      	cmp	r0, #0
   4126e:	f47f af70 	bne.w	41152 <nrf_getsockopt+0x18>
   41272:	f8dd 8004 	ldr.w	r8, [sp, #4]
   41276:	682b      	ldr	r3, [r5, #0]
   41278:	f8d8 1000 	ldr.w	r1, [r8]
   4127c:	b181      	cbz	r1, 412a0 <nrf_getsockopt+0x166>
   4127e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   41282:	4638      	mov	r0, r7
   41284:	429a      	cmp	r2, r3
   41286:	bf28      	it	cs
   41288:	461a      	movcs	r2, r3
   4128a:	602a      	str	r2, [r5, #0]
   4128c:	f000 fc48 	bl	41b20 <memcpy>
   41290:	f8d8 0000 	ldr.w	r0, [r8]
   41294:	f7ff fa4a 	bl	4072c <rpc_client_data_free>
   41298:	9801      	ldr	r0, [sp, #4]
   4129a:	f7ff fa44 	bl	40726 <rpc_client_message_free>
   4129e:	e7b8      	b.n	41212 <nrf_getsockopt+0xd8>
   412a0:	6872      	ldr	r2, [r6, #4]
   412a2:	4649      	mov	r1, r9
   412a4:	429a      	cmp	r2, r3
   412a6:	bf28      	it	cs
   412a8:	461a      	movcs	r2, r3
   412aa:	4638      	mov	r0, r7
   412ac:	602a      	str	r2, [r5, #0]
   412ae:	f000 fc37 	bl	41b20 <memcpy>
   412b2:	4648      	mov	r0, r9
   412b4:	f7ff fa13 	bl	406de <rpc_transport_local_data_free>
   412b8:	e7ee      	b.n	41298 <nrf_getsockopt+0x15e>

000412ba <tls_setopt_role>:
   412ba:	b508      	push	{r3, lr}
   412bc:	4603      	mov	r3, r0
   412be:	b109      	cbz	r1, 412c4 <tls_setopt_role+0xa>
   412c0:	2a04      	cmp	r2, #4
   412c2:	d005      	beq.n	412d0 <tls_setopt_role+0x16>
   412c4:	2016      	movs	r0, #22
   412c6:	f7e4 fdef 	bl	25ea8 <nrf_modem_os_errno_set>
   412ca:	f04f 30ff 	mov.w	r0, #4294967295
   412ce:	e00a      	b.n	412e6 <tls_setopt_role+0x2c>
   412d0:	7808      	ldrb	r0, [r1, #0]
   412d2:	b128      	cbz	r0, 412e0 <tls_setopt_role+0x26>
   412d4:	2801      	cmp	r0, #1
   412d6:	d1f5      	bne.n	412c4 <tls_setopt_role+0xa>
   412d8:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
   412dc:	2000      	movs	r0, #0
   412de:	e002      	b.n	412e6 <tls_setopt_role+0x2c>
   412e0:	2202      	movs	r2, #2
   412e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   412e6:	bd08      	pop	{r3, pc}

000412e8 <tls_setopt_taglist>:
   412e8:	b510      	push	{r4, lr}
   412ea:	f012 0403 	ands.w	r4, r2, #3
   412ee:	d100      	bne.n	412f2 <tls_setopt_taglist+0xa>
   412f0:	b92a      	cbnz	r2, 412fe <tls_setopt_taglist+0x16>
   412f2:	2016      	movs	r0, #22
   412f4:	f7e4 fdd8 	bl	25ea8 <nrf_modem_os_errno_set>
   412f8:	f04f 30ff 	mov.w	r0, #4294967295
   412fc:	bd10      	pop	{r4, pc}
   412fe:	0893      	lsrs	r3, r2, #2
   41300:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
   41304:	3040      	adds	r0, #64	; 0x40
   41306:	f000 fc0b 	bl	41b20 <memcpy>
   4130a:	4620      	mov	r0, r4
   4130c:	e7f6      	b.n	412fc <tls_setopt_taglist+0x14>

0004130e <tls_setopt_sess_cache>:
   4130e:	b508      	push	{r3, lr}
   41310:	b109      	cbz	r1, 41316 <tls_setopt_sess_cache+0x8>
   41312:	2a04      	cmp	r2, #4
   41314:	d005      	beq.n	41322 <tls_setopt_sess_cache+0x14>
   41316:	2016      	movs	r0, #22
   41318:	f7e4 fdc6 	bl	25ea8 <nrf_modem_os_errno_set>
   4131c:	f04f 30ff 	mov.w	r0, #4294967295
   41320:	bd08      	pop	{r3, pc}
   41322:	780b      	ldrb	r3, [r1, #0]
   41324:	3b00      	subs	r3, #0
   41326:	bf18      	it	ne
   41328:	2301      	movne	r3, #1
   4132a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   4132e:	2000      	movs	r0, #0
   41330:	e7f6      	b.n	41320 <tls_setopt_sess_cache+0x12>

00041332 <tls_setopt_peer_verify>:
   41332:	b508      	push	{r3, lr}
   41334:	b109      	cbz	r1, 4133a <tls_setopt_peer_verify+0x8>
   41336:	2a04      	cmp	r2, #4
   41338:	d005      	beq.n	41346 <tls_setopt_peer_verify+0x14>
   4133a:	2016      	movs	r0, #22
   4133c:	f7e4 fdb4 	bl	25ea8 <nrf_modem_os_errno_set>
   41340:	f04f 30ff 	mov.w	r0, #4294967295
   41344:	bd08      	pop	{r3, pc}
   41346:	680b      	ldr	r3, [r1, #0]
   41348:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   4134c:	2000      	movs	r0, #0
   4134e:	e7f9      	b.n	41344 <tls_setopt_peer_verify+0x12>

00041350 <tls_setopt_hostname>:
   41350:	b570      	push	{r4, r5, r6, lr}
   41352:	4605      	mov	r5, r0
   41354:	4614      	mov	r4, r2
   41356:	460e      	mov	r6, r1
   41358:	b931      	cbnz	r1, 41368 <tls_setopt_hostname+0x18>
   4135a:	b13a      	cbz	r2, 4136c <tls_setopt_hostname+0x1c>
   4135c:	2016      	movs	r0, #22
   4135e:	f7e4 fda3 	bl	25ea8 <nrf_modem_os_errno_set>
   41362:	f04f 30ff 	mov.w	r0, #4294967295
   41366:	bd70      	pop	{r4, r5, r6, pc}
   41368:	2a00      	cmp	r2, #0
   4136a:	d0f7      	beq.n	4135c <tls_setopt_hostname+0xc>
   4136c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   4136e:	b108      	cbz	r0, 41374 <tls_setopt_hostname+0x24>
   41370:	f7e4 fe7e 	bl	26070 <nrf_modem_os_free>
   41374:	b174      	cbz	r4, 41394 <tls_setopt_hostname+0x44>
   41376:	1c60      	adds	r0, r4, #1
   41378:	f7e4 fe72 	bl	26060 <nrf_modem_os_alloc>
   4137c:	63a8      	str	r0, [r5, #56]	; 0x38
   4137e:	b908      	cbnz	r0, 41384 <tls_setopt_hostname+0x34>
   41380:	2069      	movs	r0, #105	; 0x69
   41382:	e7ec      	b.n	4135e <tls_setopt_hostname+0xe>
   41384:	4622      	mov	r2, r4
   41386:	4631      	mov	r1, r6
   41388:	f000 fbca 	bl	41b20 <memcpy>
   4138c:	2000      	movs	r0, #0
   4138e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   41390:	5518      	strb	r0, [r3, r4]
   41392:	e7e8      	b.n	41366 <tls_setopt_hostname+0x16>
   41394:	4620      	mov	r0, r4
   41396:	e7e6      	b.n	41366 <tls_setopt_hostname+0x16>

00041398 <nrf_poll>:
   41398:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   4139c:	4688      	mov	r8, r1
   4139e:	4607      	mov	r7, r0
   413a0:	9201      	str	r2, [sp, #4]
   413a2:	b930      	cbnz	r0, 413b2 <nrf_poll+0x1a>
   413a4:	b149      	cbz	r1, 413ba <nrf_poll+0x22>
   413a6:	200e      	movs	r0, #14
   413a8:	f7e4 fd7e 	bl	25ea8 <nrf_modem_os_errno_set>
   413ac:	f04f 35ff 	mov.w	r5, #4294967295
   413b0:	e014      	b.n	413dc <nrf_poll+0x44>
   413b2:	2908      	cmp	r1, #8
   413b4:	d901      	bls.n	413ba <nrf_poll+0x22>
   413b6:	2016      	movs	r0, #22
   413b8:	e7f6      	b.n	413a8 <nrf_poll+0x10>
   413ba:	f04f 0900 	mov.w	r9, #0
   413be:	f04f 0a00 	mov.w	sl, #0
   413c2:	463c      	mov	r4, r7
   413c4:	4655      	mov	r5, sl
   413c6:	45c2      	cmp	sl, r8
   413c8:	d10c      	bne.n	413e4 <nrf_poll+0x4c>
   413ca:	b93d      	cbnz	r5, 413dc <nrf_poll+0x44>
   413cc:	4628      	mov	r0, r5
   413ce:	a901      	add	r1, sp, #4
   413d0:	f7e4 fca8 	bl	25d24 <nrf_modem_os_timedwait>
   413d4:	2800      	cmp	r0, #0
   413d6:	d0f2      	beq.n	413be <nrf_poll+0x26>
   413d8:	306e      	adds	r0, #110	; 0x6e
   413da:	d06f      	beq.n	414bc <nrf_poll+0x124>
   413dc:	4628      	mov	r0, r5
   413de:	b002      	add	sp, #8
   413e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   413e4:	6820      	ldr	r0, [r4, #0]
   413e6:	f8a4 9006 	strh.w	r9, [r4, #6]
   413ea:	2800      	cmp	r0, #0
   413ec:	db4e      	blt.n	4148c <nrf_poll+0xf4>
   413ee:	f7f3 f9e3 	bl	347b8 <sock_find>
   413f2:	4606      	mov	r6, r0
   413f4:	b928      	cbnz	r0, 41402 <nrf_poll+0x6a>
   413f6:	88e3      	ldrh	r3, [r4, #6]
   413f8:	f043 0320 	orr.w	r3, r3, #32
   413fc:	80e3      	strh	r3, [r4, #6]
   413fe:	3501      	adds	r5, #1
   41400:	e044      	b.n	4148c <nrf_poll+0xf4>
   41402:	f7ff faf9 	bl	409f8 <sock_is_local_closed>
   41406:	2800      	cmp	r0, #0
   41408:	d1f5      	bne.n	413f6 <nrf_poll+0x5e>
   4140a:	4630      	mov	r0, r6
   4140c:	f7ff fafc 	bl	40a08 <sock_has_error>
   41410:	b348      	cbz	r0, 41466 <nrf_poll+0xce>
   41412:	88e3      	ldrh	r3, [r4, #6]
   41414:	f043 0308 	orr.w	r3, r3, #8
   41418:	80e3      	strh	r3, [r4, #6]
   4141a:	88a3      	ldrh	r3, [r4, #4]
   4141c:	07da      	lsls	r2, r3, #31
   4141e:	d517      	bpl.n	41450 <nrf_poll+0xb8>
   41420:	4630      	mov	r0, r6
   41422:	f7ff fb08 	bl	40a36 <sock_can_read>
   41426:	b338      	cbz	r0, 41478 <nrf_poll+0xe0>
   41428:	88e3      	ldrh	r3, [r4, #6]
   4142a:	f043 0301 	orr.w	r3, r3, #1
   4142e:	80e3      	strh	r3, [r4, #6]
   41430:	4630      	mov	r0, r6
   41432:	f7ff fab6 	bl	409a2 <sock_is_stream>
   41436:	b158      	cbz	r0, 41450 <nrf_poll+0xb8>
   41438:	4630      	mov	r0, r6
   4143a:	f7ff fae1 	bl	40a00 <sock_is_closed>
   4143e:	b138      	cbz	r0, 41450 <nrf_poll+0xb8>
   41440:	4630      	mov	r0, r6
   41442:	f7ff fae1 	bl	40a08 <sock_has_error>
   41446:	b918      	cbnz	r0, 41450 <nrf_poll+0xb8>
   41448:	88e3      	ldrh	r3, [r4, #6]
   4144a:	f043 0301 	orr.w	r3, r3, #1
   4144e:	80e3      	strh	r3, [r4, #6]
   41450:	88a3      	ldrh	r3, [r4, #4]
   41452:	075b      	lsls	r3, r3, #29
   41454:	d516      	bpl.n	41484 <nrf_poll+0xec>
   41456:	4630      	mov	r0, r6
   41458:	f7ff faf6 	bl	40a48 <sock_can_send>
   4145c:	b190      	cbz	r0, 41484 <nrf_poll+0xec>
   4145e:	88e3      	ldrh	r3, [r4, #6]
   41460:	f043 0304 	orr.w	r3, r3, #4
   41464:	e7ca      	b.n	413fc <nrf_poll+0x64>
   41466:	4630      	mov	r0, r6
   41468:	f7ff faca 	bl	40a00 <sock_is_closed>
   4146c:	2800      	cmp	r0, #0
   4146e:	d0d4      	beq.n	4141a <nrf_poll+0x82>
   41470:	88e3      	ldrh	r3, [r4, #6]
   41472:	f043 0310 	orr.w	r3, r3, #16
   41476:	e7cf      	b.n	41418 <nrf_poll+0x80>
   41478:	4630      	mov	r0, r6
   4147a:	f7ff fae1 	bl	40a40 <sock_can_accept>
   4147e:	2800      	cmp	r0, #0
   41480:	d1d2      	bne.n	41428 <nrf_poll+0x90>
   41482:	e7d5      	b.n	41430 <nrf_poll+0x98>
   41484:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   41488:	2b00      	cmp	r3, #0
   4148a:	d1b8      	bne.n	413fe <nrf_poll+0x66>
   4148c:	f10a 0a01 	add.w	sl, sl, #1
   41490:	3408      	adds	r4, #8
   41492:	e798      	b.n	413c6 <nrf_poll+0x2e>
   41494:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
   41498:	2800      	cmp	r0, #0
   4149a:	db08      	blt.n	414ae <nrf_poll+0x116>
   4149c:	88fb      	ldrh	r3, [r7, #6]
   4149e:	3501      	adds	r5, #1
   414a0:	f043 0308 	orr.w	r3, r3, #8
   414a4:	80fb      	strh	r3, [r7, #6]
   414a6:	f7f3 f987 	bl	347b8 <sock_find>
   414aa:	b100      	cbz	r0, 414ae <nrf_poll+0x116>
   414ac:	6186      	str	r6, [r0, #24]
   414ae:	3401      	adds	r4, #1
   414b0:	4544      	cmp	r4, r8
   414b2:	d1ef      	bne.n	41494 <nrf_poll+0xfc>
   414b4:	2d00      	cmp	r5, #0
   414b6:	d191      	bne.n	413dc <nrf_poll+0x44>
   414b8:	2004      	movs	r0, #4
   414ba:	e775      	b.n	413a8 <nrf_poll+0x10>
   414bc:	462c      	mov	r4, r5
   414be:	266e      	movs	r6, #110	; 0x6e
   414c0:	e7f6      	b.n	414b0 <nrf_poll+0x118>

000414c2 <nrf_fcntl>:
   414c2:	b538      	push	{r3, r4, r5, lr}
   414c4:	460d      	mov	r5, r1
   414c6:	4614      	mov	r4, r2
   414c8:	f7f3 f976 	bl	347b8 <sock_find>
   414cc:	4603      	mov	r3, r0
   414ce:	b928      	cbnz	r0, 414dc <nrf_fcntl+0x1a>
   414d0:	2009      	movs	r0, #9
   414d2:	f7e4 fce9 	bl	25ea8 <nrf_modem_os_errno_set>
   414d6:	f04f 30ff 	mov.w	r0, #4294967295
   414da:	e006      	b.n	414ea <nrf_fcntl+0x28>
   414dc:	2d03      	cmp	r5, #3
   414de:	d003      	beq.n	414e8 <nrf_fcntl+0x26>
   414e0:	2d04      	cmp	r5, #4
   414e2:	d003      	beq.n	414ec <nrf_fcntl+0x2a>
   414e4:	2016      	movs	r0, #22
   414e6:	e7f4      	b.n	414d2 <nrf_fcntl+0x10>
   414e8:	6b40      	ldr	r0, [r0, #52]	; 0x34
   414ea:	bd38      	pop	{r3, r4, r5, pc}
   414ec:	f034 0001 	bics.w	r0, r4, #1
   414f0:	d1f8      	bne.n	414e4 <nrf_fcntl+0x22>
   414f2:	635c      	str	r4, [r3, #52]	; 0x34
   414f4:	e7f9      	b.n	414ea <nrf_fcntl+0x28>

000414f6 <nrf_af_to_rpc_af>:
   414f6:	4770      	bx	lr

000414f8 <rpc_af_to_nrf_af>:
   414f8:	f7ff bffd 	b.w	414f6 <nrf_af_to_rpc_af>

000414fc <nrf_type_to_rpc_type>:
   414fc:	4770      	bx	lr

000414fe <nrf_proto_to_rpc_proto>:
   414fe:	2829      	cmp	r0, #41	; 0x29
   41500:	d015      	beq.n	4152e <nrf_proto_to_rpc_proto+0x30>
   41502:	dc05      	bgt.n	41510 <nrf_proto_to_rpc_proto+0x12>
   41504:	2806      	cmp	r0, #6
   41506:	d014      	beq.n	41532 <nrf_proto_to_rpc_proto+0x34>
   41508:	2811      	cmp	r0, #17
   4150a:	d014      	beq.n	41536 <nrf_proto_to_rpc_proto+0x38>
   4150c:	b148      	cbz	r0, 41522 <nrf_proto_to_rpc_proto+0x24>
   4150e:	4770      	bx	lr
   41510:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   41514:	d00d      	beq.n	41532 <nrf_proto_to_rpc_proto+0x34>
   41516:	f240 1311 	movw	r3, #273	; 0x111
   4151a:	4298      	cmp	r0, r3
   4151c:	d00b      	beq.n	41536 <nrf_proto_to_rpc_proto+0x38>
   4151e:	28ff      	cmp	r0, #255	; 0xff
   41520:	d10c      	bne.n	4153c <nrf_proto_to_rpc_proto+0x3e>
   41522:	2901      	cmp	r1, #1
   41524:	d009      	beq.n	4153a <nrf_proto_to_rpc_proto+0x3c>
   41526:	2902      	cmp	r1, #2
   41528:	bf08      	it	eq
   4152a:	2002      	moveq	r0, #2
   4152c:	4770      	bx	lr
   4152e:	2006      	movs	r0, #6
   41530:	4770      	bx	lr
   41532:	2001      	movs	r0, #1
   41534:	4770      	bx	lr
   41536:	2002      	movs	r0, #2
   41538:	4770      	bx	lr
   4153a:	4608      	mov	r0, r1
   4153c:	4770      	bx	lr

0004153e <nrf_sol_to_rpc_sol>:
   4153e:	2829      	cmp	r0, #41	; 0x29
   41540:	d013      	beq.n	4156a <nrf_sol_to_rpc_sol+0x2c>
   41542:	dc09      	bgt.n	41558 <nrf_sol_to_rpc_sol+0x1a>
   41544:	2801      	cmp	r0, #1
   41546:	d012      	beq.n	4156e <nrf_sol_to_rpc_sol+0x30>
   41548:	2806      	cmp	r0, #6
   4154a:	d012      	beq.n	41572 <nrf_sol_to_rpc_sol+0x34>
   4154c:	2800      	cmp	r0, #0
   4154e:	bf14      	ite	ne
   41550:	f04f 30ff 	movne.w	r0, #4294967295
   41554:	2004      	moveq	r0, #4
   41556:	4770      	bx	lr
   41558:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   4155c:	d00b      	beq.n	41576 <nrf_sol_to_rpc_sol+0x38>
   4155e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   41562:	bf18      	it	ne
   41564:	f04f 30ff 	movne.w	r0, #4294967295
   41568:	4770      	bx	lr
   4156a:	2006      	movs	r0, #6
   4156c:	4770      	bx	lr
   4156e:	2008      	movs	r0, #8
   41570:	4770      	bx	lr
   41572:	2001      	movs	r0, #1
   41574:	4770      	bx	lr
   41576:	f44f 7080 	mov.w	r0, #256	; 0x100
   4157a:	4770      	bx	lr

0004157c <rpc_error_to_nrf_gai_errno>:
   4157c:	b508      	push	{r3, lr}
   4157e:	1f03      	subs	r3, r0, #4
   41580:	2b09      	cmp	r3, #9
   41582:	d80f      	bhi.n	415a4 <rpc_error_to_nrf_gai_errno+0x28>
   41584:	e8df f003 	tbb	[pc, r3]
   41588:	0e110508 	.word	0x0e110508
   4158c:	0e0e0e0e 	.word	0x0e0e0e0e
   41590:	110e      	.short	0x110e
   41592:	f44f 708a 	mov.w	r0, #276	; 0x114
   41596:	bd08      	pop	{r3, pc}
   41598:	2073      	movs	r0, #115	; 0x73
   4159a:	f7e4 fc85 	bl	25ea8 <nrf_modem_os_errno_set>
   4159e:	f240 1015 	movw	r0, #277	; 0x115
   415a2:	e7f8      	b.n	41596 <rpc_error_to_nrf_gai_errno+0x1a>
   415a4:	f7f3 ff68 	bl	35478 <rpc_error_to_nrf_errno>
   415a8:	e7f7      	b.n	4159a <rpc_error_to_nrf_gai_errno+0x1e>
   415aa:	f240 1011 	movw	r0, #273	; 0x111
   415ae:	e7f2      	b.n	41596 <rpc_error_to_nrf_gai_errno+0x1a>

000415b0 <res_forward>:
   415b0:	4603      	mov	r3, r0
   415b2:	68c0      	ldr	r0, [r0, #12]
   415b4:	b108      	cbz	r0, 415ba <res_forward+0xa>
   415b6:	6003      	str	r3, [r0, #0]
   415b8:	2001      	movs	r0, #1
   415ba:	4770      	bx	lr

000415bc <nrf_modem_gnss_agps_write>:
   415bc:	b530      	push	{r4, r5, lr}
   415be:	4615      	mov	r5, r2
   415c0:	4604      	mov	r4, r0
   415c2:	b09f      	sub	sp, #124	; 0x7c
   415c4:	2800      	cmp	r0, #0
   415c6:	d03e      	beq.n	41646 <nrf_modem_gnss_agps_write+0x8a>
   415c8:	2900      	cmp	r1, #0
   415ca:	d03c      	beq.n	41646 <nrf_modem_gnss_agps_write+0x8a>
   415cc:	2272      	movs	r2, #114	; 0x72
   415ce:	2100      	movs	r1, #0
   415d0:	a801      	add	r0, sp, #4
   415d2:	f000 fac5 	bl	41b60 <memset>
   415d6:	1e6a      	subs	r2, r5, #1
   415d8:	2a07      	cmp	r2, #7
   415da:	d834      	bhi.n	41646 <nrf_modem_gnss_agps_write+0x8a>
   415dc:	e8df f002 	tbb	[pc, r2]
   415e0:	1a151004 	.word	0x1a151004
   415e4:	2e29241f 	.word	0x2e29241f
   415e8:	4620      	mov	r0, r4
   415ea:	a902      	add	r1, sp, #8
   415ec:	f7ff f8a0 	bl	40730 <rpc_gnss_serialize_utc>
   415f0:	2272      	movs	r2, #114	; 0x72
   415f2:	f241 0005 	movw	r0, #4101	; 0x1005
   415f6:	a901      	add	r1, sp, #4
   415f8:	f7f4 fa9c 	bl	35b34 <send_message>
   415fc:	b01f      	add	sp, #124	; 0x7c
   415fe:	bd30      	pop	{r4, r5, pc}
   41600:	4620      	mov	r0, r4
   41602:	a902      	add	r1, sp, #8
   41604:	f7ff f8b1 	bl	4076a <rpc_gnss_serialize_ephe>
   41608:	e7f2      	b.n	415f0 <nrf_modem_gnss_agps_write+0x34>
   4160a:	4620      	mov	r0, r4
   4160c:	a902      	add	r1, sp, #8
   4160e:	f7ff f8f6 	bl	407fe <rpc_gnss_serialize_alm>
   41612:	e7ed      	b.n	415f0 <nrf_modem_gnss_agps_write+0x34>
   41614:	4620      	mov	r0, r4
   41616:	a902      	add	r1, sp, #8
   41618:	f7ff f91e 	bl	40858 <rpc_gnss_serialize_klob>
   4161c:	e7e8      	b.n	415f0 <nrf_modem_gnss_agps_write+0x34>
   4161e:	4620      	mov	r0, r4
   41620:	a902      	add	r1, sp, #8
   41622:	f7ff f934 	bl	4088e <rpc_gnss_serialize_nequick>
   41626:	e7e3      	b.n	415f0 <nrf_modem_gnss_agps_write+0x34>
   41628:	4620      	mov	r0, r4
   4162a:	a902      	add	r1, sp, #8
   4162c:	f7ff f944 	bl	408b8 <rpc_gnss_serialize_time_and_sv_tow>
   41630:	e7de      	b.n	415f0 <nrf_modem_gnss_agps_write+0x34>
   41632:	4620      	mov	r0, r4
   41634:	a902      	add	r1, sp, #8
   41636:	f7ff f962 	bl	408fe <rpc_gnss_serialize_location>
   4163a:	e7d9      	b.n	415f0 <nrf_modem_gnss_agps_write+0x34>
   4163c:	4620      	mov	r0, r4
   4163e:	a902      	add	r1, sp, #8
   41640:	f7ff f97a 	bl	40938 <rpc_gnss_serialize_integrity>
   41644:	e7d4      	b.n	415f0 <nrf_modem_gnss_agps_write+0x34>
   41646:	f06f 0015 	mvn.w	r0, #21
   4164a:	e7d7      	b.n	415fc <nrf_modem_gnss_agps_write+0x40>

0004164c <nrf_modem_is_initialized>:
   4164c:	f7f4 bf1a 	b.w	36484 <nrf_modem_state_is_initialized>

00041650 <z_device_state_init>:
}
   41650:	4770      	bx	lr

00041652 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   41652:	b138      	cbz	r0, 41664 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   41654:	68c3      	ldr	r3, [r0, #12]
   41656:	8818      	ldrh	r0, [r3, #0]
   41658:	f3c0 0008 	ubfx	r0, r0, #0, #9
   4165c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   41660:	4258      	negs	r0, r3
   41662:	4158      	adcs	r0, r3
}
   41664:	4770      	bx	lr

00041666 <z_early_memset>:
   41666:	f000 ba7b 	b.w	41b60 <memset>

0004166a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4166a:	f000 ba59 	b.w	41b20 <memcpy>

0004166e <k_heap_init>:
{
   4166e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   41670:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   41674:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   41678:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   4167c:	f7e0 b8fa 	b.w	21874 <sys_heap_init>

00041680 <k_heap_alloc>:
{
   41680:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   41682:	e9cd 2300 	strd	r2, r3, [sp]
   41686:	460a      	mov	r2, r1
   41688:	2104      	movs	r1, #4
   4168a:	f7f5 f89f 	bl	367cc <k_heap_aligned_alloc>
}
   4168e:	b003      	add	sp, #12
   41690:	f85d fb04 	ldr.w	pc, [sp], #4

00041694 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41694:	f3ef 8005 	mrs	r0, IPSR
}
   41698:	3800      	subs	r0, #0
   4169a:	bf18      	it	ne
   4169c:	2001      	movne	r0, #1
   4169e:	4770      	bx	lr

000416a0 <z_impl_k_thread_name_set>:
}
   416a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   416a4:	4770      	bx	lr

000416a6 <k_thread_name_get>:
}
   416a6:	2000      	movs	r0, #0
   416a8:	4770      	bx	lr

000416aa <z_impl_k_thread_start>:
	z_sched_start(thread);
   416aa:	f7f6 be97 	b.w	383dc <z_sched_start>

000416ae <z_pm_save_idle_exit>:
{
   416ae:	b508      	push	{r3, lr}
	pm_system_resume();
   416b0:	f7e1 fb44 	bl	22d3c <pm_system_resume>
}
   416b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   416b8:	f7fd bdee 	b.w	3f298 <sys_clock_idle_exit>

000416bc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   416bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   416c0:	428b      	cmp	r3, r1
   416c2:	d001      	beq.n	416c8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   416c4:	f7f7 b822 	b.w	3870c <z_set_prio>
}
   416c8:	2000      	movs	r0, #0
   416ca:	4770      	bx	lr

000416cc <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   416cc:	2300      	movs	r3, #0
   416ce:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   416d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   416d6:	4618      	mov	r0, r3
   416d8:	4770      	bx	lr

000416da <z_queue_node_peek>:
{
   416da:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   416dc:	4604      	mov	r4, r0
   416de:	b130      	cbz	r0, 416ee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   416e0:	6802      	ldr	r2, [r0, #0]
   416e2:	0793      	lsls	r3, r2, #30
   416e4:	d003      	beq.n	416ee <z_queue_node_peek+0x14>
		ret = anode->data;
   416e6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   416e8:	b109      	cbz	r1, 416ee <z_queue_node_peek+0x14>
			k_free(anode);
   416ea:	f000 f988 	bl	419fe <k_free>
}
   416ee:	4620      	mov	r0, r4
   416f0:	bd10      	pop	{r4, pc}

000416f2 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   416f2:	2301      	movs	r3, #1
{
   416f4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   416f6:	9300      	str	r3, [sp, #0]
   416f8:	2300      	movs	r3, #0
{
   416fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   416fc:	4619      	mov	r1, r3
   416fe:	f7f5 fd61 	bl	371c4 <queue_insert>
}
   41702:	b003      	add	sp, #12
   41704:	f85d fb04 	ldr.w	pc, [sp], #4

00041708 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   41708:	b15a      	cbz	r2, 41722 <z_impl_k_sem_init+0x1a>
   4170a:	428a      	cmp	r2, r1
   4170c:	d309      	bcc.n	41722 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   4170e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   41712:	e9c0 1202 	strd	r1, r2, [r0, #8]
   41716:	e9c0 0000 	strd	r0, r0, [r0]
   4171a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   4171e:	2000      	movs	r0, #0
   41720:	4770      	bx	lr
		return -EINVAL;
   41722:	f06f 0015 	mvn.w	r0, #21
}
   41726:	4770      	bx	lr

00041728 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   41728:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   4172a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   4172c:	408b      	lsls	r3, r1
   4172e:	ea22 0303 	bic.w	r3, r2, r3
   41732:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   41734:	fa22 f001 	lsr.w	r0, r2, r1
}
   41738:	f000 0001 	and.w	r0, r0, #1
   4173c:	4770      	bx	lr

0004173e <unschedule_locked>:
{
   4173e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   41740:	2103      	movs	r1, #3
{
   41742:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   41744:	300c      	adds	r0, #12
   41746:	f7ff ffef 	bl	41728 <flag_test_and_clear>
   4174a:	4604      	mov	r4, r0
   4174c:	b118      	cbz	r0, 41756 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   4174e:	f105 0010 	add.w	r0, r5, #16
   41752:	f7f7 fcc5 	bl	390e0 <z_abort_timeout>
}
   41756:	4620      	mov	r0, r4
   41758:	bd38      	pop	{r3, r4, r5, pc}

0004175a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   4175a:	b120      	cbz	r0, 41766 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   4175c:	2200      	movs	r2, #0
   4175e:	30d8      	adds	r0, #216	; 0xd8
   41760:	4611      	mov	r1, r2
   41762:	f7f7 bb2b 	b.w	38dbc <z_sched_wake>
}
   41766:	4770      	bx	lr

00041768 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   41768:	68c3      	ldr	r3, [r0, #12]
{
   4176a:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   4176c:	f3c3 0540 	ubfx	r5, r3, #1, #1
   41770:	079b      	lsls	r3, r3, #30
{
   41772:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41774:	d416      	bmi.n	417a4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   41776:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   41778:	2102      	movs	r1, #2
   4177a:	300c      	adds	r0, #12
   4177c:	f7ff ffd4 	bl	41728 <flag_test_and_clear>
   41780:	b180      	cbz	r0, 417a4 <cancel_async_locked+0x3c>
	return list->head;
   41782:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   41786:	b16a      	cbz	r2, 417a4 <cancel_async_locked+0x3c>
   41788:	4294      	cmp	r4, r2
   4178a:	d11b      	bne.n	417c4 <cancel_async_locked+0x5c>
	return node->next;
   4178c:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   4178e:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
Z_GENLIST_REMOVE(slist, snode)
   41792:	b98d      	cbnz	r5, 417b8 <cancel_async_locked+0x50>
   41794:	428c      	cmp	r4, r1
	list->head = node;
   41796:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_REMOVE(slist, snode)
   4179a:	d101      	bne.n	417a0 <cancel_async_locked+0x38>
	list->tail = node;
   4179c:	f8c6 20d4 	str.w	r2, [r6, #212]	; 0xd4
	parent->next = child;
   417a0:	2300      	movs	r3, #0
   417a2:	6023      	str	r3, [r4, #0]
	return *flagp;
   417a4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   417a6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   417aa:	bf1e      	ittt	ne
   417ac:	f043 0302 	orrne.w	r3, r3, #2
   417b0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   417b2:	f003 000f 	andne.w	r0, r3, #15
}
   417b6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   417b8:	428c      	cmp	r4, r1
	parent->next = child;
   417ba:	602a      	str	r2, [r5, #0]
	list->tail = node;
   417bc:	bf08      	it	eq
   417be:	f8c6 50d4 	streq.w	r5, [r6, #212]	; 0xd4
}
   417c2:	e7ed      	b.n	417a0 <cancel_async_locked+0x38>
	return node->next;
   417c4:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   417c6:	6812      	ldr	r2, [r2, #0]
   417c8:	e7dd      	b.n	41786 <cancel_async_locked+0x1e>

000417ca <k_work_delayable_busy_get>:
   417ca:	f7f6 b871 	b.w	378b0 <k_work_busy_get>

000417ce <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   417ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   417d2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   417d6:	4283      	cmp	r3, r0
		return b2 - b1;
   417d8:	bf14      	ite	ne
   417da:	1ac0      	subne	r0, r0, r3
	return 0;
   417dc:	2000      	moveq	r0, #0
}
   417de:	4770      	bx	lr

000417e0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   417e0:	4603      	mov	r3, r0
   417e2:	b920      	cbnz	r0, 417ee <z_reschedule_irqlock+0xe>
   417e4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   417e8:	b90a      	cbnz	r2, 417ee <z_reschedule_irqlock+0xe>
   417ea:	f7e1 bccf 	b.w	2318c <arch_swap>
   417ee:	f383 8811 	msr	BASEPRI, r3
   417f2:	f3bf 8f6f 	isb	sy
}
   417f6:	4770      	bx	lr

000417f8 <z_reschedule_unlocked>:
	__asm__ volatile(
   417f8:	f04f 0320 	mov.w	r3, #32
   417fc:	f3ef 8011 	mrs	r0, BASEPRI
   41800:	f383 8812 	msr	BASEPRI_MAX, r3
   41804:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   41808:	f7ff bfea 	b.w	417e0 <z_reschedule_irqlock>

0004180c <z_priq_dumb_best>:
	return list->head == list;
   4180c:	6803      	ldr	r3, [r0, #0]
}
   4180e:	4298      	cmp	r0, r3
   41810:	bf14      	ite	ne
   41812:	4618      	movne	r0, r3
   41814:	2000      	moveq	r0, #0
   41816:	4770      	bx	lr

00041818 <z_unpend_all>:
{
   41818:	b538      	push	{r3, r4, r5, lr}
   4181a:	4605      	mov	r5, r0
	int need_sched = 0;
   4181c:	2000      	movs	r0, #0
   4181e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41820:	42a5      	cmp	r5, r4
   41822:	d000      	beq.n	41826 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   41824:	b904      	cbnz	r4, 41828 <z_unpend_all+0x10>
}
   41826:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   41828:	4620      	mov	r0, r4
   4182a:	f7f6 fc37 	bl	3809c <z_unpend_thread>
		z_ready_thread(thread);
   4182e:	4620      	mov	r0, r4
   41830:	f7f6 fd9e 	bl	38370 <z_ready_thread>
		need_sched = 1;
   41834:	2001      	movs	r0, #1
   41836:	e7f2      	b.n	4181e <z_unpend_all+0x6>

00041838 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   41838:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   4183a:	f7f7 fdd9 	bl	393f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   4183e:	bd08      	pop	{r3, pc}

00041840 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   41840:	f7f7 bdd6 	b.w	393f0 <sys_clock_tick_get>

00041844 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   41844:	b108      	cbz	r0, 4184a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   41846:	f7e0 b919 	b.w	21a7c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   4184a:	4770      	bx	lr

0004184c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4184c:	f1b1 3fff 	cmp.w	r1, #4294967295
   41850:	bf08      	it	eq
   41852:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   41856:	b538      	push	{r3, r4, r5, lr}
   41858:	4605      	mov	r5, r0
   4185a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4185c:	d020      	beq.n	418a0 <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   4185e:	ea51 0300 	orrs.w	r3, r1, r0
   41862:	d103      	bne.n	4186c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   41864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   41868:	f7f7 bdc2 	b.w	393f0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   4186c:	f06f 0301 	mvn.w	r3, #1
   41870:	f04f 31ff 	mov.w	r1, #4294967295
   41874:	1a1b      	subs	r3, r3, r0
   41876:	eb61 0204 	sbc.w	r2, r1, r4
   4187a:	2a00      	cmp	r2, #0
   4187c:	db02      	blt.n	41884 <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
   4187e:	4618      	mov	r0, r3
   41880:	4611      	mov	r1, r2
}
   41882:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   41884:	f7f7 fdb4 	bl	393f0 <sys_clock_tick_get>
   41888:	2d01      	cmp	r5, #1
   4188a:	4622      	mov	r2, r4
   4188c:	f174 0400 	sbcs.w	r4, r4, #0
   41890:	462b      	mov	r3, r5
   41892:	bfbc      	itt	lt
   41894:	2301      	movlt	r3, #1
   41896:	2200      	movlt	r2, #0
   41898:	1818      	adds	r0, r3, r0
   4189a:	eb41 0102 	adc.w	r1, r1, r2
   4189e:	e7f0      	b.n	41882 <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
   418a0:	f04f 30ff 	mov.w	r0, #4294967295
   418a4:	4601      	mov	r1, r0
   418a6:	e7ec      	b.n	41882 <sys_clock_timeout_end_calc+0x36>

000418a8 <add_event>:
{
   418a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   418aa:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   418ac:	e9d0 1300 	ldrd	r1, r3, [r0]
   418b0:	4288      	cmp	r0, r1
   418b2:	4604      	mov	r4, r0
   418b4:	d00d      	beq.n	418d2 <add_event+0x2a>
	if ((pending == NULL) ||
   418b6:	b163      	cbz	r3, 418d2 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   418b8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   418ba:	b100      	cbz	r0, 418be <add_event+0x16>
   418bc:	3860      	subs	r0, #96	; 0x60
   418be:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   418c2:	4639      	mov	r1, r7
   418c4:	f7ff ff83 	bl	417ce <z_sched_prio_cmp>
	if ((pending == NULL) ||
   418c8:	2800      	cmp	r0, #0
   418ca:	dc02      	bgt.n	418d2 <add_event+0x2a>
	return list->head == list;
   418cc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   418ce:	42b4      	cmp	r4, r6
   418d0:	d109      	bne.n	418e6 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   418d2:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   418d4:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   418d8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   418da:	6065      	str	r5, [r4, #4]
}
   418dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   418de:	6863      	ldr	r3, [r4, #4]
   418e0:	42b3      	cmp	r3, r6
   418e2:	d0f6      	beq.n	418d2 <add_event+0x2a>
   418e4:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   418e6:	2e00      	cmp	r6, #0
   418e8:	d0f3      	beq.n	418d2 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   418ea:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   418ec:	b101      	cbz	r1, 418f0 <add_event+0x48>
   418ee:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   418f0:	4638      	mov	r0, r7
   418f2:	f7ff ff6c 	bl	417ce <z_sched_prio_cmp>
   418f6:	2800      	cmp	r0, #0
   418f8:	ddf1      	ble.n	418de <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   418fa:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   418fc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   41900:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   41902:	6075      	str	r5, [r6, #4]
			return;
   41904:	e7ea      	b.n	418dc <add_event+0x34>

00041906 <signal_poll_event>:
{
   41906:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   4190a:	6884      	ldr	r4, [r0, #8]
{
   4190c:	4605      	mov	r5, r0
   4190e:	460e      	mov	r6, r1
	if (poller != NULL) {
   41910:	b144      	cbz	r4, 41924 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   41912:	7863      	ldrb	r3, [r4, #1]
   41914:	2b01      	cmp	r3, #1
   41916:	d137      	bne.n	41988 <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
   41918:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   4191c:	f013 0302 	ands.w	r3, r3, #2
   41920:	d10a      	bne.n	41938 <signal_poll_event+0x32>
		poller->is_polling = false;
   41922:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   41924:	2000      	movs	r0, #0
	event->state |= state;
   41926:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   41928:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   4192a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   4192e:	430e      	orrs	r6, r1
   41930:	f366 3352 	bfi	r3, r6, #13, #6
   41934:	60eb      	str	r3, [r5, #12]
	return retcode;
   41936:	e00b      	b.n	41950 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   41938:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   4193c:	f1b3 3fff 	cmp.w	r3, #4294967295
   41940:	bf08      	it	eq
   41942:	f112 0f02 	cmneq.w	r2, #2
   41946:	d106      	bne.n	41956 <signal_poll_event+0x50>
		poller->is_polling = false;
   41948:	2300      	movs	r3, #0
		return -EAGAIN;
   4194a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   4194e:	7023      	strb	r3, [r4, #0]
}
   41950:	b002      	add	sp, #8
   41952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   41956:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
   4195a:	9001      	str	r0, [sp, #4]
   4195c:	f7f6 fb9e 	bl	3809c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   41960:	2e08      	cmp	r6, #8
   41962:	bf0c      	ite	eq
   41964:	f06f 0303 	mvneq.w	r3, #3
   41968:	2300      	movne	r3, #0
   4196a:	62a3      	str	r3, [r4, #40]	; 0x28
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   4196c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   41970:	06db      	lsls	r3, r3, #27
   41972:	d103      	bne.n	4197c <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   41974:	f854 7c48 	ldr.w	r7, [r4, #-72]
   41978:	9801      	ldr	r0, [sp, #4]
   4197a:	b10f      	cbz	r7, 41980 <signal_poll_event+0x7a>
		poller->is_polling = false;
   4197c:	2300      	movs	r3, #0
   4197e:	e7d0      	b.n	41922 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   41980:	f7f6 fcf6 	bl	38370 <z_ready_thread>
		poller->is_polling = false;
   41984:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   41986:	e7cd      	b.n	41924 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   41988:	2b02      	cmp	r3, #2
   4198a:	d1f7      	bne.n	4197c <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   4198c:	7823      	ldrb	r3, [r4, #0]
   4198e:	2b00      	cmp	r3, #0
   41990:	d0c8      	beq.n	41924 <signal_poll_event+0x1e>
   41992:	f854 7c04 	ldr.w	r7, [r4, #-4]
   41996:	2f00      	cmp	r7, #0
   41998:	d0f4      	beq.n	41984 <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   4199a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   4199e:	f1a4 0114 	sub.w	r1, r4, #20
   419a2:	f104 0014 	add.w	r0, r4, #20
   419a6:	9101      	str	r1, [sp, #4]
   419a8:	f7f7 fb9a 	bl	390e0 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   419ac:	4638      	mov	r0, r7
   419ae:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   419b0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   419b4:	f7f5 ffb2 	bl	3791c <k_work_submit_to_queue>
		poller->is_polling = false;
   419b8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   419bc:	e7b2      	b.n	41924 <signal_poll_event+0x1e>

000419be <z_handle_obj_poll_events>:
{
   419be:	4603      	mov	r3, r0
	return list->head == list;
   419c0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   419c2:	4283      	cmp	r3, r0
   419c4:	d008      	beq.n	419d8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   419c6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   419ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   419cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   419ce:	2300      	movs	r3, #0
	node->prev = NULL;
   419d0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   419d4:	f7ff bf97 	b.w	41906 <signal_poll_event>
}
   419d8:	4770      	bx	lr

000419da <z_impl_k_event_post>:
	k_event_post_internal(event, events, true);
   419da:	2201      	movs	r2, #1
   419dc:	f7f8 b942 	b.w	39c64 <k_event_post_internal>

000419e0 <z_impl_k_event_set>:
	k_event_post_internal(event, events, false);
   419e0:	2200      	movs	r2, #0
   419e2:	f7f8 b93f 	b.w	39c64 <k_event_post_internal>

000419e6 <z_impl_k_event_wait>:
 * Wait for any of the specified events
 */
uint32_t z_impl_k_event_wait(struct k_event *event, uint32_t events,
			     bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;
   419e6:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   419e8:	bf14      	ite	ne
   419ea:	2202      	movne	r2, #2
   419ec:	2200      	moveq	r2, #0
   419ee:	f7f8 b991 	b.w	39d14 <k_event_wait_internal>

000419f2 <z_impl_k_event_wait_all>:
 */
uint32_t z_impl_k_event_wait_all(struct k_event *event, uint32_t events,
				 bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? (K_EVENT_WAIT_RESET | K_EVENT_WAIT_ALL)
				 : K_EVENT_WAIT_ALL;
   419f2:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   419f4:	bf14      	ite	ne
   419f6:	2203      	movne	r2, #3
   419f8:	2201      	moveq	r2, #1
   419fa:	f7f8 b98b 	b.w	39d14 <k_event_wait_internal>

000419fe <k_free>:
	if (ptr != NULL) {
   419fe:	b120      	cbz	r0, 41a0a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   41a00:	1f01      	subs	r1, r0, #4
   41a02:	f850 0c04 	ldr.w	r0, [r0, #-4]
   41a06:	f7f4 bf69 	b.w	368dc <k_heap_free>
}
   41a0a:	4770      	bx	lr

00041a0c <k_malloc>:
{
   41a0c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   41a0e:	2004      	movs	r0, #4
   41a10:	f7f8 ba38 	b.w	39e84 <k_aligned_alloc>

00041a14 <k_calloc>:
{
   41a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   41a16:	fba0 2401 	umull	r2, r4, r0, r1
   41a1a:	b94c      	cbnz	r4, 41a30 <k_calloc+0x1c>
	ret = k_malloc(bounds);
   41a1c:	4610      	mov	r0, r2
   41a1e:	9201      	str	r2, [sp, #4]
   41a20:	f7ff fff4 	bl	41a0c <k_malloc>
	if (ret != NULL) {
   41a24:	9a01      	ldr	r2, [sp, #4]
   41a26:	4605      	mov	r5, r0
   41a28:	b920      	cbnz	r0, 41a34 <k_calloc+0x20>
}
   41a2a:	4628      	mov	r0, r5
   41a2c:	b003      	add	sp, #12
   41a2e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   41a30:	2500      	movs	r5, #0
   41a32:	e7fa      	b.n	41a2a <k_calloc+0x16>
__ssp_bos_icheck3(memset, void *, int)
   41a34:	4621      	mov	r1, r4
   41a36:	f000 f893 	bl	41b60 <memset>
   41a3a:	e7f6      	b.n	41a2a <k_calloc+0x16>

00041a3c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   41a3c:	4770      	bx	lr

00041a3e <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   41a3e:	b510      	push	{r4, lr}
   41a40:	b088      	sub	sp, #32
   41a42:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   41a44:	ab05      	add	r3, sp, #20
   41a46:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   41a48:	230c      	movs	r3, #12
   41a4a:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   41a4c:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   41a4e:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   41a52:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   41a56:	eb0d 0103 	add.w	r1, sp, r3
   41a5a:	aa03      	add	r2, sp, #12
   41a5c:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   41a5e:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   41a62:	f000 f804 	bl	41a6e <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   41a66:	9b00      	ldr	r3, [sp, #0]
   41a68:	6023      	str	r3, [r4, #0]

	return ret;
}
   41a6a:	b008      	add	sp, #32
   41a6c:	bd10      	pop	{r4, pc}

00041a6e <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   41a6e:	2300      	movs	r3, #0
{
   41a70:	b570      	push	{r4, r5, r6, lr}
   41a72:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   41a74:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   41a78:	ab03      	add	r3, sp, #12
   41a7a:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   41a7c:	2304      	movs	r3, #4
{
   41a7e:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   41a80:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   41a82:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   41a84:	b169      	cbz	r1, 41aa2 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   41a86:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   41a88:	680b      	ldr	r3, [r1, #0]
   41a8a:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   41a8c:	684b      	ldr	r3, [r1, #4]
   41a8e:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   41a90:	2101      	movs	r1, #1
   41a92:	2041      	movs	r0, #65	; 0x41
   41a94:	f7f8 fa8a 	bl	39fac <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   41a98:	1e05      	subs	r5, r0, #0
   41a9a:	dc04      	bgt.n	41aa6 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   41a9c:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   41a9e:	b008      	add	sp, #32
   41aa0:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   41aa2:	2601      	movs	r6, #1
   41aa4:	e7f4      	b.n	41a90 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   41aa6:	1e23      	subs	r3, r4, #0
   41aa8:	bf18      	it	ne
   41aaa:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   41aac:	2100      	movs	r1, #0
   41aae:	e9cd 4300 	strd	r4, r3, [sp]
   41ab2:	aa04      	add	r2, sp, #16
   41ab4:	4633      	mov	r3, r6
   41ab6:	f7f8 fa87 	bl	39fc8 <psa_call>
   41aba:	4604      	mov	r4, r0
    psa_close(handle);
   41abc:	4628      	mov	r0, r5
   41abe:	f7f8 fa9f 	bl	3a000 <psa_close>
    if (status < PSA_SUCCESS) {
   41ac2:	2c00      	cmp	r4, #0
   41ac4:	dbea      	blt.n	41a9c <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   41ac6:	4620      	mov	r0, r4
   41ac8:	e7e9      	b.n	41a9e <tfm_platform_ioctl+0x30>

00041aca <psa_crypto_init>:
}
   41aca:	2000      	movs	r0, #0
   41acc:	4770      	bx	lr

00041ace <fabs>:
   41ace:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   41ad2:	4770      	bx	lr

00041ad4 <abs>:
   41ad4:	2800      	cmp	r0, #0
   41ad6:	bfb8      	it	lt
   41ad8:	4240      	neglt	r0, r0
   41ada:	4770      	bx	lr

00041adc <atoi>:
   41adc:	220a      	movs	r2, #10
   41ade:	2100      	movs	r1, #0
   41ae0:	f7f9 b9da 	b.w	3ae98 <strtol>

00041ae4 <memchr>:
   41ae4:	b2c9      	uxtb	r1, r1
   41ae6:	4402      	add	r2, r0
   41ae8:	b510      	push	{r4, lr}
   41aea:	4290      	cmp	r0, r2
   41aec:	4603      	mov	r3, r0
   41aee:	d101      	bne.n	41af4 <memchr+0x10>
   41af0:	2300      	movs	r3, #0
   41af2:	e003      	b.n	41afc <memchr+0x18>
   41af4:	781c      	ldrb	r4, [r3, #0]
   41af6:	3001      	adds	r0, #1
   41af8:	428c      	cmp	r4, r1
   41afa:	d1f6      	bne.n	41aea <memchr+0x6>
   41afc:	4618      	mov	r0, r3
   41afe:	bd10      	pop	{r4, pc}

00041b00 <memcmp>:
   41b00:	3901      	subs	r1, #1
   41b02:	4402      	add	r2, r0
   41b04:	b510      	push	{r4, lr}
   41b06:	4290      	cmp	r0, r2
   41b08:	d101      	bne.n	41b0e <memcmp+0xe>
   41b0a:	2000      	movs	r0, #0
   41b0c:	e005      	b.n	41b1a <memcmp+0x1a>
   41b0e:	7803      	ldrb	r3, [r0, #0]
   41b10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   41b14:	42a3      	cmp	r3, r4
   41b16:	d001      	beq.n	41b1c <memcmp+0x1c>
   41b18:	1b18      	subs	r0, r3, r4
   41b1a:	bd10      	pop	{r4, pc}
   41b1c:	3001      	adds	r0, #1
   41b1e:	e7f2      	b.n	41b06 <memcmp+0x6>

00041b20 <memcpy>:
   41b20:	440a      	add	r2, r1
   41b22:	1e43      	subs	r3, r0, #1
   41b24:	4291      	cmp	r1, r2
   41b26:	d100      	bne.n	41b2a <memcpy+0xa>
   41b28:	4770      	bx	lr
   41b2a:	b510      	push	{r4, lr}
   41b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
   41b30:	4291      	cmp	r1, r2
   41b32:	f803 4f01 	strb.w	r4, [r3, #1]!
   41b36:	d1f9      	bne.n	41b2c <memcpy+0xc>
   41b38:	bd10      	pop	{r4, pc}

00041b3a <__memcpy_chk>:
   41b3a:	429a      	cmp	r2, r3
   41b3c:	b508      	push	{r3, lr}
   41b3e:	d901      	bls.n	41b44 <__memcpy_chk+0xa>
   41b40:	f7e2 fa0e 	bl	23f60 <__chk_fail>
   41b44:	4281      	cmp	r1, r0
   41b46:	d804      	bhi.n	41b52 <__memcpy_chk+0x18>
   41b48:	188b      	adds	r3, r1, r2
   41b4a:	4298      	cmp	r0, r3
   41b4c:	d3f8      	bcc.n	41b40 <__memcpy_chk+0x6>
   41b4e:	4281      	cmp	r1, r0
   41b50:	d102      	bne.n	41b58 <__memcpy_chk+0x1e>
   41b52:	1883      	adds	r3, r0, r2
   41b54:	4299      	cmp	r1, r3
   41b56:	d3f3      	bcc.n	41b40 <__memcpy_chk+0x6>
   41b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   41b5c:	f7ff bfe0 	b.w	41b20 <memcpy>

00041b60 <memset>:
   41b60:	4402      	add	r2, r0
   41b62:	4603      	mov	r3, r0
   41b64:	4293      	cmp	r3, r2
   41b66:	d100      	bne.n	41b6a <memset+0xa>
   41b68:	4770      	bx	lr
   41b6a:	f803 1b01 	strb.w	r1, [r3], #1
   41b6e:	e7f9      	b.n	41b64 <memset+0x4>

00041b70 <_calloc_r>:
   41b70:	434a      	muls	r2, r1
   41b72:	b513      	push	{r0, r1, r4, lr}
   41b74:	4611      	mov	r1, r2
   41b76:	9201      	str	r2, [sp, #4]
   41b78:	f7f8 fb88 	bl	3a28c <_malloc_r>
   41b7c:	4604      	mov	r4, r0
   41b7e:	b118      	cbz	r0, 41b88 <_calloc_r+0x18>
   41b80:	9a01      	ldr	r2, [sp, #4]
   41b82:	2100      	movs	r1, #0
   41b84:	f7ff ffec 	bl	41b60 <memset>
   41b88:	4620      	mov	r0, r4
   41b8a:	b002      	add	sp, #8
   41b8c:	bd10      	pop	{r4, pc}

00041b8e <__sfputc_r>:
   41b8e:	6893      	ldr	r3, [r2, #8]
   41b90:	3b01      	subs	r3, #1
   41b92:	2b00      	cmp	r3, #0
   41b94:	6093      	str	r3, [r2, #8]
   41b96:	b410      	push	{r4}
   41b98:	da08      	bge.n	41bac <__sfputc_r+0x1e>
   41b9a:	6994      	ldr	r4, [r2, #24]
   41b9c:	42a3      	cmp	r3, r4
   41b9e:	db01      	blt.n	41ba4 <__sfputc_r+0x16>
   41ba0:	290a      	cmp	r1, #10
   41ba2:	d103      	bne.n	41bac <__sfputc_r+0x1e>
   41ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
   41ba8:	f7f9 baf8 	b.w	3b19c <__swbuf_r>
   41bac:	6813      	ldr	r3, [r2, #0]
   41bae:	1c58      	adds	r0, r3, #1
   41bb0:	6010      	str	r0, [r2, #0]
   41bb2:	4608      	mov	r0, r1
   41bb4:	7019      	strb	r1, [r3, #0]
   41bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
   41bba:	4770      	bx	lr

00041bbc <__sfputs_r>:
   41bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41bbe:	4606      	mov	r6, r0
   41bc0:	460f      	mov	r7, r1
   41bc2:	4614      	mov	r4, r2
   41bc4:	18d5      	adds	r5, r2, r3
   41bc6:	42ac      	cmp	r4, r5
   41bc8:	d101      	bne.n	41bce <__sfputs_r+0x12>
   41bca:	2000      	movs	r0, #0
   41bcc:	e007      	b.n	41bde <__sfputs_r+0x22>
   41bce:	463a      	mov	r2, r7
   41bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
   41bd4:	4630      	mov	r0, r6
   41bd6:	f7ff ffda 	bl	41b8e <__sfputc_r>
   41bda:	1c43      	adds	r3, r0, #1
   41bdc:	d1f3      	bne.n	41bc6 <__sfputs_r+0xa>
   41bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041be0 <__cvt>:
   41be0:	2b00      	cmp	r3, #0
   41be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41be6:	461d      	mov	r5, r3
   41be8:	b088      	sub	sp, #32
   41bea:	bfb4      	ite	lt
   41bec:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   41bf0:	2300      	movge	r3, #0
   41bf2:	4614      	mov	r4, r2
   41bf4:	bfbc      	itt	lt
   41bf6:	4614      	movlt	r4, r2
   41bf8:	461d      	movlt	r5, r3
   41bfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   41bfc:	bfb8      	it	lt
   41bfe:	232d      	movlt	r3, #45	; 0x2d
   41c00:	9e10      	ldr	r6, [sp, #64]	; 0x40
   41c02:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   41c06:	7013      	strb	r3, [r2, #0]
   41c08:	9b14      	ldr	r3, [sp, #80]	; 0x50
   41c0a:	f023 0820 	bic.w	r8, r3, #32
   41c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   41c12:	d005      	beq.n	41c20 <__cvt+0x40>
   41c14:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   41c18:	d100      	bne.n	41c1c <__cvt+0x3c>
   41c1a:	3601      	adds	r6, #1
   41c1c:	2302      	movs	r3, #2
   41c1e:	e000      	b.n	41c22 <__cvt+0x42>
   41c20:	2303      	movs	r3, #3
   41c22:	aa07      	add	r2, sp, #28
   41c24:	9204      	str	r2, [sp, #16]
   41c26:	aa06      	add	r2, sp, #24
   41c28:	e9cd 3600 	strd	r3, r6, [sp]
   41c2c:	e9cd a202 	strd	sl, r2, [sp, #8]
   41c30:	462b      	mov	r3, r5
   41c32:	4622      	mov	r2, r4
   41c34:	f7dd fc7c 	bl	1f530 <_dtoa_r>
   41c38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   41c3c:	4607      	mov	r7, r0
   41c3e:	d102      	bne.n	41c46 <__cvt+0x66>
   41c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
   41c42:	07db      	lsls	r3, r3, #31
   41c44:	d522      	bpl.n	41c8c <__cvt+0xac>
   41c46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   41c4a:	eb07 0906 	add.w	r9, r7, r6
   41c4e:	d110      	bne.n	41c72 <__cvt+0x92>
   41c50:	783b      	ldrb	r3, [r7, #0]
   41c52:	2b30      	cmp	r3, #48	; 0x30
   41c54:	d10a      	bne.n	41c6c <__cvt+0x8c>
   41c56:	2200      	movs	r2, #0
   41c58:	2300      	movs	r3, #0
   41c5a:	4620      	mov	r0, r4
   41c5c:	4629      	mov	r1, r5
   41c5e:	f7db f813 	bl	1cc88 <__aeabi_dcmpeq>
   41c62:	b918      	cbnz	r0, 41c6c <__cvt+0x8c>
   41c64:	f1c6 0601 	rsb	r6, r6, #1
   41c68:	f8ca 6000 	str.w	r6, [sl]
   41c6c:	f8da 3000 	ldr.w	r3, [sl]
   41c70:	4499      	add	r9, r3
   41c72:	2200      	movs	r2, #0
   41c74:	2300      	movs	r3, #0
   41c76:	4620      	mov	r0, r4
   41c78:	4629      	mov	r1, r5
   41c7a:	f7db f805 	bl	1cc88 <__aeabi_dcmpeq>
   41c7e:	b108      	cbz	r0, 41c84 <__cvt+0xa4>
   41c80:	f8cd 901c 	str.w	r9, [sp, #28]
   41c84:	2230      	movs	r2, #48	; 0x30
   41c86:	9b07      	ldr	r3, [sp, #28]
   41c88:	454b      	cmp	r3, r9
   41c8a:	d307      	bcc.n	41c9c <__cvt+0xbc>
   41c8c:	9b07      	ldr	r3, [sp, #28]
   41c8e:	4638      	mov	r0, r7
   41c90:	9a15      	ldr	r2, [sp, #84]	; 0x54
   41c92:	1bdb      	subs	r3, r3, r7
   41c94:	6013      	str	r3, [r2, #0]
   41c96:	b008      	add	sp, #32
   41c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41c9c:	1c59      	adds	r1, r3, #1
   41c9e:	9107      	str	r1, [sp, #28]
   41ca0:	701a      	strb	r2, [r3, #0]
   41ca2:	e7f0      	b.n	41c86 <__cvt+0xa6>

00041ca4 <__exponent>:
   41ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   41ca6:	2900      	cmp	r1, #0
   41ca8:	4603      	mov	r3, r0
   41caa:	bfb8      	it	lt
   41cac:	4249      	neglt	r1, r1
   41cae:	f803 2b02 	strb.w	r2, [r3], #2
   41cb2:	bfb4      	ite	lt
   41cb4:	222d      	movlt	r2, #45	; 0x2d
   41cb6:	222b      	movge	r2, #43	; 0x2b
   41cb8:	2909      	cmp	r1, #9
   41cba:	7042      	strb	r2, [r0, #1]
   41cbc:	dd2a      	ble.n	41d14 <__exponent+0x70>
   41cbe:	f10d 0407 	add.w	r4, sp, #7
   41cc2:	270a      	movs	r7, #10
   41cc4:	46a4      	mov	ip, r4
   41cc6:	460a      	mov	r2, r1
   41cc8:	46a6      	mov	lr, r4
   41cca:	3c01      	subs	r4, #1
   41ccc:	2a63      	cmp	r2, #99	; 0x63
   41cce:	fb91 f6f7 	sdiv	r6, r1, r7
   41cd2:	fb07 1516 	mls	r5, r7, r6, r1
   41cd6:	4631      	mov	r1, r6
   41cd8:	f105 0530 	add.w	r5, r5, #48	; 0x30
   41cdc:	f80e 5c01 	strb.w	r5, [lr, #-1]
   41ce0:	dcf1      	bgt.n	41cc6 <__exponent+0x22>
   41ce2:	3130      	adds	r1, #48	; 0x30
   41ce4:	f1ae 0502 	sub.w	r5, lr, #2
   41ce8:	f804 1c01 	strb.w	r1, [r4, #-1]
   41cec:	1c44      	adds	r4, r0, #1
   41cee:	4629      	mov	r1, r5
   41cf0:	4561      	cmp	r1, ip
   41cf2:	d30a      	bcc.n	41d0a <__exponent+0x66>
   41cf4:	f10d 0209 	add.w	r2, sp, #9
   41cf8:	eba2 020e 	sub.w	r2, r2, lr
   41cfc:	4565      	cmp	r5, ip
   41cfe:	bf88      	it	hi
   41d00:	2200      	movhi	r2, #0
   41d02:	4413      	add	r3, r2
   41d04:	1a18      	subs	r0, r3, r0
   41d06:	b003      	add	sp, #12
   41d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   41d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
   41d0e:	f804 2f01 	strb.w	r2, [r4, #1]!
   41d12:	e7ed      	b.n	41cf0 <__exponent+0x4c>
   41d14:	2330      	movs	r3, #48	; 0x30
   41d16:	3130      	adds	r1, #48	; 0x30
   41d18:	7083      	strb	r3, [r0, #2]
   41d1a:	1d03      	adds	r3, r0, #4
   41d1c:	70c1      	strb	r1, [r0, #3]
   41d1e:	e7f1      	b.n	41d04 <__exponent+0x60>

00041d20 <_printf_common>:
   41d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41d24:	4616      	mov	r6, r2
   41d26:	4699      	mov	r9, r3
   41d28:	688a      	ldr	r2, [r1, #8]
   41d2a:	4607      	mov	r7, r0
   41d2c:	690b      	ldr	r3, [r1, #16]
   41d2e:	460c      	mov	r4, r1
   41d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
   41d34:	4293      	cmp	r3, r2
   41d36:	bfb8      	it	lt
   41d38:	4613      	movlt	r3, r2
   41d3a:	6033      	str	r3, [r6, #0]
   41d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   41d40:	b10a      	cbz	r2, 41d46 <_printf_common+0x26>
   41d42:	3301      	adds	r3, #1
   41d44:	6033      	str	r3, [r6, #0]
   41d46:	6823      	ldr	r3, [r4, #0]
   41d48:	0699      	lsls	r1, r3, #26
   41d4a:	bf42      	ittt	mi
   41d4c:	6833      	ldrmi	r3, [r6, #0]
   41d4e:	3302      	addmi	r3, #2
   41d50:	6033      	strmi	r3, [r6, #0]
   41d52:	6825      	ldr	r5, [r4, #0]
   41d54:	f015 0506 	ands.w	r5, r5, #6
   41d58:	d106      	bne.n	41d68 <_printf_common+0x48>
   41d5a:	f104 0a19 	add.w	sl, r4, #25
   41d5e:	68e3      	ldr	r3, [r4, #12]
   41d60:	6832      	ldr	r2, [r6, #0]
   41d62:	1a9b      	subs	r3, r3, r2
   41d64:	42ab      	cmp	r3, r5
   41d66:	dc29      	bgt.n	41dbc <_printf_common+0x9c>
   41d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   41d6c:	1e13      	subs	r3, r2, #0
   41d6e:	6822      	ldr	r2, [r4, #0]
   41d70:	bf18      	it	ne
   41d72:	2301      	movne	r3, #1
   41d74:	0692      	lsls	r2, r2, #26
   41d76:	d42e      	bmi.n	41dd6 <_printf_common+0xb6>
   41d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
   41d7c:	4649      	mov	r1, r9
   41d7e:	4638      	mov	r0, r7
   41d80:	47c0      	blx	r8
   41d82:	3001      	adds	r0, #1
   41d84:	d021      	beq.n	41dca <_printf_common+0xaa>
   41d86:	6823      	ldr	r3, [r4, #0]
   41d88:	341a      	adds	r4, #26
   41d8a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   41d8e:	f003 0306 	and.w	r3, r3, #6
   41d92:	6832      	ldr	r2, [r6, #0]
   41d94:	2600      	movs	r6, #0
   41d96:	2b04      	cmp	r3, #4
   41d98:	f854 3c12 	ldr.w	r3, [r4, #-18]
   41d9c:	bf08      	it	eq
   41d9e:	1aad      	subeq	r5, r5, r2
   41da0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   41da4:	bf14      	ite	ne
   41da6:	2500      	movne	r5, #0
   41da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   41dac:	4293      	cmp	r3, r2
   41dae:	bfc4      	itt	gt
   41db0:	1a9b      	subgt	r3, r3, r2
   41db2:	18ed      	addgt	r5, r5, r3
   41db4:	42b5      	cmp	r5, r6
   41db6:	d11a      	bne.n	41dee <_printf_common+0xce>
   41db8:	2000      	movs	r0, #0
   41dba:	e008      	b.n	41dce <_printf_common+0xae>
   41dbc:	2301      	movs	r3, #1
   41dbe:	4652      	mov	r2, sl
   41dc0:	4649      	mov	r1, r9
   41dc2:	4638      	mov	r0, r7
   41dc4:	47c0      	blx	r8
   41dc6:	3001      	adds	r0, #1
   41dc8:	d103      	bne.n	41dd2 <_printf_common+0xb2>
   41dca:	f04f 30ff 	mov.w	r0, #4294967295
   41dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41dd2:	3501      	adds	r5, #1
   41dd4:	e7c3      	b.n	41d5e <_printf_common+0x3e>
   41dd6:	18e1      	adds	r1, r4, r3
   41dd8:	1c5a      	adds	r2, r3, #1
   41dda:	2030      	movs	r0, #48	; 0x30
   41ddc:	3302      	adds	r3, #2
   41dde:	4422      	add	r2, r4
   41de0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   41de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   41de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   41dec:	e7c4      	b.n	41d78 <_printf_common+0x58>
   41dee:	2301      	movs	r3, #1
   41df0:	4622      	mov	r2, r4
   41df2:	4649      	mov	r1, r9
   41df4:	4638      	mov	r0, r7
   41df6:	47c0      	blx	r8
   41df8:	3001      	adds	r0, #1
   41dfa:	d0e6      	beq.n	41dca <_printf_common+0xaa>
   41dfc:	3601      	adds	r6, #1
   41dfe:	e7d9      	b.n	41db4 <_printf_common+0x94>

00041e00 <__sprintf_chk>:
   41e00:	b408      	push	{r3}
   41e02:	b517      	push	{r0, r1, r2, r4, lr}
   41e04:	ab05      	add	r3, sp, #20
   41e06:	1e14      	subs	r4, r2, #0
   41e08:	f853 1b04 	ldr.w	r1, [r3], #4
   41e0c:	9301      	str	r3, [sp, #4]
   41e0e:	da07      	bge.n	41e20 <__sprintf_chk+0x20>
   41e10:	461a      	mov	r2, r3
   41e12:	f7f9 f98b 	bl	3b12c <vsiprintf>
   41e16:	b003      	add	sp, #12
   41e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   41e1c:	b001      	add	sp, #4
   41e1e:	4770      	bx	lr
   41e20:	460a      	mov	r2, r1
   41e22:	4621      	mov	r1, r4
   41e24:	f7f9 f95e 	bl	3b0e4 <vsniprintf>
   41e28:	2800      	cmp	r0, #0
   41e2a:	dbf4      	blt.n	41e16 <__sprintf_chk+0x16>
   41e2c:	42a0      	cmp	r0, r4
   41e2e:	d3f2      	bcc.n	41e16 <__sprintf_chk+0x16>
   41e30:	f7e2 f896 	bl	23f60 <__chk_fail>

00041e34 <__sread>:
   41e34:	b510      	push	{r4, lr}
   41e36:	460c      	mov	r4, r1
   41e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41e3c:	f7fa fe62 	bl	3cb04 <_read_r>
   41e40:	2800      	cmp	r0, #0
   41e42:	bfab      	itete	ge
   41e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   41e46:	89a3      	ldrhlt	r3, [r4, #12]
   41e48:	181b      	addge	r3, r3, r0
   41e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   41e4e:	bfac      	ite	ge
   41e50:	6563      	strge	r3, [r4, #84]	; 0x54
   41e52:	81a3      	strhlt	r3, [r4, #12]
   41e54:	bd10      	pop	{r4, pc}

00041e56 <__seofread>:
   41e56:	2000      	movs	r0, #0
   41e58:	4770      	bx	lr

00041e5a <__swrite>:
   41e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41e5e:	461f      	mov	r7, r3
   41e60:	898b      	ldrh	r3, [r1, #12]
   41e62:	4605      	mov	r5, r0
   41e64:	460c      	mov	r4, r1
   41e66:	05db      	lsls	r3, r3, #23
   41e68:	4616      	mov	r6, r2
   41e6a:	d505      	bpl.n	41e78 <__swrite+0x1e>
   41e6c:	2302      	movs	r3, #2
   41e6e:	2200      	movs	r2, #0
   41e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41e74:	f7f9 fe3e 	bl	3baf4 <_lseek_r>
   41e78:	89a3      	ldrh	r3, [r4, #12]
   41e7a:	4632      	mov	r2, r6
   41e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   41e80:	4628      	mov	r0, r5
   41e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   41e86:	81a3      	strh	r3, [r4, #12]
   41e88:	463b      	mov	r3, r7
   41e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41e8e:	f7f9 b9d7 	b.w	3b240 <_write_r>

00041e92 <__sseek>:
   41e92:	b510      	push	{r4, lr}
   41e94:	460c      	mov	r4, r1
   41e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41e9a:	f7f9 fe2b 	bl	3baf4 <_lseek_r>
   41e9e:	1c43      	adds	r3, r0, #1
   41ea0:	89a3      	ldrh	r3, [r4, #12]
   41ea2:	bf15      	itete	ne
   41ea4:	6560      	strne	r0, [r4, #84]	; 0x54
   41ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   41eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   41eae:	81a3      	strheq	r3, [r4, #12]
   41eb0:	bf18      	it	ne
   41eb2:	81a3      	strhne	r3, [r4, #12]
   41eb4:	bd10      	pop	{r4, pc}

00041eb6 <__sclose>:
   41eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41eba:	f7f9 ba41 	b.w	3b340 <_close_r>

00041ebe <strcat>:
   41ebe:	4602      	mov	r2, r0
   41ec0:	b510      	push	{r4, lr}
   41ec2:	7814      	ldrb	r4, [r2, #0]
   41ec4:	4613      	mov	r3, r2
   41ec6:	3201      	adds	r2, #1
   41ec8:	2c00      	cmp	r4, #0
   41eca:	d1fa      	bne.n	41ec2 <strcat+0x4>
   41ecc:	3b01      	subs	r3, #1
   41ece:	f811 2b01 	ldrb.w	r2, [r1], #1
   41ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
   41ed6:	2a00      	cmp	r2, #0
   41ed8:	d1f9      	bne.n	41ece <strcat+0x10>
   41eda:	bd10      	pop	{r4, pc}

00041edc <strchr>:
   41edc:	b2c9      	uxtb	r1, r1
   41ede:	4603      	mov	r3, r0
   41ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
   41ee4:	b11a      	cbz	r2, 41eee <strchr+0x12>
   41ee6:	428a      	cmp	r2, r1
   41ee8:	d1f9      	bne.n	41ede <strchr+0x2>
   41eea:	4618      	mov	r0, r3
   41eec:	4770      	bx	lr
   41eee:	2900      	cmp	r1, #0
   41ef0:	bf18      	it	ne
   41ef2:	2300      	movne	r3, #0
   41ef4:	e7f9      	b.n	41eea <strchr+0xe>

00041ef6 <strcpy>:
   41ef6:	4603      	mov	r3, r0
   41ef8:	f811 2b01 	ldrb.w	r2, [r1], #1
   41efc:	f803 2b01 	strb.w	r2, [r3], #1
   41f00:	2a00      	cmp	r2, #0
   41f02:	d1f9      	bne.n	41ef8 <strcpy+0x2>
   41f04:	4770      	bx	lr

00041f06 <strncmp>:
   41f06:	b510      	push	{r4, lr}
   41f08:	b17a      	cbz	r2, 41f2a <strncmp+0x24>
   41f0a:	4603      	mov	r3, r0
   41f0c:	3901      	subs	r1, #1
   41f0e:	1884      	adds	r4, r0, r2
   41f10:	f813 0b01 	ldrb.w	r0, [r3], #1
   41f14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   41f18:	4290      	cmp	r0, r2
   41f1a:	d101      	bne.n	41f20 <strncmp+0x1a>
   41f1c:	42a3      	cmp	r3, r4
   41f1e:	d101      	bne.n	41f24 <strncmp+0x1e>
   41f20:	1a80      	subs	r0, r0, r2
   41f22:	bd10      	pop	{r4, pc}
   41f24:	2800      	cmp	r0, #0
   41f26:	d1f3      	bne.n	41f10 <strncmp+0xa>
   41f28:	e7fa      	b.n	41f20 <strncmp+0x1a>
   41f2a:	4610      	mov	r0, r2
   41f2c:	e7f9      	b.n	41f22 <strncmp+0x1c>

00041f2e <strncpy>:
   41f2e:	3901      	subs	r1, #1
   41f30:	4603      	mov	r3, r0
   41f32:	b510      	push	{r4, lr}
   41f34:	b132      	cbz	r2, 41f44 <strncpy+0x16>
   41f36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   41f3a:	3a01      	subs	r2, #1
   41f3c:	f803 4b01 	strb.w	r4, [r3], #1
   41f40:	2c00      	cmp	r4, #0
   41f42:	d1f7      	bne.n	41f34 <strncpy+0x6>
   41f44:	441a      	add	r2, r3
   41f46:	2100      	movs	r1, #0
   41f48:	4293      	cmp	r3, r2
   41f4a:	d100      	bne.n	41f4e <strncpy+0x20>
   41f4c:	bd10      	pop	{r4, pc}
   41f4e:	f803 1b01 	strb.w	r1, [r3], #1
   41f52:	e7f9      	b.n	41f48 <strncpy+0x1a>

00041f54 <strnlen>:
   41f54:	4602      	mov	r2, r0
   41f56:	4401      	add	r1, r0
   41f58:	b510      	push	{r4, lr}
   41f5a:	428a      	cmp	r2, r1
   41f5c:	4613      	mov	r3, r2
   41f5e:	d003      	beq.n	41f68 <strnlen+0x14>
   41f60:	781c      	ldrb	r4, [r3, #0]
   41f62:	3201      	adds	r2, #1
   41f64:	2c00      	cmp	r4, #0
   41f66:	d1f8      	bne.n	41f5a <strnlen+0x6>
   41f68:	1a18      	subs	r0, r3, r0
   41f6a:	bd10      	pop	{r4, pc}

00041f6c <strrchr>:
   41f6c:	b538      	push	{r3, r4, r5, lr}
   41f6e:	4603      	mov	r3, r0
   41f70:	460c      	mov	r4, r1
   41f72:	b969      	cbnz	r1, 41f90 <strrchr+0x24>
   41f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   41f78:	f7ff bfb0 	b.w	41edc <strchr>
   41f7c:	1c43      	adds	r3, r0, #1
   41f7e:	4605      	mov	r5, r0
   41f80:	4621      	mov	r1, r4
   41f82:	4618      	mov	r0, r3
   41f84:	f7ff ffaa 	bl	41edc <strchr>
   41f88:	2800      	cmp	r0, #0
   41f8a:	d1f7      	bne.n	41f7c <strrchr+0x10>
   41f8c:	4628      	mov	r0, r5
   41f8e:	bd38      	pop	{r3, r4, r5, pc}
   41f90:	2500      	movs	r5, #0
   41f92:	e7f5      	b.n	41f80 <strrchr+0x14>

00041f94 <strstr>:
   41f94:	780a      	ldrb	r2, [r1, #0]
   41f96:	b570      	push	{r4, r5, r6, lr}
   41f98:	b96a      	cbnz	r2, 41fb6 <strstr+0x22>
   41f9a:	bd70      	pop	{r4, r5, r6, pc}
   41f9c:	429a      	cmp	r2, r3
   41f9e:	d109      	bne.n	41fb4 <strstr+0x20>
   41fa0:	460c      	mov	r4, r1
   41fa2:	4605      	mov	r5, r0
   41fa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   41fa8:	2b00      	cmp	r3, #0
   41faa:	d0f6      	beq.n	41f9a <strstr+0x6>
   41fac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   41fb0:	429e      	cmp	r6, r3
   41fb2:	d0f7      	beq.n	41fa4 <strstr+0x10>
   41fb4:	3001      	adds	r0, #1
   41fb6:	7803      	ldrb	r3, [r0, #0]
   41fb8:	2b00      	cmp	r3, #0
   41fba:	d1ef      	bne.n	41f9c <strstr+0x8>
   41fbc:	4618      	mov	r0, r3
   41fbe:	e7ec      	b.n	41f9a <strstr+0x6>

00041fc0 <sulp>:
   41fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41fc4:	4690      	mov	r8, r2
   41fc6:	460f      	mov	r7, r1
   41fc8:	f7fa f8fe 	bl	3c1c8 <__ulp>
   41fcc:	4604      	mov	r4, r0
   41fce:	460d      	mov	r5, r1
   41fd0:	f1b8 0f00 	cmp.w	r8, #0
   41fd4:	d011      	beq.n	41ffa <sulp+0x3a>
   41fd6:	f3c7 530a 	ubfx	r3, r7, #20, #11
   41fda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   41fde:	2b00      	cmp	r3, #0
   41fe0:	dd0b      	ble.n	41ffa <sulp+0x3a>
   41fe2:	051b      	lsls	r3, r3, #20
   41fe4:	2400      	movs	r4, #0
   41fe6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   41fea:	4622      	mov	r2, r4
   41fec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   41ff0:	462b      	mov	r3, r5
   41ff2:	f7da fbe1 	bl	1c7b8 <__aeabi_dmul>
   41ff6:	4604      	mov	r4, r0
   41ff8:	460d      	mov	r5, r1
   41ffa:	4620      	mov	r0, r4
   41ffc:	4629      	mov	r1, r5
   41ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00042002 <_strtol_r>:
   42002:	f7f8 bec7 	b.w	3ad94 <_strtol_l.constprop.0>

00042006 <_strtoul_r>:
   42006:	f7f8 bff1 	b.w	3afec <_strtoul_l.constprop.0>

0004200a <_vsniprintf_r>:
   4200a:	b530      	push	{r4, r5, lr}
   4200c:	4614      	mov	r4, r2
   4200e:	b09b      	sub	sp, #108	; 0x6c
   42010:	4605      	mov	r5, r0
   42012:	461a      	mov	r2, r3
   42014:	2c00      	cmp	r4, #0
   42016:	da05      	bge.n	42024 <_vsniprintf_r+0x1a>
   42018:	238b      	movs	r3, #139	; 0x8b
   4201a:	6003      	str	r3, [r0, #0]
   4201c:	f04f 30ff 	mov.w	r0, #4294967295
   42020:	b01b      	add	sp, #108	; 0x6c
   42022:	bd30      	pop	{r4, r5, pc}
   42024:	f44f 7302 	mov.w	r3, #520	; 0x208
   42028:	9100      	str	r1, [sp, #0]
   4202a:	9104      	str	r1, [sp, #16]
   4202c:	4669      	mov	r1, sp
   4202e:	f8ad 300c 	strh.w	r3, [sp, #12]
   42032:	bf14      	ite	ne
   42034:	f104 33ff 	addne.w	r3, r4, #4294967295
   42038:	4623      	moveq	r3, r4
   4203a:	9302      	str	r3, [sp, #8]
   4203c:	9305      	str	r3, [sp, #20]
   4203e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42042:	f8ad 300e 	strh.w	r3, [sp, #14]
   42046:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   42048:	f7fa f98e 	bl	3c368 <_svfiprintf_r>
   4204c:	1c43      	adds	r3, r0, #1
   4204e:	bfbc      	itt	lt
   42050:	238b      	movlt	r3, #139	; 0x8b
   42052:	602b      	strlt	r3, [r5, #0]
   42054:	2c00      	cmp	r4, #0
   42056:	d0e3      	beq.n	42020 <_vsniprintf_r+0x16>
   42058:	9b00      	ldr	r3, [sp, #0]
   4205a:	2200      	movs	r2, #0
   4205c:	701a      	strb	r2, [r3, #0]
   4205e:	e7df      	b.n	42020 <_vsniprintf_r+0x16>

00042060 <abort>:
   42060:	2006      	movs	r0, #6
   42062:	b508      	push	{r3, lr}
   42064:	f7fa fd66 	bl	3cb34 <raise>
   42068:	2001      	movs	r0, #1
   4206a:	f7e1 ff01 	bl	23e70 <_exit>

0004206e <quorem>:
   4206e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42072:	6903      	ldr	r3, [r0, #16]
   42074:	4607      	mov	r7, r0
   42076:	690c      	ldr	r4, [r1, #16]
   42078:	42a3      	cmp	r3, r4
   4207a:	f2c0 8085 	blt.w	42188 <quorem+0x11a>
   4207e:	3c01      	subs	r4, #1
   42080:	f100 0514 	add.w	r5, r0, #20
   42084:	f101 0814 	add.w	r8, r1, #20
   42088:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   4208c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   42090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   42094:	9301      	str	r3, [sp, #4]
   42096:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   4209a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   4209e:	3301      	adds	r3, #1
   420a0:	429a      	cmp	r2, r3
   420a2:	fbb2 f6f3 	udiv	r6, r2, r3
   420a6:	d333      	bcc.n	42110 <quorem+0xa2>
   420a8:	f04f 0e00 	mov.w	lr, #0
   420ac:	4640      	mov	r0, r8
   420ae:	46ac      	mov	ip, r5
   420b0:	46f2      	mov	sl, lr
   420b2:	f850 2b04 	ldr.w	r2, [r0], #4
   420b6:	b293      	uxth	r3, r2
   420b8:	4581      	cmp	r9, r0
   420ba:	ea4f 4212 	mov.w	r2, r2, lsr #16
   420be:	fb06 e303 	mla	r3, r6, r3, lr
   420c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   420c6:	b29b      	uxth	r3, r3
   420c8:	fb06 e202 	mla	r2, r6, r2, lr
   420cc:	ebaa 0303 	sub.w	r3, sl, r3
   420d0:	f8dc a000 	ldr.w	sl, [ip]
   420d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   420d8:	fa1f fa8a 	uxth.w	sl, sl
   420dc:	4453      	add	r3, sl
   420de:	fa1f fa82 	uxth.w	sl, r2
   420e2:	f8dc 2000 	ldr.w	r2, [ip]
   420e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   420ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
   420ee:	b29b      	uxth	r3, r3
   420f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
   420f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   420f8:	f84c 3b04 	str.w	r3, [ip], #4
   420fc:	d2d9      	bcs.n	420b2 <quorem+0x44>
   420fe:	f855 300b 	ldr.w	r3, [r5, fp]
   42102:	b92b      	cbnz	r3, 42110 <quorem+0xa2>
   42104:	9b01      	ldr	r3, [sp, #4]
   42106:	3b04      	subs	r3, #4
   42108:	429d      	cmp	r5, r3
   4210a:	461a      	mov	r2, r3
   4210c:	d330      	bcc.n	42170 <quorem+0x102>
   4210e:	613c      	str	r4, [r7, #16]
   42110:	4638      	mov	r0, r7
   42112:	f000 fa38 	bl	42586 <__mcmp>
   42116:	2800      	cmp	r0, #0
   42118:	db26      	blt.n	42168 <quorem+0xfa>
   4211a:	3601      	adds	r6, #1
   4211c:	4628      	mov	r0, r5
   4211e:	f04f 0c00 	mov.w	ip, #0
   42122:	f858 1b04 	ldr.w	r1, [r8], #4
   42126:	f8d0 e000 	ldr.w	lr, [r0]
   4212a:	b28b      	uxth	r3, r1
   4212c:	45c1      	cmp	r9, r8
   4212e:	fa1f f28e 	uxth.w	r2, lr
   42132:	ebac 0303 	sub.w	r3, ip, r3
   42136:	4413      	add	r3, r2
   42138:	ea4f 4211 	mov.w	r2, r1, lsr #16
   4213c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   42140:	eb02 4223 	add.w	r2, r2, r3, asr #16
   42144:	b29b      	uxth	r3, r3
   42146:	ea4f 4c22 	mov.w	ip, r2, asr #16
   4214a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   4214e:	f840 3b04 	str.w	r3, [r0], #4
   42152:	d2e6      	bcs.n	42122 <quorem+0xb4>
   42154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   42158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   4215c:	b922      	cbnz	r2, 42168 <quorem+0xfa>
   4215e:	3b04      	subs	r3, #4
   42160:	429d      	cmp	r5, r3
   42162:	461a      	mov	r2, r3
   42164:	d30a      	bcc.n	4217c <quorem+0x10e>
   42166:	613c      	str	r4, [r7, #16]
   42168:	4630      	mov	r0, r6
   4216a:	b003      	add	sp, #12
   4216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42170:	6812      	ldr	r2, [r2, #0]
   42172:	3b04      	subs	r3, #4
   42174:	2a00      	cmp	r2, #0
   42176:	d1ca      	bne.n	4210e <quorem+0xa0>
   42178:	3c01      	subs	r4, #1
   4217a:	e7c5      	b.n	42108 <quorem+0x9a>
   4217c:	6812      	ldr	r2, [r2, #0]
   4217e:	3b04      	subs	r3, #4
   42180:	2a00      	cmp	r2, #0
   42182:	d1f0      	bne.n	42166 <quorem+0xf8>
   42184:	3c01      	subs	r4, #1
   42186:	e7eb      	b.n	42160 <quorem+0xf2>
   42188:	2000      	movs	r0, #0
   4218a:	e7ee      	b.n	4216a <quorem+0xfc>

0004218c <__sfmoreglue>:
   4218c:	b570      	push	{r4, r5, r6, lr}
   4218e:	2268      	movs	r2, #104	; 0x68
   42190:	1e4d      	subs	r5, r1, #1
   42192:	460e      	mov	r6, r1
   42194:	4355      	muls	r5, r2
   42196:	f105 0174 	add.w	r1, r5, #116	; 0x74
   4219a:	f7f8 f877 	bl	3a28c <_malloc_r>
   4219e:	4604      	mov	r4, r0
   421a0:	b140      	cbz	r0, 421b4 <__sfmoreglue+0x28>
   421a2:	2100      	movs	r1, #0
   421a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   421a8:	e9c0 1600 	strd	r1, r6, [r0]
   421ac:	300c      	adds	r0, #12
   421ae:	60a0      	str	r0, [r4, #8]
   421b0:	f7ff fcd6 	bl	41b60 <memset>
   421b4:	4620      	mov	r0, r4
   421b6:	bd70      	pop	{r4, r5, r6, pc}

000421b8 <_fwalk_reent>:
   421b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   421bc:	4606      	mov	r6, r0
   421be:	4688      	mov	r8, r1
   421c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
   421c4:	2700      	movs	r7, #0
   421c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   421ca:	f1b9 0901 	subs.w	r9, r9, #1
   421ce:	d505      	bpl.n	421dc <_fwalk_reent+0x24>
   421d0:	6824      	ldr	r4, [r4, #0]
   421d2:	2c00      	cmp	r4, #0
   421d4:	d1f7      	bne.n	421c6 <_fwalk_reent+0xe>
   421d6:	4638      	mov	r0, r7
   421d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   421dc:	89ab      	ldrh	r3, [r5, #12]
   421de:	2b01      	cmp	r3, #1
   421e0:	d907      	bls.n	421f2 <_fwalk_reent+0x3a>
   421e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   421e6:	3301      	adds	r3, #1
   421e8:	d003      	beq.n	421f2 <_fwalk_reent+0x3a>
   421ea:	4629      	mov	r1, r5
   421ec:	4630      	mov	r0, r6
   421ee:	47c0      	blx	r8
   421f0:	4307      	orrs	r7, r0
   421f2:	3568      	adds	r5, #104	; 0x68
   421f4:	e7e9      	b.n	421ca <_fwalk_reent+0x12>

000421f6 <rshift>:
   421f6:	6903      	ldr	r3, [r0, #16]
   421f8:	114a      	asrs	r2, r1, #5
   421fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   421fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   42202:	f100 0414 	add.w	r4, r0, #20
   42206:	dd45      	ble.n	42294 <rshift+0x9e>
   42208:	f011 011f 	ands.w	r1, r1, #31
   4220c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   42210:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   42214:	d10c      	bne.n	42230 <rshift+0x3a>
   42216:	f100 0710 	add.w	r7, r0, #16
   4221a:	4629      	mov	r1, r5
   4221c:	42b1      	cmp	r1, r6
   4221e:	d334      	bcc.n	4228a <rshift+0x94>
   42220:	1a9b      	subs	r3, r3, r2
   42222:	1eea      	subs	r2, r5, #3
   42224:	009b      	lsls	r3, r3, #2
   42226:	4296      	cmp	r6, r2
   42228:	bf38      	it	cc
   4222a:	2300      	movcc	r3, #0
   4222c:	4423      	add	r3, r4
   4222e:	e015      	b.n	4225c <rshift+0x66>
   42230:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   42234:	f1c1 0820 	rsb	r8, r1, #32
   42238:	f105 0e04 	add.w	lr, r5, #4
   4223c:	46a1      	mov	r9, r4
   4223e:	40cf      	lsrs	r7, r1
   42240:	4576      	cmp	r6, lr
   42242:	46f4      	mov	ip, lr
   42244:	d815      	bhi.n	42272 <rshift+0x7c>
   42246:	1a9a      	subs	r2, r3, r2
   42248:	3501      	adds	r5, #1
   4224a:	0092      	lsls	r2, r2, #2
   4224c:	3a04      	subs	r2, #4
   4224e:	42ae      	cmp	r6, r5
   42250:	bf38      	it	cc
   42252:	2200      	movcc	r2, #0
   42254:	18a3      	adds	r3, r4, r2
   42256:	50a7      	str	r7, [r4, r2]
   42258:	b107      	cbz	r7, 4225c <rshift+0x66>
   4225a:	3304      	adds	r3, #4
   4225c:	1b1a      	subs	r2, r3, r4
   4225e:	42a3      	cmp	r3, r4
   42260:	ea4f 02a2 	mov.w	r2, r2, asr #2
   42264:	bf08      	it	eq
   42266:	2300      	moveq	r3, #0
   42268:	6102      	str	r2, [r0, #16]
   4226a:	bf08      	it	eq
   4226c:	6143      	streq	r3, [r0, #20]
   4226e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   42272:	f8dc c000 	ldr.w	ip, [ip]
   42276:	fa0c fc08 	lsl.w	ip, ip, r8
   4227a:	ea4c 0707 	orr.w	r7, ip, r7
   4227e:	f849 7b04 	str.w	r7, [r9], #4
   42282:	f85e 7b04 	ldr.w	r7, [lr], #4
   42286:	40cf      	lsrs	r7, r1
   42288:	e7da      	b.n	42240 <rshift+0x4a>
   4228a:	f851 cb04 	ldr.w	ip, [r1], #4
   4228e:	f847 cf04 	str.w	ip, [r7, #4]!
   42292:	e7c3      	b.n	4221c <rshift+0x26>
   42294:	4623      	mov	r3, r4
   42296:	e7e1      	b.n	4225c <rshift+0x66>

00042298 <__hexdig_fun>:
   42298:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   4229c:	2b09      	cmp	r3, #9
   4229e:	d802      	bhi.n	422a6 <__hexdig_fun+0xe>
   422a0:	3820      	subs	r0, #32
   422a2:	b2c0      	uxtb	r0, r0
   422a4:	4770      	bx	lr
   422a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   422aa:	2b05      	cmp	r3, #5
   422ac:	d801      	bhi.n	422b2 <__hexdig_fun+0x1a>
   422ae:	3847      	subs	r0, #71	; 0x47
   422b0:	e7f7      	b.n	422a2 <__hexdig_fun+0xa>
   422b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   422b6:	2b05      	cmp	r3, #5
   422b8:	d801      	bhi.n	422be <__hexdig_fun+0x26>
   422ba:	3827      	subs	r0, #39	; 0x27
   422bc:	e7f1      	b.n	422a2 <__hexdig_fun+0xa>
   422be:	2000      	movs	r0, #0
   422c0:	4770      	bx	lr

000422c2 <L_shift>:
   422c2:	f1c2 0208 	rsb	r2, r2, #8
   422c6:	0092      	lsls	r2, r2, #2
   422c8:	b570      	push	{r4, r5, r6, lr}
   422ca:	f1c2 0620 	rsb	r6, r2, #32
   422ce:	6843      	ldr	r3, [r0, #4]
   422d0:	6804      	ldr	r4, [r0, #0]
   422d2:	fa03 f506 	lsl.w	r5, r3, r6
   422d6:	40d3      	lsrs	r3, r2
   422d8:	432c      	orrs	r4, r5
   422da:	6004      	str	r4, [r0, #0]
   422dc:	f840 3f04 	str.w	r3, [r0, #4]!
   422e0:	4288      	cmp	r0, r1
   422e2:	d3f4      	bcc.n	422ce <L_shift+0xc>
   422e4:	bd70      	pop	{r4, r5, r6, pc}

000422e6 <__match>:
   422e6:	6803      	ldr	r3, [r0, #0]
   422e8:	3301      	adds	r3, #1
   422ea:	b530      	push	{r4, r5, lr}
   422ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   422f0:	b914      	cbnz	r4, 422f8 <__match+0x12>
   422f2:	6003      	str	r3, [r0, #0]
   422f4:	2001      	movs	r0, #1
   422f6:	bd30      	pop	{r4, r5, pc}
   422f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   422fc:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   42300:	2d19      	cmp	r5, #25
   42302:	bf98      	it	ls
   42304:	3220      	addls	r2, #32
   42306:	42a2      	cmp	r2, r4
   42308:	d0f0      	beq.n	422ec <__match+0x6>
   4230a:	2000      	movs	r0, #0
   4230c:	e7f3      	b.n	422f6 <__match+0x10>

0004230e <__hexnan>:
   4230e:	680b      	ldr	r3, [r1, #0]
   42310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42314:	115e      	asrs	r6, r3, #5
   42316:	f013 031f 	ands.w	r3, r3, #31
   4231a:	f04f 0500 	mov.w	r5, #0
   4231e:	b087      	sub	sp, #28
   42320:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   42324:	4690      	mov	r8, r2
   42326:	4682      	mov	sl, r0
   42328:	6802      	ldr	r2, [r0, #0]
   4232a:	bf18      	it	ne
   4232c:	3604      	addne	r6, #4
   4232e:	46ab      	mov	fp, r5
   42330:	9301      	str	r3, [sp, #4]
   42332:	1f37      	subs	r7, r6, #4
   42334:	f846 5c04 	str.w	r5, [r6, #-4]
   42338:	9502      	str	r5, [sp, #8]
   4233a:	46b9      	mov	r9, r7
   4233c:	463c      	mov	r4, r7
   4233e:	1c53      	adds	r3, r2, #1
   42340:	7851      	ldrb	r1, [r2, #1]
   42342:	9303      	str	r3, [sp, #12]
   42344:	b341      	cbz	r1, 42398 <__hexnan+0x8a>
   42346:	4608      	mov	r0, r1
   42348:	9205      	str	r2, [sp, #20]
   4234a:	9104      	str	r1, [sp, #16]
   4234c:	f7ff ffa4 	bl	42298 <__hexdig_fun>
   42350:	2800      	cmp	r0, #0
   42352:	d14f      	bne.n	423f4 <__hexnan+0xe6>
   42354:	9904      	ldr	r1, [sp, #16]
   42356:	9a05      	ldr	r2, [sp, #20]
   42358:	2920      	cmp	r1, #32
   4235a:	d818      	bhi.n	4238e <__hexnan+0x80>
   4235c:	9b02      	ldr	r3, [sp, #8]
   4235e:	459b      	cmp	fp, r3
   42360:	dd13      	ble.n	4238a <__hexnan+0x7c>
   42362:	454c      	cmp	r4, r9
   42364:	d206      	bcs.n	42374 <__hexnan+0x66>
   42366:	2d07      	cmp	r5, #7
   42368:	dc04      	bgt.n	42374 <__hexnan+0x66>
   4236a:	462a      	mov	r2, r5
   4236c:	4649      	mov	r1, r9
   4236e:	4620      	mov	r0, r4
   42370:	f7ff ffa7 	bl	422c2 <L_shift>
   42374:	4544      	cmp	r4, r8
   42376:	d94f      	bls.n	42418 <__hexnan+0x10a>
   42378:	2300      	movs	r3, #0
   4237a:	f1a4 0904 	sub.w	r9, r4, #4
   4237e:	f8cd b008 	str.w	fp, [sp, #8]
   42382:	f844 3c04 	str.w	r3, [r4, #-4]
   42386:	461d      	mov	r5, r3
   42388:	464c      	mov	r4, r9
   4238a:	9a03      	ldr	r2, [sp, #12]
   4238c:	e7d7      	b.n	4233e <__hexnan+0x30>
   4238e:	2929      	cmp	r1, #41	; 0x29
   42390:	d155      	bne.n	4243e <__hexnan+0x130>
   42392:	3202      	adds	r2, #2
   42394:	f8ca 2000 	str.w	r2, [sl]
   42398:	f1bb 0f00 	cmp.w	fp, #0
   4239c:	d04f      	beq.n	4243e <__hexnan+0x130>
   4239e:	454c      	cmp	r4, r9
   423a0:	d206      	bcs.n	423b0 <__hexnan+0xa2>
   423a2:	2d07      	cmp	r5, #7
   423a4:	dc04      	bgt.n	423b0 <__hexnan+0xa2>
   423a6:	462a      	mov	r2, r5
   423a8:	4649      	mov	r1, r9
   423aa:	4620      	mov	r0, r4
   423ac:	f7ff ff89 	bl	422c2 <L_shift>
   423b0:	4544      	cmp	r4, r8
   423b2:	d933      	bls.n	4241c <__hexnan+0x10e>
   423b4:	f1a8 0204 	sub.w	r2, r8, #4
   423b8:	4623      	mov	r3, r4
   423ba:	f853 1b04 	ldr.w	r1, [r3], #4
   423be:	429f      	cmp	r7, r3
   423c0:	f842 1f04 	str.w	r1, [r2, #4]!
   423c4:	d2f9      	bcs.n	423ba <__hexnan+0xac>
   423c6:	1b3b      	subs	r3, r7, r4
   423c8:	3e03      	subs	r6, #3
   423ca:	3401      	adds	r4, #1
   423cc:	2200      	movs	r2, #0
   423ce:	f023 0303 	bic.w	r3, r3, #3
   423d2:	3304      	adds	r3, #4
   423d4:	42b4      	cmp	r4, r6
   423d6:	bf88      	it	hi
   423d8:	2304      	movhi	r3, #4
   423da:	4443      	add	r3, r8
   423dc:	f843 2b04 	str.w	r2, [r3], #4
   423e0:	429f      	cmp	r7, r3
   423e2:	d2fb      	bcs.n	423dc <__hexnan+0xce>
   423e4:	683b      	ldr	r3, [r7, #0]
   423e6:	b91b      	cbnz	r3, 423f0 <__hexnan+0xe2>
   423e8:	4547      	cmp	r7, r8
   423ea:	d126      	bne.n	4243a <__hexnan+0x12c>
   423ec:	2301      	movs	r3, #1
   423ee:	603b      	str	r3, [r7, #0]
   423f0:	2005      	movs	r0, #5
   423f2:	e025      	b.n	42440 <__hexnan+0x132>
   423f4:	3501      	adds	r5, #1
   423f6:	f10b 0b01 	add.w	fp, fp, #1
   423fa:	2d08      	cmp	r5, #8
   423fc:	dd05      	ble.n	4240a <__hexnan+0xfc>
   423fe:	4544      	cmp	r4, r8
   42400:	d9c3      	bls.n	4238a <__hexnan+0x7c>
   42402:	2300      	movs	r3, #0
   42404:	3c04      	subs	r4, #4
   42406:	2501      	movs	r5, #1
   42408:	6023      	str	r3, [r4, #0]
   4240a:	6822      	ldr	r2, [r4, #0]
   4240c:	f000 000f 	and.w	r0, r0, #15
   42410:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   42414:	6022      	str	r2, [r4, #0]
   42416:	e7b8      	b.n	4238a <__hexnan+0x7c>
   42418:	2508      	movs	r5, #8
   4241a:	e7b6      	b.n	4238a <__hexnan+0x7c>
   4241c:	9b01      	ldr	r3, [sp, #4]
   4241e:	2b00      	cmp	r3, #0
   42420:	d0e0      	beq.n	423e4 <__hexnan+0xd6>
   42422:	f04f 32ff 	mov.w	r2, #4294967295
   42426:	f1c3 0320 	rsb	r3, r3, #32
   4242a:	fa22 f303 	lsr.w	r3, r2, r3
   4242e:	f856 2c04 	ldr.w	r2, [r6, #-4]
   42432:	401a      	ands	r2, r3
   42434:	f846 2c04 	str.w	r2, [r6, #-4]
   42438:	e7d4      	b.n	423e4 <__hexnan+0xd6>
   4243a:	3f04      	subs	r7, #4
   4243c:	e7d2      	b.n	423e4 <__hexnan+0xd6>
   4243e:	2004      	movs	r0, #4
   42440:	b007      	add	sp, #28
   42442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00042446 <__swhatbuf_r>:
   42446:	b570      	push	{r4, r5, r6, lr}
   42448:	460e      	mov	r6, r1
   4244a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4244e:	b096      	sub	sp, #88	; 0x58
   42450:	4614      	mov	r4, r2
   42452:	2900      	cmp	r1, #0
   42454:	461d      	mov	r5, r3
   42456:	da08      	bge.n	4246a <__swhatbuf_r+0x24>
   42458:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   4245c:	2200      	movs	r2, #0
   4245e:	602a      	str	r2, [r5, #0]
   42460:	061a      	lsls	r2, r3, #24
   42462:	d410      	bmi.n	42486 <__swhatbuf_r+0x40>
   42464:	f44f 6380 	mov.w	r3, #1024	; 0x400
   42468:	e00e      	b.n	42488 <__swhatbuf_r+0x42>
   4246a:	466a      	mov	r2, sp
   4246c:	f7fa fb7c 	bl	3cb68 <_fstat_r>
   42470:	2800      	cmp	r0, #0
   42472:	dbf1      	blt.n	42458 <__swhatbuf_r+0x12>
   42474:	9a01      	ldr	r2, [sp, #4]
   42476:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   4247a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   4247e:	425a      	negs	r2, r3
   42480:	415a      	adcs	r2, r3
   42482:	602a      	str	r2, [r5, #0]
   42484:	e7ee      	b.n	42464 <__swhatbuf_r+0x1e>
   42486:	2340      	movs	r3, #64	; 0x40
   42488:	2000      	movs	r0, #0
   4248a:	6023      	str	r3, [r4, #0]
   4248c:	b016      	add	sp, #88	; 0x58
   4248e:	bd70      	pop	{r4, r5, r6, pc}

00042490 <__ascii_mbtowc>:
   42490:	b082      	sub	sp, #8
   42492:	b901      	cbnz	r1, 42496 <__ascii_mbtowc+0x6>
   42494:	a901      	add	r1, sp, #4
   42496:	b142      	cbz	r2, 424aa <__ascii_mbtowc+0x1a>
   42498:	b14b      	cbz	r3, 424ae <__ascii_mbtowc+0x1e>
   4249a:	7813      	ldrb	r3, [r2, #0]
   4249c:	600b      	str	r3, [r1, #0]
   4249e:	7812      	ldrb	r2, [r2, #0]
   424a0:	1e10      	subs	r0, r2, #0
   424a2:	bf18      	it	ne
   424a4:	2001      	movne	r0, #1
   424a6:	b002      	add	sp, #8
   424a8:	4770      	bx	lr
   424aa:	4610      	mov	r0, r2
   424ac:	e7fb      	b.n	424a6 <__ascii_mbtowc+0x16>
   424ae:	f06f 0001 	mvn.w	r0, #1
   424b2:	e7f8      	b.n	424a6 <__ascii_mbtowc+0x16>

000424b4 <memmove>:
   424b4:	4288      	cmp	r0, r1
   424b6:	b510      	push	{r4, lr}
   424b8:	eb01 0402 	add.w	r4, r1, r2
   424bc:	d902      	bls.n	424c4 <memmove+0x10>
   424be:	4284      	cmp	r4, r0
   424c0:	4623      	mov	r3, r4
   424c2:	d807      	bhi.n	424d4 <memmove+0x20>
   424c4:	1e43      	subs	r3, r0, #1
   424c6:	42a1      	cmp	r1, r4
   424c8:	d008      	beq.n	424dc <memmove+0x28>
   424ca:	f811 2b01 	ldrb.w	r2, [r1], #1
   424ce:	f803 2f01 	strb.w	r2, [r3, #1]!
   424d2:	e7f8      	b.n	424c6 <memmove+0x12>
   424d4:	4402      	add	r2, r0
   424d6:	4601      	mov	r1, r0
   424d8:	428a      	cmp	r2, r1
   424da:	d100      	bne.n	424de <memmove+0x2a>
   424dc:	bd10      	pop	{r4, pc}
   424de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   424e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   424e6:	e7f7      	b.n	424d8 <memmove+0x24>

000424e8 <__hi0bits>:
   424e8:	0c03      	lsrs	r3, r0, #16
   424ea:	041b      	lsls	r3, r3, #16
   424ec:	b9d3      	cbnz	r3, 42524 <__hi0bits+0x3c>
   424ee:	0400      	lsls	r0, r0, #16
   424f0:	2310      	movs	r3, #16
   424f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   424f6:	bf04      	itt	eq
   424f8:	0200      	lsleq	r0, r0, #8
   424fa:	3308      	addeq	r3, #8
   424fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   42500:	bf04      	itt	eq
   42502:	0100      	lsleq	r0, r0, #4
   42504:	3304      	addeq	r3, #4
   42506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   4250a:	bf04      	itt	eq
   4250c:	0080      	lsleq	r0, r0, #2
   4250e:	3302      	addeq	r3, #2
   42510:	2800      	cmp	r0, #0
   42512:	db05      	blt.n	42520 <__hi0bits+0x38>
   42514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   42518:	f103 0301 	add.w	r3, r3, #1
   4251c:	bf08      	it	eq
   4251e:	2320      	moveq	r3, #32
   42520:	4618      	mov	r0, r3
   42522:	4770      	bx	lr
   42524:	2300      	movs	r3, #0
   42526:	e7e4      	b.n	424f2 <__hi0bits+0xa>

00042528 <__lo0bits>:
   42528:	6803      	ldr	r3, [r0, #0]
   4252a:	4601      	mov	r1, r0
   4252c:	f013 0207 	ands.w	r2, r3, #7
   42530:	d00b      	beq.n	4254a <__lo0bits+0x22>
   42532:	07da      	lsls	r2, r3, #31
   42534:	d423      	bmi.n	4257e <__lo0bits+0x56>
   42536:	0798      	lsls	r0, r3, #30
   42538:	bf47      	ittee	mi
   4253a:	085b      	lsrmi	r3, r3, #1
   4253c:	2001      	movmi	r0, #1
   4253e:	089b      	lsrpl	r3, r3, #2
   42540:	2002      	movpl	r0, #2
   42542:	bf4c      	ite	mi
   42544:	600b      	strmi	r3, [r1, #0]
   42546:	600b      	strpl	r3, [r1, #0]
   42548:	4770      	bx	lr
   4254a:	b298      	uxth	r0, r3
   4254c:	b9a8      	cbnz	r0, 4257a <__lo0bits+0x52>
   4254e:	0c1b      	lsrs	r3, r3, #16
   42550:	2010      	movs	r0, #16
   42552:	b2da      	uxtb	r2, r3
   42554:	b90a      	cbnz	r2, 4255a <__lo0bits+0x32>
   42556:	3008      	adds	r0, #8
   42558:	0a1b      	lsrs	r3, r3, #8
   4255a:	071a      	lsls	r2, r3, #28
   4255c:	bf04      	itt	eq
   4255e:	091b      	lsreq	r3, r3, #4
   42560:	3004      	addeq	r0, #4
   42562:	079a      	lsls	r2, r3, #30
   42564:	bf04      	itt	eq
   42566:	089b      	lsreq	r3, r3, #2
   42568:	3002      	addeq	r0, #2
   4256a:	07da      	lsls	r2, r3, #31
   4256c:	d403      	bmi.n	42576 <__lo0bits+0x4e>
   4256e:	085b      	lsrs	r3, r3, #1
   42570:	f100 0001 	add.w	r0, r0, #1
   42574:	d005      	beq.n	42582 <__lo0bits+0x5a>
   42576:	600b      	str	r3, [r1, #0]
   42578:	4770      	bx	lr
   4257a:	4610      	mov	r0, r2
   4257c:	e7e9      	b.n	42552 <__lo0bits+0x2a>
   4257e:	2000      	movs	r0, #0
   42580:	4770      	bx	lr
   42582:	2020      	movs	r0, #32
   42584:	4770      	bx	lr

00042586 <__mcmp>:
   42586:	6902      	ldr	r2, [r0, #16]
   42588:	b530      	push	{r4, r5, lr}
   4258a:	690c      	ldr	r4, [r1, #16]
   4258c:	1b12      	subs	r2, r2, r4
   4258e:	d10e      	bne.n	425ae <__mcmp+0x28>
   42590:	f100 0314 	add.w	r3, r0, #20
   42594:	3114      	adds	r1, #20
   42596:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   4259a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   4259e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   425a2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   425a6:	42a5      	cmp	r5, r4
   425a8:	d003      	beq.n	425b2 <__mcmp+0x2c>
   425aa:	d305      	bcc.n	425b8 <__mcmp+0x32>
   425ac:	2201      	movs	r2, #1
   425ae:	4610      	mov	r0, r2
   425b0:	bd30      	pop	{r4, r5, pc}
   425b2:	4283      	cmp	r3, r0
   425b4:	d3f3      	bcc.n	4259e <__mcmp+0x18>
   425b6:	e7fa      	b.n	425ae <__mcmp+0x28>
   425b8:	f04f 32ff 	mov.w	r2, #4294967295
   425bc:	e7f7      	b.n	425ae <__mcmp+0x28>

000425be <__ratio>:
   425be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   425c2:	4688      	mov	r8, r1
   425c4:	4681      	mov	r9, r0
   425c6:	4669      	mov	r1, sp
   425c8:	f7f9 fe22 	bl	3c210 <__b2d>
   425cc:	460f      	mov	r7, r1
   425ce:	4604      	mov	r4, r0
   425d0:	460d      	mov	r5, r1
   425d2:	4640      	mov	r0, r8
   425d4:	a901      	add	r1, sp, #4
   425d6:	f7f9 fe1b 	bl	3c210 <__b2d>
   425da:	f8d9 3010 	ldr.w	r3, [r9, #16]
   425de:	f8d8 2010 	ldr.w	r2, [r8, #16]
   425e2:	468b      	mov	fp, r1
   425e4:	eba3 0c02 	sub.w	ip, r3, r2
   425e8:	e9dd 3200 	ldrd	r3, r2, [sp]
   425ec:	1a9b      	subs	r3, r3, r2
   425ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   425f2:	2b00      	cmp	r3, #0
   425f4:	bfdb      	ittet	le
   425f6:	460a      	movle	r2, r1
   425f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   425fc:	462a      	movgt	r2, r5
   425fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   42602:	bfc8      	it	gt
   42604:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   42608:	4602      	mov	r2, r0
   4260a:	465b      	mov	r3, fp
   4260c:	4620      	mov	r0, r4
   4260e:	4639      	mov	r1, r7
   42610:	f7da f9fc 	bl	1ca0c <__aeabi_ddiv>
   42614:	b003      	add	sp, #12
   42616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004261a <__copybits>:
   4261a:	3901      	subs	r1, #1
   4261c:	f102 0314 	add.w	r3, r2, #20
   42620:	1149      	asrs	r1, r1, #5
   42622:	b570      	push	{r4, r5, r6, lr}
   42624:	3101      	adds	r1, #1
   42626:	6914      	ldr	r4, [r2, #16]
   42628:	1f05      	subs	r5, r0, #4
   4262a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   4262e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   42632:	42a3      	cmp	r3, r4
   42634:	d30c      	bcc.n	42650 <__copybits+0x36>
   42636:	1aa3      	subs	r3, r4, r2
   42638:	3211      	adds	r2, #17
   4263a:	3b11      	subs	r3, #17
   4263c:	f023 0303 	bic.w	r3, r3, #3
   42640:	42a2      	cmp	r2, r4
   42642:	bf88      	it	hi
   42644:	2300      	movhi	r3, #0
   42646:	4418      	add	r0, r3
   42648:	2300      	movs	r3, #0
   4264a:	4288      	cmp	r0, r1
   4264c:	d305      	bcc.n	4265a <__copybits+0x40>
   4264e:	bd70      	pop	{r4, r5, r6, pc}
   42650:	f853 6b04 	ldr.w	r6, [r3], #4
   42654:	f845 6f04 	str.w	r6, [r5, #4]!
   42658:	e7eb      	b.n	42632 <__copybits+0x18>
   4265a:	f840 3b04 	str.w	r3, [r0], #4
   4265e:	e7f4      	b.n	4264a <__copybits+0x30>

00042660 <__any_on>:
   42660:	f100 0214 	add.w	r2, r0, #20
   42664:	114b      	asrs	r3, r1, #5
   42666:	6900      	ldr	r0, [r0, #16]
   42668:	4298      	cmp	r0, r3
   4266a:	b510      	push	{r4, lr}
   4266c:	db11      	blt.n	42692 <__any_on+0x32>
   4266e:	dd0a      	ble.n	42686 <__any_on+0x26>
   42670:	f011 011f 	ands.w	r1, r1, #31
   42674:	d007      	beq.n	42686 <__any_on+0x26>
   42676:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   4267a:	fa24 f001 	lsr.w	r0, r4, r1
   4267e:	fa00 f101 	lsl.w	r1, r0, r1
   42682:	428c      	cmp	r4, r1
   42684:	d10b      	bne.n	4269e <__any_on+0x3e>
   42686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   4268a:	4293      	cmp	r3, r2
   4268c:	d803      	bhi.n	42696 <__any_on+0x36>
   4268e:	2000      	movs	r0, #0
   42690:	bd10      	pop	{r4, pc}
   42692:	4603      	mov	r3, r0
   42694:	e7f7      	b.n	42686 <__any_on+0x26>
   42696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   4269a:	2900      	cmp	r1, #0
   4269c:	d0f5      	beq.n	4268a <__any_on+0x2a>
   4269e:	2001      	movs	r0, #1
   426a0:	e7f6      	b.n	42690 <__any_on+0x30>

000426a2 <_realloc_r>:
   426a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   426a4:	4607      	mov	r7, r0
   426a6:	4614      	mov	r4, r2
   426a8:	460e      	mov	r6, r1
   426aa:	b921      	cbnz	r1, 426b6 <_realloc_r+0x14>
   426ac:	4611      	mov	r1, r2
   426ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   426b2:	f7f7 bdeb 	b.w	3a28c <_malloc_r>
   426b6:	b922      	cbnz	r2, 426c2 <_realloc_r+0x20>
   426b8:	4625      	mov	r5, r4
   426ba:	f7f7 fd9b 	bl	3a1f4 <_free_r>
   426be:	4628      	mov	r0, r5
   426c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   426c2:	f000 f96f 	bl	429a4 <_malloc_usable_size_r>
   426c6:	42a0      	cmp	r0, r4
   426c8:	d20f      	bcs.n	426ea <_realloc_r+0x48>
   426ca:	4621      	mov	r1, r4
   426cc:	4638      	mov	r0, r7
   426ce:	f7f7 fddd 	bl	3a28c <_malloc_r>
   426d2:	4605      	mov	r5, r0
   426d4:	2800      	cmp	r0, #0
   426d6:	d0f2      	beq.n	426be <_realloc_r+0x1c>
   426d8:	4631      	mov	r1, r6
   426da:	4622      	mov	r2, r4
   426dc:	f7ff fa20 	bl	41b20 <memcpy>
   426e0:	4631      	mov	r1, r6
   426e2:	4638      	mov	r0, r7
   426e4:	f7f7 fd86 	bl	3a1f4 <_free_r>
   426e8:	e7e9      	b.n	426be <_realloc_r+0x1c>
   426ea:	4635      	mov	r5, r6
   426ec:	e7e7      	b.n	426be <_realloc_r+0x1c>

000426ee <__ssputs_r>:
   426ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   426f2:	688e      	ldr	r6, [r1, #8]
   426f4:	4682      	mov	sl, r0
   426f6:	460c      	mov	r4, r1
   426f8:	4690      	mov	r8, r2
   426fa:	429e      	cmp	r6, r3
   426fc:	461f      	mov	r7, r3
   426fe:	d838      	bhi.n	42772 <__ssputs_r+0x84>
   42700:	898a      	ldrh	r2, [r1, #12]
   42702:	f412 6f90 	tst.w	r2, #1152	; 0x480
   42706:	d032      	beq.n	4276e <__ssputs_r+0x80>
   42708:	6825      	ldr	r5, [r4, #0]
   4270a:	3301      	adds	r3, #1
   4270c:	6909      	ldr	r1, [r1, #16]
   4270e:	eba5 0901 	sub.w	r9, r5, r1
   42712:	6965      	ldr	r5, [r4, #20]
   42714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   42718:	444b      	add	r3, r9
   4271a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   4271e:	106d      	asrs	r5, r5, #1
   42720:	429d      	cmp	r5, r3
   42722:	bf38      	it	cc
   42724:	461d      	movcc	r5, r3
   42726:	0553      	lsls	r3, r2, #21
   42728:	d531      	bpl.n	4278e <__ssputs_r+0xa0>
   4272a:	4629      	mov	r1, r5
   4272c:	f7f7 fdae 	bl	3a28c <_malloc_r>
   42730:	4606      	mov	r6, r0
   42732:	b950      	cbnz	r0, 4274a <__ssputs_r+0x5c>
   42734:	230c      	movs	r3, #12
   42736:	f04f 30ff 	mov.w	r0, #4294967295
   4273a:	f8ca 3000 	str.w	r3, [sl]
   4273e:	89a3      	ldrh	r3, [r4, #12]
   42740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42744:	81a3      	strh	r3, [r4, #12]
   42746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4274a:	464a      	mov	r2, r9
   4274c:	6921      	ldr	r1, [r4, #16]
   4274e:	f7ff f9e7 	bl	41b20 <memcpy>
   42752:	89a3      	ldrh	r3, [r4, #12]
   42754:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   42758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   4275c:	81a3      	strh	r3, [r4, #12]
   4275e:	6126      	str	r6, [r4, #16]
   42760:	444e      	add	r6, r9
   42762:	6165      	str	r5, [r4, #20]
   42764:	eba5 0509 	sub.w	r5, r5, r9
   42768:	6026      	str	r6, [r4, #0]
   4276a:	463e      	mov	r6, r7
   4276c:	60a5      	str	r5, [r4, #8]
   4276e:	42be      	cmp	r6, r7
   42770:	d900      	bls.n	42774 <__ssputs_r+0x86>
   42772:	463e      	mov	r6, r7
   42774:	4632      	mov	r2, r6
   42776:	4641      	mov	r1, r8
   42778:	6820      	ldr	r0, [r4, #0]
   4277a:	f7ff fe9b 	bl	424b4 <memmove>
   4277e:	68a3      	ldr	r3, [r4, #8]
   42780:	2000      	movs	r0, #0
   42782:	1b9b      	subs	r3, r3, r6
   42784:	60a3      	str	r3, [r4, #8]
   42786:	6823      	ldr	r3, [r4, #0]
   42788:	4433      	add	r3, r6
   4278a:	6023      	str	r3, [r4, #0]
   4278c:	e7db      	b.n	42746 <__ssputs_r+0x58>
   4278e:	462a      	mov	r2, r5
   42790:	f7ff ff87 	bl	426a2 <_realloc_r>
   42794:	4606      	mov	r6, r0
   42796:	2800      	cmp	r0, #0
   42798:	d1e1      	bne.n	4275e <__ssputs_r+0x70>
   4279a:	6921      	ldr	r1, [r4, #16]
   4279c:	4650      	mov	r0, sl
   4279e:	f7f7 fd29 	bl	3a1f4 <_free_r>
   427a2:	e7c7      	b.n	42734 <__ssputs_r+0x46>

000427a4 <_sungetc_r>:
   427a4:	b538      	push	{r3, r4, r5, lr}
   427a6:	1c4b      	adds	r3, r1, #1
   427a8:	4614      	mov	r4, r2
   427aa:	d103      	bne.n	427b4 <_sungetc_r+0x10>
   427ac:	f04f 35ff 	mov.w	r5, #4294967295
   427b0:	4628      	mov	r0, r5
   427b2:	bd38      	pop	{r3, r4, r5, pc}
   427b4:	8993      	ldrh	r3, [r2, #12]
   427b6:	b2cd      	uxtb	r5, r1
   427b8:	f023 0320 	bic.w	r3, r3, #32
   427bc:	8193      	strh	r3, [r2, #12]
   427be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   427c0:	6852      	ldr	r2, [r2, #4]
   427c2:	b18b      	cbz	r3, 427e8 <_sungetc_r+0x44>
   427c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   427c6:	4293      	cmp	r3, r2
   427c8:	dd08      	ble.n	427dc <_sungetc_r+0x38>
   427ca:	6823      	ldr	r3, [r4, #0]
   427cc:	1e5a      	subs	r2, r3, #1
   427ce:	6022      	str	r2, [r4, #0]
   427d0:	f803 5c01 	strb.w	r5, [r3, #-1]
   427d4:	6863      	ldr	r3, [r4, #4]
   427d6:	3301      	adds	r3, #1
   427d8:	6063      	str	r3, [r4, #4]
   427da:	e7e9      	b.n	427b0 <_sungetc_r+0xc>
   427dc:	4621      	mov	r1, r4
   427de:	f000 f89d 	bl	4291c <__submore>
   427e2:	2800      	cmp	r0, #0
   427e4:	d0f1      	beq.n	427ca <_sungetc_r+0x26>
   427e6:	e7e1      	b.n	427ac <_sungetc_r+0x8>
   427e8:	6921      	ldr	r1, [r4, #16]
   427ea:	6823      	ldr	r3, [r4, #0]
   427ec:	b151      	cbz	r1, 42804 <_sungetc_r+0x60>
   427ee:	4299      	cmp	r1, r3
   427f0:	d208      	bcs.n	42804 <_sungetc_r+0x60>
   427f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   427f6:	42a9      	cmp	r1, r5
   427f8:	d104      	bne.n	42804 <_sungetc_r+0x60>
   427fa:	3b01      	subs	r3, #1
   427fc:	3201      	adds	r2, #1
   427fe:	6023      	str	r3, [r4, #0]
   42800:	6062      	str	r2, [r4, #4]
   42802:	e7d5      	b.n	427b0 <_sungetc_r+0xc>
   42804:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   42808:	f104 0344 	add.w	r3, r4, #68	; 0x44
   4280c:	6363      	str	r3, [r4, #52]	; 0x34
   4280e:	2303      	movs	r3, #3
   42810:	63a3      	str	r3, [r4, #56]	; 0x38
   42812:	4623      	mov	r3, r4
   42814:	f803 5f46 	strb.w	r5, [r3, #70]!
   42818:	6023      	str	r3, [r4, #0]
   4281a:	2301      	movs	r3, #1
   4281c:	e7dc      	b.n	427d8 <_sungetc_r+0x34>

0004281e <__ssrefill_r>:
   4281e:	b510      	push	{r4, lr}
   42820:	460c      	mov	r4, r1
   42822:	6b49      	ldr	r1, [r1, #52]	; 0x34
   42824:	b169      	cbz	r1, 42842 <__ssrefill_r+0x24>
   42826:	f104 0344 	add.w	r3, r4, #68	; 0x44
   4282a:	4299      	cmp	r1, r3
   4282c:	d001      	beq.n	42832 <__ssrefill_r+0x14>
   4282e:	f7f7 fce1 	bl	3a1f4 <_free_r>
   42832:	2000      	movs	r0, #0
   42834:	6c23      	ldr	r3, [r4, #64]	; 0x40
   42836:	6360      	str	r0, [r4, #52]	; 0x34
   42838:	6063      	str	r3, [r4, #4]
   4283a:	b113      	cbz	r3, 42842 <__ssrefill_r+0x24>
   4283c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   4283e:	6023      	str	r3, [r4, #0]
   42840:	bd10      	pop	{r4, pc}
   42842:	6923      	ldr	r3, [r4, #16]
   42844:	f04f 30ff 	mov.w	r0, #4294967295
   42848:	6023      	str	r3, [r4, #0]
   4284a:	2300      	movs	r3, #0
   4284c:	6063      	str	r3, [r4, #4]
   4284e:	89a3      	ldrh	r3, [r4, #12]
   42850:	f043 0320 	orr.w	r3, r3, #32
   42854:	81a3      	strh	r3, [r4, #12]
   42856:	e7f3      	b.n	42840 <__ssrefill_r+0x22>

00042858 <__sccl>:
   42858:	b570      	push	{r4, r5, r6, lr}
   4285a:	780b      	ldrb	r3, [r1, #0]
   4285c:	4604      	mov	r4, r0
   4285e:	2b5e      	cmp	r3, #94	; 0x5e
   42860:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   42864:	bf13      	iteet	ne
   42866:	1c48      	addne	r0, r1, #1
   42868:	1c88      	addeq	r0, r1, #2
   4286a:	784b      	ldrbeq	r3, [r1, #1]
   4286c:	2200      	movne	r2, #0
   4286e:	bf08      	it	eq
   42870:	2201      	moveq	r2, #1
   42872:	1e61      	subs	r1, r4, #1
   42874:	f801 2f01 	strb.w	r2, [r1, #1]!
   42878:	42a9      	cmp	r1, r5
   4287a:	d1fb      	bne.n	42874 <__sccl+0x1c>
   4287c:	b90b      	cbnz	r3, 42882 <__sccl+0x2a>
   4287e:	3801      	subs	r0, #1
   42880:	bd70      	pop	{r4, r5, r6, pc}
   42882:	f082 0201 	eor.w	r2, r2, #1
   42886:	4605      	mov	r5, r0
   42888:	54e2      	strb	r2, [r4, r3]
   4288a:	4628      	mov	r0, r5
   4288c:	f810 1b01 	ldrb.w	r1, [r0], #1
   42890:	292d      	cmp	r1, #45	; 0x2d
   42892:	d006      	beq.n	428a2 <__sccl+0x4a>
   42894:	295d      	cmp	r1, #93	; 0x5d
   42896:	d0f3      	beq.n	42880 <__sccl+0x28>
   42898:	b909      	cbnz	r1, 4289e <__sccl+0x46>
   4289a:	4628      	mov	r0, r5
   4289c:	e7f0      	b.n	42880 <__sccl+0x28>
   4289e:	460b      	mov	r3, r1
   428a0:	e7f1      	b.n	42886 <__sccl+0x2e>
   428a2:	786e      	ldrb	r6, [r5, #1]
   428a4:	2e5d      	cmp	r6, #93	; 0x5d
   428a6:	d0fa      	beq.n	4289e <__sccl+0x46>
   428a8:	42b3      	cmp	r3, r6
   428aa:	dcf8      	bgt.n	4289e <__sccl+0x46>
   428ac:	3502      	adds	r5, #2
   428ae:	4619      	mov	r1, r3
   428b0:	3101      	adds	r1, #1
   428b2:	428e      	cmp	r6, r1
   428b4:	5462      	strb	r2, [r4, r1]
   428b6:	dcfb      	bgt.n	428b0 <__sccl+0x58>
   428b8:	1af1      	subs	r1, r6, r3
   428ba:	1c58      	adds	r0, r3, #1
   428bc:	3901      	subs	r1, #1
   428be:	42b3      	cmp	r3, r6
   428c0:	bfa8      	it	ge
   428c2:	2100      	movge	r1, #0
   428c4:	1843      	adds	r3, r0, r1
   428c6:	e7e0      	b.n	4288a <__sccl+0x32>

000428c8 <_raise_r>:
   428c8:	291f      	cmp	r1, #31
   428ca:	b538      	push	{r3, r4, r5, lr}
   428cc:	4604      	mov	r4, r0
   428ce:	460d      	mov	r5, r1
   428d0:	d904      	bls.n	428dc <_raise_r+0x14>
   428d2:	2316      	movs	r3, #22
   428d4:	6003      	str	r3, [r0, #0]
   428d6:	f04f 30ff 	mov.w	r0, #4294967295
   428da:	bd38      	pop	{r3, r4, r5, pc}
   428dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   428de:	b112      	cbz	r2, 428e6 <_raise_r+0x1e>
   428e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   428e4:	b94b      	cbnz	r3, 428fa <_raise_r+0x32>
   428e6:	4620      	mov	r0, r4
   428e8:	f000 f816 	bl	42918 <_getpid_r>
   428ec:	462a      	mov	r2, r5
   428ee:	4601      	mov	r1, r0
   428f0:	4620      	mov	r0, r4
   428f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   428f6:	f7fa b925 	b.w	3cb44 <_kill_r>
   428fa:	2b01      	cmp	r3, #1
   428fc:	d00a      	beq.n	42914 <_raise_r+0x4c>
   428fe:	1c59      	adds	r1, r3, #1
   42900:	d103      	bne.n	4290a <_raise_r+0x42>
   42902:	2316      	movs	r3, #22
   42904:	6003      	str	r3, [r0, #0]
   42906:	2001      	movs	r0, #1
   42908:	e7e7      	b.n	428da <_raise_r+0x12>
   4290a:	2400      	movs	r4, #0
   4290c:	4628      	mov	r0, r5
   4290e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   42912:	4798      	blx	r3
   42914:	2000      	movs	r0, #0
   42916:	e7e0      	b.n	428da <_raise_r+0x12>

00042918 <_getpid_r>:
   42918:	f7fb bac0 	b.w	3de9c <_getpid>

0004291c <__submore>:
   4291c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42920:	460c      	mov	r4, r1
   42922:	6b49      	ldr	r1, [r1, #52]	; 0x34
   42924:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42928:	4299      	cmp	r1, r3
   4292a:	d11a      	bne.n	42962 <__submore+0x46>
   4292c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   42930:	f7f7 fcac 	bl	3a28c <_malloc_r>
   42934:	b918      	cbnz	r0, 4293e <__submore+0x22>
   42936:	f04f 30ff 	mov.w	r0, #4294967295
   4293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4293e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   42942:	6360      	str	r0, [r4, #52]	; 0x34
   42944:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   42948:	63a3      	str	r3, [r4, #56]	; 0x38
   4294a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   4294e:	7083      	strb	r3, [r0, #2]
   42950:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   42954:	7043      	strb	r3, [r0, #1]
   42956:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   4295a:	7003      	strb	r3, [r0, #0]
   4295c:	6020      	str	r0, [r4, #0]
   4295e:	2000      	movs	r0, #0
   42960:	e7eb      	b.n	4293a <__submore+0x1e>
   42962:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   42964:	0077      	lsls	r7, r6, #1
   42966:	463a      	mov	r2, r7
   42968:	f7ff fe9b 	bl	426a2 <_realloc_r>
   4296c:	4605      	mov	r5, r0
   4296e:	2800      	cmp	r0, #0
   42970:	d0e1      	beq.n	42936 <__submore+0x1a>
   42972:	eb00 0806 	add.w	r8, r0, r6
   42976:	4601      	mov	r1, r0
   42978:	4632      	mov	r2, r6
   4297a:	4640      	mov	r0, r8
   4297c:	f7ff f8d0 	bl	41b20 <memcpy>
   42980:	f8c4 8000 	str.w	r8, [r4]
   42984:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   42988:	e7e9      	b.n	4295e <__submore+0x42>

0004298a <__ascii_wctomb>:
   4298a:	b149      	cbz	r1, 429a0 <__ascii_wctomb+0x16>
   4298c:	2aff      	cmp	r2, #255	; 0xff
   4298e:	bf8d      	iteet	hi
   42990:	238a      	movhi	r3, #138	; 0x8a
   42992:	2001      	movls	r0, #1
   42994:	700a      	strbls	r2, [r1, #0]
   42996:	6003      	strhi	r3, [r0, #0]
   42998:	bf88      	it	hi
   4299a:	f04f 30ff 	movhi.w	r0, #4294967295
   4299e:	4770      	bx	lr
   429a0:	4608      	mov	r0, r1
   429a2:	4770      	bx	lr

000429a4 <_malloc_usable_size_r>:
   429a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   429a8:	1f18      	subs	r0, r3, #4
   429aa:	2b00      	cmp	r3, #0
   429ac:	bfbc      	itt	lt
   429ae:	580b      	ldrlt	r3, [r1, r0]
   429b0:	18c0      	addlt	r0, r0, r3
   429b2:	4770      	bx	lr

000429b4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   429b4:	f7ef bece 	b.w	32754 <SystemInit>
